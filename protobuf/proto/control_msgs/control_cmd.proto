syntax = "proto2";
package control;

// import "google/protobuf/any.proto";
import "common_msgs/basic_msgs/drive_state.proto";
import "common_msgs/basic_msgs/header.proto";
import "common_msgs/basic_msgs/pnc_point.proto";
import "common_msgs/basic_msgs/vehicle_signal.proto";
import "common_msgs/chassis_msgs/chassis.proto";
import "control_msgs/input_debug.proto";
import "control_msgs/pad_msg.proto";

enum TurnSignal {
  TURN_NONE = 0;
  TURN_LEFT = 1;
  TURN_RIGHT = 2;
}

message LatencyStats {
  optional double total_time_ms = 1;
  repeated double controller_time_ms = 2;
  optional bool total_time_exceeded = 3;
}

// next id : 27
message ControlCommand {
  optional control.common.Header header = 1;
  // target throttle in percentage [0, 100]
  optional double throttle = 2 [default = 0.0];

  // target brake in percentage [0, 100]
  optional double brake = 3 [default = 0.0];

  // target non-directional steering rate, in percentage of full scale per
  // second [0, 100]
  optional double steering_rate = 4 [default = 0.0];

  // target steering angle, in percentage of full scale [-100, 100]
  optional double steering_target = 5 [default = 0.0];

  // parking brake engage. true: engaged
  optional bool parking_brake = 6;

  // target speed, in m/s
  optional double speed = 7 [default = 0.0];

  // target acceleration in m`s^-2
  optional double acceleration = 8 [default = 0.0]; 

  // model reset
  optional bool reset_model = 9 [deprecated = true];
  // engine on/off, true: engine on
  optional bool engine_on_off = 10;
  // completion percentage of trajectory planned in last cycle
  optional double trajectory_fraction = 11;
  optional control.canbus.Chassis.DrivingMode driving_mode = 12[deprecated = true];
  optional control.canbus.Chassis.GearPosition gear_location = 13;

  optional Debug debug = 14;
  optional control.common.VehicleSignal signal = 15;
  optional LatencyStats latency_stats = 16;
  optional PadMessage pad_msg = 17;
  optional control.common.EngageAdvice engage_advice = 18;
  optional bool is_in_safe_mode = 19 [default = false];

  // deprecated fields
  optional bool left_turn = 20 [deprecated = true];
  optional bool right_turn = 21 [deprecated = true];
  optional bool high_beam = 22 [deprecated = true];
  optional bool low_beam = 23 [deprecated = true];
  optional bool horn = 24 [deprecated = true];
  optional TurnSignal turnsignal = 25 [deprecated = true];
  optional int32 door_fl_status = 26;
  optional bool vehicle_stop_status = 27;
  optional uint32 epb_cmd = 28;
  optional uint32 pto_cmd = 29;

  // for electric Loader
  optional double arm_angle = 30 [default = 0.0];
  optional bool arm_enable = 31 [default = false];
  optional double shovel_angle = 32 [default = 0.0];
  optional bool shovel_enable = 33 [default = false];
  optional bool estop = 34 [default = false];
  optional bool rapid_shake = 35 [default = false];
}

message SimpleLongitudinalDebug {
  optional double station_reference = 1;
  optional double station_error = 2;
  optional double station_error_limited = 3;
  optional double preview_station_error = 4;
  optional double speed_reference = 5;
  optional double speed_error = 6;
  optional double speed_controller_input_limited = 7;
  optional double preview_speed_reference = 8;
  optional double preview_speed_error = 9;
  optional double preview_acceleration_reference = 10;
  optional double acceleration_cmd_closeloop = 11;
  optional double acceleration_cmd = 12;
  optional double acceleration_lookup = 13;
  optional double speed_lookup = 14;
  optional double calibration_value = 15;
  optional double throttle_cmd = 16;
  optional double brake_cmd = 17;
  optional bool is_full_stop = 18;
  optional double slope_offset_compensation = 19;
  optional double current_station = 20;
  optional double path_remain = 21;
  optional int32 pid_saturation_status = 22;
  optional int32 leadlag_saturation_status = 23;
  optional double speed_offset = 24;
  optional double current_speed = 25;
  optional double acceleration_reference = 26;
  optional double current_acceleration = 27;
  optional double acceleration_error = 28;
  optional double jerk_reference = 29;
  optional double current_jerk = 30;
  optional double jerk_error = 31;
  optional control.common.TrajectoryPoint current_matched_point = 32;
  optional control.common.TrajectoryPoint current_reference_point = 33;
  optional control.common.TrajectoryPoint preview_reference_point = 34;
  optional double acceleration_lookup_limit = 35;
  optional double vehicle_pitch = 36;
  optional bool is_epb_brake = 37;
  optional double current_steer_interval = 38;
  optional bool is_wait_steer = 39;
  optional bool is_stop_reason_by_destination = 40;
  optional bool is_stop_reason_by_prdestrian = 41;
  optional bool is_full_stop_soft = 42;
  optional double stop_acc_cmd = 51;
  optional control.canbus.Chassis.GearPosition gear_location = 52;
  optional bool is_stop_scenario = 53;
  optional double contraposition_x = 54;
  optional uint32 stopstate = 55;
  optional bool is_take_off_state = 56;
}

message SimpleLateralDebug {
  optional double lateral_error = 1;
  optional double ref_heading = 2;
  optional double heading = 3;
  optional double heading_error = 4;
  optional double heading_error_rate = 5;
  optional double lateral_error_rate = 6;
  optional double curvature = 7;
  optional double steer_angle = 8;
  optional double steer_angle_feedforward = 9;
  optional double steer_angle_lateral_contribution = 10;
  optional double steer_angle_lateral_rate_contribution = 11;
  optional double steer_angle_heading_contribution = 12;
  optional double steer_angle_heading_rate_contribution = 13;
  optional double steer_angle_feedback = 14;
  optional double steering_position = 15;
  optional double ref_speed = 16;
  optional double steer_angle_limited = 17;

  // time derivative of lateral error rate, in m/s^2
  optional double lateral_acceleration = 18;
  // second time derivative of lateral error rate, in m/s^3
  optional double lateral_jerk = 19;

  optional double ref_heading_rate = 20;
  optional double heading_rate = 21;

  // heading_acceleration, as known as yaw acceleration, is the time derivative
  // of heading rate,  in rad/s^2
  optional double ref_heading_acceleration = 22;
  optional double heading_acceleration = 23;
  optional double heading_error_acceleration = 24;

  // heading_jerk, as known as yaw jerk, is the second time derivative of
  // heading rate, in rad/s^3
  optional double ref_heading_jerk = 25;
  optional double heading_jerk = 26;
  optional double heading_error_jerk = 27;

  // modified lateral_error and heading_error with look-ahead or look-back
  // station, as the feedback term for control usage
  optional double lateral_error_feedback = 28;
  optional double heading_error_feedback = 29;

  // current planning target point
  optional control.common.TrajectoryPoint current_target_point = 30;

  // Augmented feedback control term in addition to LQR control
  optional double steer_angle_feedback_augment = 31;

  // Mrac control status and feedback states for steer control
  optional MracDebug steer_mrac_debug = 32;
  optional bool steer_mrac_enable_status = 33;

  // lat acc in ENU, in m/s^2
  optional double lateral_centripetal_acceleration = 34;
  optional double preview_pos_curvature = 35;
  optional float preview_heading_error = 36;
}

message SimpleMPCDebug {
  optional double lateral_error = 1;
  optional double ref_heading = 2;
  optional double heading = 3;
  optional double heading_error = 4;
  optional double heading_error_rate = 5;
  optional double lateral_error_rate = 6;
  optional double curvature = 7;
  optional double steer_angle = 8;
  optional double steer_angle_feedforward = 9;
  optional double steer_angle_lateral_contribution = 10;
  optional double steer_angle_lateral_rate_contribution = 11;
  optional double steer_angle_heading_contribution = 12;
  optional double steer_angle_heading_rate_contribution = 13;
  optional double steer_angle_feedback = 14;
  optional double steering_position = 15;
  optional double ref_speed = 16;
  optional double steer_angle_limited = 17;
  optional double station_reference = 18;
  optional double station_error = 19;
  optional double speed_reference = 20;
  optional double speed_error = 21;
  optional double acceleration_reference = 22;
  optional bool is_full_stop = 23;
  optional double station_feedback = 24;
  optional double speed_feedback = 25;
  optional double acceleration_cmd_closeloop = 26;
  optional double acceleration_cmd = 27;
  optional double acceleration_lookup = 28;
  optional double speed_lookup = 29;
  optional double calibration_value = 30;
  optional double steer_unconstrained_control_diff = 31;
  optional double steer_angle_feedforward_compensation = 32;
  repeated double matrix_q_updated = 33;  // matrix_q_updated_ size = 6
  repeated double matrix_r_updated = 34;  // matrix_r_updated_ size = 2

  // time derivative of lateral error rate, in m/s^2
  optional double lateral_acceleration = 35;
  // second time derivative of lateral error rate, in m/s^3
  optional double lateral_jerk = 36;

  optional double ref_heading_rate = 37;
  optional double heading_rate = 38;

  // heading_acceleration, as known as yaw acceleration, is the time derivative
  // of heading rate,  in rad/s^2
  optional double ref_heading_acceleration = 39;
  optional double heading_acceleration = 40;
  optional double heading_error_acceleration = 41;

  // heading_jerk, as known as yaw jerk, is the second time derivative of
  // heading rate, in rad/s^3
  optional double ref_heading_jerk = 42;
  optional double heading_jerk = 43;
  optional double heading_error_jerk = 44;

  optional double acceleration_feedback = 45;
  optional double acceleration_error = 46;
  optional double jerk_reference = 47;
  optional double jerk_feedback = 48;
  optional double jerk_error = 49;

  // modified lateral_error and heading_error with look-ahead or look-back
  // station, as the feedback term for control usage
  optional double lateral_error_feedback = 50;
  optional double heading_error_feedback = 51;
  // Augmented feedback control term in addition to MPC control
  optional double steer_angle_feedback_augment = 52;
  optional control.common.TrajectoryPoint current_matched_point = 53;
  optional control.common.TrajectoryPoint current_reference_point = 54;
  optional control.common.TrajectoryPoint preview_reference_point = 55;
  optional double preview_station_error = 56;
  optional double preview_speed_reference = 57;
  optional double preview_speed_error = 58;
  optional double preview_acceleration_reference = 59;
  optional double vehicle_pitch = 60;
  optional double slope_offset_compensation = 61;
  optional double path_remain = 62;
  optional double acceleration_lookup_offset = 63;
  optional double acceleration_vrf = 64;
}

message MracDebug {
  optional int32 mrac_model_order = 1;
  repeated double mrac_reference_state = 2;
  repeated double mrac_state_error = 3;
  optional MracAdaptiveGain mrac_adaptive_gain = 4;
  optional int32 mrac_reference_saturation_status = 5;
  optional int32 mrac_control_saturation_status = 6;
}

message MracAdaptiveGain {
  repeated double state_adaptive_gain = 1;
  repeated double input_adaptive_gain = 2;
  repeated double nonlinear_adaptive_gain = 3;
}

message Debug {
  optional SimpleLongitudinalDebug simple_lon_debug = 1;
  optional SimpleLateralDebug simple_lat_debug = 2;
  optional InputDebug input_debug = 3;
  optional SimpleMPCDebug simple_mpc_debug = 4;
  optional LodmcDebug lodmc_debug = 5;
}

message LodmcDebug {
  optional double torq_command = 1;
  optional double torq_feed_forward = 2;
  optional double torq_feed_back = 3;
  optional double dmc_f_roll = 4;
  optional double dmc_f_air = 5;
  optional double dmc_f_slope = 6;
  optional double dmc_f_acc = 7;
  optional double acc_error = 8;
  optional double mass = 9;
  optional double target_acc = 10;
  optional double vehilce_acc = 11;
  optional double vehspeed = 12;
  optional double roadslope = 13;
  optional double target_acc_filter = 14;
}
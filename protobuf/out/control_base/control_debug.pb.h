// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/control_debug.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcontrol_5fdebug_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcontrol_5fdebug_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "control_msgs/control_cmd.pb.h"
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/pnc_point.pb.h"
#include "control_base/check_status.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcontrol_5fdebug_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto;
namespace control {
class CleaningSafetyCheckDebug;
struct CleaningSafetyCheckDebugDefaultTypeInternal;
extern CleaningSafetyCheckDebugDefaultTypeInternal _CleaningSafetyCheckDebug_default_instance_;
class ControlCheckDebug;
struct ControlCheckDebugDefaultTypeInternal;
extern ControlCheckDebugDefaultTypeInternal _ControlCheckDebug_default_instance_;
class ControlDebugInfo;
struct ControlDebugInfoDefaultTypeInternal;
extern ControlDebugInfoDefaultTypeInternal _ControlDebugInfo_default_instance_;
class SimpleAntiSlopeDebug;
struct SimpleAntiSlopeDebugDefaultTypeInternal;
extern SimpleAntiSlopeDebugDefaultTypeInternal _SimpleAntiSlopeDebug_default_instance_;
class SimpleLateralPlusDebug;
struct SimpleLateralPlusDebugDefaultTypeInternal;
extern SimpleLateralPlusDebugDefaultTypeInternal _SimpleLateralPlusDebug_default_instance_;
class SimpleLongitudinalPlusDebug;
struct SimpleLongitudinalPlusDebugDefaultTypeInternal;
extern SimpleLongitudinalPlusDebugDefaultTypeInternal _SimpleLongitudinalPlusDebug_default_instance_;
class SimpleMPCPlusDebug;
struct SimpleMPCPlusDebugDefaultTypeInternal;
extern SimpleMPCPlusDebugDefaultTypeInternal _SimpleMPCPlusDebug_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {

// ===================================================================


// -------------------------------------------------------------------

class SimpleAntiSlopeDebug final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.SimpleAntiSlopeDebug) */ {
 public:
  inline SimpleAntiSlopeDebug() : SimpleAntiSlopeDebug(nullptr) {}
  ~SimpleAntiSlopeDebug() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleAntiSlopeDebug(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleAntiSlopeDebug(const SimpleAntiSlopeDebug& from) : SimpleAntiSlopeDebug(nullptr, from) {}
  inline SimpleAntiSlopeDebug(SimpleAntiSlopeDebug&& from) noexcept
      : SimpleAntiSlopeDebug(nullptr, std::move(from)) {}
  inline SimpleAntiSlopeDebug& operator=(const SimpleAntiSlopeDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleAntiSlopeDebug& operator=(SimpleAntiSlopeDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleAntiSlopeDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleAntiSlopeDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleAntiSlopeDebug*>(
        &_SimpleAntiSlopeDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SimpleAntiSlopeDebug& a, SimpleAntiSlopeDebug& b) { a.Swap(&b); }
  inline void Swap(SimpleAntiSlopeDebug* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleAntiSlopeDebug* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleAntiSlopeDebug* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SimpleAntiSlopeDebug>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleAntiSlopeDebug& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleAntiSlopeDebug& from) { SimpleAntiSlopeDebug::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SimpleAntiSlopeDebug* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.SimpleAntiSlopeDebug"; }

 protected:
  explicit SimpleAntiSlopeDebug(::google::protobuf::Arena* arena);
  SimpleAntiSlopeDebug(::google::protobuf::Arena* arena, const SimpleAntiSlopeDebug& from);
  SimpleAntiSlopeDebug(::google::protobuf::Arena* arena, SimpleAntiSlopeDebug&& from) noexcept
      : SimpleAntiSlopeDebug(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHillStartWindowFieldNumber = 1,
    kPreviewLengthFieldNumber = 2,
    kQuitHillStartSpeedFieldNumber = 3,
    kNormalStartTartgetAccFieldNumber = 4,
    kHillStartAccGainRateFieldNumber = 7,
    kNormalStartAccGainRateFieldNumber = 8,
    kInHillStartConditionFieldNumber = 5,
    kInNormalStartConditionFieldNumber = 6,
    kOnObstacleFieldNumber = 9,
    kFromElseToAutoFieldNumber = 10,
    kPreviousIsAutoFieldNumber = 11,
    kUphillTooFastFieldNumber = 14,
    kOnlyUseBrkDownhillFieldNumber = 15,
    kEraseBrkInGoFieldNumber = 16,
    kAntiCmdBrakeFieldNumber = 12,
    kAntiCmdThrottleFieldNumber = 13,
    kEraseBrkInEndFieldNumber = 17,
  };
  // optional int32 hill_start_window = 1;
  bool has_hill_start_window() const;
  void clear_hill_start_window() ;
  ::int32_t hill_start_window() const;
  void set_hill_start_window(::int32_t value);

  private:
  ::int32_t _internal_hill_start_window() const;
  void _internal_set_hill_start_window(::int32_t value);

  public:
  // optional int32 preview_length = 2;
  bool has_preview_length() const;
  void clear_preview_length() ;
  ::int32_t preview_length() const;
  void set_preview_length(::int32_t value);

  private:
  ::int32_t _internal_preview_length() const;
  void _internal_set_preview_length(::int32_t value);

  public:
  // optional double quit_hill_start_speed = 3;
  bool has_quit_hill_start_speed() const;
  void clear_quit_hill_start_speed() ;
  double quit_hill_start_speed() const;
  void set_quit_hill_start_speed(double value);

  private:
  double _internal_quit_hill_start_speed() const;
  void _internal_set_quit_hill_start_speed(double value);

  public:
  // optional double normal_start_tartget_acc = 4;
  bool has_normal_start_tartget_acc() const;
  void clear_normal_start_tartget_acc() ;
  double normal_start_tartget_acc() const;
  void set_normal_start_tartget_acc(double value);

  private:
  double _internal_normal_start_tartget_acc() const;
  void _internal_set_normal_start_tartget_acc(double value);

  public:
  // optional double hill_start_acc_gain_rate = 7;
  bool has_hill_start_acc_gain_rate() const;
  void clear_hill_start_acc_gain_rate() ;
  double hill_start_acc_gain_rate() const;
  void set_hill_start_acc_gain_rate(double value);

  private:
  double _internal_hill_start_acc_gain_rate() const;
  void _internal_set_hill_start_acc_gain_rate(double value);

  public:
  // optional double normal_start_acc_gain_rate = 8;
  bool has_normal_start_acc_gain_rate() const;
  void clear_normal_start_acc_gain_rate() ;
  double normal_start_acc_gain_rate() const;
  void set_normal_start_acc_gain_rate(double value);

  private:
  double _internal_normal_start_acc_gain_rate() const;
  void _internal_set_normal_start_acc_gain_rate(double value);

  public:
  // optional bool in_hill_start_condition = 5;
  bool has_in_hill_start_condition() const;
  void clear_in_hill_start_condition() ;
  bool in_hill_start_condition() const;
  void set_in_hill_start_condition(bool value);

  private:
  bool _internal_in_hill_start_condition() const;
  void _internal_set_in_hill_start_condition(bool value);

  public:
  // optional bool in_normal_start_condition = 6;
  bool has_in_normal_start_condition() const;
  void clear_in_normal_start_condition() ;
  bool in_normal_start_condition() const;
  void set_in_normal_start_condition(bool value);

  private:
  bool _internal_in_normal_start_condition() const;
  void _internal_set_in_normal_start_condition(bool value);

  public:
  // optional bool on_obstacle = 9;
  bool has_on_obstacle() const;
  void clear_on_obstacle() ;
  bool on_obstacle() const;
  void set_on_obstacle(bool value);

  private:
  bool _internal_on_obstacle() const;
  void _internal_set_on_obstacle(bool value);

  public:
  // optional bool from_else_to_auto = 10;
  bool has_from_else_to_auto() const;
  void clear_from_else_to_auto() ;
  bool from_else_to_auto() const;
  void set_from_else_to_auto(bool value);

  private:
  bool _internal_from_else_to_auto() const;
  void _internal_set_from_else_to_auto(bool value);

  public:
  // optional bool previous_is_auto = 11;
  bool has_previous_is_auto() const;
  void clear_previous_is_auto() ;
  bool previous_is_auto() const;
  void set_previous_is_auto(bool value);

  private:
  bool _internal_previous_is_auto() const;
  void _internal_set_previous_is_auto(bool value);

  public:
  // optional bool uphill_too_fast = 14;
  bool has_uphill_too_fast() const;
  void clear_uphill_too_fast() ;
  bool uphill_too_fast() const;
  void set_uphill_too_fast(bool value);

  private:
  bool _internal_uphill_too_fast() const;
  void _internal_set_uphill_too_fast(bool value);

  public:
  // optional bool only_use_brk_downhill = 15;
  bool has_only_use_brk_downhill() const;
  void clear_only_use_brk_downhill() ;
  bool only_use_brk_downhill() const;
  void set_only_use_brk_downhill(bool value);

  private:
  bool _internal_only_use_brk_downhill() const;
  void _internal_set_only_use_brk_downhill(bool value);

  public:
  // optional bool erase_brk_in_go = 16;
  bool has_erase_brk_in_go() const;
  void clear_erase_brk_in_go() ;
  bool erase_brk_in_go() const;
  void set_erase_brk_in_go(bool value);

  private:
  bool _internal_erase_brk_in_go() const;
  void _internal_set_erase_brk_in_go(bool value);

  public:
  // optional double anti_cmd_brake = 12;
  bool has_anti_cmd_brake() const;
  void clear_anti_cmd_brake() ;
  double anti_cmd_brake() const;
  void set_anti_cmd_brake(double value);

  private:
  double _internal_anti_cmd_brake() const;
  void _internal_set_anti_cmd_brake(double value);

  public:
  // optional double anti_cmd_throttle = 13;
  bool has_anti_cmd_throttle() const;
  void clear_anti_cmd_throttle() ;
  double anti_cmd_throttle() const;
  void set_anti_cmd_throttle(double value);

  private:
  double _internal_anti_cmd_throttle() const;
  void _internal_set_anti_cmd_throttle(double value);

  public:
  // optional bool erase_brk_in_end = 17;
  bool has_erase_brk_in_end() const;
  void clear_erase_brk_in_end() ;
  bool erase_brk_in_end() const;
  void set_erase_brk_in_end(bool value);

  private:
  bool _internal_erase_brk_in_end() const;
  void _internal_set_erase_brk_in_end(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.SimpleAntiSlopeDebug)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SimpleAntiSlopeDebug_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleAntiSlopeDebug& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t hill_start_window_;
    ::int32_t preview_length_;
    double quit_hill_start_speed_;
    double normal_start_tartget_acc_;
    double hill_start_acc_gain_rate_;
    double normal_start_acc_gain_rate_;
    bool in_hill_start_condition_;
    bool in_normal_start_condition_;
    bool on_obstacle_;
    bool from_else_to_auto_;
    bool previous_is_auto_;
    bool uphill_too_fast_;
    bool only_use_brk_downhill_;
    bool erase_brk_in_go_;
    double anti_cmd_brake_;
    double anti_cmd_throttle_;
    bool erase_brk_in_end_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class ControlCheckDebug final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.ControlCheckDebug) */ {
 public:
  inline ControlCheckDebug() : ControlCheckDebug(nullptr) {}
  ~ControlCheckDebug() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControlCheckDebug(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControlCheckDebug(const ControlCheckDebug& from) : ControlCheckDebug(nullptr, from) {}
  inline ControlCheckDebug(ControlCheckDebug&& from) noexcept
      : ControlCheckDebug(nullptr, std::move(from)) {}
  inline ControlCheckDebug& operator=(const ControlCheckDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCheckDebug& operator=(ControlCheckDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCheckDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCheckDebug* internal_default_instance() {
    return reinterpret_cast<const ControlCheckDebug*>(
        &_ControlCheckDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ControlCheckDebug& a, ControlCheckDebug& b) { a.Swap(&b); }
  inline void Swap(ControlCheckDebug* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCheckDebug* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlCheckDebug* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ControlCheckDebug>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlCheckDebug& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControlCheckDebug& from) { ControlCheckDebug::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControlCheckDebug* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.ControlCheckDebug"; }

 protected:
  explicit ControlCheckDebug(::google::protobuf::Arena* arena);
  ControlCheckDebug(::google::protobuf::Arena* arena, const ControlCheckDebug& from);
  ControlCheckDebug(::google::protobuf::Arena* arena, ControlCheckDebug&& from) noexcept
      : ControlCheckDebug(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLateralErrorCheckResultFieldNumber = 1,
    kLateralErrorCheckECountFieldNumber = 2,
    kLateralErrorCheckWCountFieldNumber = 3,
    kHeadingErrorCheckResultFieldNumber = 4,
    kHeadingErrorCheckECountFieldNumber = 5,
    kHeadingErrorCheckWCountFieldNumber = 6,
    kStationErrorCheckResultFieldNumber = 7,
    kStationErrorCheckECountFieldNumber = 8,
    kStationErrorCheckWCountFieldNumber = 9,
    kSpeedErrorCheckResultFieldNumber = 10,
    kSpeedErrorCheckECountFieldNumber = 11,
    kSpeedErrorCheckWCountFieldNumber = 12,
    kLateralErrorEFieldNumber = 13,
    kLateralErrorWFieldNumber = 14,
  };
  // optional .control.ControlCheckStatus lateral_error_check_result = 1;
  bool has_lateral_error_check_result() const;
  void clear_lateral_error_check_result() ;
  ::control::ControlCheckStatus lateral_error_check_result() const;
  void set_lateral_error_check_result(::control::ControlCheckStatus value);

  private:
  ::control::ControlCheckStatus _internal_lateral_error_check_result() const;
  void _internal_set_lateral_error_check_result(::control::ControlCheckStatus value);

  public:
  // optional uint32 lateral_error_check_e_count = 2;
  bool has_lateral_error_check_e_count() const;
  void clear_lateral_error_check_e_count() ;
  ::uint32_t lateral_error_check_e_count() const;
  void set_lateral_error_check_e_count(::uint32_t value);

  private:
  ::uint32_t _internal_lateral_error_check_e_count() const;
  void _internal_set_lateral_error_check_e_count(::uint32_t value);

  public:
  // optional uint32 lateral_error_check_w_count = 3;
  bool has_lateral_error_check_w_count() const;
  void clear_lateral_error_check_w_count() ;
  ::uint32_t lateral_error_check_w_count() const;
  void set_lateral_error_check_w_count(::uint32_t value);

  private:
  ::uint32_t _internal_lateral_error_check_w_count() const;
  void _internal_set_lateral_error_check_w_count(::uint32_t value);

  public:
  // optional .control.ControlCheckStatus heading_error_check_result = 4;
  bool has_heading_error_check_result() const;
  void clear_heading_error_check_result() ;
  ::control::ControlCheckStatus heading_error_check_result() const;
  void set_heading_error_check_result(::control::ControlCheckStatus value);

  private:
  ::control::ControlCheckStatus _internal_heading_error_check_result() const;
  void _internal_set_heading_error_check_result(::control::ControlCheckStatus value);

  public:
  // optional uint32 heading_error_check_e_count = 5;
  bool has_heading_error_check_e_count() const;
  void clear_heading_error_check_e_count() ;
  ::uint32_t heading_error_check_e_count() const;
  void set_heading_error_check_e_count(::uint32_t value);

  private:
  ::uint32_t _internal_heading_error_check_e_count() const;
  void _internal_set_heading_error_check_e_count(::uint32_t value);

  public:
  // optional uint32 heading_error_check_w_count = 6;
  bool has_heading_error_check_w_count() const;
  void clear_heading_error_check_w_count() ;
  ::uint32_t heading_error_check_w_count() const;
  void set_heading_error_check_w_count(::uint32_t value);

  private:
  ::uint32_t _internal_heading_error_check_w_count() const;
  void _internal_set_heading_error_check_w_count(::uint32_t value);

  public:
  // optional .control.ControlCheckStatus station_error_check_result = 7;
  bool has_station_error_check_result() const;
  void clear_station_error_check_result() ;
  ::control::ControlCheckStatus station_error_check_result() const;
  void set_station_error_check_result(::control::ControlCheckStatus value);

  private:
  ::control::ControlCheckStatus _internal_station_error_check_result() const;
  void _internal_set_station_error_check_result(::control::ControlCheckStatus value);

  public:
  // optional uint32 station_error_check_e_count = 8;
  bool has_station_error_check_e_count() const;
  void clear_station_error_check_e_count() ;
  ::uint32_t station_error_check_e_count() const;
  void set_station_error_check_e_count(::uint32_t value);

  private:
  ::uint32_t _internal_station_error_check_e_count() const;
  void _internal_set_station_error_check_e_count(::uint32_t value);

  public:
  // optional uint32 station_error_check_w_count = 9;
  bool has_station_error_check_w_count() const;
  void clear_station_error_check_w_count() ;
  ::uint32_t station_error_check_w_count() const;
  void set_station_error_check_w_count(::uint32_t value);

  private:
  ::uint32_t _internal_station_error_check_w_count() const;
  void _internal_set_station_error_check_w_count(::uint32_t value);

  public:
  // optional .control.ControlCheckStatus speed_error_check_result = 10;
  bool has_speed_error_check_result() const;
  void clear_speed_error_check_result() ;
  ::control::ControlCheckStatus speed_error_check_result() const;
  void set_speed_error_check_result(::control::ControlCheckStatus value);

  private:
  ::control::ControlCheckStatus _internal_speed_error_check_result() const;
  void _internal_set_speed_error_check_result(::control::ControlCheckStatus value);

  public:
  // optional uint32 speed_error_check_e_count = 11;
  bool has_speed_error_check_e_count() const;
  void clear_speed_error_check_e_count() ;
  ::uint32_t speed_error_check_e_count() const;
  void set_speed_error_check_e_count(::uint32_t value);

  private:
  ::uint32_t _internal_speed_error_check_e_count() const;
  void _internal_set_speed_error_check_e_count(::uint32_t value);

  public:
  // optional uint32 speed_error_check_w_count = 12;
  bool has_speed_error_check_w_count() const;
  void clear_speed_error_check_w_count() ;
  ::uint32_t speed_error_check_w_count() const;
  void set_speed_error_check_w_count(::uint32_t value);

  private:
  ::uint32_t _internal_speed_error_check_w_count() const;
  void _internal_set_speed_error_check_w_count(::uint32_t value);

  public:
  // optional double lateral_error_e = 13;
  bool has_lateral_error_e() const;
  void clear_lateral_error_e() ;
  double lateral_error_e() const;
  void set_lateral_error_e(double value);

  private:
  double _internal_lateral_error_e() const;
  void _internal_set_lateral_error_e(double value);

  public:
  // optional double lateral_error_w = 14;
  bool has_lateral_error_w() const;
  void clear_lateral_error_w() ;
  double lateral_error_w() const;
  void set_lateral_error_w(double value);

  private:
  double _internal_lateral_error_w() const;
  void _internal_set_lateral_error_w(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.ControlCheckDebug)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ControlCheckDebug_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControlCheckDebug& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int lateral_error_check_result_;
    ::uint32_t lateral_error_check_e_count_;
    ::uint32_t lateral_error_check_w_count_;
    int heading_error_check_result_;
    ::uint32_t heading_error_check_e_count_;
    ::uint32_t heading_error_check_w_count_;
    int station_error_check_result_;
    ::uint32_t station_error_check_e_count_;
    ::uint32_t station_error_check_w_count_;
    int speed_error_check_result_;
    ::uint32_t speed_error_check_e_count_;
    ::uint32_t speed_error_check_w_count_;
    double lateral_error_e_;
    double lateral_error_w_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class SimpleMPCPlusDebug final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.SimpleMPCPlusDebug) */ {
 public:
  inline SimpleMPCPlusDebug() : SimpleMPCPlusDebug(nullptr) {}
  ~SimpleMPCPlusDebug() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleMPCPlusDebug(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleMPCPlusDebug(const SimpleMPCPlusDebug& from) : SimpleMPCPlusDebug(nullptr, from) {}
  inline SimpleMPCPlusDebug(SimpleMPCPlusDebug&& from) noexcept
      : SimpleMPCPlusDebug(nullptr, std::move(from)) {}
  inline SimpleMPCPlusDebug& operator=(const SimpleMPCPlusDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleMPCPlusDebug& operator=(SimpleMPCPlusDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleMPCPlusDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleMPCPlusDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleMPCPlusDebug*>(
        &_SimpleMPCPlusDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SimpleMPCPlusDebug& a, SimpleMPCPlusDebug& b) { a.Swap(&b); }
  inline void Swap(SimpleMPCPlusDebug* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleMPCPlusDebug* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleMPCPlusDebug* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SimpleMPCPlusDebug>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleMPCPlusDebug& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleMPCPlusDebug& from) { SimpleMPCPlusDebug::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SimpleMPCPlusDebug* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.SimpleMPCPlusDebug"; }

 protected:
  explicit SimpleMPCPlusDebug(::google::protobuf::Arena* arena);
  SimpleMPCPlusDebug(::google::protobuf::Arena* arena, const SimpleMPCPlusDebug& from);
  SimpleMPCPlusDebug(::google::protobuf::Arena* arena, SimpleMPCPlusDebug&& from) noexcept
      : SimpleMPCPlusDebug(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMatrixQUpdatedFieldNumber = 33,
    kMatrixRUpdatedFieldNumber = 34,
    kControlTaskNameFieldNumber = 65,
    kCurrentMatchedPointFieldNumber = 53,
    kCurrentReferencePointFieldNumber = 54,
    kPreviewReferencePointFieldNumber = 55,
    kLateralErrorFieldNumber = 1,
    kRefHeadingFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kHeadingErrorFieldNumber = 4,
    kHeadingErrorRateFieldNumber = 5,
    kLateralErrorRateFieldNumber = 6,
    kCurvatureFieldNumber = 7,
    kSteerAngleFieldNumber = 8,
    kSteerAngleFeedforwardFieldNumber = 9,
    kSteerAngleLateralContributionFieldNumber = 10,
    kSteerAngleLateralRateContributionFieldNumber = 11,
    kSteerAngleHeadingContributionFieldNumber = 12,
    kSteerAngleHeadingRateContributionFieldNumber = 13,
    kSteerAngleFeedbackFieldNumber = 14,
    kSteeringPositionFieldNumber = 15,
    kRefSpeedFieldNumber = 16,
    kSteerAngleLimitedFieldNumber = 17,
    kStationReferenceFieldNumber = 18,
    kStationErrorFieldNumber = 19,
    kSpeedReferenceFieldNumber = 20,
    kSpeedErrorFieldNumber = 21,
    kAccelerationReferenceFieldNumber = 22,
    kStationFeedbackFieldNumber = 24,
    kSpeedFeedbackFieldNumber = 25,
    kAccelerationCmdCloseloopFieldNumber = 26,
    kAccelerationCmdFieldNumber = 27,
    kAccelerationLookupFieldNumber = 28,
    kSpeedLookupFieldNumber = 29,
    kCalibrationValueFieldNumber = 30,
    kSteerUnconstrainedControlDiffFieldNumber = 31,
    kSteerAngleFeedforwardCompensationFieldNumber = 32,
    kLateralAccelerationFieldNumber = 35,
    kLateralJerkFieldNumber = 36,
    kRefHeadingRateFieldNumber = 37,
    kHeadingRateFieldNumber = 38,
    kRefHeadingAccelerationFieldNumber = 39,
    kHeadingAccelerationFieldNumber = 40,
    kHeadingErrorAccelerationFieldNumber = 41,
    kRefHeadingJerkFieldNumber = 42,
    kHeadingJerkFieldNumber = 43,
    kHeadingErrorJerkFieldNumber = 44,
    kAccelerationFeedbackFieldNumber = 45,
    kAccelerationErrorFieldNumber = 46,
    kJerkReferenceFieldNumber = 47,
    kJerkFeedbackFieldNumber = 48,
    kJerkErrorFieldNumber = 49,
    kLateralErrorFeedbackFieldNumber = 50,
    kHeadingErrorFeedbackFieldNumber = 51,
    kSteerAngleFeedbackAugmentFieldNumber = 52,
    kPreviewStationErrorFieldNumber = 56,
    kPreviewSpeedReferenceFieldNumber = 57,
    kPreviewSpeedErrorFieldNumber = 58,
    kPreviewAccelerationReferenceFieldNumber = 59,
    kVehiclePitchFieldNumber = 60,
    kSlopeOffsetCompensationFieldNumber = 61,
    kPathRemainFieldNumber = 62,
    kAccelerationLookupOffsetFieldNumber = 63,
    kAccelerationVrfFieldNumber = 64,
    kIsFullStopFieldNumber = 23,
  };
  // repeated double matrix_q_updated = 33;
  int matrix_q_updated_size() const;
  private:
  int _internal_matrix_q_updated_size() const;

  public:
  void clear_matrix_q_updated() ;
  double matrix_q_updated(int index) const;
  void set_matrix_q_updated(int index, double value);
  void add_matrix_q_updated(double value);
  const ::google::protobuf::RepeatedField<double>& matrix_q_updated() const;
  ::google::protobuf::RepeatedField<double>* mutable_matrix_q_updated();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_matrix_q_updated() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_matrix_q_updated();

  public:
  // repeated double matrix_r_updated = 34;
  int matrix_r_updated_size() const;
  private:
  int _internal_matrix_r_updated_size() const;

  public:
  void clear_matrix_r_updated() ;
  double matrix_r_updated(int index) const;
  void set_matrix_r_updated(int index, double value);
  void add_matrix_r_updated(double value);
  const ::google::protobuf::RepeatedField<double>& matrix_r_updated() const;
  ::google::protobuf::RepeatedField<double>* mutable_matrix_r_updated();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_matrix_r_updated() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_matrix_r_updated();

  public:
  // optional string control_task_name = 65;
  bool has_control_task_name() const;
  void clear_control_task_name() ;
  const std::string& control_task_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_control_task_name(Arg_&& arg, Args_... args);
  std::string* mutable_control_task_name();
  PROTOBUF_NODISCARD std::string* release_control_task_name();
  void set_allocated_control_task_name(std::string* value);

  private:
  const std::string& _internal_control_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_task_name(
      const std::string& value);
  std::string* _internal_mutable_control_task_name();

  public:
  // optional .control.common.TrajectoryPoint current_matched_point = 53;
  bool has_current_matched_point() const;
  void clear_current_matched_point() ;
  const ::control::common::TrajectoryPoint& current_matched_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_current_matched_point();
  ::control::common::TrajectoryPoint* mutable_current_matched_point();
  void set_allocated_current_matched_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_current_matched_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_matched_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_current_matched_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_matched_point();

  public:
  // optional .control.common.TrajectoryPoint current_reference_point = 54;
  bool has_current_reference_point() const;
  void clear_current_reference_point() ;
  const ::control::common::TrajectoryPoint& current_reference_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_current_reference_point();
  ::control::common::TrajectoryPoint* mutable_current_reference_point();
  void set_allocated_current_reference_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_current_reference_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_reference_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_current_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_reference_point();

  public:
  // optional .control.common.TrajectoryPoint preview_reference_point = 55;
  bool has_preview_reference_point() const;
  void clear_preview_reference_point() ;
  const ::control::common::TrajectoryPoint& preview_reference_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_preview_reference_point();
  ::control::common::TrajectoryPoint* mutable_preview_reference_point();
  void set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_preview_reference_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_preview_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_preview_reference_point();

  public:
  // optional double lateral_error = 1;
  bool has_lateral_error() const;
  void clear_lateral_error() ;
  double lateral_error() const;
  void set_lateral_error(double value);

  private:
  double _internal_lateral_error() const;
  void _internal_set_lateral_error(double value);

  public:
  // optional double ref_heading = 2;
  bool has_ref_heading() const;
  void clear_ref_heading() ;
  double ref_heading() const;
  void set_ref_heading(double value);

  private:
  double _internal_ref_heading() const;
  void _internal_set_ref_heading(double value);

  public:
  // optional double heading = 3;
  bool has_heading() const;
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // optional double heading_error = 4;
  bool has_heading_error() const;
  void clear_heading_error() ;
  double heading_error() const;
  void set_heading_error(double value);

  private:
  double _internal_heading_error() const;
  void _internal_set_heading_error(double value);

  public:
  // optional double heading_error_rate = 5;
  bool has_heading_error_rate() const;
  void clear_heading_error_rate() ;
  double heading_error_rate() const;
  void set_heading_error_rate(double value);

  private:
  double _internal_heading_error_rate() const;
  void _internal_set_heading_error_rate(double value);

  public:
  // optional double lateral_error_rate = 6;
  bool has_lateral_error_rate() const;
  void clear_lateral_error_rate() ;
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);

  private:
  double _internal_lateral_error_rate() const;
  void _internal_set_lateral_error_rate(double value);

  public:
  // optional double curvature = 7;
  bool has_curvature() const;
  void clear_curvature() ;
  double curvature() const;
  void set_curvature(double value);

  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);

  public:
  // optional double steer_angle = 8;
  bool has_steer_angle() const;
  void clear_steer_angle() ;
  double steer_angle() const;
  void set_steer_angle(double value);

  private:
  double _internal_steer_angle() const;
  void _internal_set_steer_angle(double value);

  public:
  // optional double steer_angle_feedforward = 9;
  bool has_steer_angle_feedforward() const;
  void clear_steer_angle_feedforward() ;
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);

  private:
  double _internal_steer_angle_feedforward() const;
  void _internal_set_steer_angle_feedforward(double value);

  public:
  // optional double steer_angle_lateral_contribution = 10;
  bool has_steer_angle_lateral_contribution() const;
  void clear_steer_angle_lateral_contribution() ;
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);

  private:
  double _internal_steer_angle_lateral_contribution() const;
  void _internal_set_steer_angle_lateral_contribution(double value);

  public:
  // optional double steer_angle_lateral_rate_contribution = 11;
  bool has_steer_angle_lateral_rate_contribution() const;
  void clear_steer_angle_lateral_rate_contribution() ;
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);

  private:
  double _internal_steer_angle_lateral_rate_contribution() const;
  void _internal_set_steer_angle_lateral_rate_contribution(double value);

  public:
  // optional double steer_angle_heading_contribution = 12;
  bool has_steer_angle_heading_contribution() const;
  void clear_steer_angle_heading_contribution() ;
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);

  private:
  double _internal_steer_angle_heading_contribution() const;
  void _internal_set_steer_angle_heading_contribution(double value);

  public:
  // optional double steer_angle_heading_rate_contribution = 13;
  bool has_steer_angle_heading_rate_contribution() const;
  void clear_steer_angle_heading_rate_contribution() ;
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);

  private:
  double _internal_steer_angle_heading_rate_contribution() const;
  void _internal_set_steer_angle_heading_rate_contribution(double value);

  public:
  // optional double steer_angle_feedback = 14;
  bool has_steer_angle_feedback() const;
  void clear_steer_angle_feedback() ;
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);

  private:
  double _internal_steer_angle_feedback() const;
  void _internal_set_steer_angle_feedback(double value);

  public:
  // optional double steering_position = 15;
  bool has_steering_position() const;
  void clear_steering_position() ;
  double steering_position() const;
  void set_steering_position(double value);

  private:
  double _internal_steering_position() const;
  void _internal_set_steering_position(double value);

  public:
  // optional double ref_speed = 16;
  bool has_ref_speed() const;
  void clear_ref_speed() ;
  double ref_speed() const;
  void set_ref_speed(double value);

  private:
  double _internal_ref_speed() const;
  void _internal_set_ref_speed(double value);

  public:
  // optional double steer_angle_limited = 17;
  bool has_steer_angle_limited() const;
  void clear_steer_angle_limited() ;
  double steer_angle_limited() const;
  void set_steer_angle_limited(double value);

  private:
  double _internal_steer_angle_limited() const;
  void _internal_set_steer_angle_limited(double value);

  public:
  // optional double station_reference = 18;
  bool has_station_reference() const;
  void clear_station_reference() ;
  double station_reference() const;
  void set_station_reference(double value);

  private:
  double _internal_station_reference() const;
  void _internal_set_station_reference(double value);

  public:
  // optional double station_error = 19;
  bool has_station_error() const;
  void clear_station_error() ;
  double station_error() const;
  void set_station_error(double value);

  private:
  double _internal_station_error() const;
  void _internal_set_station_error(double value);

  public:
  // optional double speed_reference = 20;
  bool has_speed_reference() const;
  void clear_speed_reference() ;
  double speed_reference() const;
  void set_speed_reference(double value);

  private:
  double _internal_speed_reference() const;
  void _internal_set_speed_reference(double value);

  public:
  // optional double speed_error = 21;
  bool has_speed_error() const;
  void clear_speed_error() ;
  double speed_error() const;
  void set_speed_error(double value);

  private:
  double _internal_speed_error() const;
  void _internal_set_speed_error(double value);

  public:
  // optional double acceleration_reference = 22;
  bool has_acceleration_reference() const;
  void clear_acceleration_reference() ;
  double acceleration_reference() const;
  void set_acceleration_reference(double value);

  private:
  double _internal_acceleration_reference() const;
  void _internal_set_acceleration_reference(double value);

  public:
  // optional double station_feedback = 24;
  bool has_station_feedback() const;
  void clear_station_feedback() ;
  double station_feedback() const;
  void set_station_feedback(double value);

  private:
  double _internal_station_feedback() const;
  void _internal_set_station_feedback(double value);

  public:
  // optional double speed_feedback = 25;
  bool has_speed_feedback() const;
  void clear_speed_feedback() ;
  double speed_feedback() const;
  void set_speed_feedback(double value);

  private:
  double _internal_speed_feedback() const;
  void _internal_set_speed_feedback(double value);

  public:
  // optional double acceleration_cmd_closeloop = 26;
  bool has_acceleration_cmd_closeloop() const;
  void clear_acceleration_cmd_closeloop() ;
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);

  private:
  double _internal_acceleration_cmd_closeloop() const;
  void _internal_set_acceleration_cmd_closeloop(double value);

  public:
  // optional double acceleration_cmd = 27;
  bool has_acceleration_cmd() const;
  void clear_acceleration_cmd() ;
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);

  private:
  double _internal_acceleration_cmd() const;
  void _internal_set_acceleration_cmd(double value);

  public:
  // optional double acceleration_lookup = 28;
  bool has_acceleration_lookup() const;
  void clear_acceleration_lookup() ;
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);

  private:
  double _internal_acceleration_lookup() const;
  void _internal_set_acceleration_lookup(double value);

  public:
  // optional double speed_lookup = 29;
  bool has_speed_lookup() const;
  void clear_speed_lookup() ;
  double speed_lookup() const;
  void set_speed_lookup(double value);

  private:
  double _internal_speed_lookup() const;
  void _internal_set_speed_lookup(double value);

  public:
  // optional double calibration_value = 30;
  bool has_calibration_value() const;
  void clear_calibration_value() ;
  double calibration_value() const;
  void set_calibration_value(double value);

  private:
  double _internal_calibration_value() const;
  void _internal_set_calibration_value(double value);

  public:
  // optional double steer_unconstrained_control_diff = 31;
  bool has_steer_unconstrained_control_diff() const;
  void clear_steer_unconstrained_control_diff() ;
  double steer_unconstrained_control_diff() const;
  void set_steer_unconstrained_control_diff(double value);

  private:
  double _internal_steer_unconstrained_control_diff() const;
  void _internal_set_steer_unconstrained_control_diff(double value);

  public:
  // optional double steer_angle_feedforward_compensation = 32;
  bool has_steer_angle_feedforward_compensation() const;
  void clear_steer_angle_feedforward_compensation() ;
  double steer_angle_feedforward_compensation() const;
  void set_steer_angle_feedforward_compensation(double value);

  private:
  double _internal_steer_angle_feedforward_compensation() const;
  void _internal_set_steer_angle_feedforward_compensation(double value);

  public:
  // optional double lateral_acceleration = 35;
  bool has_lateral_acceleration() const;
  void clear_lateral_acceleration() ;
  double lateral_acceleration() const;
  void set_lateral_acceleration(double value);

  private:
  double _internal_lateral_acceleration() const;
  void _internal_set_lateral_acceleration(double value);

  public:
  // optional double lateral_jerk = 36;
  bool has_lateral_jerk() const;
  void clear_lateral_jerk() ;
  double lateral_jerk() const;
  void set_lateral_jerk(double value);

  private:
  double _internal_lateral_jerk() const;
  void _internal_set_lateral_jerk(double value);

  public:
  // optional double ref_heading_rate = 37;
  bool has_ref_heading_rate() const;
  void clear_ref_heading_rate() ;
  double ref_heading_rate() const;
  void set_ref_heading_rate(double value);

  private:
  double _internal_ref_heading_rate() const;
  void _internal_set_ref_heading_rate(double value);

  public:
  // optional double heading_rate = 38;
  bool has_heading_rate() const;
  void clear_heading_rate() ;
  double heading_rate() const;
  void set_heading_rate(double value);

  private:
  double _internal_heading_rate() const;
  void _internal_set_heading_rate(double value);

  public:
  // optional double ref_heading_acceleration = 39;
  bool has_ref_heading_acceleration() const;
  void clear_ref_heading_acceleration() ;
  double ref_heading_acceleration() const;
  void set_ref_heading_acceleration(double value);

  private:
  double _internal_ref_heading_acceleration() const;
  void _internal_set_ref_heading_acceleration(double value);

  public:
  // optional double heading_acceleration = 40;
  bool has_heading_acceleration() const;
  void clear_heading_acceleration() ;
  double heading_acceleration() const;
  void set_heading_acceleration(double value);

  private:
  double _internal_heading_acceleration() const;
  void _internal_set_heading_acceleration(double value);

  public:
  // optional double heading_error_acceleration = 41;
  bool has_heading_error_acceleration() const;
  void clear_heading_error_acceleration() ;
  double heading_error_acceleration() const;
  void set_heading_error_acceleration(double value);

  private:
  double _internal_heading_error_acceleration() const;
  void _internal_set_heading_error_acceleration(double value);

  public:
  // optional double ref_heading_jerk = 42;
  bool has_ref_heading_jerk() const;
  void clear_ref_heading_jerk() ;
  double ref_heading_jerk() const;
  void set_ref_heading_jerk(double value);

  private:
  double _internal_ref_heading_jerk() const;
  void _internal_set_ref_heading_jerk(double value);

  public:
  // optional double heading_jerk = 43;
  bool has_heading_jerk() const;
  void clear_heading_jerk() ;
  double heading_jerk() const;
  void set_heading_jerk(double value);

  private:
  double _internal_heading_jerk() const;
  void _internal_set_heading_jerk(double value);

  public:
  // optional double heading_error_jerk = 44;
  bool has_heading_error_jerk() const;
  void clear_heading_error_jerk() ;
  double heading_error_jerk() const;
  void set_heading_error_jerk(double value);

  private:
  double _internal_heading_error_jerk() const;
  void _internal_set_heading_error_jerk(double value);

  public:
  // optional double acceleration_feedback = 45;
  bool has_acceleration_feedback() const;
  void clear_acceleration_feedback() ;
  double acceleration_feedback() const;
  void set_acceleration_feedback(double value);

  private:
  double _internal_acceleration_feedback() const;
  void _internal_set_acceleration_feedback(double value);

  public:
  // optional double acceleration_error = 46;
  bool has_acceleration_error() const;
  void clear_acceleration_error() ;
  double acceleration_error() const;
  void set_acceleration_error(double value);

  private:
  double _internal_acceleration_error() const;
  void _internal_set_acceleration_error(double value);

  public:
  // optional double jerk_reference = 47;
  bool has_jerk_reference() const;
  void clear_jerk_reference() ;
  double jerk_reference() const;
  void set_jerk_reference(double value);

  private:
  double _internal_jerk_reference() const;
  void _internal_set_jerk_reference(double value);

  public:
  // optional double jerk_feedback = 48;
  bool has_jerk_feedback() const;
  void clear_jerk_feedback() ;
  double jerk_feedback() const;
  void set_jerk_feedback(double value);

  private:
  double _internal_jerk_feedback() const;
  void _internal_set_jerk_feedback(double value);

  public:
  // optional double jerk_error = 49;
  bool has_jerk_error() const;
  void clear_jerk_error() ;
  double jerk_error() const;
  void set_jerk_error(double value);

  private:
  double _internal_jerk_error() const;
  void _internal_set_jerk_error(double value);

  public:
  // optional double lateral_error_feedback = 50;
  bool has_lateral_error_feedback() const;
  void clear_lateral_error_feedback() ;
  double lateral_error_feedback() const;
  void set_lateral_error_feedback(double value);

  private:
  double _internal_lateral_error_feedback() const;
  void _internal_set_lateral_error_feedback(double value);

  public:
  // optional double heading_error_feedback = 51;
  bool has_heading_error_feedback() const;
  void clear_heading_error_feedback() ;
  double heading_error_feedback() const;
  void set_heading_error_feedback(double value);

  private:
  double _internal_heading_error_feedback() const;
  void _internal_set_heading_error_feedback(double value);

  public:
  // optional double steer_angle_feedback_augment = 52;
  bool has_steer_angle_feedback_augment() const;
  void clear_steer_angle_feedback_augment() ;
  double steer_angle_feedback_augment() const;
  void set_steer_angle_feedback_augment(double value);

  private:
  double _internal_steer_angle_feedback_augment() const;
  void _internal_set_steer_angle_feedback_augment(double value);

  public:
  // optional double preview_station_error = 56;
  bool has_preview_station_error() const;
  void clear_preview_station_error() ;
  double preview_station_error() const;
  void set_preview_station_error(double value);

  private:
  double _internal_preview_station_error() const;
  void _internal_set_preview_station_error(double value);

  public:
  // optional double preview_speed_reference = 57;
  bool has_preview_speed_reference() const;
  void clear_preview_speed_reference() ;
  double preview_speed_reference() const;
  void set_preview_speed_reference(double value);

  private:
  double _internal_preview_speed_reference() const;
  void _internal_set_preview_speed_reference(double value);

  public:
  // optional double preview_speed_error = 58;
  bool has_preview_speed_error() const;
  void clear_preview_speed_error() ;
  double preview_speed_error() const;
  void set_preview_speed_error(double value);

  private:
  double _internal_preview_speed_error() const;
  void _internal_set_preview_speed_error(double value);

  public:
  // optional double preview_acceleration_reference = 59;
  bool has_preview_acceleration_reference() const;
  void clear_preview_acceleration_reference() ;
  double preview_acceleration_reference() const;
  void set_preview_acceleration_reference(double value);

  private:
  double _internal_preview_acceleration_reference() const;
  void _internal_set_preview_acceleration_reference(double value);

  public:
  // optional double vehicle_pitch = 60;
  bool has_vehicle_pitch() const;
  void clear_vehicle_pitch() ;
  double vehicle_pitch() const;
  void set_vehicle_pitch(double value);

  private:
  double _internal_vehicle_pitch() const;
  void _internal_set_vehicle_pitch(double value);

  public:
  // optional double slope_offset_compensation = 61;
  bool has_slope_offset_compensation() const;
  void clear_slope_offset_compensation() ;
  double slope_offset_compensation() const;
  void set_slope_offset_compensation(double value);

  private:
  double _internal_slope_offset_compensation() const;
  void _internal_set_slope_offset_compensation(double value);

  public:
  // optional double path_remain = 62;
  bool has_path_remain() const;
  void clear_path_remain() ;
  double path_remain() const;
  void set_path_remain(double value);

  private:
  double _internal_path_remain() const;
  void _internal_set_path_remain(double value);

  public:
  // optional double acceleration_lookup_offset = 63;
  bool has_acceleration_lookup_offset() const;
  void clear_acceleration_lookup_offset() ;
  double acceleration_lookup_offset() const;
  void set_acceleration_lookup_offset(double value);

  private:
  double _internal_acceleration_lookup_offset() const;
  void _internal_set_acceleration_lookup_offset(double value);

  public:
  // optional double acceleration_vrf = 64;
  bool has_acceleration_vrf() const;
  void clear_acceleration_vrf() ;
  double acceleration_vrf() const;
  void set_acceleration_vrf(double value);

  private:
  double _internal_acceleration_vrf() const;
  void _internal_set_acceleration_vrf(double value);

  public:
  // optional bool is_full_stop = 23;
  bool has_is_full_stop() const;
  void clear_is_full_stop() ;
  bool is_full_stop() const;
  void set_is_full_stop(bool value);

  private:
  bool _internal_is_full_stop() const;
  void _internal_set_is_full_stop(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.SimpleMPCPlusDebug)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 65, 3,
      116, 11>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SimpleMPCPlusDebug_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleMPCPlusDebug& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> matrix_q_updated_;
    ::google::protobuf::RepeatedField<double> matrix_r_updated_;
    ::google::protobuf::internal::ArenaStringPtr control_task_name_;
    ::control::common::TrajectoryPoint* current_matched_point_;
    ::control::common::TrajectoryPoint* current_reference_point_;
    ::control::common::TrajectoryPoint* preview_reference_point_;
    double lateral_error_;
    double ref_heading_;
    double heading_;
    double heading_error_;
    double heading_error_rate_;
    double lateral_error_rate_;
    double curvature_;
    double steer_angle_;
    double steer_angle_feedforward_;
    double steer_angle_lateral_contribution_;
    double steer_angle_lateral_rate_contribution_;
    double steer_angle_heading_contribution_;
    double steer_angle_heading_rate_contribution_;
    double steer_angle_feedback_;
    double steering_position_;
    double ref_speed_;
    double steer_angle_limited_;
    double station_reference_;
    double station_error_;
    double speed_reference_;
    double speed_error_;
    double acceleration_reference_;
    double station_feedback_;
    double speed_feedback_;
    double acceleration_cmd_closeloop_;
    double acceleration_cmd_;
    double acceleration_lookup_;
    double speed_lookup_;
    double calibration_value_;
    double steer_unconstrained_control_diff_;
    double steer_angle_feedforward_compensation_;
    double lateral_acceleration_;
    double lateral_jerk_;
    double ref_heading_rate_;
    double heading_rate_;
    double ref_heading_acceleration_;
    double heading_acceleration_;
    double heading_error_acceleration_;
    double ref_heading_jerk_;
    double heading_jerk_;
    double heading_error_jerk_;
    double acceleration_feedback_;
    double acceleration_error_;
    double jerk_reference_;
    double jerk_feedback_;
    double jerk_error_;
    double lateral_error_feedback_;
    double heading_error_feedback_;
    double steer_angle_feedback_augment_;
    double preview_station_error_;
    double preview_speed_reference_;
    double preview_speed_error_;
    double preview_acceleration_reference_;
    double vehicle_pitch_;
    double slope_offset_compensation_;
    double path_remain_;
    double acceleration_lookup_offset_;
    double acceleration_vrf_;
    bool is_full_stop_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class SimpleLongitudinalPlusDebug final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.SimpleLongitudinalPlusDebug) */ {
 public:
  inline SimpleLongitudinalPlusDebug() : SimpleLongitudinalPlusDebug(nullptr) {}
  ~SimpleLongitudinalPlusDebug() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleLongitudinalPlusDebug(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleLongitudinalPlusDebug(const SimpleLongitudinalPlusDebug& from) : SimpleLongitudinalPlusDebug(nullptr, from) {}
  inline SimpleLongitudinalPlusDebug(SimpleLongitudinalPlusDebug&& from) noexcept
      : SimpleLongitudinalPlusDebug(nullptr, std::move(from)) {}
  inline SimpleLongitudinalPlusDebug& operator=(const SimpleLongitudinalPlusDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleLongitudinalPlusDebug& operator=(SimpleLongitudinalPlusDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleLongitudinalPlusDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleLongitudinalPlusDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleLongitudinalPlusDebug*>(
        &_SimpleLongitudinalPlusDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SimpleLongitudinalPlusDebug& a, SimpleLongitudinalPlusDebug& b) { a.Swap(&b); }
  inline void Swap(SimpleLongitudinalPlusDebug* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleLongitudinalPlusDebug* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleLongitudinalPlusDebug* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SimpleLongitudinalPlusDebug>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleLongitudinalPlusDebug& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleLongitudinalPlusDebug& from) { SimpleLongitudinalPlusDebug::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SimpleLongitudinalPlusDebug* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.SimpleLongitudinalPlusDebug"; }

 protected:
  explicit SimpleLongitudinalPlusDebug(::google::protobuf::Arena* arena);
  SimpleLongitudinalPlusDebug(::google::protobuf::Arena* arena, const SimpleLongitudinalPlusDebug& from);
  SimpleLongitudinalPlusDebug(::google::protobuf::Arena* arena, SimpleLongitudinalPlusDebug&& from) noexcept
      : SimpleLongitudinalPlusDebug(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlTaskNameFieldNumber = 43,
    kCurrentMatchedPointFieldNumber = 32,
    kCurrentReferencePointFieldNumber = 33,
    kPreviewReferencePointFieldNumber = 34,
    kStationReferenceFieldNumber = 1,
    kStationErrorFieldNumber = 2,
    kStationErrorLimitedFieldNumber = 3,
    kPreviewStationErrorFieldNumber = 4,
    kSpeedReferenceFieldNumber = 5,
    kSpeedErrorFieldNumber = 6,
    kSpeedControllerInputLimitedFieldNumber = 7,
    kPreviewSpeedReferenceFieldNumber = 8,
    kPreviewSpeedErrorFieldNumber = 9,
    kPreviewAccelerationReferenceFieldNumber = 10,
    kAccelerationCmdCloseloopFieldNumber = 11,
    kAccelerationCmdFieldNumber = 12,
    kAccelerationLookupFieldNumber = 13,
    kSpeedLookupFieldNumber = 14,
    kCalibrationValueFieldNumber = 15,
    kThrottleCmdFieldNumber = 16,
    kBrakeCmdFieldNumber = 17,
    kSlopeOffsetCompensationFieldNumber = 19,
    kCurrentStationFieldNumber = 20,
    kPathRemainFieldNumber = 21,
    kPidSaturationStatusFieldNumber = 22,
    kLeadlagSaturationStatusFieldNumber = 23,
    kSpeedOffsetFieldNumber = 24,
    kCurrentSpeedFieldNumber = 25,
    kAccelerationReferenceFieldNumber = 26,
    kCurrentAccelerationFieldNumber = 27,
    kAccelerationErrorFieldNumber = 28,
    kJerkReferenceFieldNumber = 29,
    kCurrentJerkFieldNumber = 30,
    kJerkErrorFieldNumber = 31,
    kAccelerationLookupLimitFieldNumber = 35,
    kVehiclePitchFieldNumber = 36,
    kCurrentSteerIntervalFieldNumber = 38,
    kIsFullStopFieldNumber = 18,
    kIsEpbBrakeFieldNumber = 37,
    kIsWaitSteerFieldNumber = 39,
    kIsStopReasonByDestinationFieldNumber = 40,
    kIsStopReasonByPrdestrianFieldNumber = 41,
    kIsFullStopSoftFieldNumber = 42,
    kFormGoToFullStopFieldNumber = 46,
    kBeginEndBrakeFieldNumber = 47,
    kPathRemainAddFieldNumber = 44,
    kMaxPathRemainWhenStoppedFieldNumber = 45,
    kHillupFullstopBrakeRateFieldNumber = 48,
  };
  // optional string control_task_name = 43;
  bool has_control_task_name() const;
  void clear_control_task_name() ;
  const std::string& control_task_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_control_task_name(Arg_&& arg, Args_... args);
  std::string* mutable_control_task_name();
  PROTOBUF_NODISCARD std::string* release_control_task_name();
  void set_allocated_control_task_name(std::string* value);

  private:
  const std::string& _internal_control_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_task_name(
      const std::string& value);
  std::string* _internal_mutable_control_task_name();

  public:
  // optional .control.common.TrajectoryPoint current_matched_point = 32;
  bool has_current_matched_point() const;
  void clear_current_matched_point() ;
  const ::control::common::TrajectoryPoint& current_matched_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_current_matched_point();
  ::control::common::TrajectoryPoint* mutable_current_matched_point();
  void set_allocated_current_matched_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_current_matched_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_matched_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_current_matched_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_matched_point();

  public:
  // optional .control.common.TrajectoryPoint current_reference_point = 33;
  bool has_current_reference_point() const;
  void clear_current_reference_point() ;
  const ::control::common::TrajectoryPoint& current_reference_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_current_reference_point();
  ::control::common::TrajectoryPoint* mutable_current_reference_point();
  void set_allocated_current_reference_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_current_reference_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_reference_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_current_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_reference_point();

  public:
  // optional .control.common.TrajectoryPoint preview_reference_point = 34;
  bool has_preview_reference_point() const;
  void clear_preview_reference_point() ;
  const ::control::common::TrajectoryPoint& preview_reference_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_preview_reference_point();
  ::control::common::TrajectoryPoint* mutable_preview_reference_point();
  void set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_preview_reference_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_preview_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_preview_reference_point();

  public:
  // optional double station_reference = 1;
  bool has_station_reference() const;
  void clear_station_reference() ;
  double station_reference() const;
  void set_station_reference(double value);

  private:
  double _internal_station_reference() const;
  void _internal_set_station_reference(double value);

  public:
  // optional double station_error = 2;
  bool has_station_error() const;
  void clear_station_error() ;
  double station_error() const;
  void set_station_error(double value);

  private:
  double _internal_station_error() const;
  void _internal_set_station_error(double value);

  public:
  // optional double station_error_limited = 3;
  bool has_station_error_limited() const;
  void clear_station_error_limited() ;
  double station_error_limited() const;
  void set_station_error_limited(double value);

  private:
  double _internal_station_error_limited() const;
  void _internal_set_station_error_limited(double value);

  public:
  // optional double preview_station_error = 4;
  bool has_preview_station_error() const;
  void clear_preview_station_error() ;
  double preview_station_error() const;
  void set_preview_station_error(double value);

  private:
  double _internal_preview_station_error() const;
  void _internal_set_preview_station_error(double value);

  public:
  // optional double speed_reference = 5;
  bool has_speed_reference() const;
  void clear_speed_reference() ;
  double speed_reference() const;
  void set_speed_reference(double value);

  private:
  double _internal_speed_reference() const;
  void _internal_set_speed_reference(double value);

  public:
  // optional double speed_error = 6;
  bool has_speed_error() const;
  void clear_speed_error() ;
  double speed_error() const;
  void set_speed_error(double value);

  private:
  double _internal_speed_error() const;
  void _internal_set_speed_error(double value);

  public:
  // optional double speed_controller_input_limited = 7;
  bool has_speed_controller_input_limited() const;
  void clear_speed_controller_input_limited() ;
  double speed_controller_input_limited() const;
  void set_speed_controller_input_limited(double value);

  private:
  double _internal_speed_controller_input_limited() const;
  void _internal_set_speed_controller_input_limited(double value);

  public:
  // optional double preview_speed_reference = 8;
  bool has_preview_speed_reference() const;
  void clear_preview_speed_reference() ;
  double preview_speed_reference() const;
  void set_preview_speed_reference(double value);

  private:
  double _internal_preview_speed_reference() const;
  void _internal_set_preview_speed_reference(double value);

  public:
  // optional double preview_speed_error = 9;
  bool has_preview_speed_error() const;
  void clear_preview_speed_error() ;
  double preview_speed_error() const;
  void set_preview_speed_error(double value);

  private:
  double _internal_preview_speed_error() const;
  void _internal_set_preview_speed_error(double value);

  public:
  // optional double preview_acceleration_reference = 10;
  bool has_preview_acceleration_reference() const;
  void clear_preview_acceleration_reference() ;
  double preview_acceleration_reference() const;
  void set_preview_acceleration_reference(double value);

  private:
  double _internal_preview_acceleration_reference() const;
  void _internal_set_preview_acceleration_reference(double value);

  public:
  // optional double acceleration_cmd_closeloop = 11;
  bool has_acceleration_cmd_closeloop() const;
  void clear_acceleration_cmd_closeloop() ;
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);

  private:
  double _internal_acceleration_cmd_closeloop() const;
  void _internal_set_acceleration_cmd_closeloop(double value);

  public:
  // optional double acceleration_cmd = 12;
  bool has_acceleration_cmd() const;
  void clear_acceleration_cmd() ;
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);

  private:
  double _internal_acceleration_cmd() const;
  void _internal_set_acceleration_cmd(double value);

  public:
  // optional double acceleration_lookup = 13;
  bool has_acceleration_lookup() const;
  void clear_acceleration_lookup() ;
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);

  private:
  double _internal_acceleration_lookup() const;
  void _internal_set_acceleration_lookup(double value);

  public:
  // optional double speed_lookup = 14;
  bool has_speed_lookup() const;
  void clear_speed_lookup() ;
  double speed_lookup() const;
  void set_speed_lookup(double value);

  private:
  double _internal_speed_lookup() const;
  void _internal_set_speed_lookup(double value);

  public:
  // optional double calibration_value = 15;
  bool has_calibration_value() const;
  void clear_calibration_value() ;
  double calibration_value() const;
  void set_calibration_value(double value);

  private:
  double _internal_calibration_value() const;
  void _internal_set_calibration_value(double value);

  public:
  // optional double throttle_cmd = 16;
  bool has_throttle_cmd() const;
  void clear_throttle_cmd() ;
  double throttle_cmd() const;
  void set_throttle_cmd(double value);

  private:
  double _internal_throttle_cmd() const;
  void _internal_set_throttle_cmd(double value);

  public:
  // optional double brake_cmd = 17;
  bool has_brake_cmd() const;
  void clear_brake_cmd() ;
  double brake_cmd() const;
  void set_brake_cmd(double value);

  private:
  double _internal_brake_cmd() const;
  void _internal_set_brake_cmd(double value);

  public:
  // optional double slope_offset_compensation = 19;
  bool has_slope_offset_compensation() const;
  void clear_slope_offset_compensation() ;
  double slope_offset_compensation() const;
  void set_slope_offset_compensation(double value);

  private:
  double _internal_slope_offset_compensation() const;
  void _internal_set_slope_offset_compensation(double value);

  public:
  // optional double current_station = 20;
  bool has_current_station() const;
  void clear_current_station() ;
  double current_station() const;
  void set_current_station(double value);

  private:
  double _internal_current_station() const;
  void _internal_set_current_station(double value);

  public:
  // optional double path_remain = 21;
  bool has_path_remain() const;
  void clear_path_remain() ;
  double path_remain() const;
  void set_path_remain(double value);

  private:
  double _internal_path_remain() const;
  void _internal_set_path_remain(double value);

  public:
  // optional int32 pid_saturation_status = 22;
  bool has_pid_saturation_status() const;
  void clear_pid_saturation_status() ;
  ::int32_t pid_saturation_status() const;
  void set_pid_saturation_status(::int32_t value);

  private:
  ::int32_t _internal_pid_saturation_status() const;
  void _internal_set_pid_saturation_status(::int32_t value);

  public:
  // optional int32 leadlag_saturation_status = 23;
  bool has_leadlag_saturation_status() const;
  void clear_leadlag_saturation_status() ;
  ::int32_t leadlag_saturation_status() const;
  void set_leadlag_saturation_status(::int32_t value);

  private:
  ::int32_t _internal_leadlag_saturation_status() const;
  void _internal_set_leadlag_saturation_status(::int32_t value);

  public:
  // optional double speed_offset = 24;
  bool has_speed_offset() const;
  void clear_speed_offset() ;
  double speed_offset() const;
  void set_speed_offset(double value);

  private:
  double _internal_speed_offset() const;
  void _internal_set_speed_offset(double value);

  public:
  // optional double current_speed = 25;
  bool has_current_speed() const;
  void clear_current_speed() ;
  double current_speed() const;
  void set_current_speed(double value);

  private:
  double _internal_current_speed() const;
  void _internal_set_current_speed(double value);

  public:
  // optional double acceleration_reference = 26;
  bool has_acceleration_reference() const;
  void clear_acceleration_reference() ;
  double acceleration_reference() const;
  void set_acceleration_reference(double value);

  private:
  double _internal_acceleration_reference() const;
  void _internal_set_acceleration_reference(double value);

  public:
  // optional double current_acceleration = 27;
  bool has_current_acceleration() const;
  void clear_current_acceleration() ;
  double current_acceleration() const;
  void set_current_acceleration(double value);

  private:
  double _internal_current_acceleration() const;
  void _internal_set_current_acceleration(double value);

  public:
  // optional double acceleration_error = 28;
  bool has_acceleration_error() const;
  void clear_acceleration_error() ;
  double acceleration_error() const;
  void set_acceleration_error(double value);

  private:
  double _internal_acceleration_error() const;
  void _internal_set_acceleration_error(double value);

  public:
  // optional double jerk_reference = 29;
  bool has_jerk_reference() const;
  void clear_jerk_reference() ;
  double jerk_reference() const;
  void set_jerk_reference(double value);

  private:
  double _internal_jerk_reference() const;
  void _internal_set_jerk_reference(double value);

  public:
  // optional double current_jerk = 30;
  bool has_current_jerk() const;
  void clear_current_jerk() ;
  double current_jerk() const;
  void set_current_jerk(double value);

  private:
  double _internal_current_jerk() const;
  void _internal_set_current_jerk(double value);

  public:
  // optional double jerk_error = 31;
  bool has_jerk_error() const;
  void clear_jerk_error() ;
  double jerk_error() const;
  void set_jerk_error(double value);

  private:
  double _internal_jerk_error() const;
  void _internal_set_jerk_error(double value);

  public:
  // optional double acceleration_lookup_limit = 35;
  bool has_acceleration_lookup_limit() const;
  void clear_acceleration_lookup_limit() ;
  double acceleration_lookup_limit() const;
  void set_acceleration_lookup_limit(double value);

  private:
  double _internal_acceleration_lookup_limit() const;
  void _internal_set_acceleration_lookup_limit(double value);

  public:
  // optional double vehicle_pitch = 36;
  bool has_vehicle_pitch() const;
  void clear_vehicle_pitch() ;
  double vehicle_pitch() const;
  void set_vehicle_pitch(double value);

  private:
  double _internal_vehicle_pitch() const;
  void _internal_set_vehicle_pitch(double value);

  public:
  // optional double current_steer_interval = 38;
  bool has_current_steer_interval() const;
  void clear_current_steer_interval() ;
  double current_steer_interval() const;
  void set_current_steer_interval(double value);

  private:
  double _internal_current_steer_interval() const;
  void _internal_set_current_steer_interval(double value);

  public:
  // optional bool is_full_stop = 18;
  bool has_is_full_stop() const;
  void clear_is_full_stop() ;
  bool is_full_stop() const;
  void set_is_full_stop(bool value);

  private:
  bool _internal_is_full_stop() const;
  void _internal_set_is_full_stop(bool value);

  public:
  // optional bool is_epb_brake = 37;
  bool has_is_epb_brake() const;
  void clear_is_epb_brake() ;
  bool is_epb_brake() const;
  void set_is_epb_brake(bool value);

  private:
  bool _internal_is_epb_brake() const;
  void _internal_set_is_epb_brake(bool value);

  public:
  // optional bool is_wait_steer = 39;
  bool has_is_wait_steer() const;
  void clear_is_wait_steer() ;
  bool is_wait_steer() const;
  void set_is_wait_steer(bool value);

  private:
  bool _internal_is_wait_steer() const;
  void _internal_set_is_wait_steer(bool value);

  public:
  // optional bool is_stop_reason_by_destination = 40;
  bool has_is_stop_reason_by_destination() const;
  void clear_is_stop_reason_by_destination() ;
  bool is_stop_reason_by_destination() const;
  void set_is_stop_reason_by_destination(bool value);

  private:
  bool _internal_is_stop_reason_by_destination() const;
  void _internal_set_is_stop_reason_by_destination(bool value);

  public:
  // optional bool is_stop_reason_by_prdestrian = 41;
  bool has_is_stop_reason_by_prdestrian() const;
  void clear_is_stop_reason_by_prdestrian() ;
  bool is_stop_reason_by_prdestrian() const;
  void set_is_stop_reason_by_prdestrian(bool value);

  private:
  bool _internal_is_stop_reason_by_prdestrian() const;
  void _internal_set_is_stop_reason_by_prdestrian(bool value);

  public:
  // optional bool is_full_stop_soft = 42;
  bool has_is_full_stop_soft() const;
  void clear_is_full_stop_soft() ;
  bool is_full_stop_soft() const;
  void set_is_full_stop_soft(bool value);

  private:
  bool _internal_is_full_stop_soft() const;
  void _internal_set_is_full_stop_soft(bool value);

  public:
  // optional bool form_go_to_full_stop = 46;
  bool has_form_go_to_full_stop() const;
  void clear_form_go_to_full_stop() ;
  bool form_go_to_full_stop() const;
  void set_form_go_to_full_stop(bool value);

  private:
  bool _internal_form_go_to_full_stop() const;
  void _internal_set_form_go_to_full_stop(bool value);

  public:
  // optional bool begin_end_brake = 47;
  bool has_begin_end_brake() const;
  void clear_begin_end_brake() ;
  bool begin_end_brake() const;
  void set_begin_end_brake(bool value);

  private:
  bool _internal_begin_end_brake() const;
  void _internal_set_begin_end_brake(bool value);

  public:
  // optional double path_remain_add = 44;
  bool has_path_remain_add() const;
  void clear_path_remain_add() ;
  double path_remain_add() const;
  void set_path_remain_add(double value);

  private:
  double _internal_path_remain_add() const;
  void _internal_set_path_remain_add(double value);

  public:
  // optional double max_path_remain_when_stopped = 45;
  bool has_max_path_remain_when_stopped() const;
  void clear_max_path_remain_when_stopped() ;
  double max_path_remain_when_stopped() const;
  void set_max_path_remain_when_stopped(double value);

  private:
  double _internal_max_path_remain_when_stopped() const;
  void _internal_set_max_path_remain_when_stopped(double value);

  public:
  // optional double hillup_fullstop_brake_rate = 48;
  bool has_hillup_fullstop_brake_rate() const;
  void clear_hillup_fullstop_brake_rate() ;
  double hillup_fullstop_brake_rate() const;
  void set_hillup_fullstop_brake_rate(double value);

  private:
  double _internal_hillup_fullstop_brake_rate() const;
  void _internal_set_hillup_fullstop_brake_rate(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.SimpleLongitudinalPlusDebug)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 48, 3,
      109, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SimpleLongitudinalPlusDebug_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleLongitudinalPlusDebug& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr control_task_name_;
    ::control::common::TrajectoryPoint* current_matched_point_;
    ::control::common::TrajectoryPoint* current_reference_point_;
    ::control::common::TrajectoryPoint* preview_reference_point_;
    double station_reference_;
    double station_error_;
    double station_error_limited_;
    double preview_station_error_;
    double speed_reference_;
    double speed_error_;
    double speed_controller_input_limited_;
    double preview_speed_reference_;
    double preview_speed_error_;
    double preview_acceleration_reference_;
    double acceleration_cmd_closeloop_;
    double acceleration_cmd_;
    double acceleration_lookup_;
    double speed_lookup_;
    double calibration_value_;
    double throttle_cmd_;
    double brake_cmd_;
    double slope_offset_compensation_;
    double current_station_;
    double path_remain_;
    ::int32_t pid_saturation_status_;
    ::int32_t leadlag_saturation_status_;
    double speed_offset_;
    double current_speed_;
    double acceleration_reference_;
    double current_acceleration_;
    double acceleration_error_;
    double jerk_reference_;
    double current_jerk_;
    double jerk_error_;
    double acceleration_lookup_limit_;
    double vehicle_pitch_;
    double current_steer_interval_;
    bool is_full_stop_;
    bool is_epb_brake_;
    bool is_wait_steer_;
    bool is_stop_reason_by_destination_;
    bool is_stop_reason_by_prdestrian_;
    bool is_full_stop_soft_;
    bool form_go_to_full_stop_;
    bool begin_end_brake_;
    double path_remain_add_;
    double max_path_remain_when_stopped_;
    double hillup_fullstop_brake_rate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class SimpleLateralPlusDebug final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.SimpleLateralPlusDebug) */ {
 public:
  inline SimpleLateralPlusDebug() : SimpleLateralPlusDebug(nullptr) {}
  ~SimpleLateralPlusDebug() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleLateralPlusDebug(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleLateralPlusDebug(const SimpleLateralPlusDebug& from) : SimpleLateralPlusDebug(nullptr, from) {}
  inline SimpleLateralPlusDebug(SimpleLateralPlusDebug&& from) noexcept
      : SimpleLateralPlusDebug(nullptr, std::move(from)) {}
  inline SimpleLateralPlusDebug& operator=(const SimpleLateralPlusDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleLateralPlusDebug& operator=(SimpleLateralPlusDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleLateralPlusDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleLateralPlusDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleLateralPlusDebug*>(
        &_SimpleLateralPlusDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SimpleLateralPlusDebug& a, SimpleLateralPlusDebug& b) { a.Swap(&b); }
  inline void Swap(SimpleLateralPlusDebug* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleLateralPlusDebug* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleLateralPlusDebug* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SimpleLateralPlusDebug>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleLateralPlusDebug& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleLateralPlusDebug& from) { SimpleLateralPlusDebug::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SimpleLateralPlusDebug* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.SimpleLateralPlusDebug"; }

 protected:
  explicit SimpleLateralPlusDebug(::google::protobuf::Arena* arena);
  SimpleLateralPlusDebug(::google::protobuf::Arena* arena, const SimpleLateralPlusDebug& from);
  SimpleLateralPlusDebug(::google::protobuf::Arena* arena, SimpleLateralPlusDebug&& from) noexcept
      : SimpleLateralPlusDebug(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlTaskNameFieldNumber = 35,
    kCurrentTargetPointFieldNumber = 30,
    kSteerMracDebugFieldNumber = 32,
    kLatControlCheckDebugFieldNumber = 36,
    kLateralErrorFieldNumber = 1,
    kRefHeadingFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kHeadingErrorFieldNumber = 4,
    kHeadingErrorRateFieldNumber = 5,
    kLateralErrorRateFieldNumber = 6,
    kCurvatureFieldNumber = 7,
    kSteerAngleFieldNumber = 8,
    kSteerAngleFeedforwardFieldNumber = 9,
    kSteerAngleLateralContributionFieldNumber = 10,
    kSteerAngleLateralRateContributionFieldNumber = 11,
    kSteerAngleHeadingContributionFieldNumber = 12,
    kSteerAngleHeadingRateContributionFieldNumber = 13,
    kSteerAngleFeedbackFieldNumber = 14,
    kSteeringPositionFieldNumber = 15,
    kRefSpeedFieldNumber = 16,
    kSteerAngleLimitedFieldNumber = 17,
    kLateralAccelerationFieldNumber = 18,
    kLateralJerkFieldNumber = 19,
    kRefHeadingRateFieldNumber = 20,
    kHeadingRateFieldNumber = 21,
    kRefHeadingAccelerationFieldNumber = 22,
    kHeadingAccelerationFieldNumber = 23,
    kHeadingErrorAccelerationFieldNumber = 24,
    kRefHeadingJerkFieldNumber = 25,
    kHeadingJerkFieldNumber = 26,
    kHeadingErrorJerkFieldNumber = 27,
    kLateralErrorFeedbackFieldNumber = 28,
    kHeadingErrorFeedbackFieldNumber = 29,
    kSteerAngleFeedbackAugmentFieldNumber = 31,
    kLateralCentripetalAccelerationFieldNumber = 34,
    kEfaiRateFieldNumber = 37,
    kEdRateFieldNumber = 38,
    kSteerMracEnableStatusFieldNumber = 33,
  };
  // optional string control_task_name = 35;
  bool has_control_task_name() const;
  void clear_control_task_name() ;
  const std::string& control_task_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_control_task_name(Arg_&& arg, Args_... args);
  std::string* mutable_control_task_name();
  PROTOBUF_NODISCARD std::string* release_control_task_name();
  void set_allocated_control_task_name(std::string* value);

  private:
  const std::string& _internal_control_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_task_name(
      const std::string& value);
  std::string* _internal_mutable_control_task_name();

  public:
  // optional .control.common.TrajectoryPoint current_target_point = 30;
  bool has_current_target_point() const;
  void clear_current_target_point() ;
  const ::control::common::TrajectoryPoint& current_target_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_current_target_point();
  ::control::common::TrajectoryPoint* mutable_current_target_point();
  void set_allocated_current_target_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_current_target_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_target_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_current_target_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_target_point();

  public:
  // optional .control.MracDebug steer_mrac_debug = 32;
  bool has_steer_mrac_debug() const;
  void clear_steer_mrac_debug() ;
  const ::control::MracDebug& steer_mrac_debug() const;
  PROTOBUF_NODISCARD ::control::MracDebug* release_steer_mrac_debug();
  ::control::MracDebug* mutable_steer_mrac_debug();
  void set_allocated_steer_mrac_debug(::control::MracDebug* value);
  void unsafe_arena_set_allocated_steer_mrac_debug(::control::MracDebug* value);
  ::control::MracDebug* unsafe_arena_release_steer_mrac_debug();

  private:
  const ::control::MracDebug& _internal_steer_mrac_debug() const;
  ::control::MracDebug* _internal_mutable_steer_mrac_debug();

  public:
  // optional .control.ControlCheckDebug lat_control_check_debug = 36;
  bool has_lat_control_check_debug() const;
  void clear_lat_control_check_debug() ;
  const ::control::ControlCheckDebug& lat_control_check_debug() const;
  PROTOBUF_NODISCARD ::control::ControlCheckDebug* release_lat_control_check_debug();
  ::control::ControlCheckDebug* mutable_lat_control_check_debug();
  void set_allocated_lat_control_check_debug(::control::ControlCheckDebug* value);
  void unsafe_arena_set_allocated_lat_control_check_debug(::control::ControlCheckDebug* value);
  ::control::ControlCheckDebug* unsafe_arena_release_lat_control_check_debug();

  private:
  const ::control::ControlCheckDebug& _internal_lat_control_check_debug() const;
  ::control::ControlCheckDebug* _internal_mutable_lat_control_check_debug();

  public:
  // optional double lateral_error = 1;
  bool has_lateral_error() const;
  void clear_lateral_error() ;
  double lateral_error() const;
  void set_lateral_error(double value);

  private:
  double _internal_lateral_error() const;
  void _internal_set_lateral_error(double value);

  public:
  // optional double ref_heading = 2;
  bool has_ref_heading() const;
  void clear_ref_heading() ;
  double ref_heading() const;
  void set_ref_heading(double value);

  private:
  double _internal_ref_heading() const;
  void _internal_set_ref_heading(double value);

  public:
  // optional double heading = 3;
  bool has_heading() const;
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // optional double heading_error = 4;
  bool has_heading_error() const;
  void clear_heading_error() ;
  double heading_error() const;
  void set_heading_error(double value);

  private:
  double _internal_heading_error() const;
  void _internal_set_heading_error(double value);

  public:
  // optional double heading_error_rate = 5;
  bool has_heading_error_rate() const;
  void clear_heading_error_rate() ;
  double heading_error_rate() const;
  void set_heading_error_rate(double value);

  private:
  double _internal_heading_error_rate() const;
  void _internal_set_heading_error_rate(double value);

  public:
  // optional double lateral_error_rate = 6;
  bool has_lateral_error_rate() const;
  void clear_lateral_error_rate() ;
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);

  private:
  double _internal_lateral_error_rate() const;
  void _internal_set_lateral_error_rate(double value);

  public:
  // optional double curvature = 7;
  bool has_curvature() const;
  void clear_curvature() ;
  double curvature() const;
  void set_curvature(double value);

  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);

  public:
  // optional double steer_angle = 8;
  bool has_steer_angle() const;
  void clear_steer_angle() ;
  double steer_angle() const;
  void set_steer_angle(double value);

  private:
  double _internal_steer_angle() const;
  void _internal_set_steer_angle(double value);

  public:
  // optional double steer_angle_feedforward = 9;
  bool has_steer_angle_feedforward() const;
  void clear_steer_angle_feedforward() ;
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);

  private:
  double _internal_steer_angle_feedforward() const;
  void _internal_set_steer_angle_feedforward(double value);

  public:
  // optional double steer_angle_lateral_contribution = 10;
  bool has_steer_angle_lateral_contribution() const;
  void clear_steer_angle_lateral_contribution() ;
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);

  private:
  double _internal_steer_angle_lateral_contribution() const;
  void _internal_set_steer_angle_lateral_contribution(double value);

  public:
  // optional double steer_angle_lateral_rate_contribution = 11;
  bool has_steer_angle_lateral_rate_contribution() const;
  void clear_steer_angle_lateral_rate_contribution() ;
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);

  private:
  double _internal_steer_angle_lateral_rate_contribution() const;
  void _internal_set_steer_angle_lateral_rate_contribution(double value);

  public:
  // optional double steer_angle_heading_contribution = 12;
  bool has_steer_angle_heading_contribution() const;
  void clear_steer_angle_heading_contribution() ;
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);

  private:
  double _internal_steer_angle_heading_contribution() const;
  void _internal_set_steer_angle_heading_contribution(double value);

  public:
  // optional double steer_angle_heading_rate_contribution = 13;
  bool has_steer_angle_heading_rate_contribution() const;
  void clear_steer_angle_heading_rate_contribution() ;
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);

  private:
  double _internal_steer_angle_heading_rate_contribution() const;
  void _internal_set_steer_angle_heading_rate_contribution(double value);

  public:
  // optional double steer_angle_feedback = 14;
  bool has_steer_angle_feedback() const;
  void clear_steer_angle_feedback() ;
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);

  private:
  double _internal_steer_angle_feedback() const;
  void _internal_set_steer_angle_feedback(double value);

  public:
  // optional double steering_position = 15;
  bool has_steering_position() const;
  void clear_steering_position() ;
  double steering_position() const;
  void set_steering_position(double value);

  private:
  double _internal_steering_position() const;
  void _internal_set_steering_position(double value);

  public:
  // optional double ref_speed = 16;
  bool has_ref_speed() const;
  void clear_ref_speed() ;
  double ref_speed() const;
  void set_ref_speed(double value);

  private:
  double _internal_ref_speed() const;
  void _internal_set_ref_speed(double value);

  public:
  // optional double steer_angle_limited = 17;
  bool has_steer_angle_limited() const;
  void clear_steer_angle_limited() ;
  double steer_angle_limited() const;
  void set_steer_angle_limited(double value);

  private:
  double _internal_steer_angle_limited() const;
  void _internal_set_steer_angle_limited(double value);

  public:
  // optional double lateral_acceleration = 18;
  bool has_lateral_acceleration() const;
  void clear_lateral_acceleration() ;
  double lateral_acceleration() const;
  void set_lateral_acceleration(double value);

  private:
  double _internal_lateral_acceleration() const;
  void _internal_set_lateral_acceleration(double value);

  public:
  // optional double lateral_jerk = 19;
  bool has_lateral_jerk() const;
  void clear_lateral_jerk() ;
  double lateral_jerk() const;
  void set_lateral_jerk(double value);

  private:
  double _internal_lateral_jerk() const;
  void _internal_set_lateral_jerk(double value);

  public:
  // optional double ref_heading_rate = 20;
  bool has_ref_heading_rate() const;
  void clear_ref_heading_rate() ;
  double ref_heading_rate() const;
  void set_ref_heading_rate(double value);

  private:
  double _internal_ref_heading_rate() const;
  void _internal_set_ref_heading_rate(double value);

  public:
  // optional double heading_rate = 21;
  bool has_heading_rate() const;
  void clear_heading_rate() ;
  double heading_rate() const;
  void set_heading_rate(double value);

  private:
  double _internal_heading_rate() const;
  void _internal_set_heading_rate(double value);

  public:
  // optional double ref_heading_acceleration = 22;
  bool has_ref_heading_acceleration() const;
  void clear_ref_heading_acceleration() ;
  double ref_heading_acceleration() const;
  void set_ref_heading_acceleration(double value);

  private:
  double _internal_ref_heading_acceleration() const;
  void _internal_set_ref_heading_acceleration(double value);

  public:
  // optional double heading_acceleration = 23;
  bool has_heading_acceleration() const;
  void clear_heading_acceleration() ;
  double heading_acceleration() const;
  void set_heading_acceleration(double value);

  private:
  double _internal_heading_acceleration() const;
  void _internal_set_heading_acceleration(double value);

  public:
  // optional double heading_error_acceleration = 24;
  bool has_heading_error_acceleration() const;
  void clear_heading_error_acceleration() ;
  double heading_error_acceleration() const;
  void set_heading_error_acceleration(double value);

  private:
  double _internal_heading_error_acceleration() const;
  void _internal_set_heading_error_acceleration(double value);

  public:
  // optional double ref_heading_jerk = 25;
  bool has_ref_heading_jerk() const;
  void clear_ref_heading_jerk() ;
  double ref_heading_jerk() const;
  void set_ref_heading_jerk(double value);

  private:
  double _internal_ref_heading_jerk() const;
  void _internal_set_ref_heading_jerk(double value);

  public:
  // optional double heading_jerk = 26;
  bool has_heading_jerk() const;
  void clear_heading_jerk() ;
  double heading_jerk() const;
  void set_heading_jerk(double value);

  private:
  double _internal_heading_jerk() const;
  void _internal_set_heading_jerk(double value);

  public:
  // optional double heading_error_jerk = 27;
  bool has_heading_error_jerk() const;
  void clear_heading_error_jerk() ;
  double heading_error_jerk() const;
  void set_heading_error_jerk(double value);

  private:
  double _internal_heading_error_jerk() const;
  void _internal_set_heading_error_jerk(double value);

  public:
  // optional double lateral_error_feedback = 28;
  bool has_lateral_error_feedback() const;
  void clear_lateral_error_feedback() ;
  double lateral_error_feedback() const;
  void set_lateral_error_feedback(double value);

  private:
  double _internal_lateral_error_feedback() const;
  void _internal_set_lateral_error_feedback(double value);

  public:
  // optional double heading_error_feedback = 29;
  bool has_heading_error_feedback() const;
  void clear_heading_error_feedback() ;
  double heading_error_feedback() const;
  void set_heading_error_feedback(double value);

  private:
  double _internal_heading_error_feedback() const;
  void _internal_set_heading_error_feedback(double value);

  public:
  // optional double steer_angle_feedback_augment = 31;
  bool has_steer_angle_feedback_augment() const;
  void clear_steer_angle_feedback_augment() ;
  double steer_angle_feedback_augment() const;
  void set_steer_angle_feedback_augment(double value);

  private:
  double _internal_steer_angle_feedback_augment() const;
  void _internal_set_steer_angle_feedback_augment(double value);

  public:
  // optional double lateral_centripetal_acceleration = 34;
  bool has_lateral_centripetal_acceleration() const;
  void clear_lateral_centripetal_acceleration() ;
  double lateral_centripetal_acceleration() const;
  void set_lateral_centripetal_acceleration(double value);

  private:
  double _internal_lateral_centripetal_acceleration() const;
  void _internal_set_lateral_centripetal_acceleration(double value);

  public:
  // optional double efai_rate = 37;
  bool has_efai_rate() const;
  void clear_efai_rate() ;
  double efai_rate() const;
  void set_efai_rate(double value);

  private:
  double _internal_efai_rate() const;
  void _internal_set_efai_rate(double value);

  public:
  // optional double ed_rate = 38;
  bool has_ed_rate() const;
  void clear_ed_rate() ;
  double ed_rate() const;
  void set_ed_rate(double value);

  private:
  double _internal_ed_rate() const;
  void _internal_set_ed_rate(double value);

  public:
  // optional bool steer_mrac_enable_status = 33;
  bool has_steer_mrac_enable_status() const;
  void clear_steer_mrac_enable_status() ;
  bool steer_mrac_enable_status() const;
  void set_steer_mrac_enable_status(bool value);

  private:
  bool _internal_steer_mrac_enable_status() const;
  void _internal_set_steer_mrac_enable_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.SimpleLateralPlusDebug)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 38, 3,
      88, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SimpleLateralPlusDebug_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleLateralPlusDebug& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr control_task_name_;
    ::control::common::TrajectoryPoint* current_target_point_;
    ::control::MracDebug* steer_mrac_debug_;
    ::control::ControlCheckDebug* lat_control_check_debug_;
    double lateral_error_;
    double ref_heading_;
    double heading_;
    double heading_error_;
    double heading_error_rate_;
    double lateral_error_rate_;
    double curvature_;
    double steer_angle_;
    double steer_angle_feedforward_;
    double steer_angle_lateral_contribution_;
    double steer_angle_lateral_rate_contribution_;
    double steer_angle_heading_contribution_;
    double steer_angle_heading_rate_contribution_;
    double steer_angle_feedback_;
    double steering_position_;
    double ref_speed_;
    double steer_angle_limited_;
    double lateral_acceleration_;
    double lateral_jerk_;
    double ref_heading_rate_;
    double heading_rate_;
    double ref_heading_acceleration_;
    double heading_acceleration_;
    double heading_error_acceleration_;
    double ref_heading_jerk_;
    double heading_jerk_;
    double heading_error_jerk_;
    double lateral_error_feedback_;
    double heading_error_feedback_;
    double steer_angle_feedback_augment_;
    double lateral_centripetal_acceleration_;
    double efai_rate_;
    double ed_rate_;
    bool steer_mrac_enable_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class CleaningSafetyCheckDebug final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.CleaningSafetyCheckDebug) */ {
 public:
  inline CleaningSafetyCheckDebug() : CleaningSafetyCheckDebug(nullptr) {}
  ~CleaningSafetyCheckDebug() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CleaningSafetyCheckDebug(
      ::google::protobuf::internal::ConstantInitialized);

  inline CleaningSafetyCheckDebug(const CleaningSafetyCheckDebug& from) : CleaningSafetyCheckDebug(nullptr, from) {}
  inline CleaningSafetyCheckDebug(CleaningSafetyCheckDebug&& from) noexcept
      : CleaningSafetyCheckDebug(nullptr, std::move(from)) {}
  inline CleaningSafetyCheckDebug& operator=(const CleaningSafetyCheckDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleaningSafetyCheckDebug& operator=(CleaningSafetyCheckDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleaningSafetyCheckDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleaningSafetyCheckDebug* internal_default_instance() {
    return reinterpret_cast<const CleaningSafetyCheckDebug*>(
        &_CleaningSafetyCheckDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CleaningSafetyCheckDebug& a, CleaningSafetyCheckDebug& b) { a.Swap(&b); }
  inline void Swap(CleaningSafetyCheckDebug* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleaningSafetyCheckDebug* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleaningSafetyCheckDebug* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CleaningSafetyCheckDebug>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CleaningSafetyCheckDebug& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CleaningSafetyCheckDebug& from) { CleaningSafetyCheckDebug::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CleaningSafetyCheckDebug* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.CleaningSafetyCheckDebug"; }

 protected:
  explicit CleaningSafetyCheckDebug(::google::protobuf::Arena* arena);
  CleaningSafetyCheckDebug(::google::protobuf::Arena* arena, const CleaningSafetyCheckDebug& from);
  CleaningSafetyCheckDebug(::google::protobuf::Arena* arena, CleaningSafetyCheckDebug&& from) noexcept
      : CleaningSafetyCheckDebug(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPredictedTrajectoryPointFieldNumber = 5,
    kControlTaskNameFieldNumber = 1,
    kCleaningControlCheckDebugFieldNumber = 3,
    kCurrentPredictedEndPointFieldNumber = 4,
    kPostProcessThrottleCmdFieldNumber = 8,
    kPostProcessBrakeCmdFieldNumber = 9,
    kIsNeedPostCommandFieldNumber = 2,
    kIsPredictedCollsionFieldNumber = 6,
  };
  // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
  int predicted_trajectory_point_size() const;
  private:
  int _internal_predicted_trajectory_point_size() const;

  public:
  void clear_predicted_trajectory_point() ;
  ::control::common::TrajectoryPoint* mutable_predicted_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* mutable_predicted_trajectory_point();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& _internal_predicted_trajectory_point() const;
  ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* _internal_mutable_predicted_trajectory_point();
  public:
  const ::control::common::TrajectoryPoint& predicted_trajectory_point(int index) const;
  ::control::common::TrajectoryPoint* add_predicted_trajectory_point();
  const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& predicted_trajectory_point() const;
  // optional string control_task_name = 1;
  bool has_control_task_name() const;
  void clear_control_task_name() ;
  const std::string& control_task_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_control_task_name(Arg_&& arg, Args_... args);
  std::string* mutable_control_task_name();
  PROTOBUF_NODISCARD std::string* release_control_task_name();
  void set_allocated_control_task_name(std::string* value);

  private:
  const std::string& _internal_control_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_task_name(
      const std::string& value);
  std::string* _internal_mutable_control_task_name();

  public:
  // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
  bool has_cleaning_control_check_debug() const;
  void clear_cleaning_control_check_debug() ;
  const ::control::ControlCheckDebug& cleaning_control_check_debug() const;
  PROTOBUF_NODISCARD ::control::ControlCheckDebug* release_cleaning_control_check_debug();
  ::control::ControlCheckDebug* mutable_cleaning_control_check_debug();
  void set_allocated_cleaning_control_check_debug(::control::ControlCheckDebug* value);
  void unsafe_arena_set_allocated_cleaning_control_check_debug(::control::ControlCheckDebug* value);
  ::control::ControlCheckDebug* unsafe_arena_release_cleaning_control_check_debug();

  private:
  const ::control::ControlCheckDebug& _internal_cleaning_control_check_debug() const;
  ::control::ControlCheckDebug* _internal_mutable_cleaning_control_check_debug();

  public:
  // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
  bool has_current_predicted_end_point() const;
  void clear_current_predicted_end_point() ;
  const ::control::common::TrajectoryPoint& current_predicted_end_point() const;
  PROTOBUF_NODISCARD ::control::common::TrajectoryPoint* release_current_predicted_end_point();
  ::control::common::TrajectoryPoint* mutable_current_predicted_end_point();
  void set_allocated_current_predicted_end_point(::control::common::TrajectoryPoint* value);
  void unsafe_arena_set_allocated_current_predicted_end_point(::control::common::TrajectoryPoint* value);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_predicted_end_point();

  private:
  const ::control::common::TrajectoryPoint& _internal_current_predicted_end_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_predicted_end_point();

  public:
  // optional double post_process_throttle_cmd = 8;
  bool has_post_process_throttle_cmd() const;
  void clear_post_process_throttle_cmd() ;
  double post_process_throttle_cmd() const;
  void set_post_process_throttle_cmd(double value);

  private:
  double _internal_post_process_throttle_cmd() const;
  void _internal_set_post_process_throttle_cmd(double value);

  public:
  // optional double post_process_brake_cmd = 9;
  bool has_post_process_brake_cmd() const;
  void clear_post_process_brake_cmd() ;
  double post_process_brake_cmd() const;
  void set_post_process_brake_cmd(double value);

  private:
  double _internal_post_process_brake_cmd() const;
  void _internal_set_post_process_brake_cmd(double value);

  public:
  // optional bool is_need_post_command = 2;
  bool has_is_need_post_command() const;
  void clear_is_need_post_command() ;
  bool is_need_post_command() const;
  void set_is_need_post_command(bool value);

  private:
  bool _internal_is_need_post_command() const;
  void _internal_set_is_need_post_command(bool value);

  public:
  // optional bool is_predicted_collsion = 6;
  bool has_is_predicted_collsion() const;
  void clear_is_predicted_collsion() ;
  bool is_predicted_collsion() const;
  void set_is_predicted_collsion(bool value);

  private:
  bool _internal_is_predicted_collsion() const;
  void _internal_set_is_predicted_collsion(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.CleaningSafetyCheckDebug)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 3,
      66, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CleaningSafetyCheckDebug_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CleaningSafetyCheckDebug& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::control::common::TrajectoryPoint > predicted_trajectory_point_;
    ::google::protobuf::internal::ArenaStringPtr control_task_name_;
    ::control::ControlCheckDebug* cleaning_control_check_debug_;
    ::control::common::TrajectoryPoint* current_predicted_end_point_;
    double post_process_throttle_cmd_;
    double post_process_brake_cmd_;
    bool is_need_post_command_;
    bool is_predicted_collsion_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class ControlDebugInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.ControlDebugInfo) */ {
 public:
  inline ControlDebugInfo() : ControlDebugInfo(nullptr) {}
  ~ControlDebugInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControlDebugInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControlDebugInfo(const ControlDebugInfo& from) : ControlDebugInfo(nullptr, from) {}
  inline ControlDebugInfo(ControlDebugInfo&& from) noexcept
      : ControlDebugInfo(nullptr, std::move(from)) {}
  inline ControlDebugInfo& operator=(const ControlDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlDebugInfo& operator=(ControlDebugInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlDebugInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlDebugInfo* internal_default_instance() {
    return reinterpret_cast<const ControlDebugInfo*>(
        &_ControlDebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ControlDebugInfo& a, ControlDebugInfo& b) { a.Swap(&b); }
  inline void Swap(ControlDebugInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlDebugInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlDebugInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ControlDebugInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlDebugInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControlDebugInfo& from) { ControlDebugInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControlDebugInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.ControlDebugInfo"; }

 protected:
  explicit ControlDebugInfo(::google::protobuf::Arena* arena);
  ControlDebugInfo(::google::protobuf::Arena* arena, const ControlDebugInfo& from);
  ControlDebugInfo(::google::protobuf::Arena* arena, ControlDebugInfo&& from) noexcept
      : ControlDebugInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kSimpleLonDebugFieldNumber = 2,
    kSimpleLatDebugFieldNumber = 3,
    kSimpleMpcDebugFieldNumber = 4,
    kSimpleAntiSlopeDebugFieldNumber = 5,
    kCleaningSafetyCheckDebugFieldNumber = 6,
  };
  // optional .control.common.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::control::common::Header& header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_header();

  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();

  public:
  // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
  bool has_simple_lon_debug() const;
  void clear_simple_lon_debug() ;
  const ::control::SimpleLongitudinalPlusDebug& simple_lon_debug() const;
  PROTOBUF_NODISCARD ::control::SimpleLongitudinalPlusDebug* release_simple_lon_debug();
  ::control::SimpleLongitudinalPlusDebug* mutable_simple_lon_debug();
  void set_allocated_simple_lon_debug(::control::SimpleLongitudinalPlusDebug* value);
  void unsafe_arena_set_allocated_simple_lon_debug(::control::SimpleLongitudinalPlusDebug* value);
  ::control::SimpleLongitudinalPlusDebug* unsafe_arena_release_simple_lon_debug();

  private:
  const ::control::SimpleLongitudinalPlusDebug& _internal_simple_lon_debug() const;
  ::control::SimpleLongitudinalPlusDebug* _internal_mutable_simple_lon_debug();

  public:
  // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
  bool has_simple_lat_debug() const;
  void clear_simple_lat_debug() ;
  const ::control::SimpleLateralPlusDebug& simple_lat_debug() const;
  PROTOBUF_NODISCARD ::control::SimpleLateralPlusDebug* release_simple_lat_debug();
  ::control::SimpleLateralPlusDebug* mutable_simple_lat_debug();
  void set_allocated_simple_lat_debug(::control::SimpleLateralPlusDebug* value);
  void unsafe_arena_set_allocated_simple_lat_debug(::control::SimpleLateralPlusDebug* value);
  ::control::SimpleLateralPlusDebug* unsafe_arena_release_simple_lat_debug();

  private:
  const ::control::SimpleLateralPlusDebug& _internal_simple_lat_debug() const;
  ::control::SimpleLateralPlusDebug* _internal_mutable_simple_lat_debug();

  public:
  // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
  bool has_simple_mpc_debug() const;
  void clear_simple_mpc_debug() ;
  const ::control::SimpleMPCPlusDebug& simple_mpc_debug() const;
  PROTOBUF_NODISCARD ::control::SimpleMPCPlusDebug* release_simple_mpc_debug();
  ::control::SimpleMPCPlusDebug* mutable_simple_mpc_debug();
  void set_allocated_simple_mpc_debug(::control::SimpleMPCPlusDebug* value);
  void unsafe_arena_set_allocated_simple_mpc_debug(::control::SimpleMPCPlusDebug* value);
  ::control::SimpleMPCPlusDebug* unsafe_arena_release_simple_mpc_debug();

  private:
  const ::control::SimpleMPCPlusDebug& _internal_simple_mpc_debug() const;
  ::control::SimpleMPCPlusDebug* _internal_mutable_simple_mpc_debug();

  public:
  // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
  bool has_simple_anti_slope_debug() const;
  void clear_simple_anti_slope_debug() ;
  const ::control::SimpleAntiSlopeDebug& simple_anti_slope_debug() const;
  PROTOBUF_NODISCARD ::control::SimpleAntiSlopeDebug* release_simple_anti_slope_debug();
  ::control::SimpleAntiSlopeDebug* mutable_simple_anti_slope_debug();
  void set_allocated_simple_anti_slope_debug(::control::SimpleAntiSlopeDebug* value);
  void unsafe_arena_set_allocated_simple_anti_slope_debug(::control::SimpleAntiSlopeDebug* value);
  ::control::SimpleAntiSlopeDebug* unsafe_arena_release_simple_anti_slope_debug();

  private:
  const ::control::SimpleAntiSlopeDebug& _internal_simple_anti_slope_debug() const;
  ::control::SimpleAntiSlopeDebug* _internal_mutable_simple_anti_slope_debug();

  public:
  // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
  bool has_cleaning_safety_check_debug() const;
  void clear_cleaning_safety_check_debug() ;
  const ::control::CleaningSafetyCheckDebug& cleaning_safety_check_debug() const;
  PROTOBUF_NODISCARD ::control::CleaningSafetyCheckDebug* release_cleaning_safety_check_debug();
  ::control::CleaningSafetyCheckDebug* mutable_cleaning_safety_check_debug();
  void set_allocated_cleaning_safety_check_debug(::control::CleaningSafetyCheckDebug* value);
  void unsafe_arena_set_allocated_cleaning_safety_check_debug(::control::CleaningSafetyCheckDebug* value);
  ::control::CleaningSafetyCheckDebug* unsafe_arena_release_cleaning_safety_check_debug();

  private:
  const ::control::CleaningSafetyCheckDebug& _internal_cleaning_safety_check_debug() const;
  ::control::CleaningSafetyCheckDebug* _internal_mutable_cleaning_safety_check_debug();

  public:
  // @@protoc_insertion_point(class_scope:control.ControlDebugInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ControlDebugInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControlDebugInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::Header* header_;
    ::control::SimpleLongitudinalPlusDebug* simple_lon_debug_;
    ::control::SimpleLateralPlusDebug* simple_lat_debug_;
    ::control::SimpleMPCPlusDebug* simple_mpc_debug_;
    ::control::SimpleAntiSlopeDebug* simple_anti_slope_debug_;
    ::control::CleaningSafetyCheckDebug* cleaning_safety_check_debug_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ControlDebugInfo

// optional .control.common.Header header = 1;
inline bool ControlDebugInfo::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::control::common::Header& ControlDebugInfo::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& ControlDebugInfo::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.ControlDebugInfo.header)
  return _internal_header();
}
inline void ControlDebugInfo::unsafe_arena_set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlDebugInfo.header)
}
inline ::control::common::Header* ControlDebugInfo::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* ControlDebugInfo::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.ControlDebugInfo.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::control::common::Header* ControlDebugInfo::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.header_;
}
inline ::control::common::Header* ControlDebugInfo::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:control.ControlDebugInfo.header)
  return _msg;
}
inline void ControlDebugInfo::set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.ControlDebugInfo.header)
}

// optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
inline bool ControlDebugInfo::has_simple_lon_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.simple_lon_debug_ != nullptr);
  return value;
}
inline void ControlDebugInfo::clear_simple_lon_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_lon_debug_ != nullptr) _impl_.simple_lon_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::control::SimpleLongitudinalPlusDebug& ControlDebugInfo::_internal_simple_lon_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::SimpleLongitudinalPlusDebug* p = _impl_.simple_lon_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::SimpleLongitudinalPlusDebug&>(::control::_SimpleLongitudinalPlusDebug_default_instance_);
}
inline const ::control::SimpleLongitudinalPlusDebug& ControlDebugInfo::simple_lon_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.ControlDebugInfo.simple_lon_debug)
  return _internal_simple_lon_debug();
}
inline void ControlDebugInfo::unsafe_arena_set_allocated_simple_lon_debug(::control::SimpleLongitudinalPlusDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.simple_lon_debug_);
  }
  _impl_.simple_lon_debug_ = reinterpret_cast<::control::SimpleLongitudinalPlusDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlDebugInfo.simple_lon_debug)
}
inline ::control::SimpleLongitudinalPlusDebug* ControlDebugInfo::release_simple_lon_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::SimpleLongitudinalPlusDebug* released = _impl_.simple_lon_debug_;
  _impl_.simple_lon_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::SimpleLongitudinalPlusDebug* ControlDebugInfo::unsafe_arena_release_simple_lon_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.ControlDebugInfo.simple_lon_debug)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::SimpleLongitudinalPlusDebug* temp = _impl_.simple_lon_debug_;
  _impl_.simple_lon_debug_ = nullptr;
  return temp;
}
inline ::control::SimpleLongitudinalPlusDebug* ControlDebugInfo::_internal_mutable_simple_lon_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_lon_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::SimpleLongitudinalPlusDebug>(GetArena());
    _impl_.simple_lon_debug_ = reinterpret_cast<::control::SimpleLongitudinalPlusDebug*>(p);
  }
  return _impl_.simple_lon_debug_;
}
inline ::control::SimpleLongitudinalPlusDebug* ControlDebugInfo::mutable_simple_lon_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::SimpleLongitudinalPlusDebug* _msg = _internal_mutable_simple_lon_debug();
  // @@protoc_insertion_point(field_mutable:control.ControlDebugInfo.simple_lon_debug)
  return _msg;
}
inline void ControlDebugInfo::set_allocated_simple_lon_debug(::control::SimpleLongitudinalPlusDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.simple_lon_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.simple_lon_debug_ = reinterpret_cast<::control::SimpleLongitudinalPlusDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.ControlDebugInfo.simple_lon_debug)
}

// optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
inline bool ControlDebugInfo::has_simple_lat_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.simple_lat_debug_ != nullptr);
  return value;
}
inline void ControlDebugInfo::clear_simple_lat_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_lat_debug_ != nullptr) _impl_.simple_lat_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::control::SimpleLateralPlusDebug& ControlDebugInfo::_internal_simple_lat_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::SimpleLateralPlusDebug* p = _impl_.simple_lat_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::SimpleLateralPlusDebug&>(::control::_SimpleLateralPlusDebug_default_instance_);
}
inline const ::control::SimpleLateralPlusDebug& ControlDebugInfo::simple_lat_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.ControlDebugInfo.simple_lat_debug)
  return _internal_simple_lat_debug();
}
inline void ControlDebugInfo::unsafe_arena_set_allocated_simple_lat_debug(::control::SimpleLateralPlusDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.simple_lat_debug_);
  }
  _impl_.simple_lat_debug_ = reinterpret_cast<::control::SimpleLateralPlusDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlDebugInfo.simple_lat_debug)
}
inline ::control::SimpleLateralPlusDebug* ControlDebugInfo::release_simple_lat_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::SimpleLateralPlusDebug* released = _impl_.simple_lat_debug_;
  _impl_.simple_lat_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::SimpleLateralPlusDebug* ControlDebugInfo::unsafe_arena_release_simple_lat_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.ControlDebugInfo.simple_lat_debug)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::SimpleLateralPlusDebug* temp = _impl_.simple_lat_debug_;
  _impl_.simple_lat_debug_ = nullptr;
  return temp;
}
inline ::control::SimpleLateralPlusDebug* ControlDebugInfo::_internal_mutable_simple_lat_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_lat_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::SimpleLateralPlusDebug>(GetArena());
    _impl_.simple_lat_debug_ = reinterpret_cast<::control::SimpleLateralPlusDebug*>(p);
  }
  return _impl_.simple_lat_debug_;
}
inline ::control::SimpleLateralPlusDebug* ControlDebugInfo::mutable_simple_lat_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::SimpleLateralPlusDebug* _msg = _internal_mutable_simple_lat_debug();
  // @@protoc_insertion_point(field_mutable:control.ControlDebugInfo.simple_lat_debug)
  return _msg;
}
inline void ControlDebugInfo::set_allocated_simple_lat_debug(::control::SimpleLateralPlusDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.simple_lat_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.simple_lat_debug_ = reinterpret_cast<::control::SimpleLateralPlusDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.ControlDebugInfo.simple_lat_debug)
}

// optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
inline bool ControlDebugInfo::has_simple_mpc_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.simple_mpc_debug_ != nullptr);
  return value;
}
inline void ControlDebugInfo::clear_simple_mpc_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_mpc_debug_ != nullptr) _impl_.simple_mpc_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::control::SimpleMPCPlusDebug& ControlDebugInfo::_internal_simple_mpc_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::SimpleMPCPlusDebug* p = _impl_.simple_mpc_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::SimpleMPCPlusDebug&>(::control::_SimpleMPCPlusDebug_default_instance_);
}
inline const ::control::SimpleMPCPlusDebug& ControlDebugInfo::simple_mpc_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.ControlDebugInfo.simple_mpc_debug)
  return _internal_simple_mpc_debug();
}
inline void ControlDebugInfo::unsafe_arena_set_allocated_simple_mpc_debug(::control::SimpleMPCPlusDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.simple_mpc_debug_);
  }
  _impl_.simple_mpc_debug_ = reinterpret_cast<::control::SimpleMPCPlusDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlDebugInfo.simple_mpc_debug)
}
inline ::control::SimpleMPCPlusDebug* ControlDebugInfo::release_simple_mpc_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::SimpleMPCPlusDebug* released = _impl_.simple_mpc_debug_;
  _impl_.simple_mpc_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::SimpleMPCPlusDebug* ControlDebugInfo::unsafe_arena_release_simple_mpc_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.ControlDebugInfo.simple_mpc_debug)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::SimpleMPCPlusDebug* temp = _impl_.simple_mpc_debug_;
  _impl_.simple_mpc_debug_ = nullptr;
  return temp;
}
inline ::control::SimpleMPCPlusDebug* ControlDebugInfo::_internal_mutable_simple_mpc_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_mpc_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::SimpleMPCPlusDebug>(GetArena());
    _impl_.simple_mpc_debug_ = reinterpret_cast<::control::SimpleMPCPlusDebug*>(p);
  }
  return _impl_.simple_mpc_debug_;
}
inline ::control::SimpleMPCPlusDebug* ControlDebugInfo::mutable_simple_mpc_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::SimpleMPCPlusDebug* _msg = _internal_mutable_simple_mpc_debug();
  // @@protoc_insertion_point(field_mutable:control.ControlDebugInfo.simple_mpc_debug)
  return _msg;
}
inline void ControlDebugInfo::set_allocated_simple_mpc_debug(::control::SimpleMPCPlusDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.simple_mpc_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.simple_mpc_debug_ = reinterpret_cast<::control::SimpleMPCPlusDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.ControlDebugInfo.simple_mpc_debug)
}

// optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
inline bool ControlDebugInfo::has_simple_anti_slope_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.simple_anti_slope_debug_ != nullptr);
  return value;
}
inline void ControlDebugInfo::clear_simple_anti_slope_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_anti_slope_debug_ != nullptr) _impl_.simple_anti_slope_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::control::SimpleAntiSlopeDebug& ControlDebugInfo::_internal_simple_anti_slope_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::SimpleAntiSlopeDebug* p = _impl_.simple_anti_slope_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::SimpleAntiSlopeDebug&>(::control::_SimpleAntiSlopeDebug_default_instance_);
}
inline const ::control::SimpleAntiSlopeDebug& ControlDebugInfo::simple_anti_slope_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.ControlDebugInfo.simple_anti_slope_debug)
  return _internal_simple_anti_slope_debug();
}
inline void ControlDebugInfo::unsafe_arena_set_allocated_simple_anti_slope_debug(::control::SimpleAntiSlopeDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.simple_anti_slope_debug_);
  }
  _impl_.simple_anti_slope_debug_ = reinterpret_cast<::control::SimpleAntiSlopeDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlDebugInfo.simple_anti_slope_debug)
}
inline ::control::SimpleAntiSlopeDebug* ControlDebugInfo::release_simple_anti_slope_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::SimpleAntiSlopeDebug* released = _impl_.simple_anti_slope_debug_;
  _impl_.simple_anti_slope_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::SimpleAntiSlopeDebug* ControlDebugInfo::unsafe_arena_release_simple_anti_slope_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.ControlDebugInfo.simple_anti_slope_debug)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::SimpleAntiSlopeDebug* temp = _impl_.simple_anti_slope_debug_;
  _impl_.simple_anti_slope_debug_ = nullptr;
  return temp;
}
inline ::control::SimpleAntiSlopeDebug* ControlDebugInfo::_internal_mutable_simple_anti_slope_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.simple_anti_slope_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::SimpleAntiSlopeDebug>(GetArena());
    _impl_.simple_anti_slope_debug_ = reinterpret_cast<::control::SimpleAntiSlopeDebug*>(p);
  }
  return _impl_.simple_anti_slope_debug_;
}
inline ::control::SimpleAntiSlopeDebug* ControlDebugInfo::mutable_simple_anti_slope_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::SimpleAntiSlopeDebug* _msg = _internal_mutable_simple_anti_slope_debug();
  // @@protoc_insertion_point(field_mutable:control.ControlDebugInfo.simple_anti_slope_debug)
  return _msg;
}
inline void ControlDebugInfo::set_allocated_simple_anti_slope_debug(::control::SimpleAntiSlopeDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.simple_anti_slope_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.simple_anti_slope_debug_ = reinterpret_cast<::control::SimpleAntiSlopeDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.ControlDebugInfo.simple_anti_slope_debug)
}

// optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
inline bool ControlDebugInfo::has_cleaning_safety_check_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cleaning_safety_check_debug_ != nullptr);
  return value;
}
inline void ControlDebugInfo::clear_cleaning_safety_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cleaning_safety_check_debug_ != nullptr) _impl_.cleaning_safety_check_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::control::CleaningSafetyCheckDebug& ControlDebugInfo::_internal_cleaning_safety_check_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::CleaningSafetyCheckDebug* p = _impl_.cleaning_safety_check_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::CleaningSafetyCheckDebug&>(::control::_CleaningSafetyCheckDebug_default_instance_);
}
inline const ::control::CleaningSafetyCheckDebug& ControlDebugInfo::cleaning_safety_check_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.ControlDebugInfo.cleaning_safety_check_debug)
  return _internal_cleaning_safety_check_debug();
}
inline void ControlDebugInfo::unsafe_arena_set_allocated_cleaning_safety_check_debug(::control::CleaningSafetyCheckDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cleaning_safety_check_debug_);
  }
  _impl_.cleaning_safety_check_debug_ = reinterpret_cast<::control::CleaningSafetyCheckDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlDebugInfo.cleaning_safety_check_debug)
}
inline ::control::CleaningSafetyCheckDebug* ControlDebugInfo::release_cleaning_safety_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::CleaningSafetyCheckDebug* released = _impl_.cleaning_safety_check_debug_;
  _impl_.cleaning_safety_check_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::CleaningSafetyCheckDebug* ControlDebugInfo::unsafe_arena_release_cleaning_safety_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.ControlDebugInfo.cleaning_safety_check_debug)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::CleaningSafetyCheckDebug* temp = _impl_.cleaning_safety_check_debug_;
  _impl_.cleaning_safety_check_debug_ = nullptr;
  return temp;
}
inline ::control::CleaningSafetyCheckDebug* ControlDebugInfo::_internal_mutable_cleaning_safety_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cleaning_safety_check_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::CleaningSafetyCheckDebug>(GetArena());
    _impl_.cleaning_safety_check_debug_ = reinterpret_cast<::control::CleaningSafetyCheckDebug*>(p);
  }
  return _impl_.cleaning_safety_check_debug_;
}
inline ::control::CleaningSafetyCheckDebug* ControlDebugInfo::mutable_cleaning_safety_check_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::control::CleaningSafetyCheckDebug* _msg = _internal_mutable_cleaning_safety_check_debug();
  // @@protoc_insertion_point(field_mutable:control.ControlDebugInfo.cleaning_safety_check_debug)
  return _msg;
}
inline void ControlDebugInfo::set_allocated_cleaning_safety_check_debug(::control::CleaningSafetyCheckDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.cleaning_safety_check_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.cleaning_safety_check_debug_ = reinterpret_cast<::control::CleaningSafetyCheckDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.ControlDebugInfo.cleaning_safety_check_debug)
}

// -------------------------------------------------------------------

// SimpleLongitudinalPlusDebug

// optional double station_reference = 1;
inline bool SimpleLongitudinalPlusDebug::has_station_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_station_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SimpleLongitudinalPlusDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.station_reference)
  return _internal_station_reference();
}
inline void SimpleLongitudinalPlusDebug::set_station_reference(double value) {
  _internal_set_station_reference(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.station_reference)
}
inline double SimpleLongitudinalPlusDebug::_internal_station_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_reference_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_station_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_reference_ = value;
}

// optional double station_error = 2;
inline bool SimpleLongitudinalPlusDebug::has_station_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_station_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SimpleLongitudinalPlusDebug::station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.station_error)
  return _internal_station_error();
}
inline void SimpleLongitudinalPlusDebug::set_station_error(double value) {
  _internal_set_station_error(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.station_error)
}
inline double SimpleLongitudinalPlusDebug::_internal_station_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_error_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_station_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_ = value;
}

// optional double station_error_limited = 3;
inline bool SimpleLongitudinalPlusDebug::has_station_error_limited() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_station_error_limited() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_limited_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double SimpleLongitudinalPlusDebug::station_error_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.station_error_limited)
  return _internal_station_error_limited();
}
inline void SimpleLongitudinalPlusDebug::set_station_error_limited(double value) {
  _internal_set_station_error_limited(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.station_error_limited)
}
inline double SimpleLongitudinalPlusDebug::_internal_station_error_limited() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_error_limited_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_station_error_limited(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_limited_ = value;
}

// optional double preview_station_error = 4;
inline bool SimpleLongitudinalPlusDebug::has_preview_station_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_preview_station_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_station_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double SimpleLongitudinalPlusDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.preview_station_error)
  return _internal_preview_station_error();
}
inline void SimpleLongitudinalPlusDebug::set_preview_station_error(double value) {
  _internal_set_preview_station_error(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.preview_station_error)
}
inline double SimpleLongitudinalPlusDebug::_internal_preview_station_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_station_error_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_preview_station_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_station_error_ = value;
}

// optional double speed_reference = 5;
inline bool SimpleLongitudinalPlusDebug::has_speed_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_speed_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double SimpleLongitudinalPlusDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.speed_reference)
  return _internal_speed_reference();
}
inline void SimpleLongitudinalPlusDebug::set_speed_reference(double value) {
  _internal_set_speed_reference(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.speed_reference)
}
inline double SimpleLongitudinalPlusDebug::_internal_speed_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_reference_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_speed_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_reference_ = value;
}

// optional double speed_error = 6;
inline bool SimpleLongitudinalPlusDebug::has_speed_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_speed_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double SimpleLongitudinalPlusDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.speed_error)
  return _internal_speed_error();
}
inline void SimpleLongitudinalPlusDebug::set_speed_error(double value) {
  _internal_set_speed_error(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.speed_error)
}
inline double SimpleLongitudinalPlusDebug::_internal_speed_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_error_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_speed_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_ = value;
}

// optional double speed_controller_input_limited = 7;
inline bool SimpleLongitudinalPlusDebug::has_speed_controller_input_limited() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_speed_controller_input_limited() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_controller_input_limited_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double SimpleLongitudinalPlusDebug::speed_controller_input_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.speed_controller_input_limited)
  return _internal_speed_controller_input_limited();
}
inline void SimpleLongitudinalPlusDebug::set_speed_controller_input_limited(double value) {
  _internal_set_speed_controller_input_limited(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.speed_controller_input_limited)
}
inline double SimpleLongitudinalPlusDebug::_internal_speed_controller_input_limited() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_controller_input_limited_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_speed_controller_input_limited(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_controller_input_limited_ = value;
}

// optional double preview_speed_reference = 8;
inline bool SimpleLongitudinalPlusDebug::has_preview_speed_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_preview_speed_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double SimpleLongitudinalPlusDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.preview_speed_reference)
  return _internal_preview_speed_reference();
}
inline void SimpleLongitudinalPlusDebug::set_preview_speed_reference(double value) {
  _internal_set_preview_speed_reference(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.preview_speed_reference)
}
inline double SimpleLongitudinalPlusDebug::_internal_preview_speed_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_speed_reference_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_preview_speed_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_reference_ = value;
}

// optional double preview_speed_error = 9;
inline bool SimpleLongitudinalPlusDebug::has_preview_speed_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_preview_speed_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double SimpleLongitudinalPlusDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.preview_speed_error)
  return _internal_preview_speed_error();
}
inline void SimpleLongitudinalPlusDebug::set_preview_speed_error(double value) {
  _internal_set_preview_speed_error(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.preview_speed_error)
}
inline double SimpleLongitudinalPlusDebug::_internal_preview_speed_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_speed_error_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_preview_speed_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_error_ = value;
}

// optional double preview_acceleration_reference = 10;
inline bool SimpleLongitudinalPlusDebug::has_preview_acceleration_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_preview_acceleration_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_acceleration_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double SimpleLongitudinalPlusDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.preview_acceleration_reference)
  return _internal_preview_acceleration_reference();
}
inline void SimpleLongitudinalPlusDebug::set_preview_acceleration_reference(double value) {
  _internal_set_preview_acceleration_reference(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.preview_acceleration_reference)
}
inline double SimpleLongitudinalPlusDebug::_internal_preview_acceleration_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_acceleration_reference_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_preview_acceleration_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_acceleration_reference_ = value;
}

// optional double acceleration_cmd_closeloop = 11;
inline bool SimpleLongitudinalPlusDebug::has_acceleration_cmd_closeloop() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_acceleration_cmd_closeloop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_closeloop_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double SimpleLongitudinalPlusDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.acceleration_cmd_closeloop)
  return _internal_acceleration_cmd_closeloop();
}
inline void SimpleLongitudinalPlusDebug::set_acceleration_cmd_closeloop(double value) {
  _internal_set_acceleration_cmd_closeloop(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.acceleration_cmd_closeloop)
}
inline double SimpleLongitudinalPlusDebug::_internal_acceleration_cmd_closeloop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_cmd_closeloop_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_acceleration_cmd_closeloop(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_closeloop_ = value;
}

// optional double acceleration_cmd = 12;
inline bool SimpleLongitudinalPlusDebug::has_acceleration_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_acceleration_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double SimpleLongitudinalPlusDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.acceleration_cmd)
  return _internal_acceleration_cmd();
}
inline void SimpleLongitudinalPlusDebug::set_acceleration_cmd(double value) {
  _internal_set_acceleration_cmd(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.acceleration_cmd)
}
inline double SimpleLongitudinalPlusDebug::_internal_acceleration_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_cmd_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_acceleration_cmd(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_ = value;
}

// optional double acceleration_lookup = 13;
inline bool SimpleLongitudinalPlusDebug::has_acceleration_lookup() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_acceleration_lookup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double SimpleLongitudinalPlusDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.acceleration_lookup)
  return _internal_acceleration_lookup();
}
inline void SimpleLongitudinalPlusDebug::set_acceleration_lookup(double value) {
  _internal_set_acceleration_lookup(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.acceleration_lookup)
}
inline double SimpleLongitudinalPlusDebug::_internal_acceleration_lookup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_lookup_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_acceleration_lookup(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_ = value;
}

// optional double speed_lookup = 14;
inline bool SimpleLongitudinalPlusDebug::has_speed_lookup() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_speed_lookup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_lookup_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double SimpleLongitudinalPlusDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.speed_lookup)
  return _internal_speed_lookup();
}
inline void SimpleLongitudinalPlusDebug::set_speed_lookup(double value) {
  _internal_set_speed_lookup(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.speed_lookup)
}
inline double SimpleLongitudinalPlusDebug::_internal_speed_lookup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_lookup_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_speed_lookup(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_lookup_ = value;
}

// optional double calibration_value = 15;
inline bool SimpleLongitudinalPlusDebug::has_calibration_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_calibration_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibration_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double SimpleLongitudinalPlusDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.calibration_value)
  return _internal_calibration_value();
}
inline void SimpleLongitudinalPlusDebug::set_calibration_value(double value) {
  _internal_set_calibration_value(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.calibration_value)
}
inline double SimpleLongitudinalPlusDebug::_internal_calibration_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.calibration_value_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_calibration_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibration_value_ = value;
}

// optional double throttle_cmd = 16;
inline bool SimpleLongitudinalPlusDebug::has_throttle_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_throttle_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double SimpleLongitudinalPlusDebug::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.throttle_cmd)
  return _internal_throttle_cmd();
}
inline void SimpleLongitudinalPlusDebug::set_throttle_cmd(double value) {
  _internal_set_throttle_cmd(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.throttle_cmd)
}
inline double SimpleLongitudinalPlusDebug::_internal_throttle_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_cmd_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_throttle_cmd(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_cmd_ = value;
}

// optional double brake_cmd = 17;
inline bool SimpleLongitudinalPlusDebug::has_brake_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_brake_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double SimpleLongitudinalPlusDebug::brake_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.brake_cmd)
  return _internal_brake_cmd();
}
inline void SimpleLongitudinalPlusDebug::set_brake_cmd(double value) {
  _internal_set_brake_cmd(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.brake_cmd)
}
inline double SimpleLongitudinalPlusDebug::_internal_brake_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_cmd_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_brake_cmd(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_cmd_ = value;
}

// optional bool is_full_stop = 18;
inline bool SimpleLongitudinalPlusDebug::has_is_full_stop() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_is_full_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_full_stop_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool SimpleLongitudinalPlusDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.is_full_stop)
  return _internal_is_full_stop();
}
inline void SimpleLongitudinalPlusDebug::set_is_full_stop(bool value) {
  _internal_set_is_full_stop(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.is_full_stop)
}
inline bool SimpleLongitudinalPlusDebug::_internal_is_full_stop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_full_stop_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_is_full_stop(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_full_stop_ = value;
}

// optional double slope_offset_compensation = 19;
inline bool SimpleLongitudinalPlusDebug::has_slope_offset_compensation() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_slope_offset_compensation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slope_offset_compensation_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double SimpleLongitudinalPlusDebug::slope_offset_compensation() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.slope_offset_compensation)
  return _internal_slope_offset_compensation();
}
inline void SimpleLongitudinalPlusDebug::set_slope_offset_compensation(double value) {
  _internal_set_slope_offset_compensation(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.slope_offset_compensation)
}
inline double SimpleLongitudinalPlusDebug::_internal_slope_offset_compensation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slope_offset_compensation_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_slope_offset_compensation(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slope_offset_compensation_ = value;
}

// optional double current_station = 20;
inline bool SimpleLongitudinalPlusDebug::has_current_station() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_current_station() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_station_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double SimpleLongitudinalPlusDebug::current_station() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.current_station)
  return _internal_current_station();
}
inline void SimpleLongitudinalPlusDebug::set_current_station(double value) {
  _internal_set_current_station(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.current_station)
}
inline double SimpleLongitudinalPlusDebug::_internal_current_station() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_station_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_current_station(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_station_ = value;
}

// optional double path_remain = 21;
inline bool SimpleLongitudinalPlusDebug::has_path_remain() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_path_remain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_remain_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double SimpleLongitudinalPlusDebug::path_remain() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.path_remain)
  return _internal_path_remain();
}
inline void SimpleLongitudinalPlusDebug::set_path_remain(double value) {
  _internal_set_path_remain(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.path_remain)
}
inline double SimpleLongitudinalPlusDebug::_internal_path_remain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_remain_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_path_remain(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_remain_ = value;
}

// optional int32 pid_saturation_status = 22;
inline bool SimpleLongitudinalPlusDebug::has_pid_saturation_status() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_pid_saturation_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_saturation_status_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t SimpleLongitudinalPlusDebug::pid_saturation_status() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.pid_saturation_status)
  return _internal_pid_saturation_status();
}
inline void SimpleLongitudinalPlusDebug::set_pid_saturation_status(::int32_t value) {
  _internal_set_pid_saturation_status(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.pid_saturation_status)
}
inline ::int32_t SimpleLongitudinalPlusDebug::_internal_pid_saturation_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pid_saturation_status_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_pid_saturation_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_saturation_status_ = value;
}

// optional int32 leadlag_saturation_status = 23;
inline bool SimpleLongitudinalPlusDebug::has_leadlag_saturation_status() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_leadlag_saturation_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leadlag_saturation_status_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int32_t SimpleLongitudinalPlusDebug::leadlag_saturation_status() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.leadlag_saturation_status)
  return _internal_leadlag_saturation_status();
}
inline void SimpleLongitudinalPlusDebug::set_leadlag_saturation_status(::int32_t value) {
  _internal_set_leadlag_saturation_status(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.leadlag_saturation_status)
}
inline ::int32_t SimpleLongitudinalPlusDebug::_internal_leadlag_saturation_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leadlag_saturation_status_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_leadlag_saturation_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leadlag_saturation_status_ = value;
}

// optional double speed_offset = 24;
inline bool SimpleLongitudinalPlusDebug::has_speed_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_speed_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_offset_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double SimpleLongitudinalPlusDebug::speed_offset() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.speed_offset)
  return _internal_speed_offset();
}
inline void SimpleLongitudinalPlusDebug::set_speed_offset(double value) {
  _internal_set_speed_offset(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.speed_offset)
}
inline double SimpleLongitudinalPlusDebug::_internal_speed_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_offset_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_speed_offset(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_offset_ = value;
}

// optional double current_speed = 25;
inline bool SimpleLongitudinalPlusDebug::has_current_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_current_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double SimpleLongitudinalPlusDebug::current_speed() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.current_speed)
  return _internal_current_speed();
}
inline void SimpleLongitudinalPlusDebug::set_current_speed(double value) {
  _internal_set_current_speed(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.current_speed)
}
inline double SimpleLongitudinalPlusDebug::_internal_current_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_speed_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_current_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_speed_ = value;
}

// optional double acceleration_reference = 26;
inline bool SimpleLongitudinalPlusDebug::has_acceleration_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_acceleration_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double SimpleLongitudinalPlusDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.acceleration_reference)
  return _internal_acceleration_reference();
}
inline void SimpleLongitudinalPlusDebug::set_acceleration_reference(double value) {
  _internal_set_acceleration_reference(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.acceleration_reference)
}
inline double SimpleLongitudinalPlusDebug::_internal_acceleration_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_reference_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_acceleration_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_reference_ = value;
}

// optional double current_acceleration = 27;
inline bool SimpleLongitudinalPlusDebug::has_current_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_current_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline double SimpleLongitudinalPlusDebug::current_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.current_acceleration)
  return _internal_current_acceleration();
}
inline void SimpleLongitudinalPlusDebug::set_current_acceleration(double value) {
  _internal_set_current_acceleration(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.current_acceleration)
}
inline double SimpleLongitudinalPlusDebug::_internal_current_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_acceleration_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_current_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_acceleration_ = value;
}

// optional double acceleration_error = 28;
inline bool SimpleLongitudinalPlusDebug::has_acceleration_error() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_acceleration_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_error_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double SimpleLongitudinalPlusDebug::acceleration_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.acceleration_error)
  return _internal_acceleration_error();
}
inline void SimpleLongitudinalPlusDebug::set_acceleration_error(double value) {
  _internal_set_acceleration_error(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.acceleration_error)
}
inline double SimpleLongitudinalPlusDebug::_internal_acceleration_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_error_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_acceleration_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_error_ = value;
}

// optional double jerk_reference = 29;
inline bool SimpleLongitudinalPlusDebug::has_jerk_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_jerk_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline double SimpleLongitudinalPlusDebug::jerk_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.jerk_reference)
  return _internal_jerk_reference();
}
inline void SimpleLongitudinalPlusDebug::set_jerk_reference(double value) {
  _internal_set_jerk_reference(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.jerk_reference)
}
inline double SimpleLongitudinalPlusDebug::_internal_jerk_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jerk_reference_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_jerk_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_reference_ = value;
}

// optional double current_jerk = 30;
inline bool SimpleLongitudinalPlusDebug::has_current_jerk() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_current_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_jerk_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline double SimpleLongitudinalPlusDebug::current_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.current_jerk)
  return _internal_current_jerk();
}
inline void SimpleLongitudinalPlusDebug::set_current_jerk(double value) {
  _internal_set_current_jerk(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.current_jerk)
}
inline double SimpleLongitudinalPlusDebug::_internal_current_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_jerk_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_current_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_jerk_ = value;
}

// optional double jerk_error = 31;
inline bool SimpleLongitudinalPlusDebug::has_jerk_error() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_jerk_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_error_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline double SimpleLongitudinalPlusDebug::jerk_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.jerk_error)
  return _internal_jerk_error();
}
inline void SimpleLongitudinalPlusDebug::set_jerk_error(double value) {
  _internal_set_jerk_error(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.jerk_error)
}
inline double SimpleLongitudinalPlusDebug::_internal_jerk_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jerk_error_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_jerk_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_error_ = value;
}

// optional .control.common.TrajectoryPoint current_matched_point = 32;
inline bool SimpleLongitudinalPlusDebug::has_current_matched_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_matched_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalPlusDebug::_internal_current_matched_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.current_matched_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalPlusDebug::current_matched_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.current_matched_point)
  return _internal_current_matched_point();
}
inline void SimpleLongitudinalPlusDebug::unsafe_arena_set_allocated_current_matched_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_matched_point_);
  }
  _impl_.current_matched_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLongitudinalPlusDebug.current_matched_point)
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::release_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* released = _impl_.current_matched_point_;
  _impl_.current_matched_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::unsafe_arena_release_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLongitudinalPlusDebug.current_matched_point)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* temp = _impl_.current_matched_point_;
  _impl_.current_matched_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::_internal_mutable_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_matched_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.current_matched_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.current_matched_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::mutable_current_matched_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_current_matched_point();
  // @@protoc_insertion_point(field_mutable:control.SimpleLongitudinalPlusDebug.current_matched_point)
  return _msg;
}
inline void SimpleLongitudinalPlusDebug::set_allocated_current_matched_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_matched_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.current_matched_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLongitudinalPlusDebug.current_matched_point)
}

// optional .control.common.TrajectoryPoint current_reference_point = 33;
inline bool SimpleLongitudinalPlusDebug::has_current_reference_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_reference_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalPlusDebug::_internal_current_reference_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.current_reference_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalPlusDebug::current_reference_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.current_reference_point)
  return _internal_current_reference_point();
}
inline void SimpleLongitudinalPlusDebug::unsafe_arena_set_allocated_current_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_reference_point_);
  }
  _impl_.current_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLongitudinalPlusDebug.current_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::release_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* released = _impl_.current_reference_point_;
  _impl_.current_reference_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::unsafe_arena_release_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLongitudinalPlusDebug.current_reference_point)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* temp = _impl_.current_reference_point_;
  _impl_.current_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::_internal_mutable_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_reference_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.current_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.current_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::mutable_current_reference_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_current_reference_point();
  // @@protoc_insertion_point(field_mutable:control.SimpleLongitudinalPlusDebug.current_reference_point)
  return _msg;
}
inline void SimpleLongitudinalPlusDebug::set_allocated_current_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_reference_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.current_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLongitudinalPlusDebug.current_reference_point)
}

// optional .control.common.TrajectoryPoint preview_reference_point = 34;
inline bool SimpleLongitudinalPlusDebug::has_preview_reference_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preview_reference_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalPlusDebug::_internal_preview_reference_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.preview_reference_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalPlusDebug::preview_reference_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.preview_reference_point)
  return _internal_preview_reference_point();
}
inline void SimpleLongitudinalPlusDebug::unsafe_arena_set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.preview_reference_point_);
  }
  _impl_.preview_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLongitudinalPlusDebug.preview_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::release_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::TrajectoryPoint* released = _impl_.preview_reference_point_;
  _impl_.preview_reference_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::unsafe_arena_release_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLongitudinalPlusDebug.preview_reference_point)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::TrajectoryPoint* temp = _impl_.preview_reference_point_;
  _impl_.preview_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::_internal_mutable_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.preview_reference_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.preview_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.preview_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalPlusDebug::mutable_preview_reference_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_preview_reference_point();
  // @@protoc_insertion_point(field_mutable:control.SimpleLongitudinalPlusDebug.preview_reference_point)
  return _msg;
}
inline void SimpleLongitudinalPlusDebug::set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.preview_reference_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.preview_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLongitudinalPlusDebug.preview_reference_point)
}

// optional double acceleration_lookup_limit = 35;
inline bool SimpleLongitudinalPlusDebug::has_acceleration_lookup_limit() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_acceleration_lookup_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_limit_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline double SimpleLongitudinalPlusDebug::acceleration_lookup_limit() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.acceleration_lookup_limit)
  return _internal_acceleration_lookup_limit();
}
inline void SimpleLongitudinalPlusDebug::set_acceleration_lookup_limit(double value) {
  _internal_set_acceleration_lookup_limit(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.acceleration_lookup_limit)
}
inline double SimpleLongitudinalPlusDebug::_internal_acceleration_lookup_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_lookup_limit_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_acceleration_lookup_limit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_limit_ = value;
}

// optional double vehicle_pitch = 36;
inline bool SimpleLongitudinalPlusDebug::has_vehicle_pitch() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_vehicle_pitch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_pitch_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline double SimpleLongitudinalPlusDebug::vehicle_pitch() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.vehicle_pitch)
  return _internal_vehicle_pitch();
}
inline void SimpleLongitudinalPlusDebug::set_vehicle_pitch(double value) {
  _internal_set_vehicle_pitch(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.vehicle_pitch)
}
inline double SimpleLongitudinalPlusDebug::_internal_vehicle_pitch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_pitch_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_vehicle_pitch(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_pitch_ = value;
}

// optional bool is_epb_brake = 37;
inline bool SimpleLongitudinalPlusDebug::has_is_epb_brake() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_is_epb_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_epb_brake_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool SimpleLongitudinalPlusDebug::is_epb_brake() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.is_epb_brake)
  return _internal_is_epb_brake();
}
inline void SimpleLongitudinalPlusDebug::set_is_epb_brake(bool value) {
  _internal_set_is_epb_brake(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.is_epb_brake)
}
inline bool SimpleLongitudinalPlusDebug::_internal_is_epb_brake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_epb_brake_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_is_epb_brake(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_epb_brake_ = value;
}

// optional double current_steer_interval = 38;
inline bool SimpleLongitudinalPlusDebug::has_current_steer_interval() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_current_steer_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_steer_interval_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline double SimpleLongitudinalPlusDebug::current_steer_interval() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.current_steer_interval)
  return _internal_current_steer_interval();
}
inline void SimpleLongitudinalPlusDebug::set_current_steer_interval(double value) {
  _internal_set_current_steer_interval(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.current_steer_interval)
}
inline double SimpleLongitudinalPlusDebug::_internal_current_steer_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_steer_interval_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_current_steer_interval(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_steer_interval_ = value;
}

// optional bool is_wait_steer = 39;
inline bool SimpleLongitudinalPlusDebug::has_is_wait_steer() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_is_wait_steer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wait_steer_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool SimpleLongitudinalPlusDebug::is_wait_steer() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.is_wait_steer)
  return _internal_is_wait_steer();
}
inline void SimpleLongitudinalPlusDebug::set_is_wait_steer(bool value) {
  _internal_set_is_wait_steer(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.is_wait_steer)
}
inline bool SimpleLongitudinalPlusDebug::_internal_is_wait_steer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_wait_steer_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_is_wait_steer(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wait_steer_ = value;
}

// optional bool is_stop_reason_by_destination = 40;
inline bool SimpleLongitudinalPlusDebug::has_is_stop_reason_by_destination() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_is_stop_reason_by_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_stop_reason_by_destination_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool SimpleLongitudinalPlusDebug::is_stop_reason_by_destination() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.is_stop_reason_by_destination)
  return _internal_is_stop_reason_by_destination();
}
inline void SimpleLongitudinalPlusDebug::set_is_stop_reason_by_destination(bool value) {
  _internal_set_is_stop_reason_by_destination(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.is_stop_reason_by_destination)
}
inline bool SimpleLongitudinalPlusDebug::_internal_is_stop_reason_by_destination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_stop_reason_by_destination_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_is_stop_reason_by_destination(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_stop_reason_by_destination_ = value;
}

// optional bool is_stop_reason_by_prdestrian = 41;
inline bool SimpleLongitudinalPlusDebug::has_is_stop_reason_by_prdestrian() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_is_stop_reason_by_prdestrian() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_stop_reason_by_prdestrian_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool SimpleLongitudinalPlusDebug::is_stop_reason_by_prdestrian() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.is_stop_reason_by_prdestrian)
  return _internal_is_stop_reason_by_prdestrian();
}
inline void SimpleLongitudinalPlusDebug::set_is_stop_reason_by_prdestrian(bool value) {
  _internal_set_is_stop_reason_by_prdestrian(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.is_stop_reason_by_prdestrian)
}
inline bool SimpleLongitudinalPlusDebug::_internal_is_stop_reason_by_prdestrian() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_stop_reason_by_prdestrian_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_is_stop_reason_by_prdestrian(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_stop_reason_by_prdestrian_ = value;
}

// optional bool is_full_stop_soft = 42;
inline bool SimpleLongitudinalPlusDebug::has_is_full_stop_soft() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_is_full_stop_soft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_full_stop_soft_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool SimpleLongitudinalPlusDebug::is_full_stop_soft() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.is_full_stop_soft)
  return _internal_is_full_stop_soft();
}
inline void SimpleLongitudinalPlusDebug::set_is_full_stop_soft(bool value) {
  _internal_set_is_full_stop_soft(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.is_full_stop_soft)
}
inline bool SimpleLongitudinalPlusDebug::_internal_is_full_stop_soft() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_full_stop_soft_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_is_full_stop_soft(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_full_stop_soft_ = value;
}

// optional string control_task_name = 43;
inline bool SimpleLongitudinalPlusDebug::has_control_task_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_task_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleLongitudinalPlusDebug::control_task_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.control_task_name)
  return _internal_control_task_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleLongitudinalPlusDebug::set_control_task_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.control_task_name)
}
inline std::string* SimpleLongitudinalPlusDebug::mutable_control_task_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_control_task_name();
  // @@protoc_insertion_point(field_mutable:control.SimpleLongitudinalPlusDebug.control_task_name)
  return _s;
}
inline const std::string& SimpleLongitudinalPlusDebug::_internal_control_task_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.control_task_name_.Get();
}
inline void SimpleLongitudinalPlusDebug::_internal_set_control_task_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(value, GetArena());
}
inline std::string* SimpleLongitudinalPlusDebug::_internal_mutable_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.control_task_name_.Mutable( GetArena());
}
inline std::string* SimpleLongitudinalPlusDebug::release_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLongitudinalPlusDebug.control_task_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.control_task_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.control_task_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SimpleLongitudinalPlusDebug::set_allocated_control_task_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.control_task_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.control_task_name_.IsDefault()) {
          _impl_.control_task_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLongitudinalPlusDebug.control_task_name)
}

// optional double path_remain_add = 44;
inline bool SimpleLongitudinalPlusDebug::has_path_remain_add() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_path_remain_add() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_remain_add_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline double SimpleLongitudinalPlusDebug::path_remain_add() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.path_remain_add)
  return _internal_path_remain_add();
}
inline void SimpleLongitudinalPlusDebug::set_path_remain_add(double value) {
  _internal_set_path_remain_add(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.path_remain_add)
}
inline double SimpleLongitudinalPlusDebug::_internal_path_remain_add() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_remain_add_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_path_remain_add(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_remain_add_ = value;
}

// optional double max_path_remain_when_stopped = 45;
inline bool SimpleLongitudinalPlusDebug::has_max_path_remain_when_stopped() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_max_path_remain_when_stopped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_path_remain_when_stopped_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline double SimpleLongitudinalPlusDebug::max_path_remain_when_stopped() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.max_path_remain_when_stopped)
  return _internal_max_path_remain_when_stopped();
}
inline void SimpleLongitudinalPlusDebug::set_max_path_remain_when_stopped(double value) {
  _internal_set_max_path_remain_when_stopped(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.max_path_remain_when_stopped)
}
inline double SimpleLongitudinalPlusDebug::_internal_max_path_remain_when_stopped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_path_remain_when_stopped_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_max_path_remain_when_stopped(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_path_remain_when_stopped_ = value;
}

// optional bool form_go_to_full_stop = 46;
inline bool SimpleLongitudinalPlusDebug::has_form_go_to_full_stop() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_form_go_to_full_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_go_to_full_stop_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool SimpleLongitudinalPlusDebug::form_go_to_full_stop() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.form_go_to_full_stop)
  return _internal_form_go_to_full_stop();
}
inline void SimpleLongitudinalPlusDebug::set_form_go_to_full_stop(bool value) {
  _internal_set_form_go_to_full_stop(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.form_go_to_full_stop)
}
inline bool SimpleLongitudinalPlusDebug::_internal_form_go_to_full_stop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.form_go_to_full_stop_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_form_go_to_full_stop(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_go_to_full_stop_ = value;
}

// optional bool begin_end_brake = 47;
inline bool SimpleLongitudinalPlusDebug::has_begin_end_brake() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_begin_end_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.begin_end_brake_ = false;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline bool SimpleLongitudinalPlusDebug::begin_end_brake() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.begin_end_brake)
  return _internal_begin_end_brake();
}
inline void SimpleLongitudinalPlusDebug::set_begin_end_brake(bool value) {
  _internal_set_begin_end_brake(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.begin_end_brake)
}
inline bool SimpleLongitudinalPlusDebug::_internal_begin_end_brake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.begin_end_brake_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_begin_end_brake(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.begin_end_brake_ = value;
}

// optional double hillup_fullstop_brake_rate = 48;
inline bool SimpleLongitudinalPlusDebug::has_hillup_fullstop_brake_rate() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void SimpleLongitudinalPlusDebug::clear_hillup_fullstop_brake_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hillup_fullstop_brake_rate_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline double SimpleLongitudinalPlusDebug::hillup_fullstop_brake_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalPlusDebug.hillup_fullstop_brake_rate)
  return _internal_hillup_fullstop_brake_rate();
}
inline void SimpleLongitudinalPlusDebug::set_hillup_fullstop_brake_rate(double value) {
  _internal_set_hillup_fullstop_brake_rate(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalPlusDebug.hillup_fullstop_brake_rate)
}
inline double SimpleLongitudinalPlusDebug::_internal_hillup_fullstop_brake_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hillup_fullstop_brake_rate_;
}
inline void SimpleLongitudinalPlusDebug::_internal_set_hillup_fullstop_brake_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hillup_fullstop_brake_rate_ = value;
}

// -------------------------------------------------------------------

// SimpleLateralPlusDebug

// optional double lateral_error = 1;
inline bool SimpleLateralPlusDebug::has_lateral_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_lateral_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SimpleLateralPlusDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.lateral_error)
  return _internal_lateral_error();
}
inline void SimpleLateralPlusDebug::set_lateral_error(double value) {
  _internal_set_lateral_error(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.lateral_error)
}
inline double SimpleLateralPlusDebug::_internal_lateral_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_;
}
inline void SimpleLateralPlusDebug::_internal_set_lateral_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_ = value;
}

// optional double ref_heading = 2;
inline bool SimpleLateralPlusDebug::has_ref_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_ref_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SimpleLateralPlusDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.ref_heading)
  return _internal_ref_heading();
}
inline void SimpleLateralPlusDebug::set_ref_heading(double value) {
  _internal_set_ref_heading(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.ref_heading)
}
inline double SimpleLateralPlusDebug::_internal_ref_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_;
}
inline void SimpleLateralPlusDebug::_internal_set_ref_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_ = value;
}

// optional double heading = 3;
inline bool SimpleLateralPlusDebug::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double SimpleLateralPlusDebug::heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading)
  return _internal_heading();
}
inline void SimpleLateralPlusDebug::set_heading(double value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading)
}
inline double SimpleLateralPlusDebug::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// optional double heading_error = 4;
inline bool SimpleLateralPlusDebug::has_heading_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double SimpleLateralPlusDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_error)
  return _internal_heading_error();
}
inline void SimpleLateralPlusDebug::set_heading_error(double value) {
  _internal_set_heading_error(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_error)
}
inline double SimpleLateralPlusDebug::_internal_heading_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_ = value;
}

// optional double heading_error_rate = 5;
inline bool SimpleLateralPlusDebug::has_heading_error_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_error_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double SimpleLateralPlusDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_error_rate)
  return _internal_heading_error_rate();
}
inline void SimpleLateralPlusDebug::set_heading_error_rate(double value) {
  _internal_set_heading_error_rate(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_error_rate)
}
inline double SimpleLateralPlusDebug::_internal_heading_error_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_rate_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_error_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_rate_ = value;
}

// optional double lateral_error_rate = 6;
inline bool SimpleLateralPlusDebug::has_lateral_error_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_lateral_error_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double SimpleLateralPlusDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.lateral_error_rate)
  return _internal_lateral_error_rate();
}
inline void SimpleLateralPlusDebug::set_lateral_error_rate(double value) {
  _internal_set_lateral_error_rate(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.lateral_error_rate)
}
inline double SimpleLateralPlusDebug::_internal_lateral_error_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_rate_;
}
inline void SimpleLateralPlusDebug::_internal_set_lateral_error_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_rate_ = value;
}

// optional double curvature = 7;
inline bool SimpleLateralPlusDebug::has_curvature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_curvature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curvature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double SimpleLateralPlusDebug::curvature() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.curvature)
  return _internal_curvature();
}
inline void SimpleLateralPlusDebug::set_curvature(double value) {
  _internal_set_curvature(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.curvature)
}
inline double SimpleLateralPlusDebug::_internal_curvature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.curvature_;
}
inline void SimpleLateralPlusDebug::_internal_set_curvature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curvature_ = value;
}

// optional double steer_angle = 8;
inline bool SimpleLateralPlusDebug::has_steer_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double SimpleLateralPlusDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle)
  return _internal_steer_angle();
}
inline void SimpleLateralPlusDebug::set_steer_angle(double value) {
  _internal_set_steer_angle(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_ = value;
}

// optional double steer_angle_feedforward = 9;
inline bool SimpleLateralPlusDebug::has_steer_angle_feedforward() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_feedforward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedforward_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double SimpleLateralPlusDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_feedforward)
  return _internal_steer_angle_feedforward();
}
inline void SimpleLateralPlusDebug::set_steer_angle_feedforward(double value) {
  _internal_set_steer_angle_feedforward(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_feedforward)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_feedforward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_feedforward_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_feedforward(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedforward_ = value;
}

// optional double steer_angle_lateral_contribution = 10;
inline bool SimpleLateralPlusDebug::has_steer_angle_lateral_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_lateral_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double SimpleLateralPlusDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_lateral_contribution)
  return _internal_steer_angle_lateral_contribution();
}
inline void SimpleLateralPlusDebug::set_steer_angle_lateral_contribution(double value) {
  _internal_set_steer_angle_lateral_contribution(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_lateral_contribution)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_lateral_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_lateral_contribution_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_lateral_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_contribution_ = value;
}

// optional double steer_angle_lateral_rate_contribution = 11;
inline bool SimpleLateralPlusDebug::has_steer_angle_lateral_rate_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_lateral_rate_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_rate_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double SimpleLateralPlusDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_lateral_rate_contribution)
  return _internal_steer_angle_lateral_rate_contribution();
}
inline void SimpleLateralPlusDebug::set_steer_angle_lateral_rate_contribution(double value) {
  _internal_set_steer_angle_lateral_rate_contribution(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_lateral_rate_contribution)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_lateral_rate_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_lateral_rate_contribution_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_lateral_rate_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_rate_contribution_ = value;
}

// optional double steer_angle_heading_contribution = 12;
inline bool SimpleLateralPlusDebug::has_steer_angle_heading_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_heading_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double SimpleLateralPlusDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_heading_contribution)
  return _internal_steer_angle_heading_contribution();
}
inline void SimpleLateralPlusDebug::set_steer_angle_heading_contribution(double value) {
  _internal_set_steer_angle_heading_contribution(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_heading_contribution)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_heading_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_heading_contribution_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_heading_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_contribution_ = value;
}

// optional double steer_angle_heading_rate_contribution = 13;
inline bool SimpleLateralPlusDebug::has_steer_angle_heading_rate_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_heading_rate_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_rate_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double SimpleLateralPlusDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_heading_rate_contribution)
  return _internal_steer_angle_heading_rate_contribution();
}
inline void SimpleLateralPlusDebug::set_steer_angle_heading_rate_contribution(double value) {
  _internal_set_steer_angle_heading_rate_contribution(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_heading_rate_contribution)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_heading_rate_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_heading_rate_contribution_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_heading_rate_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_rate_contribution_ = value;
}

// optional double steer_angle_feedback = 14;
inline bool SimpleLateralPlusDebug::has_steer_angle_feedback() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double SimpleLateralPlusDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_feedback)
  return _internal_steer_angle_feedback();
}
inline void SimpleLateralPlusDebug::set_steer_angle_feedback(double value) {
  _internal_set_steer_angle_feedback(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_feedback)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_feedback_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_ = value;
}

// optional double steering_position = 15;
inline bool SimpleLateralPlusDebug::has_steering_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steering_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_position_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double SimpleLateralPlusDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steering_position)
  return _internal_steering_position();
}
inline void SimpleLateralPlusDebug::set_steering_position(double value) {
  _internal_set_steering_position(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steering_position)
}
inline double SimpleLateralPlusDebug::_internal_steering_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steering_position_;
}
inline void SimpleLateralPlusDebug::_internal_set_steering_position(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_position_ = value;
}

// optional double ref_speed = 16;
inline bool SimpleLateralPlusDebug::has_ref_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_ref_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double SimpleLateralPlusDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.ref_speed)
  return _internal_ref_speed();
}
inline void SimpleLateralPlusDebug::set_ref_speed(double value) {
  _internal_set_ref_speed(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.ref_speed)
}
inline double SimpleLateralPlusDebug::_internal_ref_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_speed_;
}
inline void SimpleLateralPlusDebug::_internal_set_ref_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_speed_ = value;
}

// optional double steer_angle_limited = 17;
inline bool SimpleLateralPlusDebug::has_steer_angle_limited() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_limited() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_limited_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double SimpleLateralPlusDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_limited)
  return _internal_steer_angle_limited();
}
inline void SimpleLateralPlusDebug::set_steer_angle_limited(double value) {
  _internal_set_steer_angle_limited(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_limited)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_limited() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_limited_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_limited(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_limited_ = value;
}

// optional double lateral_acceleration = 18;
inline bool SimpleLateralPlusDebug::has_lateral_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_lateral_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double SimpleLateralPlusDebug::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.lateral_acceleration)
  return _internal_lateral_acceleration();
}
inline void SimpleLateralPlusDebug::set_lateral_acceleration(double value) {
  _internal_set_lateral_acceleration(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.lateral_acceleration)
}
inline double SimpleLateralPlusDebug::_internal_lateral_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_acceleration_;
}
inline void SimpleLateralPlusDebug::_internal_set_lateral_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_acceleration_ = value;
}

// optional double lateral_jerk = 19;
inline bool SimpleLateralPlusDebug::has_lateral_jerk() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_lateral_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_jerk_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double SimpleLateralPlusDebug::lateral_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.lateral_jerk)
  return _internal_lateral_jerk();
}
inline void SimpleLateralPlusDebug::set_lateral_jerk(double value) {
  _internal_set_lateral_jerk(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.lateral_jerk)
}
inline double SimpleLateralPlusDebug::_internal_lateral_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_jerk_;
}
inline void SimpleLateralPlusDebug::_internal_set_lateral_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_jerk_ = value;
}

// optional double ref_heading_rate = 20;
inline bool SimpleLateralPlusDebug::has_ref_heading_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_ref_heading_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double SimpleLateralPlusDebug::ref_heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.ref_heading_rate)
  return _internal_ref_heading_rate();
}
inline void SimpleLateralPlusDebug::set_ref_heading_rate(double value) {
  _internal_set_ref_heading_rate(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.ref_heading_rate)
}
inline double SimpleLateralPlusDebug::_internal_ref_heading_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_rate_;
}
inline void SimpleLateralPlusDebug::_internal_set_ref_heading_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_rate_ = value;
}

// optional double heading_rate = 21;
inline bool SimpleLateralPlusDebug::has_heading_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double SimpleLateralPlusDebug::heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_rate)
  return _internal_heading_rate();
}
inline void SimpleLateralPlusDebug::set_heading_rate(double value) {
  _internal_set_heading_rate(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_rate)
}
inline double SimpleLateralPlusDebug::_internal_heading_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_rate_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_rate_ = value;
}

// optional double ref_heading_acceleration = 22;
inline bool SimpleLateralPlusDebug::has_ref_heading_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_ref_heading_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double SimpleLateralPlusDebug::ref_heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.ref_heading_acceleration)
  return _internal_ref_heading_acceleration();
}
inline void SimpleLateralPlusDebug::set_ref_heading_acceleration(double value) {
  _internal_set_ref_heading_acceleration(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.ref_heading_acceleration)
}
inline double SimpleLateralPlusDebug::_internal_ref_heading_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_acceleration_;
}
inline void SimpleLateralPlusDebug::_internal_set_ref_heading_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_acceleration_ = value;
}

// optional double heading_acceleration = 23;
inline bool SimpleLateralPlusDebug::has_heading_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double SimpleLateralPlusDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_acceleration)
  return _internal_heading_acceleration();
}
inline void SimpleLateralPlusDebug::set_heading_acceleration(double value) {
  _internal_set_heading_acceleration(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_acceleration)
}
inline double SimpleLateralPlusDebug::_internal_heading_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_acceleration_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_acceleration_ = value;
}

// optional double heading_error_acceleration = 24;
inline bool SimpleLateralPlusDebug::has_heading_error_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_error_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double SimpleLateralPlusDebug::heading_error_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_error_acceleration)
  return _internal_heading_error_acceleration();
}
inline void SimpleLateralPlusDebug::set_heading_error_acceleration(double value) {
  _internal_set_heading_error_acceleration(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_error_acceleration)
}
inline double SimpleLateralPlusDebug::_internal_heading_error_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_acceleration_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_error_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_acceleration_ = value;
}

// optional double ref_heading_jerk = 25;
inline bool SimpleLateralPlusDebug::has_ref_heading_jerk() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_ref_heading_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_jerk_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double SimpleLateralPlusDebug::ref_heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.ref_heading_jerk)
  return _internal_ref_heading_jerk();
}
inline void SimpleLateralPlusDebug::set_ref_heading_jerk(double value) {
  _internal_set_ref_heading_jerk(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.ref_heading_jerk)
}
inline double SimpleLateralPlusDebug::_internal_ref_heading_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_jerk_;
}
inline void SimpleLateralPlusDebug::_internal_set_ref_heading_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_jerk_ = value;
}

// optional double heading_jerk = 26;
inline bool SimpleLateralPlusDebug::has_heading_jerk() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_jerk_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline double SimpleLateralPlusDebug::heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_jerk)
  return _internal_heading_jerk();
}
inline void SimpleLateralPlusDebug::set_heading_jerk(double value) {
  _internal_set_heading_jerk(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_jerk)
}
inline double SimpleLateralPlusDebug::_internal_heading_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_jerk_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_jerk_ = value;
}

// optional double heading_error_jerk = 27;
inline bool SimpleLateralPlusDebug::has_heading_error_jerk() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_error_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_jerk_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double SimpleLateralPlusDebug::heading_error_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_error_jerk)
  return _internal_heading_error_jerk();
}
inline void SimpleLateralPlusDebug::set_heading_error_jerk(double value) {
  _internal_set_heading_error_jerk(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_error_jerk)
}
inline double SimpleLateralPlusDebug::_internal_heading_error_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_jerk_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_error_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_jerk_ = value;
}

// optional double lateral_error_feedback = 28;
inline bool SimpleLateralPlusDebug::has_lateral_error_feedback() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_lateral_error_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_feedback_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline double SimpleLateralPlusDebug::lateral_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.lateral_error_feedback)
  return _internal_lateral_error_feedback();
}
inline void SimpleLateralPlusDebug::set_lateral_error_feedback(double value) {
  _internal_set_lateral_error_feedback(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.lateral_error_feedback)
}
inline double SimpleLateralPlusDebug::_internal_lateral_error_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_feedback_;
}
inline void SimpleLateralPlusDebug::_internal_set_lateral_error_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_feedback_ = value;
}

// optional double heading_error_feedback = 29;
inline bool SimpleLateralPlusDebug::has_heading_error_feedback() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_heading_error_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_feedback_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline double SimpleLateralPlusDebug::heading_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.heading_error_feedback)
  return _internal_heading_error_feedback();
}
inline void SimpleLateralPlusDebug::set_heading_error_feedback(double value) {
  _internal_set_heading_error_feedback(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.heading_error_feedback)
}
inline double SimpleLateralPlusDebug::_internal_heading_error_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_feedback_;
}
inline void SimpleLateralPlusDebug::_internal_set_heading_error_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_feedback_ = value;
}

// optional .control.common.TrajectoryPoint current_target_point = 30;
inline bool SimpleLateralPlusDebug::has_current_target_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_target_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& SimpleLateralPlusDebug::_internal_current_target_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.current_target_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLateralPlusDebug::current_target_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.current_target_point)
  return _internal_current_target_point();
}
inline void SimpleLateralPlusDebug::unsafe_arena_set_allocated_current_target_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_target_point_);
  }
  _impl_.current_target_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLateralPlusDebug.current_target_point)
}
inline ::control::common::TrajectoryPoint* SimpleLateralPlusDebug::release_current_target_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* released = _impl_.current_target_point_;
  _impl_.current_target_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* SimpleLateralPlusDebug::unsafe_arena_release_current_target_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLateralPlusDebug.current_target_point)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* temp = _impl_.current_target_point_;
  _impl_.current_target_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLateralPlusDebug::_internal_mutable_current_target_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_target_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.current_target_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.current_target_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLateralPlusDebug::mutable_current_target_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_current_target_point();
  // @@protoc_insertion_point(field_mutable:control.SimpleLateralPlusDebug.current_target_point)
  return _msg;
}
inline void SimpleLateralPlusDebug::set_allocated_current_target_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_target_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.current_target_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLateralPlusDebug.current_target_point)
}

// optional double steer_angle_feedback_augment = 31;
inline bool SimpleLateralPlusDebug::has_steer_angle_feedback_augment() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_angle_feedback_augment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_augment_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline double SimpleLateralPlusDebug::steer_angle_feedback_augment() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_angle_feedback_augment)
  return _internal_steer_angle_feedback_augment();
}
inline void SimpleLateralPlusDebug::set_steer_angle_feedback_augment(double value) {
  _internal_set_steer_angle_feedback_augment(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_angle_feedback_augment)
}
inline double SimpleLateralPlusDebug::_internal_steer_angle_feedback_augment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_feedback_augment_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_angle_feedback_augment(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_augment_ = value;
}

// optional .control.MracDebug steer_mrac_debug = 32;
inline bool SimpleLateralPlusDebug::has_steer_mrac_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steer_mrac_debug_ != nullptr);
  return value;
}
inline const ::control::MracDebug& SimpleLateralPlusDebug::_internal_steer_mrac_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::MracDebug* p = _impl_.steer_mrac_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::MracDebug&>(::control::_MracDebug_default_instance_);
}
inline const ::control::MracDebug& SimpleLateralPlusDebug::steer_mrac_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_mrac_debug)
  return _internal_steer_mrac_debug();
}
inline void SimpleLateralPlusDebug::unsafe_arena_set_allocated_steer_mrac_debug(::control::MracDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.steer_mrac_debug_);
  }
  _impl_.steer_mrac_debug_ = reinterpret_cast<::control::MracDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLateralPlusDebug.steer_mrac_debug)
}
inline ::control::MracDebug* SimpleLateralPlusDebug::release_steer_mrac_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::MracDebug* released = _impl_.steer_mrac_debug_;
  _impl_.steer_mrac_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::MracDebug* SimpleLateralPlusDebug::unsafe_arena_release_steer_mrac_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLateralPlusDebug.steer_mrac_debug)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::MracDebug* temp = _impl_.steer_mrac_debug_;
  _impl_.steer_mrac_debug_ = nullptr;
  return temp;
}
inline ::control::MracDebug* SimpleLateralPlusDebug::_internal_mutable_steer_mrac_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steer_mrac_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::MracDebug>(GetArena());
    _impl_.steer_mrac_debug_ = reinterpret_cast<::control::MracDebug*>(p);
  }
  return _impl_.steer_mrac_debug_;
}
inline ::control::MracDebug* SimpleLateralPlusDebug::mutable_steer_mrac_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::MracDebug* _msg = _internal_mutable_steer_mrac_debug();
  // @@protoc_insertion_point(field_mutable:control.SimpleLateralPlusDebug.steer_mrac_debug)
  return _msg;
}
inline void SimpleLateralPlusDebug::set_allocated_steer_mrac_debug(::control::MracDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.steer_mrac_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.steer_mrac_debug_ = reinterpret_cast<::control::MracDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLateralPlusDebug.steer_mrac_debug)
}

// optional bool steer_mrac_enable_status = 33;
inline bool SimpleLateralPlusDebug::has_steer_mrac_enable_status() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_steer_mrac_enable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_mrac_enable_status_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool SimpleLateralPlusDebug::steer_mrac_enable_status() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.steer_mrac_enable_status)
  return _internal_steer_mrac_enable_status();
}
inline void SimpleLateralPlusDebug::set_steer_mrac_enable_status(bool value) {
  _internal_set_steer_mrac_enable_status(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.steer_mrac_enable_status)
}
inline bool SimpleLateralPlusDebug::_internal_steer_mrac_enable_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_mrac_enable_status_;
}
inline void SimpleLateralPlusDebug::_internal_set_steer_mrac_enable_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_mrac_enable_status_ = value;
}

// optional double lateral_centripetal_acceleration = 34;
inline bool SimpleLateralPlusDebug::has_lateral_centripetal_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_lateral_centripetal_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_centripetal_acceleration_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline double SimpleLateralPlusDebug::lateral_centripetal_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.lateral_centripetal_acceleration)
  return _internal_lateral_centripetal_acceleration();
}
inline void SimpleLateralPlusDebug::set_lateral_centripetal_acceleration(double value) {
  _internal_set_lateral_centripetal_acceleration(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.lateral_centripetal_acceleration)
}
inline double SimpleLateralPlusDebug::_internal_lateral_centripetal_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_centripetal_acceleration_;
}
inline void SimpleLateralPlusDebug::_internal_set_lateral_centripetal_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_centripetal_acceleration_ = value;
}

// optional string control_task_name = 35;
inline bool SimpleLateralPlusDebug::has_control_task_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_task_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleLateralPlusDebug::control_task_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.control_task_name)
  return _internal_control_task_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleLateralPlusDebug::set_control_task_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.control_task_name)
}
inline std::string* SimpleLateralPlusDebug::mutable_control_task_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_control_task_name();
  // @@protoc_insertion_point(field_mutable:control.SimpleLateralPlusDebug.control_task_name)
  return _s;
}
inline const std::string& SimpleLateralPlusDebug::_internal_control_task_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.control_task_name_.Get();
}
inline void SimpleLateralPlusDebug::_internal_set_control_task_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(value, GetArena());
}
inline std::string* SimpleLateralPlusDebug::_internal_mutable_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.control_task_name_.Mutable( GetArena());
}
inline std::string* SimpleLateralPlusDebug::release_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLateralPlusDebug.control_task_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.control_task_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.control_task_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SimpleLateralPlusDebug::set_allocated_control_task_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.control_task_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.control_task_name_.IsDefault()) {
          _impl_.control_task_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLateralPlusDebug.control_task_name)
}

// optional .control.ControlCheckDebug lat_control_check_debug = 36;
inline bool SimpleLateralPlusDebug::has_lat_control_check_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lat_control_check_debug_ != nullptr);
  return value;
}
inline void SimpleLateralPlusDebug::clear_lat_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lat_control_check_debug_ != nullptr) _impl_.lat_control_check_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::control::ControlCheckDebug& SimpleLateralPlusDebug::_internal_lat_control_check_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::ControlCheckDebug* p = _impl_.lat_control_check_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::ControlCheckDebug&>(::control::_ControlCheckDebug_default_instance_);
}
inline const ::control::ControlCheckDebug& SimpleLateralPlusDebug::lat_control_check_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.lat_control_check_debug)
  return _internal_lat_control_check_debug();
}
inline void SimpleLateralPlusDebug::unsafe_arena_set_allocated_lat_control_check_debug(::control::ControlCheckDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lat_control_check_debug_);
  }
  _impl_.lat_control_check_debug_ = reinterpret_cast<::control::ControlCheckDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLateralPlusDebug.lat_control_check_debug)
}
inline ::control::ControlCheckDebug* SimpleLateralPlusDebug::release_lat_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::ControlCheckDebug* released = _impl_.lat_control_check_debug_;
  _impl_.lat_control_check_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::ControlCheckDebug* SimpleLateralPlusDebug::unsafe_arena_release_lat_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleLateralPlusDebug.lat_control_check_debug)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::ControlCheckDebug* temp = _impl_.lat_control_check_debug_;
  _impl_.lat_control_check_debug_ = nullptr;
  return temp;
}
inline ::control::ControlCheckDebug* SimpleLateralPlusDebug::_internal_mutable_lat_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lat_control_check_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::ControlCheckDebug>(GetArena());
    _impl_.lat_control_check_debug_ = reinterpret_cast<::control::ControlCheckDebug*>(p);
  }
  return _impl_.lat_control_check_debug_;
}
inline ::control::ControlCheckDebug* SimpleLateralPlusDebug::mutable_lat_control_check_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::ControlCheckDebug* _msg = _internal_mutable_lat_control_check_debug();
  // @@protoc_insertion_point(field_mutable:control.SimpleLateralPlusDebug.lat_control_check_debug)
  return _msg;
}
inline void SimpleLateralPlusDebug::set_allocated_lat_control_check_debug(::control::ControlCheckDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.lat_control_check_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.lat_control_check_debug_ = reinterpret_cast<::control::ControlCheckDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLateralPlusDebug.lat_control_check_debug)
}

// optional double efai_rate = 37;
inline bool SimpleLateralPlusDebug::has_efai_rate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_efai_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.efai_rate_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline double SimpleLateralPlusDebug::efai_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.efai_rate)
  return _internal_efai_rate();
}
inline void SimpleLateralPlusDebug::set_efai_rate(double value) {
  _internal_set_efai_rate(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.efai_rate)
}
inline double SimpleLateralPlusDebug::_internal_efai_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.efai_rate_;
}
inline void SimpleLateralPlusDebug::_internal_set_efai_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.efai_rate_ = value;
}

// optional double ed_rate = 38;
inline bool SimpleLateralPlusDebug::has_ed_rate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void SimpleLateralPlusDebug::clear_ed_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ed_rate_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline double SimpleLateralPlusDebug::ed_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralPlusDebug.ed_rate)
  return _internal_ed_rate();
}
inline void SimpleLateralPlusDebug::set_ed_rate(double value) {
  _internal_set_ed_rate(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.SimpleLateralPlusDebug.ed_rate)
}
inline double SimpleLateralPlusDebug::_internal_ed_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ed_rate_;
}
inline void SimpleLateralPlusDebug::_internal_set_ed_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ed_rate_ = value;
}

// -------------------------------------------------------------------

// SimpleMPCPlusDebug

// optional double lateral_error = 1;
inline bool SimpleMPCPlusDebug::has_lateral_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_lateral_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SimpleMPCPlusDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.lateral_error)
  return _internal_lateral_error();
}
inline void SimpleMPCPlusDebug::set_lateral_error(double value) {
  _internal_set_lateral_error(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.lateral_error)
}
inline double SimpleMPCPlusDebug::_internal_lateral_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_lateral_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_ = value;
}

// optional double ref_heading = 2;
inline bool SimpleMPCPlusDebug::has_ref_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_ref_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SimpleMPCPlusDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.ref_heading)
  return _internal_ref_heading();
}
inline void SimpleMPCPlusDebug::set_ref_heading(double value) {
  _internal_set_ref_heading(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.ref_heading)
}
inline double SimpleMPCPlusDebug::_internal_ref_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_;
}
inline void SimpleMPCPlusDebug::_internal_set_ref_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_ = value;
}

// optional double heading = 3;
inline bool SimpleMPCPlusDebug::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double SimpleMPCPlusDebug::heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading)
  return _internal_heading();
}
inline void SimpleMPCPlusDebug::set_heading(double value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading)
}
inline double SimpleMPCPlusDebug::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// optional double heading_error = 4;
inline bool SimpleMPCPlusDebug::has_heading_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double SimpleMPCPlusDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_error)
  return _internal_heading_error();
}
inline void SimpleMPCPlusDebug::set_heading_error(double value) {
  _internal_set_heading_error(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_error)
}
inline double SimpleMPCPlusDebug::_internal_heading_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_ = value;
}

// optional double heading_error_rate = 5;
inline bool SimpleMPCPlusDebug::has_heading_error_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_error_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double SimpleMPCPlusDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_error_rate)
  return _internal_heading_error_rate();
}
inline void SimpleMPCPlusDebug::set_heading_error_rate(double value) {
  _internal_set_heading_error_rate(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_error_rate)
}
inline double SimpleMPCPlusDebug::_internal_heading_error_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_rate_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_error_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_rate_ = value;
}

// optional double lateral_error_rate = 6;
inline bool SimpleMPCPlusDebug::has_lateral_error_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_lateral_error_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double SimpleMPCPlusDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.lateral_error_rate)
  return _internal_lateral_error_rate();
}
inline void SimpleMPCPlusDebug::set_lateral_error_rate(double value) {
  _internal_set_lateral_error_rate(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.lateral_error_rate)
}
inline double SimpleMPCPlusDebug::_internal_lateral_error_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_rate_;
}
inline void SimpleMPCPlusDebug::_internal_set_lateral_error_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_rate_ = value;
}

// optional double curvature = 7;
inline bool SimpleMPCPlusDebug::has_curvature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_curvature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curvature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double SimpleMPCPlusDebug::curvature() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.curvature)
  return _internal_curvature();
}
inline void SimpleMPCPlusDebug::set_curvature(double value) {
  _internal_set_curvature(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.curvature)
}
inline double SimpleMPCPlusDebug::_internal_curvature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.curvature_;
}
inline void SimpleMPCPlusDebug::_internal_set_curvature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curvature_ = value;
}

// optional double steer_angle = 8;
inline bool SimpleMPCPlusDebug::has_steer_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double SimpleMPCPlusDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle)
  return _internal_steer_angle();
}
inline void SimpleMPCPlusDebug::set_steer_angle(double value) {
  _internal_set_steer_angle(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_ = value;
}

// optional double steer_angle_feedforward = 9;
inline bool SimpleMPCPlusDebug::has_steer_angle_feedforward() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_feedforward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedforward_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double SimpleMPCPlusDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_feedforward)
  return _internal_steer_angle_feedforward();
}
inline void SimpleMPCPlusDebug::set_steer_angle_feedforward(double value) {
  _internal_set_steer_angle_feedforward(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_feedforward)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_feedforward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_feedforward_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_feedforward(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedforward_ = value;
}

// optional double steer_angle_lateral_contribution = 10;
inline bool SimpleMPCPlusDebug::has_steer_angle_lateral_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_lateral_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double SimpleMPCPlusDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_lateral_contribution)
  return _internal_steer_angle_lateral_contribution();
}
inline void SimpleMPCPlusDebug::set_steer_angle_lateral_contribution(double value) {
  _internal_set_steer_angle_lateral_contribution(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_lateral_contribution)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_lateral_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_lateral_contribution_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_lateral_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_contribution_ = value;
}

// optional double steer_angle_lateral_rate_contribution = 11;
inline bool SimpleMPCPlusDebug::has_steer_angle_lateral_rate_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_lateral_rate_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_rate_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double SimpleMPCPlusDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_lateral_rate_contribution)
  return _internal_steer_angle_lateral_rate_contribution();
}
inline void SimpleMPCPlusDebug::set_steer_angle_lateral_rate_contribution(double value) {
  _internal_set_steer_angle_lateral_rate_contribution(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_lateral_rate_contribution)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_lateral_rate_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_lateral_rate_contribution_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_lateral_rate_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_lateral_rate_contribution_ = value;
}

// optional double steer_angle_heading_contribution = 12;
inline bool SimpleMPCPlusDebug::has_steer_angle_heading_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_heading_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double SimpleMPCPlusDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_heading_contribution)
  return _internal_steer_angle_heading_contribution();
}
inline void SimpleMPCPlusDebug::set_steer_angle_heading_contribution(double value) {
  _internal_set_steer_angle_heading_contribution(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_heading_contribution)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_heading_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_heading_contribution_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_heading_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_contribution_ = value;
}

// optional double steer_angle_heading_rate_contribution = 13;
inline bool SimpleMPCPlusDebug::has_steer_angle_heading_rate_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_heading_rate_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_rate_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double SimpleMPCPlusDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_heading_rate_contribution)
  return _internal_steer_angle_heading_rate_contribution();
}
inline void SimpleMPCPlusDebug::set_steer_angle_heading_rate_contribution(double value) {
  _internal_set_steer_angle_heading_rate_contribution(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_heading_rate_contribution)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_heading_rate_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_heading_rate_contribution_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_heading_rate_contribution(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_heading_rate_contribution_ = value;
}

// optional double steer_angle_feedback = 14;
inline bool SimpleMPCPlusDebug::has_steer_angle_feedback() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double SimpleMPCPlusDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_feedback)
  return _internal_steer_angle_feedback();
}
inline void SimpleMPCPlusDebug::set_steer_angle_feedback(double value) {
  _internal_set_steer_angle_feedback(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_feedback)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_feedback_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_ = value;
}

// optional double steering_position = 15;
inline bool SimpleMPCPlusDebug::has_steering_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steering_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_position_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double SimpleMPCPlusDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steering_position)
  return _internal_steering_position();
}
inline void SimpleMPCPlusDebug::set_steering_position(double value) {
  _internal_set_steering_position(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steering_position)
}
inline double SimpleMPCPlusDebug::_internal_steering_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steering_position_;
}
inline void SimpleMPCPlusDebug::_internal_set_steering_position(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_position_ = value;
}

// optional double ref_speed = 16;
inline bool SimpleMPCPlusDebug::has_ref_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_ref_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double SimpleMPCPlusDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.ref_speed)
  return _internal_ref_speed();
}
inline void SimpleMPCPlusDebug::set_ref_speed(double value) {
  _internal_set_ref_speed(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.ref_speed)
}
inline double SimpleMPCPlusDebug::_internal_ref_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_speed_;
}
inline void SimpleMPCPlusDebug::_internal_set_ref_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_speed_ = value;
}

// optional double steer_angle_limited = 17;
inline bool SimpleMPCPlusDebug::has_steer_angle_limited() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_limited() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_limited_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double SimpleMPCPlusDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_limited)
  return _internal_steer_angle_limited();
}
inline void SimpleMPCPlusDebug::set_steer_angle_limited(double value) {
  _internal_set_steer_angle_limited(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_limited)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_limited() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_limited_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_limited(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_limited_ = value;
}

// optional double station_reference = 18;
inline bool SimpleMPCPlusDebug::has_station_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_station_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double SimpleMPCPlusDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.station_reference)
  return _internal_station_reference();
}
inline void SimpleMPCPlusDebug::set_station_reference(double value) {
  _internal_set_station_reference(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.station_reference)
}
inline double SimpleMPCPlusDebug::_internal_station_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_reference_;
}
inline void SimpleMPCPlusDebug::_internal_set_station_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_reference_ = value;
}

// optional double station_error = 19;
inline bool SimpleMPCPlusDebug::has_station_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_station_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double SimpleMPCPlusDebug::station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.station_error)
  return _internal_station_error();
}
inline void SimpleMPCPlusDebug::set_station_error(double value) {
  _internal_set_station_error(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.station_error)
}
inline double SimpleMPCPlusDebug::_internal_station_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_station_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_ = value;
}

// optional double speed_reference = 20;
inline bool SimpleMPCPlusDebug::has_speed_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_speed_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double SimpleMPCPlusDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.speed_reference)
  return _internal_speed_reference();
}
inline void SimpleMPCPlusDebug::set_speed_reference(double value) {
  _internal_set_speed_reference(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.speed_reference)
}
inline double SimpleMPCPlusDebug::_internal_speed_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_reference_;
}
inline void SimpleMPCPlusDebug::_internal_set_speed_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_reference_ = value;
}

// optional double speed_error = 21;
inline bool SimpleMPCPlusDebug::has_speed_error() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_speed_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double SimpleMPCPlusDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.speed_error)
  return _internal_speed_error();
}
inline void SimpleMPCPlusDebug::set_speed_error(double value) {
  _internal_set_speed_error(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.speed_error)
}
inline double SimpleMPCPlusDebug::_internal_speed_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_speed_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_ = value;
}

// optional double acceleration_reference = 22;
inline bool SimpleMPCPlusDebug::has_acceleration_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double SimpleMPCPlusDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_reference)
  return _internal_acceleration_reference();
}
inline void SimpleMPCPlusDebug::set_acceleration_reference(double value) {
  _internal_set_acceleration_reference(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_reference)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_reference_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_reference_ = value;
}

// optional bool is_full_stop = 23;
inline bool SimpleMPCPlusDebug::has_is_full_stop() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_is_full_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_full_stop_ = false;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline bool SimpleMPCPlusDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.is_full_stop)
  return _internal_is_full_stop();
}
inline void SimpleMPCPlusDebug::set_is_full_stop(bool value) {
  _internal_set_is_full_stop(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.is_full_stop)
}
inline bool SimpleMPCPlusDebug::_internal_is_full_stop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_full_stop_;
}
inline void SimpleMPCPlusDebug::_internal_set_is_full_stop(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_full_stop_ = value;
}

// optional double station_feedback = 24;
inline bool SimpleMPCPlusDebug::has_station_feedback() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_station_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_feedback_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double SimpleMPCPlusDebug::station_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.station_feedback)
  return _internal_station_feedback();
}
inline void SimpleMPCPlusDebug::set_station_feedback(double value) {
  _internal_set_station_feedback(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.station_feedback)
}
inline double SimpleMPCPlusDebug::_internal_station_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_feedback_;
}
inline void SimpleMPCPlusDebug::_internal_set_station_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_feedback_ = value;
}

// optional double speed_feedback = 25;
inline bool SimpleMPCPlusDebug::has_speed_feedback() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_speed_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_feedback_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double SimpleMPCPlusDebug::speed_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.speed_feedback)
  return _internal_speed_feedback();
}
inline void SimpleMPCPlusDebug::set_speed_feedback(double value) {
  _internal_set_speed_feedback(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.speed_feedback)
}
inline double SimpleMPCPlusDebug::_internal_speed_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_feedback_;
}
inline void SimpleMPCPlusDebug::_internal_set_speed_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_feedback_ = value;
}

// optional double acceleration_cmd_closeloop = 26;
inline bool SimpleMPCPlusDebug::has_acceleration_cmd_closeloop() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_cmd_closeloop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_closeloop_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double SimpleMPCPlusDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_cmd_closeloop)
  return _internal_acceleration_cmd_closeloop();
}
inline void SimpleMPCPlusDebug::set_acceleration_cmd_closeloop(double value) {
  _internal_set_acceleration_cmd_closeloop(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_cmd_closeloop)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_cmd_closeloop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_cmd_closeloop_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_cmd_closeloop(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_closeloop_ = value;
}

// optional double acceleration_cmd = 27;
inline bool SimpleMPCPlusDebug::has_acceleration_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline double SimpleMPCPlusDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_cmd)
  return _internal_acceleration_cmd();
}
inline void SimpleMPCPlusDebug::set_acceleration_cmd(double value) {
  _internal_set_acceleration_cmd(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_cmd)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_cmd_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_cmd(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_cmd_ = value;
}

// optional double acceleration_lookup = 28;
inline bool SimpleMPCPlusDebug::has_acceleration_lookup() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_lookup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double SimpleMPCPlusDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_lookup)
  return _internal_acceleration_lookup();
}
inline void SimpleMPCPlusDebug::set_acceleration_lookup(double value) {
  _internal_set_acceleration_lookup(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_lookup)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_lookup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_lookup_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_lookup(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_ = value;
}

// optional double speed_lookup = 29;
inline bool SimpleMPCPlusDebug::has_speed_lookup() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_speed_lookup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_lookup_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline double SimpleMPCPlusDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.speed_lookup)
  return _internal_speed_lookup();
}
inline void SimpleMPCPlusDebug::set_speed_lookup(double value) {
  _internal_set_speed_lookup(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.speed_lookup)
}
inline double SimpleMPCPlusDebug::_internal_speed_lookup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_lookup_;
}
inline void SimpleMPCPlusDebug::_internal_set_speed_lookup(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_lookup_ = value;
}

// optional double calibration_value = 30;
inline bool SimpleMPCPlusDebug::has_calibration_value() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_calibration_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibration_value_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline double SimpleMPCPlusDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.calibration_value)
  return _internal_calibration_value();
}
inline void SimpleMPCPlusDebug::set_calibration_value(double value) {
  _internal_set_calibration_value(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.calibration_value)
}
inline double SimpleMPCPlusDebug::_internal_calibration_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.calibration_value_;
}
inline void SimpleMPCPlusDebug::_internal_set_calibration_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibration_value_ = value;
}

// optional double steer_unconstrained_control_diff = 31;
inline bool SimpleMPCPlusDebug::has_steer_unconstrained_control_diff() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_unconstrained_control_diff() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_unconstrained_control_diff_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline double SimpleMPCPlusDebug::steer_unconstrained_control_diff() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_unconstrained_control_diff)
  return _internal_steer_unconstrained_control_diff();
}
inline void SimpleMPCPlusDebug::set_steer_unconstrained_control_diff(double value) {
  _internal_set_steer_unconstrained_control_diff(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_unconstrained_control_diff)
}
inline double SimpleMPCPlusDebug::_internal_steer_unconstrained_control_diff() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_unconstrained_control_diff_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_unconstrained_control_diff(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_unconstrained_control_diff_ = value;
}

// optional double steer_angle_feedforward_compensation = 32;
inline bool SimpleMPCPlusDebug::has_steer_angle_feedforward_compensation() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_feedforward_compensation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedforward_compensation_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline double SimpleMPCPlusDebug::steer_angle_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_feedforward_compensation)
  return _internal_steer_angle_feedforward_compensation();
}
inline void SimpleMPCPlusDebug::set_steer_angle_feedforward_compensation(double value) {
  _internal_set_steer_angle_feedforward_compensation(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_feedforward_compensation)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_feedforward_compensation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_feedforward_compensation_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_feedforward_compensation(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedforward_compensation_ = value;
}

// repeated double matrix_q_updated = 33;
inline int SimpleMPCPlusDebug::_internal_matrix_q_updated_size() const {
  return _internal_matrix_q_updated().size();
}
inline int SimpleMPCPlusDebug::matrix_q_updated_size() const {
  return _internal_matrix_q_updated_size();
}
inline void SimpleMPCPlusDebug::clear_matrix_q_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matrix_q_updated_.Clear();
}
inline double SimpleMPCPlusDebug::matrix_q_updated(int index) const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.matrix_q_updated)
  return _internal_matrix_q_updated().Get(index);
}
inline void SimpleMPCPlusDebug::set_matrix_q_updated(int index, double value) {
  _internal_mutable_matrix_q_updated()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.matrix_q_updated)
}
inline void SimpleMPCPlusDebug::add_matrix_q_updated(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_matrix_q_updated()->Add(value);
  // @@protoc_insertion_point(field_add:control.SimpleMPCPlusDebug.matrix_q_updated)
}
inline const ::google::protobuf::RepeatedField<double>& SimpleMPCPlusDebug::matrix_q_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.SimpleMPCPlusDebug.matrix_q_updated)
  return _internal_matrix_q_updated();
}
inline ::google::protobuf::RepeatedField<double>* SimpleMPCPlusDebug::mutable_matrix_q_updated()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.SimpleMPCPlusDebug.matrix_q_updated)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_matrix_q_updated();
}
inline const ::google::protobuf::RepeatedField<double>&
SimpleMPCPlusDebug::_internal_matrix_q_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matrix_q_updated_;
}
inline ::google::protobuf::RepeatedField<double>* SimpleMPCPlusDebug::_internal_mutable_matrix_q_updated() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.matrix_q_updated_;
}

// repeated double matrix_r_updated = 34;
inline int SimpleMPCPlusDebug::_internal_matrix_r_updated_size() const {
  return _internal_matrix_r_updated().size();
}
inline int SimpleMPCPlusDebug::matrix_r_updated_size() const {
  return _internal_matrix_r_updated_size();
}
inline void SimpleMPCPlusDebug::clear_matrix_r_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matrix_r_updated_.Clear();
}
inline double SimpleMPCPlusDebug::matrix_r_updated(int index) const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.matrix_r_updated)
  return _internal_matrix_r_updated().Get(index);
}
inline void SimpleMPCPlusDebug::set_matrix_r_updated(int index, double value) {
  _internal_mutable_matrix_r_updated()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.matrix_r_updated)
}
inline void SimpleMPCPlusDebug::add_matrix_r_updated(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_matrix_r_updated()->Add(value);
  // @@protoc_insertion_point(field_add:control.SimpleMPCPlusDebug.matrix_r_updated)
}
inline const ::google::protobuf::RepeatedField<double>& SimpleMPCPlusDebug::matrix_r_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.SimpleMPCPlusDebug.matrix_r_updated)
  return _internal_matrix_r_updated();
}
inline ::google::protobuf::RepeatedField<double>* SimpleMPCPlusDebug::mutable_matrix_r_updated()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.SimpleMPCPlusDebug.matrix_r_updated)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_matrix_r_updated();
}
inline const ::google::protobuf::RepeatedField<double>&
SimpleMPCPlusDebug::_internal_matrix_r_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matrix_r_updated_;
}
inline ::google::protobuf::RepeatedField<double>* SimpleMPCPlusDebug::_internal_mutable_matrix_r_updated() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.matrix_r_updated_;
}

// optional double lateral_acceleration = 35;
inline bool SimpleMPCPlusDebug::has_lateral_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_lateral_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_acceleration_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline double SimpleMPCPlusDebug::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.lateral_acceleration)
  return _internal_lateral_acceleration();
}
inline void SimpleMPCPlusDebug::set_lateral_acceleration(double value) {
  _internal_set_lateral_acceleration(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.lateral_acceleration)
}
inline double SimpleMPCPlusDebug::_internal_lateral_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_acceleration_;
}
inline void SimpleMPCPlusDebug::_internal_set_lateral_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_acceleration_ = value;
}

// optional double lateral_jerk = 36;
inline bool SimpleMPCPlusDebug::has_lateral_jerk() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_lateral_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_jerk_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline double SimpleMPCPlusDebug::lateral_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.lateral_jerk)
  return _internal_lateral_jerk();
}
inline void SimpleMPCPlusDebug::set_lateral_jerk(double value) {
  _internal_set_lateral_jerk(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.lateral_jerk)
}
inline double SimpleMPCPlusDebug::_internal_lateral_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_jerk_;
}
inline void SimpleMPCPlusDebug::_internal_set_lateral_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_jerk_ = value;
}

// optional double ref_heading_rate = 37;
inline bool SimpleMPCPlusDebug::has_ref_heading_rate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_ref_heading_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_rate_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline double SimpleMPCPlusDebug::ref_heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.ref_heading_rate)
  return _internal_ref_heading_rate();
}
inline void SimpleMPCPlusDebug::set_ref_heading_rate(double value) {
  _internal_set_ref_heading_rate(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.ref_heading_rate)
}
inline double SimpleMPCPlusDebug::_internal_ref_heading_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_rate_;
}
inline void SimpleMPCPlusDebug::_internal_set_ref_heading_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_rate_ = value;
}

// optional double heading_rate = 38;
inline bool SimpleMPCPlusDebug::has_heading_rate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_rate_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline double SimpleMPCPlusDebug::heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_rate)
  return _internal_heading_rate();
}
inline void SimpleMPCPlusDebug::set_heading_rate(double value) {
  _internal_set_heading_rate(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_rate)
}
inline double SimpleMPCPlusDebug::_internal_heading_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_rate_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_rate_ = value;
}

// optional double ref_heading_acceleration = 39;
inline bool SimpleMPCPlusDebug::has_ref_heading_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_ref_heading_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_acceleration_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline double SimpleMPCPlusDebug::ref_heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.ref_heading_acceleration)
  return _internal_ref_heading_acceleration();
}
inline void SimpleMPCPlusDebug::set_ref_heading_acceleration(double value) {
  _internal_set_ref_heading_acceleration(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.ref_heading_acceleration)
}
inline double SimpleMPCPlusDebug::_internal_ref_heading_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_acceleration_;
}
inline void SimpleMPCPlusDebug::_internal_set_ref_heading_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_acceleration_ = value;
}

// optional double heading_acceleration = 40;
inline bool SimpleMPCPlusDebug::has_heading_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_acceleration_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline double SimpleMPCPlusDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_acceleration)
  return _internal_heading_acceleration();
}
inline void SimpleMPCPlusDebug::set_heading_acceleration(double value) {
  _internal_set_heading_acceleration(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_acceleration)
}
inline double SimpleMPCPlusDebug::_internal_heading_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_acceleration_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_acceleration_ = value;
}

// optional double heading_error_acceleration = 41;
inline bool SimpleMPCPlusDebug::has_heading_error_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_error_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_acceleration_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline double SimpleMPCPlusDebug::heading_error_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_error_acceleration)
  return _internal_heading_error_acceleration();
}
inline void SimpleMPCPlusDebug::set_heading_error_acceleration(double value) {
  _internal_set_heading_error_acceleration(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_error_acceleration)
}
inline double SimpleMPCPlusDebug::_internal_heading_error_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_acceleration_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_error_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_acceleration_ = value;
}

// optional double ref_heading_jerk = 42;
inline bool SimpleMPCPlusDebug::has_ref_heading_jerk() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_ref_heading_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_jerk_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline double SimpleMPCPlusDebug::ref_heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.ref_heading_jerk)
  return _internal_ref_heading_jerk();
}
inline void SimpleMPCPlusDebug::set_ref_heading_jerk(double value) {
  _internal_set_ref_heading_jerk(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.ref_heading_jerk)
}
inline double SimpleMPCPlusDebug::_internal_ref_heading_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_heading_jerk_;
}
inline void SimpleMPCPlusDebug::_internal_set_ref_heading_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_heading_jerk_ = value;
}

// optional double heading_jerk = 43;
inline bool SimpleMPCPlusDebug::has_heading_jerk() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_jerk_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline double SimpleMPCPlusDebug::heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_jerk)
  return _internal_heading_jerk();
}
inline void SimpleMPCPlusDebug::set_heading_jerk(double value) {
  _internal_set_heading_jerk(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_jerk)
}
inline double SimpleMPCPlusDebug::_internal_heading_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_jerk_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_jerk_ = value;
}

// optional double heading_error_jerk = 44;
inline bool SimpleMPCPlusDebug::has_heading_error_jerk() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_error_jerk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_jerk_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline double SimpleMPCPlusDebug::heading_error_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_error_jerk)
  return _internal_heading_error_jerk();
}
inline void SimpleMPCPlusDebug::set_heading_error_jerk(double value) {
  _internal_set_heading_error_jerk(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_error_jerk)
}
inline double SimpleMPCPlusDebug::_internal_heading_error_jerk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_jerk_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_error_jerk(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_jerk_ = value;
}

// optional double acceleration_feedback = 45;
inline bool SimpleMPCPlusDebug::has_acceleration_feedback() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_feedback_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline double SimpleMPCPlusDebug::acceleration_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_feedback)
  return _internal_acceleration_feedback();
}
inline void SimpleMPCPlusDebug::set_acceleration_feedback(double value) {
  _internal_set_acceleration_feedback(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_feedback)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_feedback_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_feedback_ = value;
}

// optional double acceleration_error = 46;
inline bool SimpleMPCPlusDebug::has_acceleration_error() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_error_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline double SimpleMPCPlusDebug::acceleration_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_error)
  return _internal_acceleration_error();
}
inline void SimpleMPCPlusDebug::set_acceleration_error(double value) {
  _internal_set_acceleration_error(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_error)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_error_ = value;
}

// optional double jerk_reference = 47;
inline bool SimpleMPCPlusDebug::has_jerk_reference() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_jerk_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_reference_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline double SimpleMPCPlusDebug::jerk_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.jerk_reference)
  return _internal_jerk_reference();
}
inline void SimpleMPCPlusDebug::set_jerk_reference(double value) {
  _internal_set_jerk_reference(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.jerk_reference)
}
inline double SimpleMPCPlusDebug::_internal_jerk_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jerk_reference_;
}
inline void SimpleMPCPlusDebug::_internal_set_jerk_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_reference_ = value;
}

// optional double jerk_feedback = 48;
inline bool SimpleMPCPlusDebug::has_jerk_feedback() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_jerk_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_feedback_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline double SimpleMPCPlusDebug::jerk_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.jerk_feedback)
  return _internal_jerk_feedback();
}
inline void SimpleMPCPlusDebug::set_jerk_feedback(double value) {
  _internal_set_jerk_feedback(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.jerk_feedback)
}
inline double SimpleMPCPlusDebug::_internal_jerk_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jerk_feedback_;
}
inline void SimpleMPCPlusDebug::_internal_set_jerk_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_feedback_ = value;
}

// optional double jerk_error = 49;
inline bool SimpleMPCPlusDebug::has_jerk_error() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_jerk_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_error_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline double SimpleMPCPlusDebug::jerk_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.jerk_error)
  return _internal_jerk_error();
}
inline void SimpleMPCPlusDebug::set_jerk_error(double value) {
  _internal_set_jerk_error(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.jerk_error)
}
inline double SimpleMPCPlusDebug::_internal_jerk_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jerk_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_jerk_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jerk_error_ = value;
}

// optional double lateral_error_feedback = 50;
inline bool SimpleMPCPlusDebug::has_lateral_error_feedback() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_lateral_error_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_feedback_ = 0;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline double SimpleMPCPlusDebug::lateral_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.lateral_error_feedback)
  return _internal_lateral_error_feedback();
}
inline void SimpleMPCPlusDebug::set_lateral_error_feedback(double value) {
  _internal_set_lateral_error_feedback(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.lateral_error_feedback)
}
inline double SimpleMPCPlusDebug::_internal_lateral_error_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_feedback_;
}
inline void SimpleMPCPlusDebug::_internal_set_lateral_error_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_feedback_ = value;
}

// optional double heading_error_feedback = 51;
inline bool SimpleMPCPlusDebug::has_heading_error_feedback() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_heading_error_feedback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_feedback_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline double SimpleMPCPlusDebug::heading_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.heading_error_feedback)
  return _internal_heading_error_feedback();
}
inline void SimpleMPCPlusDebug::set_heading_error_feedback(double value) {
  _internal_set_heading_error_feedback(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.heading_error_feedback)
}
inline double SimpleMPCPlusDebug::_internal_heading_error_feedback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_feedback_;
}
inline void SimpleMPCPlusDebug::_internal_set_heading_error_feedback(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_feedback_ = value;
}

// optional double steer_angle_feedback_augment = 52;
inline bool SimpleMPCPlusDebug::has_steer_angle_feedback_augment() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_steer_angle_feedback_augment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_augment_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline double SimpleMPCPlusDebug::steer_angle_feedback_augment() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.steer_angle_feedback_augment)
  return _internal_steer_angle_feedback_augment();
}
inline void SimpleMPCPlusDebug::set_steer_angle_feedback_augment(double value) {
  _internal_set_steer_angle_feedback_augment(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.steer_angle_feedback_augment)
}
inline double SimpleMPCPlusDebug::_internal_steer_angle_feedback_augment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_angle_feedback_augment_;
}
inline void SimpleMPCPlusDebug::_internal_set_steer_angle_feedback_augment(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_angle_feedback_augment_ = value;
}

// optional .control.common.TrajectoryPoint current_matched_point = 53;
inline bool SimpleMPCPlusDebug::has_current_matched_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_matched_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& SimpleMPCPlusDebug::_internal_current_matched_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.current_matched_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleMPCPlusDebug::current_matched_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.current_matched_point)
  return _internal_current_matched_point();
}
inline void SimpleMPCPlusDebug::unsafe_arena_set_allocated_current_matched_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_matched_point_);
  }
  _impl_.current_matched_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleMPCPlusDebug.current_matched_point)
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::release_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* released = _impl_.current_matched_point_;
  _impl_.current_matched_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::unsafe_arena_release_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleMPCPlusDebug.current_matched_point)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* temp = _impl_.current_matched_point_;
  _impl_.current_matched_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::_internal_mutable_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_matched_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.current_matched_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.current_matched_point_;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::mutable_current_matched_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_current_matched_point();
  // @@protoc_insertion_point(field_mutable:control.SimpleMPCPlusDebug.current_matched_point)
  return _msg;
}
inline void SimpleMPCPlusDebug::set_allocated_current_matched_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_matched_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.current_matched_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleMPCPlusDebug.current_matched_point)
}

// optional .control.common.TrajectoryPoint current_reference_point = 54;
inline bool SimpleMPCPlusDebug::has_current_reference_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_reference_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& SimpleMPCPlusDebug::_internal_current_reference_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.current_reference_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleMPCPlusDebug::current_reference_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.current_reference_point)
  return _internal_current_reference_point();
}
inline void SimpleMPCPlusDebug::unsafe_arena_set_allocated_current_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_reference_point_);
  }
  _impl_.current_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleMPCPlusDebug.current_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::release_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* released = _impl_.current_reference_point_;
  _impl_.current_reference_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::unsafe_arena_release_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleMPCPlusDebug.current_reference_point)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* temp = _impl_.current_reference_point_;
  _impl_.current_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::_internal_mutable_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_reference_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.current_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.current_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::mutable_current_reference_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_current_reference_point();
  // @@protoc_insertion_point(field_mutable:control.SimpleMPCPlusDebug.current_reference_point)
  return _msg;
}
inline void SimpleMPCPlusDebug::set_allocated_current_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_reference_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.current_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleMPCPlusDebug.current_reference_point)
}

// optional .control.common.TrajectoryPoint preview_reference_point = 55;
inline bool SimpleMPCPlusDebug::has_preview_reference_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preview_reference_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& SimpleMPCPlusDebug::_internal_preview_reference_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.preview_reference_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleMPCPlusDebug::preview_reference_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.preview_reference_point)
  return _internal_preview_reference_point();
}
inline void SimpleMPCPlusDebug::unsafe_arena_set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.preview_reference_point_);
  }
  _impl_.preview_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleMPCPlusDebug.preview_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::release_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::TrajectoryPoint* released = _impl_.preview_reference_point_;
  _impl_.preview_reference_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::unsafe_arena_release_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleMPCPlusDebug.preview_reference_point)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::TrajectoryPoint* temp = _impl_.preview_reference_point_;
  _impl_.preview_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::_internal_mutable_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.preview_reference_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.preview_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.preview_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleMPCPlusDebug::mutable_preview_reference_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_preview_reference_point();
  // @@protoc_insertion_point(field_mutable:control.SimpleMPCPlusDebug.preview_reference_point)
  return _msg;
}
inline void SimpleMPCPlusDebug::set_allocated_preview_reference_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.preview_reference_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.preview_reference_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.SimpleMPCPlusDebug.preview_reference_point)
}

// optional double preview_station_error = 56;
inline bool SimpleMPCPlusDebug::has_preview_station_error() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_preview_station_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_station_error_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline double SimpleMPCPlusDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.preview_station_error)
  return _internal_preview_station_error();
}
inline void SimpleMPCPlusDebug::set_preview_station_error(double value) {
  _internal_set_preview_station_error(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.preview_station_error)
}
inline double SimpleMPCPlusDebug::_internal_preview_station_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_station_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_preview_station_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_station_error_ = value;
}

// optional double preview_speed_reference = 57;
inline bool SimpleMPCPlusDebug::has_preview_speed_reference() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_preview_speed_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_reference_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline double SimpleMPCPlusDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.preview_speed_reference)
  return _internal_preview_speed_reference();
}
inline void SimpleMPCPlusDebug::set_preview_speed_reference(double value) {
  _internal_set_preview_speed_reference(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.preview_speed_reference)
}
inline double SimpleMPCPlusDebug::_internal_preview_speed_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_speed_reference_;
}
inline void SimpleMPCPlusDebug::_internal_set_preview_speed_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_reference_ = value;
}

// optional double preview_speed_error = 58;
inline bool SimpleMPCPlusDebug::has_preview_speed_error() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_preview_speed_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_error_ = 0;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline double SimpleMPCPlusDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.preview_speed_error)
  return _internal_preview_speed_error();
}
inline void SimpleMPCPlusDebug::set_preview_speed_error(double value) {
  _internal_set_preview_speed_error(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.preview_speed_error)
}
inline double SimpleMPCPlusDebug::_internal_preview_speed_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_speed_error_;
}
inline void SimpleMPCPlusDebug::_internal_set_preview_speed_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_speed_error_ = value;
}

// optional double preview_acceleration_reference = 59;
inline bool SimpleMPCPlusDebug::has_preview_acceleration_reference() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_preview_acceleration_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_acceleration_reference_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline double SimpleMPCPlusDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.preview_acceleration_reference)
  return _internal_preview_acceleration_reference();
}
inline void SimpleMPCPlusDebug::set_preview_acceleration_reference(double value) {
  _internal_set_preview_acceleration_reference(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.preview_acceleration_reference)
}
inline double SimpleMPCPlusDebug::_internal_preview_acceleration_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_acceleration_reference_;
}
inline void SimpleMPCPlusDebug::_internal_set_preview_acceleration_reference(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_acceleration_reference_ = value;
}

// optional double vehicle_pitch = 60;
inline bool SimpleMPCPlusDebug::has_vehicle_pitch() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_vehicle_pitch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_pitch_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline double SimpleMPCPlusDebug::vehicle_pitch() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.vehicle_pitch)
  return _internal_vehicle_pitch();
}
inline void SimpleMPCPlusDebug::set_vehicle_pitch(double value) {
  _internal_set_vehicle_pitch(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.vehicle_pitch)
}
inline double SimpleMPCPlusDebug::_internal_vehicle_pitch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_pitch_;
}
inline void SimpleMPCPlusDebug::_internal_set_vehicle_pitch(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_pitch_ = value;
}

// optional double slope_offset_compensation = 61;
inline bool SimpleMPCPlusDebug::has_slope_offset_compensation() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_slope_offset_compensation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slope_offset_compensation_ = 0;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline double SimpleMPCPlusDebug::slope_offset_compensation() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.slope_offset_compensation)
  return _internal_slope_offset_compensation();
}
inline void SimpleMPCPlusDebug::set_slope_offset_compensation(double value) {
  _internal_set_slope_offset_compensation(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.slope_offset_compensation)
}
inline double SimpleMPCPlusDebug::_internal_slope_offset_compensation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slope_offset_compensation_;
}
inline void SimpleMPCPlusDebug::_internal_set_slope_offset_compensation(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slope_offset_compensation_ = value;
}

// optional double path_remain = 62;
inline bool SimpleMPCPlusDebug::has_path_remain() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_path_remain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_remain_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline double SimpleMPCPlusDebug::path_remain() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.path_remain)
  return _internal_path_remain();
}
inline void SimpleMPCPlusDebug::set_path_remain(double value) {
  _internal_set_path_remain(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.path_remain)
}
inline double SimpleMPCPlusDebug::_internal_path_remain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_remain_;
}
inline void SimpleMPCPlusDebug::_internal_set_path_remain(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_remain_ = value;
}

// optional double acceleration_lookup_offset = 63;
inline bool SimpleMPCPlusDebug::has_acceleration_lookup_offset() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_lookup_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_offset_ = 0;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline double SimpleMPCPlusDebug::acceleration_lookup_offset() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_lookup_offset)
  return _internal_acceleration_lookup_offset();
}
inline void SimpleMPCPlusDebug::set_acceleration_lookup_offset(double value) {
  _internal_set_acceleration_lookup_offset(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_lookup_offset)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_lookup_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_lookup_offset_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_lookup_offset(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_lookup_offset_ = value;
}

// optional double acceleration_vrf = 64;
inline bool SimpleMPCPlusDebug::has_acceleration_vrf() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_acceleration_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_vrf_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline double SimpleMPCPlusDebug::acceleration_vrf() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.acceleration_vrf)
  return _internal_acceleration_vrf();
}
inline void SimpleMPCPlusDebug::set_acceleration_vrf(double value) {
  _internal_set_acceleration_vrf(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.acceleration_vrf)
}
inline double SimpleMPCPlusDebug::_internal_acceleration_vrf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_vrf_;
}
inline void SimpleMPCPlusDebug::_internal_set_acceleration_vrf(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_vrf_ = value;
}

// optional string control_task_name = 65;
inline bool SimpleMPCPlusDebug::has_control_task_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SimpleMPCPlusDebug::clear_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_task_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleMPCPlusDebug::control_task_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.SimpleMPCPlusDebug.control_task_name)
  return _internal_control_task_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleMPCPlusDebug::set_control_task_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.SimpleMPCPlusDebug.control_task_name)
}
inline std::string* SimpleMPCPlusDebug::mutable_control_task_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_control_task_name();
  // @@protoc_insertion_point(field_mutable:control.SimpleMPCPlusDebug.control_task_name)
  return _s;
}
inline const std::string& SimpleMPCPlusDebug::_internal_control_task_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.control_task_name_.Get();
}
inline void SimpleMPCPlusDebug::_internal_set_control_task_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(value, GetArena());
}
inline std::string* SimpleMPCPlusDebug::_internal_mutable_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.control_task_name_.Mutable( GetArena());
}
inline std::string* SimpleMPCPlusDebug::release_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.SimpleMPCPlusDebug.control_task_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.control_task_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.control_task_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SimpleMPCPlusDebug::set_allocated_control_task_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.control_task_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.control_task_name_.IsDefault()) {
          _impl_.control_task_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.SimpleMPCPlusDebug.control_task_name)
}

// -------------------------------------------------------------------

// ControlCheckDebug

// optional .control.ControlCheckStatus lateral_error_check_result = 1;
inline bool ControlCheckDebug::has_lateral_error_check_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_lateral_error_check_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_check_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::control::ControlCheckStatus ControlCheckDebug::lateral_error_check_result() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.lateral_error_check_result)
  return _internal_lateral_error_check_result();
}
inline void ControlCheckDebug::set_lateral_error_check_result(::control::ControlCheckStatus value) {
  _internal_set_lateral_error_check_result(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.lateral_error_check_result)
}
inline ::control::ControlCheckStatus ControlCheckDebug::_internal_lateral_error_check_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::ControlCheckStatus>(_impl_.lateral_error_check_result_);
}
inline void ControlCheckDebug::_internal_set_lateral_error_check_result(::control::ControlCheckStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::ControlCheckStatus_IsValid(value));
  _impl_.lateral_error_check_result_ = value;
}

// optional uint32 lateral_error_check_e_count = 2;
inline bool ControlCheckDebug::has_lateral_error_check_e_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_lateral_error_check_e_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_check_e_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ControlCheckDebug::lateral_error_check_e_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.lateral_error_check_e_count)
  return _internal_lateral_error_check_e_count();
}
inline void ControlCheckDebug::set_lateral_error_check_e_count(::uint32_t value) {
  _internal_set_lateral_error_check_e_count(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.lateral_error_check_e_count)
}
inline ::uint32_t ControlCheckDebug::_internal_lateral_error_check_e_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_check_e_count_;
}
inline void ControlCheckDebug::_internal_set_lateral_error_check_e_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_check_e_count_ = value;
}

// optional uint32 lateral_error_check_w_count = 3;
inline bool ControlCheckDebug::has_lateral_error_check_w_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_lateral_error_check_w_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_check_w_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t ControlCheckDebug::lateral_error_check_w_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.lateral_error_check_w_count)
  return _internal_lateral_error_check_w_count();
}
inline void ControlCheckDebug::set_lateral_error_check_w_count(::uint32_t value) {
  _internal_set_lateral_error_check_w_count(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.lateral_error_check_w_count)
}
inline ::uint32_t ControlCheckDebug::_internal_lateral_error_check_w_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_check_w_count_;
}
inline void ControlCheckDebug::_internal_set_lateral_error_check_w_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_check_w_count_ = value;
}

// optional .control.ControlCheckStatus heading_error_check_result = 4;
inline bool ControlCheckDebug::has_heading_error_check_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_heading_error_check_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_check_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::control::ControlCheckStatus ControlCheckDebug::heading_error_check_result() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.heading_error_check_result)
  return _internal_heading_error_check_result();
}
inline void ControlCheckDebug::set_heading_error_check_result(::control::ControlCheckStatus value) {
  _internal_set_heading_error_check_result(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.heading_error_check_result)
}
inline ::control::ControlCheckStatus ControlCheckDebug::_internal_heading_error_check_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::ControlCheckStatus>(_impl_.heading_error_check_result_);
}
inline void ControlCheckDebug::_internal_set_heading_error_check_result(::control::ControlCheckStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::ControlCheckStatus_IsValid(value));
  _impl_.heading_error_check_result_ = value;
}

// optional uint32 heading_error_check_e_count = 5;
inline bool ControlCheckDebug::has_heading_error_check_e_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_heading_error_check_e_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_check_e_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t ControlCheckDebug::heading_error_check_e_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.heading_error_check_e_count)
  return _internal_heading_error_check_e_count();
}
inline void ControlCheckDebug::set_heading_error_check_e_count(::uint32_t value) {
  _internal_set_heading_error_check_e_count(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.heading_error_check_e_count)
}
inline ::uint32_t ControlCheckDebug::_internal_heading_error_check_e_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_check_e_count_;
}
inline void ControlCheckDebug::_internal_set_heading_error_check_e_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_check_e_count_ = value;
}

// optional uint32 heading_error_check_w_count = 6;
inline bool ControlCheckDebug::has_heading_error_check_w_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_heading_error_check_w_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_check_w_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t ControlCheckDebug::heading_error_check_w_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.heading_error_check_w_count)
  return _internal_heading_error_check_w_count();
}
inline void ControlCheckDebug::set_heading_error_check_w_count(::uint32_t value) {
  _internal_set_heading_error_check_w_count(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.heading_error_check_w_count)
}
inline ::uint32_t ControlCheckDebug::_internal_heading_error_check_w_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_error_check_w_count_;
}
inline void ControlCheckDebug::_internal_set_heading_error_check_w_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_error_check_w_count_ = value;
}

// optional .control.ControlCheckStatus station_error_check_result = 7;
inline bool ControlCheckDebug::has_station_error_check_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_station_error_check_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_check_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::control::ControlCheckStatus ControlCheckDebug::station_error_check_result() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.station_error_check_result)
  return _internal_station_error_check_result();
}
inline void ControlCheckDebug::set_station_error_check_result(::control::ControlCheckStatus value) {
  _internal_set_station_error_check_result(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.station_error_check_result)
}
inline ::control::ControlCheckStatus ControlCheckDebug::_internal_station_error_check_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::ControlCheckStatus>(_impl_.station_error_check_result_);
}
inline void ControlCheckDebug::_internal_set_station_error_check_result(::control::ControlCheckStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::ControlCheckStatus_IsValid(value));
  _impl_.station_error_check_result_ = value;
}

// optional uint32 station_error_check_e_count = 8;
inline bool ControlCheckDebug::has_station_error_check_e_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_station_error_check_e_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_check_e_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t ControlCheckDebug::station_error_check_e_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.station_error_check_e_count)
  return _internal_station_error_check_e_count();
}
inline void ControlCheckDebug::set_station_error_check_e_count(::uint32_t value) {
  _internal_set_station_error_check_e_count(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.station_error_check_e_count)
}
inline ::uint32_t ControlCheckDebug::_internal_station_error_check_e_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_error_check_e_count_;
}
inline void ControlCheckDebug::_internal_set_station_error_check_e_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_check_e_count_ = value;
}

// optional uint32 station_error_check_w_count = 9;
inline bool ControlCheckDebug::has_station_error_check_w_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_station_error_check_w_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_check_w_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t ControlCheckDebug::station_error_check_w_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.station_error_check_w_count)
  return _internal_station_error_check_w_count();
}
inline void ControlCheckDebug::set_station_error_check_w_count(::uint32_t value) {
  _internal_set_station_error_check_w_count(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.station_error_check_w_count)
}
inline ::uint32_t ControlCheckDebug::_internal_station_error_check_w_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_error_check_w_count_;
}
inline void ControlCheckDebug::_internal_set_station_error_check_w_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_check_w_count_ = value;
}

// optional .control.ControlCheckStatus speed_error_check_result = 10;
inline bool ControlCheckDebug::has_speed_error_check_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_speed_error_check_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_check_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::control::ControlCheckStatus ControlCheckDebug::speed_error_check_result() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.speed_error_check_result)
  return _internal_speed_error_check_result();
}
inline void ControlCheckDebug::set_speed_error_check_result(::control::ControlCheckStatus value) {
  _internal_set_speed_error_check_result(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.speed_error_check_result)
}
inline ::control::ControlCheckStatus ControlCheckDebug::_internal_speed_error_check_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::ControlCheckStatus>(_impl_.speed_error_check_result_);
}
inline void ControlCheckDebug::_internal_set_speed_error_check_result(::control::ControlCheckStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::ControlCheckStatus_IsValid(value));
  _impl_.speed_error_check_result_ = value;
}

// optional uint32 speed_error_check_e_count = 11;
inline bool ControlCheckDebug::has_speed_error_check_e_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_speed_error_check_e_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_check_e_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t ControlCheckDebug::speed_error_check_e_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.speed_error_check_e_count)
  return _internal_speed_error_check_e_count();
}
inline void ControlCheckDebug::set_speed_error_check_e_count(::uint32_t value) {
  _internal_set_speed_error_check_e_count(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.speed_error_check_e_count)
}
inline ::uint32_t ControlCheckDebug::_internal_speed_error_check_e_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_error_check_e_count_;
}
inline void ControlCheckDebug::_internal_set_speed_error_check_e_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_check_e_count_ = value;
}

// optional uint32 speed_error_check_w_count = 12;
inline bool ControlCheckDebug::has_speed_error_check_w_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_speed_error_check_w_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_check_w_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t ControlCheckDebug::speed_error_check_w_count() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.speed_error_check_w_count)
  return _internal_speed_error_check_w_count();
}
inline void ControlCheckDebug::set_speed_error_check_w_count(::uint32_t value) {
  _internal_set_speed_error_check_w_count(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.speed_error_check_w_count)
}
inline ::uint32_t ControlCheckDebug::_internal_speed_error_check_w_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_error_check_w_count_;
}
inline void ControlCheckDebug::_internal_set_speed_error_check_w_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_check_w_count_ = value;
}

// optional double lateral_error_e = 13;
inline bool ControlCheckDebug::has_lateral_error_e() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_lateral_error_e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_e_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ControlCheckDebug::lateral_error_e() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.lateral_error_e)
  return _internal_lateral_error_e();
}
inline void ControlCheckDebug::set_lateral_error_e(double value) {
  _internal_set_lateral_error_e(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.lateral_error_e)
}
inline double ControlCheckDebug::_internal_lateral_error_e() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_e_;
}
inline void ControlCheckDebug::_internal_set_lateral_error_e(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_e_ = value;
}

// optional double lateral_error_w = 14;
inline bool ControlCheckDebug::has_lateral_error_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ControlCheckDebug::clear_lateral_error_w() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_w_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double ControlCheckDebug::lateral_error_w() const {
  // @@protoc_insertion_point(field_get:control.ControlCheckDebug.lateral_error_w)
  return _internal_lateral_error_w();
}
inline void ControlCheckDebug::set_lateral_error_w(double value) {
  _internal_set_lateral_error_w(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.ControlCheckDebug.lateral_error_w)
}
inline double ControlCheckDebug::_internal_lateral_error_w() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lateral_error_w_;
}
inline void ControlCheckDebug::_internal_set_lateral_error_w(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lateral_error_w_ = value;
}

// -------------------------------------------------------------------

// SimpleAntiSlopeDebug

// optional int32 hill_start_window = 1;
inline bool SimpleAntiSlopeDebug::has_hill_start_window() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_hill_start_window() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hill_start_window_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SimpleAntiSlopeDebug::hill_start_window() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.hill_start_window)
  return _internal_hill_start_window();
}
inline void SimpleAntiSlopeDebug::set_hill_start_window(::int32_t value) {
  _internal_set_hill_start_window(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.hill_start_window)
}
inline ::int32_t SimpleAntiSlopeDebug::_internal_hill_start_window() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hill_start_window_;
}
inline void SimpleAntiSlopeDebug::_internal_set_hill_start_window(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hill_start_window_ = value;
}

// optional int32 preview_length = 2;
inline bool SimpleAntiSlopeDebug::has_preview_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_preview_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SimpleAntiSlopeDebug::preview_length() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.preview_length)
  return _internal_preview_length();
}
inline void SimpleAntiSlopeDebug::set_preview_length(::int32_t value) {
  _internal_set_preview_length(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.preview_length)
}
inline ::int32_t SimpleAntiSlopeDebug::_internal_preview_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_length_;
}
inline void SimpleAntiSlopeDebug::_internal_set_preview_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_length_ = value;
}

// optional double quit_hill_start_speed = 3;
inline bool SimpleAntiSlopeDebug::has_quit_hill_start_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_quit_hill_start_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quit_hill_start_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SimpleAntiSlopeDebug::quit_hill_start_speed() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.quit_hill_start_speed)
  return _internal_quit_hill_start_speed();
}
inline void SimpleAntiSlopeDebug::set_quit_hill_start_speed(double value) {
  _internal_set_quit_hill_start_speed(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.quit_hill_start_speed)
}
inline double SimpleAntiSlopeDebug::_internal_quit_hill_start_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quit_hill_start_speed_;
}
inline void SimpleAntiSlopeDebug::_internal_set_quit_hill_start_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quit_hill_start_speed_ = value;
}

// optional double normal_start_tartget_acc = 4;
inline bool SimpleAntiSlopeDebug::has_normal_start_tartget_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_normal_start_tartget_acc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.normal_start_tartget_acc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double SimpleAntiSlopeDebug::normal_start_tartget_acc() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.normal_start_tartget_acc)
  return _internal_normal_start_tartget_acc();
}
inline void SimpleAntiSlopeDebug::set_normal_start_tartget_acc(double value) {
  _internal_set_normal_start_tartget_acc(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.normal_start_tartget_acc)
}
inline double SimpleAntiSlopeDebug::_internal_normal_start_tartget_acc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.normal_start_tartget_acc_;
}
inline void SimpleAntiSlopeDebug::_internal_set_normal_start_tartget_acc(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.normal_start_tartget_acc_ = value;
}

// optional bool in_hill_start_condition = 5;
inline bool SimpleAntiSlopeDebug::has_in_hill_start_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_in_hill_start_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_hill_start_condition_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool SimpleAntiSlopeDebug::in_hill_start_condition() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.in_hill_start_condition)
  return _internal_in_hill_start_condition();
}
inline void SimpleAntiSlopeDebug::set_in_hill_start_condition(bool value) {
  _internal_set_in_hill_start_condition(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.in_hill_start_condition)
}
inline bool SimpleAntiSlopeDebug::_internal_in_hill_start_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.in_hill_start_condition_;
}
inline void SimpleAntiSlopeDebug::_internal_set_in_hill_start_condition(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_hill_start_condition_ = value;
}

// optional bool in_normal_start_condition = 6;
inline bool SimpleAntiSlopeDebug::has_in_normal_start_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_in_normal_start_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_normal_start_condition_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool SimpleAntiSlopeDebug::in_normal_start_condition() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.in_normal_start_condition)
  return _internal_in_normal_start_condition();
}
inline void SimpleAntiSlopeDebug::set_in_normal_start_condition(bool value) {
  _internal_set_in_normal_start_condition(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.in_normal_start_condition)
}
inline bool SimpleAntiSlopeDebug::_internal_in_normal_start_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.in_normal_start_condition_;
}
inline void SimpleAntiSlopeDebug::_internal_set_in_normal_start_condition(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_normal_start_condition_ = value;
}

// optional double hill_start_acc_gain_rate = 7;
inline bool SimpleAntiSlopeDebug::has_hill_start_acc_gain_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_hill_start_acc_gain_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hill_start_acc_gain_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SimpleAntiSlopeDebug::hill_start_acc_gain_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.hill_start_acc_gain_rate)
  return _internal_hill_start_acc_gain_rate();
}
inline void SimpleAntiSlopeDebug::set_hill_start_acc_gain_rate(double value) {
  _internal_set_hill_start_acc_gain_rate(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.hill_start_acc_gain_rate)
}
inline double SimpleAntiSlopeDebug::_internal_hill_start_acc_gain_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hill_start_acc_gain_rate_;
}
inline void SimpleAntiSlopeDebug::_internal_set_hill_start_acc_gain_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hill_start_acc_gain_rate_ = value;
}

// optional double normal_start_acc_gain_rate = 8;
inline bool SimpleAntiSlopeDebug::has_normal_start_acc_gain_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_normal_start_acc_gain_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.normal_start_acc_gain_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SimpleAntiSlopeDebug::normal_start_acc_gain_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.normal_start_acc_gain_rate)
  return _internal_normal_start_acc_gain_rate();
}
inline void SimpleAntiSlopeDebug::set_normal_start_acc_gain_rate(double value) {
  _internal_set_normal_start_acc_gain_rate(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.normal_start_acc_gain_rate)
}
inline double SimpleAntiSlopeDebug::_internal_normal_start_acc_gain_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.normal_start_acc_gain_rate_;
}
inline void SimpleAntiSlopeDebug::_internal_set_normal_start_acc_gain_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.normal_start_acc_gain_rate_ = value;
}

// optional bool on_obstacle = 9;
inline bool SimpleAntiSlopeDebug::has_on_obstacle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_on_obstacle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_obstacle_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool SimpleAntiSlopeDebug::on_obstacle() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.on_obstacle)
  return _internal_on_obstacle();
}
inline void SimpleAntiSlopeDebug::set_on_obstacle(bool value) {
  _internal_set_on_obstacle(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.on_obstacle)
}
inline bool SimpleAntiSlopeDebug::_internal_on_obstacle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.on_obstacle_;
}
inline void SimpleAntiSlopeDebug::_internal_set_on_obstacle(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_obstacle_ = value;
}

// optional bool from_else_to_auto = 10;
inline bool SimpleAntiSlopeDebug::has_from_else_to_auto() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_from_else_to_auto() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_else_to_auto_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool SimpleAntiSlopeDebug::from_else_to_auto() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.from_else_to_auto)
  return _internal_from_else_to_auto();
}
inline void SimpleAntiSlopeDebug::set_from_else_to_auto(bool value) {
  _internal_set_from_else_to_auto(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.from_else_to_auto)
}
inline bool SimpleAntiSlopeDebug::_internal_from_else_to_auto() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_else_to_auto_;
}
inline void SimpleAntiSlopeDebug::_internal_set_from_else_to_auto(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_else_to_auto_ = value;
}

// optional bool previous_is_auto = 11;
inline bool SimpleAntiSlopeDebug::has_previous_is_auto() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_previous_is_auto() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_is_auto_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool SimpleAntiSlopeDebug::previous_is_auto() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.previous_is_auto)
  return _internal_previous_is_auto();
}
inline void SimpleAntiSlopeDebug::set_previous_is_auto(bool value) {
  _internal_set_previous_is_auto(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.previous_is_auto)
}
inline bool SimpleAntiSlopeDebug::_internal_previous_is_auto() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.previous_is_auto_;
}
inline void SimpleAntiSlopeDebug::_internal_set_previous_is_auto(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_is_auto_ = value;
}

// optional double anti_cmd_brake = 12;
inline bool SimpleAntiSlopeDebug::has_anti_cmd_brake() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_anti_cmd_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anti_cmd_brake_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double SimpleAntiSlopeDebug::anti_cmd_brake() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.anti_cmd_brake)
  return _internal_anti_cmd_brake();
}
inline void SimpleAntiSlopeDebug::set_anti_cmd_brake(double value) {
  _internal_set_anti_cmd_brake(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.anti_cmd_brake)
}
inline double SimpleAntiSlopeDebug::_internal_anti_cmd_brake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.anti_cmd_brake_;
}
inline void SimpleAntiSlopeDebug::_internal_set_anti_cmd_brake(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anti_cmd_brake_ = value;
}

// optional double anti_cmd_throttle = 13;
inline bool SimpleAntiSlopeDebug::has_anti_cmd_throttle() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_anti_cmd_throttle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anti_cmd_throttle_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double SimpleAntiSlopeDebug::anti_cmd_throttle() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.anti_cmd_throttle)
  return _internal_anti_cmd_throttle();
}
inline void SimpleAntiSlopeDebug::set_anti_cmd_throttle(double value) {
  _internal_set_anti_cmd_throttle(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.anti_cmd_throttle)
}
inline double SimpleAntiSlopeDebug::_internal_anti_cmd_throttle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.anti_cmd_throttle_;
}
inline void SimpleAntiSlopeDebug::_internal_set_anti_cmd_throttle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anti_cmd_throttle_ = value;
}

// optional bool uphill_too_fast = 14;
inline bool SimpleAntiSlopeDebug::has_uphill_too_fast() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_uphill_too_fast() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uphill_too_fast_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool SimpleAntiSlopeDebug::uphill_too_fast() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.uphill_too_fast)
  return _internal_uphill_too_fast();
}
inline void SimpleAntiSlopeDebug::set_uphill_too_fast(bool value) {
  _internal_set_uphill_too_fast(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.uphill_too_fast)
}
inline bool SimpleAntiSlopeDebug::_internal_uphill_too_fast() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uphill_too_fast_;
}
inline void SimpleAntiSlopeDebug::_internal_set_uphill_too_fast(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uphill_too_fast_ = value;
}

// optional bool only_use_brk_downhill = 15;
inline bool SimpleAntiSlopeDebug::has_only_use_brk_downhill() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_only_use_brk_downhill() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_use_brk_downhill_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool SimpleAntiSlopeDebug::only_use_brk_downhill() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.only_use_brk_downhill)
  return _internal_only_use_brk_downhill();
}
inline void SimpleAntiSlopeDebug::set_only_use_brk_downhill(bool value) {
  _internal_set_only_use_brk_downhill(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.only_use_brk_downhill)
}
inline bool SimpleAntiSlopeDebug::_internal_only_use_brk_downhill() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.only_use_brk_downhill_;
}
inline void SimpleAntiSlopeDebug::_internal_set_only_use_brk_downhill(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_use_brk_downhill_ = value;
}

// optional bool erase_brk_in_go = 16;
inline bool SimpleAntiSlopeDebug::has_erase_brk_in_go() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_erase_brk_in_go() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.erase_brk_in_go_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool SimpleAntiSlopeDebug::erase_brk_in_go() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.erase_brk_in_go)
  return _internal_erase_brk_in_go();
}
inline void SimpleAntiSlopeDebug::set_erase_brk_in_go(bool value) {
  _internal_set_erase_brk_in_go(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.erase_brk_in_go)
}
inline bool SimpleAntiSlopeDebug::_internal_erase_brk_in_go() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.erase_brk_in_go_;
}
inline void SimpleAntiSlopeDebug::_internal_set_erase_brk_in_go(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.erase_brk_in_go_ = value;
}

// optional bool erase_brk_in_end = 17;
inline bool SimpleAntiSlopeDebug::has_erase_brk_in_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SimpleAntiSlopeDebug::clear_erase_brk_in_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.erase_brk_in_end_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool SimpleAntiSlopeDebug::erase_brk_in_end() const {
  // @@protoc_insertion_point(field_get:control.SimpleAntiSlopeDebug.erase_brk_in_end)
  return _internal_erase_brk_in_end();
}
inline void SimpleAntiSlopeDebug::set_erase_brk_in_end(bool value) {
  _internal_set_erase_brk_in_end(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.SimpleAntiSlopeDebug.erase_brk_in_end)
}
inline bool SimpleAntiSlopeDebug::_internal_erase_brk_in_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.erase_brk_in_end_;
}
inline void SimpleAntiSlopeDebug::_internal_set_erase_brk_in_end(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.erase_brk_in_end_ = value;
}

// -------------------------------------------------------------------

// CleaningSafetyCheckDebug

// optional string control_task_name = 1;
inline bool CleaningSafetyCheckDebug::has_control_task_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CleaningSafetyCheckDebug::clear_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_task_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CleaningSafetyCheckDebug::control_task_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.control_task_name)
  return _internal_control_task_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CleaningSafetyCheckDebug::set_control_task_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.CleaningSafetyCheckDebug.control_task_name)
}
inline std::string* CleaningSafetyCheckDebug::mutable_control_task_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_control_task_name();
  // @@protoc_insertion_point(field_mutable:control.CleaningSafetyCheckDebug.control_task_name)
  return _s;
}
inline const std::string& CleaningSafetyCheckDebug::_internal_control_task_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.control_task_name_.Get();
}
inline void CleaningSafetyCheckDebug::_internal_set_control_task_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_task_name_.Set(value, GetArena());
}
inline std::string* CleaningSafetyCheckDebug::_internal_mutable_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.control_task_name_.Mutable( GetArena());
}
inline std::string* CleaningSafetyCheckDebug::release_control_task_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.CleaningSafetyCheckDebug.control_task_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.control_task_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.control_task_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CleaningSafetyCheckDebug::set_allocated_control_task_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.control_task_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.control_task_name_.IsDefault()) {
          _impl_.control_task_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.CleaningSafetyCheckDebug.control_task_name)
}

// optional bool is_need_post_command = 2;
inline bool CleaningSafetyCheckDebug::has_is_need_post_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CleaningSafetyCheckDebug::clear_is_need_post_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_need_post_command_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CleaningSafetyCheckDebug::is_need_post_command() const {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.is_need_post_command)
  return _internal_is_need_post_command();
}
inline void CleaningSafetyCheckDebug::set_is_need_post_command(bool value) {
  _internal_set_is_need_post_command(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.CleaningSafetyCheckDebug.is_need_post_command)
}
inline bool CleaningSafetyCheckDebug::_internal_is_need_post_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_need_post_command_;
}
inline void CleaningSafetyCheckDebug::_internal_set_is_need_post_command(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_need_post_command_ = value;
}

// optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
inline bool CleaningSafetyCheckDebug::has_cleaning_control_check_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cleaning_control_check_debug_ != nullptr);
  return value;
}
inline void CleaningSafetyCheckDebug::clear_cleaning_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cleaning_control_check_debug_ != nullptr) _impl_.cleaning_control_check_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::control::ControlCheckDebug& CleaningSafetyCheckDebug::_internal_cleaning_control_check_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::ControlCheckDebug* p = _impl_.cleaning_control_check_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::ControlCheckDebug&>(::control::_ControlCheckDebug_default_instance_);
}
inline const ::control::ControlCheckDebug& CleaningSafetyCheckDebug::cleaning_control_check_debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.cleaning_control_check_debug)
  return _internal_cleaning_control_check_debug();
}
inline void CleaningSafetyCheckDebug::unsafe_arena_set_allocated_cleaning_control_check_debug(::control::ControlCheckDebug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cleaning_control_check_debug_);
  }
  _impl_.cleaning_control_check_debug_ = reinterpret_cast<::control::ControlCheckDebug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.CleaningSafetyCheckDebug.cleaning_control_check_debug)
}
inline ::control::ControlCheckDebug* CleaningSafetyCheckDebug::release_cleaning_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::ControlCheckDebug* released = _impl_.cleaning_control_check_debug_;
  _impl_.cleaning_control_check_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::ControlCheckDebug* CleaningSafetyCheckDebug::unsafe_arena_release_cleaning_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.CleaningSafetyCheckDebug.cleaning_control_check_debug)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::ControlCheckDebug* temp = _impl_.cleaning_control_check_debug_;
  _impl_.cleaning_control_check_debug_ = nullptr;
  return temp;
}
inline ::control::ControlCheckDebug* CleaningSafetyCheckDebug::_internal_mutable_cleaning_control_check_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cleaning_control_check_debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::ControlCheckDebug>(GetArena());
    _impl_.cleaning_control_check_debug_ = reinterpret_cast<::control::ControlCheckDebug*>(p);
  }
  return _impl_.cleaning_control_check_debug_;
}
inline ::control::ControlCheckDebug* CleaningSafetyCheckDebug::mutable_cleaning_control_check_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::ControlCheckDebug* _msg = _internal_mutable_cleaning_control_check_debug();
  // @@protoc_insertion_point(field_mutable:control.CleaningSafetyCheckDebug.cleaning_control_check_debug)
  return _msg;
}
inline void CleaningSafetyCheckDebug::set_allocated_cleaning_control_check_debug(::control::ControlCheckDebug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.cleaning_control_check_debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.cleaning_control_check_debug_ = reinterpret_cast<::control::ControlCheckDebug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.CleaningSafetyCheckDebug.cleaning_control_check_debug)
}

// optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
inline bool CleaningSafetyCheckDebug::has_current_predicted_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_predicted_end_point_ != nullptr);
  return value;
}
inline const ::control::common::TrajectoryPoint& CleaningSafetyCheckDebug::_internal_current_predicted_end_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::TrajectoryPoint* p = _impl_.current_predicted_end_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::TrajectoryPoint&>(::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& CleaningSafetyCheckDebug::current_predicted_end_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.current_predicted_end_point)
  return _internal_current_predicted_end_point();
}
inline void CleaningSafetyCheckDebug::unsafe_arena_set_allocated_current_predicted_end_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_predicted_end_point_);
  }
  _impl_.current_predicted_end_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.CleaningSafetyCheckDebug.current_predicted_end_point)
}
inline ::control::common::TrajectoryPoint* CleaningSafetyCheckDebug::release_current_predicted_end_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* released = _impl_.current_predicted_end_point_;
  _impl_.current_predicted_end_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::TrajectoryPoint* CleaningSafetyCheckDebug::unsafe_arena_release_current_predicted_end_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.CleaningSafetyCheckDebug.current_predicted_end_point)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* temp = _impl_.current_predicted_end_point_;
  _impl_.current_predicted_end_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* CleaningSafetyCheckDebug::_internal_mutable_current_predicted_end_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_predicted_end_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::TrajectoryPoint>(GetArena());
    _impl_.current_predicted_end_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(p);
  }
  return _impl_.current_predicted_end_point_;
}
inline ::control::common::TrajectoryPoint* CleaningSafetyCheckDebug::mutable_current_predicted_end_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::TrajectoryPoint* _msg = _internal_mutable_current_predicted_end_point();
  // @@protoc_insertion_point(field_mutable:control.CleaningSafetyCheckDebug.current_predicted_end_point)
  return _msg;
}
inline void CleaningSafetyCheckDebug::set_allocated_current_predicted_end_point(::control::common::TrajectoryPoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_predicted_end_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.current_predicted_end_point_ = reinterpret_cast<::control::common::TrajectoryPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.CleaningSafetyCheckDebug.current_predicted_end_point)
}

// repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
inline int CleaningSafetyCheckDebug::_internal_predicted_trajectory_point_size() const {
  return _internal_predicted_trajectory_point().size();
}
inline int CleaningSafetyCheckDebug::predicted_trajectory_point_size() const {
  return _internal_predicted_trajectory_point_size();
}
inline ::control::common::TrajectoryPoint* CleaningSafetyCheckDebug::mutable_predicted_trajectory_point(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.CleaningSafetyCheckDebug.predicted_trajectory_point)
  return _internal_mutable_predicted_trajectory_point()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* CleaningSafetyCheckDebug::mutable_predicted_trajectory_point()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.CleaningSafetyCheckDebug.predicted_trajectory_point)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_predicted_trajectory_point();
}
inline const ::control::common::TrajectoryPoint& CleaningSafetyCheckDebug::predicted_trajectory_point(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.predicted_trajectory_point)
  return _internal_predicted_trajectory_point().Get(index);
}
inline ::control::common::TrajectoryPoint* CleaningSafetyCheckDebug::add_predicted_trajectory_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::common::TrajectoryPoint* _add = _internal_mutable_predicted_trajectory_point()->Add();
  // @@protoc_insertion_point(field_add:control.CleaningSafetyCheckDebug.predicted_trajectory_point)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& CleaningSafetyCheckDebug::predicted_trajectory_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.CleaningSafetyCheckDebug.predicted_trajectory_point)
  return _internal_predicted_trajectory_point();
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>&
CleaningSafetyCheckDebug::_internal_predicted_trajectory_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.predicted_trajectory_point_;
}
inline ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>*
CleaningSafetyCheckDebug::_internal_mutable_predicted_trajectory_point() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.predicted_trajectory_point_;
}

// optional bool is_predicted_collsion = 6;
inline bool CleaningSafetyCheckDebug::has_is_predicted_collsion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CleaningSafetyCheckDebug::clear_is_predicted_collsion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_predicted_collsion_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CleaningSafetyCheckDebug::is_predicted_collsion() const {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.is_predicted_collsion)
  return _internal_is_predicted_collsion();
}
inline void CleaningSafetyCheckDebug::set_is_predicted_collsion(bool value) {
  _internal_set_is_predicted_collsion(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.CleaningSafetyCheckDebug.is_predicted_collsion)
}
inline bool CleaningSafetyCheckDebug::_internal_is_predicted_collsion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_predicted_collsion_;
}
inline void CleaningSafetyCheckDebug::_internal_set_is_predicted_collsion(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_predicted_collsion_ = value;
}

// optional double post_process_throttle_cmd = 8;
inline bool CleaningSafetyCheckDebug::has_post_process_throttle_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CleaningSafetyCheckDebug::clear_post_process_throttle_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.post_process_throttle_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double CleaningSafetyCheckDebug::post_process_throttle_cmd() const {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.post_process_throttle_cmd)
  return _internal_post_process_throttle_cmd();
}
inline void CleaningSafetyCheckDebug::set_post_process_throttle_cmd(double value) {
  _internal_set_post_process_throttle_cmd(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.CleaningSafetyCheckDebug.post_process_throttle_cmd)
}
inline double CleaningSafetyCheckDebug::_internal_post_process_throttle_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.post_process_throttle_cmd_;
}
inline void CleaningSafetyCheckDebug::_internal_set_post_process_throttle_cmd(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.post_process_throttle_cmd_ = value;
}

// optional double post_process_brake_cmd = 9;
inline bool CleaningSafetyCheckDebug::has_post_process_brake_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CleaningSafetyCheckDebug::clear_post_process_brake_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.post_process_brake_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double CleaningSafetyCheckDebug::post_process_brake_cmd() const {
  // @@protoc_insertion_point(field_get:control.CleaningSafetyCheckDebug.post_process_brake_cmd)
  return _internal_post_process_brake_cmd();
}
inline void CleaningSafetyCheckDebug::set_post_process_brake_cmd(double value) {
  _internal_set_post_process_brake_cmd(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.CleaningSafetyCheckDebug.post_process_brake_cmd)
}
inline double CleaningSafetyCheckDebug::_internal_post_process_brake_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.post_process_brake_cmd_;
}
inline void CleaningSafetyCheckDebug::_internal_set_post_process_brake_cmd(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.post_process_brake_cmd_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcontrol_5fdebug_2eproto_2epb_2eh

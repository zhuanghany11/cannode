// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/mrac_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmrac_5fconf_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmrac_5fconf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmrac_5fconf_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fmrac_5fconf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2fmrac_5fconf_2eproto;
namespace control {
class MracConf;
struct MracConfDefaultTypeInternal;
extern MracConfDefaultTypeInternal _MracConf_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {

// ===================================================================


// -------------------------------------------------------------------

class MracConf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.MracConf) */ {
 public:
  inline MracConf() : MracConf(nullptr) {}
  ~MracConf() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MracConf(
      ::google::protobuf::internal::ConstantInitialized);

  inline MracConf(const MracConf& from) : MracConf(nullptr, from) {}
  inline MracConf(MracConf&& from) noexcept
      : MracConf(nullptr, std::move(from)) {}
  inline MracConf& operator=(const MracConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MracConf& operator=(MracConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MracConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MracConf* internal_default_instance() {
    return reinterpret_cast<const MracConf*>(
        &_MracConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MracConf& a, MracConf& b) { a.Swap(&b); }
  inline void Swap(MracConf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MracConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MracConf* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MracConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MracConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MracConf& from) { MracConf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MracConf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.MracConf"; }

 protected:
  explicit MracConf(::google::protobuf::Arena* arena);
  MracConf(::google::protobuf::Arena* arena, const MracConf& from);
  MracConf(::google::protobuf::Arena* arena, MracConf&& from) noexcept
      : MracConf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdaptionStateGainFieldNumber = 5,
    kAdaptionMatrixPFieldNumber = 8,
    kAntiWindupCompensationGainFieldNumber = 10,
    kReferenceTimeConstantFieldNumber = 2,
    kReferenceNaturalFrequencyFieldNumber = 3,
    kReferenceDampingRatioFieldNumber = 4,
    kAdaptionDesiredGainFieldNumber = 6,
    kAdaptionNonlinearGainFieldNumber = 7,
    kClampingTimeConstantFieldNumber = 11,
    kMracModelOrderFieldNumber = 1,
    kMracSaturationLevelFieldNumber = 9,
  };
  // repeated double adaption_state_gain = 5;
  int adaption_state_gain_size() const;
  private:
  int _internal_adaption_state_gain_size() const;

  public:
  void clear_adaption_state_gain() ;
  double adaption_state_gain(int index) const;
  void set_adaption_state_gain(int index, double value);
  void add_adaption_state_gain(double value);
  const ::google::protobuf::RepeatedField<double>& adaption_state_gain() const;
  ::google::protobuf::RepeatedField<double>* mutable_adaption_state_gain();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_adaption_state_gain() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_adaption_state_gain();

  public:
  // repeated double adaption_matrix_p = 8;
  int adaption_matrix_p_size() const;
  private:
  int _internal_adaption_matrix_p_size() const;

  public:
  void clear_adaption_matrix_p() ;
  double adaption_matrix_p(int index) const;
  void set_adaption_matrix_p(int index, double value);
  void add_adaption_matrix_p(double value);
  const ::google::protobuf::RepeatedField<double>& adaption_matrix_p() const;
  ::google::protobuf::RepeatedField<double>* mutable_adaption_matrix_p();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_adaption_matrix_p() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_adaption_matrix_p();

  public:
  // repeated double anti_windup_compensation_gain = 10;
  int anti_windup_compensation_gain_size() const;
  private:
  int _internal_anti_windup_compensation_gain_size() const;

  public:
  void clear_anti_windup_compensation_gain() ;
  double anti_windup_compensation_gain(int index) const;
  void set_anti_windup_compensation_gain(int index, double value);
  void add_anti_windup_compensation_gain(double value);
  const ::google::protobuf::RepeatedField<double>& anti_windup_compensation_gain() const;
  ::google::protobuf::RepeatedField<double>* mutable_anti_windup_compensation_gain();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_anti_windup_compensation_gain() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_anti_windup_compensation_gain();

  public:
  // optional double reference_time_constant = 2;
  bool has_reference_time_constant() const;
  void clear_reference_time_constant() ;
  double reference_time_constant() const;
  void set_reference_time_constant(double value);

  private:
  double _internal_reference_time_constant() const;
  void _internal_set_reference_time_constant(double value);

  public:
  // optional double reference_natural_frequency = 3;
  bool has_reference_natural_frequency() const;
  void clear_reference_natural_frequency() ;
  double reference_natural_frequency() const;
  void set_reference_natural_frequency(double value);

  private:
  double _internal_reference_natural_frequency() const;
  void _internal_set_reference_natural_frequency(double value);

  public:
  // optional double reference_damping_ratio = 4;
  bool has_reference_damping_ratio() const;
  void clear_reference_damping_ratio() ;
  double reference_damping_ratio() const;
  void set_reference_damping_ratio(double value);

  private:
  double _internal_reference_damping_ratio() const;
  void _internal_set_reference_damping_ratio(double value);

  public:
  // optional double adaption_desired_gain = 6;
  bool has_adaption_desired_gain() const;
  void clear_adaption_desired_gain() ;
  double adaption_desired_gain() const;
  void set_adaption_desired_gain(double value);

  private:
  double _internal_adaption_desired_gain() const;
  void _internal_set_adaption_desired_gain(double value);

  public:
  // optional double adaption_nonlinear_gain = 7;
  bool has_adaption_nonlinear_gain() const;
  void clear_adaption_nonlinear_gain() ;
  double adaption_nonlinear_gain() const;
  void set_adaption_nonlinear_gain(double value);

  private:
  double _internal_adaption_nonlinear_gain() const;
  void _internal_set_adaption_nonlinear_gain(double value);

  public:
  // optional double clamping_time_constant = 11;
  bool has_clamping_time_constant() const;
  void clear_clamping_time_constant() ;
  double clamping_time_constant() const;
  void set_clamping_time_constant(double value);

  private:
  double _internal_clamping_time_constant() const;
  void _internal_set_clamping_time_constant(double value);

  public:
  // optional int32 mrac_model_order = 1 [default = 1];
  bool has_mrac_model_order() const;
  void clear_mrac_model_order() ;
  ::int32_t mrac_model_order() const;
  void set_mrac_model_order(::int32_t value);

  private:
  ::int32_t _internal_mrac_model_order() const;
  void _internal_set_mrac_model_order(::int32_t value);

  public:
  // optional double mrac_saturation_level = 9 [default = 1];
  bool has_mrac_saturation_level() const;
  void clear_mrac_saturation_level() ;
  double mrac_saturation_level() const;
  void set_mrac_saturation_level(double value);

  private:
  double _internal_mrac_saturation_level() const;
  void _internal_set_mrac_saturation_level(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.MracConf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MracConf_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MracConf& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> adaption_state_gain_;
    ::google::protobuf::RepeatedField<double> adaption_matrix_p_;
    ::google::protobuf::RepeatedField<double> anti_windup_compensation_gain_;
    double reference_time_constant_;
    double reference_natural_frequency_;
    double reference_damping_ratio_;
    double adaption_desired_gain_;
    double adaption_nonlinear_gain_;
    double clamping_time_constant_;
    ::int32_t mrac_model_order_;
    double mrac_saturation_level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fmrac_5fconf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MracConf

// optional int32 mrac_model_order = 1 [default = 1];
inline bool MracConf::has_mrac_model_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MracConf::clear_mrac_model_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mrac_model_order_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t MracConf::mrac_model_order() const {
  // @@protoc_insertion_point(field_get:control.MracConf.mrac_model_order)
  return _internal_mrac_model_order();
}
inline void MracConf::set_mrac_model_order(::int32_t value) {
  _internal_set_mrac_model_order(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.MracConf.mrac_model_order)
}
inline ::int32_t MracConf::_internal_mrac_model_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mrac_model_order_;
}
inline void MracConf::_internal_set_mrac_model_order(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mrac_model_order_ = value;
}

// optional double reference_time_constant = 2;
inline bool MracConf::has_reference_time_constant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MracConf::clear_reference_time_constant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_time_constant_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double MracConf::reference_time_constant() const {
  // @@protoc_insertion_point(field_get:control.MracConf.reference_time_constant)
  return _internal_reference_time_constant();
}
inline void MracConf::set_reference_time_constant(double value) {
  _internal_set_reference_time_constant(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.MracConf.reference_time_constant)
}
inline double MracConf::_internal_reference_time_constant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_time_constant_;
}
inline void MracConf::_internal_set_reference_time_constant(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_time_constant_ = value;
}

// optional double reference_natural_frequency = 3;
inline bool MracConf::has_reference_natural_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MracConf::clear_reference_natural_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_natural_frequency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double MracConf::reference_natural_frequency() const {
  // @@protoc_insertion_point(field_get:control.MracConf.reference_natural_frequency)
  return _internal_reference_natural_frequency();
}
inline void MracConf::set_reference_natural_frequency(double value) {
  _internal_set_reference_natural_frequency(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.MracConf.reference_natural_frequency)
}
inline double MracConf::_internal_reference_natural_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_natural_frequency_;
}
inline void MracConf::_internal_set_reference_natural_frequency(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_natural_frequency_ = value;
}

// optional double reference_damping_ratio = 4;
inline bool MracConf::has_reference_damping_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MracConf::clear_reference_damping_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_damping_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double MracConf::reference_damping_ratio() const {
  // @@protoc_insertion_point(field_get:control.MracConf.reference_damping_ratio)
  return _internal_reference_damping_ratio();
}
inline void MracConf::set_reference_damping_ratio(double value) {
  _internal_set_reference_damping_ratio(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.MracConf.reference_damping_ratio)
}
inline double MracConf::_internal_reference_damping_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_damping_ratio_;
}
inline void MracConf::_internal_set_reference_damping_ratio(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_damping_ratio_ = value;
}

// repeated double adaption_state_gain = 5;
inline int MracConf::_internal_adaption_state_gain_size() const {
  return _internal_adaption_state_gain().size();
}
inline int MracConf::adaption_state_gain_size() const {
  return _internal_adaption_state_gain_size();
}
inline void MracConf::clear_adaption_state_gain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaption_state_gain_.Clear();
}
inline double MracConf::adaption_state_gain(int index) const {
  // @@protoc_insertion_point(field_get:control.MracConf.adaption_state_gain)
  return _internal_adaption_state_gain().Get(index);
}
inline void MracConf::set_adaption_state_gain(int index, double value) {
  _internal_mutable_adaption_state_gain()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracConf.adaption_state_gain)
}
inline void MracConf::add_adaption_state_gain(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_adaption_state_gain()->Add(value);
  // @@protoc_insertion_point(field_add:control.MracConf.adaption_state_gain)
}
inline const ::google::protobuf::RepeatedField<double>& MracConf::adaption_state_gain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.MracConf.adaption_state_gain)
  return _internal_adaption_state_gain();
}
inline ::google::protobuf::RepeatedField<double>* MracConf::mutable_adaption_state_gain()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.MracConf.adaption_state_gain)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_adaption_state_gain();
}
inline const ::google::protobuf::RepeatedField<double>&
MracConf::_internal_adaption_state_gain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaption_state_gain_;
}
inline ::google::protobuf::RepeatedField<double>* MracConf::_internal_mutable_adaption_state_gain() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.adaption_state_gain_;
}

// optional double adaption_desired_gain = 6;
inline bool MracConf::has_adaption_desired_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MracConf::clear_adaption_desired_gain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaption_desired_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double MracConf::adaption_desired_gain() const {
  // @@protoc_insertion_point(field_get:control.MracConf.adaption_desired_gain)
  return _internal_adaption_desired_gain();
}
inline void MracConf::set_adaption_desired_gain(double value) {
  _internal_set_adaption_desired_gain(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.MracConf.adaption_desired_gain)
}
inline double MracConf::_internal_adaption_desired_gain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaption_desired_gain_;
}
inline void MracConf::_internal_set_adaption_desired_gain(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaption_desired_gain_ = value;
}

// optional double adaption_nonlinear_gain = 7;
inline bool MracConf::has_adaption_nonlinear_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MracConf::clear_adaption_nonlinear_gain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaption_nonlinear_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double MracConf::adaption_nonlinear_gain() const {
  // @@protoc_insertion_point(field_get:control.MracConf.adaption_nonlinear_gain)
  return _internal_adaption_nonlinear_gain();
}
inline void MracConf::set_adaption_nonlinear_gain(double value) {
  _internal_set_adaption_nonlinear_gain(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.MracConf.adaption_nonlinear_gain)
}
inline double MracConf::_internal_adaption_nonlinear_gain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaption_nonlinear_gain_;
}
inline void MracConf::_internal_set_adaption_nonlinear_gain(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaption_nonlinear_gain_ = value;
}

// repeated double adaption_matrix_p = 8;
inline int MracConf::_internal_adaption_matrix_p_size() const {
  return _internal_adaption_matrix_p().size();
}
inline int MracConf::adaption_matrix_p_size() const {
  return _internal_adaption_matrix_p_size();
}
inline void MracConf::clear_adaption_matrix_p() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaption_matrix_p_.Clear();
}
inline double MracConf::adaption_matrix_p(int index) const {
  // @@protoc_insertion_point(field_get:control.MracConf.adaption_matrix_p)
  return _internal_adaption_matrix_p().Get(index);
}
inline void MracConf::set_adaption_matrix_p(int index, double value) {
  _internal_mutable_adaption_matrix_p()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracConf.adaption_matrix_p)
}
inline void MracConf::add_adaption_matrix_p(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_adaption_matrix_p()->Add(value);
  // @@protoc_insertion_point(field_add:control.MracConf.adaption_matrix_p)
}
inline const ::google::protobuf::RepeatedField<double>& MracConf::adaption_matrix_p() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.MracConf.adaption_matrix_p)
  return _internal_adaption_matrix_p();
}
inline ::google::protobuf::RepeatedField<double>* MracConf::mutable_adaption_matrix_p()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.MracConf.adaption_matrix_p)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_adaption_matrix_p();
}
inline const ::google::protobuf::RepeatedField<double>&
MracConf::_internal_adaption_matrix_p() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaption_matrix_p_;
}
inline ::google::protobuf::RepeatedField<double>* MracConf::_internal_mutable_adaption_matrix_p() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.adaption_matrix_p_;
}

// optional double mrac_saturation_level = 9 [default = 1];
inline bool MracConf::has_mrac_saturation_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MracConf::clear_mrac_saturation_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mrac_saturation_level_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double MracConf::mrac_saturation_level() const {
  // @@protoc_insertion_point(field_get:control.MracConf.mrac_saturation_level)
  return _internal_mrac_saturation_level();
}
inline void MracConf::set_mrac_saturation_level(double value) {
  _internal_set_mrac_saturation_level(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.MracConf.mrac_saturation_level)
}
inline double MracConf::_internal_mrac_saturation_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mrac_saturation_level_;
}
inline void MracConf::_internal_set_mrac_saturation_level(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mrac_saturation_level_ = value;
}

// repeated double anti_windup_compensation_gain = 10;
inline int MracConf::_internal_anti_windup_compensation_gain_size() const {
  return _internal_anti_windup_compensation_gain().size();
}
inline int MracConf::anti_windup_compensation_gain_size() const {
  return _internal_anti_windup_compensation_gain_size();
}
inline void MracConf::clear_anti_windup_compensation_gain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anti_windup_compensation_gain_.Clear();
}
inline double MracConf::anti_windup_compensation_gain(int index) const {
  // @@protoc_insertion_point(field_get:control.MracConf.anti_windup_compensation_gain)
  return _internal_anti_windup_compensation_gain().Get(index);
}
inline void MracConf::set_anti_windup_compensation_gain(int index, double value) {
  _internal_mutable_anti_windup_compensation_gain()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracConf.anti_windup_compensation_gain)
}
inline void MracConf::add_anti_windup_compensation_gain(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_anti_windup_compensation_gain()->Add(value);
  // @@protoc_insertion_point(field_add:control.MracConf.anti_windup_compensation_gain)
}
inline const ::google::protobuf::RepeatedField<double>& MracConf::anti_windup_compensation_gain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.MracConf.anti_windup_compensation_gain)
  return _internal_anti_windup_compensation_gain();
}
inline ::google::protobuf::RepeatedField<double>* MracConf::mutable_anti_windup_compensation_gain()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.MracConf.anti_windup_compensation_gain)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_anti_windup_compensation_gain();
}
inline const ::google::protobuf::RepeatedField<double>&
MracConf::_internal_anti_windup_compensation_gain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.anti_windup_compensation_gain_;
}
inline ::google::protobuf::RepeatedField<double>* MracConf::_internal_mutable_anti_windup_compensation_gain() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.anti_windup_compensation_gain_;
}

// optional double clamping_time_constant = 11;
inline bool MracConf::has_clamping_time_constant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MracConf::clear_clamping_time_constant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clamping_time_constant_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double MracConf::clamping_time_constant() const {
  // @@protoc_insertion_point(field_get:control.MracConf.clamping_time_constant)
  return _internal_clamping_time_constant();
}
inline void MracConf::set_clamping_time_constant(double value) {
  _internal_set_clamping_time_constant(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.MracConf.clamping_time_constant)
}
inline double MracConf::_internal_clamping_time_constant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clamping_time_constant_;
}
inline void MracConf::_internal_set_clamping_time_constant(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clamping_time_constant_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmrac_5fconf_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/mpc_controller.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmpc_5fcontroller_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmpc_5fcontroller_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "control_base/gain_scheduler_conf.pb.h"
#include "control_base/leadlag_conf.pb.h"
#include "control_base/pid_conf.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmpc_5fcontroller_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fmpc_5fcontroller_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto;
namespace control {
namespace latmpc {
class FilterConf;
struct FilterConfDefaultTypeInternal;
extern FilterConfDefaultTypeInternal _FilterConf_default_instance_;
class MPCControllerConf;
struct MPCControllerConfDefaultTypeInternal;
extern MPCControllerConfDefaultTypeInternal _MPCControllerConf_default_instance_;
}  // namespace latmpc
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace latmpc {

// ===================================================================


// -------------------------------------------------------------------

class FilterConf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.latmpc.FilterConf) */ {
 public:
  inline FilterConf() : FilterConf(nullptr) {}
  ~FilterConf() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FilterConf(
      ::google::protobuf::internal::ConstantInitialized);

  inline FilterConf(const FilterConf& from) : FilterConf(nullptr, from) {}
  inline FilterConf(FilterConf&& from) noexcept
      : FilterConf(nullptr, std::move(from)) {}
  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterConf& operator=(FilterConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterConf* internal_default_instance() {
    return reinterpret_cast<const FilterConf*>(
        &_FilterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FilterConf& a, FilterConf& b) { a.Swap(&b); }
  inline void Swap(FilterConf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterConf* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<FilterConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FilterConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FilterConf& from) { FilterConf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FilterConf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.latmpc.FilterConf"; }

 protected:
  explicit FilterConf(::google::protobuf::Arena* arena);
  FilterConf(::google::protobuf::Arena* arena, const FilterConf& from);
  FilterConf(::google::protobuf::Arena* arena, FilterConf&& from) noexcept
      : FilterConf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCutoffFreqFieldNumber = 1,
  };
  // optional int32 cutoff_freq = 1;
  bool has_cutoff_freq() const;
  void clear_cutoff_freq() ;
  ::int32_t cutoff_freq() const;
  void set_cutoff_freq(::int32_t value);

  private:
  ::int32_t _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:control.latmpc.FilterConf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FilterConf_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FilterConf& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t cutoff_freq_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fmpc_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class MPCControllerConf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.latmpc.MPCControllerConf) */ {
 public:
  inline MPCControllerConf() : MPCControllerConf(nullptr) {}
  ~MPCControllerConf() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MPCControllerConf(
      ::google::protobuf::internal::ConstantInitialized);

  inline MPCControllerConf(const MPCControllerConf& from) : MPCControllerConf(nullptr, from) {}
  inline MPCControllerConf(MPCControllerConf&& from) noexcept
      : MPCControllerConf(nullptr, std::move(from)) {}
  inline MPCControllerConf& operator=(const MPCControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPCControllerConf& operator=(MPCControllerConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MPCControllerConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MPCControllerConf* internal_default_instance() {
    return reinterpret_cast<const MPCControllerConf*>(
        &_MPCControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MPCControllerConf& a, MPCControllerConf& b) { a.Swap(&b); }
  inline void Swap(MPCControllerConf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPCControllerConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MPCControllerConf* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MPCControllerConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MPCControllerConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MPCControllerConf& from) { MPCControllerConf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MPCControllerConf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.latmpc.MPCControllerConf"; }

 protected:
  explicit MPCControllerConf(::google::protobuf::Arena* arena);
  MPCControllerConf(::google::protobuf::Arena* arena, const MPCControllerConf& from);
  MPCControllerConf(::google::protobuf::Arena* arena, MPCControllerConf&& from) noexcept
      : MPCControllerConf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMatrixQFieldNumber = 9,
    kMatrixRFieldNumber = 10,
    kLatErrGainSchedulerFieldNumber = 18,
    kHeadingErrGainSchedulerFieldNumber = 19,
    kSteerWeightGainSchedulerFieldNumber = 20,
    kFeedforwardtermGainSchedulerFieldNumber = 21,
    kAccLookupPidConfFieldNumber = 27,
    kReverseLeadlagConfFieldNumber = 32,
    kPitchAngleFilterConfFieldNumber = 40,
    kTsFieldNumber = 1,
    kCfFieldNumber = 2,
    kCrFieldNumber = 3,
    kMassFlFieldNumber = 4,
    kMassFrFieldNumber = 5,
    kMassRlFieldNumber = 6,
    kMassRrFieldNumber = 7,
    kEpsFieldNumber = 8,
    kCutoffFreqFieldNumber = 11,
    kMeanFilterWindowSizeFieldNumber = 12,
    kMaxLateralAccelerationFieldNumber = 14,
    kStandstillAccelerationFieldNumber = 15,
    kBrakeMinimumActionFieldNumber = 16,
    kThrottleMinimumActionFieldNumber = 17,
    kMaxIterationFieldNumber = 13,
    kEnableMpcFeedforwardCompensationFieldNumber = 23,
    kUseLqrCurvatureFeedforwardFieldNumber = 25,
    kUsePreviewFieldNumber = 26,
    kUseLookupAccPidFieldNumber = 28,
    kUnconstrainedControlDiffLimitFieldNumber = 24,
    kSwitchSpeedFieldNumber = 31,
    kSwitchSpeedWindowFieldNumber = 33,
    kPreviewWindowFieldNumber = 34,
    kUsePitchAngleFilterFieldNumber = 29,
    kEnableLookAheadBackControlFieldNumber = 30,
    kEnableReverseLeadlagCompensationFieldNumber = 39,
    kEnableFeedbackAugmentOnHighSpeedFieldNumber = 41,
    kLookaheadStationFieldNumber = 35,
    kLookbackStationFieldNumber = 36,
    kLookaheadStationHighSpeedFieldNumber = 37,
    kLookbackStationHighSpeedFieldNumber = 38,
    kTrajectoryTransformToComReverseFieldNumber = 42,
    kTrajectoryTransformToComDriveFieldNumber = 43,
    kEnableSlopeOffsetFieldNumber = 44,
    kUsePreviewReferenceCheckFieldNumber = 45,
    kUseKinematicModelFieldNumber = 46,
    kEnableNavigationModeErrorFilterFieldNumber = 47,
  };
  // repeated double matrix_q = 9;
  int matrix_q_size() const;
  private:
  int _internal_matrix_q_size() const;

  public:
  void clear_matrix_q() ;
  double matrix_q(int index) const;
  void set_matrix_q(int index, double value);
  void add_matrix_q(double value);
  const ::google::protobuf::RepeatedField<double>& matrix_q() const;
  ::google::protobuf::RepeatedField<double>* mutable_matrix_q();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_matrix_q() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_matrix_q();

  public:
  // repeated double matrix_r = 10;
  int matrix_r_size() const;
  private:
  int _internal_matrix_r_size() const;

  public:
  void clear_matrix_r() ;
  double matrix_r(int index) const;
  void set_matrix_r(int index, double value);
  void add_matrix_r(double value);
  const ::google::protobuf::RepeatedField<double>& matrix_r() const;
  ::google::protobuf::RepeatedField<double>* mutable_matrix_r();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_matrix_r() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_matrix_r();

  public:
  // optional .control.GainScheduler lat_err_gain_scheduler = 18;
  bool has_lat_err_gain_scheduler() const;
  void clear_lat_err_gain_scheduler() ;
  const ::control::GainScheduler& lat_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_lat_err_gain_scheduler();
  ::control::GainScheduler* mutable_lat_err_gain_scheduler();
  void set_allocated_lat_err_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_lat_err_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_lat_err_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_lat_err_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_lat_err_gain_scheduler();

  public:
  // optional .control.GainScheduler heading_err_gain_scheduler = 19;
  bool has_heading_err_gain_scheduler() const;
  void clear_heading_err_gain_scheduler() ;
  const ::control::GainScheduler& heading_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_heading_err_gain_scheduler();
  ::control::GainScheduler* mutable_heading_err_gain_scheduler();
  void set_allocated_heading_err_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_heading_err_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_heading_err_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_heading_err_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_heading_err_gain_scheduler();

  public:
  // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
  bool has_steer_weight_gain_scheduler() const;
  void clear_steer_weight_gain_scheduler() ;
  const ::control::GainScheduler& steer_weight_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_steer_weight_gain_scheduler();
  ::control::GainScheduler* mutable_steer_weight_gain_scheduler();
  void set_allocated_steer_weight_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_steer_weight_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_steer_weight_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_steer_weight_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_steer_weight_gain_scheduler();

  public:
  // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
  bool has_feedforwardterm_gain_scheduler() const;
  void clear_feedforwardterm_gain_scheduler() ;
  const ::control::GainScheduler& feedforwardterm_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_feedforwardterm_gain_scheduler();
  ::control::GainScheduler* mutable_feedforwardterm_gain_scheduler();
  void set_allocated_feedforwardterm_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_feedforwardterm_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_feedforwardterm_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_feedforwardterm_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_feedforwardterm_gain_scheduler();

  public:
  // optional .control.PidConf acc_lookup_pid_conf = 27;
  bool has_acc_lookup_pid_conf() const;
  void clear_acc_lookup_pid_conf() ;
  const ::control::PidConf& acc_lookup_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_acc_lookup_pid_conf();
  ::control::PidConf* mutable_acc_lookup_pid_conf();
  void set_allocated_acc_lookup_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_acc_lookup_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_acc_lookup_pid_conf();

  private:
  const ::control::PidConf& _internal_acc_lookup_pid_conf() const;
  ::control::PidConf* _internal_mutable_acc_lookup_pid_conf();

  public:
  // optional .control.LeadlagConf reverse_leadlag_conf = 32;
  bool has_reverse_leadlag_conf() const;
  void clear_reverse_leadlag_conf() ;
  const ::control::LeadlagConf& reverse_leadlag_conf() const;
  PROTOBUF_NODISCARD ::control::LeadlagConf* release_reverse_leadlag_conf();
  ::control::LeadlagConf* mutable_reverse_leadlag_conf();
  void set_allocated_reverse_leadlag_conf(::control::LeadlagConf* value);
  void unsafe_arena_set_allocated_reverse_leadlag_conf(::control::LeadlagConf* value);
  ::control::LeadlagConf* unsafe_arena_release_reverse_leadlag_conf();

  private:
  const ::control::LeadlagConf& _internal_reverse_leadlag_conf() const;
  ::control::LeadlagConf* _internal_mutable_reverse_leadlag_conf();

  public:
  // optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
  bool has_pitch_angle_filter_conf() const;
  void clear_pitch_angle_filter_conf() ;
  const ::control::latmpc::FilterConf& pitch_angle_filter_conf() const;
  PROTOBUF_NODISCARD ::control::latmpc::FilterConf* release_pitch_angle_filter_conf();
  ::control::latmpc::FilterConf* mutable_pitch_angle_filter_conf();
  void set_allocated_pitch_angle_filter_conf(::control::latmpc::FilterConf* value);
  void unsafe_arena_set_allocated_pitch_angle_filter_conf(::control::latmpc::FilterConf* value);
  ::control::latmpc::FilterConf* unsafe_arena_release_pitch_angle_filter_conf();

  private:
  const ::control::latmpc::FilterConf& _internal_pitch_angle_filter_conf() const;
  ::control::latmpc::FilterConf* _internal_mutable_pitch_angle_filter_conf();

  public:
  // optional double ts = 1;
  bool has_ts() const;
  void clear_ts() ;
  double ts() const;
  void set_ts(double value);

  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);

  public:
  // optional double cf = 2;
  bool has_cf() const;
  void clear_cf() ;
  double cf() const;
  void set_cf(double value);

  private:
  double _internal_cf() const;
  void _internal_set_cf(double value);

  public:
  // optional double cr = 3;
  bool has_cr() const;
  void clear_cr() ;
  double cr() const;
  void set_cr(double value);

  private:
  double _internal_cr() const;
  void _internal_set_cr(double value);

  public:
  // optional int32 mass_fl = 4;
  bool has_mass_fl() const;
  void clear_mass_fl() ;
  ::int32_t mass_fl() const;
  void set_mass_fl(::int32_t value);

  private:
  ::int32_t _internal_mass_fl() const;
  void _internal_set_mass_fl(::int32_t value);

  public:
  // optional int32 mass_fr = 5;
  bool has_mass_fr() const;
  void clear_mass_fr() ;
  ::int32_t mass_fr() const;
  void set_mass_fr(::int32_t value);

  private:
  ::int32_t _internal_mass_fr() const;
  void _internal_set_mass_fr(::int32_t value);

  public:
  // optional int32 mass_rl = 6;
  bool has_mass_rl() const;
  void clear_mass_rl() ;
  ::int32_t mass_rl() const;
  void set_mass_rl(::int32_t value);

  private:
  ::int32_t _internal_mass_rl() const;
  void _internal_set_mass_rl(::int32_t value);

  public:
  // optional int32 mass_rr = 7;
  bool has_mass_rr() const;
  void clear_mass_rr() ;
  ::int32_t mass_rr() const;
  void set_mass_rr(::int32_t value);

  private:
  ::int32_t _internal_mass_rr() const;
  void _internal_set_mass_rr(::int32_t value);

  public:
  // optional double eps = 8;
  bool has_eps() const;
  void clear_eps() ;
  double eps() const;
  void set_eps(double value);

  private:
  double _internal_eps() const;
  void _internal_set_eps(double value);

  public:
  // optional int32 cutoff_freq = 11;
  bool has_cutoff_freq() const;
  void clear_cutoff_freq() ;
  ::int32_t cutoff_freq() const;
  void set_cutoff_freq(::int32_t value);

  private:
  ::int32_t _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(::int32_t value);

  public:
  // optional int32 mean_filter_window_size = 12;
  bool has_mean_filter_window_size() const;
  void clear_mean_filter_window_size() ;
  ::int32_t mean_filter_window_size() const;
  void set_mean_filter_window_size(::int32_t value);

  private:
  ::int32_t _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(::int32_t value);

  public:
  // optional double max_lateral_acceleration = 14;
  bool has_max_lateral_acceleration() const;
  void clear_max_lateral_acceleration() ;
  double max_lateral_acceleration() const;
  void set_max_lateral_acceleration(double value);

  private:
  double _internal_max_lateral_acceleration() const;
  void _internal_set_max_lateral_acceleration(double value);

  public:
  // optional double standstill_acceleration = 15;
  bool has_standstill_acceleration() const;
  void clear_standstill_acceleration() ;
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);

  private:
  double _internal_standstill_acceleration() const;
  void _internal_set_standstill_acceleration(double value);

  public:
  // optional double brake_minimum_action = 16;
  bool has_brake_minimum_action() const;
  void clear_brake_minimum_action() ;
  double brake_minimum_action() const;
  void set_brake_minimum_action(double value);

  private:
  double _internal_brake_minimum_action() const;
  void _internal_set_brake_minimum_action(double value);

  public:
  // optional double throttle_minimum_action = 17;
  bool has_throttle_minimum_action() const;
  void clear_throttle_minimum_action() ;
  double throttle_minimum_action() const;
  void set_throttle_minimum_action(double value);

  private:
  double _internal_throttle_minimum_action() const;
  void _internal_set_throttle_minimum_action(double value);

  public:
  // optional int32 max_iteration = 13;
  bool has_max_iteration() const;
  void clear_max_iteration() ;
  ::int32_t max_iteration() const;
  void set_max_iteration(::int32_t value);

  private:
  ::int32_t _internal_max_iteration() const;
  void _internal_set_max_iteration(::int32_t value);

  public:
  // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
  bool has_enable_mpc_feedforward_compensation() const;
  void clear_enable_mpc_feedforward_compensation() ;
  bool enable_mpc_feedforward_compensation() const;
  void set_enable_mpc_feedforward_compensation(bool value);

  private:
  bool _internal_enable_mpc_feedforward_compensation() const;
  void _internal_set_enable_mpc_feedforward_compensation(bool value);

  public:
  // optional bool use_lqr_curvature_feedforward = 25;
  bool has_use_lqr_curvature_feedforward() const;
  void clear_use_lqr_curvature_feedforward() ;
  bool use_lqr_curvature_feedforward() const;
  void set_use_lqr_curvature_feedforward(bool value);

  private:
  bool _internal_use_lqr_curvature_feedforward() const;
  void _internal_set_use_lqr_curvature_feedforward(bool value);

  public:
  // optional bool use_preview = 26;
  bool has_use_preview() const;
  void clear_use_preview() ;
  bool use_preview() const;
  void set_use_preview(bool value);

  private:
  bool _internal_use_preview() const;
  void _internal_set_use_preview(bool value);

  public:
  // optional bool use_lookup_acc_pid = 28;
  bool has_use_lookup_acc_pid() const;
  void clear_use_lookup_acc_pid() ;
  bool use_lookup_acc_pid() const;
  void set_use_lookup_acc_pid(bool value);

  private:
  bool _internal_use_lookup_acc_pid() const;
  void _internal_set_use_lookup_acc_pid(bool value);

  public:
  // optional double unconstrained_control_diff_limit = 24;
  bool has_unconstrained_control_diff_limit() const;
  void clear_unconstrained_control_diff_limit() ;
  double unconstrained_control_diff_limit() const;
  void set_unconstrained_control_diff_limit(double value);

  private:
  double _internal_unconstrained_control_diff_limit() const;
  void _internal_set_unconstrained_control_diff_limit(double value);

  public:
  // optional double switch_speed = 31;
  bool has_switch_speed() const;
  void clear_switch_speed() ;
  double switch_speed() const;
  void set_switch_speed(double value);

  private:
  double _internal_switch_speed() const;
  void _internal_set_switch_speed(double value);

  public:
  // optional double switch_speed_window = 33 [default = 0];
  bool has_switch_speed_window() const;
  void clear_switch_speed_window() ;
  double switch_speed_window() const;
  void set_switch_speed_window(double value);

  private:
  double _internal_switch_speed_window() const;
  void _internal_set_switch_speed_window(double value);

  public:
  // optional int32 preview_window = 34;
  bool has_preview_window() const;
  void clear_preview_window() ;
  ::int32_t preview_window() const;
  void set_preview_window(::int32_t value);

  private:
  ::int32_t _internal_preview_window() const;
  void _internal_set_preview_window(::int32_t value);

  public:
  // optional bool use_pitch_angle_filter = 29;
  bool has_use_pitch_angle_filter() const;
  void clear_use_pitch_angle_filter() ;
  bool use_pitch_angle_filter() const;
  void set_use_pitch_angle_filter(bool value);

  private:
  bool _internal_use_pitch_angle_filter() const;
  void _internal_set_use_pitch_angle_filter(bool value);

  public:
  // optional bool enable_look_ahead_back_control = 30 [default = false];
  bool has_enable_look_ahead_back_control() const;
  void clear_enable_look_ahead_back_control() ;
  bool enable_look_ahead_back_control() const;
  void set_enable_look_ahead_back_control(bool value);

  private:
  bool _internal_enable_look_ahead_back_control() const;
  void _internal_set_enable_look_ahead_back_control(bool value);

  public:
  // optional bool enable_reverse_leadlag_compensation = 39 [default = false];
  bool has_enable_reverse_leadlag_compensation() const;
  void clear_enable_reverse_leadlag_compensation() ;
  bool enable_reverse_leadlag_compensation() const;
  void set_enable_reverse_leadlag_compensation(bool value);

  private:
  bool _internal_enable_reverse_leadlag_compensation() const;
  void _internal_set_enable_reverse_leadlag_compensation(bool value);

  public:
  // optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
  bool has_enable_feedback_augment_on_high_speed() const;
  void clear_enable_feedback_augment_on_high_speed() ;
  bool enable_feedback_augment_on_high_speed() const;
  void set_enable_feedback_augment_on_high_speed(bool value);

  private:
  bool _internal_enable_feedback_augment_on_high_speed() const;
  void _internal_set_enable_feedback_augment_on_high_speed(bool value);

  public:
  // optional double lookahead_station = 35 [default = 0];
  bool has_lookahead_station() const;
  void clear_lookahead_station() ;
  double lookahead_station() const;
  void set_lookahead_station(double value);

  private:
  double _internal_lookahead_station() const;
  void _internal_set_lookahead_station(double value);

  public:
  // optional double lookback_station = 36 [default = 0];
  bool has_lookback_station() const;
  void clear_lookback_station() ;
  double lookback_station() const;
  void set_lookback_station(double value);

  private:
  double _internal_lookback_station() const;
  void _internal_set_lookback_station(double value);

  public:
  // optional double lookahead_station_high_speed = 37 [default = 0];
  bool has_lookahead_station_high_speed() const;
  void clear_lookahead_station_high_speed() ;
  double lookahead_station_high_speed() const;
  void set_lookahead_station_high_speed(double value);

  private:
  double _internal_lookahead_station_high_speed() const;
  void _internal_set_lookahead_station_high_speed(double value);

  public:
  // optional double lookback_station_high_speed = 38 [default = 0];
  bool has_lookback_station_high_speed() const;
  void clear_lookback_station_high_speed() ;
  double lookback_station_high_speed() const;
  void set_lookback_station_high_speed(double value);

  private:
  double _internal_lookback_station_high_speed() const;
  void _internal_set_lookback_station_high_speed(double value);

  public:
  // optional bool trajectory_transform_to_com_reverse = 42 [default = false];
  bool has_trajectory_transform_to_com_reverse() const;
  void clear_trajectory_transform_to_com_reverse() ;
  bool trajectory_transform_to_com_reverse() const;
  void set_trajectory_transform_to_com_reverse(bool value);

  private:
  bool _internal_trajectory_transform_to_com_reverse() const;
  void _internal_set_trajectory_transform_to_com_reverse(bool value);

  public:
  // optional bool trajectory_transform_to_com_drive = 43 [default = false];
  bool has_trajectory_transform_to_com_drive() const;
  void clear_trajectory_transform_to_com_drive() ;
  bool trajectory_transform_to_com_drive() const;
  void set_trajectory_transform_to_com_drive(bool value);

  private:
  bool _internal_trajectory_transform_to_com_drive() const;
  void _internal_set_trajectory_transform_to_com_drive(bool value);

  public:
  // optional bool enable_slope_offset = 44 [default = false];
  bool has_enable_slope_offset() const;
  void clear_enable_slope_offset() ;
  bool enable_slope_offset() const;
  void set_enable_slope_offset(bool value);

  private:
  bool _internal_enable_slope_offset() const;
  void _internal_set_enable_slope_offset(bool value);

  public:
  // optional bool use_preview_reference_check = 45 [default = false];
  bool has_use_preview_reference_check() const;
  void clear_use_preview_reference_check() ;
  bool use_preview_reference_check() const;
  void set_use_preview_reference_check(bool value);

  private:
  bool _internal_use_preview_reference_check() const;
  void _internal_set_use_preview_reference_check(bool value);

  public:
  // optional bool use_kinematic_model = 46;
  bool has_use_kinematic_model() const;
  void clear_use_kinematic_model() ;
  bool use_kinematic_model() const;
  void set_use_kinematic_model(bool value);

  private:
  bool _internal_use_kinematic_model() const;
  void _internal_set_use_kinematic_model(bool value);

  public:
  // optional bool enable_navigation_mode_error_filter = 47 [default = false];
  bool has_enable_navigation_mode_error_filter() const;
  void clear_enable_navigation_mode_error_filter() ;
  bool enable_navigation_mode_error_filter() const;
  void set_enable_navigation_mode_error_filter(bool value);

  private:
  bool _internal_enable_navigation_mode_error_filter() const;
  void _internal_set_enable_navigation_mode_error_filter(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.latmpc.MPCControllerConf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 46, 7,
      0, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MPCControllerConf_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MPCControllerConf& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> matrix_q_;
    ::google::protobuf::RepeatedField<double> matrix_r_;
    ::control::GainScheduler* lat_err_gain_scheduler_;
    ::control::GainScheduler* heading_err_gain_scheduler_;
    ::control::GainScheduler* steer_weight_gain_scheduler_;
    ::control::GainScheduler* feedforwardterm_gain_scheduler_;
    ::control::PidConf* acc_lookup_pid_conf_;
    ::control::LeadlagConf* reverse_leadlag_conf_;
    ::control::latmpc::FilterConf* pitch_angle_filter_conf_;
    double ts_;
    double cf_;
    double cr_;
    ::int32_t mass_fl_;
    ::int32_t mass_fr_;
    ::int32_t mass_rl_;
    ::int32_t mass_rr_;
    double eps_;
    ::int32_t cutoff_freq_;
    ::int32_t mean_filter_window_size_;
    double max_lateral_acceleration_;
    double standstill_acceleration_;
    double brake_minimum_action_;
    double throttle_minimum_action_;
    ::int32_t max_iteration_;
    bool enable_mpc_feedforward_compensation_;
    bool use_lqr_curvature_feedforward_;
    bool use_preview_;
    bool use_lookup_acc_pid_;
    double unconstrained_control_diff_limit_;
    double switch_speed_;
    double switch_speed_window_;
    ::int32_t preview_window_;
    bool use_pitch_angle_filter_;
    bool enable_look_ahead_back_control_;
    bool enable_reverse_leadlag_compensation_;
    bool enable_feedback_augment_on_high_speed_;
    double lookahead_station_;
    double lookback_station_;
    double lookahead_station_high_speed_;
    double lookback_station_high_speed_;
    bool trajectory_transform_to_com_reverse_;
    bool trajectory_transform_to_com_drive_;
    bool enable_slope_offset_;
    bool use_preview_reference_check_;
    bool use_kinematic_model_;
    bool enable_navigation_mode_error_filter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fmpc_5fcontroller_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FilterConf

// optional int32 cutoff_freq = 1;
inline bool FilterConf::has_cutoff_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FilterConf::clear_cutoff_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cutoff_freq_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.latmpc.FilterConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void FilterConf::set_cutoff_freq(::int32_t value) {
  _internal_set_cutoff_freq(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.latmpc.FilterConf.cutoff_freq)
}
inline ::int32_t FilterConf::_internal_cutoff_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cutoff_freq_;
}
inline void FilterConf::_internal_set_cutoff_freq(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cutoff_freq_ = value;
}

// -------------------------------------------------------------------

// MPCControllerConf

// optional double ts = 1;
inline bool MPCControllerConf::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MPCControllerConf::clear_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double MPCControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.ts)
  return _internal_ts();
}
inline void MPCControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.ts)
}
inline double MPCControllerConf::_internal_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ts_;
}
inline void MPCControllerConf::_internal_set_ts(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = value;
}

// optional double cf = 2;
inline bool MPCControllerConf::has_cf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void MPCControllerConf::clear_cf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cf_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double MPCControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.cf)
  return _internal_cf();
}
inline void MPCControllerConf::set_cf(double value) {
  _internal_set_cf(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.cf)
}
inline double MPCControllerConf::_internal_cf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cf_;
}
inline void MPCControllerConf::_internal_set_cf(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cf_ = value;
}

// optional double cr = 3;
inline bool MPCControllerConf::has_cr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void MPCControllerConf::clear_cr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double MPCControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.cr)
  return _internal_cr();
}
inline void MPCControllerConf::set_cr(double value) {
  _internal_set_cr(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.cr)
}
inline double MPCControllerConf::_internal_cr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cr_;
}
inline void MPCControllerConf::_internal_set_cr(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cr_ = value;
}

// optional int32 mass_fl = 4;
inline bool MPCControllerConf::has_mass_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void MPCControllerConf::clear_mass_fl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_fl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t MPCControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.mass_fl)
  return _internal_mass_fl();
}
inline void MPCControllerConf::set_mass_fl(::int32_t value) {
  _internal_set_mass_fl(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.mass_fl)
}
inline ::int32_t MPCControllerConf::_internal_mass_fl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mass_fl_;
}
inline void MPCControllerConf::_internal_set_mass_fl(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_fl_ = value;
}

// optional int32 mass_fr = 5;
inline bool MPCControllerConf::has_mass_fr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void MPCControllerConf::clear_mass_fr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_fr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t MPCControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.mass_fr)
  return _internal_mass_fr();
}
inline void MPCControllerConf::set_mass_fr(::int32_t value) {
  _internal_set_mass_fr(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.mass_fr)
}
inline ::int32_t MPCControllerConf::_internal_mass_fr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mass_fr_;
}
inline void MPCControllerConf::_internal_set_mass_fr(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_fr_ = value;
}

// optional int32 mass_rl = 6;
inline bool MPCControllerConf::has_mass_rl() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_mass_rl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_rl_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t MPCControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.mass_rl)
  return _internal_mass_rl();
}
inline void MPCControllerConf::set_mass_rl(::int32_t value) {
  _internal_set_mass_rl(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.mass_rl)
}
inline ::int32_t MPCControllerConf::_internal_mass_rl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mass_rl_;
}
inline void MPCControllerConf::_internal_set_mass_rl(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_rl_ = value;
}

// optional int32 mass_rr = 7;
inline bool MPCControllerConf::has_mass_rr() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_mass_rr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_rr_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t MPCControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.mass_rr)
  return _internal_mass_rr();
}
inline void MPCControllerConf::set_mass_rr(::int32_t value) {
  _internal_set_mass_rr(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.mass_rr)
}
inline ::int32_t MPCControllerConf::_internal_mass_rr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mass_rr_;
}
inline void MPCControllerConf::_internal_set_mass_rr(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_rr_ = value;
}

// optional double eps = 8;
inline bool MPCControllerConf::has_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_eps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eps_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double MPCControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.eps)
  return _internal_eps();
}
inline void MPCControllerConf::set_eps(double value) {
  _internal_set_eps(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.eps)
}
inline double MPCControllerConf::_internal_eps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eps_;
}
inline void MPCControllerConf::_internal_set_eps(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eps_ = value;
}

// repeated double matrix_q = 9;
inline int MPCControllerConf::_internal_matrix_q_size() const {
  return _internal_matrix_q().size();
}
inline int MPCControllerConf::matrix_q_size() const {
  return _internal_matrix_q_size();
}
inline void MPCControllerConf::clear_matrix_q() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matrix_q_.Clear();
}
inline double MPCControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.matrix_q)
  return _internal_matrix_q().Get(index);
}
inline void MPCControllerConf::set_matrix_q(int index, double value) {
  _internal_mutable_matrix_q()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.matrix_q)
}
inline void MPCControllerConf::add_matrix_q(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_matrix_q()->Add(value);
  // @@protoc_insertion_point(field_add:control.latmpc.MPCControllerConf.matrix_q)
}
inline const ::google::protobuf::RepeatedField<double>& MPCControllerConf::matrix_q() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.latmpc.MPCControllerConf.matrix_q)
  return _internal_matrix_q();
}
inline ::google::protobuf::RepeatedField<double>* MPCControllerConf::mutable_matrix_q()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.latmpc.MPCControllerConf.matrix_q)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_matrix_q();
}
inline const ::google::protobuf::RepeatedField<double>&
MPCControllerConf::_internal_matrix_q() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matrix_q_;
}
inline ::google::protobuf::RepeatedField<double>* MPCControllerConf::_internal_mutable_matrix_q() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.matrix_q_;
}

// repeated double matrix_r = 10;
inline int MPCControllerConf::_internal_matrix_r_size() const {
  return _internal_matrix_r().size();
}
inline int MPCControllerConf::matrix_r_size() const {
  return _internal_matrix_r_size();
}
inline void MPCControllerConf::clear_matrix_r() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matrix_r_.Clear();
}
inline double MPCControllerConf::matrix_r(int index) const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.matrix_r)
  return _internal_matrix_r().Get(index);
}
inline void MPCControllerConf::set_matrix_r(int index, double value) {
  _internal_mutable_matrix_r()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.matrix_r)
}
inline void MPCControllerConf::add_matrix_r(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_matrix_r()->Add(value);
  // @@protoc_insertion_point(field_add:control.latmpc.MPCControllerConf.matrix_r)
}
inline const ::google::protobuf::RepeatedField<double>& MPCControllerConf::matrix_r() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.latmpc.MPCControllerConf.matrix_r)
  return _internal_matrix_r();
}
inline ::google::protobuf::RepeatedField<double>* MPCControllerConf::mutable_matrix_r()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.latmpc.MPCControllerConf.matrix_r)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_matrix_r();
}
inline const ::google::protobuf::RepeatedField<double>&
MPCControllerConf::_internal_matrix_r() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matrix_r_;
}
inline ::google::protobuf::RepeatedField<double>* MPCControllerConf::_internal_mutable_matrix_r() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.matrix_r_;
}

// optional int32 cutoff_freq = 11;
inline bool MPCControllerConf::has_cutoff_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_cutoff_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cutoff_freq_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t MPCControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void MPCControllerConf::set_cutoff_freq(::int32_t value) {
  _internal_set_cutoff_freq(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.cutoff_freq)
}
inline ::int32_t MPCControllerConf::_internal_cutoff_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cutoff_freq_;
}
inline void MPCControllerConf::_internal_set_cutoff_freq(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cutoff_freq_ = value;
}

// optional int32 mean_filter_window_size = 12;
inline bool MPCControllerConf::has_mean_filter_window_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_mean_filter_window_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_filter_window_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t MPCControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void MPCControllerConf::set_mean_filter_window_size(::int32_t value) {
  _internal_set_mean_filter_window_size(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.mean_filter_window_size)
}
inline ::int32_t MPCControllerConf::_internal_mean_filter_window_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mean_filter_window_size_;
}
inline void MPCControllerConf::_internal_set_mean_filter_window_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_filter_window_size_ = value;
}

// optional int32 max_iteration = 13;
inline bool MPCControllerConf::has_max_iteration() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_max_iteration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_iteration_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t MPCControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.max_iteration)
  return _internal_max_iteration();
}
inline void MPCControllerConf::set_max_iteration(::int32_t value) {
  _internal_set_max_iteration(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.max_iteration)
}
inline ::int32_t MPCControllerConf::_internal_max_iteration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_iteration_;
}
inline void MPCControllerConf::_internal_set_max_iteration(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_iteration_ = value;
}

// optional double max_lateral_acceleration = 14;
inline bool MPCControllerConf::has_max_lateral_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_max_lateral_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_lateral_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double MPCControllerConf::max_lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.max_lateral_acceleration)
  return _internal_max_lateral_acceleration();
}
inline void MPCControllerConf::set_max_lateral_acceleration(double value) {
  _internal_set_max_lateral_acceleration(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.max_lateral_acceleration)
}
inline double MPCControllerConf::_internal_max_lateral_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_lateral_acceleration_;
}
inline void MPCControllerConf::_internal_set_max_lateral_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_lateral_acceleration_ = value;
}

// optional double standstill_acceleration = 15;
inline bool MPCControllerConf::has_standstill_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_standstill_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standstill_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double MPCControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.standstill_acceleration)
  return _internal_standstill_acceleration();
}
inline void MPCControllerConf::set_standstill_acceleration(double value) {
  _internal_set_standstill_acceleration(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.standstill_acceleration)
}
inline double MPCControllerConf::_internal_standstill_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.standstill_acceleration_;
}
inline void MPCControllerConf::_internal_set_standstill_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standstill_acceleration_ = value;
}

// optional double brake_minimum_action = 16;
inline bool MPCControllerConf::has_brake_minimum_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_brake_minimum_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_minimum_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double MPCControllerConf::brake_minimum_action() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.brake_minimum_action)
  return _internal_brake_minimum_action();
}
inline void MPCControllerConf::set_brake_minimum_action(double value) {
  _internal_set_brake_minimum_action(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.brake_minimum_action)
}
inline double MPCControllerConf::_internal_brake_minimum_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_minimum_action_;
}
inline void MPCControllerConf::_internal_set_brake_minimum_action(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_minimum_action_ = value;
}

// optional double throttle_minimum_action = 17;
inline bool MPCControllerConf::has_throttle_minimum_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_throttle_minimum_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_minimum_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double MPCControllerConf::throttle_minimum_action() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.throttle_minimum_action)
  return _internal_throttle_minimum_action();
}
inline void MPCControllerConf::set_throttle_minimum_action(double value) {
  _internal_set_throttle_minimum_action(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.throttle_minimum_action)
}
inline double MPCControllerConf::_internal_throttle_minimum_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_minimum_action_;
}
inline void MPCControllerConf::_internal_set_throttle_minimum_action(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_minimum_action_ = value;
}

// optional .control.GainScheduler lat_err_gain_scheduler = 18;
inline bool MPCControllerConf::has_lat_err_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lat_err_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& MPCControllerConf::_internal_lat_err_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.lat_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& MPCControllerConf::lat_err_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.lat_err_gain_scheduler)
  return _internal_lat_err_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_lat_err_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lat_err_gain_scheduler_);
  }
  _impl_.lat_err_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.latmpc.MPCControllerConf.lat_err_gain_scheduler)
}
inline ::control::GainScheduler* MPCControllerConf::release_lat_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::GainScheduler* released = _impl_.lat_err_gain_scheduler_;
  _impl_.lat_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* MPCControllerConf::unsafe_arena_release_lat_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.latmpc.MPCControllerConf.lat_err_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::GainScheduler* temp = _impl_.lat_err_gain_scheduler_;
  _impl_.lat_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* MPCControllerConf::_internal_mutable_lat_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lat_err_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.lat_err_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.lat_err_gain_scheduler_;
}
inline ::control::GainScheduler* MPCControllerConf::mutable_lat_err_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::GainScheduler* _msg = _internal_mutable_lat_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.latmpc.MPCControllerConf.lat_err_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_lat_err_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lat_err_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.lat_err_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.latmpc.MPCControllerConf.lat_err_gain_scheduler)
}

// optional .control.GainScheduler heading_err_gain_scheduler = 19;
inline bool MPCControllerConf::has_heading_err_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heading_err_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& MPCControllerConf::_internal_heading_err_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.heading_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& MPCControllerConf::heading_err_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.heading_err_gain_scheduler)
  return _internal_heading_err_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_heading_err_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.heading_err_gain_scheduler_);
  }
  _impl_.heading_err_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.latmpc.MPCControllerConf.heading_err_gain_scheduler)
}
inline ::control::GainScheduler* MPCControllerConf::release_heading_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::GainScheduler* released = _impl_.heading_err_gain_scheduler_;
  _impl_.heading_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* MPCControllerConf::unsafe_arena_release_heading_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.latmpc.MPCControllerConf.heading_err_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::GainScheduler* temp = _impl_.heading_err_gain_scheduler_;
  _impl_.heading_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* MPCControllerConf::_internal_mutable_heading_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.heading_err_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.heading_err_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.heading_err_gain_scheduler_;
}
inline ::control::GainScheduler* MPCControllerConf::mutable_heading_err_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::GainScheduler* _msg = _internal_mutable_heading_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.latmpc.MPCControllerConf.heading_err_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_heading_err_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.heading_err_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.heading_err_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.latmpc.MPCControllerConf.heading_err_gain_scheduler)
}

// optional .control.GainScheduler steer_weight_gain_scheduler = 20;
inline bool MPCControllerConf::has_steer_weight_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steer_weight_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& MPCControllerConf::_internal_steer_weight_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.steer_weight_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& MPCControllerConf::steer_weight_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.steer_weight_gain_scheduler)
  return _internal_steer_weight_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_steer_weight_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.steer_weight_gain_scheduler_);
  }
  _impl_.steer_weight_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.latmpc.MPCControllerConf.steer_weight_gain_scheduler)
}
inline ::control::GainScheduler* MPCControllerConf::release_steer_weight_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::GainScheduler* released = _impl_.steer_weight_gain_scheduler_;
  _impl_.steer_weight_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* MPCControllerConf::unsafe_arena_release_steer_weight_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.latmpc.MPCControllerConf.steer_weight_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::GainScheduler* temp = _impl_.steer_weight_gain_scheduler_;
  _impl_.steer_weight_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* MPCControllerConf::_internal_mutable_steer_weight_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steer_weight_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.steer_weight_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.steer_weight_gain_scheduler_;
}
inline ::control::GainScheduler* MPCControllerConf::mutable_steer_weight_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::GainScheduler* _msg = _internal_mutable_steer_weight_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.latmpc.MPCControllerConf.steer_weight_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_steer_weight_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.steer_weight_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.steer_weight_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.latmpc.MPCControllerConf.steer_weight_gain_scheduler)
}

// optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
inline bool MPCControllerConf::has_feedforwardterm_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.feedforwardterm_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& MPCControllerConf::_internal_feedforwardterm_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.feedforwardterm_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& MPCControllerConf::feedforwardterm_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.feedforwardterm_gain_scheduler)
  return _internal_feedforwardterm_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_feedforwardterm_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.feedforwardterm_gain_scheduler_);
  }
  _impl_.feedforwardterm_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.latmpc.MPCControllerConf.feedforwardterm_gain_scheduler)
}
inline ::control::GainScheduler* MPCControllerConf::release_feedforwardterm_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::GainScheduler* released = _impl_.feedforwardterm_gain_scheduler_;
  _impl_.feedforwardterm_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* MPCControllerConf::unsafe_arena_release_feedforwardterm_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.latmpc.MPCControllerConf.feedforwardterm_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::GainScheduler* temp = _impl_.feedforwardterm_gain_scheduler_;
  _impl_.feedforwardterm_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* MPCControllerConf::_internal_mutable_feedforwardterm_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.feedforwardterm_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.feedforwardterm_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.feedforwardterm_gain_scheduler_;
}
inline ::control::GainScheduler* MPCControllerConf::mutable_feedforwardterm_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::GainScheduler* _msg = _internal_mutable_feedforwardterm_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.latmpc.MPCControllerConf.feedforwardterm_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_feedforwardterm_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.feedforwardterm_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.feedforwardterm_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.latmpc.MPCControllerConf.feedforwardterm_gain_scheduler)
}

// optional bool enable_mpc_feedforward_compensation = 23 [default = false];
inline bool MPCControllerConf::has_enable_mpc_feedforward_compensation() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_enable_mpc_feedforward_compensation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mpc_feedforward_compensation_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool MPCControllerConf::enable_mpc_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.enable_mpc_feedforward_compensation)
  return _internal_enable_mpc_feedforward_compensation();
}
inline void MPCControllerConf::set_enable_mpc_feedforward_compensation(bool value) {
  _internal_set_enable_mpc_feedforward_compensation(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.enable_mpc_feedforward_compensation)
}
inline bool MPCControllerConf::_internal_enable_mpc_feedforward_compensation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_mpc_feedforward_compensation_;
}
inline void MPCControllerConf::_internal_set_enable_mpc_feedforward_compensation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mpc_feedforward_compensation_ = value;
}

// optional double unconstrained_control_diff_limit = 24;
inline bool MPCControllerConf::has_unconstrained_control_diff_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_unconstrained_control_diff_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unconstrained_control_diff_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double MPCControllerConf::unconstrained_control_diff_limit() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.unconstrained_control_diff_limit)
  return _internal_unconstrained_control_diff_limit();
}
inline void MPCControllerConf::set_unconstrained_control_diff_limit(double value) {
  _internal_set_unconstrained_control_diff_limit(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.unconstrained_control_diff_limit)
}
inline double MPCControllerConf::_internal_unconstrained_control_diff_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unconstrained_control_diff_limit_;
}
inline void MPCControllerConf::_internal_set_unconstrained_control_diff_limit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unconstrained_control_diff_limit_ = value;
}

// optional bool use_lqr_curvature_feedforward = 25;
inline bool MPCControllerConf::has_use_lqr_curvature_feedforward() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_use_lqr_curvature_feedforward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_lqr_curvature_feedforward_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool MPCControllerConf::use_lqr_curvature_feedforward() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.use_lqr_curvature_feedforward)
  return _internal_use_lqr_curvature_feedforward();
}
inline void MPCControllerConf::set_use_lqr_curvature_feedforward(bool value) {
  _internal_set_use_lqr_curvature_feedforward(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.use_lqr_curvature_feedforward)
}
inline bool MPCControllerConf::_internal_use_lqr_curvature_feedforward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_lqr_curvature_feedforward_;
}
inline void MPCControllerConf::_internal_set_use_lqr_curvature_feedforward(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_lqr_curvature_feedforward_ = value;
}

// optional bool use_preview = 26;
inline bool MPCControllerConf::has_use_preview() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_use_preview() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_preview_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool MPCControllerConf::use_preview() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.use_preview)
  return _internal_use_preview();
}
inline void MPCControllerConf::set_use_preview(bool value) {
  _internal_set_use_preview(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.use_preview)
}
inline bool MPCControllerConf::_internal_use_preview() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_preview_;
}
inline void MPCControllerConf::_internal_set_use_preview(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_preview_ = value;
}

// optional .control.PidConf acc_lookup_pid_conf = 27;
inline bool MPCControllerConf::has_acc_lookup_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acc_lookup_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& MPCControllerConf::_internal_acc_lookup_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.acc_lookup_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& MPCControllerConf::acc_lookup_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.acc_lookup_pid_conf)
  return _internal_acc_lookup_pid_conf();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_acc_lookup_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.acc_lookup_pid_conf_);
  }
  _impl_.acc_lookup_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.latmpc.MPCControllerConf.acc_lookup_pid_conf)
}
inline ::control::PidConf* MPCControllerConf::release_acc_lookup_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::PidConf* released = _impl_.acc_lookup_pid_conf_;
  _impl_.acc_lookup_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* MPCControllerConf::unsafe_arena_release_acc_lookup_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.latmpc.MPCControllerConf.acc_lookup_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::PidConf* temp = _impl_.acc_lookup_pid_conf_;
  _impl_.acc_lookup_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* MPCControllerConf::_internal_mutable_acc_lookup_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.acc_lookup_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.acc_lookup_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.acc_lookup_pid_conf_;
}
inline ::control::PidConf* MPCControllerConf::mutable_acc_lookup_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::PidConf* _msg = _internal_mutable_acc_lookup_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.latmpc.MPCControllerConf.acc_lookup_pid_conf)
  return _msg;
}
inline void MPCControllerConf::set_allocated_acc_lookup_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.acc_lookup_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.acc_lookup_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.latmpc.MPCControllerConf.acc_lookup_pid_conf)
}

// optional bool use_lookup_acc_pid = 28;
inline bool MPCControllerConf::has_use_lookup_acc_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_use_lookup_acc_pid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_lookup_acc_pid_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool MPCControllerConf::use_lookup_acc_pid() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.use_lookup_acc_pid)
  return _internal_use_lookup_acc_pid();
}
inline void MPCControllerConf::set_use_lookup_acc_pid(bool value) {
  _internal_set_use_lookup_acc_pid(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.use_lookup_acc_pid)
}
inline bool MPCControllerConf::_internal_use_lookup_acc_pid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_lookup_acc_pid_;
}
inline void MPCControllerConf::_internal_set_use_lookup_acc_pid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_lookup_acc_pid_ = value;
}

// optional bool use_pitch_angle_filter = 29;
inline bool MPCControllerConf::has_use_pitch_angle_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_use_pitch_angle_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_pitch_angle_filter_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool MPCControllerConf::use_pitch_angle_filter() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.use_pitch_angle_filter)
  return _internal_use_pitch_angle_filter();
}
inline void MPCControllerConf::set_use_pitch_angle_filter(bool value) {
  _internal_set_use_pitch_angle_filter(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.use_pitch_angle_filter)
}
inline bool MPCControllerConf::_internal_use_pitch_angle_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_pitch_angle_filter_;
}
inline void MPCControllerConf::_internal_set_use_pitch_angle_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_pitch_angle_filter_ = value;
}

// optional bool enable_look_ahead_back_control = 30 [default = false];
inline bool MPCControllerConf::has_enable_look_ahead_back_control() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_enable_look_ahead_back_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_look_ahead_back_control_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool MPCControllerConf::enable_look_ahead_back_control() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.enable_look_ahead_back_control)
  return _internal_enable_look_ahead_back_control();
}
inline void MPCControllerConf::set_enable_look_ahead_back_control(bool value) {
  _internal_set_enable_look_ahead_back_control(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.enable_look_ahead_back_control)
}
inline bool MPCControllerConf::_internal_enable_look_ahead_back_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_look_ahead_back_control_;
}
inline void MPCControllerConf::_internal_set_enable_look_ahead_back_control(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_look_ahead_back_control_ = value;
}

// optional double switch_speed = 31;
inline bool MPCControllerConf::has_switch_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_switch_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double MPCControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.switch_speed)
  return _internal_switch_speed();
}
inline void MPCControllerConf::set_switch_speed(double value) {
  _internal_set_switch_speed(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.switch_speed)
}
inline double MPCControllerConf::_internal_switch_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.switch_speed_;
}
inline void MPCControllerConf::_internal_set_switch_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_ = value;
}

// optional .control.LeadlagConf reverse_leadlag_conf = 32;
inline bool MPCControllerConf::has_reverse_leadlag_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reverse_leadlag_conf_ != nullptr);
  return value;
}
inline const ::control::LeadlagConf& MPCControllerConf::_internal_reverse_leadlag_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::LeadlagConf* p = _impl_.reverse_leadlag_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::LeadlagConf&>(::control::_LeadlagConf_default_instance_);
}
inline const ::control::LeadlagConf& MPCControllerConf::reverse_leadlag_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.reverse_leadlag_conf)
  return _internal_reverse_leadlag_conf();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_reverse_leadlag_conf(::control::LeadlagConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_leadlag_conf_);
  }
  _impl_.reverse_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.latmpc.MPCControllerConf.reverse_leadlag_conf)
}
inline ::control::LeadlagConf* MPCControllerConf::release_reverse_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::LeadlagConf* released = _impl_.reverse_leadlag_conf_;
  _impl_.reverse_leadlag_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::LeadlagConf* MPCControllerConf::unsafe_arena_release_reverse_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.latmpc.MPCControllerConf.reverse_leadlag_conf)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::LeadlagConf* temp = _impl_.reverse_leadlag_conf_;
  _impl_.reverse_leadlag_conf_ = nullptr;
  return temp;
}
inline ::control::LeadlagConf* MPCControllerConf::_internal_mutable_reverse_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_leadlag_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::LeadlagConf>(GetArena());
    _impl_.reverse_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(p);
  }
  return _impl_.reverse_leadlag_conf_;
}
inline ::control::LeadlagConf* MPCControllerConf::mutable_reverse_leadlag_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::control::LeadlagConf* _msg = _internal_mutable_reverse_leadlag_conf();
  // @@protoc_insertion_point(field_mutable:control.latmpc.MPCControllerConf.reverse_leadlag_conf)
  return _msg;
}
inline void MPCControllerConf::set_allocated_reverse_leadlag_conf(::control::LeadlagConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_leadlag_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.reverse_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.latmpc.MPCControllerConf.reverse_leadlag_conf)
}

// optional double switch_speed_window = 33 [default = 0];
inline bool MPCControllerConf::has_switch_speed_window() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_switch_speed_window() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_window_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double MPCControllerConf::switch_speed_window() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.switch_speed_window)
  return _internal_switch_speed_window();
}
inline void MPCControllerConf::set_switch_speed_window(double value) {
  _internal_set_switch_speed_window(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.switch_speed_window)
}
inline double MPCControllerConf::_internal_switch_speed_window() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.switch_speed_window_;
}
inline void MPCControllerConf::_internal_set_switch_speed_window(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_window_ = value;
}

// optional int32 preview_window = 34;
inline bool MPCControllerConf::has_preview_window() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void MPCControllerConf::clear_preview_window() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_window_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::int32_t MPCControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.preview_window)
  return _internal_preview_window();
}
inline void MPCControllerConf::set_preview_window(::int32_t value) {
  _internal_set_preview_window(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.preview_window)
}
inline ::int32_t MPCControllerConf::_internal_preview_window() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_window_;
}
inline void MPCControllerConf::_internal_set_preview_window(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_window_ = value;
}

// optional double lookahead_station = 35 [default = 0];
inline bool MPCControllerConf::has_lookahead_station() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void MPCControllerConf::clear_lookahead_station() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookahead_station_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline double MPCControllerConf::lookahead_station() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.lookahead_station)
  return _internal_lookahead_station();
}
inline void MPCControllerConf::set_lookahead_station(double value) {
  _internal_set_lookahead_station(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.lookahead_station)
}
inline double MPCControllerConf::_internal_lookahead_station() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lookahead_station_;
}
inline void MPCControllerConf::_internal_set_lookahead_station(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookahead_station_ = value;
}

// optional double lookback_station = 36 [default = 0];
inline bool MPCControllerConf::has_lookback_station() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void MPCControllerConf::clear_lookback_station() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookback_station_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline double MPCControllerConf::lookback_station() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.lookback_station)
  return _internal_lookback_station();
}
inline void MPCControllerConf::set_lookback_station(double value) {
  _internal_set_lookback_station(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.lookback_station)
}
inline double MPCControllerConf::_internal_lookback_station() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lookback_station_;
}
inline void MPCControllerConf::_internal_set_lookback_station(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookback_station_ = value;
}

// optional double lookahead_station_high_speed = 37 [default = 0];
inline bool MPCControllerConf::has_lookahead_station_high_speed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void MPCControllerConf::clear_lookahead_station_high_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookahead_station_high_speed_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline double MPCControllerConf::lookahead_station_high_speed() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.lookahead_station_high_speed)
  return _internal_lookahead_station_high_speed();
}
inline void MPCControllerConf::set_lookahead_station_high_speed(double value) {
  _internal_set_lookahead_station_high_speed(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.lookahead_station_high_speed)
}
inline double MPCControllerConf::_internal_lookahead_station_high_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lookahead_station_high_speed_;
}
inline void MPCControllerConf::_internal_set_lookahead_station_high_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookahead_station_high_speed_ = value;
}

// optional double lookback_station_high_speed = 38 [default = 0];
inline bool MPCControllerConf::has_lookback_station_high_speed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void MPCControllerConf::clear_lookback_station_high_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookback_station_high_speed_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline double MPCControllerConf::lookback_station_high_speed() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.lookback_station_high_speed)
  return _internal_lookback_station_high_speed();
}
inline void MPCControllerConf::set_lookback_station_high_speed(double value) {
  _internal_set_lookback_station_high_speed(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.lookback_station_high_speed)
}
inline double MPCControllerConf::_internal_lookback_station_high_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lookback_station_high_speed_;
}
inline void MPCControllerConf::_internal_set_lookback_station_high_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lookback_station_high_speed_ = value;
}

// optional bool enable_reverse_leadlag_compensation = 39 [default = false];
inline bool MPCControllerConf::has_enable_reverse_leadlag_compensation() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void MPCControllerConf::clear_enable_reverse_leadlag_compensation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_reverse_leadlag_compensation_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool MPCControllerConf::enable_reverse_leadlag_compensation() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.enable_reverse_leadlag_compensation)
  return _internal_enable_reverse_leadlag_compensation();
}
inline void MPCControllerConf::set_enable_reverse_leadlag_compensation(bool value) {
  _internal_set_enable_reverse_leadlag_compensation(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.enable_reverse_leadlag_compensation)
}
inline bool MPCControllerConf::_internal_enable_reverse_leadlag_compensation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_reverse_leadlag_compensation_;
}
inline void MPCControllerConf::_internal_set_enable_reverse_leadlag_compensation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_reverse_leadlag_compensation_ = value;
}

// optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
inline bool MPCControllerConf::has_pitch_angle_filter_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pitch_angle_filter_conf_ != nullptr);
  return value;
}
inline void MPCControllerConf::clear_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pitch_angle_filter_conf_ != nullptr) _impl_.pitch_angle_filter_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::control::latmpc::FilterConf& MPCControllerConf::_internal_pitch_angle_filter_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::latmpc::FilterConf* p = _impl_.pitch_angle_filter_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::latmpc::FilterConf&>(::control::latmpc::_FilterConf_default_instance_);
}
inline const ::control::latmpc::FilterConf& MPCControllerConf::pitch_angle_filter_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.pitch_angle_filter_conf)
  return _internal_pitch_angle_filter_conf();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_pitch_angle_filter_conf(::control::latmpc::FilterConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pitch_angle_filter_conf_);
  }
  _impl_.pitch_angle_filter_conf_ = reinterpret_cast<::control::latmpc::FilterConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.latmpc.MPCControllerConf.pitch_angle_filter_conf)
}
inline ::control::latmpc::FilterConf* MPCControllerConf::release_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::latmpc::FilterConf* released = _impl_.pitch_angle_filter_conf_;
  _impl_.pitch_angle_filter_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::latmpc::FilterConf* MPCControllerConf::unsafe_arena_release_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.latmpc.MPCControllerConf.pitch_angle_filter_conf)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::latmpc::FilterConf* temp = _impl_.pitch_angle_filter_conf_;
  _impl_.pitch_angle_filter_conf_ = nullptr;
  return temp;
}
inline ::control::latmpc::FilterConf* MPCControllerConf::_internal_mutable_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pitch_angle_filter_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::latmpc::FilterConf>(GetArena());
    _impl_.pitch_angle_filter_conf_ = reinterpret_cast<::control::latmpc::FilterConf*>(p);
  }
  return _impl_.pitch_angle_filter_conf_;
}
inline ::control::latmpc::FilterConf* MPCControllerConf::mutable_pitch_angle_filter_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::control::latmpc::FilterConf* _msg = _internal_mutable_pitch_angle_filter_conf();
  // @@protoc_insertion_point(field_mutable:control.latmpc.MPCControllerConf.pitch_angle_filter_conf)
  return _msg;
}
inline void MPCControllerConf::set_allocated_pitch_angle_filter_conf(::control::latmpc::FilterConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pitch_angle_filter_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.pitch_angle_filter_conf_ = reinterpret_cast<::control::latmpc::FilterConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.latmpc.MPCControllerConf.pitch_angle_filter_conf)
}

// optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
inline bool MPCControllerConf::has_enable_feedback_augment_on_high_speed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void MPCControllerConf::clear_enable_feedback_augment_on_high_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_feedback_augment_on_high_speed_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool MPCControllerConf::enable_feedback_augment_on_high_speed() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.enable_feedback_augment_on_high_speed)
  return _internal_enable_feedback_augment_on_high_speed();
}
inline void MPCControllerConf::set_enable_feedback_augment_on_high_speed(bool value) {
  _internal_set_enable_feedback_augment_on_high_speed(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.enable_feedback_augment_on_high_speed)
}
inline bool MPCControllerConf::_internal_enable_feedback_augment_on_high_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_feedback_augment_on_high_speed_;
}
inline void MPCControllerConf::_internal_set_enable_feedback_augment_on_high_speed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_feedback_augment_on_high_speed_ = value;
}

// optional bool trajectory_transform_to_com_reverse = 42 [default = false];
inline bool MPCControllerConf::has_trajectory_transform_to_com_reverse() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void MPCControllerConf::clear_trajectory_transform_to_com_reverse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trajectory_transform_to_com_reverse_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool MPCControllerConf::trajectory_transform_to_com_reverse() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.trajectory_transform_to_com_reverse)
  return _internal_trajectory_transform_to_com_reverse();
}
inline void MPCControllerConf::set_trajectory_transform_to_com_reverse(bool value) {
  _internal_set_trajectory_transform_to_com_reverse(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.trajectory_transform_to_com_reverse)
}
inline bool MPCControllerConf::_internal_trajectory_transform_to_com_reverse() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trajectory_transform_to_com_reverse_;
}
inline void MPCControllerConf::_internal_set_trajectory_transform_to_com_reverse(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trajectory_transform_to_com_reverse_ = value;
}

// optional bool trajectory_transform_to_com_drive = 43 [default = false];
inline bool MPCControllerConf::has_trajectory_transform_to_com_drive() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void MPCControllerConf::clear_trajectory_transform_to_com_drive() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trajectory_transform_to_com_drive_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool MPCControllerConf::trajectory_transform_to_com_drive() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.trajectory_transform_to_com_drive)
  return _internal_trajectory_transform_to_com_drive();
}
inline void MPCControllerConf::set_trajectory_transform_to_com_drive(bool value) {
  _internal_set_trajectory_transform_to_com_drive(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.trajectory_transform_to_com_drive)
}
inline bool MPCControllerConf::_internal_trajectory_transform_to_com_drive() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trajectory_transform_to_com_drive_;
}
inline void MPCControllerConf::_internal_set_trajectory_transform_to_com_drive(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trajectory_transform_to_com_drive_ = value;
}

// optional bool enable_slope_offset = 44 [default = false];
inline bool MPCControllerConf::has_enable_slope_offset() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void MPCControllerConf::clear_enable_slope_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_slope_offset_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool MPCControllerConf::enable_slope_offset() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.enable_slope_offset)
  return _internal_enable_slope_offset();
}
inline void MPCControllerConf::set_enable_slope_offset(bool value) {
  _internal_set_enable_slope_offset(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.enable_slope_offset)
}
inline bool MPCControllerConf::_internal_enable_slope_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_slope_offset_;
}
inline void MPCControllerConf::_internal_set_enable_slope_offset(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_slope_offset_ = value;
}

// optional bool use_preview_reference_check = 45 [default = false];
inline bool MPCControllerConf::has_use_preview_reference_check() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void MPCControllerConf::clear_use_preview_reference_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_preview_reference_check_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool MPCControllerConf::use_preview_reference_check() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.use_preview_reference_check)
  return _internal_use_preview_reference_check();
}
inline void MPCControllerConf::set_use_preview_reference_check(bool value) {
  _internal_set_use_preview_reference_check(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.use_preview_reference_check)
}
inline bool MPCControllerConf::_internal_use_preview_reference_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_preview_reference_check_;
}
inline void MPCControllerConf::_internal_set_use_preview_reference_check(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_preview_reference_check_ = value;
}

// optional bool use_kinematic_model = 46;
inline bool MPCControllerConf::has_use_kinematic_model() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void MPCControllerConf::clear_use_kinematic_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_kinematic_model_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool MPCControllerConf::use_kinematic_model() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.use_kinematic_model)
  return _internal_use_kinematic_model();
}
inline void MPCControllerConf::set_use_kinematic_model(bool value) {
  _internal_set_use_kinematic_model(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.use_kinematic_model)
}
inline bool MPCControllerConf::_internal_use_kinematic_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_kinematic_model_;
}
inline void MPCControllerConf::_internal_set_use_kinematic_model(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_kinematic_model_ = value;
}

// optional bool enable_navigation_mode_error_filter = 47 [default = false];
inline bool MPCControllerConf::has_enable_navigation_mode_error_filter() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void MPCControllerConf::clear_enable_navigation_mode_error_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_navigation_mode_error_filter_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool MPCControllerConf::enable_navigation_mode_error_filter() const {
  // @@protoc_insertion_point(field_get:control.latmpc.MPCControllerConf.enable_navigation_mode_error_filter)
  return _internal_enable_navigation_mode_error_filter();
}
inline void MPCControllerConf::set_enable_navigation_mode_error_filter(bool value) {
  _internal_set_enable_navigation_mode_error_filter(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.latmpc.MPCControllerConf.enable_navigation_mode_error_filter)
}
inline bool MPCControllerConf::_internal_enable_navigation_mode_error_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_navigation_mode_error_filter_;
}
inline void MPCControllerConf::_internal_set_enable_navigation_mode_error_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_navigation_mode_error_filter_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace latmpc
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmpc_5fcontroller_2eproto_2epb_2eh

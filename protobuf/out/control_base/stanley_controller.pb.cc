// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/stanley_controller.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/stanley_controller.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {

inline constexpr StanleyControllerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        enable_lat_error_filter_{false},
        enable_heading_error_filter_{false},
        query_time_nearest_point_only_{false},
        mean_filter_window_size_{5},
        k_y_{0.3f},
        query_relative_time_{0.8},
        base_preview_dis_{3},
        base_preview_time_{2} {}

template <typename>
PROTOBUF_CONSTEXPR StanleyControllerConfig::StanleyControllerConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StanleyControllerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StanleyControllerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StanleyControllerConfigDefaultTypeInternal() {}
  union {
    StanleyControllerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StanleyControllerConfigDefaultTypeInternal _StanleyControllerConfig_default_instance_;
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.enable_lat_error_filter_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.enable_heading_error_filter_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.mean_filter_window_size_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.query_time_nearest_point_only_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.query_relative_time_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.k_y_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.base_preview_dis_),
        PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _impl_.base_preview_time_),
        0,
        1,
        3,
        2,
        5,
        4,
        6,
        7,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 16, -1, sizeof(::control::StanleyControllerConfig)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::_StanleyControllerConfig_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2fstanley_5fcontroller_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n%control_base/stanley_controller.proto\022"
    "\007control\"\256\002\n\027StanleyControllerConfig\022&\n\027"
    "enable_lat_error_filter\030\001 \001(\010:\005false\022*\n\033"
    "enable_heading_error_filter\030\002 \001(\010:\005false"
    "\022\"\n\027mean_filter_window_size\030\003 \001(\005:\0015\022,\n\035"
    "query_time_nearest_point_only\030\004 \001(\010:\005fal"
    "se\022 \n\023query_relative_time\030\005 \001(\001:\0030.8\022\020\n\003"
    "k_y\030\006 \001(\002:\0030.3\022\033\n\020base_preview_dis\030\007 \001(\002"
    ":\0013\022\034\n\021base_preview_time\030\010 \001(\002:\0012"
};
static ::absl::once_flag descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto = {
    false,
    false,
    353,
    descriptor_table_protodef_control_5fbase_2fstanley_5fcontroller_2eproto,
    "control_base/stanley_controller.proto",
    &descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto,
    file_level_service_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto,
};
namespace control {
// ===================================================================

class StanleyControllerConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StanleyControllerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_._has_bits_);
};

StanleyControllerConfig::StanleyControllerConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.StanleyControllerConfig)
}
StanleyControllerConfig::StanleyControllerConfig(
    ::google::protobuf::Arena* arena, const StanleyControllerConfig& from)
    : StanleyControllerConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StanleyControllerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mean_filter_window_size_{5},
        k_y_{0.3f},
        query_relative_time_{0.8},
        base_preview_dis_{3},
        base_preview_time_{2} {}

inline void StanleyControllerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_lat_error_filter_),
           0,
           offsetof(Impl_, query_time_nearest_point_only_) -
               offsetof(Impl_, enable_lat_error_filter_) +
               sizeof(Impl_::query_time_nearest_point_only_));
}
StanleyControllerConfig::~StanleyControllerConfig() {
  // @@protoc_insertion_point(destructor:control.StanleyControllerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StanleyControllerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    StanleyControllerConfig::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &StanleyControllerConfig::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<StanleyControllerConfig>(),
            ::google::protobuf::Message::GetNewImpl<StanleyControllerConfig>(),
            ::google::protobuf::Message::GetClearImpl<StanleyControllerConfig>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<StanleyControllerConfig>(),
                ::google::protobuf::Message::GetSerializeImpl<StanleyControllerConfig>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_._cached_size_),
            false,
        },
        &StanleyControllerConfig::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* StanleyControllerConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> StanleyControllerConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StanleyControllerConfig_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::StanleyControllerConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float base_preview_time = 8 [default = 2];
    {::_pbi::TcParser::FastF32S1,
     {69, 7, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.base_preview_time_)}},
    // optional bool enable_lat_error_filter = 1 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StanleyControllerConfig, _impl_.enable_lat_error_filter_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.enable_lat_error_filter_)}},
    // optional bool enable_heading_error_filter = 2 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StanleyControllerConfig, _impl_.enable_heading_error_filter_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.enable_heading_error_filter_)}},
    // optional int32 mean_filter_window_size = 3 [default = 5];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StanleyControllerConfig, _impl_.mean_filter_window_size_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.mean_filter_window_size_)}},
    // optional bool query_time_nearest_point_only = 4 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StanleyControllerConfig, _impl_.query_time_nearest_point_only_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.query_time_nearest_point_only_)}},
    // optional double query_relative_time = 5 [default = 0.8];
    {::_pbi::TcParser::FastF64S1,
     {41, 5, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.query_relative_time_)}},
    // optional float k_y = 6 [default = 0.3];
    {::_pbi::TcParser::FastF32S1,
     {53, 4, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.k_y_)}},
    // optional float base_preview_dis = 7 [default = 3];
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.base_preview_dis_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable_lat_error_filter = 1 [default = false];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.enable_lat_error_filter_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_heading_error_filter = 2 [default = false];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.enable_heading_error_filter_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 mean_filter_window_size = 3 [default = 5];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.mean_filter_window_size_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool query_time_nearest_point_only = 4 [default = false];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.query_time_nearest_point_only_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double query_relative_time = 5 [default = 0.8];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.query_relative_time_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional float k_y = 6 [default = 0.3];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.k_y_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float base_preview_dis = 7 [default = 3];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.base_preview_dis_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float base_preview_time = 8 [default = 2];
    {PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.base_preview_time_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StanleyControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.StanleyControllerConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.enable_lat_error_filter_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.query_time_nearest_point_only_) -
      reinterpret_cast<char*>(&_impl_.enable_lat_error_filter_)) + sizeof(_impl_.query_time_nearest_point_only_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    _impl_.mean_filter_window_size_ = 5;
    _impl_.k_y_ = 0.3f;
    _impl_.query_relative_time_ = 0.8;
    _impl_.base_preview_dis_ = 3;
    _impl_.base_preview_time_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* StanleyControllerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.StanleyControllerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable_lat_error_filter = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable_lat_error_filter(), target);
  }

  // optional bool enable_heading_error_filter = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enable_heading_error_filter(), target);
  }

  // optional int32 mean_filter_window_size = 3 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_mean_filter_window_size(), target);
  }

  // optional bool query_time_nearest_point_only = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_query_time_nearest_point_only(), target);
  }

  // optional double query_relative_time = 5 [default = 0.8];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_query_relative_time(), target);
  }

  // optional float k_y = 6 [default = 0.3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_k_y(), target);
  }

  // optional float base_preview_dis = 7 [default = 3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_base_preview_dis(), target);
  }

  // optional float base_preview_time = 8 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_base_preview_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.StanleyControllerConfig)
  return target;
}

::size_t StanleyControllerConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.StanleyControllerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_lat_error_filter = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }
    // optional bool enable_heading_error_filter = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }
    // optional bool query_time_nearest_point_only = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }
    // optional int32 mean_filter_window_size = 3 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mean_filter_window_size());
    }
    // optional float k_y = 6 [default = 0.3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }
    // optional double query_relative_time = 5 [default = 0.8];
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional float base_preview_dis = 7 [default = 3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }
    // optional float base_preview_time = 8 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void StanleyControllerConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StanleyControllerConfig*>(&to_msg);
  auto& from = static_cast<const StanleyControllerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.StanleyControllerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.enable_lat_error_filter_ = from._impl_.enable_lat_error_filter_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.enable_heading_error_filter_ = from._impl_.enable_heading_error_filter_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.query_time_nearest_point_only_ = from._impl_.query_time_nearest_point_only_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mean_filter_window_size_ = from._impl_.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.k_y_ = from._impl_.k_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.query_relative_time_ = from._impl_.query_relative_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_preview_dis_ = from._impl_.base_preview_dis_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.base_preview_time_ = from._impl_.base_preview_time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StanleyControllerConfig::CopyFrom(const StanleyControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.StanleyControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StanleyControllerConfig::InternalSwap(StanleyControllerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.base_preview_time_)
      + sizeof(StanleyControllerConfig::_impl_.base_preview_time_)
      - PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, _impl_.enable_lat_error_filter_)>(
          reinterpret_cast<char*>(&_impl_.enable_lat_error_filter_),
          reinterpret_cast<char*>(&other->_impl_.enable_lat_error_filter_));
}

::google::protobuf::Metadata StanleyControllerConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/multipoint_preview_pp.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
namespace control {
class IntegrationParameters;
struct IntegrationParametersDefaultTypeInternal;
extern IntegrationParametersDefaultTypeInternal _IntegrationParameters_default_instance_;
class MultipointPreviewPPConfig;
struct MultipointPreviewPPConfigDefaultTypeInternal;
extern MultipointPreviewPPConfigDefaultTypeInternal _MultipointPreviewPPConfig_default_instance_;
class PIDParameters;
struct PIDParametersDefaultTypeInternal;
extern PIDParametersDefaultTypeInternal _PIDParameters_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {

// ===================================================================


// -------------------------------------------------------------------

class PIDParameters final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.PIDParameters) */ {
 public:
  inline PIDParameters() : PIDParameters(nullptr) {}
  ~PIDParameters() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PIDParameters(
      ::google::protobuf::internal::ConstantInitialized);

  inline PIDParameters(const PIDParameters& from) : PIDParameters(nullptr, from) {}
  inline PIDParameters(PIDParameters&& from) noexcept
      : PIDParameters(nullptr, std::move(from)) {}
  inline PIDParameters& operator=(const PIDParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline PIDParameters& operator=(PIDParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PIDParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const PIDParameters* internal_default_instance() {
    return reinterpret_cast<const PIDParameters*>(
        &_PIDParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PIDParameters& a, PIDParameters& b) { a.Swap(&b); }
  inline void Swap(PIDParameters* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PIDParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PIDParameters* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<PIDParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PIDParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PIDParameters& from) { PIDParameters::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PIDParameters* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.PIDParameters"; }

 protected:
  explicit PIDParameters(::google::protobuf::Arena* arena);
  PIDParameters(::google::protobuf::Arena* arena, const PIDParameters& from);
  PIDParameters(::google::protobuf::Arena* arena, PIDParameters&& from) noexcept
      : PIDParameters(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnableAdjustKpFieldNumber = 7,
    kLargerKpThresholdFieldNumber = 10,
    kEnablePidFieldNumber = 1,
    kKpFieldNumber = 2,
    kKiFieldNumber = 3,
    kKdFieldNumber = 4,
    kKpCoefFullLaodFieldNumber = 5,
    kSmallerKdFieldNumber = 6,
    kKpCoefFieldNumber = 8,
    kMaxKpThresholdFieldNumber = 9,
  };
  // optional bool enable_adjust_kp = 7 [default = false];
  bool has_enable_adjust_kp() const;
  void clear_enable_adjust_kp() ;
  bool enable_adjust_kp() const;
  void set_enable_adjust_kp(bool value);

  private:
  bool _internal_enable_adjust_kp() const;
  void _internal_set_enable_adjust_kp(bool value);

  public:
  // optional float larger_kp_threshold = 10 [default = 0.06];
  bool has_larger_kp_threshold() const;
  void clear_larger_kp_threshold() ;
  float larger_kp_threshold() const;
  void set_larger_kp_threshold(float value);

  private:
  float _internal_larger_kp_threshold() const;
  void _internal_set_larger_kp_threshold(float value);

  public:
  // optional bool enable_pid = 1 [default = true];
  bool has_enable_pid() const;
  void clear_enable_pid() ;
  bool enable_pid() const;
  void set_enable_pid(bool value);

  private:
  bool _internal_enable_pid() const;
  void _internal_set_enable_pid(bool value);

  public:
  // optional float kp = 2 [default = 1];
  bool has_kp() const;
  void clear_kp() ;
  float kp() const;
  void set_kp(float value);

  private:
  float _internal_kp() const;
  void _internal_set_kp(float value);

  public:
  // optional float ki = 3 [default = 2];
  bool has_ki() const;
  void clear_ki() ;
  float ki() const;
  void set_ki(float value);

  private:
  float _internal_ki() const;
  void _internal_set_ki(float value);

  public:
  // optional float kd = 4 [default = 0.6];
  bool has_kd() const;
  void clear_kd() ;
  float kd() const;
  void set_kd(float value);

  private:
  float _internal_kd() const;
  void _internal_set_kd(float value);

  public:
  // optional float kp_coef_full_laod = 5 [default = 1];
  bool has_kp_coef_full_laod() const;
  void clear_kp_coef_full_laod() ;
  float kp_coef_full_laod() const;
  void set_kp_coef_full_laod(float value);

  private:
  float _internal_kp_coef_full_laod() const;
  void _internal_set_kp_coef_full_laod(float value);

  public:
  // optional float smaller_kd = 6 [default = 0.2];
  bool has_smaller_kd() const;
  void clear_smaller_kd() ;
  float smaller_kd() const;
  void set_smaller_kd(float value);

  private:
  float _internal_smaller_kd() const;
  void _internal_set_smaller_kd(float value);

  public:
  // optional float kp_coef = 8 [default = 1.05];
  bool has_kp_coef() const;
  void clear_kp_coef() ;
  float kp_coef() const;
  void set_kp_coef(float value);

  private:
  float _internal_kp_coef() const;
  void _internal_set_kp_coef(float value);

  public:
  // optional float max_kp_threshold = 9 [default = 0.02];
  bool has_max_kp_threshold() const;
  void clear_max_kp_threshold() ;
  float max_kp_threshold() const;
  void set_max_kp_threshold(float value);

  private:
  float _internal_max_kp_threshold() const;
  void _internal_set_max_kp_threshold(float value);

  public:
  // @@protoc_insertion_point(class_scope:control.PIDParameters)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PIDParameters_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PIDParameters& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool enable_adjust_kp_;
    float larger_kp_threshold_;
    bool enable_pid_;
    float kp_;
    float ki_;
    float kd_;
    float kp_coef_full_laod_;
    float smaller_kd_;
    float kp_coef_;
    float max_kp_threshold_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
};
// -------------------------------------------------------------------

class IntegrationParameters final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.IntegrationParameters) */ {
 public:
  inline IntegrationParameters() : IntegrationParameters(nullptr) {}
  ~IntegrationParameters() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IntegrationParameters(
      ::google::protobuf::internal::ConstantInitialized);

  inline IntegrationParameters(const IntegrationParameters& from) : IntegrationParameters(nullptr, from) {}
  inline IntegrationParameters(IntegrationParameters&& from) noexcept
      : IntegrationParameters(nullptr, std::move(from)) {}
  inline IntegrationParameters& operator=(const IntegrationParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegrationParameters& operator=(IntegrationParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntegrationParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegrationParameters* internal_default_instance() {
    return reinterpret_cast<const IntegrationParameters*>(
        &_IntegrationParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(IntegrationParameters& a, IntegrationParameters& b) { a.Swap(&b); }
  inline void Swap(IntegrationParameters* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegrationParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntegrationParameters* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<IntegrationParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntegrationParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IntegrationParameters& from) { IntegrationParameters::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntegrationParameters* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.IntegrationParameters"; }

 protected:
  explicit IntegrationParameters(::google::protobuf::Arena* arena);
  IntegrationParameters(::google::protobuf::Arena* arena, const IntegrationParameters& from);
  IntegrationParameters(::google::protobuf::Arena* arena, IntegrationParameters&& from) noexcept
      : IntegrationParameters(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnableIntegrationFieldNumber = 1,
    kKappaThresholdFieldNumber = 8,
    kForgettingFactorFieldNumber = 2,
    kIntegratorSaturationThresholdFieldNumber = 3,
    kSpeedThresholdFieldNumber = 4,
    kLatErrorThresholdFieldNumber = 5,
    kKiFieldNumber = 6,
    kReversseKiFieldNumber = 7,
  };
  // optional bool enable_integration = 1 [default = false];
  bool has_enable_integration() const;
  void clear_enable_integration() ;
  bool enable_integration() const;
  void set_enable_integration(bool value);

  private:
  bool _internal_enable_integration() const;
  void _internal_set_enable_integration(bool value);

  public:
  // optional float kappa_threshold = 8 [default = 0.01];
  bool has_kappa_threshold() const;
  void clear_kappa_threshold() ;
  float kappa_threshold() const;
  void set_kappa_threshold(float value);

  private:
  float _internal_kappa_threshold() const;
  void _internal_set_kappa_threshold(float value);

  public:
  // optional float forgetting_factor = 2 [default = 0.98];
  bool has_forgetting_factor() const;
  void clear_forgetting_factor() ;
  float forgetting_factor() const;
  void set_forgetting_factor(float value);

  private:
  float _internal_forgetting_factor() const;
  void _internal_set_forgetting_factor(float value);

  public:
  // optional float integrator_saturation_threshold = 3 [default = 5];
  bool has_integrator_saturation_threshold() const;
  void clear_integrator_saturation_threshold() ;
  float integrator_saturation_threshold() const;
  void set_integrator_saturation_threshold(float value);

  private:
  float _internal_integrator_saturation_threshold() const;
  void _internal_set_integrator_saturation_threshold(float value);

  public:
  // optional float speed_threshold = 4 [default = 0.5];
  bool has_speed_threshold() const;
  void clear_speed_threshold() ;
  float speed_threshold() const;
  void set_speed_threshold(float value);

  private:
  float _internal_speed_threshold() const;
  void _internal_set_speed_threshold(float value);

  public:
  // optional float lat_error_threshold = 5 [default = 2];
  bool has_lat_error_threshold() const;
  void clear_lat_error_threshold() ;
  float lat_error_threshold() const;
  void set_lat_error_threshold(float value);

  private:
  float _internal_lat_error_threshold() const;
  void _internal_set_lat_error_threshold(float value);

  public:
  // optional float ki = 6 [default = 1];
  bool has_ki() const;
  void clear_ki() ;
  float ki() const;
  void set_ki(float value);

  private:
  float _internal_ki() const;
  void _internal_set_ki(float value);

  public:
  // optional float reversse_ki = 7 [default = 2];
  bool has_reversse_ki() const;
  void clear_reversse_ki() ;
  float reversse_ki() const;
  void set_reversse_ki(float value);

  private:
  float _internal_reversse_ki() const;
  void _internal_set_reversse_ki(float value);

  public:
  // @@protoc_insertion_point(class_scope:control.IntegrationParameters)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IntegrationParameters_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IntegrationParameters& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool enable_integration_;
    float kappa_threshold_;
    float forgetting_factor_;
    float integrator_saturation_threshold_;
    float speed_threshold_;
    float lat_error_threshold_;
    float ki_;
    float reversse_ki_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
};
// -------------------------------------------------------------------

class MultipointPreviewPPConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.MultipointPreviewPPConfig) */ {
 public:
  inline MultipointPreviewPPConfig() : MultipointPreviewPPConfig(nullptr) {}
  ~MultipointPreviewPPConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultipointPreviewPPConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultipointPreviewPPConfig(const MultipointPreviewPPConfig& from) : MultipointPreviewPPConfig(nullptr, from) {}
  inline MultipointPreviewPPConfig(MultipointPreviewPPConfig&& from) noexcept
      : MultipointPreviewPPConfig(nullptr, std::move(from)) {}
  inline MultipointPreviewPPConfig& operator=(const MultipointPreviewPPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipointPreviewPPConfig& operator=(MultipointPreviewPPConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultipointPreviewPPConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultipointPreviewPPConfig* internal_default_instance() {
    return reinterpret_cast<const MultipointPreviewPPConfig*>(
        &_MultipointPreviewPPConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MultipointPreviewPPConfig& a, MultipointPreviewPPConfig& b) { a.Swap(&b); }
  inline void Swap(MultipointPreviewPPConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipointPreviewPPConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultipointPreviewPPConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MultipointPreviewPPConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultipointPreviewPPConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultipointPreviewPPConfig& from) { MultipointPreviewPPConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultipointPreviewPPConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.MultipointPreviewPPConfig"; }

 protected:
  explicit MultipointPreviewPPConfig(::google::protobuf::Arena* arena);
  MultipointPreviewPPConfig(::google::protobuf::Arena* arena, const MultipointPreviewPPConfig& from);
  MultipointPreviewPPConfig(::google::protobuf::Arena* arena, MultipointPreviewPPConfig&& from) noexcept
      : MultipointPreviewPPConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPreviewTimeCoefFieldNumber = 3,
    kPreviewPointWeightFieldNumber = 5,
    kPidParamsFieldNumber = 4,
    kIntegrationParamsFieldNumber = 16,
    kEnablePredisCompensationBaseonLatErrFieldNumber = 8,
    kQueryTimeNearestPointOnlyFieldNumber = 11,
    kEnableLatErrorFilterFieldNumber = 13,
    kEnableHeadingErrorFilterFieldNumber = 14,
    kBasePreviewDisFieldNumber = 1,
    kBasePreviewTimeFieldNumber = 2,
    kKappaThresholdFieldNumber = 6,
    kCoefWithLatErrorFieldNumber = 9,
    kDisCompensationThresholdWithLatErrorFieldNumber = 10,
    kKappaTimeCoefFieldNumber = 7,
    kMeanFilterWindowSizeFieldNumber = 15,
    kQueryRelativeTimeFieldNumber = 12,
  };
  // repeated float preview_time_coef = 3;
  int preview_time_coef_size() const;
  private:
  int _internal_preview_time_coef_size() const;

  public:
  void clear_preview_time_coef() ;
  float preview_time_coef(int index) const;
  void set_preview_time_coef(int index, float value);
  void add_preview_time_coef(float value);
  const ::google::protobuf::RepeatedField<float>& preview_time_coef() const;
  ::google::protobuf::RepeatedField<float>* mutable_preview_time_coef();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_preview_time_coef() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_preview_time_coef();

  public:
  // repeated double preview_point_weight = 5;
  int preview_point_weight_size() const;
  private:
  int _internal_preview_point_weight_size() const;

  public:
  void clear_preview_point_weight() ;
  double preview_point_weight(int index) const;
  void set_preview_point_weight(int index, double value);
  void add_preview_point_weight(double value);
  const ::google::protobuf::RepeatedField<double>& preview_point_weight() const;
  ::google::protobuf::RepeatedField<double>* mutable_preview_point_weight();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_preview_point_weight() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_preview_point_weight();

  public:
  // optional .control.PIDParameters pid_params = 4;
  bool has_pid_params() const;
  void clear_pid_params() ;
  const ::control::PIDParameters& pid_params() const;
  PROTOBUF_NODISCARD ::control::PIDParameters* release_pid_params();
  ::control::PIDParameters* mutable_pid_params();
  void set_allocated_pid_params(::control::PIDParameters* value);
  void unsafe_arena_set_allocated_pid_params(::control::PIDParameters* value);
  ::control::PIDParameters* unsafe_arena_release_pid_params();

  private:
  const ::control::PIDParameters& _internal_pid_params() const;
  ::control::PIDParameters* _internal_mutable_pid_params();

  public:
  // optional .control.IntegrationParameters integration_params = 16;
  bool has_integration_params() const;
  void clear_integration_params() ;
  const ::control::IntegrationParameters& integration_params() const;
  PROTOBUF_NODISCARD ::control::IntegrationParameters* release_integration_params();
  ::control::IntegrationParameters* mutable_integration_params();
  void set_allocated_integration_params(::control::IntegrationParameters* value);
  void unsafe_arena_set_allocated_integration_params(::control::IntegrationParameters* value);
  ::control::IntegrationParameters* unsafe_arena_release_integration_params();

  private:
  const ::control::IntegrationParameters& _internal_integration_params() const;
  ::control::IntegrationParameters* _internal_mutable_integration_params();

  public:
  // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
  bool has_enable_predis_compensation_baseon_lat_err() const;
  void clear_enable_predis_compensation_baseon_lat_err() ;
  bool enable_predis_compensation_baseon_lat_err() const;
  void set_enable_predis_compensation_baseon_lat_err(bool value);

  private:
  bool _internal_enable_predis_compensation_baseon_lat_err() const;
  void _internal_set_enable_predis_compensation_baseon_lat_err(bool value);

  public:
  // optional bool query_time_nearest_point_only = 11 [default = false];
  bool has_query_time_nearest_point_only() const;
  void clear_query_time_nearest_point_only() ;
  bool query_time_nearest_point_only() const;
  void set_query_time_nearest_point_only(bool value);

  private:
  bool _internal_query_time_nearest_point_only() const;
  void _internal_set_query_time_nearest_point_only(bool value);

  public:
  // optional bool enable_lat_error_filter = 13 [default = false];
  bool has_enable_lat_error_filter() const;
  void clear_enable_lat_error_filter() ;
  bool enable_lat_error_filter() const;
  void set_enable_lat_error_filter(bool value);

  private:
  bool _internal_enable_lat_error_filter() const;
  void _internal_set_enable_lat_error_filter(bool value);

  public:
  // optional bool enable_heading_error_filter = 14 [default = false];
  bool has_enable_heading_error_filter() const;
  void clear_enable_heading_error_filter() ;
  bool enable_heading_error_filter() const;
  void set_enable_heading_error_filter(bool value);

  private:
  bool _internal_enable_heading_error_filter() const;
  void _internal_set_enable_heading_error_filter(bool value);

  public:
  // optional float base_preview_dis = 1 [default = 5];
  bool has_base_preview_dis() const;
  void clear_base_preview_dis() ;
  float base_preview_dis() const;
  void set_base_preview_dis(float value);

  private:
  float _internal_base_preview_dis() const;
  void _internal_set_base_preview_dis(float value);

  public:
  // optional float base_preview_time = 2 [default = 2];
  bool has_base_preview_time() const;
  void clear_base_preview_time() ;
  float base_preview_time() const;
  void set_base_preview_time(float value);

  private:
  float _internal_base_preview_time() const;
  void _internal_set_base_preview_time(float value);

  public:
  // optional double kappa_threshold = 6 [default = 0.02];
  bool has_kappa_threshold() const;
  void clear_kappa_threshold() ;
  double kappa_threshold() const;
  void set_kappa_threshold(double value);

  private:
  double _internal_kappa_threshold() const;
  void _internal_set_kappa_threshold(double value);

  public:
  // optional double coef_with_lat_error = 9 [default = 1.8];
  bool has_coef_with_lat_error() const;
  void clear_coef_with_lat_error() ;
  double coef_with_lat_error() const;
  void set_coef_with_lat_error(double value);

  private:
  double _internal_coef_with_lat_error() const;
  void _internal_set_coef_with_lat_error(double value);

  public:
  // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
  bool has_dis_compensation_threshold_with_lat_error() const;
  void clear_dis_compensation_threshold_with_lat_error() ;
  double dis_compensation_threshold_with_lat_error() const;
  void set_dis_compensation_threshold_with_lat_error(double value);

  private:
  double _internal_dis_compensation_threshold_with_lat_error() const;
  void _internal_set_dis_compensation_threshold_with_lat_error(double value);

  public:
  // optional float kappa_time_coef = 7 [default = 10];
  bool has_kappa_time_coef() const;
  void clear_kappa_time_coef() ;
  float kappa_time_coef() const;
  void set_kappa_time_coef(float value);

  private:
  float _internal_kappa_time_coef() const;
  void _internal_set_kappa_time_coef(float value);

  public:
  // optional int32 mean_filter_window_size = 15 [default = 5];
  bool has_mean_filter_window_size() const;
  void clear_mean_filter_window_size() ;
  ::int32_t mean_filter_window_size() const;
  void set_mean_filter_window_size(::int32_t value);

  private:
  ::int32_t _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(::int32_t value);

  public:
  // optional double query_relative_time = 12 [default = 0.8];
  bool has_query_relative_time() const;
  void clear_query_relative_time() ;
  double query_relative_time() const;
  void set_query_relative_time(double value);

  private:
  double _internal_query_relative_time() const;
  void _internal_set_query_relative_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.MultipointPreviewPPConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MultipointPreviewPPConfig_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultipointPreviewPPConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> preview_time_coef_;
    ::google::protobuf::RepeatedField<double> preview_point_weight_;
    ::control::PIDParameters* pid_params_;
    ::control::IntegrationParameters* integration_params_;
    bool enable_predis_compensation_baseon_lat_err_;
    bool query_time_nearest_point_only_;
    bool enable_lat_error_filter_;
    bool enable_heading_error_filter_;
    float base_preview_dis_;
    float base_preview_time_;
    double kappa_threshold_;
    double coef_with_lat_error_;
    double dis_compensation_threshold_with_lat_error_;
    float kappa_time_coef_;
    ::int32_t mean_filter_window_size_;
    double query_relative_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PIDParameters

// optional bool enable_pid = 1 [default = true];
inline bool PIDParameters::has_enable_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PIDParameters::clear_enable_pid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_pid_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PIDParameters::enable_pid() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.enable_pid)
  return _internal_enable_pid();
}
inline void PIDParameters::set_enable_pid(bool value) {
  _internal_set_enable_pid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.enable_pid)
}
inline bool PIDParameters::_internal_enable_pid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_pid_;
}
inline void PIDParameters::_internal_set_enable_pid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_pid_ = value;
}

// optional float kp = 2 [default = 1];
inline bool PIDParameters::has_kp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PIDParameters::clear_kp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kp_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float PIDParameters::kp() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kp)
  return _internal_kp();
}
inline void PIDParameters::set_kp(float value) {
  _internal_set_kp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.kp)
}
inline float PIDParameters::_internal_kp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kp_;
}
inline void PIDParameters::_internal_set_kp(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kp_ = value;
}

// optional float ki = 3 [default = 2];
inline bool PIDParameters::has_ki() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PIDParameters::clear_ki() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ki_ = 2;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float PIDParameters::ki() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.ki)
  return _internal_ki();
}
inline void PIDParameters::set_ki(float value) {
  _internal_set_ki(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.ki)
}
inline float PIDParameters::_internal_ki() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ki_;
}
inline void PIDParameters::_internal_set_ki(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ki_ = value;
}

// optional float kd = 4 [default = 0.6];
inline bool PIDParameters::has_kd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PIDParameters::clear_kd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kd_ = 0.6f;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float PIDParameters::kd() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kd)
  return _internal_kd();
}
inline void PIDParameters::set_kd(float value) {
  _internal_set_kd(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.kd)
}
inline float PIDParameters::_internal_kd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kd_;
}
inline void PIDParameters::_internal_set_kd(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kd_ = value;
}

// optional float kp_coef_full_laod = 5 [default = 1];
inline bool PIDParameters::has_kp_coef_full_laod() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PIDParameters::clear_kp_coef_full_laod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kp_coef_full_laod_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float PIDParameters::kp_coef_full_laod() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kp_coef_full_laod)
  return _internal_kp_coef_full_laod();
}
inline void PIDParameters::set_kp_coef_full_laod(float value) {
  _internal_set_kp_coef_full_laod(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.kp_coef_full_laod)
}
inline float PIDParameters::_internal_kp_coef_full_laod() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kp_coef_full_laod_;
}
inline void PIDParameters::_internal_set_kp_coef_full_laod(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kp_coef_full_laod_ = value;
}

// optional float smaller_kd = 6 [default = 0.2];
inline bool PIDParameters::has_smaller_kd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PIDParameters::clear_smaller_kd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smaller_kd_ = 0.2f;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float PIDParameters::smaller_kd() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.smaller_kd)
  return _internal_smaller_kd();
}
inline void PIDParameters::set_smaller_kd(float value) {
  _internal_set_smaller_kd(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.smaller_kd)
}
inline float PIDParameters::_internal_smaller_kd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smaller_kd_;
}
inline void PIDParameters::_internal_set_smaller_kd(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smaller_kd_ = value;
}

// optional bool enable_adjust_kp = 7 [default = false];
inline bool PIDParameters::has_enable_adjust_kp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PIDParameters::clear_enable_adjust_kp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_adjust_kp_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PIDParameters::enable_adjust_kp() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.enable_adjust_kp)
  return _internal_enable_adjust_kp();
}
inline void PIDParameters::set_enable_adjust_kp(bool value) {
  _internal_set_enable_adjust_kp(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.enable_adjust_kp)
}
inline bool PIDParameters::_internal_enable_adjust_kp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_adjust_kp_;
}
inline void PIDParameters::_internal_set_enable_adjust_kp(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_adjust_kp_ = value;
}

// optional float kp_coef = 8 [default = 1.05];
inline bool PIDParameters::has_kp_coef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void PIDParameters::clear_kp_coef() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kp_coef_ = 1.05f;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float PIDParameters::kp_coef() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kp_coef)
  return _internal_kp_coef();
}
inline void PIDParameters::set_kp_coef(float value) {
  _internal_set_kp_coef(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.kp_coef)
}
inline float PIDParameters::_internal_kp_coef() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kp_coef_;
}
inline void PIDParameters::_internal_set_kp_coef(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kp_coef_ = value;
}

// optional float max_kp_threshold = 9 [default = 0.02];
inline bool PIDParameters::has_max_kp_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void PIDParameters::clear_max_kp_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_kp_threshold_ = 0.02f;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float PIDParameters::max_kp_threshold() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.max_kp_threshold)
  return _internal_max_kp_threshold();
}
inline void PIDParameters::set_max_kp_threshold(float value) {
  _internal_set_max_kp_threshold(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.max_kp_threshold)
}
inline float PIDParameters::_internal_max_kp_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_kp_threshold_;
}
inline void PIDParameters::_internal_set_max_kp_threshold(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_kp_threshold_ = value;
}

// optional float larger_kp_threshold = 10 [default = 0.06];
inline bool PIDParameters::has_larger_kp_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PIDParameters::clear_larger_kp_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.larger_kp_threshold_ = 0.06f;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PIDParameters::larger_kp_threshold() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.larger_kp_threshold)
  return _internal_larger_kp_threshold();
}
inline void PIDParameters::set_larger_kp_threshold(float value) {
  _internal_set_larger_kp_threshold(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.PIDParameters.larger_kp_threshold)
}
inline float PIDParameters::_internal_larger_kp_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.larger_kp_threshold_;
}
inline void PIDParameters::_internal_set_larger_kp_threshold(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.larger_kp_threshold_ = value;
}

// -------------------------------------------------------------------

// IntegrationParameters

// optional bool enable_integration = 1 [default = false];
inline bool IntegrationParameters::has_enable_integration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IntegrationParameters::clear_enable_integration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_integration_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool IntegrationParameters::enable_integration() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.enable_integration)
  return _internal_enable_integration();
}
inline void IntegrationParameters::set_enable_integration(bool value) {
  _internal_set_enable_integration(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.enable_integration)
}
inline bool IntegrationParameters::_internal_enable_integration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_integration_;
}
inline void IntegrationParameters::_internal_set_enable_integration(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_integration_ = value;
}

// optional float forgetting_factor = 2 [default = 0.98];
inline bool IntegrationParameters::has_forgetting_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void IntegrationParameters::clear_forgetting_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forgetting_factor_ = 0.98f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float IntegrationParameters::forgetting_factor() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.forgetting_factor)
  return _internal_forgetting_factor();
}
inline void IntegrationParameters::set_forgetting_factor(float value) {
  _internal_set_forgetting_factor(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.forgetting_factor)
}
inline float IntegrationParameters::_internal_forgetting_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forgetting_factor_;
}
inline void IntegrationParameters::_internal_set_forgetting_factor(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forgetting_factor_ = value;
}

// optional float integrator_saturation_threshold = 3 [default = 5];
inline bool IntegrationParameters::has_integrator_saturation_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void IntegrationParameters::clear_integrator_saturation_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrator_saturation_threshold_ = 5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float IntegrationParameters::integrator_saturation_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.integrator_saturation_threshold)
  return _internal_integrator_saturation_threshold();
}
inline void IntegrationParameters::set_integrator_saturation_threshold(float value) {
  _internal_set_integrator_saturation_threshold(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.integrator_saturation_threshold)
}
inline float IntegrationParameters::_internal_integrator_saturation_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.integrator_saturation_threshold_;
}
inline void IntegrationParameters::_internal_set_integrator_saturation_threshold(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrator_saturation_threshold_ = value;
}

// optional float speed_threshold = 4 [default = 0.5];
inline bool IntegrationParameters::has_speed_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void IntegrationParameters::clear_speed_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float IntegrationParameters::speed_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.speed_threshold)
  return _internal_speed_threshold();
}
inline void IntegrationParameters::set_speed_threshold(float value) {
  _internal_set_speed_threshold(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.speed_threshold)
}
inline float IntegrationParameters::_internal_speed_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_threshold_;
}
inline void IntegrationParameters::_internal_set_speed_threshold(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_threshold_ = value;
}

// optional float lat_error_threshold = 5 [default = 2];
inline bool IntegrationParameters::has_lat_error_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void IntegrationParameters::clear_lat_error_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_error_threshold_ = 2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float IntegrationParameters::lat_error_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.lat_error_threshold)
  return _internal_lat_error_threshold();
}
inline void IntegrationParameters::set_lat_error_threshold(float value) {
  _internal_set_lat_error_threshold(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.lat_error_threshold)
}
inline float IntegrationParameters::_internal_lat_error_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lat_error_threshold_;
}
inline void IntegrationParameters::_internal_set_lat_error_threshold(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_error_threshold_ = value;
}

// optional float ki = 6 [default = 1];
inline bool IntegrationParameters::has_ki() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void IntegrationParameters::clear_ki() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ki_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float IntegrationParameters::ki() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.ki)
  return _internal_ki();
}
inline void IntegrationParameters::set_ki(float value) {
  _internal_set_ki(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.ki)
}
inline float IntegrationParameters::_internal_ki() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ki_;
}
inline void IntegrationParameters::_internal_set_ki(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ki_ = value;
}

// optional float reversse_ki = 7 [default = 2];
inline bool IntegrationParameters::has_reversse_ki() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void IntegrationParameters::clear_reversse_ki() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reversse_ki_ = 2;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float IntegrationParameters::reversse_ki() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.reversse_ki)
  return _internal_reversse_ki();
}
inline void IntegrationParameters::set_reversse_ki(float value) {
  _internal_set_reversse_ki(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.reversse_ki)
}
inline float IntegrationParameters::_internal_reversse_ki() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reversse_ki_;
}
inline void IntegrationParameters::_internal_set_reversse_ki(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reversse_ki_ = value;
}

// optional float kappa_threshold = 8 [default = 0.01];
inline bool IntegrationParameters::has_kappa_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IntegrationParameters::clear_kappa_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_threshold_ = 0.01f;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float IntegrationParameters::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.kappa_threshold)
  return _internal_kappa_threshold();
}
inline void IntegrationParameters::set_kappa_threshold(float value) {
  _internal_set_kappa_threshold(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.kappa_threshold)
}
inline float IntegrationParameters::_internal_kappa_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kappa_threshold_;
}
inline void IntegrationParameters::_internal_set_kappa_threshold(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_threshold_ = value;
}

// -------------------------------------------------------------------

// MultipointPreviewPPConfig

// optional float base_preview_dis = 1 [default = 5];
inline bool MultipointPreviewPPConfig::has_base_preview_dis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_base_preview_dis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_dis_ = 5;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float MultipointPreviewPPConfig::base_preview_dis() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.base_preview_dis)
  return _internal_base_preview_dis();
}
inline void MultipointPreviewPPConfig::set_base_preview_dis(float value) {
  _internal_set_base_preview_dis(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.base_preview_dis)
}
inline float MultipointPreviewPPConfig::_internal_base_preview_dis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_preview_dis_;
}
inline void MultipointPreviewPPConfig::_internal_set_base_preview_dis(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_dis_ = value;
}

// optional float base_preview_time = 2 [default = 2];
inline bool MultipointPreviewPPConfig::has_base_preview_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_base_preview_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_time_ = 2;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float MultipointPreviewPPConfig::base_preview_time() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.base_preview_time)
  return _internal_base_preview_time();
}
inline void MultipointPreviewPPConfig::set_base_preview_time(float value) {
  _internal_set_base_preview_time(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.base_preview_time)
}
inline float MultipointPreviewPPConfig::_internal_base_preview_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_preview_time_;
}
inline void MultipointPreviewPPConfig::_internal_set_base_preview_time(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_time_ = value;
}

// repeated float preview_time_coef = 3;
inline int MultipointPreviewPPConfig::_internal_preview_time_coef_size() const {
  return _internal_preview_time_coef().size();
}
inline int MultipointPreviewPPConfig::preview_time_coef_size() const {
  return _internal_preview_time_coef_size();
}
inline void MultipointPreviewPPConfig::clear_preview_time_coef() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_time_coef_.Clear();
}
inline float MultipointPreviewPPConfig::preview_time_coef(int index) const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.preview_time_coef)
  return _internal_preview_time_coef().Get(index);
}
inline void MultipointPreviewPPConfig::set_preview_time_coef(int index, float value) {
  _internal_mutable_preview_time_coef()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.preview_time_coef)
}
inline void MultipointPreviewPPConfig::add_preview_time_coef(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_preview_time_coef()->Add(value);
  // @@protoc_insertion_point(field_add:control.MultipointPreviewPPConfig.preview_time_coef)
}
inline const ::google::protobuf::RepeatedField<float>& MultipointPreviewPPConfig::preview_time_coef() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.MultipointPreviewPPConfig.preview_time_coef)
  return _internal_preview_time_coef();
}
inline ::google::protobuf::RepeatedField<float>* MultipointPreviewPPConfig::mutable_preview_time_coef()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.MultipointPreviewPPConfig.preview_time_coef)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_preview_time_coef();
}
inline const ::google::protobuf::RepeatedField<float>&
MultipointPreviewPPConfig::_internal_preview_time_coef() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_time_coef_;
}
inline ::google::protobuf::RepeatedField<float>* MultipointPreviewPPConfig::_internal_mutable_preview_time_coef() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.preview_time_coef_;
}

// optional .control.PIDParameters pid_params = 4;
inline bool MultipointPreviewPPConfig::has_pid_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pid_params_ != nullptr);
  return value;
}
inline void MultipointPreviewPPConfig::clear_pid_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pid_params_ != nullptr) _impl_.pid_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PIDParameters& MultipointPreviewPPConfig::_internal_pid_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PIDParameters* p = _impl_.pid_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PIDParameters&>(::control::_PIDParameters_default_instance_);
}
inline const ::control::PIDParameters& MultipointPreviewPPConfig::pid_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.pid_params)
  return _internal_pid_params();
}
inline void MultipointPreviewPPConfig::unsafe_arena_set_allocated_pid_params(::control::PIDParameters* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pid_params_);
  }
  _impl_.pid_params_ = reinterpret_cast<::control::PIDParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.MultipointPreviewPPConfig.pid_params)
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::release_pid_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::PIDParameters* released = _impl_.pid_params_;
  _impl_.pid_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::unsafe_arena_release_pid_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.MultipointPreviewPPConfig.pid_params)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::PIDParameters* temp = _impl_.pid_params_;
  _impl_.pid_params_ = nullptr;
  return temp;
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::_internal_mutable_pid_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pid_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PIDParameters>(GetArena());
    _impl_.pid_params_ = reinterpret_cast<::control::PIDParameters*>(p);
  }
  return _impl_.pid_params_;
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::mutable_pid_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::PIDParameters* _msg = _internal_mutable_pid_params();
  // @@protoc_insertion_point(field_mutable:control.MultipointPreviewPPConfig.pid_params)
  return _msg;
}
inline void MultipointPreviewPPConfig::set_allocated_pid_params(::control::PIDParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pid_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pid_params_ = reinterpret_cast<::control::PIDParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.MultipointPreviewPPConfig.pid_params)
}

// repeated double preview_point_weight = 5;
inline int MultipointPreviewPPConfig::_internal_preview_point_weight_size() const {
  return _internal_preview_point_weight().size();
}
inline int MultipointPreviewPPConfig::preview_point_weight_size() const {
  return _internal_preview_point_weight_size();
}
inline void MultipointPreviewPPConfig::clear_preview_point_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_point_weight_.Clear();
}
inline double MultipointPreviewPPConfig::preview_point_weight(int index) const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.preview_point_weight)
  return _internal_preview_point_weight().Get(index);
}
inline void MultipointPreviewPPConfig::set_preview_point_weight(int index, double value) {
  _internal_mutable_preview_point_weight()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.preview_point_weight)
}
inline void MultipointPreviewPPConfig::add_preview_point_weight(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_preview_point_weight()->Add(value);
  // @@protoc_insertion_point(field_add:control.MultipointPreviewPPConfig.preview_point_weight)
}
inline const ::google::protobuf::RepeatedField<double>& MultipointPreviewPPConfig::preview_point_weight() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.MultipointPreviewPPConfig.preview_point_weight)
  return _internal_preview_point_weight();
}
inline ::google::protobuf::RepeatedField<double>* MultipointPreviewPPConfig::mutable_preview_point_weight()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.MultipointPreviewPPConfig.preview_point_weight)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_preview_point_weight();
}
inline const ::google::protobuf::RepeatedField<double>&
MultipointPreviewPPConfig::_internal_preview_point_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_point_weight_;
}
inline ::google::protobuf::RepeatedField<double>* MultipointPreviewPPConfig::_internal_mutable_preview_point_weight() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.preview_point_weight_;
}

// optional double kappa_threshold = 6 [default = 0.02];
inline bool MultipointPreviewPPConfig::has_kappa_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_kappa_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_threshold_ = 0.02;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double MultipointPreviewPPConfig::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.kappa_threshold)
  return _internal_kappa_threshold();
}
inline void MultipointPreviewPPConfig::set_kappa_threshold(double value) {
  _internal_set_kappa_threshold(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.kappa_threshold)
}
inline double MultipointPreviewPPConfig::_internal_kappa_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kappa_threshold_;
}
inline void MultipointPreviewPPConfig::_internal_set_kappa_threshold(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_threshold_ = value;
}

// optional float kappa_time_coef = 7 [default = 10];
inline bool MultipointPreviewPPConfig::has_kappa_time_coef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_kappa_time_coef() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_time_coef_ = 10;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float MultipointPreviewPPConfig::kappa_time_coef() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.kappa_time_coef)
  return _internal_kappa_time_coef();
}
inline void MultipointPreviewPPConfig::set_kappa_time_coef(float value) {
  _internal_set_kappa_time_coef(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.kappa_time_coef)
}
inline float MultipointPreviewPPConfig::_internal_kappa_time_coef() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kappa_time_coef_;
}
inline void MultipointPreviewPPConfig::_internal_set_kappa_time_coef(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_time_coef_ = value;
}

// optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
inline bool MultipointPreviewPPConfig::has_enable_predis_compensation_baseon_lat_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_enable_predis_compensation_baseon_lat_err() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_predis_compensation_baseon_lat_err_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool MultipointPreviewPPConfig::enable_predis_compensation_baseon_lat_err() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.enable_predis_compensation_baseon_lat_err)
  return _internal_enable_predis_compensation_baseon_lat_err();
}
inline void MultipointPreviewPPConfig::set_enable_predis_compensation_baseon_lat_err(bool value) {
  _internal_set_enable_predis_compensation_baseon_lat_err(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.enable_predis_compensation_baseon_lat_err)
}
inline bool MultipointPreviewPPConfig::_internal_enable_predis_compensation_baseon_lat_err() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_predis_compensation_baseon_lat_err_;
}
inline void MultipointPreviewPPConfig::_internal_set_enable_predis_compensation_baseon_lat_err(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_predis_compensation_baseon_lat_err_ = value;
}

// optional double coef_with_lat_error = 9 [default = 1.8];
inline bool MultipointPreviewPPConfig::has_coef_with_lat_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_coef_with_lat_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coef_with_lat_error_ = 1.8;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double MultipointPreviewPPConfig::coef_with_lat_error() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.coef_with_lat_error)
  return _internal_coef_with_lat_error();
}
inline void MultipointPreviewPPConfig::set_coef_with_lat_error(double value) {
  _internal_set_coef_with_lat_error(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.coef_with_lat_error)
}
inline double MultipointPreviewPPConfig::_internal_coef_with_lat_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coef_with_lat_error_;
}
inline void MultipointPreviewPPConfig::_internal_set_coef_with_lat_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coef_with_lat_error_ = value;
}

// optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
inline bool MultipointPreviewPPConfig::has_dis_compensation_threshold_with_lat_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_dis_compensation_threshold_with_lat_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dis_compensation_threshold_with_lat_error_ = 1.5;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double MultipointPreviewPPConfig::dis_compensation_threshold_with_lat_error() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.dis_compensation_threshold_with_lat_error)
  return _internal_dis_compensation_threshold_with_lat_error();
}
inline void MultipointPreviewPPConfig::set_dis_compensation_threshold_with_lat_error(double value) {
  _internal_set_dis_compensation_threshold_with_lat_error(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.dis_compensation_threshold_with_lat_error)
}
inline double MultipointPreviewPPConfig::_internal_dis_compensation_threshold_with_lat_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dis_compensation_threshold_with_lat_error_;
}
inline void MultipointPreviewPPConfig::_internal_set_dis_compensation_threshold_with_lat_error(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dis_compensation_threshold_with_lat_error_ = value;
}

// optional bool query_time_nearest_point_only = 11 [default = false];
inline bool MultipointPreviewPPConfig::has_query_time_nearest_point_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_query_time_nearest_point_only() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_time_nearest_point_only_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool MultipointPreviewPPConfig::query_time_nearest_point_only() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.query_time_nearest_point_only)
  return _internal_query_time_nearest_point_only();
}
inline void MultipointPreviewPPConfig::set_query_time_nearest_point_only(bool value) {
  _internal_set_query_time_nearest_point_only(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.query_time_nearest_point_only)
}
inline bool MultipointPreviewPPConfig::_internal_query_time_nearest_point_only() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_time_nearest_point_only_;
}
inline void MultipointPreviewPPConfig::_internal_set_query_time_nearest_point_only(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_time_nearest_point_only_ = value;
}

// optional double query_relative_time = 12 [default = 0.8];
inline bool MultipointPreviewPPConfig::has_query_relative_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_query_relative_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_relative_time_ = 0.8;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double MultipointPreviewPPConfig::query_relative_time() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.query_relative_time)
  return _internal_query_relative_time();
}
inline void MultipointPreviewPPConfig::set_query_relative_time(double value) {
  _internal_set_query_relative_time(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.query_relative_time)
}
inline double MultipointPreviewPPConfig::_internal_query_relative_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_relative_time_;
}
inline void MultipointPreviewPPConfig::_internal_set_query_relative_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_relative_time_ = value;
}

// optional bool enable_lat_error_filter = 13 [default = false];
inline bool MultipointPreviewPPConfig::has_enable_lat_error_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_enable_lat_error_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_lat_error_filter_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool MultipointPreviewPPConfig::enable_lat_error_filter() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.enable_lat_error_filter)
  return _internal_enable_lat_error_filter();
}
inline void MultipointPreviewPPConfig::set_enable_lat_error_filter(bool value) {
  _internal_set_enable_lat_error_filter(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.enable_lat_error_filter)
}
inline bool MultipointPreviewPPConfig::_internal_enable_lat_error_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_lat_error_filter_;
}
inline void MultipointPreviewPPConfig::_internal_set_enable_lat_error_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_lat_error_filter_ = value;
}

// optional bool enable_heading_error_filter = 14 [default = false];
inline bool MultipointPreviewPPConfig::has_enable_heading_error_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_enable_heading_error_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_heading_error_filter_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool MultipointPreviewPPConfig::enable_heading_error_filter() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.enable_heading_error_filter)
  return _internal_enable_heading_error_filter();
}
inline void MultipointPreviewPPConfig::set_enable_heading_error_filter(bool value) {
  _internal_set_enable_heading_error_filter(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.enable_heading_error_filter)
}
inline bool MultipointPreviewPPConfig::_internal_enable_heading_error_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_heading_error_filter_;
}
inline void MultipointPreviewPPConfig::_internal_set_enable_heading_error_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_heading_error_filter_ = value;
}

// optional int32 mean_filter_window_size = 15 [default = 5];
inline bool MultipointPreviewPPConfig::has_mean_filter_window_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void MultipointPreviewPPConfig::clear_mean_filter_window_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_filter_window_size_ = 5;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t MultipointPreviewPPConfig::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void MultipointPreviewPPConfig::set_mean_filter_window_size(::int32_t value) {
  _internal_set_mean_filter_window_size(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.mean_filter_window_size)
}
inline ::int32_t MultipointPreviewPPConfig::_internal_mean_filter_window_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mean_filter_window_size_;
}
inline void MultipointPreviewPPConfig::_internal_set_mean_filter_window_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_filter_window_size_ = value;
}

// optional .control.IntegrationParameters integration_params = 16;
inline bool MultipointPreviewPPConfig::has_integration_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.integration_params_ != nullptr);
  return value;
}
inline void MultipointPreviewPPConfig::clear_integration_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.integration_params_ != nullptr) _impl_.integration_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::control::IntegrationParameters& MultipointPreviewPPConfig::_internal_integration_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::IntegrationParameters* p = _impl_.integration_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::IntegrationParameters&>(::control::_IntegrationParameters_default_instance_);
}
inline const ::control::IntegrationParameters& MultipointPreviewPPConfig::integration_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.integration_params)
  return _internal_integration_params();
}
inline void MultipointPreviewPPConfig::unsafe_arena_set_allocated_integration_params(::control::IntegrationParameters* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.integration_params_);
  }
  _impl_.integration_params_ = reinterpret_cast<::control::IntegrationParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.MultipointPreviewPPConfig.integration_params)
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::release_integration_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::IntegrationParameters* released = _impl_.integration_params_;
  _impl_.integration_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::unsafe_arena_release_integration_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.MultipointPreviewPPConfig.integration_params)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::IntegrationParameters* temp = _impl_.integration_params_;
  _impl_.integration_params_ = nullptr;
  return temp;
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::_internal_mutable_integration_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.integration_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::IntegrationParameters>(GetArena());
    _impl_.integration_params_ = reinterpret_cast<::control::IntegrationParameters*>(p);
  }
  return _impl_.integration_params_;
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::mutable_integration_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::IntegrationParameters* _msg = _internal_mutable_integration_params();
  // @@protoc_insertion_point(field_mutable:control.MultipointPreviewPPConfig.integration_params)
  return _msg;
}
inline void MultipointPreviewPPConfig::set_allocated_integration_params(::control::IntegrationParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.integration_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.integration_params_ = reinterpret_cast<::control::IntegrationParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.MultipointPreviewPPConfig.integration_params)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_2epb_2eh

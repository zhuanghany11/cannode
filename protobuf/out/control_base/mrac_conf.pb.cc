// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/mrac_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/mrac_conf.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {

inline constexpr MracConf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        adaption_state_gain_{},
        adaption_matrix_p_{},
        anti_windup_compensation_gain_{},
        reference_time_constant_{0},
        reference_natural_frequency_{0},
        reference_damping_ratio_{0},
        adaption_desired_gain_{0},
        adaption_nonlinear_gain_{0},
        clamping_time_constant_{0},
        mrac_model_order_{1},
        mrac_saturation_level_{1} {}

template <typename>
PROTOBUF_CONSTEXPR MracConf::MracConf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MracConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MracConfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MracConfDefaultTypeInternal() {}
  union {
    MracConf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MracConfDefaultTypeInternal _MracConf_default_instance_;
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2fmrac_5fconf_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2fmrac_5fconf_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2fmrac_5fconf_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.mrac_model_order_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.reference_time_constant_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.reference_natural_frequency_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.reference_damping_ratio_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.adaption_state_gain_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.adaption_desired_gain_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.adaption_nonlinear_gain_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.adaption_matrix_p_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.mrac_saturation_level_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.anti_windup_compensation_gain_),
        PROTOBUF_FIELD_OFFSET(::control::MracConf, _impl_.clamping_time_constant_),
        6,
        0,
        1,
        2,
        ~0u,
        3,
        4,
        ~0u,
        7,
        ~0u,
        5,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 19, -1, sizeof(::control::MracConf)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::_MracConf_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2fmrac_5fconf_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034control_base/mrac_conf.proto\022\007control\""
    "\357\002\n\010MracConf\022\033\n\020mrac_model_order\030\001 \001(\005:\001"
    "1\022\037\n\027reference_time_constant\030\002 \001(\001\022#\n\033re"
    "ference_natural_frequency\030\003 \001(\001\022\037\n\027refer"
    "ence_damping_ratio\030\004 \001(\001\022\033\n\023adaption_sta"
    "te_gain\030\005 \003(\001\022\035\n\025adaption_desired_gain\030\006"
    " \001(\001\022\037\n\027adaption_nonlinear_gain\030\007 \001(\001\022\031\n"
    "\021adaption_matrix_p\030\010 \003(\001\022 \n\025mrac_saturat"
    "ion_level\030\t \001(\001:\0011\022%\n\035anti_windup_compen"
    "sation_gain\030\n \003(\001\022\036\n\026clamping_time_const"
    "ant\030\013 \001(\001"
};
static ::absl::once_flag descriptor_table_control_5fbase_2fmrac_5fconf_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2fmrac_5fconf_2eproto = {
    false,
    false,
    409,
    descriptor_table_protodef_control_5fbase_2fmrac_5fconf_2eproto,
    "control_base/mrac_conf.proto",
    &descriptor_table_control_5fbase_2fmrac_5fconf_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2fmrac_5fconf_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2fmrac_5fconf_2eproto,
    file_level_service_descriptors_control_5fbase_2fmrac_5fconf_2eproto,
};
namespace control {
// ===================================================================

class MracConf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MracConf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MracConf, _impl_._has_bits_);
};

MracConf::MracConf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.MracConf)
}
inline PROTOBUF_NDEBUG_INLINE MracConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::MracConf& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        adaption_state_gain_{visibility, arena, from.adaption_state_gain_},
        adaption_matrix_p_{visibility, arena, from.adaption_matrix_p_},
        anti_windup_compensation_gain_{visibility, arena, from.anti_windup_compensation_gain_} {}

MracConf::MracConf(
    ::google::protobuf::Arena* arena,
    const MracConf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MracConf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reference_time_constant_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, reference_time_constant_),
           offsetof(Impl_, mrac_saturation_level_) -
               offsetof(Impl_, reference_time_constant_) +
               sizeof(Impl_::mrac_saturation_level_));

  // @@protoc_insertion_point(copy_constructor:control.MracConf)
}
inline PROTOBUF_NDEBUG_INLINE MracConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        adaption_state_gain_{visibility, arena},
        adaption_matrix_p_{visibility, arena},
        anti_windup_compensation_gain_{visibility, arena},
        mrac_model_order_{1},
        mrac_saturation_level_{1} {}

inline void MracConf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reference_time_constant_),
           0,
           offsetof(Impl_, clamping_time_constant_) -
               offsetof(Impl_, reference_time_constant_) +
               sizeof(Impl_::clamping_time_constant_));
}
MracConf::~MracConf() {
  // @@protoc_insertion_point(destructor:control.MracConf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MracConf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MracConf::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MracConf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MracConf>(),
            ::google::protobuf::Message::GetNewImpl<MracConf>(),
            ::google::protobuf::Message::GetClearImpl<MracConf>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<MracConf>(),
                ::google::protobuf::Message::GetSerializeImpl<MracConf>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MracConf, _impl_._cached_size_),
            false,
        },
        &MracConf::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fmrac_5fconf_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MracConf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 0, 2> MracConf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MracConf, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MracConf_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::MracConf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 mrac_model_order = 1 [default = 1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MracConf, _impl_.mrac_model_order_), 6>(),
     {8, 6, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.mrac_model_order_)}},
    // optional double reference_time_constant = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.reference_time_constant_)}},
    // optional double reference_natural_frequency = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 1, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.reference_natural_frequency_)}},
    // optional double reference_damping_ratio = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 2, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.reference_damping_ratio_)}},
    // repeated double adaption_state_gain = 5;
    {::_pbi::TcParser::FastF64R1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_state_gain_)}},
    // optional double adaption_desired_gain = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 3, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_desired_gain_)}},
    // optional double adaption_nonlinear_gain = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 4, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_nonlinear_gain_)}},
    // repeated double adaption_matrix_p = 8;
    {::_pbi::TcParser::FastF64R1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_matrix_p_)}},
    // optional double mrac_saturation_level = 9 [default = 1];
    {::_pbi::TcParser::FastF64S1,
     {73, 7, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.mrac_saturation_level_)}},
    // repeated double anti_windup_compensation_gain = 10;
    {::_pbi::TcParser::FastF64R1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.anti_windup_compensation_gain_)}},
    // optional double clamping_time_constant = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 5, 0, PROTOBUF_FIELD_OFFSET(MracConf, _impl_.clamping_time_constant_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 mrac_model_order = 1 [default = 1];
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.mrac_model_order_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double reference_time_constant = 2;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.reference_time_constant_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double reference_natural_frequency = 3;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.reference_natural_frequency_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double reference_damping_ratio = 4;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.reference_damping_ratio_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated double adaption_state_gain = 5;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_state_gain_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // optional double adaption_desired_gain = 6;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_desired_gain_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double adaption_nonlinear_gain = 7;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_nonlinear_gain_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated double adaption_matrix_p = 8;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.adaption_matrix_p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // optional double mrac_saturation_level = 9 [default = 1];
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.mrac_saturation_level_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated double anti_windup_compensation_gain = 10;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.anti_windup_compensation_gain_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // optional double clamping_time_constant = 11;
    {PROTOBUF_FIELD_OFFSET(MracConf, _impl_.clamping_time_constant_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MracConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.MracConf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.adaption_state_gain_.Clear();
  _impl_.adaption_matrix_p_.Clear();
  _impl_.anti_windup_compensation_gain_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.reference_time_constant_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.clamping_time_constant_) -
        reinterpret_cast<char*>(&_impl_.reference_time_constant_)) + sizeof(_impl_.clamping_time_constant_));
    _impl_.mrac_model_order_ = 1;
    _impl_.mrac_saturation_level_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MracConf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.MracConf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mrac_model_order = 1 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_mrac_model_order(), target);
  }

  // optional double reference_time_constant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_reference_time_constant(), target);
  }

  // optional double reference_natural_frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_reference_natural_frequency(), target);
  }

  // optional double reference_damping_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_reference_damping_ratio(), target);
  }

  // repeated double adaption_state_gain = 5;
  for (int i = 0, n = this->_internal_adaption_state_gain_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_adaption_state_gain().Get(i), target);
  }

  // optional double adaption_desired_gain = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_adaption_desired_gain(), target);
  }

  // optional double adaption_nonlinear_gain = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_adaption_nonlinear_gain(), target);
  }

  // repeated double adaption_matrix_p = 8;
  for (int i = 0, n = this->_internal_adaption_matrix_p_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_adaption_matrix_p().Get(i), target);
  }

  // optional double mrac_saturation_level = 9 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_mrac_saturation_level(), target);
  }

  // repeated double anti_windup_compensation_gain = 10;
  for (int i = 0, n = this->_internal_anti_windup_compensation_gain_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_anti_windup_compensation_gain().Get(i), target);
  }

  // optional double clamping_time_constant = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_clamping_time_constant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.MracConf)
  return target;
}

::size_t MracConf::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.MracConf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated double adaption_state_gain = 5;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_adaption_state_gain_size())
      ;
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this->_internal_adaption_state_gain_size());
      ;
      total_size += tag_size + data_size;
    }
    // repeated double adaption_matrix_p = 8;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_adaption_matrix_p_size())
      ;
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this->_internal_adaption_matrix_p_size());
      ;
      total_size += tag_size + data_size;
    }
    // repeated double anti_windup_compensation_gain = 10;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_anti_windup_compensation_gain_size())
      ;
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this->_internal_anti_windup_compensation_gain_size());
      ;
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double reference_time_constant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }
    // optional double reference_natural_frequency = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }
    // optional double reference_damping_ratio = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }
    // optional double adaption_desired_gain = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }
    // optional double adaption_nonlinear_gain = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional double clamping_time_constant = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional int32 mrac_model_order = 1 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mrac_model_order());
    }
    // optional double mrac_saturation_level = 9 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void MracConf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MracConf*>(&to_msg);
  auto& from = static_cast<const MracConf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.MracConf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_adaption_state_gain()->MergeFrom(from._internal_adaption_state_gain());
  _this->_internal_mutable_adaption_matrix_p()->MergeFrom(from._internal_adaption_matrix_p());
  _this->_internal_mutable_anti_windup_compensation_gain()->MergeFrom(from._internal_anti_windup_compensation_gain());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.reference_time_constant_ = from._impl_.reference_time_constant_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reference_natural_frequency_ = from._impl_.reference_natural_frequency_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reference_damping_ratio_ = from._impl_.reference_damping_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.adaption_desired_gain_ = from._impl_.adaption_desired_gain_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.adaption_nonlinear_gain_ = from._impl_.adaption_nonlinear_gain_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.clamping_time_constant_ = from._impl_.clamping_time_constant_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mrac_model_order_ = from._impl_.mrac_model_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.mrac_saturation_level_ = from._impl_.mrac_saturation_level_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MracConf::CopyFrom(const MracConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.MracConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MracConf::InternalSwap(MracConf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.adaption_state_gain_.InternalSwap(&other->_impl_.adaption_state_gain_);
  _impl_.adaption_matrix_p_.InternalSwap(&other->_impl_.adaption_matrix_p_);
  _impl_.anti_windup_compensation_gain_.InternalSwap(&other->_impl_.anti_windup_compensation_gain_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MracConf, _impl_.mrac_saturation_level_)
      + sizeof(MracConf::_impl_.mrac_saturation_level_)
      - PROTOBUF_FIELD_OFFSET(MracConf, _impl_.reference_time_constant_)>(
          reinterpret_cast<char*>(&_impl_.reference_time_constant_),
          reinterpret_cast<char*>(&other->_impl_.reference_time_constant_));
}

::google::protobuf::Metadata MracConf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2fmrac_5fconf_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/mpc_controller.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/mpc_controller.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace latmpc {

inline constexpr FilterConf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cutoff_freq_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FilterConf::FilterConf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FilterConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterConfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterConfDefaultTypeInternal() {}
  union {
    FilterConf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterConfDefaultTypeInternal _FilterConf_default_instance_;

inline constexpr MPCControllerConf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        matrix_q_{},
        matrix_r_{},
        lat_err_gain_scheduler_{nullptr},
        heading_err_gain_scheduler_{nullptr},
        steer_weight_gain_scheduler_{nullptr},
        feedforwardterm_gain_scheduler_{nullptr},
        acc_lookup_pid_conf_{nullptr},
        reverse_leadlag_conf_{nullptr},
        pitch_angle_filter_conf_{nullptr},
        ts_{0},
        cf_{0},
        cr_{0},
        mass_fl_{0},
        mass_fr_{0},
        mass_rl_{0},
        mass_rr_{0},
        eps_{0},
        cutoff_freq_{0},
        mean_filter_window_size_{0},
        max_lateral_acceleration_{0},
        standstill_acceleration_{0},
        brake_minimum_action_{0},
        throttle_minimum_action_{0},
        max_iteration_{0},
        enable_mpc_feedforward_compensation_{false},
        use_lqr_curvature_feedforward_{false},
        use_preview_{false},
        use_lookup_acc_pid_{false},
        unconstrained_control_diff_limit_{0},
        switch_speed_{0},
        switch_speed_window_{0},
        preview_window_{0},
        use_pitch_angle_filter_{false},
        enable_look_ahead_back_control_{false},
        enable_reverse_leadlag_compensation_{false},
        enable_feedback_augment_on_high_speed_{false},
        lookahead_station_{0},
        lookback_station_{0},
        lookahead_station_high_speed_{0},
        lookback_station_high_speed_{0},
        trajectory_transform_to_com_reverse_{false},
        trajectory_transform_to_com_drive_{false},
        enable_slope_offset_{false},
        use_preview_reference_check_{false},
        use_kinematic_model_{false},
        enable_navigation_mode_error_filter_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MPCControllerConf::MPCControllerConf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MPCControllerConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPCControllerConfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPCControllerConfDefaultTypeInternal() {}
  union {
    MPCControllerConf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPCControllerConfDefaultTypeInternal _MPCControllerConf_default_instance_;
}  // namespace latmpc
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2fmpc_5fcontroller_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::latmpc::FilterConf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::FilterConf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::latmpc::FilterConf, _impl_.cutoff_freq_),
        0,
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.ts_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.cf_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.cr_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.mass_fl_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.mass_fr_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.mass_rl_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.mass_rr_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.eps_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.matrix_q_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.matrix_r_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.cutoff_freq_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.mean_filter_window_size_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.max_iteration_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.max_lateral_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.standstill_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.brake_minimum_action_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.throttle_minimum_action_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.lat_err_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.heading_err_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.steer_weight_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.feedforwardterm_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.enable_mpc_feedforward_compensation_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.unconstrained_control_diff_limit_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.use_lqr_curvature_feedforward_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.use_preview_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.acc_lookup_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.use_lookup_acc_pid_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.use_pitch_angle_filter_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.enable_look_ahead_back_control_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.switch_speed_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.reverse_leadlag_conf_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.switch_speed_window_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.preview_window_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.lookahead_station_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.lookback_station_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.lookahead_station_high_speed_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.lookback_station_high_speed_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.enable_reverse_leadlag_compensation_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.pitch_angle_filter_conf_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.enable_feedback_augment_on_high_speed_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.trajectory_transform_to_com_reverse_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.trajectory_transform_to_com_drive_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.enable_slope_offset_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.use_preview_reference_check_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.use_kinematic_model_),
        PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _impl_.enable_navigation_mode_error_filter_),
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        ~0u,
        ~0u,
        15,
        16,
        21,
        17,
        18,
        19,
        20,
        0,
        1,
        2,
        3,
        22,
        26,
        23,
        24,
        4,
        25,
        30,
        31,
        27,
        5,
        28,
        29,
        34,
        35,
        36,
        37,
        32,
        6,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::control::latmpc::FilterConf)},
        {10, 64, -1, sizeof(::control::latmpc::MPCControllerConf)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::latmpc::_FilterConf_default_instance_._instance,
    &::control::latmpc::_MPCControllerConf_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2fmpc_5fcontroller_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n!control_base/mpc_controller.proto\022\016con"
    "trol.latmpc\032&control_base/gain_scheduler"
    "_conf.proto\032\037control_base/leadlag_conf.p"
    "roto\032\033control_base/pid_conf.proto\"!\n\nFil"
    "terConf\022\023\n\013cutoff_freq\030\001 \001(\005\"\334\014\n\021MPCCont"
    "rollerConf\022\n\n\002ts\030\001 \001(\001\022\n\n\002cf\030\002 \001(\001\022\n\n\002cr"
    "\030\003 \001(\001\022\017\n\007mass_fl\030\004 \001(\005\022\017\n\007mass_fr\030\005 \001(\005"
    "\022\017\n\007mass_rl\030\006 \001(\005\022\017\n\007mass_rr\030\007 \001(\005\022\013\n\003ep"
    "s\030\010 \001(\001\022\020\n\010matrix_q\030\t \003(\001\022\020\n\010matrix_r\030\n "
    "\003(\001\022\023\n\013cutoff_freq\030\013 \001(\005\022\037\n\027mean_filter_"
    "window_size\030\014 \001(\005\022\025\n\rmax_iteration\030\r \001(\005"
    "\022 \n\030max_lateral_acceleration\030\016 \001(\001\022\037\n\027st"
    "andstill_acceleration\030\017 \001(\001\022\034\n\024brake_min"
    "imum_action\030\020 \001(\001\022\037\n\027throttle_minimum_ac"
    "tion\030\021 \001(\001\0226\n\026lat_err_gain_scheduler\030\022 \001"
    "(\0132\026.control.GainScheduler\022:\n\032heading_er"
    "r_gain_scheduler\030\023 \001(\0132\026.control.GainSch"
    "eduler\022;\n\033steer_weight_gain_scheduler\030\024 "
    "\001(\0132\026.control.GainScheduler\022>\n\036feedforwa"
    "rdterm_gain_scheduler\030\025 \001(\0132\026.control.Ga"
    "inScheduler\0222\n#enable_mpc_feedforward_co"
    "mpensation\030\027 \001(\010:\005false\022(\n unconstrained"
    "_control_diff_limit\030\030 \001(\001\022%\n\035use_lqr_cur"
    "vature_feedforward\030\031 \001(\010\022\023\n\013use_preview\030"
    "\032 \001(\010\022-\n\023acc_lookup_pid_conf\030\033 \001(\0132\020.con"
    "trol.PidConf\022\032\n\022use_lookup_acc_pid\030\034 \001(\010"
    "\022\036\n\026use_pitch_angle_filter\030\035 \001(\010\022-\n\036enab"
    "le_look_ahead_back_control\030\036 \001(\010:\005false\022"
    "\024\n\014switch_speed\030\037 \001(\001\0222\n\024reverse_leadlag"
    "_conf\030  \001(\0132\024.control.LeadlagConf\022\036\n\023swi"
    "tch_speed_window\030! \001(\001:\0010\022\026\n\016preview_win"
    "dow\030\" \001(\005\022\034\n\021lookahead_station\030# \001(\001:\0010\022"
    "\033\n\020lookback_station\030$ \001(\001:\0010\022\'\n\034lookahea"
    "d_station_high_speed\030% \001(\001:\0010\022&\n\033lookbac"
    "k_station_high_speed\030& \001(\001:\0010\0222\n#enable_"
    "reverse_leadlag_compensation\030\' \001(\010:\005fals"
    "e\022;\n\027pitch_angle_filter_conf\030( \001(\0132\032.con"
    "trol.latmpc.FilterConf\0224\n%enable_feedbac"
    "k_augment_on_high_speed\030) \001(\010:\005false\0222\n#"
    "trajectory_transform_to_com_reverse\030* \001("
    "\010:\005false\0220\n!trajectory_transform_to_com_"
    "drive\030+ \001(\010:\005false\022\"\n\023enable_slope_offse"
    "t\030, \001(\010:\005false\022*\n\033use_preview_reference_"
    "check\030- \001(\010:\005false\022\033\n\023use_kinematic_mode"
    "l\030. \001(\010\0222\n#enable_navigation_mode_error_"
    "filter\030/ \001(\010:\005false"
};
static const ::_pbi::DescriptorTable* const descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_deps[3] =
    {
        &::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
        &::descriptor_table_control_5fbase_2fleadlag_5fconf_2eproto,
        &::descriptor_table_control_5fbase_2fpid_5fconf_2eproto,
};
static ::absl::once_flag descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto = {
    false,
    false,
    1819,
    descriptor_table_protodef_control_5fbase_2fmpc_5fcontroller_2eproto,
    "control_base/mpc_controller.proto",
    &descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_once,
    descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2fmpc_5fcontroller_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto,
    file_level_service_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto,
};
namespace control {
namespace latmpc {
// ===================================================================

class FilterConf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FilterConf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FilterConf, _impl_._has_bits_);
};

FilterConf::FilterConf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.latmpc.FilterConf)
}
FilterConf::FilterConf(
    ::google::protobuf::Arena* arena, const FilterConf& from)
    : FilterConf(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FilterConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FilterConf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.cutoff_freq_ = {};
}
FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:control.latmpc.FilterConf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FilterConf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    FilterConf::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &FilterConf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<FilterConf>(),
            ::google::protobuf::Message::GetNewImpl<FilterConf>(),
            ::google::protobuf::Message::GetClearImpl<FilterConf>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<FilterConf>(),
                ::google::protobuf::Message::GetSerializeImpl<FilterConf>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(FilterConf, _impl_._cached_size_),
            false,
        },
        &FilterConf::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* FilterConf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> FilterConf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FilterConf, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FilterConf_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::latmpc::FilterConf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 cutoff_freq = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FilterConf, _impl_.cutoff_freq_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(FilterConf, _impl_.cutoff_freq_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 cutoff_freq = 1;
    {PROTOBUF_FIELD_OFFSET(FilterConf, _impl_.cutoff_freq_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.latmpc.FilterConf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cutoff_freq_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* FilterConf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.latmpc.FilterConf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_cutoff_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.latmpc.FilterConf)
  return target;
}

::size_t FilterConf::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.latmpc.FilterConf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // optional int32 cutoff_freq = 1;
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_cutoff_freq());
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void FilterConf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FilterConf*>(&to_msg);
  auto& from = static_cast<const FilterConf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.latmpc.FilterConf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.cutoff_freq_ = from._impl_.cutoff_freq_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.latmpc.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FilterConf::InternalSwap(FilterConf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.cutoff_freq_, other->_impl_.cutoff_freq_);
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MPCControllerConf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MPCControllerConf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_._has_bits_);
};

void MPCControllerConf::clear_lat_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lat_err_gain_scheduler_ != nullptr) _impl_.lat_err_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MPCControllerConf::clear_heading_err_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.heading_err_gain_scheduler_ != nullptr) _impl_.heading_err_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MPCControllerConf::clear_steer_weight_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steer_weight_gain_scheduler_ != nullptr) _impl_.steer_weight_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MPCControllerConf::clear_feedforwardterm_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.feedforwardterm_gain_scheduler_ != nullptr) _impl_.feedforwardterm_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void MPCControllerConf::clear_acc_lookup_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.acc_lookup_pid_conf_ != nullptr) _impl_.acc_lookup_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void MPCControllerConf::clear_reverse_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_leadlag_conf_ != nullptr) _impl_.reverse_leadlag_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
MPCControllerConf::MPCControllerConf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.latmpc.MPCControllerConf)
}
inline PROTOBUF_NDEBUG_INLINE MPCControllerConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::latmpc::MPCControllerConf& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        matrix_q_{visibility, arena, from.matrix_q_},
        matrix_r_{visibility, arena, from.matrix_r_} {}

MPCControllerConf::MPCControllerConf(
    ::google::protobuf::Arena* arena,
    const MPCControllerConf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MPCControllerConf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.lat_err_gain_scheduler_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.lat_err_gain_scheduler_)
                        : nullptr;
  _impl_.heading_err_gain_scheduler_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.heading_err_gain_scheduler_)
                        : nullptr;
  _impl_.steer_weight_gain_scheduler_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.steer_weight_gain_scheduler_)
                        : nullptr;
  _impl_.feedforwardterm_gain_scheduler_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.feedforwardterm_gain_scheduler_)
                        : nullptr;
  _impl_.acc_lookup_pid_conf_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.acc_lookup_pid_conf_)
                        : nullptr;
  _impl_.reverse_leadlag_conf_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::control::LeadlagConf>(
                              arena, *from._impl_.reverse_leadlag_conf_)
                        : nullptr;
  _impl_.pitch_angle_filter_conf_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::control::latmpc::FilterConf>(
                              arena, *from._impl_.pitch_angle_filter_conf_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ts_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ts_),
           offsetof(Impl_, enable_navigation_mode_error_filter_) -
               offsetof(Impl_, ts_) +
               sizeof(Impl_::enable_navigation_mode_error_filter_));

  // @@protoc_insertion_point(copy_constructor:control.latmpc.MPCControllerConf)
}
inline PROTOBUF_NDEBUG_INLINE MPCControllerConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        matrix_q_{visibility, arena},
        matrix_r_{visibility, arena} {}

inline void MPCControllerConf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lat_err_gain_scheduler_),
           0,
           offsetof(Impl_, enable_navigation_mode_error_filter_) -
               offsetof(Impl_, lat_err_gain_scheduler_) +
               sizeof(Impl_::enable_navigation_mode_error_filter_));
}
MPCControllerConf::~MPCControllerConf() {
  // @@protoc_insertion_point(destructor:control.latmpc.MPCControllerConf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MPCControllerConf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.lat_err_gain_scheduler_;
  delete _impl_.heading_err_gain_scheduler_;
  delete _impl_.steer_weight_gain_scheduler_;
  delete _impl_.feedforwardterm_gain_scheduler_;
  delete _impl_.acc_lookup_pid_conf_;
  delete _impl_.reverse_leadlag_conf_;
  delete _impl_.pitch_angle_filter_conf_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MPCControllerConf::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MPCControllerConf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MPCControllerConf>(),
            ::google::protobuf::Message::GetNewImpl<MPCControllerConf>(),
            ::google::protobuf::Message::GetClearImpl<MPCControllerConf>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<MPCControllerConf>(),
                ::google::protobuf::Message::GetSerializeImpl<MPCControllerConf>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_._cached_size_),
            false,
        },
        &MPCControllerConf::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MPCControllerConf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 46, 7, 0, 7> MPCControllerConf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_._has_bits_),
    0, // no _extensions_
    47, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2097152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    46,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MPCControllerConf_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::latmpc::MPCControllerConf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double ts = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 7, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.ts_)}},
    // optional double cf = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 8, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.cf_)}},
    // optional double cr = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 9, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.cr_)}},
    // optional int32 mass_fl = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MPCControllerConf, _impl_.mass_fl_), 10>(),
     {32, 10, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_fl_)}},
    // optional int32 mass_fr = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MPCControllerConf, _impl_.mass_fr_), 11>(),
     {40, 11, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_fr_)}},
    // optional int32 mass_rl = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MPCControllerConf, _impl_.mass_rl_), 12>(),
     {48, 12, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_rl_)}},
    // optional int32 mass_rr = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MPCControllerConf, _impl_.mass_rr_), 13>(),
     {56, 13, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_rr_)}},
    // optional double eps = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 14, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.eps_)}},
    // repeated double matrix_q = 9;
    {::_pbi::TcParser::FastF64R1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.matrix_q_)}},
    // repeated double matrix_r = 10;
    {::_pbi::TcParser::FastF64R1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.matrix_r_)}},
    // optional int32 cutoff_freq = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MPCControllerConf, _impl_.cutoff_freq_), 15>(),
     {88, 15, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.cutoff_freq_)}},
    // optional int32 mean_filter_window_size = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MPCControllerConf, _impl_.mean_filter_window_size_), 16>(),
     {96, 16, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mean_filter_window_size_)}},
    // optional int32 max_iteration = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MPCControllerConf, _impl_.max_iteration_), 21>(),
     {104, 21, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.max_iteration_)}},
    // optional double max_lateral_acceleration = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 17, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.max_lateral_acceleration_)}},
    // optional double standstill_acceleration = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 18, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.standstill_acceleration_)}},
    // optional double brake_minimum_action = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 19, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.brake_minimum_action_)}},
    // optional double throttle_minimum_action = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 20, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.throttle_minimum_action_)}},
    // optional .control.GainScheduler lat_err_gain_scheduler = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 0, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.lat_err_gain_scheduler_)}},
    // optional .control.GainScheduler heading_err_gain_scheduler = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 1, 1, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.heading_err_gain_scheduler_)}},
    // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 2, 2, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.steer_weight_gain_scheduler_)}},
    // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 3, 3, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.feedforwardterm_gain_scheduler_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
    {::_pbi::TcParser::FastV8S2,
     {440, 22, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_mpc_feedforward_compensation_)}},
    // optional double unconstrained_control_diff_limit = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 26, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.unconstrained_control_diff_limit_)}},
    // optional bool use_lqr_curvature_feedforward = 25;
    {::_pbi::TcParser::FastV8S2,
     {456, 23, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_lqr_curvature_feedforward_)}},
    // optional bool use_preview = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 24, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_preview_)}},
    // optional .control.PidConf acc_lookup_pid_conf = 27;
    {::_pbi::TcParser::FastMtS2,
     {474, 4, 4, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.acc_lookup_pid_conf_)}},
    // optional bool use_lookup_acc_pid = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 25, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_lookup_acc_pid_)}},
    // optional bool use_pitch_angle_filter = 29;
    {::_pbi::TcParser::FastV8S2,
     {488, 30, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_pitch_angle_filter_)}},
    // optional bool enable_look_ahead_back_control = 30 [default = false];
    {::_pbi::TcParser::FastV8S2,
     {496, 31, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_look_ahead_back_control_)}},
    // optional double switch_speed = 31;
    {::_pbi::TcParser::FastF64S2,
     {505, 27, 0, PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.switch_speed_)}},
  }}, {{
    33, 0, 1,
    32768, 31,
    65535, 65535
  }}, {{
    // optional double ts = 1;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.ts_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double cf = 2;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.cf_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double cr = 3;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.cr_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 mass_fl = 4;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_fl_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 mass_fr = 5;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_fr_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 mass_rl = 6;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_rl_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 mass_rr = 7;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mass_rr_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double eps = 8;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.eps_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated double matrix_q = 9;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.matrix_q_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // repeated double matrix_r = 10;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.matrix_r_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // optional int32 cutoff_freq = 11;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.cutoff_freq_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 mean_filter_window_size = 12;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.mean_filter_window_size_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_iteration = 13;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.max_iteration_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double max_lateral_acceleration = 14;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.max_lateral_acceleration_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double standstill_acceleration = 15;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.standstill_acceleration_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double brake_minimum_action = 16;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.brake_minimum_action_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double throttle_minimum_action = 17;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.throttle_minimum_action_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.GainScheduler lat_err_gain_scheduler = 18;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.lat_err_gain_scheduler_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler heading_err_gain_scheduler = 19;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.heading_err_gain_scheduler_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.steer_weight_gain_scheduler_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.feedforwardterm_gain_scheduler_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_mpc_feedforward_compensation_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double unconstrained_control_diff_limit = 24;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.unconstrained_control_diff_limit_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool use_lqr_curvature_feedforward = 25;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_lqr_curvature_feedforward_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool use_preview = 26;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_preview_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .control.PidConf acc_lookup_pid_conf = 27;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.acc_lookup_pid_conf_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool use_lookup_acc_pid = 28;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_lookup_acc_pid_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool use_pitch_angle_filter = 29;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_pitch_angle_filter_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_look_ahead_back_control = 30 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_look_ahead_back_control_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double switch_speed = 31;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.switch_speed_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.LeadlagConf reverse_leadlag_conf = 32;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.reverse_leadlag_conf_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double switch_speed_window = 33 [default = 0];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.switch_speed_window_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 preview_window = 34;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.preview_window_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double lookahead_station = 35 [default = 0];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.lookahead_station_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lookback_station = 36 [default = 0];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.lookback_station_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lookahead_station_high_speed = 37 [default = 0];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.lookahead_station_high_speed_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lookback_station_high_speed = 38 [default = 0];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.lookback_station_high_speed_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool enable_reverse_leadlag_compensation = 39 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_reverse_leadlag_compensation_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.pitch_angle_filter_conf_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_feedback_augment_on_high_speed_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool trajectory_transform_to_com_reverse = 42 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.trajectory_transform_to_com_reverse_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool trajectory_transform_to_com_drive = 43 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.trajectory_transform_to_com_drive_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_slope_offset = 44 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_slope_offset_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool use_preview_reference_check = 45 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_preview_reference_check_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool use_kinematic_model = 46;
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.use_kinematic_model_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_navigation_mode_error_filter = 47 [default = false];
    {PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_navigation_mode_error_filter_), _Internal::kHasBitsOffset + 43, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::LeadlagConf>()},
    {::_pbi::TcParser::GetTable<::control::latmpc::FilterConf>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MPCControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.latmpc.MPCControllerConf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matrix_q_.Clear();
  _impl_.matrix_r_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.lat_err_gain_scheduler_ != nullptr);
      _impl_.lat_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.heading_err_gain_scheduler_ != nullptr);
      _impl_.heading_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.steer_weight_gain_scheduler_ != nullptr);
      _impl_.steer_weight_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.feedforwardterm_gain_scheduler_ != nullptr);
      _impl_.feedforwardterm_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.acc_lookup_pid_conf_ != nullptr);
      _impl_.acc_lookup_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.reverse_leadlag_conf_ != nullptr);
      _impl_.reverse_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.pitch_angle_filter_conf_ != nullptr);
      _impl_.pitch_angle_filter_conf_->Clear();
    }
  }
  _impl_.ts_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.cf_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cutoff_freq_) -
        reinterpret_cast<char*>(&_impl_.cf_)) + sizeof(_impl_.cutoff_freq_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.mean_filter_window_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.use_lqr_curvature_feedforward_) -
        reinterpret_cast<char*>(&_impl_.mean_filter_window_size_)) + sizeof(_impl_.use_lqr_curvature_feedforward_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.use_preview_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_look_ahead_back_control_) -
        reinterpret_cast<char*>(&_impl_.use_preview_)) + sizeof(_impl_.enable_look_ahead_back_control_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.enable_reverse_leadlag_compensation_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.trajectory_transform_to_com_drive_) -
        reinterpret_cast<char*>(&_impl_.enable_reverse_leadlag_compensation_)) + sizeof(_impl_.trajectory_transform_to_com_drive_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.enable_slope_offset_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_navigation_mode_error_filter_) -
        reinterpret_cast<char*>(&_impl_.enable_slope_offset_)) + sizeof(_impl_.enable_navigation_mode_error_filter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MPCControllerConf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.latmpc.MPCControllerConf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_ts(), target);
  }

  // optional double cf = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_cf(), target);
  }

  // optional double cr = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_cr(), target);
  }

  // optional int32 mass_fl = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_mass_fl(), target);
  }

  // optional int32 mass_fr = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_mass_fr(), target);
  }

  // optional int32 mass_rl = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_mass_rl(), target);
  }

  // optional int32 mass_rr = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_mass_rr(), target);
  }

  // optional double eps = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_eps(), target);
  }

  // repeated double matrix_q = 9;
  for (int i = 0, n = this->_internal_matrix_q_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_matrix_q().Get(i), target);
  }

  // repeated double matrix_r = 10;
  for (int i = 0, n = this->_internal_matrix_r_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_matrix_r().Get(i), target);
  }

  // optional int32 cutoff_freq = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_mean_filter_window_size(), target);
  }

  // optional int32 max_iteration = 13;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_max_iteration(), target);
  }

  // optional double max_lateral_acceleration = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_max_lateral_acceleration(), target);
  }

  // optional double standstill_acceleration = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this->_internal_standstill_acceleration(), target);
  }

  // optional double brake_minimum_action = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_brake_minimum_action(), target);
  }

  // optional double throttle_minimum_action = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this->_internal_throttle_minimum_action(), target);
  }

  // optional .control.GainScheduler lat_err_gain_scheduler = 18;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, *_impl_.lat_err_gain_scheduler_, _impl_.lat_err_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler heading_err_gain_scheduler = 19;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, *_impl_.heading_err_gain_scheduler_, _impl_.heading_err_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, *_impl_.steer_weight_gain_scheduler_, _impl_.steer_weight_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *_impl_.feedforwardterm_gain_scheduler_, _impl_.feedforwardterm_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_enable_mpc_feedforward_compensation(), target);
  }

  // optional double unconstrained_control_diff_limit = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        24, this->_internal_unconstrained_control_diff_limit(), target);
  }

  // optional bool use_lqr_curvature_feedforward = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        25, this->_internal_use_lqr_curvature_feedforward(), target);
  }

  // optional bool use_preview = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_use_preview(), target);
  }

  // optional .control.PidConf acc_lookup_pid_conf = 27;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        27, *_impl_.acc_lookup_pid_conf_, _impl_.acc_lookup_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional bool use_lookup_acc_pid = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        28, this->_internal_use_lookup_acc_pid(), target);
  }

  // optional bool use_pitch_angle_filter = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        29, this->_internal_use_pitch_angle_filter(), target);
  }

  // optional bool enable_look_ahead_back_control = 30 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_enable_look_ahead_back_control(), target);
  }

  // optional double switch_speed = 31;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        31, this->_internal_switch_speed(), target);
  }

  // optional .control.LeadlagConf reverse_leadlag_conf = 32;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        32, *_impl_.reverse_leadlag_conf_, _impl_.reverse_leadlag_conf_->GetCachedSize(), target, stream);
  }

  // optional double switch_speed_window = 33 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        33, this->_internal_switch_speed_window(), target);
  }

  // optional int32 preview_window = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        34, this->_internal_preview_window(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double lookahead_station = 35 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        35, this->_internal_lookahead_station(), target);
  }

  // optional double lookback_station = 36 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        36, this->_internal_lookback_station(), target);
  }

  // optional double lookahead_station_high_speed = 37 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        37, this->_internal_lookahead_station_high_speed(), target);
  }

  // optional double lookback_station_high_speed = 38 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        38, this->_internal_lookback_station_high_speed(), target);
  }

  // optional bool enable_reverse_leadlag_compensation = 39 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        39, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        40, *_impl_.pitch_angle_filter_conf_, _impl_.pitch_angle_filter_conf_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        41, this->_internal_enable_feedback_augment_on_high_speed(), target);
  }

  // optional bool trajectory_transform_to_com_reverse = 42 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        42, this->_internal_trajectory_transform_to_com_reverse(), target);
  }

  // optional bool trajectory_transform_to_com_drive = 43 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        43, this->_internal_trajectory_transform_to_com_drive(), target);
  }

  // optional bool enable_slope_offset = 44 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        44, this->_internal_enable_slope_offset(), target);
  }

  // optional bool use_preview_reference_check = 45 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        45, this->_internal_use_preview_reference_check(), target);
  }

  // optional bool use_kinematic_model = 46;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        46, this->_internal_use_kinematic_model(), target);
  }

  // optional bool enable_navigation_mode_error_filter = 47 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        47, this->_internal_enable_navigation_mode_error_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.latmpc.MPCControllerConf)
  return target;
}

::size_t MPCControllerConf::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.latmpc.MPCControllerConf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated double matrix_q = 9;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_matrix_q_size())
      ;
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this->_internal_matrix_q_size());
      ;
      total_size += tag_size + data_size;
    }
    // repeated double matrix_r = 10;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_matrix_r_size())
      ;
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this->_internal_matrix_r_size());
      ;
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.GainScheduler lat_err_gain_scheduler = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lat_err_gain_scheduler_);
    }
    // optional .control.GainScheduler heading_err_gain_scheduler = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.heading_err_gain_scheduler_);
    }
    // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.steer_weight_gain_scheduler_);
    }
    // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.feedforwardterm_gain_scheduler_);
    }
    // optional .control.PidConf acc_lookup_pid_conf = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acc_lookup_pid_conf_);
    }
    // optional .control.LeadlagConf reverse_leadlag_conf = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reverse_leadlag_conf_);
    }
    // optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pitch_angle_filter_conf_);
    }
    // optional double ts = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double cf = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }
    // optional double cr = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }
    // optional int32 mass_fl = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mass_fl());
    }
    // optional int32 mass_fr = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mass_fr());
    }
    // optional int32 mass_rl = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mass_rl());
    }
    // optional int32 mass_rr = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mass_rr());
    }
    // optional double eps = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional int32 cutoff_freq = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_cutoff_freq());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 mean_filter_window_size = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mean_filter_window_size());
    }
    // optional double max_lateral_acceleration = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 9;
    }
    // optional double standstill_acceleration = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 9;
    }
    // optional double brake_minimum_action = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 10;
    }
    // optional double throttle_minimum_action = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional int32 max_iteration = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_iteration());
    }
    // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 3;
    }
    // optional bool use_lqr_curvature_feedforward = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool use_preview = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3;
    }
    // optional bool use_lookup_acc_pid = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3;
    }
    // optional double unconstrained_control_diff_limit = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 10;
    }
    // optional double switch_speed = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 10;
    }
    // optional double switch_speed_window = 33 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 10;
    }
    // optional int32 preview_window = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_preview_window());
    }
    // optional bool use_pitch_angle_filter = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3;
    }
    // optional bool enable_look_ahead_back_control = 30 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3;
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_reverse_leadlag_compensation = 39 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3;
    }
    // optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3;
    }
    // optional double lookahead_station = 35 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 10;
    }
    // optional double lookback_station = 36 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 10;
    }
    // optional double lookahead_station_high_speed = 37 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 10;
    }
    // optional double lookback_station_high_speed = 38 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 10;
    }
    // optional bool trajectory_transform_to_com_reverse = 42 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3;
    }
    // optional bool trajectory_transform_to_com_drive = 43 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3;
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool enable_slope_offset = 44 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3;
    }
    // optional bool use_preview_reference_check = 45 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3;
    }
    // optional bool use_kinematic_model = 46;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3;
    }
    // optional bool enable_navigation_mode_error_filter = 47 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void MPCControllerConf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MPCControllerConf*>(&to_msg);
  auto& from = static_cast<const MPCControllerConf&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.latmpc.MPCControllerConf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_matrix_q()->MergeFrom(from._internal_matrix_q());
  _this->_internal_mutable_matrix_r()->MergeFrom(from._internal_matrix_r());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.lat_err_gain_scheduler_ != nullptr);
      if (_this->_impl_.lat_err_gain_scheduler_ == nullptr) {
        _this->_impl_.lat_err_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.lat_err_gain_scheduler_);
      } else {
        _this->_impl_.lat_err_gain_scheduler_->MergeFrom(*from._impl_.lat_err_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.heading_err_gain_scheduler_ != nullptr);
      if (_this->_impl_.heading_err_gain_scheduler_ == nullptr) {
        _this->_impl_.heading_err_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.heading_err_gain_scheduler_);
      } else {
        _this->_impl_.heading_err_gain_scheduler_->MergeFrom(*from._impl_.heading_err_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.steer_weight_gain_scheduler_ != nullptr);
      if (_this->_impl_.steer_weight_gain_scheduler_ == nullptr) {
        _this->_impl_.steer_weight_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.steer_weight_gain_scheduler_);
      } else {
        _this->_impl_.steer_weight_gain_scheduler_->MergeFrom(*from._impl_.steer_weight_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.feedforwardterm_gain_scheduler_ != nullptr);
      if (_this->_impl_.feedforwardterm_gain_scheduler_ == nullptr) {
        _this->_impl_.feedforwardterm_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.feedforwardterm_gain_scheduler_);
      } else {
        _this->_impl_.feedforwardterm_gain_scheduler_->MergeFrom(*from._impl_.feedforwardterm_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.acc_lookup_pid_conf_ != nullptr);
      if (_this->_impl_.acc_lookup_pid_conf_ == nullptr) {
        _this->_impl_.acc_lookup_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.acc_lookup_pid_conf_);
      } else {
        _this->_impl_.acc_lookup_pid_conf_->MergeFrom(*from._impl_.acc_lookup_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.reverse_leadlag_conf_ != nullptr);
      if (_this->_impl_.reverse_leadlag_conf_ == nullptr) {
        _this->_impl_.reverse_leadlag_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::LeadlagConf>(arena, *from._impl_.reverse_leadlag_conf_);
      } else {
        _this->_impl_.reverse_leadlag_conf_->MergeFrom(*from._impl_.reverse_leadlag_conf_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.pitch_angle_filter_conf_ != nullptr);
      if (_this->_impl_.pitch_angle_filter_conf_ == nullptr) {
        _this->_impl_.pitch_angle_filter_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::latmpc::FilterConf>(arena, *from._impl_.pitch_angle_filter_conf_);
      } else {
        _this->_impl_.pitch_angle_filter_conf_->MergeFrom(*from._impl_.pitch_angle_filter_conf_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ts_ = from._impl_.ts_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.cf_ = from._impl_.cf_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.cr_ = from._impl_.cr_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.mass_fl_ = from._impl_.mass_fl_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.mass_fr_ = from._impl_.mass_fr_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.mass_rl_ = from._impl_.mass_rl_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.mass_rr_ = from._impl_.mass_rr_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.eps_ = from._impl_.eps_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.cutoff_freq_ = from._impl_.cutoff_freq_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.mean_filter_window_size_ = from._impl_.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.max_lateral_acceleration_ = from._impl_.max_lateral_acceleration_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.standstill_acceleration_ = from._impl_.standstill_acceleration_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.brake_minimum_action_ = from._impl_.brake_minimum_action_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.throttle_minimum_action_ = from._impl_.throttle_minimum_action_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.max_iteration_ = from._impl_.max_iteration_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.enable_mpc_feedforward_compensation_ = from._impl_.enable_mpc_feedforward_compensation_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.use_lqr_curvature_feedforward_ = from._impl_.use_lqr_curvature_feedforward_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.use_preview_ = from._impl_.use_preview_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.use_lookup_acc_pid_ = from._impl_.use_lookup_acc_pid_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.unconstrained_control_diff_limit_ = from._impl_.unconstrained_control_diff_limit_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.switch_speed_ = from._impl_.switch_speed_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.switch_speed_window_ = from._impl_.switch_speed_window_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.preview_window_ = from._impl_.preview_window_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.use_pitch_angle_filter_ = from._impl_.use_pitch_angle_filter_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.enable_look_ahead_back_control_ = from._impl_.enable_look_ahead_back_control_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.enable_reverse_leadlag_compensation_ = from._impl_.enable_reverse_leadlag_compensation_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.enable_feedback_augment_on_high_speed_ = from._impl_.enable_feedback_augment_on_high_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lookahead_station_ = from._impl_.lookahead_station_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lookback_station_ = from._impl_.lookback_station_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lookahead_station_high_speed_ = from._impl_.lookahead_station_high_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.lookback_station_high_speed_ = from._impl_.lookback_station_high_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.trajectory_transform_to_com_reverse_ = from._impl_.trajectory_transform_to_com_reverse_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.trajectory_transform_to_com_drive_ = from._impl_.trajectory_transform_to_com_drive_;
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.enable_slope_offset_ = from._impl_.enable_slope_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.use_preview_reference_check_ = from._impl_.use_preview_reference_check_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.use_kinematic_model_ = from._impl_.use_kinematic_model_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.enable_navigation_mode_error_filter_ = from._impl_.enable_navigation_mode_error_filter_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MPCControllerConf::CopyFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.latmpc.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MPCControllerConf::InternalSwap(MPCControllerConf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.matrix_q_.InternalSwap(&other->_impl_.matrix_q_);
  _impl_.matrix_r_.InternalSwap(&other->_impl_.matrix_r_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.enable_navigation_mode_error_filter_)
      + sizeof(MPCControllerConf::_impl_.enable_navigation_mode_error_filter_)
      - PROTOBUF_FIELD_OFFSET(MPCControllerConf, _impl_.lat_err_gain_scheduler_)>(
          reinterpret_cast<char*>(&_impl_.lat_err_gain_scheduler_),
          reinterpret_cast<char*>(&other->_impl_.lat_err_gain_scheduler_));
}

::google::protobuf::Metadata MPCControllerConf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace latmpc
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

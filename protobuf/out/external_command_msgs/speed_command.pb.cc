// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: external_command_msgs/speed_command.proto
// Protobuf C++ Version: 5.28.0-dev

#include "external_command_msgs/speed_command.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace external_command {

inline constexpr SpeedCommand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        command_id_{::int64_t{-1}},
        linear_speed_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SpeedCommand::SpeedCommand(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SpeedCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedCommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedCommandDefaultTypeInternal() {}
  union {
    SpeedCommand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedCommandDefaultTypeInternal _SpeedCommand_default_instance_;
}  // namespace external_command
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto = nullptr;
const ::uint32_t
    TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _impl_.command_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _impl_.linear_speed_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::control::external_command::SpeedCommand)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::external_command::_SpeedCommand_default_instance_._instance,
};
const char descriptor_table_protodef_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n)external_command_msgs/speed_command.pr"
    "oto\022\030control.external_command\032#common_ms"
    "gs/basic_msgs/header.proto\"\270\001\n\014SpeedComm"
    "and\022&\n\006header\030\001 \001(\0132\026.control.common.Hea"
    "der\022\026\n\ncommand_id\030\002 \001(\003:\002-1\022\026\n\014target_sp"
    "eed\030\003 \001(\001H\000\022\035\n\023target_speed_factor\030\004 \001(\001"
    "H\000\022!\n\027is_restore_target_speed\030\005 \001(\010H\000B\016\n"
    "\014linear_speed"
};
static const ::_pbi::DescriptorTable* const descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_deps[1] =
    {
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
};
static ::absl::once_flag descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto = {
    false,
    false,
    293,
    descriptor_table_protodef_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto,
    "external_command_msgs/speed_command.proto",
    &descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_once,
    descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto::offsets,
    file_level_enum_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto,
    file_level_service_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto,
};
namespace control {
namespace external_command {
// ===================================================================

class SpeedCommand::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SpeedCommand>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _impl_._oneof_case_);
};

void SpeedCommand::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpeedCommand::SpeedCommand(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.external_command.SpeedCommand)
}
inline PROTOBUF_NDEBUG_INLINE SpeedCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::external_command::SpeedCommand& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        linear_speed_{},
        _oneof_case_{from._oneof_case_[0]} {}

SpeedCommand::SpeedCommand(
    ::google::protobuf::Arena* arena,
    const SpeedCommand& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SpeedCommand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.command_id_ = from._impl_.command_id_;
  switch (linear_speed_case()) {
    case LINEAR_SPEED_NOT_SET:
      break;
      case kTargetSpeed:
        _impl_.linear_speed_.target_speed_ = from._impl_.linear_speed_.target_speed_;
        break;
      case kTargetSpeedFactor:
        _impl_.linear_speed_.target_speed_factor_ = from._impl_.linear_speed_.target_speed_factor_;
        break;
      case kIsRestoreTargetSpeed:
        _impl_.linear_speed_.is_restore_target_speed_ = from._impl_.linear_speed_.is_restore_target_speed_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:control.external_command.SpeedCommand)
}
inline PROTOBUF_NDEBUG_INLINE SpeedCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        command_id_{::int64_t{-1}},
        linear_speed_{},
        _oneof_case_{} {}

inline void SpeedCommand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.header_ = {};
}
SpeedCommand::~SpeedCommand() {
  // @@protoc_insertion_point(destructor:control.external_command.SpeedCommand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SpeedCommand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  if (has_linear_speed()) {
    clear_linear_speed();
  }
  _impl_.~Impl_();
}

void SpeedCommand::clear_linear_speed() {
// @@protoc_insertion_point(one_of_clear_start:control.external_command.SpeedCommand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (linear_speed_case()) {
    case kTargetSpeed: {
      // No need to clear
      break;
    }
    case kTargetSpeedFactor: {
      // No need to clear
      break;
    }
    case kIsRestoreTargetSpeed: {
      // No need to clear
      break;
    }
    case LINEAR_SPEED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LINEAR_SPEED_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SpeedCommand::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SpeedCommand::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SpeedCommand>(),
            ::google::protobuf::Message::GetNewImpl<SpeedCommand>(),
            ::google::protobuf::Message::GetClearImpl<SpeedCommand>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<SpeedCommand>(),
                ::google::protobuf::Message::GetSerializeImpl<SpeedCommand>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_._cached_size_),
            false,
        },
        &SpeedCommand::kDescriptorMethods,
        &descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SpeedCommand::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 5, 1, 0, 2> SpeedCommand::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_._has_bits_),
    0, // no _extensions_
    5, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SpeedCommand_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::external_command::SpeedCommand>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int64 command_id = 2 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SpeedCommand, _impl_.command_id_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.command_id_)}},
    // optional .control.common.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .control.common.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int64 command_id = 2 [default = -1];
    {PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.command_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // double target_speed = 3;
    {PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.linear_speed_.target_speed_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // double target_speed_factor = 4;
    {PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.linear_speed_.target_speed_factor_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // bool is_restore_target_speed = 5;
    {PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.linear_speed_.is_restore_target_speed_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::Header>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SpeedCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:control.external_command.SpeedCommand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    _impl_.command_id_ = ::int64_t{-1};
  }
  clear_linear_speed();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SpeedCommand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.external_command.SpeedCommand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.header_, _impl_.header_->GetCachedSize(), target, stream);
  }

  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_command_id(), target);
  }

  switch (linear_speed_case()) {
    case kTargetSpeed: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this->_internal_target_speed(), target);
      break;
    }
    case kTargetSpeedFactor: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this->_internal_target_speed_factor(), target);
      break;
    }
    case kIsRestoreTargetSpeed: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this->_internal_is_restore_target_speed(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.external_command.SpeedCommand)
  return target;
}

::size_t SpeedCommand::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.external_command.SpeedCommand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }
    // optional int64 command_id = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_command_id());
    }
  }
  switch (linear_speed_case()) {
    // double target_speed = 3;
    case kTargetSpeed: {
      total_size += 9;
      break;
    }
    // double target_speed_factor = 4;
    case kTargetSpeedFactor: {
      total_size += 9;
      break;
    }
    // bool is_restore_target_speed = 5;
    case kIsRestoreTargetSpeed: {
      total_size += 2;
      break;
    }
    case LINEAR_SPEED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void SpeedCommand::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SpeedCommand*>(&to_msg);
  auto& from = static_cast<const SpeedCommand&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.external_command.SpeedCommand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.command_id_ = from._impl_.command_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_linear_speed();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kTargetSpeed: {
        _this->_impl_.linear_speed_.target_speed_ = from._impl_.linear_speed_.target_speed_;
        break;
      }
      case kTargetSpeedFactor: {
        _this->_impl_.linear_speed_.target_speed_factor_ = from._impl_.linear_speed_.target_speed_factor_;
        break;
      }
      case kIsRestoreTargetSpeed: {
        _this->_impl_.linear_speed_.is_restore_target_speed_ = from._impl_.linear_speed_.is_restore_target_speed_;
        break;
      }
      case LINEAR_SPEED_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedCommand::CopyFrom(const SpeedCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.external_command.SpeedCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SpeedCommand::InternalSwap(SpeedCommand* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.command_id_)
      + sizeof(SpeedCommand::_impl_.command_id_)
      - PROTOBUF_FIELD_OFFSET(SpeedCommand, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
  swap(_impl_.linear_speed_, other->_impl_.linear_speed_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SpeedCommand::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace external_command
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

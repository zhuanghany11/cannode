// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: planning_msgs/planning.proto
// Protobuf C++ Version: 5.28.0-dev

#include "planning_msgs/planning.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace planning {

inline constexpr TaskStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_ms_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TaskStats::TaskStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TaskStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStatsDefaultTypeInternal() {}
  union {
    TaskStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStatsDefaultTypeInternal _TaskStats_default_instance_;

inline constexpr RSSInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cur_dist_lon_{0},
        rss_safe_dist_lon_{0},
        acc_lon_range_minimum_{0},
        acc_lon_range_maximum_{0},
        acc_lat_left_range_minimum_{0},
        acc_lat_left_range_maximum_{0},
        acc_lat_right_range_minimum_{0},
        acc_lat_right_range_maximum_{0},
        is_rss_safe_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RSSInfo::RSSInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RSSInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RSSInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RSSInfoDefaultTypeInternal() {}
  union {
    RSSInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RSSInfoDefaultTypeInternal _RSSInfo_default_instance_;

inline constexpr EStop::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_estop_{false} {}

template <typename>
PROTOBUF_CONSTEXPR EStop::EStop(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EStopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EStopDefaultTypeInternal() {}
  union {
    EStop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EStopDefaultTypeInternal _EStop_default_instance_;

inline constexpr LatencyStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        task_stats_{},
        total_time_ms_{0},
        init_frame_time_ms_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LatencyStats::LatencyStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LatencyStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyStatsDefaultTypeInternal() {}
  union {
    LatencyStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;

inline constexpr ADCTrajectory_CriticalRegion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : region_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ADCTrajectory_CriticalRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCTrajectory_CriticalRegionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCTrajectory_CriticalRegionDefaultTypeInternal() {}
  union {
    ADCTrajectory_CriticalRegion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCTrajectory_CriticalRegionDefaultTypeInternal _ADCTrajectory_CriticalRegion_default_instance_;

inline constexpr ADCTrajectory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        trajectory_point_{},
        path_point_{},
        point_llh_{},
        replan_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        header_{nullptr},
        estop_{nullptr},
        debug_{nullptr},
        decision_{nullptr},
        latency_stats_{nullptr},
        routing_header_{nullptr},
        engage_advice_{nullptr},
        critical_region_{nullptr},
        joint_angle_{nullptr},
        rss_info_{nullptr},
        total_path_length_{0},
        total_path_time_{0},
        reference_speed_{0},
        map_speed_limit_{0},
        gear_{static_cast< ::control::canbus::Chassis_GearPosition >(0)},
        is_replan_{false},
        car_in_dead_end_{false},
        right_of_way_status_{static_cast< ::control::planning::ADCTrajectory_RightOfWayStatus >(0)},
        trajectory_type_{static_cast< ::control::planning::ADCTrajectory_TrajectoryType >(0)},
        align_guide_loc_{0},
        lift_weight_{0},
        opendoor_status_{0},
        pto_{0u},
        plan_state_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ADCTrajectory::ADCTrajectory(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ADCTrajectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCTrajectoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCTrajectoryDefaultTypeInternal() {}
  union {
    ADCTrajectory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
}  // namespace planning
}  // namespace control
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_planning_5fmsgs_2fplanning_2eproto = nullptr;
const ::uint32_t
    TableStruct_planning_5fmsgs_2fplanning_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::planning::EStop, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::planning::EStop, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::planning::EStop, _impl_.is_estop_),
        PROTOBUF_FIELD_OFFSET(::control::planning::EStop, _impl_.reason_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, _impl_.time_ms_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, _impl_.total_time_ms_),
        PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, _impl_.task_stats_),
        PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, _impl_.init_frame_time_ms_),
        0,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.is_rss_safe_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.cur_dist_lon_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.rss_safe_dist_lon_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.acc_lon_range_minimum_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.acc_lon_range_maximum_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.acc_lat_left_range_minimum_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.acc_lat_left_range_maximum_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.acc_lat_right_range_minimum_),
        PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _impl_.acc_lat_right_range_maximum_),
        8,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory_CriticalRegion, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory_CriticalRegion, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.total_path_length_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.total_path_time_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.reference_speed_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.map_speed_limit_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.estop_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.debug_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.is_replan_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.gear_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.trajectory_point_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.path_point_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.decision_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.latency_stats_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.routing_header_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.right_of_way_status_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.engage_advice_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.critical_region_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.trajectory_type_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.replan_reason_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.car_in_dead_end_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.point_llh_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.lift_weight_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.align_guide_loc_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.opendoor_status_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.pto_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.plan_state_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.joint_angle_),
        PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _impl_.rss_info_),
        1,
        11,
        12,
        13,
        14,
        2,
        3,
        16,
        15,
        ~0u,
        ~0u,
        4,
        5,
        6,
        18,
        7,
        8,
        19,
        0,
        17,
        ~0u,
        21,
        20,
        22,
        23,
        24,
        9,
        10,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::control::planning::EStop)},
        {12, 22, -1, sizeof(::control::planning::TaskStats)},
        {24, 35, -1, sizeof(::control::planning::LatencyStats)},
        {38, 55, -1, sizeof(::control::planning::RSSInfo)},
        {64, -1, -1, sizeof(::control::planning::ADCTrajectory_CriticalRegion)},
        {73, 109, -1, sizeof(::control::planning::ADCTrajectory)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::planning::_EStop_default_instance_._instance,
    &::control::planning::_TaskStats_default_instance_._instance,
    &::control::planning::_LatencyStats_default_instance_._instance,
    &::control::planning::_RSSInfo_default_instance_._instance,
    &::control::planning::_ADCTrajectory_CriticalRegion_default_instance_._instance,
    &::control::planning::_ADCTrajectory_default_instance_._instance,
};
const char descriptor_table_protodef_planning_5fmsgs_2fplanning_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034planning_msgs/planning.proto\022\020control."
    "planning\032&common_msgs/chassis_msgs/chass"
    "is.proto\032$common_msgs/chassis_msgs/joint"
    ".proto\032(common_msgs/basic_msgs/drive_sta"
    "te.proto\032%common_msgs/basic_msgs/geometr"
    "y.proto\032#common_msgs/basic_msgs/header.p"
    "roto\032&common_msgs/basic_msgs/pnc_point.p"
    "roto\032\034planning_msgs/decision.proto\032%plan"
    "ning_msgs/planning_internal.proto\")\n\005ESt"
    "op\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002 \001(\t\"*\n\t"
    "TaskStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_ms\030\002 \001(\001"
    "\"r\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001 \001(\001\022"
    "/\n\ntask_stats\030\002 \003(\0132\033.control.planning.T"
    "askStats\022\032\n\022init_frame_time_ms\030\003 \001(\001\"\237\002\n"
    "\007RSSInfo\022\023\n\013is_rss_safe\030\001 \001(\010\022\024\n\014cur_dis"
    "t_lon\030\002 \001(\001\022\031\n\021rss_safe_dist_lon\030\003 \001(\001\022\035"
    "\n\025acc_lon_range_minimum\030\004 \001(\001\022\035\n\025acc_lon"
    "_range_maximum\030\005 \001(\001\022\"\n\032acc_lat_left_ran"
    "ge_minimum\030\006 \001(\001\022\"\n\032acc_lat_left_range_m"
    "aximum\030\007 \001(\001\022#\n\033acc_lat_right_range_mini"
    "mum\030\010 \001(\001\022#\n\033acc_lat_right_range_maximum"
    "\030\t \001(\001\"\355\n\n\rADCTrajectory\022&\n\006header\030\001 \001(\013"
    "2\026.control.common.Header\022\031\n\021total_path_l"
    "ength\030\002 \001(\001\022\027\n\017total_path_time\030\003 \001(\001\022\027\n\017"
    "reference_speed\030\004 \001(\001\022\027\n\017map_speed_limit"
    "\030\005 \001(\001\022&\n\005estop\030\006 \001(\0132\027.control.planning"
    ".EStop\022/\n\005debug\030\010 \001(\0132 .control.planning"
    "_internal.Debug\022\030\n\tis_replan\030\t \001(\010:\005fals"
    "e\0222\n\004gear\030\n \001(\0162$.control.canbus.Chassis"
    ".GearPosition\0229\n\020trajectory_point\030\014 \003(\0132"
    "\037.control.common.TrajectoryPoint\022-\n\npath"
    "_point\030\r \003(\0132\031.control.common.PathPoint\022"
    "2\n\010decision\030\016 \001(\0132 .control.planning.Dec"
    "isionResult\0225\n\rlatency_stats\030\017 \001(\0132\036.con"
    "trol.planning.LatencyStats\022.\n\016routing_he"
    "ader\030\020 \001(\0132\026.control.common.Header\022M\n\023ri"
    "ght_of_way_status\030\021 \001(\01620.control.planni"
    "ng.ADCTrajectory.RightOfWayStatus\0223\n\reng"
    "age_advice\030\023 \001(\0132\034.control.common.Engage"
    "Advice\022G\n\017critical_region\030\024 \001(\0132..contro"
    "l.planning.ADCTrajectory.CriticalRegion\022"
    "P\n\017trajectory_type\030\025 \001(\0162..control.plann"
    "ing.ADCTrajectory.TrajectoryType:\007UNKNOW"
    "N\022\025\n\rreplan_reason\030\026 \001(\t\022\027\n\017car_in_dead_"
    "end\030\030 \001(\010\022+\n\tpoint_llh\030\031 \003(\0132\030.control.c"
    "ommon.PointLLH\022\023\n\013lift_weight\030\032 \001(\005\022\027\n\017a"
    "lign_guide_loc\030\033 \001(\001\022\027\n\017opendoor_status\030"
    "\034 \001(\005\022\013\n\003pto\030\035 \001(\r\022\022\n\nplan_state\030\036 \001(\005\022/"
    "\n\013joint_angle\030\037 \001(\0132\032.control.canbus.Joi"
    "ntAngle\022+\n\010rss_info\030d \001(\0132\031.control.plan"
    "ning.RSSInfo\0329\n\016CriticalRegion\022\'\n\006region"
    "\030\001 \003(\0132\027.control.common.Polygon\"2\n\020Right"
    "OfWayStatus\022\017\n\013UNPROTECTED\020\000\022\r\n\tPROTECTE"
    "D\020\001\"q\n\016TrajectoryType\022\013\n\007UNKNOWN\020\000\022\n\n\006NO"
    "RMAL\020\001\022\021\n\rPATH_FALLBACK\020\002\022\022\n\016SPEED_FALLB"
    "ACK\020\003\022\017\n\013PATH_REUSED\020\004\022\016\n\nOPEN_SPACE\020\005*_"
    "\n\007JucType\022\013\n\007UNKNOWN\020\000\022\013\n\007IN_ROAD\020\001\022\016\n\nC"
    "ROSS_ROAD\020\002\022\r\n\tFORK_ROAD\020\003\022\r\n\tMAIN_SIDE\020"
    "\004\022\014\n\010DEAD_END\020\005"
};
static const ::_pbi::DescriptorTable* const descriptor_table_planning_5fmsgs_2fplanning_2eproto_deps[8] =
    {
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto,
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto,
        &::descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto,
        &::descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fjoint_2eproto,
        &::descriptor_table_planning_5fmsgs_2fdecision_2eproto,
        &::descriptor_table_planning_5fmsgs_2fplanning_5finternal_2eproto,
};
static ::absl::once_flag descriptor_table_planning_5fmsgs_2fplanning_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_planning_5fmsgs_2fplanning_2eproto = {
    false,
    false,
    2335,
    descriptor_table_protodef_planning_5fmsgs_2fplanning_2eproto,
    "planning_msgs/planning.proto",
    &descriptor_table_planning_5fmsgs_2fplanning_2eproto_once,
    descriptor_table_planning_5fmsgs_2fplanning_2eproto_deps,
    8,
    6,
    schemas,
    file_default_instances,
    TableStruct_planning_5fmsgs_2fplanning_2eproto::offsets,
    file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto,
    file_level_service_descriptors_planning_5fmsgs_2fplanning_2eproto,
};
namespace control {
namespace planning {
const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto);
  return file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ADCTrajectory_RightOfWayStatus_internal_data_[] = {
    131072u, 0u, };
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
constexpr int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto);
  return file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ADCTrajectory_TrajectoryType_internal_data_[] = {
    393216u, 0u, };
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::PATH_REUSED;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::OPEN_SPACE;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
constexpr int ADCTrajectory::TrajectoryType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* JucType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto);
  return file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t JucType_internal_data_[] = {
    393216u, 0u, };
bool JucType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class EStop::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EStop>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EStop, _impl_._has_bits_);
};

EStop::EStop(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.EStop)
}
inline PROTOBUF_NDEBUG_INLINE EStop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::planning::EStop& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        reason_(arena, from.reason_) {}

EStop::EStop(
    ::google::protobuf::Arena* arena,
    const EStop& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EStop* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.is_estop_ = from._impl_.is_estop_;

  // @@protoc_insertion_point(copy_constructor:control.planning.EStop)
}
inline PROTOBUF_NDEBUG_INLINE EStop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        reason_(arena) {}

inline void EStop::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_estop_ = {};
}
EStop::~EStop() {
  // @@protoc_insertion_point(destructor:control.planning.EStop)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EStop::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    EStop::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &EStop::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<EStop>(),
            ::google::protobuf::Message::GetNewImpl<EStop>(),
            ::google::protobuf::Message::GetClearImpl<EStop>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<EStop>(),
                ::google::protobuf::Message::GetSerializeImpl<EStop>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(EStop, _impl_._cached_size_),
            false,
        },
        &EStop::kDescriptorMethods,
        &descriptor_table_planning_5fmsgs_2fplanning_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* EStop::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 37, 2> EStop::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EStop, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EStop_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::planning::EStop>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string reason = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(EStop, _impl_.reason_)}},
    // optional bool is_estop = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EStop, _impl_.is_estop_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(EStop, _impl_.is_estop_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool is_estop = 1;
    {PROTOBUF_FIELD_OFFSET(EStop, _impl_.is_estop_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string reason = 2;
    {PROTOBUF_FIELD_OFFSET(EStop, _impl_.reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\6\0\0\0\0\0"
    "control.planning.EStop"
    "reason"
  }},
};

PROTOBUF_NOINLINE void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.EStop)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_.is_estop_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* EStop::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.EStop)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_reason();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.planning.EStop.reason");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.EStop)
  return target;
}

::size_t EStop::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.planning.EStop)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_reason());
    }
    // optional bool is_estop = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void EStop::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EStop*>(&to_msg);
  auto& from = static_cast<const EStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.planning.EStop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_estop_ = from._impl_.is_estop_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EStop::InternalSwap(EStop* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
        swap(_impl_.is_estop_, other->_impl_.is_estop_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TaskStats::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TaskStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TaskStats, _impl_._has_bits_);
};

TaskStats::TaskStats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.TaskStats)
}
inline PROTOBUF_NDEBUG_INLINE TaskStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::planning::TaskStats& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

TaskStats::TaskStats(
    ::google::protobuf::Arena* arena,
    const TaskStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TaskStats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.time_ms_ = from._impl_.time_ms_;

  // @@protoc_insertion_point(copy_constructor:control.planning.TaskStats)
}
inline PROTOBUF_NDEBUG_INLINE TaskStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void TaskStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_ms_ = {};
}
TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:control.planning.TaskStats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskStats::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TaskStats::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TaskStats::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TaskStats>(),
            ::google::protobuf::Message::GetNewImpl<TaskStats>(),
            ::google::protobuf::Message::GetClearImpl<TaskStats>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<TaskStats>(),
                ::google::protobuf::Message::GetSerializeImpl<TaskStats>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TaskStats, _impl_._cached_size_),
            false,
        },
        &TaskStats::kDescriptorMethods,
        &descriptor_table_planning_5fmsgs_2fplanning_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TaskStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2> TaskStats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskStats, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TaskStats_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::planning::TaskStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional double time_ms = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(TaskStats, _impl_.time_ms_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TaskStats, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(TaskStats, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional double time_ms = 2;
    {PROTOBUF_FIELD_OFFSET(TaskStats, _impl_.time_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\32\4\0\0\0\0\0\0"
    "control.planning.TaskStats"
    "name"
  }},
};

PROTOBUF_NOINLINE void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.TaskStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.time_ms_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* TaskStats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.TaskStats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.planning.TaskStats.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.TaskStats)
  return target;
}

::size_t TaskStats::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.planning.TaskStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }
    // optional double time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void TaskStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TaskStats*>(&to_msg);
  auto& from = static_cast<const TaskStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.planning.TaskStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_ms_ = from._impl_.time_ms_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TaskStats::InternalSwap(TaskStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.time_ms_, other->_impl_.time_ms_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LatencyStats::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LatencyStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_._has_bits_);
};

LatencyStats::LatencyStats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.LatencyStats)
}
inline PROTOBUF_NDEBUG_INLINE LatencyStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::planning::LatencyStats& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        task_stats_{visibility, arena, from.task_stats_} {}

LatencyStats::LatencyStats(
    ::google::protobuf::Arena* arena,
    const LatencyStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LatencyStats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_time_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_time_ms_),
           offsetof(Impl_, init_frame_time_ms_) -
               offsetof(Impl_, total_time_ms_) +
               sizeof(Impl_::init_frame_time_ms_));

  // @@protoc_insertion_point(copy_constructor:control.planning.LatencyStats)
}
inline PROTOBUF_NDEBUG_INLINE LatencyStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        task_stats_{visibility, arena} {}

inline void LatencyStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_time_ms_),
           0,
           offsetof(Impl_, init_frame_time_ms_) -
               offsetof(Impl_, total_time_ms_) +
               sizeof(Impl_::init_frame_time_ms_));
}
LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:control.planning.LatencyStats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LatencyStats::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    LatencyStats::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &LatencyStats::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<LatencyStats>(),
            ::google::protobuf::Message::GetNewImpl<LatencyStats>(),
            ::google::protobuf::Message::GetClearImpl<LatencyStats>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<LatencyStats>(),
                ::google::protobuf::Message::GetSerializeImpl<LatencyStats>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_._cached_size_),
            false,
        },
        &LatencyStats::kDescriptorMethods,
        &descriptor_table_planning_5fmsgs_2fplanning_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* LatencyStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> LatencyStats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LatencyStats_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::planning::LatencyStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double total_time_ms = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.total_time_ms_)}},
    // repeated .control.planning.TaskStats task_stats = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.task_stats_)}},
    // optional double init_frame_time_ms = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 1, 0, PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.init_frame_time_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double total_time_ms = 1;
    {PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.total_time_ms_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated .control.planning.TaskStats task_stats = 2;
    {PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.task_stats_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double init_frame_time_ms = 3;
    {PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.init_frame_time_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::planning::TaskStats>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.LatencyStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.total_time_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.init_frame_time_ms_) -
        reinterpret_cast<char*>(&_impl_.total_time_ms_)) + sizeof(_impl_.init_frame_time_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* LatencyStats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.LatencyStats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_total_time_ms(), target);
  }

  // repeated .control.planning.TaskStats task_stats = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_task_stats_size());
       i < n; i++) {
    const auto& repfield = this->_internal_task_stats().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_init_frame_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.LatencyStats)
  return target;
}

::size_t LatencyStats::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.planning.LatencyStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated .control.planning.TaskStats task_stats = 2;
     {
      total_size += 1UL * this->_internal_task_stats_size();
      for (const auto& msg : this->_internal_task_stats()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double total_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }
    // optional double init_frame_time_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void LatencyStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LatencyStats*>(&to_msg);
  auto& from = static_cast<const LatencyStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.planning.LatencyStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_task_stats()->MergeFrom(
      from._internal_task_stats());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.total_time_ms_ = from._impl_.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.init_frame_time_ms_ = from._impl_.init_frame_time_ms_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LatencyStats::InternalSwap(LatencyStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.task_stats_.InternalSwap(&other->_impl_.task_stats_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.init_frame_time_ms_)
      + sizeof(LatencyStats::_impl_.init_frame_time_ms_)
      - PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.total_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.total_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.total_time_ms_));
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RSSInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RSSInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_._has_bits_);
};

RSSInfo::RSSInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.RSSInfo)
}
RSSInfo::RSSInfo(
    ::google::protobuf::Arena* arena, const RSSInfo& from)
    : RSSInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RSSInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RSSInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cur_dist_lon_),
           0,
           offsetof(Impl_, is_rss_safe_) -
               offsetof(Impl_, cur_dist_lon_) +
               sizeof(Impl_::is_rss_safe_));
}
RSSInfo::~RSSInfo() {
  // @@protoc_insertion_point(destructor:control.planning.RSSInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RSSInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RSSInfo::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RSSInfo::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RSSInfo>(),
            ::google::protobuf::Message::GetNewImpl<RSSInfo>(),
            ::google::protobuf::Message::GetClearImpl<RSSInfo>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<RSSInfo>(),
                ::google::protobuf::Message::GetSerializeImpl<RSSInfo>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_._cached_size_),
            false,
        },
        &RSSInfo::kDescriptorMethods,
        &descriptor_table_planning_5fmsgs_2fplanning_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RSSInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 0, 2> RSSInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RSSInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::planning::RSSInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool is_rss_safe = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RSSInfo, _impl_.is_rss_safe_), 8>(),
     {8, 8, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.is_rss_safe_)}},
    // optional double cur_dist_lon = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.cur_dist_lon_)}},
    // optional double rss_safe_dist_lon = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 1, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.rss_safe_dist_lon_)}},
    // optional double acc_lon_range_minimum = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 2, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lon_range_minimum_)}},
    // optional double acc_lon_range_maximum = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 3, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lon_range_maximum_)}},
    // optional double acc_lat_left_range_minimum = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 4, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_left_range_minimum_)}},
    // optional double acc_lat_left_range_maximum = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 5, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_left_range_maximum_)}},
    // optional double acc_lat_right_range_minimum = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 6, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_right_range_minimum_)}},
    // optional double acc_lat_right_range_maximum = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 7, 0, PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_right_range_maximum_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool is_rss_safe = 1;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.is_rss_safe_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double cur_dist_lon = 2;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.cur_dist_lon_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double rss_safe_dist_lon = 3;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.rss_safe_dist_lon_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acc_lon_range_minimum = 4;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lon_range_minimum_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acc_lon_range_maximum = 5;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lon_range_maximum_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acc_lat_left_range_minimum = 6;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_left_range_minimum_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acc_lat_left_range_maximum = 7;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_left_range_maximum_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acc_lat_right_range_minimum = 8;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_right_range_minimum_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acc_lat_right_range_maximum = 9;
    {PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.acc_lat_right_range_maximum_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RSSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.RSSInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cur_dist_lon_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.acc_lat_right_range_maximum_) -
        reinterpret_cast<char*>(&_impl_.cur_dist_lon_)) + sizeof(_impl_.acc_lat_right_range_maximum_));
  }
  _impl_.is_rss_safe_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* RSSInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.RSSInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_rss_safe(), target);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_cur_dist_lon(), target);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_rss_safe_dist_lon(), target);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_acc_lon_range_minimum(), target);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_acc_lon_range_maximum(), target);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_acc_lat_left_range_minimum(), target);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_acc_lat_left_range_maximum(), target);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_acc_lat_right_range_minimum(), target);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_acc_lat_right_range_maximum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.RSSInfo)
  return target;
}

::size_t RSSInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.planning.RSSInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double cur_dist_lon = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }
    // optional double rss_safe_dist_lon = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }
    // optional double acc_lon_range_minimum = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }
    // optional double acc_lon_range_maximum = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }
    // optional double acc_lat_left_range_minimum = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional double acc_lat_left_range_maximum = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional double acc_lat_right_range_minimum = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }
    // optional double acc_lat_right_range_maximum = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }
  }
   {
    // optional bool is_rss_safe = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void RSSInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RSSInfo*>(&to_msg);
  auto& from = static_cast<const RSSInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.planning.RSSInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cur_dist_lon_ = from._impl_.cur_dist_lon_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rss_safe_dist_lon_ = from._impl_.rss_safe_dist_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.acc_lon_range_minimum_ = from._impl_.acc_lon_range_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.acc_lon_range_maximum_ = from._impl_.acc_lon_range_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.acc_lat_left_range_minimum_ = from._impl_.acc_lat_left_range_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.acc_lat_left_range_maximum_ = from._impl_.acc_lat_left_range_maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.acc_lat_right_range_minimum_ = from._impl_.acc_lat_right_range_minimum_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.acc_lat_right_range_maximum_ = from._impl_.acc_lat_right_range_maximum_;
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_impl_.is_rss_safe_ = from._impl_.is_rss_safe_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RSSInfo::CopyFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RSSInfo::InternalSwap(RSSInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.is_rss_safe_)
      + sizeof(RSSInfo::_impl_.is_rss_safe_)
      - PROTOBUF_FIELD_OFFSET(RSSInfo, _impl_.cur_dist_lon_)>(
          reinterpret_cast<char*>(&_impl_.cur_dist_lon_),
          reinterpret_cast<char*>(&other->_impl_.cur_dist_lon_));
}

::google::protobuf::Metadata RSSInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ADCTrajectory_CriticalRegion::_Internal {
 public:
};

void ADCTrajectory_CriticalRegion::clear_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.region_.Clear();
}
ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.ADCTrajectory.CriticalRegion)
}
inline PROTOBUF_NDEBUG_INLINE ADCTrajectory_CriticalRegion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::planning::ADCTrajectory_CriticalRegion& from_msg)
      : region_{visibility, arena, from.region_},
        _cached_size_{0} {}

ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(
    ::google::protobuf::Arena* arena,
    const ADCTrajectory_CriticalRegion& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ADCTrajectory_CriticalRegion* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:control.planning.ADCTrajectory.CriticalRegion)
}
inline PROTOBUF_NDEBUG_INLINE ADCTrajectory_CriticalRegion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : region_{visibility, arena},
        _cached_size_{0} {}

inline void ADCTrajectory_CriticalRegion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ADCTrajectory_CriticalRegion::~ADCTrajectory_CriticalRegion() {
  // @@protoc_insertion_point(destructor:control.planning.ADCTrajectory.CriticalRegion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ADCTrajectory_CriticalRegion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ADCTrajectory_CriticalRegion::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ADCTrajectory_CriticalRegion::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ADCTrajectory_CriticalRegion>(),
            ::google::protobuf::Message::GetNewImpl<ADCTrajectory_CriticalRegion>(),
            ::google::protobuf::Message::GetClearImpl<ADCTrajectory_CriticalRegion>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<ADCTrajectory_CriticalRegion>(),
                ::google::protobuf::Message::GetSerializeImpl<ADCTrajectory_CriticalRegion>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ADCTrajectory_CriticalRegion, _impl_._cached_size_),
            false,
        },
        &ADCTrajectory_CriticalRegion::kDescriptorMethods,
        &descriptor_table_planning_5fmsgs_2fplanning_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ADCTrajectory_CriticalRegion::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ADCTrajectory_CriticalRegion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ADCTrajectory_CriticalRegion_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::planning::ADCTrajectory_CriticalRegion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .control.common.Polygon region = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory_CriticalRegion, _impl_.region_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .control.common.Polygon region = 1;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory_CriticalRegion, _impl_.region_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::Polygon>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ADCTrajectory_CriticalRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.ADCTrajectory.CriticalRegion)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ADCTrajectory_CriticalRegion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.ADCTrajectory.CriticalRegion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .control.common.Polygon region = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_region_size());
       i < n; i++) {
    const auto& repfield = this->_internal_region().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.ADCTrajectory.CriticalRegion)
  return target;
}

::size_t ADCTrajectory_CriticalRegion::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.planning.ADCTrajectory.CriticalRegion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated .control.common.Polygon region = 1;
     {
      total_size += 1UL * this->_internal_region_size();
      for (const auto& msg : this->_internal_region()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void ADCTrajectory_CriticalRegion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ADCTrajectory_CriticalRegion*>(&to_msg);
  auto& from = static_cast<const ADCTrajectory_CriticalRegion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.planning.ADCTrajectory.CriticalRegion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_region()->MergeFrom(
      from._internal_region());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ADCTrajectory_CriticalRegion::InternalSwap(ADCTrajectory_CriticalRegion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.region_.InternalSwap(&other->_impl_.region_);
}

::google::protobuf::Metadata ADCTrajectory_CriticalRegion::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ADCTrajectory::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ADCTrajectory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_._has_bits_);
};

void ADCTrajectory::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectory::clear_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.debug_ != nullptr) _impl_.debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ADCTrajectory::clear_trajectory_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trajectory_point_.Clear();
}
void ADCTrajectory::clear_path_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_point_.Clear();
}
void ADCTrajectory::clear_decision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decision_ != nullptr) _impl_.decision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectory::clear_routing_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.routing_header_ != nullptr) _impl_.routing_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectory::clear_engage_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.engage_advice_ != nullptr) _impl_.engage_advice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ADCTrajectory::clear_point_llh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.point_llh_.Clear();
}
void ADCTrajectory::clear_joint_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.joint_angle_ != nullptr) _impl_.joint_angle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
ADCTrajectory::ADCTrajectory(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.ADCTrajectory)
}
inline PROTOBUF_NDEBUG_INLINE ADCTrajectory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::planning::ADCTrajectory& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        trajectory_point_{visibility, arena, from.trajectory_point_},
        path_point_{visibility, arena, from.path_point_},
        point_llh_{visibility, arena, from.point_llh_},
        replan_reason_(arena, from.replan_reason_) {}

ADCTrajectory::ADCTrajectory(
    ::google::protobuf::Arena* arena,
    const ADCTrajectory& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ADCTrajectory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.estop_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::planning::EStop>(
                              arena, *from._impl_.estop_)
                        : nullptr;
  _impl_.debug_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::planning_internal::Debug>(
                              arena, *from._impl_.debug_)
                        : nullptr;
  _impl_.decision_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::control::planning::DecisionResult>(
                              arena, *from._impl_.decision_)
                        : nullptr;
  _impl_.latency_stats_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::control::planning::LatencyStats>(
                              arena, *from._impl_.latency_stats_)
                        : nullptr;
  _impl_.routing_header_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Header>(
                              arena, *from._impl_.routing_header_)
                        : nullptr;
  _impl_.engage_advice_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::control::common::EngageAdvice>(
                              arena, *from._impl_.engage_advice_)
                        : nullptr;
  _impl_.critical_region_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::control::planning::ADCTrajectory_CriticalRegion>(
                              arena, *from._impl_.critical_region_)
                        : nullptr;
  _impl_.joint_angle_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::control::canbus::JointAngle>(
                              arena, *from._impl_.joint_angle_)
                        : nullptr;
  _impl_.rss_info_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::control::planning::RSSInfo>(
                              arena, *from._impl_.rss_info_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_path_length_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_path_length_),
           offsetof(Impl_, plan_state_) -
               offsetof(Impl_, total_path_length_) +
               sizeof(Impl_::plan_state_));

  // @@protoc_insertion_point(copy_constructor:control.planning.ADCTrajectory)
}
inline PROTOBUF_NDEBUG_INLINE ADCTrajectory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        trajectory_point_{visibility, arena},
        path_point_{visibility, arena},
        point_llh_{visibility, arena},
        replan_reason_(arena) {}

inline void ADCTrajectory::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, plan_state_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::plan_state_));
}
ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:control.planning.ADCTrajectory)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ADCTrajectory::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.replan_reason_.Destroy();
  delete _impl_.header_;
  delete _impl_.estop_;
  delete _impl_.debug_;
  delete _impl_.decision_;
  delete _impl_.latency_stats_;
  delete _impl_.routing_header_;
  delete _impl_.engage_advice_;
  delete _impl_.critical_region_;
  delete _impl_.joint_angle_;
  delete _impl_.rss_info_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ADCTrajectory::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ADCTrajectory::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ADCTrajectory>(),
            ::google::protobuf::Message::GetNewImpl<ADCTrajectory>(),
            ::google::protobuf::Message::GetClearImpl<ADCTrajectory>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<ADCTrajectory>(),
                ::google::protobuf::Message::GetSerializeImpl<ADCTrajectory>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_._cached_size_),
            false,
        },
        &ADCTrajectory::kDescriptorMethods,
        &descriptor_table_planning_5fmsgs_2fplanning_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ADCTrajectory::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 28, 16, 76, 7> ADCTrajectory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_._has_bits_),
    0, // no _extensions_
    100, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2151810112,  // skipmap
    offsetof(decltype(_table_), field_entries),
    28,  // num_field_entries
    16,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ADCTrajectory_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::planning::ADCTrajectory>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.header_)}},
    // optional double total_path_length = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 11, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.total_path_length_)}},
    // optional double total_path_time = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 12, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.total_path_time_)}},
    // optional double reference_speed = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 13, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.reference_speed_)}},
    // optional double map_speed_limit = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 14, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.map_speed_limit_)}},
    // optional .control.planning.EStop estop = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 1, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.estop_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.planning_internal.Debug debug = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 2, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.debug_)}},
    // optional bool is_replan = 9 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ADCTrajectory, _impl_.is_replan_), 16>(),
     {72, 16, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.is_replan_)}},
    // optional .control.canbus.Chassis.GearPosition gear = 10;
    {::_pbi::TcParser::FastEr0S1,
     {80, 15, 6, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.gear_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .control.common.TrajectoryPoint trajectory_point = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 3, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.trajectory_point_)}},
    // repeated .control.common.PathPoint path_point = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 4, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.path_point_)}},
    // optional .control.planning.DecisionResult decision = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 4, 5, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.decision_)}},
    // optional .control.planning.LatencyStats latency_stats = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 5, 6, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.latency_stats_)}},
    // optional .control.common.Header routing_header = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 6, 7, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.routing_header_)}},
    // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    {::_pbi::TcParser::FastEr0S2,
     {392, 18, 1, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.right_of_way_status_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.EngageAdvice engage_advice = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 7, 8, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.engage_advice_)}},
    // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 8, 9, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.critical_region_)}},
    // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    {::_pbi::TcParser::FastEr0S2,
     {424, 19, 5, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.trajectory_type_)}},
    // optional string replan_reason = 22;
    {::_pbi::TcParser::FastSS2,
     {434, 0, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.replan_reason_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool car_in_dead_end = 24;
    {::_pbi::TcParser::FastV8S2,
     {448, 17, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.car_in_dead_end_)}},
    // repeated .control.common.PointLLH point_llh = 25;
    {::_pbi::TcParser::FastMtR2,
     {458, 63, 10, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.point_llh_)}},
    // optional int32 lift_weight = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 21, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.lift_weight_)}},
    // optional double align_guide_loc = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 20, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.align_guide_loc_)}},
    // optional int32 opendoor_status = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 22, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.opendoor_status_)}},
    // optional uint32 pto = 29;
    {::_pbi::TcParser::FastV32S2,
     {488, 23, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.pto_)}},
    // optional int32 plan_state = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 24, 0, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.plan_state_)}},
    // optional .control.canbus.JointAngle joint_angle = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 9, 11, PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.joint_angle_)}},
  }}, {{
    100, 0, 1,
    65534, 27,
    65535, 65535
  }}, {{
    // optional .control.common.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.header_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double total_path_length = 2;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.total_path_length_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double total_path_time = 3;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.total_path_time_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double reference_speed = 4;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.reference_speed_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double map_speed_limit = 5;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.map_speed_limit_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.planning.EStop estop = 6;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.estop_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.planning_internal.Debug debug = 8;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.debug_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool is_replan = 9 [default = false];
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.is_replan_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .control.canbus.Chassis.GearPosition gear = 10;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.gear_), _Internal::kHasBitsOffset + 15, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // repeated .control.common.TrajectoryPoint trajectory_point = 12;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.trajectory_point_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .control.common.PathPoint path_point = 13;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.path_point_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.planning.DecisionResult decision = 14;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.decision_), _Internal::kHasBitsOffset + 4, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.planning.LatencyStats latency_stats = 15;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.latency_stats_), _Internal::kHasBitsOffset + 5, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Header routing_header = 16;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.routing_header_), _Internal::kHasBitsOffset + 6, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.right_of_way_status_), _Internal::kHasBitsOffset + 18, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .control.common.EngageAdvice engage_advice = 19;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.engage_advice_), _Internal::kHasBitsOffset + 7, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.critical_region_), _Internal::kHasBitsOffset + 8, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.trajectory_type_), _Internal::kHasBitsOffset + 19, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string replan_reason = 22;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.replan_reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool car_in_dead_end = 24;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.car_in_dead_end_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .control.common.PointLLH point_llh = 25;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.point_llh_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 lift_weight = 26;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.lift_weight_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double align_guide_loc = 27;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.align_guide_loc_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 opendoor_status = 28;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.opendoor_status_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 pto = 29;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.pto_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 plan_state = 30;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.plan_state_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .control.canbus.JointAngle joint_angle = 31;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.joint_angle_), _Internal::kHasBitsOffset + 9, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.planning.RSSInfo rss_info = 100;
    {PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.rss_info_), _Internal::kHasBitsOffset + 10, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::Header>()},
    {::_pbi::TcParser::GetTable<::control::planning::EStop>()},
    {::_pbi::TcParser::GetTable<::control::planning_internal::Debug>()},
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
    {::_pbi::TcParser::GetTable<::control::common::PathPoint>()},
    {::_pbi::TcParser::GetTable<::control::planning::DecisionResult>()},
    {::_pbi::TcParser::GetTable<::control::planning::LatencyStats>()},
    {::_pbi::TcParser::GetTable<::control::common::Header>()},
    {::_pbi::TcParser::GetTable<::control::common::EngageAdvice>()},
    {::_pbi::TcParser::GetTable<::control::planning::ADCTrajectory_CriticalRegion>()},
    {::_pbi::TcParser::GetTable<::control::common::PointLLH>()},
    {::_pbi::TcParser::GetTable<::control::canbus::JointAngle>()},
    {::_pbi::TcParser::GetTable<::control::planning::RSSInfo>()},
    {0, 7},
    {0, 2},
    {0, 6},
  }}, {{
    "\36\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\15\0\0\0\0\0\0\0\0\0\0\0\0"
    "control.planning.ADCTrajectory"
    "replan_reason"
  }},
};

PROTOBUF_NOINLINE void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.ADCTrajectory)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_point_.Clear();
  _impl_.path_point_.Clear();
  _impl_.point_llh_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.replan_reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.estop_ != nullptr);
      _impl_.estop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.debug_ != nullptr);
      _impl_.debug_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.decision_ != nullptr);
      _impl_.decision_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.latency_stats_ != nullptr);
      _impl_.latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.routing_header_ != nullptr);
      _impl_.routing_header_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.engage_advice_ != nullptr);
      _impl_.engage_advice_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.critical_region_ != nullptr);
      _impl_.critical_region_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.joint_angle_ != nullptr);
      _impl_.joint_angle_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.rss_info_ != nullptr);
      _impl_.rss_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.total_path_length_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.gear_) -
        reinterpret_cast<char*>(&_impl_.total_path_length_)) + sizeof(_impl_.gear_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.is_replan_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pto_) -
        reinterpret_cast<char*>(&_impl_.is_replan_)) + sizeof(_impl_.pto_));
  }
  _impl_.plan_state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ADCTrajectory::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.ADCTrajectory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.header_, _impl_.header_->GetCachedSize(), target, stream);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_total_path_time(), target);
  }

  // optional double reference_speed = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_reference_speed(), target);
  }

  // optional double map_speed_limit = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_map_speed_limit(), target);
  }

  // optional .control.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.estop_, _impl_.estop_->GetCachedSize(), target, stream);
  }

  // optional .control.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *_impl_.debug_, _impl_.debug_->GetCachedSize(), target, stream);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_is_replan(), target);
  }

  // optional .control.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_gear(), target);
  }

  // repeated .control.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_trajectory_point_size());
       i < n; i++) {
    const auto& repfield = this->_internal_trajectory_point().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            12, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .control.common.PathPoint path_point = 13;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_path_point_size());
       i < n; i++) {
    const auto& repfield = this->_internal_path_point().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            13, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional .control.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *_impl_.decision_, _impl_.decision_->GetCachedSize(), target, stream);
  }

  // optional .control.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *_impl_.latency_stats_, _impl_.latency_stats_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *_impl_.routing_header_, _impl_.routing_header_->GetCachedSize(), target, stream);
  }

  // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        17, this->_internal_right_of_way_status(), target);
  }

  // optional .control.common.EngageAdvice engage_advice = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, *_impl_.engage_advice_, _impl_.engage_advice_->GetCachedSize(), target, stream);
  }

  // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, *_impl_.critical_region_, _impl_.critical_region_->GetCachedSize(), target, stream);
  }

  // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        21, this->_internal_trajectory_type(), target);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_replan_reason();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.planning.ADCTrajectory.replan_reason");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional bool car_in_dead_end = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        24, this->_internal_car_in_dead_end(), target);
  }

  // repeated .control.common.PointLLH point_llh = 25;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_point_llh_size());
       i < n; i++) {
    const auto& repfield = this->_internal_point_llh().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            25, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional int32 lift_weight = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        26, this->_internal_lift_weight(), target);
  }

  // optional double align_guide_loc = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_align_guide_loc(), target);
  }

  // optional int32 opendoor_status = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        28, this->_internal_opendoor_status(), target);
  }

  // optional uint32 pto = 29;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        29, this->_internal_pto(), target);
  }

  // optional int32 plan_state = 30;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        30, this->_internal_plan_state(), target);
  }

  // optional .control.canbus.JointAngle joint_angle = 31;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        31, *_impl_.joint_angle_, _impl_.joint_angle_->GetCachedSize(), target, stream);
  }

  // optional .control.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        100, *_impl_.rss_info_, _impl_.rss_info_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.ADCTrajectory)
  return target;
}

::size_t ADCTrajectory::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.planning.ADCTrajectory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated .control.common.TrajectoryPoint trajectory_point = 12;
     {
      total_size += 1UL * this->_internal_trajectory_point_size();
      for (const auto& msg : this->_internal_trajectory_point()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .control.common.PathPoint path_point = 13;
     {
      total_size += 1UL * this->_internal_path_point_size();
      for (const auto& msg : this->_internal_path_point()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .control.common.PointLLH point_llh = 25;
     {
      total_size += 2UL * this->_internal_point_llh_size();
      for (const auto& msg : this->_internal_point_llh()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string replan_reason = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_replan_reason());
    }
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }
    // optional .control.planning.EStop estop = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.estop_);
    }
    // optional .control.planning_internal.Debug debug = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.debug_);
    }
    // optional .control.planning.DecisionResult decision = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.decision_);
    }
    // optional .control.planning.LatencyStats latency_stats = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.latency_stats_);
    }
    // optional .control.common.Header routing_header = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.routing_header_);
    }
    // optional .control.common.EngageAdvice engage_advice = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.engage_advice_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.critical_region_);
    }
    // optional .control.canbus.JointAngle joint_angle = 31;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joint_angle_);
    }
    // optional .control.planning.RSSInfo rss_info = 100;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rss_info_);
    }
    // optional double total_path_length = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 9;
    }
    // optional double total_path_time = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional double reference_speed = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
    // optional double map_speed_limit = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional .control.canbus.Chassis.GearPosition gear = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_gear());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_replan = 9 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2;
    }
    // optional bool car_in_dead_end = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }
    // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_right_of_way_status());
    }
    // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_trajectory_type());
    }
    // optional double align_guide_loc = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional int32 lift_weight = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_lift_weight());
    }
    // optional int32 opendoor_status = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_opendoor_status());
    }
    // optional uint32 pto = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_pto());
    }
  }
   {
    // optional int32 plan_state = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_plan_state());
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void ADCTrajectory::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ADCTrajectory*>(&to_msg);
  auto& from = static_cast<const ADCTrajectory&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.planning.ADCTrajectory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trajectory_point()->MergeFrom(
      from._internal_trajectory_point());
  _this->_internal_mutable_path_point()->MergeFrom(
      from._internal_path_point());
  _this->_internal_mutable_point_llh()->MergeFrom(
      from._internal_point_llh());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_replan_reason(from._internal_replan_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.estop_ != nullptr);
      if (_this->_impl_.estop_ == nullptr) {
        _this->_impl_.estop_ =
            ::google::protobuf::Message::CopyConstruct<::control::planning::EStop>(arena, *from._impl_.estop_);
      } else {
        _this->_impl_.estop_->MergeFrom(*from._impl_.estop_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.debug_ != nullptr);
      if (_this->_impl_.debug_ == nullptr) {
        _this->_impl_.debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::planning_internal::Debug>(arena, *from._impl_.debug_);
      } else {
        _this->_impl_.debug_->MergeFrom(*from._impl_.debug_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.decision_ != nullptr);
      if (_this->_impl_.decision_ == nullptr) {
        _this->_impl_.decision_ =
            ::google::protobuf::Message::CopyConstruct<::control::planning::DecisionResult>(arena, *from._impl_.decision_);
      } else {
        _this->_impl_.decision_->MergeFrom(*from._impl_.decision_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.latency_stats_ != nullptr);
      if (_this->_impl_.latency_stats_ == nullptr) {
        _this->_impl_.latency_stats_ =
            ::google::protobuf::Message::CopyConstruct<::control::planning::LatencyStats>(arena, *from._impl_.latency_stats_);
      } else {
        _this->_impl_.latency_stats_->MergeFrom(*from._impl_.latency_stats_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.routing_header_ != nullptr);
      if (_this->_impl_.routing_header_ == nullptr) {
        _this->_impl_.routing_header_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Header>(arena, *from._impl_.routing_header_);
      } else {
        _this->_impl_.routing_header_->MergeFrom(*from._impl_.routing_header_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.engage_advice_ != nullptr);
      if (_this->_impl_.engage_advice_ == nullptr) {
        _this->_impl_.engage_advice_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::EngageAdvice>(arena, *from._impl_.engage_advice_);
      } else {
        _this->_impl_.engage_advice_->MergeFrom(*from._impl_.engage_advice_);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.critical_region_ != nullptr);
      if (_this->_impl_.critical_region_ == nullptr) {
        _this->_impl_.critical_region_ =
            ::google::protobuf::Message::CopyConstruct<::control::planning::ADCTrajectory_CriticalRegion>(arena, *from._impl_.critical_region_);
      } else {
        _this->_impl_.critical_region_->MergeFrom(*from._impl_.critical_region_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.joint_angle_ != nullptr);
      if (_this->_impl_.joint_angle_ == nullptr) {
        _this->_impl_.joint_angle_ =
            ::google::protobuf::Message::CopyConstruct<::control::canbus::JointAngle>(arena, *from._impl_.joint_angle_);
      } else {
        _this->_impl_.joint_angle_->MergeFrom(*from._impl_.joint_angle_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.rss_info_ != nullptr);
      if (_this->_impl_.rss_info_ == nullptr) {
        _this->_impl_.rss_info_ =
            ::google::protobuf::Message::CopyConstruct<::control::planning::RSSInfo>(arena, *from._impl_.rss_info_);
      } else {
        _this->_impl_.rss_info_->MergeFrom(*from._impl_.rss_info_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.total_path_length_ = from._impl_.total_path_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.total_path_time_ = from._impl_.total_path_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.reference_speed_ = from._impl_.reference_speed_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.map_speed_limit_ = from._impl_.map_speed_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.gear_ = from._impl_.gear_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.is_replan_ = from._impl_.is_replan_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.car_in_dead_end_ = from._impl_.car_in_dead_end_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.right_of_way_status_ = from._impl_.right_of_way_status_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.trajectory_type_ = from._impl_.trajectory_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.align_guide_loc_ = from._impl_.align_guide_loc_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.lift_weight_ = from._impl_.lift_weight_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.opendoor_status_ = from._impl_.opendoor_status_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.pto_ = from._impl_.pto_;
    }
  }
  if (cached_has_bits & 0x01000000u) {
    _this->_impl_.plan_state_ = from._impl_.plan_state_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ADCTrajectory::InternalSwap(ADCTrajectory* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_point_.InternalSwap(&other->_impl_.trajectory_point_);
  _impl_.path_point_.InternalSwap(&other->_impl_.path_point_);
  _impl_.point_llh_.InternalSwap(&other->_impl_.point_llh_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.replan_reason_, &other->_impl_.replan_reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.plan_state_)
      + sizeof(ADCTrajectory::_impl_.plan_state_)
      - PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

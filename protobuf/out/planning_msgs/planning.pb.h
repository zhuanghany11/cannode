// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: planning_msgs/planning.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_planning_5fmsgs_2fplanning_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_planning_5fmsgs_2fplanning_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs/chassis_msgs/chassis.pb.h"
#include "common_msgs/chassis_msgs/joint.pb.h"
#include "common_msgs/basic_msgs/drive_state.pb.h"
#include "common_msgs/basic_msgs/geometry.pb.h"
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/pnc_point.pb.h"
#include "planning_msgs/decision.pb.h"
#include "planning_msgs/planning_internal.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fplanning_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_5fmsgs_2fplanning_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_planning_5fmsgs_2fplanning_2eproto;
namespace control {
namespace planning {
class ADCTrajectory;
struct ADCTrajectoryDefaultTypeInternal;
extern ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
class ADCTrajectory_CriticalRegion;
struct ADCTrajectory_CriticalRegionDefaultTypeInternal;
extern ADCTrajectory_CriticalRegionDefaultTypeInternal _ADCTrajectory_CriticalRegion_default_instance_;
class EStop;
struct EStopDefaultTypeInternal;
extern EStopDefaultTypeInternal _EStop_default_instance_;
class LatencyStats;
struct LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class RSSInfo;
struct RSSInfoDefaultTypeInternal;
extern RSSInfoDefaultTypeInternal _RSSInfo_default_instance_;
class TaskStats;
struct TaskStatsDefaultTypeInternal;
extern TaskStatsDefaultTypeInternal _TaskStats_default_instance_;
}  // namespace planning
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace planning {
enum ADCTrajectory_RightOfWayStatus : int {
  ADCTrajectory_RightOfWayStatus_UNPROTECTED = 0,
  ADCTrajectory_RightOfWayStatus_PROTECTED = 1,
};

bool ADCTrajectory_RightOfWayStatus_IsValid(int value);
extern const uint32_t ADCTrajectory_RightOfWayStatus_internal_data_[];
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN = static_cast<ADCTrajectory_RightOfWayStatus>(0);
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX = static_cast<ADCTrajectory_RightOfWayStatus>(1);
constexpr int ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ADCTrajectory_RightOfWayStatus_descriptor();
template <typename T>
const std::string& ADCTrajectory_RightOfWayStatus_Name(T value) {
  static_assert(std::is_same<T, ADCTrajectory_RightOfWayStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RightOfWayStatus_Name().");
  return ADCTrajectory_RightOfWayStatus_Name(static_cast<ADCTrajectory_RightOfWayStatus>(value));
}
template <>
inline const std::string& ADCTrajectory_RightOfWayStatus_Name(ADCTrajectory_RightOfWayStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ADCTrajectory_RightOfWayStatus_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ADCTrajectory_RightOfWayStatus_Parse(absl::string_view name, ADCTrajectory_RightOfWayStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_RightOfWayStatus>(
      ADCTrajectory_RightOfWayStatus_descriptor(), name, value);
}
enum ADCTrajectory_TrajectoryType : int {
  ADCTrajectory_TrajectoryType_UNKNOWN = 0,
  ADCTrajectory_TrajectoryType_NORMAL = 1,
  ADCTrajectory_TrajectoryType_PATH_FALLBACK = 2,
  ADCTrajectory_TrajectoryType_SPEED_FALLBACK = 3,
  ADCTrajectory_TrajectoryType_PATH_REUSED = 4,
  ADCTrajectory_TrajectoryType_OPEN_SPACE = 5,
};

bool ADCTrajectory_TrajectoryType_IsValid(int value);
extern const uint32_t ADCTrajectory_TrajectoryType_internal_data_[];
constexpr ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MIN = static_cast<ADCTrajectory_TrajectoryType>(0);
constexpr ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MAX = static_cast<ADCTrajectory_TrajectoryType>(5);
constexpr int ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ADCTrajectory_TrajectoryType_descriptor();
template <typename T>
const std::string& ADCTrajectory_TrajectoryType_Name(T value) {
  static_assert(std::is_same<T, ADCTrajectory_TrajectoryType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrajectoryType_Name().");
  return ADCTrajectory_TrajectoryType_Name(static_cast<ADCTrajectory_TrajectoryType>(value));
}
template <>
inline const std::string& ADCTrajectory_TrajectoryType_Name(ADCTrajectory_TrajectoryType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ADCTrajectory_TrajectoryType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ADCTrajectory_TrajectoryType_Parse(absl::string_view name, ADCTrajectory_TrajectoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_TrajectoryType>(
      ADCTrajectory_TrajectoryType_descriptor(), name, value);
}
enum JucType : int {
  UNKNOWN = 0,
  IN_ROAD = 1,
  CROSS_ROAD = 2,
  FORK_ROAD = 3,
  MAIN_SIDE = 4,
  DEAD_END = 5,
};

bool JucType_IsValid(int value);
extern const uint32_t JucType_internal_data_[];
constexpr JucType JucType_MIN = static_cast<JucType>(0);
constexpr JucType JucType_MAX = static_cast<JucType>(5);
constexpr int JucType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
JucType_descriptor();
template <typename T>
const std::string& JucType_Name(T value) {
  static_assert(std::is_same<T, JucType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JucType_Name().");
  return JucType_Name(static_cast<JucType>(value));
}
template <>
inline const std::string& JucType_Name(JucType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JucType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool JucType_Parse(absl::string_view name, JucType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JucType>(
      JucType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TaskStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.planning.TaskStats) */ {
 public:
  inline TaskStats() : TaskStats(nullptr) {}
  ~TaskStats() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskStats(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskStats(const TaskStats& from) : TaskStats(nullptr, from) {}
  inline TaskStats(TaskStats&& from) noexcept
      : TaskStats(nullptr, std::move(from)) {}
  inline TaskStats& operator=(const TaskStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStats& operator=(TaskStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStats* internal_default_instance() {
    return reinterpret_cast<const TaskStats*>(
        &_TaskStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TaskStats& a, TaskStats& b) { a.Swap(&b); }
  inline void Swap(TaskStats* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskStats* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TaskStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskStats& from) { TaskStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskStats* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.planning.TaskStats"; }

 protected:
  explicit TaskStats(::google::protobuf::Arena* arena);
  TaskStats(::google::protobuf::Arena* arena, const TaskStats& from);
  TaskStats(::google::protobuf::Arena* arena, TaskStats&& from) noexcept
      : TaskStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kTimeMsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional double time_ms = 2;
  bool has_time_ms() const;
  void clear_time_ms() ;
  double time_ms() const;
  void set_time_ms(double value);

  private:
  double _internal_time_ms() const;
  void _internal_set_time_ms(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.planning.TaskStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskStats_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskStats& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    double time_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_planning_5fmsgs_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class RSSInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.planning.RSSInfo) */ {
 public:
  inline RSSInfo() : RSSInfo(nullptr) {}
  ~RSSInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RSSInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline RSSInfo(const RSSInfo& from) : RSSInfo(nullptr, from) {}
  inline RSSInfo(RSSInfo&& from) noexcept
      : RSSInfo(nullptr, std::move(from)) {}
  inline RSSInfo& operator=(const RSSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSSInfo& operator=(RSSInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSSInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSSInfo* internal_default_instance() {
    return reinterpret_cast<const RSSInfo*>(
        &_RSSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RSSInfo& a, RSSInfo& b) { a.Swap(&b); }
  inline void Swap(RSSInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSSInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RSSInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RSSInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RSSInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RSSInfo& from) { RSSInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RSSInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.planning.RSSInfo"; }

 protected:
  explicit RSSInfo(::google::protobuf::Arena* arena);
  RSSInfo(::google::protobuf::Arena* arena, const RSSInfo& from);
  RSSInfo(::google::protobuf::Arena* arena, RSSInfo&& from) noexcept
      : RSSInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCurDistLonFieldNumber = 2,
    kRssSafeDistLonFieldNumber = 3,
    kAccLonRangeMinimumFieldNumber = 4,
    kAccLonRangeMaximumFieldNumber = 5,
    kAccLatLeftRangeMinimumFieldNumber = 6,
    kAccLatLeftRangeMaximumFieldNumber = 7,
    kAccLatRightRangeMinimumFieldNumber = 8,
    kAccLatRightRangeMaximumFieldNumber = 9,
    kIsRssSafeFieldNumber = 1,
  };
  // optional double cur_dist_lon = 2;
  bool has_cur_dist_lon() const;
  void clear_cur_dist_lon() ;
  double cur_dist_lon() const;
  void set_cur_dist_lon(double value);

  private:
  double _internal_cur_dist_lon() const;
  void _internal_set_cur_dist_lon(double value);

  public:
  // optional double rss_safe_dist_lon = 3;
  bool has_rss_safe_dist_lon() const;
  void clear_rss_safe_dist_lon() ;
  double rss_safe_dist_lon() const;
  void set_rss_safe_dist_lon(double value);

  private:
  double _internal_rss_safe_dist_lon() const;
  void _internal_set_rss_safe_dist_lon(double value);

  public:
  // optional double acc_lon_range_minimum = 4;
  bool has_acc_lon_range_minimum() const;
  void clear_acc_lon_range_minimum() ;
  double acc_lon_range_minimum() const;
  void set_acc_lon_range_minimum(double value);

  private:
  double _internal_acc_lon_range_minimum() const;
  void _internal_set_acc_lon_range_minimum(double value);

  public:
  // optional double acc_lon_range_maximum = 5;
  bool has_acc_lon_range_maximum() const;
  void clear_acc_lon_range_maximum() ;
  double acc_lon_range_maximum() const;
  void set_acc_lon_range_maximum(double value);

  private:
  double _internal_acc_lon_range_maximum() const;
  void _internal_set_acc_lon_range_maximum(double value);

  public:
  // optional double acc_lat_left_range_minimum = 6;
  bool has_acc_lat_left_range_minimum() const;
  void clear_acc_lat_left_range_minimum() ;
  double acc_lat_left_range_minimum() const;
  void set_acc_lat_left_range_minimum(double value);

  private:
  double _internal_acc_lat_left_range_minimum() const;
  void _internal_set_acc_lat_left_range_minimum(double value);

  public:
  // optional double acc_lat_left_range_maximum = 7;
  bool has_acc_lat_left_range_maximum() const;
  void clear_acc_lat_left_range_maximum() ;
  double acc_lat_left_range_maximum() const;
  void set_acc_lat_left_range_maximum(double value);

  private:
  double _internal_acc_lat_left_range_maximum() const;
  void _internal_set_acc_lat_left_range_maximum(double value);

  public:
  // optional double acc_lat_right_range_minimum = 8;
  bool has_acc_lat_right_range_minimum() const;
  void clear_acc_lat_right_range_minimum() ;
  double acc_lat_right_range_minimum() const;
  void set_acc_lat_right_range_minimum(double value);

  private:
  double _internal_acc_lat_right_range_minimum() const;
  void _internal_set_acc_lat_right_range_minimum(double value);

  public:
  // optional double acc_lat_right_range_maximum = 9;
  bool has_acc_lat_right_range_maximum() const;
  void clear_acc_lat_right_range_maximum() ;
  double acc_lat_right_range_maximum() const;
  void set_acc_lat_right_range_maximum(double value);

  private:
  double _internal_acc_lat_right_range_maximum() const;
  void _internal_set_acc_lat_right_range_maximum(double value);

  public:
  // optional bool is_rss_safe = 1;
  bool has_is_rss_safe() const;
  void clear_is_rss_safe() ;
  bool is_rss_safe() const;
  void set_is_rss_safe(bool value);

  private:
  bool _internal_is_rss_safe() const;
  void _internal_set_is_rss_safe(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.planning.RSSInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RSSInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RSSInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double cur_dist_lon_;
    double rss_safe_dist_lon_;
    double acc_lon_range_minimum_;
    double acc_lon_range_maximum_;
    double acc_lat_left_range_minimum_;
    double acc_lat_left_range_maximum_;
    double acc_lat_right_range_minimum_;
    double acc_lat_right_range_maximum_;
    bool is_rss_safe_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_planning_5fmsgs_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class EStop final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.planning.EStop) */ {
 public:
  inline EStop() : EStop(nullptr) {}
  ~EStop() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EStop(
      ::google::protobuf::internal::ConstantInitialized);

  inline EStop(const EStop& from) : EStop(nullptr, from) {}
  inline EStop(EStop&& from) noexcept
      : EStop(nullptr, std::move(from)) {}
  inline EStop& operator=(const EStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline EStop& operator=(EStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const EStop* internal_default_instance() {
    return reinterpret_cast<const EStop*>(
        &_EStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EStop& a, EStop& b) { a.Swap(&b); }
  inline void Swap(EStop* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EStop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EStop* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<EStop>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EStop& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EStop& from) { EStop::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EStop* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.planning.EStop"; }

 protected:
  explicit EStop(::google::protobuf::Arena* arena);
  EStop(::google::protobuf::Arena* arena, const EStop& from);
  EStop(::google::protobuf::Arena* arena, EStop&& from) noexcept
      : EStop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kIsEstopFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // optional bool is_estop = 1;
  bool has_is_estop() const;
  void clear_is_estop() ;
  bool is_estop() const;
  void set_is_estop(bool value);

  private:
  bool _internal_is_estop() const;
  void _internal_set_is_estop(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.planning.EStop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EStop_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EStop& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool is_estop_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_planning_5fmsgs_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class LatencyStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.planning.LatencyStats) */ {
 public:
  inline LatencyStats() : LatencyStats(nullptr) {}
  ~LatencyStats() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LatencyStats(
      ::google::protobuf::internal::ConstantInitialized);

  inline LatencyStats(const LatencyStats& from) : LatencyStats(nullptr, from) {}
  inline LatencyStats(LatencyStats&& from) noexcept
      : LatencyStats(nullptr, std::move(from)) {}
  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyStats& operator=(LatencyStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyStats* internal_default_instance() {
    return reinterpret_cast<const LatencyStats*>(
        &_LatencyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LatencyStats& a, LatencyStats& b) { a.Swap(&b); }
  inline void Swap(LatencyStats* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatencyStats* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LatencyStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LatencyStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LatencyStats& from) { LatencyStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LatencyStats* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.planning.LatencyStats"; }

 protected:
  explicit LatencyStats(::google::protobuf::Arena* arena);
  LatencyStats(::google::protobuf::Arena* arena, const LatencyStats& from);
  LatencyStats(::google::protobuf::Arena* arena, LatencyStats&& from) noexcept
      : LatencyStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskStatsFieldNumber = 2,
    kTotalTimeMsFieldNumber = 1,
    kInitFrameTimeMsFieldNumber = 3,
  };
  // repeated .control.planning.TaskStats task_stats = 2;
  int task_stats_size() const;
  private:
  int _internal_task_stats_size() const;

  public:
  void clear_task_stats() ;
  ::control::planning::TaskStats* mutable_task_stats(int index);
  ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>* mutable_task_stats();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>& _internal_task_stats() const;
  ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>* _internal_mutable_task_stats();
  public:
  const ::control::planning::TaskStats& task_stats(int index) const;
  ::control::planning::TaskStats* add_task_stats();
  const ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>& task_stats() const;
  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  void clear_total_time_ms() ;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  private:
  double _internal_total_time_ms() const;
  void _internal_set_total_time_ms(double value);

  public:
  // optional double init_frame_time_ms = 3;
  bool has_init_frame_time_ms() const;
  void clear_init_frame_time_ms() ;
  double init_frame_time_ms() const;
  void set_init_frame_time_ms(double value);

  private:
  double _internal_init_frame_time_ms() const;
  void _internal_set_init_frame_time_ms(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.planning.LatencyStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LatencyStats_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LatencyStats& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::control::planning::TaskStats > task_stats_;
    double total_time_ms_;
    double init_frame_time_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_planning_5fmsgs_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCTrajectory_CriticalRegion final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.planning.ADCTrajectory.CriticalRegion) */ {
 public:
  inline ADCTrajectory_CriticalRegion() : ADCTrajectory_CriticalRegion(nullptr) {}
  ~ADCTrajectory_CriticalRegion() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ADCTrajectory_CriticalRegion(
      ::google::protobuf::internal::ConstantInitialized);

  inline ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from) : ADCTrajectory_CriticalRegion(nullptr, from) {}
  inline ADCTrajectory_CriticalRegion(ADCTrajectory_CriticalRegion&& from) noexcept
      : ADCTrajectory_CriticalRegion(nullptr, std::move(from)) {}
  inline ADCTrajectory_CriticalRegion& operator=(const ADCTrajectory_CriticalRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectory_CriticalRegion& operator=(ADCTrajectory_CriticalRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCTrajectory_CriticalRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCTrajectory_CriticalRegion* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory_CriticalRegion*>(
        &_ADCTrajectory_CriticalRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ADCTrajectory_CriticalRegion& a, ADCTrajectory_CriticalRegion& b) { a.Swap(&b); }
  inline void Swap(ADCTrajectory_CriticalRegion* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCTrajectory_CriticalRegion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCTrajectory_CriticalRegion* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ADCTrajectory_CriticalRegion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ADCTrajectory_CriticalRegion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ADCTrajectory_CriticalRegion& from) { ADCTrajectory_CriticalRegion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ADCTrajectory_CriticalRegion* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.planning.ADCTrajectory.CriticalRegion"; }

 protected:
  explicit ADCTrajectory_CriticalRegion(::google::protobuf::Arena* arena);
  ADCTrajectory_CriticalRegion(::google::protobuf::Arena* arena, const ADCTrajectory_CriticalRegion& from);
  ADCTrajectory_CriticalRegion(::google::protobuf::Arena* arena, ADCTrajectory_CriticalRegion&& from) noexcept
      : ADCTrajectory_CriticalRegion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRegionFieldNumber = 1,
  };
  // repeated .control.common.Polygon region = 1;
  int region_size() const;
  private:
  int _internal_region_size() const;

  public:
  void clear_region() ;
  ::control::common::Polygon* mutable_region(int index);
  ::google::protobuf::RepeatedPtrField<::control::common::Polygon>* mutable_region();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::common::Polygon>& _internal_region() const;
  ::google::protobuf::RepeatedPtrField<::control::common::Polygon>* _internal_mutable_region();
  public:
  const ::control::common::Polygon& region(int index) const;
  ::control::common::Polygon* add_region();
  const ::google::protobuf::RepeatedPtrField<::control::common::Polygon>& region() const;
  // @@protoc_insertion_point(class_scope:control.planning.ADCTrajectory.CriticalRegion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ADCTrajectory_CriticalRegion_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ADCTrajectory_CriticalRegion& from_msg);
    ::google::protobuf::RepeatedPtrField< ::control::common::Polygon > region_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_planning_5fmsgs_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCTrajectory final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.planning.ADCTrajectory) */ {
 public:
  inline ADCTrajectory() : ADCTrajectory(nullptr) {}
  ~ADCTrajectory() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ADCTrajectory(
      ::google::protobuf::internal::ConstantInitialized);

  inline ADCTrajectory(const ADCTrajectory& from) : ADCTrajectory(nullptr, from) {}
  inline ADCTrajectory(ADCTrajectory&& from) noexcept
      : ADCTrajectory(nullptr, std::move(from)) {}
  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectory& operator=(ADCTrajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCTrajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCTrajectory* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory*>(
        &_ADCTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ADCTrajectory& a, ADCTrajectory& b) { a.Swap(&b); }
  inline void Swap(ADCTrajectory* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCTrajectory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCTrajectory* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ADCTrajectory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ADCTrajectory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ADCTrajectory& from) { ADCTrajectory::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ADCTrajectory* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.planning.ADCTrajectory"; }

 protected:
  explicit ADCTrajectory(::google::protobuf::Arena* arena);
  ADCTrajectory(::google::protobuf::Arena* arena, const ADCTrajectory& from);
  ADCTrajectory(::google::protobuf::Arena* arena, ADCTrajectory&& from) noexcept
      : ADCTrajectory(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using CriticalRegion = ADCTrajectory_CriticalRegion;
  using RightOfWayStatus = ADCTrajectory_RightOfWayStatus;
  static constexpr RightOfWayStatus UNPROTECTED = ADCTrajectory_RightOfWayStatus_UNPROTECTED;
  static constexpr RightOfWayStatus PROTECTED = ADCTrajectory_RightOfWayStatus_PROTECTED;
  static inline bool RightOfWayStatus_IsValid(int value) {
    return ADCTrajectory_RightOfWayStatus_IsValid(value);
  }
  static constexpr RightOfWayStatus RightOfWayStatus_MIN = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN;
  static constexpr RightOfWayStatus RightOfWayStatus_MAX = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX;
  static constexpr int RightOfWayStatus_ARRAYSIZE = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RightOfWayStatus_descriptor() {
    return ADCTrajectory_RightOfWayStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& RightOfWayStatus_Name(T value) {
    return ADCTrajectory_RightOfWayStatus_Name(value);
  }
  static inline bool RightOfWayStatus_Parse(absl::string_view name, RightOfWayStatus* value) {
    return ADCTrajectory_RightOfWayStatus_Parse(name, value);
  }
  using TrajectoryType = ADCTrajectory_TrajectoryType;
  static constexpr TrajectoryType UNKNOWN = ADCTrajectory_TrajectoryType_UNKNOWN;
  static constexpr TrajectoryType NORMAL = ADCTrajectory_TrajectoryType_NORMAL;
  static constexpr TrajectoryType PATH_FALLBACK = ADCTrajectory_TrajectoryType_PATH_FALLBACK;
  static constexpr TrajectoryType SPEED_FALLBACK = ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
  static constexpr TrajectoryType PATH_REUSED = ADCTrajectory_TrajectoryType_PATH_REUSED;
  static constexpr TrajectoryType OPEN_SPACE = ADCTrajectory_TrajectoryType_OPEN_SPACE;
  static inline bool TrajectoryType_IsValid(int value) {
    return ADCTrajectory_TrajectoryType_IsValid(value);
  }
  static constexpr TrajectoryType TrajectoryType_MIN = ADCTrajectory_TrajectoryType_TrajectoryType_MIN;
  static constexpr TrajectoryType TrajectoryType_MAX = ADCTrajectory_TrajectoryType_TrajectoryType_MAX;
  static constexpr int TrajectoryType_ARRAYSIZE = ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TrajectoryType_descriptor() {
    return ADCTrajectory_TrajectoryType_descriptor();
  }
  template <typename T>
  static inline const std::string& TrajectoryType_Name(T value) {
    return ADCTrajectory_TrajectoryType_Name(value);
  }
  static inline bool TrajectoryType_Parse(absl::string_view name, TrajectoryType* value) {
    return ADCTrajectory_TrajectoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTrajectoryPointFieldNumber = 12,
    kPathPointFieldNumber = 13,
    kPointLlhFieldNumber = 25,
    kReplanReasonFieldNumber = 22,
    kHeaderFieldNumber = 1,
    kEstopFieldNumber = 6,
    kDebugFieldNumber = 8,
    kDecisionFieldNumber = 14,
    kLatencyStatsFieldNumber = 15,
    kRoutingHeaderFieldNumber = 16,
    kEngageAdviceFieldNumber = 19,
    kCriticalRegionFieldNumber = 20,
    kJointAngleFieldNumber = 31,
    kRssInfoFieldNumber = 100,
    kTotalPathLengthFieldNumber = 2,
    kTotalPathTimeFieldNumber = 3,
    kReferenceSpeedFieldNumber = 4,
    kMapSpeedLimitFieldNumber = 5,
    kGearFieldNumber = 10,
    kIsReplanFieldNumber = 9,
    kCarInDeadEndFieldNumber = 24,
    kRightOfWayStatusFieldNumber = 17,
    kTrajectoryTypeFieldNumber = 21,
    kAlignGuideLocFieldNumber = 27,
    kLiftWeightFieldNumber = 26,
    kOpendoorStatusFieldNumber = 28,
    kPtoFieldNumber = 29,
    kPlanStateFieldNumber = 30,
  };
  // repeated .control.common.TrajectoryPoint trajectory_point = 12;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;

  public:
  void clear_trajectory_point() ;
  ::control::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* mutable_trajectory_point();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& _internal_trajectory_point() const;
  ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* _internal_mutable_trajectory_point();
  public:
  const ::control::common::TrajectoryPoint& trajectory_point(int index) const;
  ::control::common::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& trajectory_point() const;
  // repeated .control.common.PathPoint path_point = 13;
  int path_point_size() const;
  private:
  int _internal_path_point_size() const;

  public:
  void clear_path_point() ;
  ::control::common::PathPoint* mutable_path_point(int index);
  ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>* mutable_path_point();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>& _internal_path_point() const;
  ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>* _internal_mutable_path_point();
  public:
  const ::control::common::PathPoint& path_point(int index) const;
  ::control::common::PathPoint* add_path_point();
  const ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>& path_point() const;
  // repeated .control.common.PointLLH point_llh = 25;
  int point_llh_size() const;
  private:
  int _internal_point_llh_size() const;

  public:
  void clear_point_llh() ;
  ::control::common::PointLLH* mutable_point_llh(int index);
  ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>* mutable_point_llh();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>& _internal_point_llh() const;
  ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>* _internal_mutable_point_llh();
  public:
  const ::control::common::PointLLH& point_llh(int index) const;
  ::control::common::PointLLH* add_point_llh();
  const ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>& point_llh() const;
  // optional string replan_reason = 22;
  bool has_replan_reason() const;
  void clear_replan_reason() ;
  const std::string& replan_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_replan_reason(Arg_&& arg, Args_... args);
  std::string* mutable_replan_reason();
  PROTOBUF_NODISCARD std::string* release_replan_reason();
  void set_allocated_replan_reason(std::string* value);

  private:
  const std::string& _internal_replan_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_replan_reason(
      const std::string& value);
  std::string* _internal_mutable_replan_reason();

  public:
  // optional .control.common.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::control::common::Header& header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_header();

  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();

  public:
  // optional .control.planning.EStop estop = 6;
  bool has_estop() const;
  void clear_estop() ;
  const ::control::planning::EStop& estop() const;
  PROTOBUF_NODISCARD ::control::planning::EStop* release_estop();
  ::control::planning::EStop* mutable_estop();
  void set_allocated_estop(::control::planning::EStop* value);
  void unsafe_arena_set_allocated_estop(::control::planning::EStop* value);
  ::control::planning::EStop* unsafe_arena_release_estop();

  private:
  const ::control::planning::EStop& _internal_estop() const;
  ::control::planning::EStop* _internal_mutable_estop();

  public:
  // optional .control.planning_internal.Debug debug = 8;
  bool has_debug() const;
  void clear_debug() ;
  const ::control::planning_internal::Debug& debug() const;
  PROTOBUF_NODISCARD ::control::planning_internal::Debug* release_debug();
  ::control::planning_internal::Debug* mutable_debug();
  void set_allocated_debug(::control::planning_internal::Debug* value);
  void unsafe_arena_set_allocated_debug(::control::planning_internal::Debug* value);
  ::control::planning_internal::Debug* unsafe_arena_release_debug();

  private:
  const ::control::planning_internal::Debug& _internal_debug() const;
  ::control::planning_internal::Debug* _internal_mutable_debug();

  public:
  // optional .control.planning.DecisionResult decision = 14;
  bool has_decision() const;
  void clear_decision() ;
  const ::control::planning::DecisionResult& decision() const;
  PROTOBUF_NODISCARD ::control::planning::DecisionResult* release_decision();
  ::control::planning::DecisionResult* mutable_decision();
  void set_allocated_decision(::control::planning::DecisionResult* value);
  void unsafe_arena_set_allocated_decision(::control::planning::DecisionResult* value);
  ::control::planning::DecisionResult* unsafe_arena_release_decision();

  private:
  const ::control::planning::DecisionResult& _internal_decision() const;
  ::control::planning::DecisionResult* _internal_mutable_decision();

  public:
  // optional .control.planning.LatencyStats latency_stats = 15;
  bool has_latency_stats() const;
  void clear_latency_stats() ;
  const ::control::planning::LatencyStats& latency_stats() const;
  PROTOBUF_NODISCARD ::control::planning::LatencyStats* release_latency_stats();
  ::control::planning::LatencyStats* mutable_latency_stats();
  void set_allocated_latency_stats(::control::planning::LatencyStats* value);
  void unsafe_arena_set_allocated_latency_stats(::control::planning::LatencyStats* value);
  ::control::planning::LatencyStats* unsafe_arena_release_latency_stats();

  private:
  const ::control::planning::LatencyStats& _internal_latency_stats() const;
  ::control::planning::LatencyStats* _internal_mutable_latency_stats();

  public:
  // optional .control.common.Header routing_header = 16;
  bool has_routing_header() const;
  void clear_routing_header() ;
  const ::control::common::Header& routing_header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_routing_header();
  ::control::common::Header* mutable_routing_header();
  void set_allocated_routing_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_routing_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_routing_header();

  private:
  const ::control::common::Header& _internal_routing_header() const;
  ::control::common::Header* _internal_mutable_routing_header();

  public:
  // optional .control.common.EngageAdvice engage_advice = 19;
  bool has_engage_advice() const;
  void clear_engage_advice() ;
  const ::control::common::EngageAdvice& engage_advice() const;
  PROTOBUF_NODISCARD ::control::common::EngageAdvice* release_engage_advice();
  ::control::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::control::common::EngageAdvice* value);
  void unsafe_arena_set_allocated_engage_advice(::control::common::EngageAdvice* value);
  ::control::common::EngageAdvice* unsafe_arena_release_engage_advice();

  private:
  const ::control::common::EngageAdvice& _internal_engage_advice() const;
  ::control::common::EngageAdvice* _internal_mutable_engage_advice();

  public:
  // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  bool has_critical_region() const;
  void clear_critical_region() ;
  const ::control::planning::ADCTrajectory_CriticalRegion& critical_region() const;
  PROTOBUF_NODISCARD ::control::planning::ADCTrajectory_CriticalRegion* release_critical_region();
  ::control::planning::ADCTrajectory_CriticalRegion* mutable_critical_region();
  void set_allocated_critical_region(::control::planning::ADCTrajectory_CriticalRegion* value);
  void unsafe_arena_set_allocated_critical_region(::control::planning::ADCTrajectory_CriticalRegion* value);
  ::control::planning::ADCTrajectory_CriticalRegion* unsafe_arena_release_critical_region();

  private:
  const ::control::planning::ADCTrajectory_CriticalRegion& _internal_critical_region() const;
  ::control::planning::ADCTrajectory_CriticalRegion* _internal_mutable_critical_region();

  public:
  // optional .control.canbus.JointAngle joint_angle = 31;
  bool has_joint_angle() const;
  void clear_joint_angle() ;
  const ::control::canbus::JointAngle& joint_angle() const;
  PROTOBUF_NODISCARD ::control::canbus::JointAngle* release_joint_angle();
  ::control::canbus::JointAngle* mutable_joint_angle();
  void set_allocated_joint_angle(::control::canbus::JointAngle* value);
  void unsafe_arena_set_allocated_joint_angle(::control::canbus::JointAngle* value);
  ::control::canbus::JointAngle* unsafe_arena_release_joint_angle();

  private:
  const ::control::canbus::JointAngle& _internal_joint_angle() const;
  ::control::canbus::JointAngle* _internal_mutable_joint_angle();

  public:
  // optional .control.planning.RSSInfo rss_info = 100;
  bool has_rss_info() const;
  void clear_rss_info() ;
  const ::control::planning::RSSInfo& rss_info() const;
  PROTOBUF_NODISCARD ::control::planning::RSSInfo* release_rss_info();
  ::control::planning::RSSInfo* mutable_rss_info();
  void set_allocated_rss_info(::control::planning::RSSInfo* value);
  void unsafe_arena_set_allocated_rss_info(::control::planning::RSSInfo* value);
  ::control::planning::RSSInfo* unsafe_arena_release_rss_info();

  private:
  const ::control::planning::RSSInfo& _internal_rss_info() const;
  ::control::planning::RSSInfo* _internal_mutable_rss_info();

  public:
  // optional double total_path_length = 2;
  bool has_total_path_length() const;
  void clear_total_path_length() ;
  double total_path_length() const;
  void set_total_path_length(double value);

  private:
  double _internal_total_path_length() const;
  void _internal_set_total_path_length(double value);

  public:
  // optional double total_path_time = 3;
  bool has_total_path_time() const;
  void clear_total_path_time() ;
  double total_path_time() const;
  void set_total_path_time(double value);

  private:
  double _internal_total_path_time() const;
  void _internal_set_total_path_time(double value);

  public:
  // optional double reference_speed = 4;
  bool has_reference_speed() const;
  void clear_reference_speed() ;
  double reference_speed() const;
  void set_reference_speed(double value);

  private:
  double _internal_reference_speed() const;
  void _internal_set_reference_speed(double value);

  public:
  // optional double map_speed_limit = 5;
  bool has_map_speed_limit() const;
  void clear_map_speed_limit() ;
  double map_speed_limit() const;
  void set_map_speed_limit(double value);

  private:
  double _internal_map_speed_limit() const;
  void _internal_set_map_speed_limit(double value);

  public:
  // optional .control.canbus.Chassis.GearPosition gear = 10;
  bool has_gear() const;
  void clear_gear() ;
  ::control::canbus::Chassis_GearPosition gear() const;
  void set_gear(::control::canbus::Chassis_GearPosition value);

  private:
  ::control::canbus::Chassis_GearPosition _internal_gear() const;
  void _internal_set_gear(::control::canbus::Chassis_GearPosition value);

  public:
  // optional bool is_replan = 9 [default = false];
  bool has_is_replan() const;
  void clear_is_replan() ;
  bool is_replan() const;
  void set_is_replan(bool value);

  private:
  bool _internal_is_replan() const;
  void _internal_set_is_replan(bool value);

  public:
  // optional bool car_in_dead_end = 24;
  bool has_car_in_dead_end() const;
  void clear_car_in_dead_end() ;
  bool car_in_dead_end() const;
  void set_car_in_dead_end(bool value);

  private:
  bool _internal_car_in_dead_end() const;
  void _internal_set_car_in_dead_end(bool value);

  public:
  // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  bool has_right_of_way_status() const;
  void clear_right_of_way_status() ;
  ::control::planning::ADCTrajectory_RightOfWayStatus right_of_way_status() const;
  void set_right_of_way_status(::control::planning::ADCTrajectory_RightOfWayStatus value);

  private:
  ::control::planning::ADCTrajectory_RightOfWayStatus _internal_right_of_way_status() const;
  void _internal_set_right_of_way_status(::control::planning::ADCTrajectory_RightOfWayStatus value);

  public:
  // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  bool has_trajectory_type() const;
  void clear_trajectory_type() ;
  ::control::planning::ADCTrajectory_TrajectoryType trajectory_type() const;
  void set_trajectory_type(::control::planning::ADCTrajectory_TrajectoryType value);

  private:
  ::control::planning::ADCTrajectory_TrajectoryType _internal_trajectory_type() const;
  void _internal_set_trajectory_type(::control::planning::ADCTrajectory_TrajectoryType value);

  public:
  // optional double align_guide_loc = 27;
  bool has_align_guide_loc() const;
  void clear_align_guide_loc() ;
  double align_guide_loc() const;
  void set_align_guide_loc(double value);

  private:
  double _internal_align_guide_loc() const;
  void _internal_set_align_guide_loc(double value);

  public:
  // optional int32 lift_weight = 26;
  bool has_lift_weight() const;
  void clear_lift_weight() ;
  ::int32_t lift_weight() const;
  void set_lift_weight(::int32_t value);

  private:
  ::int32_t _internal_lift_weight() const;
  void _internal_set_lift_weight(::int32_t value);

  public:
  // optional int32 opendoor_status = 28;
  bool has_opendoor_status() const;
  void clear_opendoor_status() ;
  ::int32_t opendoor_status() const;
  void set_opendoor_status(::int32_t value);

  private:
  ::int32_t _internal_opendoor_status() const;
  void _internal_set_opendoor_status(::int32_t value);

  public:
  // optional uint32 pto = 29;
  bool has_pto() const;
  void clear_pto() ;
  ::uint32_t pto() const;
  void set_pto(::uint32_t value);

  private:
  ::uint32_t _internal_pto() const;
  void _internal_set_pto(::uint32_t value);

  public:
  // optional int32 plan_state = 30;
  bool has_plan_state() const;
  void clear_plan_state() ;
  ::int32_t plan_state() const;
  void set_plan_state(::int32_t value);

  private:
  ::int32_t _internal_plan_state() const;
  void _internal_set_plan_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:control.planning.ADCTrajectory)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 28, 16,
      76, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ADCTrajectory_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ADCTrajectory& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::control::common::TrajectoryPoint > trajectory_point_;
    ::google::protobuf::RepeatedPtrField< ::control::common::PathPoint > path_point_;
    ::google::protobuf::RepeatedPtrField< ::control::common::PointLLH > point_llh_;
    ::google::protobuf::internal::ArenaStringPtr replan_reason_;
    ::control::common::Header* header_;
    ::control::planning::EStop* estop_;
    ::control::planning_internal::Debug* debug_;
    ::control::planning::DecisionResult* decision_;
    ::control::planning::LatencyStats* latency_stats_;
    ::control::common::Header* routing_header_;
    ::control::common::EngageAdvice* engage_advice_;
    ::control::planning::ADCTrajectory_CriticalRegion* critical_region_;
    ::control::canbus::JointAngle* joint_angle_;
    ::control::planning::RSSInfo* rss_info_;
    double total_path_length_;
    double total_path_time_;
    double reference_speed_;
    double map_speed_limit_;
    int gear_;
    bool is_replan_;
    bool car_in_dead_end_;
    int right_of_way_status_;
    int trajectory_type_;
    double align_guide_loc_;
    ::int32_t lift_weight_;
    ::int32_t opendoor_status_;
    ::uint32_t pto_;
    ::int32_t plan_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_planning_5fmsgs_2fplanning_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EStop

// optional bool is_estop = 1;
inline bool EStop::has_is_estop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EStop::clear_is_estop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_estop_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:control.planning.EStop.is_estop)
  return _internal_is_estop();
}
inline void EStop::set_is_estop(bool value) {
  _internal_set_is_estop(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.planning.EStop.is_estop)
}
inline bool EStop::_internal_is_estop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_estop_;
}
inline void EStop::_internal_set_is_estop(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_estop_ = value;
}

// optional string reason = 2;
inline bool EStop::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EStop::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EStop::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.EStop.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EStop::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.planning.EStop.reason)
}
inline std::string* EStop::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:control.planning.EStop.reason)
  return _s;
}
inline const std::string& EStop::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void EStop::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* EStop::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* EStop::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.EStop.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EStop::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.planning.EStop.reason)
}

// -------------------------------------------------------------------

// TaskStats

// optional string name = 1;
inline bool TaskStats::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskStats::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskStats::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.TaskStats.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskStats::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.planning.TaskStats.name)
}
inline std::string* TaskStats::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:control.planning.TaskStats.name)
  return _s;
}
inline const std::string& TaskStats::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void TaskStats::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* TaskStats::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* TaskStats::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.TaskStats.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskStats::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.planning.TaskStats.name)
}

// optional double time_ms = 2;
inline bool TaskStats::has_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskStats::clear_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:control.planning.TaskStats.time_ms)
  return _internal_time_ms();
}
inline void TaskStats::set_time_ms(double value) {
  _internal_set_time_ms(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.planning.TaskStats.time_ms)
}
inline double TaskStats::_internal_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_ms_;
}
inline void TaskStats::_internal_set_time_ms(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ms_ = value;
}

// -------------------------------------------------------------------

// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::has_total_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LatencyStats::clear_total_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:control.planning.LatencyStats.total_time_ms)
  return _internal_total_time_ms();
}
inline void LatencyStats::set_total_time_ms(double value) {
  _internal_set_total_time_ms(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.planning.LatencyStats.total_time_ms)
}
inline double LatencyStats::_internal_total_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_time_ms_;
}
inline void LatencyStats::_internal_set_total_time_ms(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_time_ms_ = value;
}

// repeated .control.planning.TaskStats task_stats = 2;
inline int LatencyStats::_internal_task_stats_size() const {
  return _internal_task_stats().size();
}
inline int LatencyStats::task_stats_size() const {
  return _internal_task_stats_size();
}
inline void LatencyStats::clear_task_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_stats_.Clear();
}
inline ::control::planning::TaskStats* LatencyStats::mutable_task_stats(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.planning.LatencyStats.task_stats)
  return _internal_mutable_task_stats()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>* LatencyStats::mutable_task_stats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.planning.LatencyStats.task_stats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_task_stats();
}
inline const ::control::planning::TaskStats& LatencyStats::task_stats(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.LatencyStats.task_stats)
  return _internal_task_stats().Get(index);
}
inline ::control::planning::TaskStats* LatencyStats::add_task_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::planning::TaskStats* _add = _internal_mutable_task_stats()->Add();
  // @@protoc_insertion_point(field_add:control.planning.LatencyStats.task_stats)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>& LatencyStats::task_stats() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.planning.LatencyStats.task_stats)
  return _internal_task_stats();
}
inline const ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>&
LatencyStats::_internal_task_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_stats_;
}
inline ::google::protobuf::RepeatedPtrField<::control::planning::TaskStats>*
LatencyStats::_internal_mutable_task_stats() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.task_stats_;
}

// optional double init_frame_time_ms = 3;
inline bool LatencyStats::has_init_frame_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LatencyStats::clear_init_frame_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.init_frame_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:control.planning.LatencyStats.init_frame_time_ms)
  return _internal_init_frame_time_ms();
}
inline void LatencyStats::set_init_frame_time_ms(double value) {
  _internal_set_init_frame_time_ms(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.planning.LatencyStats.init_frame_time_ms)
}
inline double LatencyStats::_internal_init_frame_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.init_frame_time_ms_;
}
inline void LatencyStats::_internal_set_init_frame_time_ms(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.init_frame_time_ms_ = value;
}

// -------------------------------------------------------------------

// RSSInfo

// optional bool is_rss_safe = 1;
inline bool RSSInfo::has_is_rss_safe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void RSSInfo::clear_is_rss_safe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_rss_safe_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool RSSInfo::is_rss_safe() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.is_rss_safe)
  return _internal_is_rss_safe();
}
inline void RSSInfo::set_is_rss_safe(bool value) {
  _internal_set_is_rss_safe(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.is_rss_safe)
}
inline bool RSSInfo::_internal_is_rss_safe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_rss_safe_;
}
inline void RSSInfo::_internal_set_is_rss_safe(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_rss_safe_ = value;
}

// optional double cur_dist_lon = 2;
inline bool RSSInfo::has_cur_dist_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RSSInfo::clear_cur_dist_lon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cur_dist_lon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double RSSInfo::cur_dist_lon() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.cur_dist_lon)
  return _internal_cur_dist_lon();
}
inline void RSSInfo::set_cur_dist_lon(double value) {
  _internal_set_cur_dist_lon(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.cur_dist_lon)
}
inline double RSSInfo::_internal_cur_dist_lon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cur_dist_lon_;
}
inline void RSSInfo::_internal_set_cur_dist_lon(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cur_dist_lon_ = value;
}

// optional double rss_safe_dist_lon = 3;
inline bool RSSInfo::has_rss_safe_dist_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RSSInfo::clear_rss_safe_dist_lon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rss_safe_dist_lon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double RSSInfo::rss_safe_dist_lon() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.rss_safe_dist_lon)
  return _internal_rss_safe_dist_lon();
}
inline void RSSInfo::set_rss_safe_dist_lon(double value) {
  _internal_set_rss_safe_dist_lon(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.rss_safe_dist_lon)
}
inline double RSSInfo::_internal_rss_safe_dist_lon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rss_safe_dist_lon_;
}
inline void RSSInfo::_internal_set_rss_safe_dist_lon(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rss_safe_dist_lon_ = value;
}

// optional double acc_lon_range_minimum = 4;
inline bool RSSInfo::has_acc_lon_range_minimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RSSInfo::clear_acc_lon_range_minimum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lon_range_minimum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double RSSInfo::acc_lon_range_minimum() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.acc_lon_range_minimum)
  return _internal_acc_lon_range_minimum();
}
inline void RSSInfo::set_acc_lon_range_minimum(double value) {
  _internal_set_acc_lon_range_minimum(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.acc_lon_range_minimum)
}
inline double RSSInfo::_internal_acc_lon_range_minimum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_lon_range_minimum_;
}
inline void RSSInfo::_internal_set_acc_lon_range_minimum(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lon_range_minimum_ = value;
}

// optional double acc_lon_range_maximum = 5;
inline bool RSSInfo::has_acc_lon_range_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RSSInfo::clear_acc_lon_range_maximum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lon_range_maximum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RSSInfo::acc_lon_range_maximum() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.acc_lon_range_maximum)
  return _internal_acc_lon_range_maximum();
}
inline void RSSInfo::set_acc_lon_range_maximum(double value) {
  _internal_set_acc_lon_range_maximum(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.acc_lon_range_maximum)
}
inline double RSSInfo::_internal_acc_lon_range_maximum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_lon_range_maximum_;
}
inline void RSSInfo::_internal_set_acc_lon_range_maximum(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lon_range_maximum_ = value;
}

// optional double acc_lat_left_range_minimum = 6;
inline bool RSSInfo::has_acc_lat_left_range_minimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RSSInfo::clear_acc_lat_left_range_minimum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_left_range_minimum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RSSInfo::acc_lat_left_range_minimum() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.acc_lat_left_range_minimum)
  return _internal_acc_lat_left_range_minimum();
}
inline void RSSInfo::set_acc_lat_left_range_minimum(double value) {
  _internal_set_acc_lat_left_range_minimum(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.acc_lat_left_range_minimum)
}
inline double RSSInfo::_internal_acc_lat_left_range_minimum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_lat_left_range_minimum_;
}
inline void RSSInfo::_internal_set_acc_lat_left_range_minimum(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_left_range_minimum_ = value;
}

// optional double acc_lat_left_range_maximum = 7;
inline bool RSSInfo::has_acc_lat_left_range_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RSSInfo::clear_acc_lat_left_range_maximum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_left_range_maximum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double RSSInfo::acc_lat_left_range_maximum() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.acc_lat_left_range_maximum)
  return _internal_acc_lat_left_range_maximum();
}
inline void RSSInfo::set_acc_lat_left_range_maximum(double value) {
  _internal_set_acc_lat_left_range_maximum(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.acc_lat_left_range_maximum)
}
inline double RSSInfo::_internal_acc_lat_left_range_maximum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_lat_left_range_maximum_;
}
inline void RSSInfo::_internal_set_acc_lat_left_range_maximum(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_left_range_maximum_ = value;
}

// optional double acc_lat_right_range_minimum = 8;
inline bool RSSInfo::has_acc_lat_right_range_minimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RSSInfo::clear_acc_lat_right_range_minimum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_right_range_minimum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double RSSInfo::acc_lat_right_range_minimum() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.acc_lat_right_range_minimum)
  return _internal_acc_lat_right_range_minimum();
}
inline void RSSInfo::set_acc_lat_right_range_minimum(double value) {
  _internal_set_acc_lat_right_range_minimum(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.acc_lat_right_range_minimum)
}
inline double RSSInfo::_internal_acc_lat_right_range_minimum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_lat_right_range_minimum_;
}
inline void RSSInfo::_internal_set_acc_lat_right_range_minimum(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_right_range_minimum_ = value;
}

// optional double acc_lat_right_range_maximum = 9;
inline bool RSSInfo::has_acc_lat_right_range_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void RSSInfo::clear_acc_lat_right_range_maximum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_right_range_maximum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double RSSInfo::acc_lat_right_range_maximum() const {
  // @@protoc_insertion_point(field_get:control.planning.RSSInfo.acc_lat_right_range_maximum)
  return _internal_acc_lat_right_range_maximum();
}
inline void RSSInfo::set_acc_lat_right_range_maximum(double value) {
  _internal_set_acc_lat_right_range_maximum(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.planning.RSSInfo.acc_lat_right_range_maximum)
}
inline double RSSInfo::_internal_acc_lat_right_range_maximum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_lat_right_range_maximum_;
}
inline void RSSInfo::_internal_set_acc_lat_right_range_maximum(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_lat_right_range_maximum_ = value;
}

// -------------------------------------------------------------------

// ADCTrajectory_CriticalRegion

// repeated .control.common.Polygon region = 1;
inline int ADCTrajectory_CriticalRegion::_internal_region_size() const {
  return _internal_region().size();
}
inline int ADCTrajectory_CriticalRegion::region_size() const {
  return _internal_region_size();
}
inline ::control::common::Polygon* ADCTrajectory_CriticalRegion::mutable_region(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.CriticalRegion.region)
  return _internal_mutable_region()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::common::Polygon>* ADCTrajectory_CriticalRegion::mutable_region()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.planning.ADCTrajectory.CriticalRegion.region)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_region();
}
inline const ::control::common::Polygon& ADCTrajectory_CriticalRegion::region(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.CriticalRegion.region)
  return _internal_region().Get(index);
}
inline ::control::common::Polygon* ADCTrajectory_CriticalRegion::add_region() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::common::Polygon* _add = _internal_mutable_region()->Add();
  // @@protoc_insertion_point(field_add:control.planning.ADCTrajectory.CriticalRegion.region)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::Polygon>& ADCTrajectory_CriticalRegion::region() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.planning.ADCTrajectory.CriticalRegion.region)
  return _internal_region();
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::Polygon>&
ADCTrajectory_CriticalRegion::_internal_region() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.region_;
}
inline ::google::protobuf::RepeatedPtrField<::control::common::Polygon>*
ADCTrajectory_CriticalRegion::_internal_mutable_region() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.region_;
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .control.common.Header header = 1;
inline bool ADCTrajectory::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::control::common::Header& ADCTrajectory::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& ADCTrajectory::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.header)
  return _internal_header();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.header)
}
inline ::control::common::Header* ADCTrajectory::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* ADCTrajectory::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.header)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::control::common::Header* ADCTrajectory::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.header_;
}
inline ::control::common::Header* ADCTrajectory::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.header)
  return _msg;
}
inline void ADCTrajectory::set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
inline bool ADCTrajectory::has_total_path_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ADCTrajectory::clear_total_path_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_path_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.total_path_length)
  return _internal_total_path_length();
}
inline void ADCTrajectory::set_total_path_length(double value) {
  _internal_set_total_path_length(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.total_path_length)
}
inline double ADCTrajectory::_internal_total_path_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_path_length_;
}
inline void ADCTrajectory::_internal_set_total_path_length(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_path_length_ = value;
}

// optional double total_path_time = 3;
inline bool ADCTrajectory::has_total_path_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_total_path_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_path_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.total_path_time)
  return _internal_total_path_time();
}
inline void ADCTrajectory::set_total_path_time(double value) {
  _internal_set_total_path_time(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.total_path_time)
}
inline double ADCTrajectory::_internal_total_path_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_path_time_;
}
inline void ADCTrajectory::_internal_set_total_path_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_path_time_ = value;
}

// optional double reference_speed = 4;
inline bool ADCTrajectory::has_reference_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_reference_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double ADCTrajectory::reference_speed() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.reference_speed)
  return _internal_reference_speed();
}
inline void ADCTrajectory::set_reference_speed(double value) {
  _internal_set_reference_speed(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.reference_speed)
}
inline double ADCTrajectory::_internal_reference_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_speed_;
}
inline void ADCTrajectory::_internal_set_reference_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_speed_ = value;
}

// optional double map_speed_limit = 5;
inline bool ADCTrajectory::has_map_speed_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_map_speed_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.map_speed_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double ADCTrajectory::map_speed_limit() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.map_speed_limit)
  return _internal_map_speed_limit();
}
inline void ADCTrajectory::set_map_speed_limit(double value) {
  _internal_set_map_speed_limit(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.map_speed_limit)
}
inline double ADCTrajectory::_internal_map_speed_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.map_speed_limit_;
}
inline void ADCTrajectory::_internal_set_map_speed_limit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.map_speed_limit_ = value;
}

// optional .control.planning.EStop estop = 6;
inline bool ADCTrajectory::has_estop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.estop_ != nullptr);
  return value;
}
inline void ADCTrajectory::clear_estop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.estop_ != nullptr) _impl_.estop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::control::planning::EStop& ADCTrajectory::_internal_estop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::planning::EStop* p = _impl_.estop_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::planning::EStop&>(::control::planning::_EStop_default_instance_);
}
inline const ::control::planning::EStop& ADCTrajectory::estop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.estop)
  return _internal_estop();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_estop(::control::planning::EStop* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.estop_);
  }
  _impl_.estop_ = reinterpret_cast<::control::planning::EStop*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.estop)
}
inline ::control::planning::EStop* ADCTrajectory::release_estop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::planning::EStop* released = _impl_.estop_;
  _impl_.estop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::planning::EStop* ADCTrajectory::unsafe_arena_release_estop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.estop)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::planning::EStop* temp = _impl_.estop_;
  _impl_.estop_ = nullptr;
  return temp;
}
inline ::control::planning::EStop* ADCTrajectory::_internal_mutable_estop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.estop_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::planning::EStop>(GetArena());
    _impl_.estop_ = reinterpret_cast<::control::planning::EStop*>(p);
  }
  return _impl_.estop_;
}
inline ::control::planning::EStop* ADCTrajectory::mutable_estop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::planning::EStop* _msg = _internal_mutable_estop();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.estop)
  return _msg;
}
inline void ADCTrajectory::set_allocated_estop(::control::planning::EStop* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.estop_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.estop_ = reinterpret_cast<::control::planning::EStop*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.estop)
}

// optional .control.planning_internal.Debug debug = 8;
inline bool ADCTrajectory::has_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.debug_ != nullptr);
  return value;
}
inline const ::control::planning_internal::Debug& ADCTrajectory::_internal_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::planning_internal::Debug* p = _impl_.debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::planning_internal::Debug&>(::control::planning_internal::_Debug_default_instance_);
}
inline const ::control::planning_internal::Debug& ADCTrajectory::debug() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.debug)
  return _internal_debug();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_debug(::control::planning_internal::Debug* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.debug_);
  }
  _impl_.debug_ = reinterpret_cast<::control::planning_internal::Debug*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.debug)
}
inline ::control::planning_internal::Debug* ADCTrajectory::release_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::planning_internal::Debug* released = _impl_.debug_;
  _impl_.debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::planning_internal::Debug* ADCTrajectory::unsafe_arena_release_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.debug)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::planning_internal::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
  return temp;
}
inline ::control::planning_internal::Debug* ADCTrajectory::_internal_mutable_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.debug_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::planning_internal::Debug>(GetArena());
    _impl_.debug_ = reinterpret_cast<::control::planning_internal::Debug*>(p);
  }
  return _impl_.debug_;
}
inline ::control::planning_internal::Debug* ADCTrajectory::mutable_debug() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::planning_internal::Debug* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.debug)
  return _msg;
}
inline void ADCTrajectory::set_allocated_debug(::control::planning_internal::Debug* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.debug_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.debug_ = reinterpret_cast<::control::planning_internal::Debug*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.debug)
}

// optional bool is_replan = 9 [default = false];
inline bool ADCTrajectory::has_is_replan() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_is_replan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_replan_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.is_replan)
  return _internal_is_replan();
}
inline void ADCTrajectory::set_is_replan(bool value) {
  _internal_set_is_replan(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.is_replan)
}
inline bool ADCTrajectory::_internal_is_replan() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_replan_;
}
inline void ADCTrajectory::_internal_set_is_replan(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_replan_ = value;
}

// optional .control.canbus.Chassis.GearPosition gear = 10;
inline bool ADCTrajectory::has_gear() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_gear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gear_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::control::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.gear)
  return _internal_gear();
}
inline void ADCTrajectory::set_gear(::control::canbus::Chassis_GearPosition value) {
  _internal_set_gear(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.gear)
}
inline ::control::canbus::Chassis_GearPosition ADCTrajectory::_internal_gear() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_GearPosition>(_impl_.gear_);
}
inline void ADCTrajectory::_internal_set_gear(::control::canbus::Chassis_GearPosition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_GearPosition_IsValid(value));
  _impl_.gear_ = value;
}

// repeated .control.common.TrajectoryPoint trajectory_point = 12;
inline int ADCTrajectory::_internal_trajectory_point_size() const {
  return _internal_trajectory_point().size();
}
inline int ADCTrajectory::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::control::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.trajectory_point)
  return _internal_mutable_trajectory_point()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* ADCTrajectory::mutable_trajectory_point()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.planning.ADCTrajectory.trajectory_point)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trajectory_point();
}
inline const ::control::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.trajectory_point)
  return _internal_trajectory_point().Get(index);
}
inline ::control::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::common::TrajectoryPoint* _add = _internal_mutable_trajectory_point()->Add();
  // @@protoc_insertion_point(field_add:control.planning.ADCTrajectory.trajectory_point)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& ADCTrajectory::trajectory_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.planning.ADCTrajectory.trajectory_point)
  return _internal_trajectory_point();
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>&
ADCTrajectory::_internal_trajectory_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trajectory_point_;
}
inline ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>*
ADCTrajectory::_internal_mutable_trajectory_point() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trajectory_point_;
}

// repeated .control.common.PathPoint path_point = 13;
inline int ADCTrajectory::_internal_path_point_size() const {
  return _internal_path_point().size();
}
inline int ADCTrajectory::path_point_size() const {
  return _internal_path_point_size();
}
inline ::control::common::PathPoint* ADCTrajectory::mutable_path_point(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.path_point)
  return _internal_mutable_path_point()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>* ADCTrajectory::mutable_path_point()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.planning.ADCTrajectory.path_point)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_path_point();
}
inline const ::control::common::PathPoint& ADCTrajectory::path_point(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.path_point)
  return _internal_path_point().Get(index);
}
inline ::control::common::PathPoint* ADCTrajectory::add_path_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::common::PathPoint* _add = _internal_mutable_path_point()->Add();
  // @@protoc_insertion_point(field_add:control.planning.ADCTrajectory.path_point)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>& ADCTrajectory::path_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.planning.ADCTrajectory.path_point)
  return _internal_path_point();
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>&
ADCTrajectory::_internal_path_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_point_;
}
inline ::google::protobuf::RepeatedPtrField<::control::common::PathPoint>*
ADCTrajectory::_internal_mutable_path_point() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.path_point_;
}

// optional .control.planning.DecisionResult decision = 14;
inline bool ADCTrajectory::has_decision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_ != nullptr);
  return value;
}
inline const ::control::planning::DecisionResult& ADCTrajectory::_internal_decision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::planning::DecisionResult* p = _impl_.decision_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::planning::DecisionResult&>(::control::planning::_DecisionResult_default_instance_);
}
inline const ::control::planning::DecisionResult& ADCTrajectory::decision() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.decision)
  return _internal_decision();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_decision(::control::planning::DecisionResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_);
  }
  _impl_.decision_ = reinterpret_cast<::control::planning::DecisionResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.decision)
}
inline ::control::planning::DecisionResult* ADCTrajectory::release_decision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::planning::DecisionResult* released = _impl_.decision_;
  _impl_.decision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::planning::DecisionResult* ADCTrajectory::unsafe_arena_release_decision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.decision)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::planning::DecisionResult* temp = _impl_.decision_;
  _impl_.decision_ = nullptr;
  return temp;
}
inline ::control::planning::DecisionResult* ADCTrajectory::_internal_mutable_decision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decision_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::planning::DecisionResult>(GetArena());
    _impl_.decision_ = reinterpret_cast<::control::planning::DecisionResult*>(p);
  }
  return _impl_.decision_;
}
inline ::control::planning::DecisionResult* ADCTrajectory::mutable_decision() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::planning::DecisionResult* _msg = _internal_mutable_decision();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.decision)
  return _msg;
}
inline void ADCTrajectory::set_allocated_decision(::control::planning::DecisionResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.decision_ = reinterpret_cast<::control::planning::DecisionResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.decision)
}

// optional .control.planning.LatencyStats latency_stats = 15;
inline bool ADCTrajectory::has_latency_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.latency_stats_ != nullptr);
  return value;
}
inline void ADCTrajectory::clear_latency_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.latency_stats_ != nullptr) _impl_.latency_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::control::planning::LatencyStats& ADCTrajectory::_internal_latency_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::planning::LatencyStats* p = _impl_.latency_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::planning::LatencyStats&>(::control::planning::_LatencyStats_default_instance_);
}
inline const ::control::planning::LatencyStats& ADCTrajectory::latency_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.latency_stats)
  return _internal_latency_stats();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_latency_stats(::control::planning::LatencyStats* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.latency_stats_);
  }
  _impl_.latency_stats_ = reinterpret_cast<::control::planning::LatencyStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.latency_stats)
}
inline ::control::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::planning::LatencyStats* released = _impl_.latency_stats_;
  _impl_.latency_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::planning::LatencyStats* ADCTrajectory::unsafe_arena_release_latency_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.latency_stats)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::planning::LatencyStats* temp = _impl_.latency_stats_;
  _impl_.latency_stats_ = nullptr;
  return temp;
}
inline ::control::planning::LatencyStats* ADCTrajectory::_internal_mutable_latency_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.latency_stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::planning::LatencyStats>(GetArena());
    _impl_.latency_stats_ = reinterpret_cast<::control::planning::LatencyStats*>(p);
  }
  return _impl_.latency_stats_;
}
inline ::control::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::control::planning::LatencyStats* _msg = _internal_mutable_latency_stats();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.latency_stats)
  return _msg;
}
inline void ADCTrajectory::set_allocated_latency_stats(::control::planning::LatencyStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.latency_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.latency_stats_ = reinterpret_cast<::control::planning::LatencyStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.latency_stats)
}

// optional .control.common.Header routing_header = 16;
inline bool ADCTrajectory::has_routing_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_header_ != nullptr);
  return value;
}
inline const ::control::common::Header& ADCTrajectory::_internal_routing_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.routing_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& ADCTrajectory::routing_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.routing_header)
  return _internal_routing_header();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_routing_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.routing_header_);
  }
  _impl_.routing_header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.routing_header)
}
inline ::control::common::Header* ADCTrajectory::release_routing_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::common::Header* released = _impl_.routing_header_;
  _impl_.routing_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* ADCTrajectory::unsafe_arena_release_routing_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.routing_header)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::common::Header* temp = _impl_.routing_header_;
  _impl_.routing_header_ = nullptr;
  return temp;
}
inline ::control::common::Header* ADCTrajectory::_internal_mutable_routing_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.routing_header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.routing_header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.routing_header_;
}
inline ::control::common::Header* ADCTrajectory::mutable_routing_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::control::common::Header* _msg = _internal_mutable_routing_header();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.routing_header)
  return _msg;
}
inline void ADCTrajectory::set_allocated_routing_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.routing_header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.routing_header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.routing_header)
}

// optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
inline bool ADCTrajectory::has_right_of_way_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_right_of_way_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_of_way_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::control::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.right_of_way_status)
  return _internal_right_of_way_status();
}
inline void ADCTrajectory::set_right_of_way_status(::control::planning::ADCTrajectory_RightOfWayStatus value) {
  _internal_set_right_of_way_status(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.right_of_way_status)
}
inline ::control::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::_internal_right_of_way_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::planning::ADCTrajectory_RightOfWayStatus>(_impl_.right_of_way_status_);
}
inline void ADCTrajectory::_internal_set_right_of_way_status(::control::planning::ADCTrajectory_RightOfWayStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  _impl_.right_of_way_status_ = value;
}

// optional .control.common.EngageAdvice engage_advice = 19;
inline bool ADCTrajectory::has_engage_advice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.engage_advice_ != nullptr);
  return value;
}
inline const ::control::common::EngageAdvice& ADCTrajectory::_internal_engage_advice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::EngageAdvice* p = _impl_.engage_advice_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::EngageAdvice&>(::control::common::_EngageAdvice_default_instance_);
}
inline const ::control::common::EngageAdvice& ADCTrajectory::engage_advice() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.engage_advice)
  return _internal_engage_advice();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_engage_advice(::control::common::EngageAdvice* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.engage_advice_);
  }
  _impl_.engage_advice_ = reinterpret_cast<::control::common::EngageAdvice*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.engage_advice)
}
inline ::control::common::EngageAdvice* ADCTrajectory::release_engage_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::common::EngageAdvice* released = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::EngageAdvice* ADCTrajectory::unsafe_arena_release_engage_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.engage_advice)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::common::EngageAdvice* temp = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
  return temp;
}
inline ::control::common::EngageAdvice* ADCTrajectory::_internal_mutable_engage_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.engage_advice_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::EngageAdvice>(GetArena());
    _impl_.engage_advice_ = reinterpret_cast<::control::common::EngageAdvice*>(p);
  }
  return _impl_.engage_advice_;
}
inline ::control::common::EngageAdvice* ADCTrajectory::mutable_engage_advice() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::control::common::EngageAdvice* _msg = _internal_mutable_engage_advice();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.engage_advice)
  return _msg;
}
inline void ADCTrajectory::set_allocated_engage_advice(::control::common::EngageAdvice* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.engage_advice_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.engage_advice_ = reinterpret_cast<::control::common::EngageAdvice*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.engage_advice)
}

// optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
inline bool ADCTrajectory::has_critical_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.critical_region_ != nullptr);
  return value;
}
inline void ADCTrajectory::clear_critical_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.critical_region_ != nullptr) _impl_.critical_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::control::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::_internal_critical_region() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::planning::ADCTrajectory_CriticalRegion* p = _impl_.critical_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::planning::ADCTrajectory_CriticalRegion&>(::control::planning::_ADCTrajectory_CriticalRegion_default_instance_);
}
inline const ::control::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::critical_region() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.critical_region)
  return _internal_critical_region();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_critical_region(::control::planning::ADCTrajectory_CriticalRegion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.critical_region_);
  }
  _impl_.critical_region_ = reinterpret_cast<::control::planning::ADCTrajectory_CriticalRegion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.critical_region)
}
inline ::control::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::release_critical_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::planning::ADCTrajectory_CriticalRegion* released = _impl_.critical_region_;
  _impl_.critical_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::unsafe_arena_release_critical_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.critical_region)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::planning::ADCTrajectory_CriticalRegion* temp = _impl_.critical_region_;
  _impl_.critical_region_ = nullptr;
  return temp;
}
inline ::control::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::_internal_mutable_critical_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.critical_region_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::planning::ADCTrajectory_CriticalRegion>(GetArena());
    _impl_.critical_region_ = reinterpret_cast<::control::planning::ADCTrajectory_CriticalRegion*>(p);
  }
  return _impl_.critical_region_;
}
inline ::control::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::mutable_critical_region() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::control::planning::ADCTrajectory_CriticalRegion* _msg = _internal_mutable_critical_region();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.critical_region)
  return _msg;
}
inline void ADCTrajectory::set_allocated_critical_region(::control::planning::ADCTrajectory_CriticalRegion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.critical_region_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.critical_region_ = reinterpret_cast<::control::planning::ADCTrajectory_CriticalRegion*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.critical_region)
}

// optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
inline bool ADCTrajectory::has_trajectory_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_trajectory_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trajectory_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::control::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.trajectory_type)
  return _internal_trajectory_type();
}
inline void ADCTrajectory::set_trajectory_type(::control::planning::ADCTrajectory_TrajectoryType value) {
  _internal_set_trajectory_type(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.trajectory_type)
}
inline ::control::planning::ADCTrajectory_TrajectoryType ADCTrajectory::_internal_trajectory_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::planning::ADCTrajectory_TrajectoryType>(_impl_.trajectory_type_);
}
inline void ADCTrajectory::_internal_set_trajectory_type(::control::planning::ADCTrajectory_TrajectoryType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::planning::ADCTrajectory_TrajectoryType_IsValid(value));
  _impl_.trajectory_type_ = value;
}

// optional string replan_reason = 22;
inline bool ADCTrajectory::has_replan_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ADCTrajectory::clear_replan_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.replan_reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ADCTrajectory::replan_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.replan_reason)
  return _internal_replan_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ADCTrajectory::set_replan_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.replan_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.replan_reason)
}
inline std::string* ADCTrajectory::mutable_replan_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_replan_reason();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.replan_reason)
  return _s;
}
inline const std::string& ADCTrajectory::_internal_replan_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.replan_reason_.Get();
}
inline void ADCTrajectory::_internal_set_replan_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.replan_reason_.Set(value, GetArena());
}
inline std::string* ADCTrajectory::_internal_mutable_replan_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.replan_reason_.Mutable( GetArena());
}
inline std::string* ADCTrajectory::release_replan_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.replan_reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.replan_reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.replan_reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ADCTrajectory::set_allocated_replan_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.replan_reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.replan_reason_.IsDefault()) {
          _impl_.replan_reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.replan_reason)
}

// optional bool car_in_dead_end = 24;
inline bool ADCTrajectory::has_car_in_dead_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_car_in_dead_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.car_in_dead_end_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool ADCTrajectory::car_in_dead_end() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.car_in_dead_end)
  return _internal_car_in_dead_end();
}
inline void ADCTrajectory::set_car_in_dead_end(bool value) {
  _internal_set_car_in_dead_end(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.car_in_dead_end)
}
inline bool ADCTrajectory::_internal_car_in_dead_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.car_in_dead_end_;
}
inline void ADCTrajectory::_internal_set_car_in_dead_end(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.car_in_dead_end_ = value;
}

// repeated .control.common.PointLLH point_llh = 25;
inline int ADCTrajectory::_internal_point_llh_size() const {
  return _internal_point_llh().size();
}
inline int ADCTrajectory::point_llh_size() const {
  return _internal_point_llh_size();
}
inline ::control::common::PointLLH* ADCTrajectory::mutable_point_llh(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.point_llh)
  return _internal_mutable_point_llh()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>* ADCTrajectory::mutable_point_llh()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.planning.ADCTrajectory.point_llh)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_point_llh();
}
inline const ::control::common::PointLLH& ADCTrajectory::point_llh(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.point_llh)
  return _internal_point_llh().Get(index);
}
inline ::control::common::PointLLH* ADCTrajectory::add_point_llh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::common::PointLLH* _add = _internal_mutable_point_llh()->Add();
  // @@protoc_insertion_point(field_add:control.planning.ADCTrajectory.point_llh)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>& ADCTrajectory::point_llh() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.planning.ADCTrajectory.point_llh)
  return _internal_point_llh();
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>&
ADCTrajectory::_internal_point_llh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.point_llh_;
}
inline ::google::protobuf::RepeatedPtrField<::control::common::PointLLH>*
ADCTrajectory::_internal_mutable_point_llh() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.point_llh_;
}

// optional int32 lift_weight = 26;
inline bool ADCTrajectory::has_lift_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_lift_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lift_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t ADCTrajectory::lift_weight() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.lift_weight)
  return _internal_lift_weight();
}
inline void ADCTrajectory::set_lift_weight(::int32_t value) {
  _internal_set_lift_weight(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.lift_weight)
}
inline ::int32_t ADCTrajectory::_internal_lift_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lift_weight_;
}
inline void ADCTrajectory::_internal_set_lift_weight(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lift_weight_ = value;
}

// optional double align_guide_loc = 27;
inline bool ADCTrajectory::has_align_guide_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_align_guide_loc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.align_guide_loc_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double ADCTrajectory::align_guide_loc() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.align_guide_loc)
  return _internal_align_guide_loc();
}
inline void ADCTrajectory::set_align_guide_loc(double value) {
  _internal_set_align_guide_loc(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.align_guide_loc)
}
inline double ADCTrajectory::_internal_align_guide_loc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.align_guide_loc_;
}
inline void ADCTrajectory::_internal_set_align_guide_loc(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.align_guide_loc_ = value;
}

// optional int32 opendoor_status = 28;
inline bool ADCTrajectory::has_opendoor_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_opendoor_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.opendoor_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t ADCTrajectory::opendoor_status() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.opendoor_status)
  return _internal_opendoor_status();
}
inline void ADCTrajectory::set_opendoor_status(::int32_t value) {
  _internal_set_opendoor_status(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.opendoor_status)
}
inline ::int32_t ADCTrajectory::_internal_opendoor_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.opendoor_status_;
}
inline void ADCTrajectory::_internal_set_opendoor_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.opendoor_status_ = value;
}

// optional uint32 pto = 29;
inline bool ADCTrajectory::has_pto() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_pto() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pto_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::uint32_t ADCTrajectory::pto() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.pto)
  return _internal_pto();
}
inline void ADCTrajectory::set_pto(::uint32_t value) {
  _internal_set_pto(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.pto)
}
inline ::uint32_t ADCTrajectory::_internal_pto() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pto_;
}
inline void ADCTrajectory::_internal_set_pto(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pto_ = value;
}

// optional int32 plan_state = 30;
inline bool ADCTrajectory::has_plan_state() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void ADCTrajectory::clear_plan_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plan_state_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t ADCTrajectory::plan_state() const {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.plan_state)
  return _internal_plan_state();
}
inline void ADCTrajectory::set_plan_state(::int32_t value) {
  _internal_set_plan_state(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.planning.ADCTrajectory.plan_state)
}
inline ::int32_t ADCTrajectory::_internal_plan_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.plan_state_;
}
inline void ADCTrajectory::_internal_set_plan_state(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plan_state_ = value;
}

// optional .control.canbus.JointAngle joint_angle = 31;
inline bool ADCTrajectory::has_joint_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.joint_angle_ != nullptr);
  return value;
}
inline const ::control::canbus::JointAngle& ADCTrajectory::_internal_joint_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::canbus::JointAngle* p = _impl_.joint_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::canbus::JointAngle&>(::control::canbus::_JointAngle_default_instance_);
}
inline const ::control::canbus::JointAngle& ADCTrajectory::joint_angle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.joint_angle)
  return _internal_joint_angle();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_joint_angle(::control::canbus::JointAngle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.joint_angle_);
  }
  _impl_.joint_angle_ = reinterpret_cast<::control::canbus::JointAngle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.joint_angle)
}
inline ::control::canbus::JointAngle* ADCTrajectory::release_joint_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::control::canbus::JointAngle* released = _impl_.joint_angle_;
  _impl_.joint_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::canbus::JointAngle* ADCTrajectory::unsafe_arena_release_joint_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.joint_angle)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::control::canbus::JointAngle* temp = _impl_.joint_angle_;
  _impl_.joint_angle_ = nullptr;
  return temp;
}
inline ::control::canbus::JointAngle* ADCTrajectory::_internal_mutable_joint_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.joint_angle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::canbus::JointAngle>(GetArena());
    _impl_.joint_angle_ = reinterpret_cast<::control::canbus::JointAngle*>(p);
  }
  return _impl_.joint_angle_;
}
inline ::control::canbus::JointAngle* ADCTrajectory::mutable_joint_angle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::control::canbus::JointAngle* _msg = _internal_mutable_joint_angle();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.joint_angle)
  return _msg;
}
inline void ADCTrajectory::set_allocated_joint_angle(::control::canbus::JointAngle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.joint_angle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.joint_angle_ = reinterpret_cast<::control::canbus::JointAngle*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.joint_angle)
}

// optional .control.planning.RSSInfo rss_info = 100;
inline bool ADCTrajectory::has_rss_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rss_info_ != nullptr);
  return value;
}
inline void ADCTrajectory::clear_rss_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rss_info_ != nullptr) _impl_.rss_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::control::planning::RSSInfo& ADCTrajectory::_internal_rss_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::planning::RSSInfo* p = _impl_.rss_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::planning::RSSInfo&>(::control::planning::_RSSInfo_default_instance_);
}
inline const ::control::planning::RSSInfo& ADCTrajectory::rss_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.planning.ADCTrajectory.rss_info)
  return _internal_rss_info();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_rss_info(::control::planning::RSSInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rss_info_);
  }
  _impl_.rss_info_ = reinterpret_cast<::control::planning::RSSInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.planning.ADCTrajectory.rss_info)
}
inline ::control::planning::RSSInfo* ADCTrajectory::release_rss_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::control::planning::RSSInfo* released = _impl_.rss_info_;
  _impl_.rss_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::planning::RSSInfo* ADCTrajectory::unsafe_arena_release_rss_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.planning.ADCTrajectory.rss_info)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::control::planning::RSSInfo* temp = _impl_.rss_info_;
  _impl_.rss_info_ = nullptr;
  return temp;
}
inline ::control::planning::RSSInfo* ADCTrajectory::_internal_mutable_rss_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rss_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::planning::RSSInfo>(GetArena());
    _impl_.rss_info_ = reinterpret_cast<::control::planning::RSSInfo*>(p);
  }
  return _impl_.rss_info_;
}
inline ::control::planning::RSSInfo* ADCTrajectory::mutable_rss_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::control::planning::RSSInfo* _msg = _internal_mutable_rss_info();
  // @@protoc_insertion_point(field_mutable:control.planning.ADCTrajectory.rss_info)
  return _msg;
}
inline void ADCTrajectory::set_allocated_rss_info(::control::planning::RSSInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rss_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.rss_info_ = reinterpret_cast<::control::planning::RSSInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.planning.ADCTrajectory.rss_info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::planning::ADCTrajectory_RightOfWayStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::planning::ADCTrajectory_RightOfWayStatus>() {
  return ::control::planning::ADCTrajectory_RightOfWayStatus_descriptor();
}
template <>
struct is_proto_enum<::control::planning::ADCTrajectory_TrajectoryType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::planning::ADCTrajectory_TrajectoryType>() {
  return ::control::planning::ADCTrajectory_TrajectoryType_descriptor();
}
template <>
struct is_proto_enum<::control::planning::JucType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::planning::JucType>() {
  return ::control::planning::JucType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_planning_5fmsgs_2fplanning_2eproto_2epb_2eh

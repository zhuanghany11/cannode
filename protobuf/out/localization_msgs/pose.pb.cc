// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: localization_msgs/pose.proto
// Protobuf C++ Version: 5.28.0-dev

#include "localization_msgs/pose.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace localization {

inline constexpr Pose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        orientation_{nullptr},
        linear_velocity_{nullptr},
        linear_acceleration_{nullptr},
        angular_velocity_{nullptr},
        linear_acceleration_vrf_{nullptr},
        angular_velocity_vrf_{nullptr},
        euler_angles_{nullptr},
        linear_velocity_vrf_{nullptr},
        heading_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Pose::Pose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_localization_5fmsgs_2fpose_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_localization_5fmsgs_2fpose_2eproto = nullptr;
const ::uint32_t
    TableStruct_localization_5fmsgs_2fpose_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.orientation_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.linear_velocity_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.linear_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.angular_velocity_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.linear_acceleration_vrf_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.angular_velocity_vrf_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.euler_angles_),
        PROTOBUF_FIELD_OFFSET(::control::localization::Pose, _impl_.linear_velocity_vrf_),
        0,
        1,
        2,
        3,
        4,
        9,
        5,
        6,
        7,
        8,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 18, -1, sizeof(::control::localization::Pose)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::localization::_Pose_default_instance_._instance,
};
const char descriptor_table_protodef_localization_5fmsgs_2fpose_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034localization_msgs/pose.proto\022\024control."
    "localization\032%common_msgs/basic_msgs/geo"
    "metry.proto\"\345\003\n\004Pose\022*\n\010position\030\001 \001(\0132\030"
    ".control.common.PointENU\022/\n\013orientation\030"
    "\002 \001(\0132\032.control.common.Quaternion\0220\n\017lin"
    "ear_velocity\030\003 \001(\0132\027.control.common.Poin"
    "t3D\0224\n\023linear_acceleration\030\004 \001(\0132\027.contr"
    "ol.common.Point3D\0221\n\020angular_velocity\030\005 "
    "\001(\0132\027.control.common.Point3D\022\017\n\007heading\030"
    "\006 \001(\001\0228\n\027linear_acceleration_vrf\030\007 \001(\0132\027"
    ".control.common.Point3D\0225\n\024angular_veloc"
    "ity_vrf\030\010 \001(\0132\027.control.common.Point3D\022-"
    "\n\014euler_angles\030\t \001(\0132\027.control.common.Po"
    "int3D\0224\n\023linear_velocity_vrf\030\n \001(\0132\027.con"
    "trol.common.Point3D"
};
static const ::_pbi::DescriptorTable* const descriptor_table_localization_5fmsgs_2fpose_2eproto_deps[1] =
    {
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
};
static ::absl::once_flag descriptor_table_localization_5fmsgs_2fpose_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_localization_5fmsgs_2fpose_2eproto = {
    false,
    false,
    579,
    descriptor_table_protodef_localization_5fmsgs_2fpose_2eproto,
    "localization_msgs/pose.proto",
    &descriptor_table_localization_5fmsgs_2fpose_2eproto_once,
    descriptor_table_localization_5fmsgs_2fpose_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_localization_5fmsgs_2fpose_2eproto::offsets,
    file_level_enum_descriptors_localization_5fmsgs_2fpose_2eproto,
    file_level_service_descriptors_localization_5fmsgs_2fpose_2eproto,
};
namespace control {
namespace localization {
// ===================================================================

class Pose::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Pose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_);
};

void Pose::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Pose::clear_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Pose::clear_linear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Pose::clear_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ != nullptr) _impl_.linear_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Pose::clear_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Pose::clear_linear_acceleration_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_vrf_ != nullptr) _impl_.linear_acceleration_vrf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Pose::clear_angular_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_vrf_ != nullptr) _impl_.angular_velocity_vrf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Pose::clear_euler_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.euler_angles_ != nullptr) _impl_.euler_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Pose::clear_linear_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_velocity_vrf_ != nullptr) _impl_.linear_velocity_vrf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
Pose::Pose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.localization.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::localization::Pose& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Pose::Pose(
    ::google::protobuf::Arena* arena,
    const Pose& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Pose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::common::PointENU>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.orientation_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Quaternion>(
                              arena, *from._impl_.orientation_)
                        : nullptr;
  _impl_.linear_velocity_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.linear_velocity_)
                        : nullptr;
  _impl_.linear_acceleration_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.linear_acceleration_)
                        : nullptr;
  _impl_.angular_velocity_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.angular_velocity_)
                        : nullptr;
  _impl_.linear_acceleration_vrf_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.linear_acceleration_vrf_)
                        : nullptr;
  _impl_.angular_velocity_vrf_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.angular_velocity_vrf_)
                        : nullptr;
  _impl_.euler_angles_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.euler_angles_)
                        : nullptr;
  _impl_.linear_velocity_vrf_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.linear_velocity_vrf_)
                        : nullptr;
  _impl_.heading_ = from._impl_.heading_;

  // @@protoc_insertion_point(copy_constructor:control.localization.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, heading_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::heading_));
}
Pose::~Pose() {
  // @@protoc_insertion_point(destructor:control.localization.Pose)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Pose::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.orientation_;
  delete _impl_.linear_velocity_;
  delete _impl_.linear_acceleration_;
  delete _impl_.angular_velocity_;
  delete _impl_.linear_acceleration_vrf_;
  delete _impl_.angular_velocity_vrf_;
  delete _impl_.euler_angles_;
  delete _impl_.linear_velocity_vrf_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Pose::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Pose::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Pose>(),
            ::google::protobuf::Message::GetNewImpl<Pose>(),
            ::google::protobuf::Message::GetClearImpl<Pose>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<Pose>(),
                ::google::protobuf::Message::GetSerializeImpl<Pose>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Pose, _impl_._cached_size_),
            false,
        },
        &Pose::kDescriptorMethods,
        &descriptor_table_localization_5fmsgs_2fpose_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Pose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 9, 0, 2> Pose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Pose_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::localization::Pose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.PointENU position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)}},
    // optional .control.common.Quaternion orientation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)}},
    // optional .control.common.Point3D linear_velocity = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_velocity_)}},
    // optional .control.common.Point3D linear_acceleration = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_acceleration_)}},
    // optional .control.common.Point3D angular_velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Pose, _impl_.angular_velocity_)}},
    // optional double heading = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 9, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.heading_)}},
    // optional .control.common.Point3D linear_acceleration_vrf = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 5, PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_acceleration_vrf_)}},
    // optional .control.common.Point3D angular_velocity_vrf = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 6, 6, PROTOBUF_FIELD_OFFSET(Pose, _impl_.angular_velocity_vrf_)}},
    // optional .control.common.Point3D euler_angles = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 7, 7, PROTOBUF_FIELD_OFFSET(Pose, _impl_.euler_angles_)}},
    // optional .control.common.Point3D linear_velocity_vrf = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 8, 8, PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_velocity_vrf_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .control.common.PointENU position = 1;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Quaternion orientation = 2;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Point3D linear_velocity = 3;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_velocity_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Point3D linear_acceleration = 4;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_acceleration_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Point3D angular_velocity = 5;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double heading = 6;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.heading_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.common.Point3D linear_acceleration_vrf = 7;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_acceleration_vrf_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Point3D angular_velocity_vrf = 8;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.angular_velocity_vrf_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Point3D euler_angles = 9;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.euler_angles_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Point3D linear_velocity_vrf = 10;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.linear_velocity_vrf_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::PointENU>()},
    {::_pbi::TcParser::GetTable<::control::common::Quaternion>()},
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:control.localization.Pose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.linear_acceleration_ != nullptr);
      _impl_.linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.linear_acceleration_vrf_ != nullptr);
      _impl_.linear_acceleration_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.angular_velocity_vrf_ != nullptr);
      _impl_.angular_velocity_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.euler_angles_ != nullptr);
      _impl_.euler_angles_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    ABSL_DCHECK(_impl_.linear_velocity_vrf_ != nullptr);
    _impl_.linear_velocity_vrf_->Clear();
  }
  _impl_.heading_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Pose::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.localization.Pose)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.position_, _impl_.position_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.orientation_, _impl_.orientation_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Point3D linear_velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.linear_velocity_, _impl_.linear_velocity_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.linear_acceleration_, _impl_.linear_acceleration_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.angular_velocity_, _impl_.angular_velocity_->GetCachedSize(), target, stream);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_heading(), target);
  }

  // optional .control.common.Point3D linear_acceleration_vrf = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.linear_acceleration_vrf_, _impl_.linear_acceleration_vrf_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Point3D angular_velocity_vrf = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *_impl_.angular_velocity_vrf_, _impl_.angular_velocity_vrf_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Point3D euler_angles = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.euler_angles_, _impl_.euler_angles_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Point3D linear_velocity_vrf = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *_impl_.linear_velocity_vrf_, _impl_.linear_velocity_vrf_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.localization.Pose)
  return target;
}

::size_t Pose::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.localization.Pose)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.PointENU position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }
    // optional .control.common.Quaternion orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orientation_);
    }
    // optional .control.common.Point3D linear_velocity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_velocity_);
    }
    // optional .control.common.Point3D linear_acceleration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_acceleration_);
    }
    // optional .control.common.Point3D angular_velocity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_velocity_);
    }
    // optional .control.common.Point3D linear_acceleration_vrf = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_acceleration_vrf_);
    }
    // optional .control.common.Point3D angular_velocity_vrf = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_velocity_vrf_);
    }
    // optional .control.common.Point3D euler_angles = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.euler_angles_);
    }
  }
  if (cached_has_bits & 0x00000300u) {
    // optional .control.common.Point3D linear_velocity_vrf = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_velocity_vrf_);
    }
    // optional double heading = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void Pose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.localization.Pose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::PointENU>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.orientation_ != nullptr);
      if (_this->_impl_.orientation_ == nullptr) {
        _this->_impl_.orientation_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Quaternion>(arena, *from._impl_.orientation_);
      } else {
        _this->_impl_.orientation_->MergeFrom(*from._impl_.orientation_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.linear_velocity_ != nullptr);
      if (_this->_impl_.linear_velocity_ == nullptr) {
        _this->_impl_.linear_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.linear_velocity_);
      } else {
        _this->_impl_.linear_velocity_->MergeFrom(*from._impl_.linear_velocity_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.linear_acceleration_ != nullptr);
      if (_this->_impl_.linear_acceleration_ == nullptr) {
        _this->_impl_.linear_acceleration_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.linear_acceleration_);
      } else {
        _this->_impl_.linear_acceleration_->MergeFrom(*from._impl_.linear_acceleration_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.angular_velocity_ != nullptr);
      if (_this->_impl_.angular_velocity_ == nullptr) {
        _this->_impl_.angular_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.angular_velocity_);
      } else {
        _this->_impl_.angular_velocity_->MergeFrom(*from._impl_.angular_velocity_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.linear_acceleration_vrf_ != nullptr);
      if (_this->_impl_.linear_acceleration_vrf_ == nullptr) {
        _this->_impl_.linear_acceleration_vrf_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.linear_acceleration_vrf_);
      } else {
        _this->_impl_.linear_acceleration_vrf_->MergeFrom(*from._impl_.linear_acceleration_vrf_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.angular_velocity_vrf_ != nullptr);
      if (_this->_impl_.angular_velocity_vrf_ == nullptr) {
        _this->_impl_.angular_velocity_vrf_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.angular_velocity_vrf_);
      } else {
        _this->_impl_.angular_velocity_vrf_->MergeFrom(*from._impl_.angular_velocity_vrf_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.euler_angles_ != nullptr);
      if (_this->_impl_.euler_angles_ == nullptr) {
        _this->_impl_.euler_angles_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.euler_angles_);
      } else {
        _this->_impl_.euler_angles_->MergeFrom(*from._impl_.euler_angles_);
      }
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.linear_velocity_vrf_ != nullptr);
      if (_this->_impl_.linear_velocity_vrf_ == nullptr) {
        _this->_impl_.linear_velocity_vrf_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.linear_velocity_vrf_);
      } else {
        _this->_impl_.linear_velocity_vrf_->MergeFrom(*from._impl_.linear_velocity_vrf_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.localization.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pose::InternalSwap(Pose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.heading_)
      + sizeof(Pose::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_localization_5fmsgs_2fpose_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

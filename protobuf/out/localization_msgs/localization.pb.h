// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: localization_msgs/localization.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/geometry.pb.h"
#include "common_msgs/basic_msgs/pnc_point.pb.h"
#include "localization_msgs/localization_status.pb.h"
#include "localization_msgs/pose.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_localization_5fmsgs_2flocalization_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_localization_5fmsgs_2flocalization_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_localization_5fmsgs_2flocalization_2eproto;
namespace control {
namespace localization {
class LocalizationEstimate;
struct LocalizationEstimateDefaultTypeInternal;
extern LocalizationEstimateDefaultTypeInternal _LocalizationEstimate_default_instance_;
class LocalizationStatus;
struct LocalizationStatusDefaultTypeInternal;
extern LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
class Uncertainty;
struct UncertaintyDefaultTypeInternal;
extern UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
}  // namespace localization
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace localization {
enum MeasureState : int {
  OK = 0,
  WARNNING = 1,
  ERROR = 2,
  CRITICAL_ERROR = 3,
  FATAL_ERROR = 4,
};

bool MeasureState_IsValid(int value);
extern const uint32_t MeasureState_internal_data_[];
constexpr MeasureState MeasureState_MIN = static_cast<MeasureState>(0);
constexpr MeasureState MeasureState_MAX = static_cast<MeasureState>(4);
constexpr int MeasureState_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MeasureState_descriptor();
template <typename T>
const std::string& MeasureState_Name(T value) {
  static_assert(std::is_same<T, MeasureState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MeasureState_Name().");
  return MeasureState_Name(static_cast<MeasureState>(value));
}
template <>
inline const std::string& MeasureState_Name(MeasureState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MeasureState_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MeasureState_Parse(absl::string_view name, MeasureState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeasureState>(
      MeasureState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Uncertainty final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.localization.Uncertainty) */ {
 public:
  inline Uncertainty() : Uncertainty(nullptr) {}
  ~Uncertainty() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Uncertainty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Uncertainty(const Uncertainty& from) : Uncertainty(nullptr, from) {}
  inline Uncertainty(Uncertainty&& from) noexcept
      : Uncertainty(nullptr, std::move(from)) {}
  inline Uncertainty& operator=(const Uncertainty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uncertainty& operator=(Uncertainty&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uncertainty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uncertainty* internal_default_instance() {
    return reinterpret_cast<const Uncertainty*>(
        &_Uncertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Uncertainty& a, Uncertainty& b) { a.Swap(&b); }
  inline void Swap(Uncertainty* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uncertainty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uncertainty* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Uncertainty>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Uncertainty& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Uncertainty& from) { Uncertainty::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Uncertainty* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.localization.Uncertainty"; }

 protected:
  explicit Uncertainty(::google::protobuf::Arena* arena);
  Uncertainty(::google::protobuf::Arena* arena, const Uncertainty& from);
  Uncertainty(::google::protobuf::Arena* arena, Uncertainty&& from) noexcept
      : Uncertainty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionStdDevFieldNumber = 1,
    kOrientationStdDevFieldNumber = 2,
    kLinearVelocityStdDevFieldNumber = 3,
    kLinearAccelerationStdDevFieldNumber = 4,
    kAngularVelocityStdDevFieldNumber = 5,
  };
  // optional .control.common.Point3D position_std_dev = 1;
  bool has_position_std_dev() const;
  void clear_position_std_dev() ;
  const ::control::common::Point3D& position_std_dev() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_position_std_dev();
  ::control::common::Point3D* mutable_position_std_dev();
  void set_allocated_position_std_dev(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_position_std_dev(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_position_std_dev();

  private:
  const ::control::common::Point3D& _internal_position_std_dev() const;
  ::control::common::Point3D* _internal_mutable_position_std_dev();

  public:
  // optional .control.common.Point3D orientation_std_dev = 2;
  bool has_orientation_std_dev() const;
  void clear_orientation_std_dev() ;
  const ::control::common::Point3D& orientation_std_dev() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_orientation_std_dev();
  ::control::common::Point3D* mutable_orientation_std_dev();
  void set_allocated_orientation_std_dev(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_orientation_std_dev(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_orientation_std_dev();

  private:
  const ::control::common::Point3D& _internal_orientation_std_dev() const;
  ::control::common::Point3D* _internal_mutable_orientation_std_dev();

  public:
  // optional .control.common.Point3D linear_velocity_std_dev = 3;
  bool has_linear_velocity_std_dev() const;
  void clear_linear_velocity_std_dev() ;
  const ::control::common::Point3D& linear_velocity_std_dev() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_linear_velocity_std_dev();
  ::control::common::Point3D* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_linear_velocity_std_dev(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_linear_velocity_std_dev();

  private:
  const ::control::common::Point3D& _internal_linear_velocity_std_dev() const;
  ::control::common::Point3D* _internal_mutable_linear_velocity_std_dev();

  public:
  // optional .control.common.Point3D linear_acceleration_std_dev = 4;
  bool has_linear_acceleration_std_dev() const;
  void clear_linear_acceleration_std_dev() ;
  const ::control::common::Point3D& linear_acceleration_std_dev() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_linear_acceleration_std_dev();
  ::control::common::Point3D* mutable_linear_acceleration_std_dev();
  void set_allocated_linear_acceleration_std_dev(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_linear_acceleration_std_dev(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_linear_acceleration_std_dev();

  private:
  const ::control::common::Point3D& _internal_linear_acceleration_std_dev() const;
  ::control::common::Point3D* _internal_mutable_linear_acceleration_std_dev();

  public:
  // optional .control.common.Point3D angular_velocity_std_dev = 5;
  bool has_angular_velocity_std_dev() const;
  void clear_angular_velocity_std_dev() ;
  const ::control::common::Point3D& angular_velocity_std_dev() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_angular_velocity_std_dev();
  ::control::common::Point3D* mutable_angular_velocity_std_dev();
  void set_allocated_angular_velocity_std_dev(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_angular_velocity_std_dev(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_angular_velocity_std_dev();

  private:
  const ::control::common::Point3D& _internal_angular_velocity_std_dev() const;
  ::control::common::Point3D* _internal_mutable_angular_velocity_std_dev();

  public:
  // @@protoc_insertion_point(class_scope:control.localization.Uncertainty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 5,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Uncertainty_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Uncertainty& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::Point3D* position_std_dev_;
    ::control::common::Point3D* orientation_std_dev_;
    ::control::common::Point3D* linear_velocity_std_dev_;
    ::control::common::Point3D* linear_acceleration_std_dev_;
    ::control::common::Point3D* angular_velocity_std_dev_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_2eproto;
};
// -------------------------------------------------------------------

class LocalizationStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.localization.LocalizationStatus) */ {
 public:
  inline LocalizationStatus() : LocalizationStatus(nullptr) {}
  ~LocalizationStatus() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LocalizationStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline LocalizationStatus(const LocalizationStatus& from) : LocalizationStatus(nullptr, from) {}
  inline LocalizationStatus(LocalizationStatus&& from) noexcept
      : LocalizationStatus(nullptr, std::move(from)) {}
  inline LocalizationStatus& operator=(const LocalizationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationStatus& operator=(LocalizationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalizationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalizationStatus* internal_default_instance() {
    return reinterpret_cast<const LocalizationStatus*>(
        &_LocalizationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LocalizationStatus& a, LocalizationStatus& b) { a.Swap(&b); }
  inline void Swap(LocalizationStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalizationStatus* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LocalizationStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocalizationStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LocalizationStatus& from) { LocalizationStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LocalizationStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.localization.LocalizationStatus"; }

 protected:
  explicit LocalizationStatus(::google::protobuf::Arena* arena);
  LocalizationStatus(::google::protobuf::Arena* arena, const LocalizationStatus& from);
  LocalizationStatus(::google::protobuf::Arena* arena, LocalizationStatus&& from) noexcept
      : LocalizationStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStateMessageFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kFusionStatusFieldNumber = 2,
    kGnssStatusFieldNumber = 3,
    kMeasurementTimeFieldNumber = 5,
    kLidarStatusFieldNumber = 4,
  };
  // optional string state_message = 6;
  bool has_state_message() const;
  void clear_state_message() ;
  const std::string& state_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state_message(Arg_&& arg, Args_... args);
  std::string* mutable_state_message();
  PROTOBUF_NODISCARD std::string* release_state_message();
  void set_allocated_state_message(std::string* value);

  private:
  const std::string& _internal_state_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_message(
      const std::string& value);
  std::string* _internal_mutable_state_message();

  public:
  // optional .control.common.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::control::common::Header& header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_header();

  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();

  public:
  // optional .control.localization.MeasureState fusion_status = 2;
  bool has_fusion_status() const;
  void clear_fusion_status() ;
  ::control::localization::MeasureState fusion_status() const;
  void set_fusion_status(::control::localization::MeasureState value);

  private:
  ::control::localization::MeasureState _internal_fusion_status() const;
  void _internal_set_fusion_status(::control::localization::MeasureState value);

  public:
  // optional .control.localization.MeasureState gnss_status = 3 [deprecated = true];
  [[deprecated]]  bool has_gnss_status() const;
  [[deprecated]]  void clear_gnss_status() ;
  [[deprecated]] ::control::localization::MeasureState gnss_status() const;
  [[deprecated]] void set_gnss_status(::control::localization::MeasureState value);

  private:
  ::control::localization::MeasureState _internal_gnss_status() const;
  void _internal_set_gnss_status(::control::localization::MeasureState value);

  public:
  // optional double measurement_time = 5;
  bool has_measurement_time() const;
  void clear_measurement_time() ;
  double measurement_time() const;
  void set_measurement_time(double value);

  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);

  public:
  // optional .control.localization.MeasureState lidar_status = 4 [deprecated = true];
  [[deprecated]]  bool has_lidar_status() const;
  [[deprecated]]  void clear_lidar_status() ;
  [[deprecated]] ::control::localization::MeasureState lidar_status() const;
  [[deprecated]] void set_lidar_status(::control::localization::MeasureState value);

  private:
  ::control::localization::MeasureState _internal_lidar_status() const;
  void _internal_set_lidar_status(::control::localization::MeasureState value);

  public:
  // @@protoc_insertion_point(class_scope:control.localization.LocalizationStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      61, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LocalizationStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LocalizationStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr state_message_;
    ::control::common::Header* header_;
    int fusion_status_;
    int gnss_status_;
    double measurement_time_;
    int lidar_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_2eproto;
};
// -------------------------------------------------------------------

class LocalizationEstimate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.localization.LocalizationEstimate) */ {
 public:
  inline LocalizationEstimate() : LocalizationEstimate(nullptr) {}
  ~LocalizationEstimate() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LocalizationEstimate(
      ::google::protobuf::internal::ConstantInitialized);

  inline LocalizationEstimate(const LocalizationEstimate& from) : LocalizationEstimate(nullptr, from) {}
  inline LocalizationEstimate(LocalizationEstimate&& from) noexcept
      : LocalizationEstimate(nullptr, std::move(from)) {}
  inline LocalizationEstimate& operator=(const LocalizationEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationEstimate& operator=(LocalizationEstimate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalizationEstimate& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalizationEstimate* internal_default_instance() {
    return reinterpret_cast<const LocalizationEstimate*>(
        &_LocalizationEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LocalizationEstimate& a, LocalizationEstimate& b) { a.Swap(&b); }
  inline void Swap(LocalizationEstimate* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationEstimate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalizationEstimate* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LocalizationEstimate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocalizationEstimate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LocalizationEstimate& from) { LocalizationEstimate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LocalizationEstimate* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.localization.LocalizationEstimate"; }

 protected:
  explicit LocalizationEstimate(::google::protobuf::Arena* arena);
  LocalizationEstimate(::google::protobuf::Arena* arena, const LocalizationEstimate& from);
  LocalizationEstimate(::google::protobuf::Arena* arena, LocalizationEstimate&& from) noexcept
      : LocalizationEstimate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTrajectoryPointFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
    kUncertaintyFieldNumber = 3,
    kMsfStatusFieldNumber = 6,
    kSensorStatusFieldNumber = 7,
    kMeasurementTimeFieldNumber = 4,
  };
  // repeated .control.common.TrajectoryPoint trajectory_point = 5;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;

  public:
  void clear_trajectory_point() ;
  ::control::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* mutable_trajectory_point();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& _internal_trajectory_point() const;
  ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* _internal_mutable_trajectory_point();
  public:
  const ::control::common::TrajectoryPoint& trajectory_point(int index) const;
  ::control::common::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& trajectory_point() const;
  // optional .control.common.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::control::common::Header& header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_header();

  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();

  public:
  // optional .control.localization.Pose pose = 2;
  bool has_pose() const;
  void clear_pose() ;
  const ::control::localization::Pose& pose() const;
  PROTOBUF_NODISCARD ::control::localization::Pose* release_pose();
  ::control::localization::Pose* mutable_pose();
  void set_allocated_pose(::control::localization::Pose* value);
  void unsafe_arena_set_allocated_pose(::control::localization::Pose* value);
  ::control::localization::Pose* unsafe_arena_release_pose();

  private:
  const ::control::localization::Pose& _internal_pose() const;
  ::control::localization::Pose* _internal_mutable_pose();

  public:
  // optional .control.localization.Uncertainty uncertainty = 3;
  bool has_uncertainty() const;
  void clear_uncertainty() ;
  const ::control::localization::Uncertainty& uncertainty() const;
  PROTOBUF_NODISCARD ::control::localization::Uncertainty* release_uncertainty();
  ::control::localization::Uncertainty* mutable_uncertainty();
  void set_allocated_uncertainty(::control::localization::Uncertainty* value);
  void unsafe_arena_set_allocated_uncertainty(::control::localization::Uncertainty* value);
  ::control::localization::Uncertainty* unsafe_arena_release_uncertainty();

  private:
  const ::control::localization::Uncertainty& _internal_uncertainty() const;
  ::control::localization::Uncertainty* _internal_mutable_uncertainty();

  public:
  // optional .control.localization.MsfStatus msf_status = 6;
  bool has_msf_status() const;
  void clear_msf_status() ;
  const ::control::localization::MsfStatus& msf_status() const;
  PROTOBUF_NODISCARD ::control::localization::MsfStatus* release_msf_status();
  ::control::localization::MsfStatus* mutable_msf_status();
  void set_allocated_msf_status(::control::localization::MsfStatus* value);
  void unsafe_arena_set_allocated_msf_status(::control::localization::MsfStatus* value);
  ::control::localization::MsfStatus* unsafe_arena_release_msf_status();

  private:
  const ::control::localization::MsfStatus& _internal_msf_status() const;
  ::control::localization::MsfStatus* _internal_mutable_msf_status();

  public:
  // optional .control.localization.MsfSensorMsgStatus sensor_status = 7;
  bool has_sensor_status() const;
  void clear_sensor_status() ;
  const ::control::localization::MsfSensorMsgStatus& sensor_status() const;
  PROTOBUF_NODISCARD ::control::localization::MsfSensorMsgStatus* release_sensor_status();
  ::control::localization::MsfSensorMsgStatus* mutable_sensor_status();
  void set_allocated_sensor_status(::control::localization::MsfSensorMsgStatus* value);
  void unsafe_arena_set_allocated_sensor_status(::control::localization::MsfSensorMsgStatus* value);
  ::control::localization::MsfSensorMsgStatus* unsafe_arena_release_sensor_status();

  private:
  const ::control::localization::MsfSensorMsgStatus& _internal_sensor_status() const;
  ::control::localization::MsfSensorMsgStatus* _internal_mutable_sensor_status();

  public:
  // optional double measurement_time = 4;
  bool has_measurement_time() const;
  void clear_measurement_time() ;
  double measurement_time() const;
  void set_measurement_time(double value);

  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.localization.LocalizationEstimate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 6,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LocalizationEstimate_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LocalizationEstimate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::control::common::TrajectoryPoint > trajectory_point_;
    ::control::common::Header* header_;
    ::control::localization::Pose* pose_;
    ::control::localization::Uncertainty* uncertainty_;
    ::control::localization::MsfStatus* msf_status_;
    ::control::localization::MsfSensorMsgStatus* sensor_status_;
    double measurement_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Uncertainty

// optional .control.common.Point3D position_std_dev = 1;
inline bool Uncertainty::has_position_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_std_dev_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Uncertainty::_internal_position_std_dev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.position_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::position_std_dev() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.position_std_dev)
  return _internal_position_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_position_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_std_dev_);
  }
  _impl_.position_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.position_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_position_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Point3D* released = _impl_.position_std_dev_;
  _impl_.position_std_dev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_position_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.position_std_dev)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Point3D* temp = _impl_.position_std_dev_;
  _impl_.position_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_position_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_std_dev_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.position_std_dev_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.position_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_position_std_dev() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::Point3D* _msg = _internal_mutable_position_std_dev();
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.position_std_dev)
  return _msg;
}
inline void Uncertainty::set_allocated_position_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_std_dev_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.position_std_dev)
}

// optional .control.common.Point3D orientation_std_dev = 2;
inline bool Uncertainty::has_orientation_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_std_dev_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Uncertainty::_internal_orientation_std_dev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.orientation_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::orientation_std_dev() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.orientation_std_dev)
  return _internal_orientation_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_orientation_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_std_dev_);
  }
  _impl_.orientation_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.orientation_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_orientation_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Point3D* released = _impl_.orientation_std_dev_;
  _impl_.orientation_std_dev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_orientation_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.orientation_std_dev)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Point3D* temp = _impl_.orientation_std_dev_;
  _impl_.orientation_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_orientation_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_std_dev_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.orientation_std_dev_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.orientation_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_orientation_std_dev() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::Point3D* _msg = _internal_mutable_orientation_std_dev();
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.orientation_std_dev)
  return _msg;
}
inline void Uncertainty::set_allocated_orientation_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_std_dev_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.orientation_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.orientation_std_dev)
}

// optional .control.common.Point3D linear_velocity_std_dev = 3;
inline bool Uncertainty::has_linear_velocity_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_std_dev_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Uncertainty::_internal_linear_velocity_std_dev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.linear_velocity_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::linear_velocity_std_dev() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.linear_velocity_std_dev)
  return _internal_linear_velocity_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_linear_velocity_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_std_dev_);
  }
  _impl_.linear_velocity_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.linear_velocity_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Point3D* released = _impl_.linear_velocity_std_dev_;
  _impl_.linear_velocity_std_dev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_linear_velocity_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.linear_velocity_std_dev)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Point3D* temp = _impl_.linear_velocity_std_dev_;
  _impl_.linear_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_linear_velocity_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_velocity_std_dev_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.linear_velocity_std_dev_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.linear_velocity_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_linear_velocity_std_dev() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::Point3D* _msg = _internal_mutable_linear_velocity_std_dev();
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.linear_velocity_std_dev)
  return _msg;
}
inline void Uncertainty::set_allocated_linear_velocity_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_std_dev_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.linear_velocity_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.linear_velocity_std_dev)
}

// optional .control.common.Point3D linear_acceleration_std_dev = 4;
inline bool Uncertainty::has_linear_acceleration_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_acceleration_std_dev_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Uncertainty::_internal_linear_acceleration_std_dev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.linear_acceleration_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::linear_acceleration_std_dev() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.linear_acceleration_std_dev)
  return _internal_linear_acceleration_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_linear_acceleration_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_std_dev_);
  }
  _impl_.linear_acceleration_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.linear_acceleration_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::Point3D* released = _impl_.linear_acceleration_std_dev_;
  _impl_.linear_acceleration_std_dev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_linear_acceleration_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.linear_acceleration_std_dev)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::Point3D* temp = _impl_.linear_acceleration_std_dev_;
  _impl_.linear_acceleration_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_linear_acceleration_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_std_dev_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.linear_acceleration_std_dev_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.linear_acceleration_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::common::Point3D* _msg = _internal_mutable_linear_acceleration_std_dev();
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.linear_acceleration_std_dev)
  return _msg;
}
inline void Uncertainty::set_allocated_linear_acceleration_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_std_dev_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.linear_acceleration_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.linear_acceleration_std_dev)
}

// optional .control.common.Point3D angular_velocity_std_dev = 5;
inline bool Uncertainty::has_angular_velocity_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_std_dev_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Uncertainty::_internal_angular_velocity_std_dev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.angular_velocity_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::angular_velocity_std_dev() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.angular_velocity_std_dev)
  return _internal_angular_velocity_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_angular_velocity_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_std_dev_);
  }
  _impl_.angular_velocity_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.angular_velocity_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::common::Point3D* released = _impl_.angular_velocity_std_dev_;
  _impl_.angular_velocity_std_dev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_angular_velocity_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.angular_velocity_std_dev)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::common::Point3D* temp = _impl_.angular_velocity_std_dev_;
  _impl_.angular_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_angular_velocity_std_dev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_std_dev_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.angular_velocity_std_dev_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.angular_velocity_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_angular_velocity_std_dev() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::common::Point3D* _msg = _internal_mutable_angular_velocity_std_dev();
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.angular_velocity_std_dev)
  return _msg;
}
inline void Uncertainty::set_allocated_angular_velocity_std_dev(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_std_dev_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.angular_velocity_std_dev_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.angular_velocity_std_dev)
}

// -------------------------------------------------------------------

// LocalizationEstimate

// optional .control.common.Header header = 1;
inline bool LocalizationEstimate::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::control::common::Header& LocalizationEstimate::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& LocalizationEstimate::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.header)
  return _internal_header();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.header)
}
inline ::control::common::Header* LocalizationEstimate::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* LocalizationEstimate::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::control::common::Header* LocalizationEstimate::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.header_;
}
inline ::control::common::Header* LocalizationEstimate::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.header)
  return _msg;
}
inline void LocalizationEstimate::set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.header)
}

// optional .control.localization.Pose pose = 2;
inline bool LocalizationEstimate::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline const ::control::localization::Pose& LocalizationEstimate::_internal_pose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::localization::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::localization::Pose&>(::control::localization::_Pose_default_instance_);
}
inline const ::control::localization::Pose& LocalizationEstimate::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.pose)
  return _internal_pose();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_pose(::control::localization::Pose* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::control::localization::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.pose)
}
inline ::control::localization::Pose* LocalizationEstimate::release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::localization::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::localization::Pose* LocalizationEstimate::unsafe_arena_release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.pose)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::localization::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::control::localization::Pose* LocalizationEstimate::_internal_mutable_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::localization::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::control::localization::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::control::localization::Pose* LocalizationEstimate::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::localization::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.pose)
  return _msg;
}
inline void LocalizationEstimate::set_allocated_pose(::control::localization::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.pose_ = reinterpret_cast<::control::localization::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.pose)
}

// optional .control.localization.Uncertainty uncertainty = 3;
inline bool LocalizationEstimate::has_uncertainty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uncertainty_ != nullptr);
  return value;
}
inline void LocalizationEstimate::clear_uncertainty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.uncertainty_ != nullptr) _impl_.uncertainty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::control::localization::Uncertainty& LocalizationEstimate::_internal_uncertainty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::localization::Uncertainty* p = _impl_.uncertainty_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::localization::Uncertainty&>(::control::localization::_Uncertainty_default_instance_);
}
inline const ::control::localization::Uncertainty& LocalizationEstimate::uncertainty() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.uncertainty)
  return _internal_uncertainty();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_uncertainty(::control::localization::Uncertainty* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.uncertainty_);
  }
  _impl_.uncertainty_ = reinterpret_cast<::control::localization::Uncertainty*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.uncertainty)
}
inline ::control::localization::Uncertainty* LocalizationEstimate::release_uncertainty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::localization::Uncertainty* released = _impl_.uncertainty_;
  _impl_.uncertainty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::localization::Uncertainty* LocalizationEstimate::unsafe_arena_release_uncertainty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.uncertainty)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::localization::Uncertainty* temp = _impl_.uncertainty_;
  _impl_.uncertainty_ = nullptr;
  return temp;
}
inline ::control::localization::Uncertainty* LocalizationEstimate::_internal_mutable_uncertainty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.uncertainty_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::localization::Uncertainty>(GetArena());
    _impl_.uncertainty_ = reinterpret_cast<::control::localization::Uncertainty*>(p);
  }
  return _impl_.uncertainty_;
}
inline ::control::localization::Uncertainty* LocalizationEstimate::mutable_uncertainty() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::localization::Uncertainty* _msg = _internal_mutable_uncertainty();
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.uncertainty)
  return _msg;
}
inline void LocalizationEstimate::set_allocated_uncertainty(::control::localization::Uncertainty* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.uncertainty_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.uncertainty_ = reinterpret_cast<::control::localization::Uncertainty*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.uncertainty)
}

// optional double measurement_time = 4;
inline bool LocalizationEstimate::has_measurement_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void LocalizationEstimate::clear_measurement_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LocalizationEstimate::measurement_time() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.measurement_time)
  return _internal_measurement_time();
}
inline void LocalizationEstimate::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.localization.LocalizationEstimate.measurement_time)
}
inline double LocalizationEstimate::_internal_measurement_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.measurement_time_;
}
inline void LocalizationEstimate::_internal_set_measurement_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.measurement_time_ = value;
}

// repeated .control.common.TrajectoryPoint trajectory_point = 5;
inline int LocalizationEstimate::_internal_trajectory_point_size() const {
  return _internal_trajectory_point().size();
}
inline int LocalizationEstimate::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::control::common::TrajectoryPoint* LocalizationEstimate::mutable_trajectory_point(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.trajectory_point)
  return _internal_mutable_trajectory_point()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>* LocalizationEstimate::mutable_trajectory_point()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.localization.LocalizationEstimate.trajectory_point)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trajectory_point();
}
inline const ::control::common::TrajectoryPoint& LocalizationEstimate::trajectory_point(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.trajectory_point)
  return _internal_trajectory_point().Get(index);
}
inline ::control::common::TrajectoryPoint* LocalizationEstimate::add_trajectory_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::common::TrajectoryPoint* _add = _internal_mutable_trajectory_point()->Add();
  // @@protoc_insertion_point(field_add:control.localization.LocalizationEstimate.trajectory_point)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>& LocalizationEstimate::trajectory_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.localization.LocalizationEstimate.trajectory_point)
  return _internal_trajectory_point();
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>&
LocalizationEstimate::_internal_trajectory_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trajectory_point_;
}
inline ::google::protobuf::RepeatedPtrField<::control::common::TrajectoryPoint>*
LocalizationEstimate::_internal_mutable_trajectory_point() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trajectory_point_;
}

// optional .control.localization.MsfStatus msf_status = 6;
inline bool LocalizationEstimate::has_msf_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msf_status_ != nullptr);
  return value;
}
inline const ::control::localization::MsfStatus& LocalizationEstimate::_internal_msf_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::localization::MsfStatus* p = _impl_.msf_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::localization::MsfStatus&>(::control::localization::_MsfStatus_default_instance_);
}
inline const ::control::localization::MsfStatus& LocalizationEstimate::msf_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.msf_status)
  return _internal_msf_status();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_msf_status(::control::localization::MsfStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.msf_status_);
  }
  _impl_.msf_status_ = reinterpret_cast<::control::localization::MsfStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.msf_status)
}
inline ::control::localization::MsfStatus* LocalizationEstimate::release_msf_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::localization::MsfStatus* released = _impl_.msf_status_;
  _impl_.msf_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::localization::MsfStatus* LocalizationEstimate::unsafe_arena_release_msf_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.msf_status)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::localization::MsfStatus* temp = _impl_.msf_status_;
  _impl_.msf_status_ = nullptr;
  return temp;
}
inline ::control::localization::MsfStatus* LocalizationEstimate::_internal_mutable_msf_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.msf_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::localization::MsfStatus>(GetArena());
    _impl_.msf_status_ = reinterpret_cast<::control::localization::MsfStatus*>(p);
  }
  return _impl_.msf_status_;
}
inline ::control::localization::MsfStatus* LocalizationEstimate::mutable_msf_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::localization::MsfStatus* _msg = _internal_mutable_msf_status();
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.msf_status)
  return _msg;
}
inline void LocalizationEstimate::set_allocated_msf_status(::control::localization::MsfStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.msf_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.msf_status_ = reinterpret_cast<::control::localization::MsfStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.msf_status)
}

// optional .control.localization.MsfSensorMsgStatus sensor_status = 7;
inline bool LocalizationEstimate::has_sensor_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sensor_status_ != nullptr);
  return value;
}
inline const ::control::localization::MsfSensorMsgStatus& LocalizationEstimate::_internal_sensor_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::localization::MsfSensorMsgStatus* p = _impl_.sensor_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::localization::MsfSensorMsgStatus&>(::control::localization::_MsfSensorMsgStatus_default_instance_);
}
inline const ::control::localization::MsfSensorMsgStatus& LocalizationEstimate::sensor_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.sensor_status)
  return _internal_sensor_status();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_sensor_status(::control::localization::MsfSensorMsgStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sensor_status_);
  }
  _impl_.sensor_status_ = reinterpret_cast<::control::localization::MsfSensorMsgStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.sensor_status)
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::release_sensor_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::localization::MsfSensorMsgStatus* released = _impl_.sensor_status_;
  _impl_.sensor_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::unsafe_arena_release_sensor_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.sensor_status)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::localization::MsfSensorMsgStatus* temp = _impl_.sensor_status_;
  _impl_.sensor_status_ = nullptr;
  return temp;
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::_internal_mutable_sensor_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sensor_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::localization::MsfSensorMsgStatus>(GetArena());
    _impl_.sensor_status_ = reinterpret_cast<::control::localization::MsfSensorMsgStatus*>(p);
  }
  return _impl_.sensor_status_;
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::mutable_sensor_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::localization::MsfSensorMsgStatus* _msg = _internal_mutable_sensor_status();
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.sensor_status)
  return _msg;
}
inline void LocalizationEstimate::set_allocated_sensor_status(::control::localization::MsfSensorMsgStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sensor_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.sensor_status_ = reinterpret_cast<::control::localization::MsfSensorMsgStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.sensor_status)
}

// -------------------------------------------------------------------

// LocalizationStatus

// optional .control.common.Header header = 1;
inline bool LocalizationStatus::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::control::common::Header& LocalizationStatus::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& LocalizationStatus::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.header)
  return _internal_header();
}
inline void LocalizationStatus::unsafe_arena_set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationStatus.header)
}
inline ::control::common::Header* LocalizationStatus::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* LocalizationStatus::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.LocalizationStatus.header)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::control::common::Header* LocalizationStatus::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.header_;
}
inline ::control::common::Header* LocalizationStatus::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationStatus.header)
  return _msg;
}
inline void LocalizationStatus::set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationStatus.header)
}

// optional .control.localization.MeasureState fusion_status = 2;
inline bool LocalizationStatus::has_fusion_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LocalizationStatus::clear_fusion_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fusion_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::control::localization::MeasureState LocalizationStatus::fusion_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.fusion_status)
  return _internal_fusion_status();
}
inline void LocalizationStatus::set_fusion_status(::control::localization::MeasureState value) {
  _internal_set_fusion_status(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.fusion_status)
}
inline ::control::localization::MeasureState LocalizationStatus::_internal_fusion_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::MeasureState>(_impl_.fusion_status_);
}
inline void LocalizationStatus::_internal_set_fusion_status(::control::localization::MeasureState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::MeasureState_IsValid(value));
  _impl_.fusion_status_ = value;
}

// optional .control.localization.MeasureState gnss_status = 3 [deprecated = true];
inline bool LocalizationStatus::has_gnss_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LocalizationStatus::clear_gnss_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gnss_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::control::localization::MeasureState LocalizationStatus::gnss_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.gnss_status)
  return _internal_gnss_status();
}
inline void LocalizationStatus::set_gnss_status(::control::localization::MeasureState value) {
  _internal_set_gnss_status(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.gnss_status)
}
inline ::control::localization::MeasureState LocalizationStatus::_internal_gnss_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::MeasureState>(_impl_.gnss_status_);
}
inline void LocalizationStatus::_internal_set_gnss_status(::control::localization::MeasureState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::MeasureState_IsValid(value));
  _impl_.gnss_status_ = value;
}

// optional .control.localization.MeasureState lidar_status = 4 [deprecated = true];
inline bool LocalizationStatus::has_lidar_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void LocalizationStatus::clear_lidar_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lidar_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::control::localization::MeasureState LocalizationStatus::lidar_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.lidar_status)
  return _internal_lidar_status();
}
inline void LocalizationStatus::set_lidar_status(::control::localization::MeasureState value) {
  _internal_set_lidar_status(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.lidar_status)
}
inline ::control::localization::MeasureState LocalizationStatus::_internal_lidar_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::MeasureState>(_impl_.lidar_status_);
}
inline void LocalizationStatus::_internal_set_lidar_status(::control::localization::MeasureState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::MeasureState_IsValid(value));
  _impl_.lidar_status_ = value;
}

// optional double measurement_time = 5;
inline bool LocalizationStatus::has_measurement_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void LocalizationStatus::clear_measurement_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LocalizationStatus::measurement_time() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.measurement_time)
  return _internal_measurement_time();
}
inline void LocalizationStatus::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.measurement_time)
}
inline double LocalizationStatus::_internal_measurement_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.measurement_time_;
}
inline void LocalizationStatus::_internal_set_measurement_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.measurement_time_ = value;
}

// optional string state_message = 6;
inline bool LocalizationStatus::has_state_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalizationStatus::clear_state_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalizationStatus::state_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.state_message)
  return _internal_state_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalizationStatus::set_state_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.state_message)
}
inline std::string* LocalizationStatus::mutable_state_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state_message();
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationStatus.state_message)
  return _s;
}
inline const std::string& LocalizationStatus::_internal_state_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_message_.Get();
}
inline void LocalizationStatus::_internal_set_state_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_message_.Set(value, GetArena());
}
inline std::string* LocalizationStatus::_internal_mutable_state_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.state_message_.Mutable( GetArena());
}
inline std::string* LocalizationStatus::release_state_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.LocalizationStatus.state_message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.state_message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LocalizationStatus::set_allocated_state_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_message_.IsDefault()) {
          _impl_.state_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationStatus.state_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::localization::MeasureState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::MeasureState>() {
  return ::control::localization::MeasureState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: localization_msgs/localization_status.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_5fstatus_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_5fstatus_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_localization_5fmsgs_2flocalization_5fstatus_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_localization_5fmsgs_2flocalization_5fstatus_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_localization_5fmsgs_2flocalization_5fstatus_2eproto;
namespace control {
namespace localization {
class MsfSensorMsgStatus;
struct MsfSensorMsgStatusDefaultTypeInternal;
extern MsfSensorMsgStatusDefaultTypeInternal _MsfSensorMsgStatus_default_instance_;
class MsfStatus;
struct MsfStatusDefaultTypeInternal;
extern MsfStatusDefaultTypeInternal _MsfStatus_default_instance_;
}  // namespace localization
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace localization {
enum LocalLidarStatus : int {
  MSF_LOCAL_LIDAR_NORMAL = 0,
  MSF_LOCAL_LIDAR_MAP_MISSING = 1,
  MSF_LOCAL_LIDAR_EXTRINSICS_MISSING = 2,
  MSF_LOCAL_LIDAR_MAP_LOADING_FAILED = 3,
  MSF_LOCAL_LIDAR_NO_OUTPUT = 4,
  MSF_LOCAL_LIDAR_OUT_OF_MAP = 5,
  MSF_LOCAL_LIDAR_NOT_GOOD = 6,
  MSF_LOCAL_LIDAR_UNDEFINED_STATUS = 7,
};

bool LocalLidarStatus_IsValid(int value);
extern const uint32_t LocalLidarStatus_internal_data_[];
constexpr LocalLidarStatus LocalLidarStatus_MIN = static_cast<LocalLidarStatus>(0);
constexpr LocalLidarStatus LocalLidarStatus_MAX = static_cast<LocalLidarStatus>(7);
constexpr int LocalLidarStatus_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
LocalLidarStatus_descriptor();
template <typename T>
const std::string& LocalLidarStatus_Name(T value) {
  static_assert(std::is_same<T, LocalLidarStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LocalLidarStatus_Name().");
  return LocalLidarStatus_Name(static_cast<LocalLidarStatus>(value));
}
template <>
inline const std::string& LocalLidarStatus_Name(LocalLidarStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LocalLidarStatus_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool LocalLidarStatus_Parse(absl::string_view name, LocalLidarStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalLidarStatus>(
      LocalLidarStatus_descriptor(), name, value);
}
enum LocalLidarQuality : int {
  MSF_LOCAL_LIDAR_VERY_GOOD = 0,
  MSF_LOCAL_LIDAR_GOOD = 1,
  MSF_LOCAL_LIDAR_NOT_BAD = 2,
  MSF_LOCAL_LIDAR_BAD = 3,
};

bool LocalLidarQuality_IsValid(int value);
extern const uint32_t LocalLidarQuality_internal_data_[];
constexpr LocalLidarQuality LocalLidarQuality_MIN = static_cast<LocalLidarQuality>(0);
constexpr LocalLidarQuality LocalLidarQuality_MAX = static_cast<LocalLidarQuality>(3);
constexpr int LocalLidarQuality_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
LocalLidarQuality_descriptor();
template <typename T>
const std::string& LocalLidarQuality_Name(T value) {
  static_assert(std::is_same<T, LocalLidarQuality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LocalLidarQuality_Name().");
  return LocalLidarQuality_Name(static_cast<LocalLidarQuality>(value));
}
template <>
inline const std::string& LocalLidarQuality_Name(LocalLidarQuality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LocalLidarQuality_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool LocalLidarQuality_Parse(absl::string_view name, LocalLidarQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalLidarQuality>(
      LocalLidarQuality_descriptor(), name, value);
}
enum LocalLidarConsistency : int {
  MSF_LOCAL_LIDAR_CONSISTENCY_00 = 0,
  MSF_LOCAL_LIDAR_CONSISTENCY_01 = 1,
  MSF_LOCAL_LIDAR_CONSISTENCY_02 = 2,
  MSF_LOCAL_LIDAR_CONSISTENCY_03 = 3,
};

bool LocalLidarConsistency_IsValid(int value);
extern const uint32_t LocalLidarConsistency_internal_data_[];
constexpr LocalLidarConsistency LocalLidarConsistency_MIN = static_cast<LocalLidarConsistency>(0);
constexpr LocalLidarConsistency LocalLidarConsistency_MAX = static_cast<LocalLidarConsistency>(3);
constexpr int LocalLidarConsistency_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
LocalLidarConsistency_descriptor();
template <typename T>
const std::string& LocalLidarConsistency_Name(T value) {
  static_assert(std::is_same<T, LocalLidarConsistency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LocalLidarConsistency_Name().");
  return LocalLidarConsistency_Name(static_cast<LocalLidarConsistency>(value));
}
template <>
inline const std::string& LocalLidarConsistency_Name(LocalLidarConsistency value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LocalLidarConsistency_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool LocalLidarConsistency_Parse(absl::string_view name, LocalLidarConsistency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalLidarConsistency>(
      LocalLidarConsistency_descriptor(), name, value);
}
enum GnssConsistency : int {
  MSF_GNSS_CONSISTENCY_00 = 0,
  MSF_GNSS_CONSISTENCY_01 = 1,
  MSF_GNSS_CONSISTENCY_02 = 2,
  MSF_GNSS_CONSISTENCY_03 = 3,
};

bool GnssConsistency_IsValid(int value);
extern const uint32_t GnssConsistency_internal_data_[];
constexpr GnssConsistency GnssConsistency_MIN = static_cast<GnssConsistency>(0);
constexpr GnssConsistency GnssConsistency_MAX = static_cast<GnssConsistency>(3);
constexpr int GnssConsistency_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GnssConsistency_descriptor();
template <typename T>
const std::string& GnssConsistency_Name(T value) {
  static_assert(std::is_same<T, GnssConsistency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GnssConsistency_Name().");
  return GnssConsistency_Name(static_cast<GnssConsistency>(value));
}
template <>
inline const std::string& GnssConsistency_Name(GnssConsistency value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GnssConsistency_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GnssConsistency_Parse(absl::string_view name, GnssConsistency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GnssConsistency>(
      GnssConsistency_descriptor(), name, value);
}
enum GnssPositionType : int {
  NONE = 0,
  FIXEDPOS = 1,
  FIXEDHEIGHT = 2,
  FLOATCONV = 4,
  WIDELANE = 5,
  NARROWLANE = 6,
  DOPPLER_VELOCITY = 8,
  SINGLE = 16,
  PSRDIFF = 17,
  WAAS = 18,
  PROPOGATED = 19,
  OMNISTAR = 20,
  L1_FLOAT = 32,
  IONOFREE_FLOAT = 33,
  NARROW_FLOAT = 34,
  L1_INT = 48,
  WIDE_INT = 49,
  NARROW_INT = 50,
  RTK_DIRECT_INS = 51,
  INS_SBAS = 52,
  INS_PSRSP = 53,
  INS_PSRDIFF = 54,
  INS_RTKFLOAT = 55,
  INS_RTKFIXED = 56,
  INS_OMNISTAR = 57,
  INS_OMNISTAR_HP = 58,
  INS_OMNISTAR_XP = 59,
  OMNISTAR_HP = 64,
  OMNISTAR_XP = 65,
  PPP_CONVERGING = 68,
  PPP = 69,
  INS_PPP_Converging = 73,
  INS_PPP = 74,
  MSG_LOSS = 91,
};

bool GnssPositionType_IsValid(int value);
extern const uint32_t GnssPositionType_internal_data_[];
constexpr GnssPositionType GnssPositionType_MIN = static_cast<GnssPositionType>(0);
constexpr GnssPositionType GnssPositionType_MAX = static_cast<GnssPositionType>(91);
constexpr int GnssPositionType_ARRAYSIZE = 91 + 1;
const ::google::protobuf::EnumDescriptor*
GnssPositionType_descriptor();
template <typename T>
const std::string& GnssPositionType_Name(T value) {
  static_assert(std::is_same<T, GnssPositionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GnssPositionType_Name().");
  return ::google::protobuf::internal::NameOfEnum(GnssPositionType_descriptor(), value);
}
inline bool GnssPositionType_Parse(absl::string_view name, GnssPositionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GnssPositionType>(
      GnssPositionType_descriptor(), name, value);
}
enum ImuMsgDelayStatus : int {
  IMU_DELAY_NORMAL = 0,
  IMU_DELAY_1 = 1,
  IMU_DELAY_2 = 2,
  IMU_DELAY_3 = 3,
  IMU_DELAY_ABNORMAL = 4,
};

bool ImuMsgDelayStatus_IsValid(int value);
extern const uint32_t ImuMsgDelayStatus_internal_data_[];
constexpr ImuMsgDelayStatus ImuMsgDelayStatus_MIN = static_cast<ImuMsgDelayStatus>(0);
constexpr ImuMsgDelayStatus ImuMsgDelayStatus_MAX = static_cast<ImuMsgDelayStatus>(4);
constexpr int ImuMsgDelayStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ImuMsgDelayStatus_descriptor();
template <typename T>
const std::string& ImuMsgDelayStatus_Name(T value) {
  static_assert(std::is_same<T, ImuMsgDelayStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImuMsgDelayStatus_Name().");
  return ImuMsgDelayStatus_Name(static_cast<ImuMsgDelayStatus>(value));
}
template <>
inline const std::string& ImuMsgDelayStatus_Name(ImuMsgDelayStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ImuMsgDelayStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ImuMsgDelayStatus_Parse(absl::string_view name, ImuMsgDelayStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImuMsgDelayStatus>(
      ImuMsgDelayStatus_descriptor(), name, value);
}
enum ImuMsgMissingStatus : int {
  IMU_MISSING_NORMAL = 0,
  IMU_MISSING_1 = 1,
  IMU_MISSING_2 = 2,
  IMU_MISSING_3 = 3,
  IMU_MISSING_4 = 4,
  IMU_MISSING_5 = 5,
  IMU_MISSING_ABNORMAL = 6,
};

bool ImuMsgMissingStatus_IsValid(int value);
extern const uint32_t ImuMsgMissingStatus_internal_data_[];
constexpr ImuMsgMissingStatus ImuMsgMissingStatus_MIN = static_cast<ImuMsgMissingStatus>(0);
constexpr ImuMsgMissingStatus ImuMsgMissingStatus_MAX = static_cast<ImuMsgMissingStatus>(6);
constexpr int ImuMsgMissingStatus_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ImuMsgMissingStatus_descriptor();
template <typename T>
const std::string& ImuMsgMissingStatus_Name(T value) {
  static_assert(std::is_same<T, ImuMsgMissingStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImuMsgMissingStatus_Name().");
  return ImuMsgMissingStatus_Name(static_cast<ImuMsgMissingStatus>(value));
}
template <>
inline const std::string& ImuMsgMissingStatus_Name(ImuMsgMissingStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ImuMsgMissingStatus_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ImuMsgMissingStatus_Parse(absl::string_view name, ImuMsgMissingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImuMsgMissingStatus>(
      ImuMsgMissingStatus_descriptor(), name, value);
}
enum ImuMsgDataStatus : int {
  IMU_DATA_NORMAL = 0,
  IMU_DATA_ABNORMAL = 1,
  IMU_DATA_OTHER = 2,
};

bool ImuMsgDataStatus_IsValid(int value);
extern const uint32_t ImuMsgDataStatus_internal_data_[];
constexpr ImuMsgDataStatus ImuMsgDataStatus_MIN = static_cast<ImuMsgDataStatus>(0);
constexpr ImuMsgDataStatus ImuMsgDataStatus_MAX = static_cast<ImuMsgDataStatus>(2);
constexpr int ImuMsgDataStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ImuMsgDataStatus_descriptor();
template <typename T>
const std::string& ImuMsgDataStatus_Name(T value) {
  static_assert(std::is_same<T, ImuMsgDataStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImuMsgDataStatus_Name().");
  return ImuMsgDataStatus_Name(static_cast<ImuMsgDataStatus>(value));
}
template <>
inline const std::string& ImuMsgDataStatus_Name(ImuMsgDataStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ImuMsgDataStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ImuMsgDataStatus_Parse(absl::string_view name, ImuMsgDataStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImuMsgDataStatus>(
      ImuMsgDataStatus_descriptor(), name, value);
}
enum MsfRunningStatus : int {
  MSF_SOL_LIDAR_GNSS = 0,
  MSF_SOL_X_GNSS = 1,
  MSF_SOL_LIDAR_X = 2,
  MSF_SOL_LIDAR_XX = 3,
  MSF_SOL_LIDAR_XXX = 4,
  MSF_SOL_X_X = 5,
  MSF_SOL_X_XX = 6,
  MSF_SOL_X_XXX = 7,
  MSF_SSOL_LIDAR_GNSS = 8,
  MSF_SSOL_X_GNSS = 9,
  MSF_SSOL_LIDAR_X = 10,
  MSF_SSOL_LIDAR_XX = 11,
  MSF_SSOL_LIDAR_XXX = 12,
  MSF_SSOL_X_X = 13,
  MSF_SSOL_X_XX = 14,
  MSF_SSOL_X_XXX = 15,
  MSF_NOSOL_LIDAR_GNSS = 16,
  MSF_NOSOL_X_GNSS = 17,
  MSF_NOSOL_LIDAR_X = 18,
  MSF_NOSOL_LIDAR_XX = 19,
  MSF_NOSOL_LIDAR_XXX = 20,
  MSF_NOSOL_X_X = 21,
  MSF_NOSOL_X_XX = 22,
  MSF_NOSOL_X_XXX = 23,
  MSF_RUNNING_INIT = 24,
};

bool MsfRunningStatus_IsValid(int value);
extern const uint32_t MsfRunningStatus_internal_data_[];
constexpr MsfRunningStatus MsfRunningStatus_MIN = static_cast<MsfRunningStatus>(0);
constexpr MsfRunningStatus MsfRunningStatus_MAX = static_cast<MsfRunningStatus>(24);
constexpr int MsfRunningStatus_ARRAYSIZE = 24 + 1;
const ::google::protobuf::EnumDescriptor*
MsfRunningStatus_descriptor();
template <typename T>
const std::string& MsfRunningStatus_Name(T value) {
  static_assert(std::is_same<T, MsfRunningStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsfRunningStatus_Name().");
  return MsfRunningStatus_Name(static_cast<MsfRunningStatus>(value));
}
template <>
inline const std::string& MsfRunningStatus_Name(MsfRunningStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsfRunningStatus_descriptor,
                                                 0, 24>(
      static_cast<int>(value));
}
inline bool MsfRunningStatus_Parse(absl::string_view name, MsfRunningStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsfRunningStatus>(
      MsfRunningStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MsfStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.localization.MsfStatus) */ {
 public:
  inline MsfStatus() : MsfStatus(nullptr) {}
  ~MsfStatus() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsfStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsfStatus(const MsfStatus& from) : MsfStatus(nullptr, from) {}
  inline MsfStatus(MsfStatus&& from) noexcept
      : MsfStatus(nullptr, std::move(from)) {}
  inline MsfStatus& operator=(const MsfStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsfStatus& operator=(MsfStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsfStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsfStatus* internal_default_instance() {
    return reinterpret_cast<const MsfStatus*>(
        &_MsfStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MsfStatus& a, MsfStatus& b) { a.Swap(&b); }
  inline void Swap(MsfStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsfStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsfStatus* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MsfStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsfStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsfStatus& from) { MsfStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MsfStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.localization.MsfStatus"; }

 protected:
  explicit MsfStatus(::google::protobuf::Arena* arena);
  MsfStatus(::google::protobuf::Arena* arena, const MsfStatus& from);
  MsfStatus(::google::protobuf::Arena* arena, MsfStatus&& from) noexcept
      : MsfStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocalLidarConsistencyFieldNumber = 1,
    kGnssConsistencyFieldNumber = 2,
    kLocalLidarStatusFieldNumber = 3,
    kLocalLidarQualityFieldNumber = 4,
    kGnssposPositionTypeFieldNumber = 5,
    kMsfRunningStatusFieldNumber = 6,
  };
  // optional .control.localization.LocalLidarConsistency local_lidar_consistency = 1;
  bool has_local_lidar_consistency() const;
  void clear_local_lidar_consistency() ;
  ::control::localization::LocalLidarConsistency local_lidar_consistency() const;
  void set_local_lidar_consistency(::control::localization::LocalLidarConsistency value);

  private:
  ::control::localization::LocalLidarConsistency _internal_local_lidar_consistency() const;
  void _internal_set_local_lidar_consistency(::control::localization::LocalLidarConsistency value);

  public:
  // optional .control.localization.GnssConsistency gnss_consistency = 2;
  bool has_gnss_consistency() const;
  void clear_gnss_consistency() ;
  ::control::localization::GnssConsistency gnss_consistency() const;
  void set_gnss_consistency(::control::localization::GnssConsistency value);

  private:
  ::control::localization::GnssConsistency _internal_gnss_consistency() const;
  void _internal_set_gnss_consistency(::control::localization::GnssConsistency value);

  public:
  // optional .control.localization.LocalLidarStatus local_lidar_status = 3;
  bool has_local_lidar_status() const;
  void clear_local_lidar_status() ;
  ::control::localization::LocalLidarStatus local_lidar_status() const;
  void set_local_lidar_status(::control::localization::LocalLidarStatus value);

  private:
  ::control::localization::LocalLidarStatus _internal_local_lidar_status() const;
  void _internal_set_local_lidar_status(::control::localization::LocalLidarStatus value);

  public:
  // optional .control.localization.LocalLidarQuality local_lidar_quality = 4;
  bool has_local_lidar_quality() const;
  void clear_local_lidar_quality() ;
  ::control::localization::LocalLidarQuality local_lidar_quality() const;
  void set_local_lidar_quality(::control::localization::LocalLidarQuality value);

  private:
  ::control::localization::LocalLidarQuality _internal_local_lidar_quality() const;
  void _internal_set_local_lidar_quality(::control::localization::LocalLidarQuality value);

  public:
  // optional .control.localization.GnssPositionType gnsspos_position_type = 5;
  bool has_gnsspos_position_type() const;
  void clear_gnsspos_position_type() ;
  ::control::localization::GnssPositionType gnsspos_position_type() const;
  void set_gnsspos_position_type(::control::localization::GnssPositionType value);

  private:
  ::control::localization::GnssPositionType _internal_gnsspos_position_type() const;
  void _internal_set_gnsspos_position_type(::control::localization::GnssPositionType value);

  public:
  // optional .control.localization.MsfRunningStatus msf_running_status = 6;
  bool has_msf_running_status() const;
  void clear_msf_running_status() ;
  ::control::localization::MsfRunningStatus msf_running_status() const;
  void set_msf_running_status(::control::localization::MsfRunningStatus value);

  private:
  ::control::localization::MsfRunningStatus _internal_msf_running_status() const;
  void _internal_set_msf_running_status(::control::localization::MsfRunningStatus value);

  public:
  // @@protoc_insertion_point(class_scope:control.localization.MsfStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MsfStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsfStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int local_lidar_consistency_;
    int gnss_consistency_;
    int local_lidar_status_;
    int local_lidar_quality_;
    int gnsspos_position_type_;
    int msf_running_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class MsfSensorMsgStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.localization.MsfSensorMsgStatus) */ {
 public:
  inline MsfSensorMsgStatus() : MsfSensorMsgStatus(nullptr) {}
  ~MsfSensorMsgStatus() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsfSensorMsgStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsfSensorMsgStatus(const MsfSensorMsgStatus& from) : MsfSensorMsgStatus(nullptr, from) {}
  inline MsfSensorMsgStatus(MsfSensorMsgStatus&& from) noexcept
      : MsfSensorMsgStatus(nullptr, std::move(from)) {}
  inline MsfSensorMsgStatus& operator=(const MsfSensorMsgStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsfSensorMsgStatus& operator=(MsfSensorMsgStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsfSensorMsgStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsfSensorMsgStatus* internal_default_instance() {
    return reinterpret_cast<const MsfSensorMsgStatus*>(
        &_MsfSensorMsgStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MsfSensorMsgStatus& a, MsfSensorMsgStatus& b) { a.Swap(&b); }
  inline void Swap(MsfSensorMsgStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsfSensorMsgStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsfSensorMsgStatus* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MsfSensorMsgStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsfSensorMsgStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsfSensorMsgStatus& from) { MsfSensorMsgStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MsfSensorMsgStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.localization.MsfSensorMsgStatus"; }

 protected:
  explicit MsfSensorMsgStatus(::google::protobuf::Arena* arena);
  MsfSensorMsgStatus(::google::protobuf::Arena* arena, const MsfSensorMsgStatus& from);
  MsfSensorMsgStatus(::google::protobuf::Arena* arena, MsfSensorMsgStatus&& from) noexcept
      : MsfSensorMsgStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImuDelayStatusFieldNumber = 1,
    kImuMissingStatusFieldNumber = 2,
    kImuDataStatusFieldNumber = 3,
  };
  // optional .control.localization.ImuMsgDelayStatus imu_delay_status = 1;
  bool has_imu_delay_status() const;
  void clear_imu_delay_status() ;
  ::control::localization::ImuMsgDelayStatus imu_delay_status() const;
  void set_imu_delay_status(::control::localization::ImuMsgDelayStatus value);

  private:
  ::control::localization::ImuMsgDelayStatus _internal_imu_delay_status() const;
  void _internal_set_imu_delay_status(::control::localization::ImuMsgDelayStatus value);

  public:
  // optional .control.localization.ImuMsgMissingStatus imu_missing_status = 2;
  bool has_imu_missing_status() const;
  void clear_imu_missing_status() ;
  ::control::localization::ImuMsgMissingStatus imu_missing_status() const;
  void set_imu_missing_status(::control::localization::ImuMsgMissingStatus value);

  private:
  ::control::localization::ImuMsgMissingStatus _internal_imu_missing_status() const;
  void _internal_set_imu_missing_status(::control::localization::ImuMsgMissingStatus value);

  public:
  // optional .control.localization.ImuMsgDataStatus imu_data_status = 3;
  bool has_imu_data_status() const;
  void clear_imu_data_status() ;
  ::control::localization::ImuMsgDataStatus imu_data_status() const;
  void set_imu_data_status(::control::localization::ImuMsgDataStatus value);

  private:
  ::control::localization::ImuMsgDataStatus _internal_imu_data_status() const;
  void _internal_set_imu_data_status(::control::localization::ImuMsgDataStatus value);

  public:
  // @@protoc_insertion_point(class_scope:control.localization.MsfSensorMsgStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MsfSensorMsgStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsfSensorMsgStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int imu_delay_status_;
    int imu_missing_status_;
    int imu_data_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_5fstatus_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsfSensorMsgStatus

// optional .control.localization.ImuMsgDelayStatus imu_delay_status = 1;
inline bool MsfSensorMsgStatus::has_imu_delay_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MsfSensorMsgStatus::clear_imu_delay_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imu_delay_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::control::localization::ImuMsgDelayStatus MsfSensorMsgStatus::imu_delay_status() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfSensorMsgStatus.imu_delay_status)
  return _internal_imu_delay_status();
}
inline void MsfSensorMsgStatus::set_imu_delay_status(::control::localization::ImuMsgDelayStatus value) {
  _internal_set_imu_delay_status(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.localization.MsfSensorMsgStatus.imu_delay_status)
}
inline ::control::localization::ImuMsgDelayStatus MsfSensorMsgStatus::_internal_imu_delay_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::ImuMsgDelayStatus>(_impl_.imu_delay_status_);
}
inline void MsfSensorMsgStatus::_internal_set_imu_delay_status(::control::localization::ImuMsgDelayStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::ImuMsgDelayStatus_IsValid(value));
  _impl_.imu_delay_status_ = value;
}

// optional .control.localization.ImuMsgMissingStatus imu_missing_status = 2;
inline bool MsfSensorMsgStatus::has_imu_missing_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MsfSensorMsgStatus::clear_imu_missing_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imu_missing_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::control::localization::ImuMsgMissingStatus MsfSensorMsgStatus::imu_missing_status() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfSensorMsgStatus.imu_missing_status)
  return _internal_imu_missing_status();
}
inline void MsfSensorMsgStatus::set_imu_missing_status(::control::localization::ImuMsgMissingStatus value) {
  _internal_set_imu_missing_status(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.localization.MsfSensorMsgStatus.imu_missing_status)
}
inline ::control::localization::ImuMsgMissingStatus MsfSensorMsgStatus::_internal_imu_missing_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::ImuMsgMissingStatus>(_impl_.imu_missing_status_);
}
inline void MsfSensorMsgStatus::_internal_set_imu_missing_status(::control::localization::ImuMsgMissingStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::ImuMsgMissingStatus_IsValid(value));
  _impl_.imu_missing_status_ = value;
}

// optional .control.localization.ImuMsgDataStatus imu_data_status = 3;
inline bool MsfSensorMsgStatus::has_imu_data_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MsfSensorMsgStatus::clear_imu_data_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imu_data_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::control::localization::ImuMsgDataStatus MsfSensorMsgStatus::imu_data_status() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfSensorMsgStatus.imu_data_status)
  return _internal_imu_data_status();
}
inline void MsfSensorMsgStatus::set_imu_data_status(::control::localization::ImuMsgDataStatus value) {
  _internal_set_imu_data_status(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.localization.MsfSensorMsgStatus.imu_data_status)
}
inline ::control::localization::ImuMsgDataStatus MsfSensorMsgStatus::_internal_imu_data_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::ImuMsgDataStatus>(_impl_.imu_data_status_);
}
inline void MsfSensorMsgStatus::_internal_set_imu_data_status(::control::localization::ImuMsgDataStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::ImuMsgDataStatus_IsValid(value));
  _impl_.imu_data_status_ = value;
}

// -------------------------------------------------------------------

// MsfStatus

// optional .control.localization.LocalLidarConsistency local_lidar_consistency = 1;
inline bool MsfStatus::has_local_lidar_consistency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MsfStatus::clear_local_lidar_consistency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_lidar_consistency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::control::localization::LocalLidarConsistency MsfStatus::local_lidar_consistency() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfStatus.local_lidar_consistency)
  return _internal_local_lidar_consistency();
}
inline void MsfStatus::set_local_lidar_consistency(::control::localization::LocalLidarConsistency value) {
  _internal_set_local_lidar_consistency(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.localization.MsfStatus.local_lidar_consistency)
}
inline ::control::localization::LocalLidarConsistency MsfStatus::_internal_local_lidar_consistency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::LocalLidarConsistency>(_impl_.local_lidar_consistency_);
}
inline void MsfStatus::_internal_set_local_lidar_consistency(::control::localization::LocalLidarConsistency value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::LocalLidarConsistency_IsValid(value));
  _impl_.local_lidar_consistency_ = value;
}

// optional .control.localization.GnssConsistency gnss_consistency = 2;
inline bool MsfStatus::has_gnss_consistency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MsfStatus::clear_gnss_consistency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gnss_consistency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::control::localization::GnssConsistency MsfStatus::gnss_consistency() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfStatus.gnss_consistency)
  return _internal_gnss_consistency();
}
inline void MsfStatus::set_gnss_consistency(::control::localization::GnssConsistency value) {
  _internal_set_gnss_consistency(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.localization.MsfStatus.gnss_consistency)
}
inline ::control::localization::GnssConsistency MsfStatus::_internal_gnss_consistency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::GnssConsistency>(_impl_.gnss_consistency_);
}
inline void MsfStatus::_internal_set_gnss_consistency(::control::localization::GnssConsistency value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::GnssConsistency_IsValid(value));
  _impl_.gnss_consistency_ = value;
}

// optional .control.localization.LocalLidarStatus local_lidar_status = 3;
inline bool MsfStatus::has_local_lidar_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MsfStatus::clear_local_lidar_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_lidar_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::control::localization::LocalLidarStatus MsfStatus::local_lidar_status() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfStatus.local_lidar_status)
  return _internal_local_lidar_status();
}
inline void MsfStatus::set_local_lidar_status(::control::localization::LocalLidarStatus value) {
  _internal_set_local_lidar_status(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.localization.MsfStatus.local_lidar_status)
}
inline ::control::localization::LocalLidarStatus MsfStatus::_internal_local_lidar_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::LocalLidarStatus>(_impl_.local_lidar_status_);
}
inline void MsfStatus::_internal_set_local_lidar_status(::control::localization::LocalLidarStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::LocalLidarStatus_IsValid(value));
  _impl_.local_lidar_status_ = value;
}

// optional .control.localization.LocalLidarQuality local_lidar_quality = 4;
inline bool MsfStatus::has_local_lidar_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MsfStatus::clear_local_lidar_quality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_lidar_quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::control::localization::LocalLidarQuality MsfStatus::local_lidar_quality() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfStatus.local_lidar_quality)
  return _internal_local_lidar_quality();
}
inline void MsfStatus::set_local_lidar_quality(::control::localization::LocalLidarQuality value) {
  _internal_set_local_lidar_quality(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.localization.MsfStatus.local_lidar_quality)
}
inline ::control::localization::LocalLidarQuality MsfStatus::_internal_local_lidar_quality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::LocalLidarQuality>(_impl_.local_lidar_quality_);
}
inline void MsfStatus::_internal_set_local_lidar_quality(::control::localization::LocalLidarQuality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::LocalLidarQuality_IsValid(value));
  _impl_.local_lidar_quality_ = value;
}

// optional .control.localization.GnssPositionType gnsspos_position_type = 5;
inline bool MsfStatus::has_gnsspos_position_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MsfStatus::clear_gnsspos_position_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gnsspos_position_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::control::localization::GnssPositionType MsfStatus::gnsspos_position_type() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfStatus.gnsspos_position_type)
  return _internal_gnsspos_position_type();
}
inline void MsfStatus::set_gnsspos_position_type(::control::localization::GnssPositionType value) {
  _internal_set_gnsspos_position_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.localization.MsfStatus.gnsspos_position_type)
}
inline ::control::localization::GnssPositionType MsfStatus::_internal_gnsspos_position_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::GnssPositionType>(_impl_.gnsspos_position_type_);
}
inline void MsfStatus::_internal_set_gnsspos_position_type(::control::localization::GnssPositionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::GnssPositionType_IsValid(value));
  _impl_.gnsspos_position_type_ = value;
}

// optional .control.localization.MsfRunningStatus msf_running_status = 6;
inline bool MsfStatus::has_msf_running_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MsfStatus::clear_msf_running_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msf_running_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::control::localization::MsfRunningStatus MsfStatus::msf_running_status() const {
  // @@protoc_insertion_point(field_get:control.localization.MsfStatus.msf_running_status)
  return _internal_msf_running_status();
}
inline void MsfStatus::set_msf_running_status(::control::localization::MsfRunningStatus value) {
  _internal_set_msf_running_status(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.localization.MsfStatus.msf_running_status)
}
inline ::control::localization::MsfRunningStatus MsfStatus::_internal_msf_running_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::localization::MsfRunningStatus>(_impl_.msf_running_status_);
}
inline void MsfStatus::_internal_set_msf_running_status(::control::localization::MsfRunningStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::localization::MsfRunningStatus_IsValid(value));
  _impl_.msf_running_status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::localization::LocalLidarStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::LocalLidarStatus>() {
  return ::control::localization::LocalLidarStatus_descriptor();
}
template <>
struct is_proto_enum<::control::localization::LocalLidarQuality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::LocalLidarQuality>() {
  return ::control::localization::LocalLidarQuality_descriptor();
}
template <>
struct is_proto_enum<::control::localization::LocalLidarConsistency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::LocalLidarConsistency>() {
  return ::control::localization::LocalLidarConsistency_descriptor();
}
template <>
struct is_proto_enum<::control::localization::GnssConsistency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::GnssConsistency>() {
  return ::control::localization::GnssConsistency_descriptor();
}
template <>
struct is_proto_enum<::control::localization::GnssPositionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::GnssPositionType>() {
  return ::control::localization::GnssPositionType_descriptor();
}
template <>
struct is_proto_enum<::control::localization::ImuMsgDelayStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::ImuMsgDelayStatus>() {
  return ::control::localization::ImuMsgDelayStatus_descriptor();
}
template <>
struct is_proto_enum<::control::localization::ImuMsgMissingStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::ImuMsgMissingStatus>() {
  return ::control::localization::ImuMsgMissingStatus_descriptor();
}
template <>
struct is_proto_enum<::control::localization::ImuMsgDataStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::ImuMsgDataStatus>() {
  return ::control::localization::ImuMsgDataStatus_descriptor();
}
template <>
struct is_proto_enum<::control::localization::MsfRunningStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::localization::MsfRunningStatus>() {
  return ::control::localization::MsfRunningStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_5fstatus_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/header.proto
// Protobuf C++ Version: 5.28.0-dev

#include "common_msgs/basic_msgs/header.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace common {

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        module_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{nullptr},
        timestamp_sec_{0},
        lidar_timestamp_{::uint64_t{0u}},
        camera_timestamp_{::uint64_t{0u}},
        radar_timestamp_{::uint64_t{0u}},
        sequence_num_{0u},
        version_{1u} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace common
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.timestamp_sec_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.module_name_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.sequence_num_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.lidar_timestamp_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.camera_timestamp_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.radar_timestamp_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::control::common::Header, _impl_.frame_id_),
        3,
        0,
        7,
        4,
        5,
        6,
        8,
        2,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 17, -1, sizeof(::control::common::Header)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::common::_Header_default_instance_._instance,
};
const char descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n#common_msgs/basic_msgs/header.proto\022\016c"
    "ontrol.common\032\'common_msgs/basic_msgs/er"
    "ror_code.proto\"\346\001\n\006Header\022\025\n\rtimestamp_s"
    "ec\030\001 \001(\001\022\023\n\013module_name\030\002 \001(\t\022\024\n\014sequenc"
    "e_num\030\003 \001(\r\022\027\n\017lidar_timestamp\030\004 \001(\004\022\030\n\020"
    "camera_timestamp\030\005 \001(\004\022\027\n\017radar_timestam"
    "p\030\006 \001(\004\022\022\n\007version\030\007 \001(\r:\0011\022(\n\006status\030\010 "
    "\001(\0132\030.control.common.StatusPb\022\020\n\010frame_i"
    "d\030\t \001(\t"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto_deps[1] =
    {
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2ferror_5fcode_2eproto,
};
static ::absl::once_flag descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto = {
    false,
    false,
    327,
    descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
    "common_msgs/basic_msgs/header.proto",
    &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto_once,
    descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto::offsets,
    file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
};
namespace control {
namespace common {
// ===================================================================

class Header::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
};

void Header::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Header::Header(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::common::Header& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        module_name_(arena, from.module_name_),
        frame_id_(arena, from.frame_id_) {}

Header::Header(
    ::google::protobuf::Arena* arena,
    const Header& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::StatusPb>(
                              arena, *from._impl_.status_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_sec_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_sec_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, timestamp_sec_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:control.common.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        module_name_(arena),
        frame_id_(arena),
        version_{1u} {}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, sequence_num_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::sequence_num_));
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:control.common.Header)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.module_name_.Destroy();
  _impl_.frame_id_.Destroy();
  delete _impl_.status_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Header::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Header::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Header>(),
            ::google::protobuf::Message::GetNewImpl<Header>(),
            ::google::protobuf::Message::GetClearImpl<Header>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<Header>(),
                ::google::protobuf::Message::GetSerializeImpl<Header>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Header, _impl_._cached_size_),
            false,
        },
        &Header::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Header::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 57, 2> Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Header_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::Header>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double timestamp_sec = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 3, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_sec_)}},
    // optional string module_name = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.module_name_)}},
    // optional uint32 sequence_num = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Header, _impl_.sequence_num_), 7>(),
     {24, 7, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.sequence_num_)}},
    // optional uint64 lidar_timestamp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Header, _impl_.lidar_timestamp_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.lidar_timestamp_)}},
    // optional uint64 camera_timestamp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Header, _impl_.camera_timestamp_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.camera_timestamp_)}},
    // optional uint64 radar_timestamp = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Header, _impl_.radar_timestamp_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.radar_timestamp_)}},
    // optional uint32 version = 7 [default = 1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Header, _impl_.version_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)}},
    // optional .control.common.StatusPb status = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.status_)}},
    // optional string frame_id = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.frame_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double timestamp_sec = 1;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_sec_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string module_name = 2;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.module_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 sequence_num = 3;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.sequence_num_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 lidar_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.lidar_timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 camera_timestamp = 5;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.camera_timestamp_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 radar_timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.radar_timestamp_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint32 version = 7 [default = 1];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.version_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .control.common.StatusPb status = 8;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.status_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string frame_id = 9;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.frame_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::StatusPb>()},
  }}, {{
    "\25\0\13\0\0\0\0\0\0\10\0\0\0\0\0\0"
    "control.common.Header"
    "module_name"
    "frame_id"
  }},
};

PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.Header)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.module_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.timestamp_sec_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sequence_num_) -
        reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.sequence_num_));
  }
  _impl_.version_ = 1u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_timestamp_sec(), target);
  }

  // optional string module_name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_module_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.common.Header.module_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 sequence_num = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_sequence_num(), target);
  }

  // optional uint64 lidar_timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_lidar_timestamp(), target);
  }

  // optional uint64 camera_timestamp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_camera_timestamp(), target);
  }

  // optional uint64 radar_timestamp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_radar_timestamp(), target);
  }

  // optional uint32 version = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_version(), target);
  }

  // optional .control.common.StatusPb status = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *_impl_.status_, _impl_.status_->GetCachedSize(), target, stream);
  }

  // optional string frame_id = 9;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_frame_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.common.Header.frame_id");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string module_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_module_name());
    }
    // optional string frame_id = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_frame_id());
    }
    // optional .control.common.StatusPb status = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.status_);
    }
    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }
    // optional uint64 lidar_timestamp = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_lidar_timestamp());
    }
    // optional uint64 camera_timestamp = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_camera_timestamp());
    }
    // optional uint64 radar_timestamp = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_radar_timestamp());
    }
    // optional uint32 sequence_num = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence_num());
    }
  }
   {
    // optional uint32 version = 7 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_version());
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void Header::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_module_name(from._internal_module_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::StatusPb>(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lidar_timestamp_ = from._impl_.lidar_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.camera_timestamp_ = from._impl_.camera_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.radar_timestamp_ = from._impl_.radar_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sequence_num_ = from._impl_.sequence_num_;
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Header::InternalSwap(Header* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_name_, &other->_impl_.module_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)
      + sizeof(Header::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

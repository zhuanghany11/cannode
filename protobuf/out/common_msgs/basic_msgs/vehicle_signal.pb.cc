// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/vehicle_signal.proto
// Protobuf C++ Version: 5.28.0-dev

#include "common_msgs/basic_msgs/vehicle_signal.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace common {

inline constexpr VehicleSignal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        turn_signal_{static_cast< ::control::common::VehicleSignal_TurnSignal >(0)},
        high_beam_{false},
        low_beam_{false},
        horn_{false},
        emergency_light_{false} {}

template <typename>
PROTOBUF_CONSTEXPR VehicleSignal::VehicleSignal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VehicleSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleSignalDefaultTypeInternal() {}
  union {
    VehicleSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleSignalDefaultTypeInternal _VehicleSignal_default_instance_;
}  // namespace common
}  // namespace control
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleSignal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleSignal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleSignal, _impl_.turn_signal_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleSignal, _impl_.high_beam_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleSignal, _impl_.low_beam_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleSignal, _impl_.horn_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleSignal, _impl_.emergency_light_),
        0,
        1,
        2,
        3,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::control::common::VehicleSignal)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::common::_VehicleSignal_default_instance_._instance,
};
const char descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n+common_msgs/basic_msgs/vehicle_signal."
    "proto\022\016control.common\"\326\001\n\rVehicleSignal\022"
    "=\n\013turn_signal\030\001 \001(\0162(.control.common.Ve"
    "hicleSignal.TurnSignal\022\021\n\thigh_beam\030\002 \001("
    "\010\022\020\n\010low_beam\030\003 \001(\010\022\014\n\004horn\030\004 \001(\010\022\027\n\017eme"
    "rgency_light\030\005 \001(\010\":\n\nTurnSignal\022\r\n\tTURN"
    "_NONE\020\000\022\r\n\tTURN_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002"
};
static ::absl::once_flag descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto = {
    false,
    false,
    278,
    descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
    "common_msgs/basic_msgs/vehicle_signal.proto",
    &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto::offsets,
    file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
};
namespace control {
namespace common {
const ::google::protobuf::EnumDescriptor* VehicleSignal_TurnSignal_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t VehicleSignal_TurnSignal_internal_data_[] = {
    196608u, 0u, };
bool VehicleSignal_TurnSignal_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VehicleSignal_TurnSignal VehicleSignal::TURN_NONE;
constexpr VehicleSignal_TurnSignal VehicleSignal::TURN_LEFT;
constexpr VehicleSignal_TurnSignal VehicleSignal::TURN_RIGHT;
constexpr VehicleSignal_TurnSignal VehicleSignal::TurnSignal_MIN;
constexpr VehicleSignal_TurnSignal VehicleSignal::TurnSignal_MAX;
constexpr int VehicleSignal::TurnSignal_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class VehicleSignal::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VehicleSignal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_._has_bits_);
};

VehicleSignal::VehicleSignal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.VehicleSignal)
}
VehicleSignal::VehicleSignal(
    ::google::protobuf::Arena* arena, const VehicleSignal& from)
    : VehicleSignal(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VehicleSignal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VehicleSignal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, turn_signal_),
           0,
           offsetof(Impl_, emergency_light_) -
               offsetof(Impl_, turn_signal_) +
               sizeof(Impl_::emergency_light_));
}
VehicleSignal::~VehicleSignal() {
  // @@protoc_insertion_point(destructor:control.common.VehicleSignal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VehicleSignal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    VehicleSignal::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &VehicleSignal::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<VehicleSignal>(),
            ::google::protobuf::Message::GetNewImpl<VehicleSignal>(),
            ::google::protobuf::Message::GetClearImpl<VehicleSignal>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<VehicleSignal>(),
                ::google::protobuf::Message::GetSerializeImpl<VehicleSignal>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_._cached_size_),
            false,
        },
        &VehicleSignal::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* VehicleSignal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> VehicleSignal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VehicleSignal_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::VehicleSignal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.VehicleSignal.TurnSignal turn_signal = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.turn_signal_)}},
    // optional bool high_beam = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VehicleSignal, _impl_.high_beam_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.high_beam_)}},
    // optional bool low_beam = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VehicleSignal, _impl_.low_beam_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.low_beam_)}},
    // optional bool horn = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VehicleSignal, _impl_.horn_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.horn_)}},
    // optional bool emergency_light = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VehicleSignal, _impl_.emergency_light_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.emergency_light_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .control.common.VehicleSignal.TurnSignal turn_signal = 1;
    {PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.turn_signal_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bool high_beam = 2;
    {PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.high_beam_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool low_beam = 3;
    {PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.low_beam_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool horn = 4;
    {PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.horn_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool emergency_light = 5;
    {PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.emergency_light_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VehicleSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.VehicleSignal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.turn_signal_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.emergency_light_) -
        reinterpret_cast<char*>(&_impl_.turn_signal_)) + sizeof(_impl_.emergency_light_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VehicleSignal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.VehicleSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.VehicleSignal.TurnSignal turn_signal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_turn_signal(), target);
  }

  // optional bool high_beam = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_high_beam(), target);
  }

  // optional bool low_beam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_low_beam(), target);
  }

  // optional bool horn = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_horn(), target);
  }

  // optional bool emergency_light = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_emergency_light(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.VehicleSignal)
  return target;
}

::size_t VehicleSignal::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.VehicleSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .control.common.VehicleSignal.TurnSignal turn_signal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_turn_signal());
    }
    // optional bool high_beam = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }
    // optional bool low_beam = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }
    // optional bool horn = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }
    // optional bool emergency_light = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void VehicleSignal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VehicleSignal*>(&to_msg);
  auto& from = static_cast<const VehicleSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.VehicleSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.turn_signal_ = from._impl_.turn_signal_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.high_beam_ = from._impl_.high_beam_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.low_beam_ = from._impl_.low_beam_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.horn_ = from._impl_.horn_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.emergency_light_ = from._impl_.emergency_light_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleSignal::CopyFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VehicleSignal::InternalSwap(VehicleSignal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.emergency_light_)
      + sizeof(VehicleSignal::_impl_.emergency_light_)
      - PROTOBUF_FIELD_OFFSET(VehicleSignal, _impl_.turn_signal_)>(
          reinterpret_cast<char*>(&_impl_.turn_signal_),
          reinterpret_cast<char*>(&other->_impl_.turn_signal_));
}

::google::protobuf::Metadata VehicleSignal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/vehicle_id.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
namespace control {
namespace common {
class VehicleID;
struct VehicleIDDefaultTypeInternal;
extern VehicleIDDefaultTypeInternal _VehicleID_default_instance_;
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class VehicleID final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.VehicleID) */ {
 public:
  inline VehicleID() : VehicleID(nullptr) {}
  ~VehicleID() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleID(
      ::google::protobuf::internal::ConstantInitialized);

  inline VehicleID(const VehicleID& from) : VehicleID(nullptr, from) {}
  inline VehicleID(VehicleID&& from) noexcept
      : VehicleID(nullptr, std::move(from)) {}
  inline VehicleID& operator=(const VehicleID& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleID& operator=(VehicleID&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleID& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleID* internal_default_instance() {
    return reinterpret_cast<const VehicleID*>(
        &_VehicleID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VehicleID& a, VehicleID& b) { a.Swap(&b); }
  inline void Swap(VehicleID* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleID* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<VehicleID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VehicleID& from) { VehicleID::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleID* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.VehicleID"; }

 protected:
  explicit VehicleID(::google::protobuf::Arena* arena);
  VehicleID(::google::protobuf::Arena* arena, const VehicleID& from);
  VehicleID(::google::protobuf::Arena* arena, VehicleID&& from) noexcept
      : VehicleID(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVinFieldNumber = 1,
    kPlateFieldNumber = 2,
    kOtherUniqueIdFieldNumber = 3,
  };
  // optional string vin = 1;
  bool has_vin() const;
  void clear_vin() ;
  const std::string& vin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vin(Arg_&& arg, Args_... args);
  std::string* mutable_vin();
  PROTOBUF_NODISCARD std::string* release_vin();
  void set_allocated_vin(std::string* value);

  private:
  const std::string& _internal_vin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vin(
      const std::string& value);
  std::string* _internal_mutable_vin();

  public:
  // optional string plate = 2;
  bool has_plate() const;
  void clear_plate() ;
  const std::string& plate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_plate(Arg_&& arg, Args_... args);
  std::string* mutable_plate();
  PROTOBUF_NODISCARD std::string* release_plate();
  void set_allocated_plate(std::string* value);

  private:
  const std::string& _internal_plate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plate(
      const std::string& value);
  std::string* _internal_mutable_plate();

  public:
  // optional string other_unique_id = 3;
  bool has_other_unique_id() const;
  void clear_other_unique_id() ;
  const std::string& other_unique_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_other_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_other_unique_id();
  PROTOBUF_NODISCARD std::string* release_other_unique_id();
  void set_allocated_other_unique_id(std::string* value);

  private:
  const std::string& _internal_other_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_unique_id(
      const std::string& value);
  std::string* _internal_mutable_other_unique_id();

  public:
  // @@protoc_insertion_point(class_scope:control.common.VehicleID)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VehicleID_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VehicleID& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr vin_;
    ::google::protobuf::internal::ArenaStringPtr plate_;
    ::google::protobuf::internal::ArenaStringPtr other_unique_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VehicleID

// optional string vin = 1;
inline bool VehicleID::has_vin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VehicleID::clear_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleID::vin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleID.vin)
  return _internal_vin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleID::set_vin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.VehicleID.vin)
}
inline std::string* VehicleID::mutable_vin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vin();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleID.vin)
  return _s;
}
inline const std::string& VehicleID::_internal_vin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vin_.Get();
}
inline void VehicleID::_internal_set_vin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vin_.Set(value, GetArena());
}
inline std::string* VehicleID::_internal_mutable_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.vin_.Mutable( GetArena());
}
inline std::string* VehicleID::release_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleID.vin)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.vin_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vin_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VehicleID::set_allocated_vin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vin_.IsDefault()) {
          _impl_.vin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleID.vin)
}

// optional string plate = 2;
inline bool VehicleID::has_plate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VehicleID::clear_plate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plate_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VehicleID::plate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleID.plate)
  return _internal_plate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleID::set_plate(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.VehicleID.plate)
}
inline std::string* VehicleID::mutable_plate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_plate();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleID.plate)
  return _s;
}
inline const std::string& VehicleID::_internal_plate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.plate_.Get();
}
inline void VehicleID::_internal_set_plate(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plate_.Set(value, GetArena());
}
inline std::string* VehicleID::_internal_mutable_plate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.plate_.Mutable( GetArena());
}
inline std::string* VehicleID::release_plate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleID.plate)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.plate_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.plate_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VehicleID::set_allocated_plate(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.plate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.plate_.IsDefault()) {
          _impl_.plate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleID.plate)
}

// optional string other_unique_id = 3;
inline bool VehicleID::has_other_unique_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VehicleID::clear_other_unique_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_unique_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VehicleID::other_unique_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleID.other_unique_id)
  return _internal_other_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleID::set_other_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.other_unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.VehicleID.other_unique_id)
}
inline std::string* VehicleID::mutable_other_unique_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_other_unique_id();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleID.other_unique_id)
  return _s;
}
inline const std::string& VehicleID::_internal_other_unique_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.other_unique_id_.Get();
}
inline void VehicleID::_internal_set_other_unique_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.other_unique_id_.Set(value, GetArena());
}
inline std::string* VehicleID::_internal_mutable_other_unique_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.other_unique_id_.Mutable( GetArena());
}
inline std::string* VehicleID::release_other_unique_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleID.other_unique_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.other_unique_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.other_unique_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VehicleID::set_allocated_other_unique_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.other_unique_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.other_unique_id_.IsDefault()) {
          _impl_.other_unique_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleID.other_unique_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto_2epb_2eh

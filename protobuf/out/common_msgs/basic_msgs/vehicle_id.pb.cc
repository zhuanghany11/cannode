// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/vehicle_id.proto
// Protobuf C++ Version: 5.28.0-dev

#include "common_msgs/basic_msgs/vehicle_id.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace common {

inline constexpr VehicleID::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        plate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        other_unique_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR VehicleID::VehicleID(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VehicleIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleIDDefaultTypeInternal() {}
  union {
    VehicleID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleIDDefaultTypeInternal _VehicleID_default_instance_;
}  // namespace common
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleID, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleID, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleID, _impl_.vin_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleID, _impl_.plate_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleID, _impl_.other_unique_id_),
        0,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::control::common::VehicleID)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::common::_VehicleID_default_instance_._instance,
};
const char descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\'common_msgs/basic_msgs/vehicle_id.prot"
    "o\022\016control.common\"@\n\tVehicleID\022\013\n\003vin\030\001 "
    "\001(\t\022\r\n\005plate\030\002 \001(\t\022\027\n\017other_unique_id\030\003 "
    "\001(\t"
};
static ::absl::once_flag descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto = {
    false,
    false,
    123,
    descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
    "common_msgs/basic_msgs/vehicle_id.proto",
    &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto::offsets,
    file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
};
namespace control {
namespace common {
// ===================================================================

class VehicleID::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VehicleID>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VehicleID, _impl_._has_bits_);
};

VehicleID::VehicleID(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.VehicleID)
}
inline PROTOBUF_NDEBUG_INLINE VehicleID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::common::VehicleID& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vin_(arena, from.vin_),
        plate_(arena, from.plate_),
        other_unique_id_(arena, from.other_unique_id_) {}

VehicleID::VehicleID(
    ::google::protobuf::Arena* arena,
    const VehicleID& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VehicleID* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:control.common.VehicleID)
}
inline PROTOBUF_NDEBUG_INLINE VehicleID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        vin_(arena),
        plate_(arena),
        other_unique_id_(arena) {}

inline void VehicleID::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VehicleID::~VehicleID() {
  // @@protoc_insertion_point(destructor:control.common.VehicleID)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VehicleID::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.vin_.Destroy();
  _impl_.plate_.Destroy();
  _impl_.other_unique_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    VehicleID::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &VehicleID::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<VehicleID>(),
            ::google::protobuf::Message::GetNewImpl<VehicleID>(),
            ::google::protobuf::Message::GetClearImpl<VehicleID>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<VehicleID>(),
                ::google::protobuf::Message::GetSerializeImpl<VehicleID>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(VehicleID, _impl_._cached_size_),
            false,
        },
        &VehicleID::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* VehicleID::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 56, 2> VehicleID::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VehicleID, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VehicleID_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::VehicleID>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string vin = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VehicleID, _impl_.vin_)}},
    // optional string plate = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(VehicleID, _impl_.plate_)}},
    // optional string other_unique_id = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(VehicleID, _impl_.other_unique_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string vin = 1;
    {PROTOBUF_FIELD_OFFSET(VehicleID, _impl_.vin_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string plate = 2;
    {PROTOBUF_FIELD_OFFSET(VehicleID, _impl_.plate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string other_unique_id = 3;
    {PROTOBUF_FIELD_OFFSET(VehicleID, _impl_.other_unique_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\3\5\17\0\0\0\0"
    "control.common.VehicleID"
    "vin"
    "plate"
    "other_unique_id"
  }},
};

PROTOBUF_NOINLINE void VehicleID::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.VehicleID)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.plate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.other_unique_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VehicleID::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.VehicleID)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string vin = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_vin();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.common.VehicleID.vin");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string plate = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_plate();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.common.VehicleID.plate");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string other_unique_id = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_other_unique_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.common.VehicleID.other_unique_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.VehicleID)
  return target;
}

::size_t VehicleID::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.VehicleID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string vin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_vin());
    }
    // optional string plate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_plate());
    }
    // optional string other_unique_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_other_unique_id());
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void VehicleID::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VehicleID*>(&to_msg);
  auto& from = static_cast<const VehicleID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.VehicleID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_vin(from._internal_vin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_plate(from._internal_plate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_other_unique_id(from._internal_other_unique_id());
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleID::CopyFrom(const VehicleID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.VehicleID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VehicleID::InternalSwap(VehicleID* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vin_, &other->_impl_.vin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.plate_, &other->_impl_.plate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.other_unique_id_, &other->_impl_.other_unique_id_, arena);
}

::google::protobuf::Metadata VehicleID::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

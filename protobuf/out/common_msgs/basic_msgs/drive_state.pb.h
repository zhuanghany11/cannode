// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/drive_state.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
namespace control {
namespace common {
class EngageAdvice;
struct EngageAdviceDefaultTypeInternal;
extern EngageAdviceDefaultTypeInternal _EngageAdvice_default_instance_;
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace common {
enum EngageAdvice_Advice : int {
  EngageAdvice_Advice_UNKNOWN = 0,
  EngageAdvice_Advice_DISALLOW_ENGAGE = 1,
  EngageAdvice_Advice_READY_TO_ENGAGE = 2,
  EngageAdvice_Advice_KEEP_ENGAGED = 3,
  EngageAdvice_Advice_PREPARE_DISENGAGE = 4,
};

bool EngageAdvice_Advice_IsValid(int value);
extern const uint32_t EngageAdvice_Advice_internal_data_[];
constexpr EngageAdvice_Advice EngageAdvice_Advice_Advice_MIN = static_cast<EngageAdvice_Advice>(0);
constexpr EngageAdvice_Advice EngageAdvice_Advice_Advice_MAX = static_cast<EngageAdvice_Advice>(4);
constexpr int EngageAdvice_Advice_Advice_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
EngageAdvice_Advice_descriptor();
template <typename T>
const std::string& EngageAdvice_Advice_Name(T value) {
  static_assert(std::is_same<T, EngageAdvice_Advice>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Advice_Name().");
  return EngageAdvice_Advice_Name(static_cast<EngageAdvice_Advice>(value));
}
template <>
inline const std::string& EngageAdvice_Advice_Name(EngageAdvice_Advice value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EngageAdvice_Advice_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool EngageAdvice_Advice_Parse(absl::string_view name, EngageAdvice_Advice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EngageAdvice_Advice>(
      EngageAdvice_Advice_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class EngageAdvice final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.EngageAdvice) */ {
 public:
  inline EngageAdvice() : EngageAdvice(nullptr) {}
  ~EngageAdvice() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EngageAdvice(
      ::google::protobuf::internal::ConstantInitialized);

  inline EngageAdvice(const EngageAdvice& from) : EngageAdvice(nullptr, from) {}
  inline EngageAdvice(EngageAdvice&& from) noexcept
      : EngageAdvice(nullptr, std::move(from)) {}
  inline EngageAdvice& operator=(const EngageAdvice& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngageAdvice& operator=(EngageAdvice&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngageAdvice& default_instance() {
    return *internal_default_instance();
  }
  static inline const EngageAdvice* internal_default_instance() {
    return reinterpret_cast<const EngageAdvice*>(
        &_EngageAdvice_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EngageAdvice& a, EngageAdvice& b) { a.Swap(&b); }
  inline void Swap(EngageAdvice* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngageAdvice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EngageAdvice* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<EngageAdvice>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EngageAdvice& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EngageAdvice& from) { EngageAdvice::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EngageAdvice* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.EngageAdvice"; }

 protected:
  explicit EngageAdvice(::google::protobuf::Arena* arena);
  EngageAdvice(::google::protobuf::Arena* arena, const EngageAdvice& from);
  EngageAdvice(::google::protobuf::Arena* arena, EngageAdvice&& from) noexcept
      : EngageAdvice(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Advice = EngageAdvice_Advice;
  static constexpr Advice UNKNOWN = EngageAdvice_Advice_UNKNOWN;
  static constexpr Advice DISALLOW_ENGAGE = EngageAdvice_Advice_DISALLOW_ENGAGE;
  static constexpr Advice READY_TO_ENGAGE = EngageAdvice_Advice_READY_TO_ENGAGE;
  static constexpr Advice KEEP_ENGAGED = EngageAdvice_Advice_KEEP_ENGAGED;
  static constexpr Advice PREPARE_DISENGAGE = EngageAdvice_Advice_PREPARE_DISENGAGE;
  static inline bool Advice_IsValid(int value) {
    return EngageAdvice_Advice_IsValid(value);
  }
  static constexpr Advice Advice_MIN = EngageAdvice_Advice_Advice_MIN;
  static constexpr Advice Advice_MAX = EngageAdvice_Advice_Advice_MAX;
  static constexpr int Advice_ARRAYSIZE = EngageAdvice_Advice_Advice_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Advice_descriptor() {
    return EngageAdvice_Advice_descriptor();
  }
  template <typename T>
  static inline const std::string& Advice_Name(T value) {
    return EngageAdvice_Advice_Name(value);
  }
  static inline bool Advice_Parse(absl::string_view name, Advice* value) {
    return EngageAdvice_Advice_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kAdviceFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // optional .control.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
  bool has_advice() const;
  void clear_advice() ;
  ::control::common::EngageAdvice_Advice advice() const;
  void set_advice(::control::common::EngageAdvice_Advice value);

  private:
  ::control::common::EngageAdvice_Advice _internal_advice() const;
  void _internal_set_advice(::control::common::EngageAdvice_Advice value);

  public:
  // @@protoc_insertion_point(class_scope:control.common.EngageAdvice)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EngageAdvice_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EngageAdvice& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    int advice_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EngageAdvice

// optional .control.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
inline bool EngageAdvice::has_advice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EngageAdvice::clear_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.advice_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::control::common::EngageAdvice_Advice EngageAdvice::advice() const {
  // @@protoc_insertion_point(field_get:control.common.EngageAdvice.advice)
  return _internal_advice();
}
inline void EngageAdvice::set_advice(::control::common::EngageAdvice_Advice value) {
  _internal_set_advice(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.common.EngageAdvice.advice)
}
inline ::control::common::EngageAdvice_Advice EngageAdvice::_internal_advice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::common::EngageAdvice_Advice>(_impl_.advice_);
}
inline void EngageAdvice::_internal_set_advice(::control::common::EngageAdvice_Advice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::common::EngageAdvice_Advice_IsValid(value));
  _impl_.advice_ = value;
}

// optional string reason = 2;
inline bool EngageAdvice::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EngageAdvice::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EngageAdvice::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.EngageAdvice.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EngageAdvice::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.EngageAdvice.reason)
}
inline std::string* EngageAdvice::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:control.common.EngageAdvice.reason)
  return _s;
}
inline const std::string& EngageAdvice::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void EngageAdvice::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* EngageAdvice::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* EngageAdvice::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.EngageAdvice.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EngageAdvice::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.EngageAdvice.reason)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::common::EngageAdvice_Advice> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::common::EngageAdvice_Advice>() {
  return ::control::common::EngageAdvice_Advice_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto_2epb_2eh

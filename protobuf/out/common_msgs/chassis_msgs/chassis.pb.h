// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/chassis_msgs/chassis.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "common_msgs/basic_msgs/drive_state.pb.h"
#include "common_msgs/basic_msgs/geometry.pb.h"
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/vehicle_id.pb.h"
#include "common_msgs/basic_msgs/vehicle_signal.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
namespace control {
namespace canbus {
class Chassis;
struct ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
struct ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
class CheckResponse;
struct CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class License;
struct LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class Sonar;
struct SonarDefaultTypeInternal;
extern SonarDefaultTypeInternal _Sonar_default_instance_;
class Surround;
struct SurroundDefaultTypeInternal;
extern SurroundDefaultTypeInternal _Surround_default_instance_;
class WheelSpeed;
struct WheelSpeedDefaultTypeInternal;
extern WheelSpeedDefaultTypeInternal _WheelSpeed_default_instance_;
}  // namespace canbus
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace canbus {
enum Chassis_DrivingMode : int {
  Chassis_DrivingMode_COMPLETE_MANUAL = 0,
  Chassis_DrivingMode_COMPLETE_AUTO_DRIVE = 1,
  Chassis_DrivingMode_AUTO_STEER_ONLY = 2,
  Chassis_DrivingMode_AUTO_SPEED_ONLY = 3,
  Chassis_DrivingMode_EMERGENCY_MODE = 4,
};

bool Chassis_DrivingMode_IsValid(int value);
extern const uint32_t Chassis_DrivingMode_internal_data_[];
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = static_cast<Chassis_DrivingMode>(0);
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = static_cast<Chassis_DrivingMode>(4);
constexpr int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
Chassis_DrivingMode_descriptor();
template <typename T>
const std::string& Chassis_DrivingMode_Name(T value) {
  static_assert(std::is_same<T, Chassis_DrivingMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DrivingMode_Name().");
  return Chassis_DrivingMode_Name(static_cast<Chassis_DrivingMode>(value));
}
template <>
inline const std::string& Chassis_DrivingMode_Name(Chassis_DrivingMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Chassis_DrivingMode_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Chassis_DrivingMode_Parse(absl::string_view name, Chassis_DrivingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_DrivingMode>(
      Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_ErrorCode : int {
  Chassis_ErrorCode_NO_ERROR = 0,
  Chassis_ErrorCode_CMD_NOT_IN_PERIOD = 1,
  Chassis_ErrorCode_CHASSIS_ERROR = 2,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER = 6,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE = 7,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE = 8,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR = 9,
  Chassis_ErrorCode_MANUAL_INTERVENTION = 3,
  Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD = 4,
  Chassis_ErrorCode_UNKNOWN_ERROR = 5,
};

bool Chassis_ErrorCode_IsValid(int value);
extern const uint32_t Chassis_ErrorCode_internal_data_[];
constexpr Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MIN = static_cast<Chassis_ErrorCode>(0);
constexpr Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MAX = static_cast<Chassis_ErrorCode>(9);
constexpr int Chassis_ErrorCode_ErrorCode_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
Chassis_ErrorCode_descriptor();
template <typename T>
const std::string& Chassis_ErrorCode_Name(T value) {
  static_assert(std::is_same<T, Chassis_ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return Chassis_ErrorCode_Name(static_cast<Chassis_ErrorCode>(value));
}
template <>
inline const std::string& Chassis_ErrorCode_Name(Chassis_ErrorCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Chassis_ErrorCode_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool Chassis_ErrorCode_Parse(absl::string_view name, Chassis_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_ErrorCode>(
      Chassis_ErrorCode_descriptor(), name, value);
}
enum Chassis_GearPosition : int {
  Chassis_GearPosition_GEAR_INVALID = 0,
  Chassis_GearPosition_GEAR_DRIVE = 1,
  Chassis_GearPosition_GEAR_NEUTRAL = 2,
  Chassis_GearPosition_GEAR_REVERSE = 3,
  Chassis_GearPosition_GEAR_PARKING = 4,
  Chassis_GearPosition_GEAR_LOW = 5,
  Chassis_GearPosition_GEAR_NONE = 6,
};

bool Chassis_GearPosition_IsValid(int value);
extern const uint32_t Chassis_GearPosition_internal_data_[];
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = static_cast<Chassis_GearPosition>(0);
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = static_cast<Chassis_GearPosition>(6);
constexpr int Chassis_GearPosition_GearPosition_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Chassis_GearPosition_descriptor();
template <typename T>
const std::string& Chassis_GearPosition_Name(T value) {
  static_assert(std::is_same<T, Chassis_GearPosition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GearPosition_Name().");
  return Chassis_GearPosition_Name(static_cast<Chassis_GearPosition>(value));
}
template <>
inline const std::string& Chassis_GearPosition_Name(Chassis_GearPosition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Chassis_GearPosition_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Chassis_GearPosition_Parse(absl::string_view name, Chassis_GearPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_GearPosition>(
      Chassis_GearPosition_descriptor(), name, value);
}
enum Chassis_BumperEvent : int {
  Chassis_BumperEvent_BUMPER_INVALID = 0,
  Chassis_BumperEvent_BUMPER_NORMAL = 1,
  Chassis_BumperEvent_BUMPER_PRESSED = 2,
};

bool Chassis_BumperEvent_IsValid(int value);
extern const uint32_t Chassis_BumperEvent_internal_data_[];
constexpr Chassis_BumperEvent Chassis_BumperEvent_BumperEvent_MIN = static_cast<Chassis_BumperEvent>(0);
constexpr Chassis_BumperEvent Chassis_BumperEvent_BumperEvent_MAX = static_cast<Chassis_BumperEvent>(2);
constexpr int Chassis_BumperEvent_BumperEvent_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Chassis_BumperEvent_descriptor();
template <typename T>
const std::string& Chassis_BumperEvent_Name(T value) {
  static_assert(std::is_same<T, Chassis_BumperEvent>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BumperEvent_Name().");
  return Chassis_BumperEvent_Name(static_cast<Chassis_BumperEvent>(value));
}
template <>
inline const std::string& Chassis_BumperEvent_Name(Chassis_BumperEvent value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Chassis_BumperEvent_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Chassis_BumperEvent_Parse(absl::string_view name, Chassis_BumperEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_BumperEvent>(
      Chassis_BumperEvent_descriptor(), name, value);
}
enum Chassis_SteerMode : int {
  Chassis_SteerMode_STRAIGHT = 0,
  Chassis_SteerMode_FULLWHEEL = 1,
  Chassis_SteerMode_DIAGONAL = 2,
  Chassis_SteerMode_FORWARDWHEEL = 3,
};

bool Chassis_SteerMode_IsValid(int value);
extern const uint32_t Chassis_SteerMode_internal_data_[];
constexpr Chassis_SteerMode Chassis_SteerMode_SteerMode_MIN = static_cast<Chassis_SteerMode>(0);
constexpr Chassis_SteerMode Chassis_SteerMode_SteerMode_MAX = static_cast<Chassis_SteerMode>(3);
constexpr int Chassis_SteerMode_SteerMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Chassis_SteerMode_descriptor();
template <typename T>
const std::string& Chassis_SteerMode_Name(T value) {
  static_assert(std::is_same<T, Chassis_SteerMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SteerMode_Name().");
  return Chassis_SteerMode_Name(static_cast<Chassis_SteerMode>(value));
}
template <>
inline const std::string& Chassis_SteerMode_Name(Chassis_SteerMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Chassis_SteerMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Chassis_SteerMode_Parse(absl::string_view name, Chassis_SteerMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_SteerMode>(
      Chassis_SteerMode_descriptor(), name, value);
}
enum WheelSpeed_WheelSpeedType : int {
  WheelSpeed_WheelSpeedType_FORWARD = 0,
  WheelSpeed_WheelSpeedType_BACKWARD = 1,
  WheelSpeed_WheelSpeedType_STANDSTILL = 2,
  WheelSpeed_WheelSpeedType_INVALID = 3,
};

bool WheelSpeed_WheelSpeedType_IsValid(int value);
extern const uint32_t WheelSpeed_WheelSpeedType_internal_data_[];
constexpr WheelSpeed_WheelSpeedType WheelSpeed_WheelSpeedType_WheelSpeedType_MIN = static_cast<WheelSpeed_WheelSpeedType>(0);
constexpr WheelSpeed_WheelSpeedType WheelSpeed_WheelSpeedType_WheelSpeedType_MAX = static_cast<WheelSpeed_WheelSpeedType>(3);
constexpr int WheelSpeed_WheelSpeedType_WheelSpeedType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
WheelSpeed_WheelSpeedType_descriptor();
template <typename T>
const std::string& WheelSpeed_WheelSpeedType_Name(T value) {
  static_assert(std::is_same<T, WheelSpeed_WheelSpeedType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WheelSpeedType_Name().");
  return WheelSpeed_WheelSpeedType_Name(static_cast<WheelSpeed_WheelSpeedType>(value));
}
template <>
inline const std::string& WheelSpeed_WheelSpeedType_Name(WheelSpeed_WheelSpeedType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WheelSpeed_WheelSpeedType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool WheelSpeed_WheelSpeedType_Parse(absl::string_view name, WheelSpeed_WheelSpeedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WheelSpeed_WheelSpeedType>(
      WheelSpeed_WheelSpeedType_descriptor(), name, value);
}
enum GpsQuality : int {
  FIX_NO = 0,
  FIX_2D = 1,
  FIX_3D = 2,
  FIX_INVALID = 3,
};

bool GpsQuality_IsValid(int value);
extern const uint32_t GpsQuality_internal_data_[];
constexpr GpsQuality GpsQuality_MIN = static_cast<GpsQuality>(0);
constexpr GpsQuality GpsQuality_MAX = static_cast<GpsQuality>(3);
constexpr int GpsQuality_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GpsQuality_descriptor();
template <typename T>
const std::string& GpsQuality_Name(T value) {
  static_assert(std::is_same<T, GpsQuality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GpsQuality_Name().");
  return GpsQuality_Name(static_cast<GpsQuality>(value));
}
template <>
inline const std::string& GpsQuality_Name(GpsQuality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GpsQuality_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GpsQuality_Parse(absl::string_view name, GpsQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GpsQuality>(
      GpsQuality_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WheelSpeed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.canbus.WheelSpeed) */ {
 public:
  inline WheelSpeed() : WheelSpeed(nullptr) {}
  ~WheelSpeed() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WheelSpeed(
      ::google::protobuf::internal::ConstantInitialized);

  inline WheelSpeed(const WheelSpeed& from) : WheelSpeed(nullptr, from) {}
  inline WheelSpeed(WheelSpeed&& from) noexcept
      : WheelSpeed(nullptr, std::move(from)) {}
  inline WheelSpeed& operator=(const WheelSpeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline WheelSpeed& operator=(WheelSpeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WheelSpeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const WheelSpeed* internal_default_instance() {
    return reinterpret_cast<const WheelSpeed*>(
        &_WheelSpeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(WheelSpeed& a, WheelSpeed& b) { a.Swap(&b); }
  inline void Swap(WheelSpeed* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WheelSpeed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WheelSpeed* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<WheelSpeed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WheelSpeed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WheelSpeed& from) { WheelSpeed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WheelSpeed* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.canbus.WheelSpeed"; }

 protected:
  explicit WheelSpeed(::google::protobuf::Arena* arena);
  WheelSpeed(::google::protobuf::Arena* arena, const WheelSpeed& from);
  WheelSpeed(::google::protobuf::Arena* arena, WheelSpeed&& from) noexcept
      : WheelSpeed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using WheelSpeedType = WheelSpeed_WheelSpeedType;
  static constexpr WheelSpeedType FORWARD = WheelSpeed_WheelSpeedType_FORWARD;
  static constexpr WheelSpeedType BACKWARD = WheelSpeed_WheelSpeedType_BACKWARD;
  static constexpr WheelSpeedType STANDSTILL = WheelSpeed_WheelSpeedType_STANDSTILL;
  static constexpr WheelSpeedType INVALID = WheelSpeed_WheelSpeedType_INVALID;
  static inline bool WheelSpeedType_IsValid(int value) {
    return WheelSpeed_WheelSpeedType_IsValid(value);
  }
  static constexpr WheelSpeedType WheelSpeedType_MIN = WheelSpeed_WheelSpeedType_WheelSpeedType_MIN;
  static constexpr WheelSpeedType WheelSpeedType_MAX = WheelSpeed_WheelSpeedType_WheelSpeedType_MAX;
  static constexpr int WheelSpeedType_ARRAYSIZE = WheelSpeed_WheelSpeedType_WheelSpeedType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* WheelSpeedType_descriptor() {
    return WheelSpeed_WheelSpeedType_descriptor();
  }
  template <typename T>
  static inline const std::string& WheelSpeedType_Name(T value) {
    return WheelSpeed_WheelSpeedType_Name(value);
  }
  static inline bool WheelSpeedType_Parse(absl::string_view name, WheelSpeedType* value) {
    return WheelSpeed_WheelSpeedType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kWheelSpdRrFieldNumber = 3,
    kWheelSpdRlFieldNumber = 6,
    kWheelSpdFrFieldNumber = 9,
    kWheelSpdFlFieldNumber = 12,
    kIsWheelSpdRrValidFieldNumber = 1,
    kIsWheelSpdRlValidFieldNumber = 4,
    kIsWheelSpdFrValidFieldNumber = 7,
    kIsWheelSpdFlValidFieldNumber = 10,
    kWheelDirectionRrFieldNumber = 2,
    kWheelDirectionRlFieldNumber = 5,
    kWheelDirectionFrFieldNumber = 8,
    kWheelDirectionFlFieldNumber = 11,
  };
  // optional double wheel_spd_rr = 3 [default = 0];
  bool has_wheel_spd_rr() const;
  void clear_wheel_spd_rr() ;
  double wheel_spd_rr() const;
  void set_wheel_spd_rr(double value);

  private:
  double _internal_wheel_spd_rr() const;
  void _internal_set_wheel_spd_rr(double value);

  public:
  // optional double wheel_spd_rl = 6 [default = 0];
  bool has_wheel_spd_rl() const;
  void clear_wheel_spd_rl() ;
  double wheel_spd_rl() const;
  void set_wheel_spd_rl(double value);

  private:
  double _internal_wheel_spd_rl() const;
  void _internal_set_wheel_spd_rl(double value);

  public:
  // optional double wheel_spd_fr = 9 [default = 0];
  bool has_wheel_spd_fr() const;
  void clear_wheel_spd_fr() ;
  double wheel_spd_fr() const;
  void set_wheel_spd_fr(double value);

  private:
  double _internal_wheel_spd_fr() const;
  void _internal_set_wheel_spd_fr(double value);

  public:
  // optional double wheel_spd_fl = 12 [default = 0];
  bool has_wheel_spd_fl() const;
  void clear_wheel_spd_fl() ;
  double wheel_spd_fl() const;
  void set_wheel_spd_fl(double value);

  private:
  double _internal_wheel_spd_fl() const;
  void _internal_set_wheel_spd_fl(double value);

  public:
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  bool has_is_wheel_spd_rr_valid() const;
  void clear_is_wheel_spd_rr_valid() ;
  bool is_wheel_spd_rr_valid() const;
  void set_is_wheel_spd_rr_valid(bool value);

  private:
  bool _internal_is_wheel_spd_rr_valid() const;
  void _internal_set_is_wheel_spd_rr_valid(bool value);

  public:
  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  bool has_is_wheel_spd_rl_valid() const;
  void clear_is_wheel_spd_rl_valid() ;
  bool is_wheel_spd_rl_valid() const;
  void set_is_wheel_spd_rl_valid(bool value);

  private:
  bool _internal_is_wheel_spd_rl_valid() const;
  void _internal_set_is_wheel_spd_rl_valid(bool value);

  public:
  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  bool has_is_wheel_spd_fr_valid() const;
  void clear_is_wheel_spd_fr_valid() ;
  bool is_wheel_spd_fr_valid() const;
  void set_is_wheel_spd_fr_valid(bool value);

  private:
  bool _internal_is_wheel_spd_fr_valid() const;
  void _internal_set_is_wheel_spd_fr_valid(bool value);

  public:
  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  bool has_is_wheel_spd_fl_valid() const;
  void clear_is_wheel_spd_fl_valid() ;
  bool is_wheel_spd_fl_valid() const;
  void set_is_wheel_spd_fl_valid(bool value);

  private:
  bool _internal_is_wheel_spd_fl_valid() const;
  void _internal_set_is_wheel_spd_fl_valid(bool value);

  public:
  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  bool has_wheel_direction_rr() const;
  void clear_wheel_direction_rr() ;
  ::control::canbus::WheelSpeed_WheelSpeedType wheel_direction_rr() const;
  void set_wheel_direction_rr(::control::canbus::WheelSpeed_WheelSpeedType value);

  private:
  ::control::canbus::WheelSpeed_WheelSpeedType _internal_wheel_direction_rr() const;
  void _internal_set_wheel_direction_rr(::control::canbus::WheelSpeed_WheelSpeedType value);

  public:
  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  bool has_wheel_direction_rl() const;
  void clear_wheel_direction_rl() ;
  ::control::canbus::WheelSpeed_WheelSpeedType wheel_direction_rl() const;
  void set_wheel_direction_rl(::control::canbus::WheelSpeed_WheelSpeedType value);

  private:
  ::control::canbus::WheelSpeed_WheelSpeedType _internal_wheel_direction_rl() const;
  void _internal_set_wheel_direction_rl(::control::canbus::WheelSpeed_WheelSpeedType value);

  public:
  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  bool has_wheel_direction_fr() const;
  void clear_wheel_direction_fr() ;
  ::control::canbus::WheelSpeed_WheelSpeedType wheel_direction_fr() const;
  void set_wheel_direction_fr(::control::canbus::WheelSpeed_WheelSpeedType value);

  private:
  ::control::canbus::WheelSpeed_WheelSpeedType _internal_wheel_direction_fr() const;
  void _internal_set_wheel_direction_fr(::control::canbus::WheelSpeed_WheelSpeedType value);

  public:
  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  bool has_wheel_direction_fl() const;
  void clear_wheel_direction_fl() ;
  ::control::canbus::WheelSpeed_WheelSpeedType wheel_direction_fl() const;
  void set_wheel_direction_fl(::control::canbus::WheelSpeed_WheelSpeedType value);

  private:
  ::control::canbus::WheelSpeed_WheelSpeedType _internal_wheel_direction_fl() const;
  void _internal_set_wheel_direction_fl(::control::canbus::WheelSpeed_WheelSpeedType value);

  public:
  // @@protoc_insertion_point(class_scope:control.canbus.WheelSpeed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_WheelSpeed_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WheelSpeed& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double wheel_spd_rr_;
    double wheel_spd_rl_;
    double wheel_spd_fr_;
    double wheel_spd_fl_;
    bool is_wheel_spd_rr_valid_;
    bool is_wheel_spd_rl_valid_;
    bool is_wheel_spd_fr_valid_;
    bool is_wheel_spd_fl_valid_;
    int wheel_direction_rr_;
    int wheel_direction_rl_;
    int wheel_direction_fr_;
    int wheel_direction_fl_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class License final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.canbus.License) */ {
 public:
  inline License() : License(nullptr) {}
  ~License() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR License(
      ::google::protobuf::internal::ConstantInitialized);

  inline License(const License& from) : License(nullptr, from) {}
  inline License(License&& from) noexcept
      : License(nullptr, std::move(from)) {}
  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }
  inline License& operator=(License&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const License& default_instance() {
    return *internal_default_instance();
  }
  static inline const License* internal_default_instance() {
    return reinterpret_cast<const License*>(
        &_License_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(License& a, License& b) { a.Swap(&b); }
  inline void Swap(License* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(License* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  License* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<License>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const License& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const License& from) { License::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(License* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.canbus.License"; }

 protected:
  explicit License(::google::protobuf::Arena* arena);
  License(::google::protobuf::Arena* arena, const License& from);
  License(::google::protobuf::Arena* arena, License&& from) noexcept
      : License(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVinFieldNumber = 1,
  };
  // optional string vin = 1 [deprecated = true];
  [[deprecated]]  bool has_vin() const;
  [[deprecated]]  void clear_vin() ;
  [[deprecated]] const std::string& vin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_vin(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_vin();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_vin();
  [[deprecated]] void set_allocated_vin(std::string* value);

  private:
  const std::string& _internal_vin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vin(
      const std::string& value);
  std::string* _internal_mutable_vin();

  public:
  // @@protoc_insertion_point(class_scope:control.canbus.License)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_License_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const License& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr vin_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class CheckResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.canbus.CheckResponse) */ {
 public:
  inline CheckResponse() : CheckResponse(nullptr) {}
  ~CheckResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckResponse(const CheckResponse& from) : CheckResponse(nullptr, from) {}
  inline CheckResponse(CheckResponse&& from) noexcept
      : CheckResponse(nullptr, std::move(from)) {}
  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
        &_CheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CheckResponse& a, CheckResponse& b) { a.Swap(&b); }
  inline void Swap(CheckResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CheckResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckResponse& from) { CheckResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.canbus.CheckResponse"; }

 protected:
  explicit CheckResponse(::google::protobuf::Arena* arena);
  CheckResponse(::google::protobuf::Arena* arena, const CheckResponse& from);
  CheckResponse(::google::protobuf::Arena* arena, CheckResponse&& from) noexcept
      : CheckResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIsEpsOnlineFieldNumber = 1,
    kIsEpbOnlineFieldNumber = 2,
    kIsEspOnlineFieldNumber = 3,
    kIsVtogOnlineFieldNumber = 4,
    kIsScuOnlineFieldNumber = 5,
    kIsSwitchOnlineFieldNumber = 6,
    kIsVcuOnlineFieldNumber = 7,
  };
  // optional bool is_eps_online = 1 [default = false];
  bool has_is_eps_online() const;
  void clear_is_eps_online() ;
  bool is_eps_online() const;
  void set_is_eps_online(bool value);

  private:
  bool _internal_is_eps_online() const;
  void _internal_set_is_eps_online(bool value);

  public:
  // optional bool is_epb_online = 2 [default = false];
  bool has_is_epb_online() const;
  void clear_is_epb_online() ;
  bool is_epb_online() const;
  void set_is_epb_online(bool value);

  private:
  bool _internal_is_epb_online() const;
  void _internal_set_is_epb_online(bool value);

  public:
  // optional bool is_esp_online = 3 [default = false];
  bool has_is_esp_online() const;
  void clear_is_esp_online() ;
  bool is_esp_online() const;
  void set_is_esp_online(bool value);

  private:
  bool _internal_is_esp_online() const;
  void _internal_set_is_esp_online(bool value);

  public:
  // optional bool is_vtog_online = 4 [default = false];
  bool has_is_vtog_online() const;
  void clear_is_vtog_online() ;
  bool is_vtog_online() const;
  void set_is_vtog_online(bool value);

  private:
  bool _internal_is_vtog_online() const;
  void _internal_set_is_vtog_online(bool value);

  public:
  // optional bool is_scu_online = 5 [default = false];
  bool has_is_scu_online() const;
  void clear_is_scu_online() ;
  bool is_scu_online() const;
  void set_is_scu_online(bool value);

  private:
  bool _internal_is_scu_online() const;
  void _internal_set_is_scu_online(bool value);

  public:
  // optional bool is_switch_online = 6 [default = false];
  bool has_is_switch_online() const;
  void clear_is_switch_online() ;
  bool is_switch_online() const;
  void set_is_switch_online(bool value);

  private:
  bool _internal_is_switch_online() const;
  void _internal_set_is_switch_online(bool value);

  public:
  // optional bool is_vcu_online = 7 [default = false];
  bool has_is_vcu_online() const;
  void clear_is_vcu_online() ;
  bool is_vcu_online() const;
  void set_is_vcu_online(bool value);

  private:
  bool _internal_is_vcu_online() const;
  void _internal_set_is_vcu_online(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.canbus.CheckResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CheckResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CheckResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool is_eps_online_;
    bool is_epb_online_;
    bool is_esp_online_;
    bool is_vtog_online_;
    bool is_scu_online_;
    bool is_switch_online_;
    bool is_vcu_online_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class ChassisGPS final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.canbus.ChassisGPS) */ {
 public:
  inline ChassisGPS() : ChassisGPS(nullptr) {}
  ~ChassisGPS() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChassisGPS(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChassisGPS(const ChassisGPS& from) : ChassisGPS(nullptr, from) {}
  inline ChassisGPS(ChassisGPS&& from) noexcept
      : ChassisGPS(nullptr, std::move(from)) {}
  inline ChassisGPS& operator=(const ChassisGPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisGPS& operator=(ChassisGPS&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChassisGPS& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChassisGPS* internal_default_instance() {
    return reinterpret_cast<const ChassisGPS*>(
        &_ChassisGPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ChassisGPS& a, ChassisGPS& b) { a.Swap(&b); }
  inline void Swap(ChassisGPS* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChassisGPS* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChassisGPS* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ChassisGPS>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChassisGPS& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChassisGPS& from) { ChassisGPS::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChassisGPS* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.canbus.ChassisGPS"; }

 protected:
  explicit ChassisGPS(::google::protobuf::Arena* arena);
  ChassisGPS(::google::protobuf::Arena* arena, const ChassisGPS& from);
  ChassisGPS(::google::protobuf::Arena* arena, ChassisGPS&& from) noexcept
      : ChassisGPS(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kYearFieldNumber = 4,
    kMonthFieldNumber = 5,
    kDayFieldNumber = 6,
    kHoursFieldNumber = 7,
    kMinutesFieldNumber = 8,
    kSecondsFieldNumber = 9,
    kCompassDirectionFieldNumber = 10,
    kPdopFieldNumber = 11,
    kGpsValidFieldNumber = 3,
    kIsGpsFaultFieldNumber = 12,
    kIsInferredFieldNumber = 13,
    kQualityFieldNumber = 18,
    kAltitudeFieldNumber = 14,
    kHeadingFieldNumber = 15,
    kHdopFieldNumber = 16,
    kVdopFieldNumber = 17,
    kGpsSpeedFieldNumber = 20,
    kNumSatellitesFieldNumber = 19,
  };
  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude() ;
  double latitude() const;
  void set_latitude(double value);

  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);

  public:
  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude() ;
  double longitude() const;
  void set_longitude(double value);

  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);

  public:
  // optional int32 year = 4;
  bool has_year() const;
  void clear_year() ;
  ::int32_t year() const;
  void set_year(::int32_t value);

  private:
  ::int32_t _internal_year() const;
  void _internal_set_year(::int32_t value);

  public:
  // optional int32 month = 5;
  bool has_month() const;
  void clear_month() ;
  ::int32_t month() const;
  void set_month(::int32_t value);

  private:
  ::int32_t _internal_month() const;
  void _internal_set_month(::int32_t value);

  public:
  // optional int32 day = 6;
  bool has_day() const;
  void clear_day() ;
  ::int32_t day() const;
  void set_day(::int32_t value);

  private:
  ::int32_t _internal_day() const;
  void _internal_set_day(::int32_t value);

  public:
  // optional int32 hours = 7;
  bool has_hours() const;
  void clear_hours() ;
  ::int32_t hours() const;
  void set_hours(::int32_t value);

  private:
  ::int32_t _internal_hours() const;
  void _internal_set_hours(::int32_t value);

  public:
  // optional int32 minutes = 8;
  bool has_minutes() const;
  void clear_minutes() ;
  ::int32_t minutes() const;
  void set_minutes(::int32_t value);

  private:
  ::int32_t _internal_minutes() const;
  void _internal_set_minutes(::int32_t value);

  public:
  // optional int32 seconds = 9;
  bool has_seconds() const;
  void clear_seconds() ;
  ::int32_t seconds() const;
  void set_seconds(::int32_t value);

  private:
  ::int32_t _internal_seconds() const;
  void _internal_set_seconds(::int32_t value);

  public:
  // optional double compass_direction = 10;
  bool has_compass_direction() const;
  void clear_compass_direction() ;
  double compass_direction() const;
  void set_compass_direction(double value);

  private:
  double _internal_compass_direction() const;
  void _internal_set_compass_direction(double value);

  public:
  // optional double pdop = 11;
  bool has_pdop() const;
  void clear_pdop() ;
  double pdop() const;
  void set_pdop(double value);

  private:
  double _internal_pdop() const;
  void _internal_set_pdop(double value);

  public:
  // optional bool gps_valid = 3;
  bool has_gps_valid() const;
  void clear_gps_valid() ;
  bool gps_valid() const;
  void set_gps_valid(bool value);

  private:
  bool _internal_gps_valid() const;
  void _internal_set_gps_valid(bool value);

  public:
  // optional bool is_gps_fault = 12;
  bool has_is_gps_fault() const;
  void clear_is_gps_fault() ;
  bool is_gps_fault() const;
  void set_is_gps_fault(bool value);

  private:
  bool _internal_is_gps_fault() const;
  void _internal_set_is_gps_fault(bool value);

  public:
  // optional bool is_inferred = 13;
  bool has_is_inferred() const;
  void clear_is_inferred() ;
  bool is_inferred() const;
  void set_is_inferred(bool value);

  private:
  bool _internal_is_inferred() const;
  void _internal_set_is_inferred(bool value);

  public:
  // optional .control.canbus.GpsQuality quality = 18;
  bool has_quality() const;
  void clear_quality() ;
  ::control::canbus::GpsQuality quality() const;
  void set_quality(::control::canbus::GpsQuality value);

  private:
  ::control::canbus::GpsQuality _internal_quality() const;
  void _internal_set_quality(::control::canbus::GpsQuality value);

  public:
  // optional double altitude = 14;
  bool has_altitude() const;
  void clear_altitude() ;
  double altitude() const;
  void set_altitude(double value);

  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);

  public:
  // optional double heading = 15;
  bool has_heading() const;
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // optional double hdop = 16;
  bool has_hdop() const;
  void clear_hdop() ;
  double hdop() const;
  void set_hdop(double value);

  private:
  double _internal_hdop() const;
  void _internal_set_hdop(double value);

  public:
  // optional double vdop = 17;
  bool has_vdop() const;
  void clear_vdop() ;
  double vdop() const;
  void set_vdop(double value);

  private:
  double _internal_vdop() const;
  void _internal_set_vdop(double value);

  public:
  // optional double gps_speed = 20;
  bool has_gps_speed() const;
  void clear_gps_speed() ;
  double gps_speed() const;
  void set_gps_speed(double value);

  private:
  double _internal_gps_speed() const;
  void _internal_set_gps_speed(double value);

  public:
  // optional int32 num_satellites = 19;
  bool has_num_satellites() const;
  void clear_num_satellites() ;
  ::int32_t num_satellites() const;
  void set_num_satellites(::int32_t value);

  private:
  ::int32_t _internal_num_satellites() const;
  void _internal_set_num_satellites(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:control.canbus.ChassisGPS)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 20, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ChassisGPS_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChassisGPS& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double latitude_;
    double longitude_;
    ::int32_t year_;
    ::int32_t month_;
    ::int32_t day_;
    ::int32_t hours_;
    ::int32_t minutes_;
    ::int32_t seconds_;
    double compass_direction_;
    double pdop_;
    bool gps_valid_;
    bool is_gps_fault_;
    bool is_inferred_;
    int quality_;
    double altitude_;
    double heading_;
    double hdop_;
    double vdop_;
    double gps_speed_;
    ::int32_t num_satellites_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class Sonar final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.canbus.Sonar) */ {
 public:
  inline Sonar() : Sonar(nullptr) {}
  ~Sonar() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Sonar(
      ::google::protobuf::internal::ConstantInitialized);

  inline Sonar(const Sonar& from) : Sonar(nullptr, from) {}
  inline Sonar(Sonar&& from) noexcept
      : Sonar(nullptr, std::move(from)) {}
  inline Sonar& operator=(const Sonar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sonar& operator=(Sonar&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sonar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sonar* internal_default_instance() {
    return reinterpret_cast<const Sonar*>(
        &_Sonar_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Sonar& a, Sonar& b) { a.Swap(&b); }
  inline void Swap(Sonar* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sonar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sonar* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Sonar>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sonar& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Sonar& from) { Sonar::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Sonar* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.canbus.Sonar"; }

 protected:
  explicit Sonar(::google::protobuf::Arena* arena);
  Sonar(::google::protobuf::Arena* arena, const Sonar& from);
  Sonar(::google::protobuf::Arena* arena, Sonar&& from) noexcept
      : Sonar(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTranslationFieldNumber = 2,
    kRotationFieldNumber = 3,
    kRangeFieldNumber = 1,
  };
  // optional .control.common.Point3D translation = 2;
  bool has_translation() const;
  void clear_translation() ;
  const ::control::common::Point3D& translation() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_translation();
  ::control::common::Point3D* mutable_translation();
  void set_allocated_translation(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_translation(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_translation();

  private:
  const ::control::common::Point3D& _internal_translation() const;
  ::control::common::Point3D* _internal_mutable_translation();

  public:
  // optional .control.common.Quaternion rotation = 3;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::control::common::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::control::common::Quaternion* release_rotation();
  ::control::common::Quaternion* mutable_rotation();
  void set_allocated_rotation(::control::common::Quaternion* value);
  void unsafe_arena_set_allocated_rotation(::control::common::Quaternion* value);
  ::control::common::Quaternion* unsafe_arena_release_rotation();

  private:
  const ::control::common::Quaternion& _internal_rotation() const;
  ::control::common::Quaternion* _internal_mutable_rotation();

  public:
  // optional double range = 1;
  bool has_range() const;
  void clear_range() ;
  double range() const;
  void set_range(double value);

  private:
  double _internal_range() const;
  void _internal_set_range(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.canbus.Sonar)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Sonar_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Sonar& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::Point3D* translation_;
    ::control::common::Quaternion* rotation_;
    double range_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class Surround final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.canbus.Surround) */ {
 public:
  inline Surround() : Surround(nullptr) {}
  ~Surround() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Surround(
      ::google::protobuf::internal::ConstantInitialized);

  inline Surround(const Surround& from) : Surround(nullptr, from) {}
  inline Surround(Surround&& from) noexcept
      : Surround(nullptr, std::move(from)) {}
  inline Surround& operator=(const Surround& from) {
    CopyFrom(from);
    return *this;
  }
  inline Surround& operator=(Surround&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Surround& default_instance() {
    return *internal_default_instance();
  }
  static inline const Surround* internal_default_instance() {
    return reinterpret_cast<const Surround*>(
        &_Surround_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Surround& a, Surround& b) { a.Swap(&b); }
  inline void Swap(Surround* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Surround* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Surround* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Surround>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Surround& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Surround& from) { Surround::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Surround* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.canbus.Surround"; }

 protected:
  explicit Surround(::google::protobuf::Arena* arena);
  Surround(::google::protobuf::Arena* arena, const Surround& from);
  Surround(::google::protobuf::Arena* arena, Surround&& from) noexcept
      : Surround(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSonarRangeFieldNumber = 23,
    kSonarFieldNumber = 24,
    kCrossTrafficAlertLeftFieldNumber = 1,
    kCrossTrafficAlertLeftEnabledFieldNumber = 2,
    kBlindSpotLeftAlertFieldNumber = 3,
    kBlindSpotLeftAlertEnabledFieldNumber = 4,
    kCrossTrafficAlertRightFieldNumber = 5,
    kCrossTrafficAlertRightEnabledFieldNumber = 6,
    kBlindSpotRightAlertFieldNumber = 7,
    kBlindSpotRightAlertEnabledFieldNumber = 8,
    kSonar00FieldNumber = 9,
    kSonar01FieldNumber = 10,
    kSonar02FieldNumber = 11,
    kSonar03FieldNumber = 12,
    kSonar04FieldNumber = 13,
    kSonar05FieldNumber = 14,
    kSonar06FieldNumber = 15,
    kSonar07FieldNumber = 16,
    kSonar08FieldNumber = 17,
    kSonar09FieldNumber = 18,
    kSonar10FieldNumber = 19,
    kSonar11FieldNumber = 20,
    kSonarEnabledFieldNumber = 21,
    kSonarFaultFieldNumber = 22,
  };
  // repeated double sonar_range = 23;
  int sonar_range_size() const;
  private:
  int _internal_sonar_range_size() const;

  public:
  void clear_sonar_range() ;
  double sonar_range(int index) const;
  void set_sonar_range(int index, double value);
  void add_sonar_range(double value);
  const ::google::protobuf::RepeatedField<double>& sonar_range() const;
  ::google::protobuf::RepeatedField<double>* mutable_sonar_range();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_sonar_range() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_sonar_range();

  public:
  // repeated .control.canbus.Sonar sonar = 24;
  int sonar_size() const;
  private:
  int _internal_sonar_size() const;

  public:
  void clear_sonar() ;
  ::control::canbus::Sonar* mutable_sonar(int index);
  ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>* mutable_sonar();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>& _internal_sonar() const;
  ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>* _internal_mutable_sonar();
  public:
  const ::control::canbus::Sonar& sonar(int index) const;
  ::control::canbus::Sonar* add_sonar();
  const ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>& sonar() const;
  // optional bool cross_traffic_alert_left = 1;
  bool has_cross_traffic_alert_left() const;
  void clear_cross_traffic_alert_left() ;
  bool cross_traffic_alert_left() const;
  void set_cross_traffic_alert_left(bool value);

  private:
  bool _internal_cross_traffic_alert_left() const;
  void _internal_set_cross_traffic_alert_left(bool value);

  public:
  // optional bool cross_traffic_alert_left_enabled = 2;
  bool has_cross_traffic_alert_left_enabled() const;
  void clear_cross_traffic_alert_left_enabled() ;
  bool cross_traffic_alert_left_enabled() const;
  void set_cross_traffic_alert_left_enabled(bool value);

  private:
  bool _internal_cross_traffic_alert_left_enabled() const;
  void _internal_set_cross_traffic_alert_left_enabled(bool value);

  public:
  // optional bool blind_spot_left_alert = 3;
  bool has_blind_spot_left_alert() const;
  void clear_blind_spot_left_alert() ;
  bool blind_spot_left_alert() const;
  void set_blind_spot_left_alert(bool value);

  private:
  bool _internal_blind_spot_left_alert() const;
  void _internal_set_blind_spot_left_alert(bool value);

  public:
  // optional bool blind_spot_left_alert_enabled = 4;
  bool has_blind_spot_left_alert_enabled() const;
  void clear_blind_spot_left_alert_enabled() ;
  bool blind_spot_left_alert_enabled() const;
  void set_blind_spot_left_alert_enabled(bool value);

  private:
  bool _internal_blind_spot_left_alert_enabled() const;
  void _internal_set_blind_spot_left_alert_enabled(bool value);

  public:
  // optional bool cross_traffic_alert_right = 5;
  bool has_cross_traffic_alert_right() const;
  void clear_cross_traffic_alert_right() ;
  bool cross_traffic_alert_right() const;
  void set_cross_traffic_alert_right(bool value);

  private:
  bool _internal_cross_traffic_alert_right() const;
  void _internal_set_cross_traffic_alert_right(bool value);

  public:
  // optional bool cross_traffic_alert_right_enabled = 6;
  bool has_cross_traffic_alert_right_enabled() const;
  void clear_cross_traffic_alert_right_enabled() ;
  bool cross_traffic_alert_right_enabled() const;
  void set_cross_traffic_alert_right_enabled(bool value);

  private:
  bool _internal_cross_traffic_alert_right_enabled() const;
  void _internal_set_cross_traffic_alert_right_enabled(bool value);

  public:
  // optional bool blind_spot_right_alert = 7;
  bool has_blind_spot_right_alert() const;
  void clear_blind_spot_right_alert() ;
  bool blind_spot_right_alert() const;
  void set_blind_spot_right_alert(bool value);

  private:
  bool _internal_blind_spot_right_alert() const;
  void _internal_set_blind_spot_right_alert(bool value);

  public:
  // optional bool blind_spot_right_alert_enabled = 8;
  bool has_blind_spot_right_alert_enabled() const;
  void clear_blind_spot_right_alert_enabled() ;
  bool blind_spot_right_alert_enabled() const;
  void set_blind_spot_right_alert_enabled(bool value);

  private:
  bool _internal_blind_spot_right_alert_enabled() const;
  void _internal_set_blind_spot_right_alert_enabled(bool value);

  public:
  // optional double sonar00 = 9;
  bool has_sonar00() const;
  void clear_sonar00() ;
  double sonar00() const;
  void set_sonar00(double value);

  private:
  double _internal_sonar00() const;
  void _internal_set_sonar00(double value);

  public:
  // optional double sonar01 = 10;
  bool has_sonar01() const;
  void clear_sonar01() ;
  double sonar01() const;
  void set_sonar01(double value);

  private:
  double _internal_sonar01() const;
  void _internal_set_sonar01(double value);

  public:
  // optional double sonar02 = 11;
  bool has_sonar02() const;
  void clear_sonar02() ;
  double sonar02() const;
  void set_sonar02(double value);

  private:
  double _internal_sonar02() const;
  void _internal_set_sonar02(double value);

  public:
  // optional double sonar03 = 12;
  bool has_sonar03() const;
  void clear_sonar03() ;
  double sonar03() const;
  void set_sonar03(double value);

  private:
  double _internal_sonar03() const;
  void _internal_set_sonar03(double value);

  public:
  // optional double sonar04 = 13;
  bool has_sonar04() const;
  void clear_sonar04() ;
  double sonar04() const;
  void set_sonar04(double value);

  private:
  double _internal_sonar04() const;
  void _internal_set_sonar04(double value);

  public:
  // optional double sonar05 = 14;
  bool has_sonar05() const;
  void clear_sonar05() ;
  double sonar05() const;
  void set_sonar05(double value);

  private:
  double _internal_sonar05() const;
  void _internal_set_sonar05(double value);

  public:
  // optional double sonar06 = 15;
  bool has_sonar06() const;
  void clear_sonar06() ;
  double sonar06() const;
  void set_sonar06(double value);

  private:
  double _internal_sonar06() const;
  void _internal_set_sonar06(double value);

  public:
  // optional double sonar07 = 16;
  bool has_sonar07() const;
  void clear_sonar07() ;
  double sonar07() const;
  void set_sonar07(double value);

  private:
  double _internal_sonar07() const;
  void _internal_set_sonar07(double value);

  public:
  // optional double sonar08 = 17;
  bool has_sonar08() const;
  void clear_sonar08() ;
  double sonar08() const;
  void set_sonar08(double value);

  private:
  double _internal_sonar08() const;
  void _internal_set_sonar08(double value);

  public:
  // optional double sonar09 = 18;
  bool has_sonar09() const;
  void clear_sonar09() ;
  double sonar09() const;
  void set_sonar09(double value);

  private:
  double _internal_sonar09() const;
  void _internal_set_sonar09(double value);

  public:
  // optional double sonar10 = 19;
  bool has_sonar10() const;
  void clear_sonar10() ;
  double sonar10() const;
  void set_sonar10(double value);

  private:
  double _internal_sonar10() const;
  void _internal_set_sonar10(double value);

  public:
  // optional double sonar11 = 20;
  bool has_sonar11() const;
  void clear_sonar11() ;
  double sonar11() const;
  void set_sonar11(double value);

  private:
  double _internal_sonar11() const;
  void _internal_set_sonar11(double value);

  public:
  // optional bool sonar_enabled = 21;
  bool has_sonar_enabled() const;
  void clear_sonar_enabled() ;
  bool sonar_enabled() const;
  void set_sonar_enabled(bool value);

  private:
  bool _internal_sonar_enabled() const;
  void _internal_set_sonar_enabled(bool value);

  public:
  // optional bool sonar_fault = 22;
  bool has_sonar_fault() const;
  void clear_sonar_fault() ;
  bool sonar_fault() const;
  void set_sonar_fault(bool value);

  private:
  bool _internal_sonar_fault() const;
  void _internal_set_sonar_fault(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.canbus.Surround)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 24, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Surround_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Surround& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> sonar_range_;
    ::google::protobuf::RepeatedPtrField< ::control::canbus::Sonar > sonar_;
    bool cross_traffic_alert_left_;
    bool cross_traffic_alert_left_enabled_;
    bool blind_spot_left_alert_;
    bool blind_spot_left_alert_enabled_;
    bool cross_traffic_alert_right_;
    bool cross_traffic_alert_right_enabled_;
    bool blind_spot_right_alert_;
    bool blind_spot_right_alert_enabled_;
    double sonar00_;
    double sonar01_;
    double sonar02_;
    double sonar03_;
    double sonar04_;
    double sonar05_;
    double sonar06_;
    double sonar07_;
    double sonar08_;
    double sonar09_;
    double sonar10_;
    double sonar11_;
    bool sonar_enabled_;
    bool sonar_fault_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class Chassis final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.canbus.Chassis) */ {
 public:
  inline Chassis() : Chassis(nullptr) {}
  ~Chassis() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Chassis(
      ::google::protobuf::internal::ConstantInitialized);

  inline Chassis(const Chassis& from) : Chassis(nullptr, from) {}
  inline Chassis(Chassis&& from) noexcept
      : Chassis(nullptr, std::move(from)) {}
  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chassis& operator=(Chassis&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chassis& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
        &_Chassis_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Chassis& a, Chassis& b) { a.Swap(&b); }
  inline void Swap(Chassis* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chassis* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chassis* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Chassis>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Chassis& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Chassis& from) { Chassis::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Chassis* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.canbus.Chassis"; }

 protected:
  explicit Chassis(::google::protobuf::Arena* arena);
  Chassis(::google::protobuf::Arena* arena, const Chassis& from);
  Chassis(::google::protobuf::Arena* arena, Chassis&& from) noexcept
      : Chassis(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DrivingMode = Chassis_DrivingMode;
  static constexpr DrivingMode COMPLETE_MANUAL = Chassis_DrivingMode_COMPLETE_MANUAL;
  static constexpr DrivingMode COMPLETE_AUTO_DRIVE = Chassis_DrivingMode_COMPLETE_AUTO_DRIVE;
  static constexpr DrivingMode AUTO_STEER_ONLY = Chassis_DrivingMode_AUTO_STEER_ONLY;
  static constexpr DrivingMode AUTO_SPEED_ONLY = Chassis_DrivingMode_AUTO_SPEED_ONLY;
  static constexpr DrivingMode EMERGENCY_MODE = Chassis_DrivingMode_EMERGENCY_MODE;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static constexpr DrivingMode DrivingMode_MIN = Chassis_DrivingMode_DrivingMode_MIN;
  static constexpr DrivingMode DrivingMode_MAX = Chassis_DrivingMode_DrivingMode_MAX;
  static constexpr int DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  template <typename T>
  static inline const std::string& DrivingMode_Name(T value) {
    return Chassis_DrivingMode_Name(value);
  }
  static inline bool DrivingMode_Parse(absl::string_view name, DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }
  using ErrorCode = Chassis_ErrorCode;
  static constexpr ErrorCode NO_ERROR = Chassis_ErrorCode_NO_ERROR;
  static constexpr ErrorCode CMD_NOT_IN_PERIOD = Chassis_ErrorCode_CMD_NOT_IN_PERIOD;
  static constexpr ErrorCode CHASSIS_ERROR = Chassis_ErrorCode_CHASSIS_ERROR;
  static constexpr ErrorCode CHASSIS_ERROR_ON_STEER = Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER;
  static constexpr ErrorCode CHASSIS_ERROR_ON_BRAKE = Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE;
  static constexpr ErrorCode CHASSIS_ERROR_ON_THROTTLE = Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE;
  static constexpr ErrorCode CHASSIS_ERROR_ON_GEAR = Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR;
  static constexpr ErrorCode MANUAL_INTERVENTION = Chassis_ErrorCode_MANUAL_INTERVENTION;
  static constexpr ErrorCode CHASSIS_CAN_NOT_IN_PERIOD = Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD;
  static constexpr ErrorCode UNKNOWN_ERROR = Chassis_ErrorCode_UNKNOWN_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Chassis_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN = Chassis_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX = Chassis_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE = Chassis_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
    return Chassis_ErrorCode_descriptor();
  }
  template <typename T>
  static inline const std::string& ErrorCode_Name(T value) {
    return Chassis_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(absl::string_view name, ErrorCode* value) {
    return Chassis_ErrorCode_Parse(name, value);
  }
  using GearPosition = Chassis_GearPosition;
  static constexpr GearPosition GEAR_INVALID = Chassis_GearPosition_GEAR_INVALID;
  static constexpr GearPosition GEAR_DRIVE = Chassis_GearPosition_GEAR_DRIVE;
  static constexpr GearPosition GEAR_NEUTRAL = Chassis_GearPosition_GEAR_NEUTRAL;
  static constexpr GearPosition GEAR_REVERSE = Chassis_GearPosition_GEAR_REVERSE;
  static constexpr GearPosition GEAR_PARKING = Chassis_GearPosition_GEAR_PARKING;
  static constexpr GearPosition GEAR_LOW = Chassis_GearPosition_GEAR_LOW;
  static constexpr GearPosition GEAR_NONE = Chassis_GearPosition_GEAR_NONE;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static constexpr GearPosition GearPosition_MIN = Chassis_GearPosition_GearPosition_MIN;
  static constexpr GearPosition GearPosition_MAX = Chassis_GearPosition_GearPosition_MAX;
  static constexpr int GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  template <typename T>
  static inline const std::string& GearPosition_Name(T value) {
    return Chassis_GearPosition_Name(value);
  }
  static inline bool GearPosition_Parse(absl::string_view name, GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }
  using BumperEvent = Chassis_BumperEvent;
  static constexpr BumperEvent BUMPER_INVALID = Chassis_BumperEvent_BUMPER_INVALID;
  static constexpr BumperEvent BUMPER_NORMAL = Chassis_BumperEvent_BUMPER_NORMAL;
  static constexpr BumperEvent BUMPER_PRESSED = Chassis_BumperEvent_BUMPER_PRESSED;
  static inline bool BumperEvent_IsValid(int value) {
    return Chassis_BumperEvent_IsValid(value);
  }
  static constexpr BumperEvent BumperEvent_MIN = Chassis_BumperEvent_BumperEvent_MIN;
  static constexpr BumperEvent BumperEvent_MAX = Chassis_BumperEvent_BumperEvent_MAX;
  static constexpr int BumperEvent_ARRAYSIZE = Chassis_BumperEvent_BumperEvent_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* BumperEvent_descriptor() {
    return Chassis_BumperEvent_descriptor();
  }
  template <typename T>
  static inline const std::string& BumperEvent_Name(T value) {
    return Chassis_BumperEvent_Name(value);
  }
  static inline bool BumperEvent_Parse(absl::string_view name, BumperEvent* value) {
    return Chassis_BumperEvent_Parse(name, value);
  }
  using SteerMode = Chassis_SteerMode;
  static constexpr SteerMode STRAIGHT = Chassis_SteerMode_STRAIGHT;
  static constexpr SteerMode FULLWHEEL = Chassis_SteerMode_FULLWHEEL;
  static constexpr SteerMode DIAGONAL = Chassis_SteerMode_DIAGONAL;
  static constexpr SteerMode FORWARDWHEEL = Chassis_SteerMode_FORWARDWHEEL;
  static inline bool SteerMode_IsValid(int value) {
    return Chassis_SteerMode_IsValid(value);
  }
  static constexpr SteerMode SteerMode_MIN = Chassis_SteerMode_SteerMode_MIN;
  static constexpr SteerMode SteerMode_MAX = Chassis_SteerMode_SteerMode_MAX;
  static constexpr int SteerMode_ARRAYSIZE = Chassis_SteerMode_SteerMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SteerMode_descriptor() {
    return Chassis_SteerMode_descriptor();
  }
  template <typename T>
  static inline const std::string& SteerMode_Name(T value) {
    return Chassis_SteerMode_Name(value);
  }
  static inline bool SteerMode_Parse(absl::string_view name, SteerMode* value) {
    return Chassis_SteerMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 25,
    kSignalFieldNumber = 27,
    kChassisGpsFieldNumber = 28,
    kEngageAdviceFieldNumber = 29,
    kWheelSpeedFieldNumber = 30,
    kSurroundFieldNumber = 31,
    kLicenseFieldNumber = 32,
    kVehicleIdFieldNumber = 33,
    kCheckResponseFieldNumber = 40,
    kCustomStatusFieldNumber = 41,
    kFuelRangeMFieldNumber = 7,
    kEngineStartedFieldNumber = 3,
    kParkingBrakeFieldNumber = 13,
    kHighBeamSignalFieldNumber = 14,
    kLowBeamSignalFieldNumber = 15,
    kLeftTurnSignalFieldNumber = 16,
    kRightTurnSignalFieldNumber = 17,
    kHornFieldNumber = 18,
    kWiperFieldNumber = 19,
    kDisengageStatusFieldNumber = 20,
    kDrivingModeFieldNumber = 21,
    kErrorCodeFieldNumber = 22,
    kSteeringTimestampFieldNumber = 24,
    kGearLocationFieldNumber = 23,
    kChassisErrorMaskFieldNumber = 26,
    kFrontBumperEventFieldNumber = 38,
    kBackBumperEventFieldNumber = 39,
    kSteerModeFieldNumber = 42,
    kDoorFlStatusFieldNumber = 43,
    kSwitchStatusFieldNumber = 44,
    kEpbStatusFieldNumber = 45,
    kMtrTrqFieldNumber = 46,
    kContainerPositionFieldNumber = 47,
    kContainerStatusFieldNumber = 48,
    kPtoStatusFieldNumber = 49,
    kArmAngleFieldNumber = 50,
    kShovelAngleFieldNumber = 51,
    kSteeringPercentageCmdFieldNumber = 37,
    kEngineRpmFieldNumber = 4,
    kSpeedMpsFieldNumber = 5,
    kOdometerMFieldNumber = 6,
    kThrottlePercentageFieldNumber = 8,
    kBrakePercentageFieldNumber = 9,
    kSteeringPercentageFieldNumber = 11,
    kSteeringTorqueNmFieldNumber = 12,
    kBatterySocPercentageFieldNumber = 34,
    kThrottlePercentageCmdFieldNumber = 35,
    kBrakePercentageCmdFieldNumber = 36,
  };
  // optional .control.common.Header header = 25;
  bool has_header() const;
  void clear_header() ;
  const ::control::common::Header& header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_header();

  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();

  public:
  // optional .control.common.VehicleSignal signal = 27;
  bool has_signal() const;
  void clear_signal() ;
  const ::control::common::VehicleSignal& signal() const;
  PROTOBUF_NODISCARD ::control::common::VehicleSignal* release_signal();
  ::control::common::VehicleSignal* mutable_signal();
  void set_allocated_signal(::control::common::VehicleSignal* value);
  void unsafe_arena_set_allocated_signal(::control::common::VehicleSignal* value);
  ::control::common::VehicleSignal* unsafe_arena_release_signal();

  private:
  const ::control::common::VehicleSignal& _internal_signal() const;
  ::control::common::VehicleSignal* _internal_mutable_signal();

  public:
  // optional .control.canbus.ChassisGPS chassis_gps = 28;
  bool has_chassis_gps() const;
  void clear_chassis_gps() ;
  const ::control::canbus::ChassisGPS& chassis_gps() const;
  PROTOBUF_NODISCARD ::control::canbus::ChassisGPS* release_chassis_gps();
  ::control::canbus::ChassisGPS* mutable_chassis_gps();
  void set_allocated_chassis_gps(::control::canbus::ChassisGPS* value);
  void unsafe_arena_set_allocated_chassis_gps(::control::canbus::ChassisGPS* value);
  ::control::canbus::ChassisGPS* unsafe_arena_release_chassis_gps();

  private:
  const ::control::canbus::ChassisGPS& _internal_chassis_gps() const;
  ::control::canbus::ChassisGPS* _internal_mutable_chassis_gps();

  public:
  // optional .control.common.EngageAdvice engage_advice = 29;
  bool has_engage_advice() const;
  void clear_engage_advice() ;
  const ::control::common::EngageAdvice& engage_advice() const;
  PROTOBUF_NODISCARD ::control::common::EngageAdvice* release_engage_advice();
  ::control::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::control::common::EngageAdvice* value);
  void unsafe_arena_set_allocated_engage_advice(::control::common::EngageAdvice* value);
  ::control::common::EngageAdvice* unsafe_arena_release_engage_advice();

  private:
  const ::control::common::EngageAdvice& _internal_engage_advice() const;
  ::control::common::EngageAdvice* _internal_mutable_engage_advice();

  public:
  // optional .control.canbus.WheelSpeed wheel_speed = 30;
  bool has_wheel_speed() const;
  void clear_wheel_speed() ;
  const ::control::canbus::WheelSpeed& wheel_speed() const;
  PROTOBUF_NODISCARD ::control::canbus::WheelSpeed* release_wheel_speed();
  ::control::canbus::WheelSpeed* mutable_wheel_speed();
  void set_allocated_wheel_speed(::control::canbus::WheelSpeed* value);
  void unsafe_arena_set_allocated_wheel_speed(::control::canbus::WheelSpeed* value);
  ::control::canbus::WheelSpeed* unsafe_arena_release_wheel_speed();

  private:
  const ::control::canbus::WheelSpeed& _internal_wheel_speed() const;
  ::control::canbus::WheelSpeed* _internal_mutable_wheel_speed();

  public:
  // optional .control.canbus.Surround surround = 31;
  bool has_surround() const;
  void clear_surround() ;
  const ::control::canbus::Surround& surround() const;
  PROTOBUF_NODISCARD ::control::canbus::Surround* release_surround();
  ::control::canbus::Surround* mutable_surround();
  void set_allocated_surround(::control::canbus::Surround* value);
  void unsafe_arena_set_allocated_surround(::control::canbus::Surround* value);
  ::control::canbus::Surround* unsafe_arena_release_surround();

  private:
  const ::control::canbus::Surround& _internal_surround() const;
  ::control::canbus::Surround* _internal_mutable_surround();

  public:
  // optional .control.canbus.License license = 32 [deprecated = true];
  [[deprecated]]  bool has_license() const;
  [[deprecated]]  void clear_license() ;
  [[deprecated]] const ::control::canbus::License& license() const;
  [[deprecated]] PROTOBUF_NODISCARD ::control::canbus::License* release_license();
  [[deprecated]] ::control::canbus::License* mutable_license();
  [[deprecated]] void set_allocated_license(::control::canbus::License* value);
  [[deprecated]] void unsafe_arena_set_allocated_license(::control::canbus::License* value);
  [[deprecated]] ::control::canbus::License* unsafe_arena_release_license();

  private:
  const ::control::canbus::License& _internal_license() const;
  ::control::canbus::License* _internal_mutable_license();

  public:
  // optional .control.common.VehicleID vehicle_id = 33;
  bool has_vehicle_id() const;
  void clear_vehicle_id() ;
  const ::control::common::VehicleID& vehicle_id() const;
  PROTOBUF_NODISCARD ::control::common::VehicleID* release_vehicle_id();
  ::control::common::VehicleID* mutable_vehicle_id();
  void set_allocated_vehicle_id(::control::common::VehicleID* value);
  void unsafe_arena_set_allocated_vehicle_id(::control::common::VehicleID* value);
  ::control::common::VehicleID* unsafe_arena_release_vehicle_id();

  private:
  const ::control::common::VehicleID& _internal_vehicle_id() const;
  ::control::common::VehicleID* _internal_mutable_vehicle_id();

  public:
  // optional .control.canbus.CheckResponse check_response = 40;
  bool has_check_response() const;
  void clear_check_response() ;
  const ::control::canbus::CheckResponse& check_response() const;
  PROTOBUF_NODISCARD ::control::canbus::CheckResponse* release_check_response();
  ::control::canbus::CheckResponse* mutable_check_response();
  void set_allocated_check_response(::control::canbus::CheckResponse* value);
  void unsafe_arena_set_allocated_check_response(::control::canbus::CheckResponse* value);
  ::control::canbus::CheckResponse* unsafe_arena_release_check_response();

  private:
  const ::control::canbus::CheckResponse& _internal_check_response() const;
  ::control::canbus::CheckResponse* _internal_mutable_check_response();

  public:
  // optional .google.protobuf.Any custom_status = 41;
  bool has_custom_status() const;
  void clear_custom_status() ;
  const ::google::protobuf::Any& custom_status() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_custom_status();
  ::google::protobuf::Any* mutable_custom_status();
  void set_allocated_custom_status(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_custom_status(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_custom_status();

  private:
  const ::google::protobuf::Any& _internal_custom_status() const;
  ::google::protobuf::Any* _internal_mutable_custom_status();

  public:
  // optional int32 fuel_range_m = 7;
  bool has_fuel_range_m() const;
  void clear_fuel_range_m() ;
  ::int32_t fuel_range_m() const;
  void set_fuel_range_m(::int32_t value);

  private:
  ::int32_t _internal_fuel_range_m() const;
  void _internal_set_fuel_range_m(::int32_t value);

  public:
  // optional bool engine_started = 3;
  bool has_engine_started() const;
  void clear_engine_started() ;
  bool engine_started() const;
  void set_engine_started(bool value);

  private:
  bool _internal_engine_started() const;
  void _internal_set_engine_started(bool value);

  public:
  // optional bool parking_brake = 13;
  bool has_parking_brake() const;
  void clear_parking_brake() ;
  bool parking_brake() const;
  void set_parking_brake(bool value);

  private:
  bool _internal_parking_brake() const;
  void _internal_set_parking_brake(bool value);

  public:
  // optional bool high_beam_signal = 14 [deprecated = true];
  [[deprecated]]  bool has_high_beam_signal() const;
  [[deprecated]]  void clear_high_beam_signal() ;
  [[deprecated]] bool high_beam_signal() const;
  [[deprecated]] void set_high_beam_signal(bool value);

  private:
  bool _internal_high_beam_signal() const;
  void _internal_set_high_beam_signal(bool value);

  public:
  // optional bool low_beam_signal = 15 [deprecated = true];
  [[deprecated]]  bool has_low_beam_signal() const;
  [[deprecated]]  void clear_low_beam_signal() ;
  [[deprecated]] bool low_beam_signal() const;
  [[deprecated]] void set_low_beam_signal(bool value);

  private:
  bool _internal_low_beam_signal() const;
  void _internal_set_low_beam_signal(bool value);

  public:
  // optional bool left_turn_signal = 16 [deprecated = true];
  [[deprecated]]  bool has_left_turn_signal() const;
  [[deprecated]]  void clear_left_turn_signal() ;
  [[deprecated]] bool left_turn_signal() const;
  [[deprecated]] void set_left_turn_signal(bool value);

  private:
  bool _internal_left_turn_signal() const;
  void _internal_set_left_turn_signal(bool value);

  public:
  // optional bool right_turn_signal = 17 [deprecated = true];
  [[deprecated]]  bool has_right_turn_signal() const;
  [[deprecated]]  void clear_right_turn_signal() ;
  [[deprecated]] bool right_turn_signal() const;
  [[deprecated]] void set_right_turn_signal(bool value);

  private:
  bool _internal_right_turn_signal() const;
  void _internal_set_right_turn_signal(bool value);

  public:
  // optional bool horn = 18 [deprecated = true];
  [[deprecated]]  bool has_horn() const;
  [[deprecated]]  void clear_horn() ;
  [[deprecated]] bool horn() const;
  [[deprecated]] void set_horn(bool value);

  private:
  bool _internal_horn() const;
  void _internal_set_horn(bool value);

  public:
  // optional bool wiper = 19;
  bool has_wiper() const;
  void clear_wiper() ;
  bool wiper() const;
  void set_wiper(bool value);

  private:
  bool _internal_wiper() const;
  void _internal_set_wiper(bool value);

  public:
  // optional bool disengage_status = 20 [deprecated = true];
  [[deprecated]]  bool has_disengage_status() const;
  [[deprecated]]  void clear_disengage_status() ;
  [[deprecated]] bool disengage_status() const;
  [[deprecated]] void set_disengage_status(bool value);

  private:
  bool _internal_disengage_status() const;
  void _internal_set_disengage_status(bool value);

  public:
  // optional .control.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  bool has_driving_mode() const;
  void clear_driving_mode() ;
  ::control::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::control::canbus::Chassis_DrivingMode value);

  private:
  ::control::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::control::canbus::Chassis_DrivingMode value);

  public:
  // optional .control.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  bool has_error_code() const;
  void clear_error_code() ;
  ::control::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::control::canbus::Chassis_ErrorCode value);

  private:
  ::control::canbus::Chassis_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::control::canbus::Chassis_ErrorCode value);

  public:
  // optional double steering_timestamp = 24;
  bool has_steering_timestamp() const;
  void clear_steering_timestamp() ;
  double steering_timestamp() const;
  void set_steering_timestamp(double value);

  private:
  double _internal_steering_timestamp() const;
  void _internal_set_steering_timestamp(double value);

  public:
  // optional .control.canbus.Chassis.GearPosition gear_location = 23;
  bool has_gear_location() const;
  void clear_gear_location() ;
  ::control::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::control::canbus::Chassis_GearPosition value);

  private:
  ::control::canbus::Chassis_GearPosition _internal_gear_location() const;
  void _internal_set_gear_location(::control::canbus::Chassis_GearPosition value);

  public:
  // optional int32 chassis_error_mask = 26 [default = 0];
  bool has_chassis_error_mask() const;
  void clear_chassis_error_mask() ;
  ::int32_t chassis_error_mask() const;
  void set_chassis_error_mask(::int32_t value);

  private:
  ::int32_t _internal_chassis_error_mask() const;
  void _internal_set_chassis_error_mask(::int32_t value);

  public:
  // optional .control.canbus.Chassis.BumperEvent front_bumper_event = 38;
  bool has_front_bumper_event() const;
  void clear_front_bumper_event() ;
  ::control::canbus::Chassis_BumperEvent front_bumper_event() const;
  void set_front_bumper_event(::control::canbus::Chassis_BumperEvent value);

  private:
  ::control::canbus::Chassis_BumperEvent _internal_front_bumper_event() const;
  void _internal_set_front_bumper_event(::control::canbus::Chassis_BumperEvent value);

  public:
  // optional .control.canbus.Chassis.BumperEvent back_bumper_event = 39;
  bool has_back_bumper_event() const;
  void clear_back_bumper_event() ;
  ::control::canbus::Chassis_BumperEvent back_bumper_event() const;
  void set_back_bumper_event(::control::canbus::Chassis_BumperEvent value);

  private:
  ::control::canbus::Chassis_BumperEvent _internal_back_bumper_event() const;
  void _internal_set_back_bumper_event(::control::canbus::Chassis_BumperEvent value);

  public:
  // optional .control.canbus.Chassis.SteerMode steer_mode = 42;
  bool has_steer_mode() const;
  void clear_steer_mode() ;
  ::control::canbus::Chassis_SteerMode steer_mode() const;
  void set_steer_mode(::control::canbus::Chassis_SteerMode value);

  private:
  ::control::canbus::Chassis_SteerMode _internal_steer_mode() const;
  void _internal_set_steer_mode(::control::canbus::Chassis_SteerMode value);

  public:
  // optional int32 door_fl_status = 43;
  bool has_door_fl_status() const;
  void clear_door_fl_status() ;
  ::int32_t door_fl_status() const;
  void set_door_fl_status(::int32_t value);

  private:
  ::int32_t _internal_door_fl_status() const;
  void _internal_set_door_fl_status(::int32_t value);

  public:
  // optional int32 switch_status = 44;
  bool has_switch_status() const;
  void clear_switch_status() ;
  ::int32_t switch_status() const;
  void set_switch_status(::int32_t value);

  private:
  ::int32_t _internal_switch_status() const;
  void _internal_set_switch_status(::int32_t value);

  public:
  // optional uint32 epb_status = 45;
  bool has_epb_status() const;
  void clear_epb_status() ;
  ::uint32_t epb_status() const;
  void set_epb_status(::uint32_t value);

  private:
  ::uint32_t _internal_epb_status() const;
  void _internal_set_epb_status(::uint32_t value);

  public:
  // optional int32 mtr_trq = 46;
  bool has_mtr_trq() const;
  void clear_mtr_trq() ;
  ::int32_t mtr_trq() const;
  void set_mtr_trq(::int32_t value);

  private:
  ::int32_t _internal_mtr_trq() const;
  void _internal_set_mtr_trq(::int32_t value);

  public:
  // optional uint32 container_position = 47;
  bool has_container_position() const;
  void clear_container_position() ;
  ::uint32_t container_position() const;
  void set_container_position(::uint32_t value);

  private:
  ::uint32_t _internal_container_position() const;
  void _internal_set_container_position(::uint32_t value);

  public:
  // optional uint32 container_status = 48;
  bool has_container_status() const;
  void clear_container_status() ;
  ::uint32_t container_status() const;
  void set_container_status(::uint32_t value);

  private:
  ::uint32_t _internal_container_status() const;
  void _internal_set_container_status(::uint32_t value);

  public:
  // optional uint32 pto_status = 49;
  bool has_pto_status() const;
  void clear_pto_status() ;
  ::uint32_t pto_status() const;
  void set_pto_status(::uint32_t value);

  private:
  ::uint32_t _internal_pto_status() const;
  void _internal_set_pto_status(::uint32_t value);

  public:
  // optional double arm_angle = 50 [default = 0];
  bool has_arm_angle() const;
  void clear_arm_angle() ;
  double arm_angle() const;
  void set_arm_angle(double value);

  private:
  double _internal_arm_angle() const;
  void _internal_set_arm_angle(double value);

  public:
  // optional double shovel_angle = 51 [default = 0];
  bool has_shovel_angle() const;
  void clear_shovel_angle() ;
  double shovel_angle() const;
  void set_shovel_angle(double value);

  private:
  double _internal_shovel_angle() const;
  void _internal_set_shovel_angle(double value);

  public:
  // optional float steering_percentage_cmd = 37 [default = nan];
  bool has_steering_percentage_cmd() const;
  void clear_steering_percentage_cmd() ;
  float steering_percentage_cmd() const;
  void set_steering_percentage_cmd(float value);

  private:
  float _internal_steering_percentage_cmd() const;
  void _internal_set_steering_percentage_cmd(float value);

  public:
  // optional float engine_rpm = 4 [default = nan];
  bool has_engine_rpm() const;
  void clear_engine_rpm() ;
  float engine_rpm() const;
  void set_engine_rpm(float value);

  private:
  float _internal_engine_rpm() const;
  void _internal_set_engine_rpm(float value);

  public:
  // optional float speed_mps = 5 [default = nan];
  bool has_speed_mps() const;
  void clear_speed_mps() ;
  float speed_mps() const;
  void set_speed_mps(float value);

  private:
  float _internal_speed_mps() const;
  void _internal_set_speed_mps(float value);

  public:
  // optional float odometer_m = 6 [default = nan];
  bool has_odometer_m() const;
  void clear_odometer_m() ;
  float odometer_m() const;
  void set_odometer_m(float value);

  private:
  float _internal_odometer_m() const;
  void _internal_set_odometer_m(float value);

  public:
  // optional float throttle_percentage = 8 [default = nan];
  bool has_throttle_percentage() const;
  void clear_throttle_percentage() ;
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  private:
  float _internal_throttle_percentage() const;
  void _internal_set_throttle_percentage(float value);

  public:
  // optional float brake_percentage = 9 [default = nan];
  bool has_brake_percentage() const;
  void clear_brake_percentage() ;
  float brake_percentage() const;
  void set_brake_percentage(float value);

  private:
  float _internal_brake_percentage() const;
  void _internal_set_brake_percentage(float value);

  public:
  // optional float steering_percentage = 11 [default = nan];
  bool has_steering_percentage() const;
  void clear_steering_percentage() ;
  float steering_percentage() const;
  void set_steering_percentage(float value);

  private:
  float _internal_steering_percentage() const;
  void _internal_set_steering_percentage(float value);

  public:
  // optional float steering_torque_nm = 12 [default = nan];
  bool has_steering_torque_nm() const;
  void clear_steering_torque_nm() ;
  float steering_torque_nm() const;
  void set_steering_torque_nm(float value);

  private:
  float _internal_steering_torque_nm() const;
  void _internal_set_steering_torque_nm(float value);

  public:
  // optional int32 battery_soc_percentage = 34 [default = -1];
  bool has_battery_soc_percentage() const;
  void clear_battery_soc_percentage() ;
  ::int32_t battery_soc_percentage() const;
  void set_battery_soc_percentage(::int32_t value);

  private:
  ::int32_t _internal_battery_soc_percentage() const;
  void _internal_set_battery_soc_percentage(::int32_t value);

  public:
  // optional float throttle_percentage_cmd = 35 [default = nan];
  bool has_throttle_percentage_cmd() const;
  void clear_throttle_percentage_cmd() ;
  float throttle_percentage_cmd() const;
  void set_throttle_percentage_cmd(float value);

  private:
  float _internal_throttle_percentage_cmd() const;
  void _internal_set_throttle_percentage_cmd(float value);

  public:
  // optional float brake_percentage_cmd = 36 [default = nan];
  bool has_brake_percentage_cmd() const;
  void clear_brake_percentage_cmd() ;
  float brake_percentage_cmd() const;
  void set_brake_percentage_cmd(float value);

  private:
  float _internal_brake_percentage_cmd() const;
  void _internal_set_brake_percentage_cmd(float value);

  public:
  // @@protoc_insertion_point(class_scope:control.canbus.Chassis)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 48, 16,
      0, 9>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Chassis_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Chassis& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::Header* header_;
    ::control::common::VehicleSignal* signal_;
    ::control::canbus::ChassisGPS* chassis_gps_;
    ::control::common::EngageAdvice* engage_advice_;
    ::control::canbus::WheelSpeed* wheel_speed_;
    ::control::canbus::Surround* surround_;
    ::control::canbus::License* license_;
    ::control::common::VehicleID* vehicle_id_;
    ::control::canbus::CheckResponse* check_response_;
    ::google::protobuf::Any* custom_status_;
    ::int32_t fuel_range_m_;
    bool engine_started_;
    bool parking_brake_;
    bool high_beam_signal_;
    bool low_beam_signal_;
    bool left_turn_signal_;
    bool right_turn_signal_;
    bool horn_;
    bool wiper_;
    bool disengage_status_;
    int driving_mode_;
    int error_code_;
    double steering_timestamp_;
    int gear_location_;
    ::int32_t chassis_error_mask_;
    int front_bumper_event_;
    int back_bumper_event_;
    int steer_mode_;
    ::int32_t door_fl_status_;
    ::int32_t switch_status_;
    ::uint32_t epb_status_;
    ::int32_t mtr_trq_;
    ::uint32_t container_position_;
    ::uint32_t container_status_;
    ::uint32_t pto_status_;
    double arm_angle_;
    double shovel_angle_;
    float steering_percentage_cmd_;
    float engine_rpm_;
    float speed_mps_;
    float odometer_m_;
    float throttle_percentage_;
    float brake_percentage_;
    float steering_percentage_;
    float steering_torque_nm_;
    ::int32_t battery_soc_percentage_;
    float throttle_percentage_cmd_;
    float brake_percentage_cmd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Chassis

// optional bool engine_started = 3;
inline bool Chassis::has_engine_started() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Chassis::clear_engine_started() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.engine_started_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.engine_started)
  return _internal_engine_started();
}
inline void Chassis::set_engine_started(bool value) {
  _internal_set_engine_started(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.engine_started)
}
inline bool Chassis::_internal_engine_started() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.engine_started_;
}
inline void Chassis::_internal_set_engine_started(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.engine_started_ = value;
}

// optional float engine_rpm = 4 [default = nan];
inline bool Chassis::has_engine_rpm() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Chassis::clear_engine_rpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.engine_rpm_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.engine_rpm)
  return _internal_engine_rpm();
}
inline void Chassis::set_engine_rpm(float value) {
  _internal_set_engine_rpm(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.engine_rpm)
}
inline float Chassis::_internal_engine_rpm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.engine_rpm_;
}
inline void Chassis::_internal_set_engine_rpm(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.engine_rpm_ = value;
}

// optional float speed_mps = 5 [default = nan];
inline bool Chassis::has_speed_mps() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Chassis::clear_speed_mps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_mps_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.speed_mps)
  return _internal_speed_mps();
}
inline void Chassis::set_speed_mps(float value) {
  _internal_set_speed_mps(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.speed_mps)
}
inline float Chassis::_internal_speed_mps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_mps_;
}
inline void Chassis::_internal_set_speed_mps(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_mps_ = value;
}

// optional float odometer_m = 6 [default = nan];
inline bool Chassis::has_odometer_m() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Chassis::clear_odometer_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odometer_m_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.odometer_m)
  return _internal_odometer_m();
}
inline void Chassis::set_odometer_m(float value) {
  _internal_set_odometer_m(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.odometer_m)
}
inline float Chassis::_internal_odometer_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.odometer_m_;
}
inline void Chassis::_internal_set_odometer_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odometer_m_ = value;
}

// optional int32 fuel_range_m = 7;
inline bool Chassis::has_fuel_range_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Chassis::clear_fuel_range_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fuel_range_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.fuel_range_m)
  return _internal_fuel_range_m();
}
inline void Chassis::set_fuel_range_m(::int32_t value) {
  _internal_set_fuel_range_m(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.fuel_range_m)
}
inline ::int32_t Chassis::_internal_fuel_range_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fuel_range_m_;
}
inline void Chassis::_internal_set_fuel_range_m(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fuel_range_m_ = value;
}

// optional float throttle_percentage = 8 [default = nan];
inline bool Chassis::has_throttle_percentage() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Chassis::clear_throttle_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_percentage_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.throttle_percentage)
  return _internal_throttle_percentage();
}
inline void Chassis::set_throttle_percentage(float value) {
  _internal_set_throttle_percentage(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.throttle_percentage)
}
inline float Chassis::_internal_throttle_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_percentage_;
}
inline void Chassis::_internal_set_throttle_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_percentage_ = value;
}

// optional float brake_percentage = 9 [default = nan];
inline bool Chassis::has_brake_percentage() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Chassis::clear_brake_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_percentage_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.brake_percentage)
  return _internal_brake_percentage();
}
inline void Chassis::set_brake_percentage(float value) {
  _internal_set_brake_percentage(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.brake_percentage)
}
inline float Chassis::_internal_brake_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_percentage_;
}
inline void Chassis::_internal_set_brake_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_percentage_ = value;
}

// optional float steering_percentage = 11 [default = nan];
inline bool Chassis::has_steering_percentage() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Chassis::clear_steering_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_percentage_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.steering_percentage)
  return _internal_steering_percentage();
}
inline void Chassis::set_steering_percentage(float value) {
  _internal_set_steering_percentage(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.steering_percentage)
}
inline float Chassis::_internal_steering_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steering_percentage_;
}
inline void Chassis::_internal_set_steering_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_percentage_ = value;
}

// optional float steering_torque_nm = 12 [default = nan];
inline bool Chassis::has_steering_torque_nm() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Chassis::clear_steering_torque_nm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_torque_nm_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.steering_torque_nm)
  return _internal_steering_torque_nm();
}
inline void Chassis::set_steering_torque_nm(float value) {
  _internal_set_steering_torque_nm(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.steering_torque_nm)
}
inline float Chassis::_internal_steering_torque_nm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steering_torque_nm_;
}
inline void Chassis::_internal_set_steering_torque_nm(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_torque_nm_ = value;
}

// optional bool parking_brake = 13;
inline bool Chassis::has_parking_brake() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Chassis::clear_parking_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parking_brake_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.parking_brake)
  return _internal_parking_brake();
}
inline void Chassis::set_parking_brake(bool value) {
  _internal_set_parking_brake(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.parking_brake)
}
inline bool Chassis::_internal_parking_brake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parking_brake_;
}
inline void Chassis::_internal_set_parking_brake(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parking_brake_ = value;
}

// optional bool high_beam_signal = 14 [deprecated = true];
inline bool Chassis::has_high_beam_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Chassis::clear_high_beam_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_beam_signal_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.high_beam_signal)
  return _internal_high_beam_signal();
}
inline void Chassis::set_high_beam_signal(bool value) {
  _internal_set_high_beam_signal(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.high_beam_signal)
}
inline bool Chassis::_internal_high_beam_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.high_beam_signal_;
}
inline void Chassis::_internal_set_high_beam_signal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_beam_signal_ = value;
}

// optional bool low_beam_signal = 15 [deprecated = true];
inline bool Chassis::has_low_beam_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Chassis::clear_low_beam_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_beam_signal_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.low_beam_signal)
  return _internal_low_beam_signal();
}
inline void Chassis::set_low_beam_signal(bool value) {
  _internal_set_low_beam_signal(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.low_beam_signal)
}
inline bool Chassis::_internal_low_beam_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.low_beam_signal_;
}
inline void Chassis::_internal_set_low_beam_signal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_beam_signal_ = value;
}

// optional bool left_turn_signal = 16 [deprecated = true];
inline bool Chassis::has_left_turn_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Chassis::clear_left_turn_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.left_turn_signal_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.left_turn_signal)
  return _internal_left_turn_signal();
}
inline void Chassis::set_left_turn_signal(bool value) {
  _internal_set_left_turn_signal(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.left_turn_signal)
}
inline bool Chassis::_internal_left_turn_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.left_turn_signal_;
}
inline void Chassis::_internal_set_left_turn_signal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.left_turn_signal_ = value;
}

// optional bool right_turn_signal = 17 [deprecated = true];
inline bool Chassis::has_right_turn_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Chassis::clear_right_turn_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_turn_signal_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.right_turn_signal)
  return _internal_right_turn_signal();
}
inline void Chassis::set_right_turn_signal(bool value) {
  _internal_set_right_turn_signal(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.right_turn_signal)
}
inline bool Chassis::_internal_right_turn_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.right_turn_signal_;
}
inline void Chassis::_internal_set_right_turn_signal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_turn_signal_ = value;
}

// optional bool horn = 18 [deprecated = true];
inline bool Chassis::has_horn() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Chassis::clear_horn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horn_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.horn)
  return _internal_horn();
}
inline void Chassis::set_horn(bool value) {
  _internal_set_horn(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.horn)
}
inline bool Chassis::_internal_horn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.horn_;
}
inline void Chassis::_internal_set_horn(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horn_ = value;
}

// optional bool wiper = 19;
inline bool Chassis::has_wiper() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Chassis::clear_wiper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wiper_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.wiper)
  return _internal_wiper();
}
inline void Chassis::set_wiper(bool value) {
  _internal_set_wiper(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.wiper)
}
inline bool Chassis::_internal_wiper() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wiper_;
}
inline void Chassis::_internal_set_wiper(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wiper_ = value;
}

// optional bool disengage_status = 20 [deprecated = true];
inline bool Chassis::has_disengage_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Chassis::clear_disengage_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disengage_status_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.disengage_status)
  return _internal_disengage_status();
}
inline void Chassis::set_disengage_status(bool value) {
  _internal_set_disengage_status(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.disengage_status)
}
inline bool Chassis::_internal_disengage_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disengage_status_;
}
inline void Chassis::_internal_set_disengage_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disengage_status_ = value;
}

// optional .control.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
inline bool Chassis::has_driving_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Chassis::clear_driving_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.driving_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::control::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.driving_mode)
  return _internal_driving_mode();
}
inline void Chassis::set_driving_mode(::control::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.driving_mode)
}
inline ::control::canbus::Chassis_DrivingMode Chassis::_internal_driving_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_DrivingMode>(_impl_.driving_mode_);
}
inline void Chassis::_internal_set_driving_mode(::control::canbus::Chassis_DrivingMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_DrivingMode_IsValid(value));
  _impl_.driving_mode_ = value;
}

// optional .control.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
inline bool Chassis::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Chassis::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::control::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.error_code)
  return _internal_error_code();
}
inline void Chassis::set_error_code(::control::canbus::Chassis_ErrorCode value) {
  _internal_set_error_code(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.error_code)
}
inline ::control::canbus::Chassis_ErrorCode Chassis::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_ErrorCode>(_impl_.error_code_);
}
inline void Chassis::_internal_set_error_code(::control::canbus::Chassis_ErrorCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_ErrorCode_IsValid(value));
  _impl_.error_code_ = value;
}

// optional .control.canbus.Chassis.GearPosition gear_location = 23;
inline bool Chassis::has_gear_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Chassis::clear_gear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gear_location_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::control::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.gear_location)
  return _internal_gear_location();
}
inline void Chassis::set_gear_location(::control::canbus::Chassis_GearPosition value) {
  _internal_set_gear_location(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.gear_location)
}
inline ::control::canbus::Chassis_GearPosition Chassis::_internal_gear_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_GearPosition>(_impl_.gear_location_);
}
inline void Chassis::_internal_set_gear_location(::control::canbus::Chassis_GearPosition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_GearPosition_IsValid(value));
  _impl_.gear_location_ = value;
}

// optional double steering_timestamp = 24;
inline bool Chassis::has_steering_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Chassis::clear_steering_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.steering_timestamp)
  return _internal_steering_timestamp();
}
inline void Chassis::set_steering_timestamp(double value) {
  _internal_set_steering_timestamp(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.steering_timestamp)
}
inline double Chassis::_internal_steering_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steering_timestamp_;
}
inline void Chassis::_internal_set_steering_timestamp(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_timestamp_ = value;
}

// optional .control.common.Header header = 25;
inline bool Chassis::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::control::common::Header& Chassis::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& Chassis::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.header)
  return _internal_header();
}
inline void Chassis::unsafe_arena_set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.header)
}
inline ::control::common::Header* Chassis::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* Chassis::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::control::common::Header* Chassis::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.header_;
}
inline ::control::common::Header* Chassis::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.header)
  return _msg;
}
inline void Chassis::set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
inline bool Chassis::has_chassis_error_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Chassis::clear_chassis_error_mask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chassis_error_mask_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.chassis_error_mask)
  return _internal_chassis_error_mask();
}
inline void Chassis::set_chassis_error_mask(::int32_t value) {
  _internal_set_chassis_error_mask(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.chassis_error_mask)
}
inline ::int32_t Chassis::_internal_chassis_error_mask() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chassis_error_mask_;
}
inline void Chassis::_internal_set_chassis_error_mask(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chassis_error_mask_ = value;
}

// optional .control.common.VehicleSignal signal = 27;
inline bool Chassis::has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_ != nullptr);
  return value;
}
inline const ::control::common::VehicleSignal& Chassis::_internal_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::VehicleSignal* p = _impl_.signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::VehicleSignal&>(::control::common::_VehicleSignal_default_instance_);
}
inline const ::control::common::VehicleSignal& Chassis::signal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.signal)
  return _internal_signal();
}
inline void Chassis::unsafe_arena_set_allocated_signal(::control::common::VehicleSignal* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signal_);
  }
  _impl_.signal_ = reinterpret_cast<::control::common::VehicleSignal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.signal)
}
inline ::control::common::VehicleSignal* Chassis::release_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::VehicleSignal* released = _impl_.signal_;
  _impl_.signal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::VehicleSignal* Chassis::unsafe_arena_release_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.signal)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::VehicleSignal* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
  return temp;
}
inline ::control::common::VehicleSignal* Chassis::_internal_mutable_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signal_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::VehicleSignal>(GetArena());
    _impl_.signal_ = reinterpret_cast<::control::common::VehicleSignal*>(p);
  }
  return _impl_.signal_;
}
inline ::control::common::VehicleSignal* Chassis::mutable_signal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::VehicleSignal* _msg = _internal_mutable_signal();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.signal)
  return _msg;
}
inline void Chassis::set_allocated_signal(::control::common::VehicleSignal* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.signal_ = reinterpret_cast<::control::common::VehicleSignal*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.signal)
}

// optional .control.canbus.ChassisGPS chassis_gps = 28;
inline bool Chassis::has_chassis_gps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chassis_gps_ != nullptr);
  return value;
}
inline void Chassis::clear_chassis_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chassis_gps_ != nullptr) _impl_.chassis_gps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::control::canbus::ChassisGPS& Chassis::_internal_chassis_gps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::canbus::ChassisGPS* p = _impl_.chassis_gps_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::canbus::ChassisGPS&>(::control::canbus::_ChassisGPS_default_instance_);
}
inline const ::control::canbus::ChassisGPS& Chassis::chassis_gps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.chassis_gps)
  return _internal_chassis_gps();
}
inline void Chassis::unsafe_arena_set_allocated_chassis_gps(::control::canbus::ChassisGPS* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chassis_gps_);
  }
  _impl_.chassis_gps_ = reinterpret_cast<::control::canbus::ChassisGPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.chassis_gps)
}
inline ::control::canbus::ChassisGPS* Chassis::release_chassis_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::canbus::ChassisGPS* released = _impl_.chassis_gps_;
  _impl_.chassis_gps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::canbus::ChassisGPS* Chassis::unsafe_arena_release_chassis_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.chassis_gps)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::canbus::ChassisGPS* temp = _impl_.chassis_gps_;
  _impl_.chassis_gps_ = nullptr;
  return temp;
}
inline ::control::canbus::ChassisGPS* Chassis::_internal_mutable_chassis_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chassis_gps_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::canbus::ChassisGPS>(GetArena());
    _impl_.chassis_gps_ = reinterpret_cast<::control::canbus::ChassisGPS*>(p);
  }
  return _impl_.chassis_gps_;
}
inline ::control::canbus::ChassisGPS* Chassis::mutable_chassis_gps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::canbus::ChassisGPS* _msg = _internal_mutable_chassis_gps();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.chassis_gps)
  return _msg;
}
inline void Chassis::set_allocated_chassis_gps(::control::canbus::ChassisGPS* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chassis_gps_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.chassis_gps_ = reinterpret_cast<::control::canbus::ChassisGPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.chassis_gps)
}

// optional .control.common.EngageAdvice engage_advice = 29;
inline bool Chassis::has_engage_advice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.engage_advice_ != nullptr);
  return value;
}
inline const ::control::common::EngageAdvice& Chassis::_internal_engage_advice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::EngageAdvice* p = _impl_.engage_advice_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::EngageAdvice&>(::control::common::_EngageAdvice_default_instance_);
}
inline const ::control::common::EngageAdvice& Chassis::engage_advice() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.engage_advice)
  return _internal_engage_advice();
}
inline void Chassis::unsafe_arena_set_allocated_engage_advice(::control::common::EngageAdvice* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.engage_advice_);
  }
  _impl_.engage_advice_ = reinterpret_cast<::control::common::EngageAdvice*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.engage_advice)
}
inline ::control::common::EngageAdvice* Chassis::release_engage_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::EngageAdvice* released = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::EngageAdvice* Chassis::unsafe_arena_release_engage_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.engage_advice)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::EngageAdvice* temp = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
  return temp;
}
inline ::control::common::EngageAdvice* Chassis::_internal_mutable_engage_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.engage_advice_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::EngageAdvice>(GetArena());
    _impl_.engage_advice_ = reinterpret_cast<::control::common::EngageAdvice*>(p);
  }
  return _impl_.engage_advice_;
}
inline ::control::common::EngageAdvice* Chassis::mutable_engage_advice() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::common::EngageAdvice* _msg = _internal_mutable_engage_advice();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.engage_advice)
  return _msg;
}
inline void Chassis::set_allocated_engage_advice(::control::common::EngageAdvice* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.engage_advice_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.engage_advice_ = reinterpret_cast<::control::common::EngageAdvice*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.engage_advice)
}

// optional .control.canbus.WheelSpeed wheel_speed = 30;
inline bool Chassis::has_wheel_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wheel_speed_ != nullptr);
  return value;
}
inline void Chassis::clear_wheel_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wheel_speed_ != nullptr) _impl_.wheel_speed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::control::canbus::WheelSpeed& Chassis::_internal_wheel_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::canbus::WheelSpeed* p = _impl_.wheel_speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::canbus::WheelSpeed&>(::control::canbus::_WheelSpeed_default_instance_);
}
inline const ::control::canbus::WheelSpeed& Chassis::wheel_speed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.wheel_speed)
  return _internal_wheel_speed();
}
inline void Chassis::unsafe_arena_set_allocated_wheel_speed(::control::canbus::WheelSpeed* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wheel_speed_);
  }
  _impl_.wheel_speed_ = reinterpret_cast<::control::canbus::WheelSpeed*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.wheel_speed)
}
inline ::control::canbus::WheelSpeed* Chassis::release_wheel_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::canbus::WheelSpeed* released = _impl_.wheel_speed_;
  _impl_.wheel_speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::canbus::WheelSpeed* Chassis::unsafe_arena_release_wheel_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.wheel_speed)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::canbus::WheelSpeed* temp = _impl_.wheel_speed_;
  _impl_.wheel_speed_ = nullptr;
  return temp;
}
inline ::control::canbus::WheelSpeed* Chassis::_internal_mutable_wheel_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wheel_speed_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::canbus::WheelSpeed>(GetArena());
    _impl_.wheel_speed_ = reinterpret_cast<::control::canbus::WheelSpeed*>(p);
  }
  return _impl_.wheel_speed_;
}
inline ::control::canbus::WheelSpeed* Chassis::mutable_wheel_speed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::canbus::WheelSpeed* _msg = _internal_mutable_wheel_speed();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.wheel_speed)
  return _msg;
}
inline void Chassis::set_allocated_wheel_speed(::control::canbus::WheelSpeed* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.wheel_speed_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.wheel_speed_ = reinterpret_cast<::control::canbus::WheelSpeed*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.wheel_speed)
}

// optional .control.canbus.Surround surround = 31;
inline bool Chassis::has_surround() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.surround_ != nullptr);
  return value;
}
inline void Chassis::clear_surround() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.surround_ != nullptr) _impl_.surround_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::control::canbus::Surround& Chassis::_internal_surround() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::canbus::Surround* p = _impl_.surround_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::canbus::Surround&>(::control::canbus::_Surround_default_instance_);
}
inline const ::control::canbus::Surround& Chassis::surround() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.surround)
  return _internal_surround();
}
inline void Chassis::unsafe_arena_set_allocated_surround(::control::canbus::Surround* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.surround_);
  }
  _impl_.surround_ = reinterpret_cast<::control::canbus::Surround*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.surround)
}
inline ::control::canbus::Surround* Chassis::release_surround() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::canbus::Surround* released = _impl_.surround_;
  _impl_.surround_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::canbus::Surround* Chassis::unsafe_arena_release_surround() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.surround)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::canbus::Surround* temp = _impl_.surround_;
  _impl_.surround_ = nullptr;
  return temp;
}
inline ::control::canbus::Surround* Chassis::_internal_mutable_surround() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.surround_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::canbus::Surround>(GetArena());
    _impl_.surround_ = reinterpret_cast<::control::canbus::Surround*>(p);
  }
  return _impl_.surround_;
}
inline ::control::canbus::Surround* Chassis::mutable_surround() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::control::canbus::Surround* _msg = _internal_mutable_surround();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.surround)
  return _msg;
}
inline void Chassis::set_allocated_surround(::control::canbus::Surround* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.surround_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.surround_ = reinterpret_cast<::control::canbus::Surround*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.surround)
}

// optional .control.canbus.License license = 32 [deprecated = true];
inline bool Chassis::has_license() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.license_ != nullptr);
  return value;
}
inline void Chassis::clear_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.license_ != nullptr) _impl_.license_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::control::canbus::License& Chassis::_internal_license() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::canbus::License* p = _impl_.license_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::canbus::License&>(::control::canbus::_License_default_instance_);
}
inline const ::control::canbus::License& Chassis::license() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.license)
  return _internal_license();
}
inline void Chassis::unsafe_arena_set_allocated_license(::control::canbus::License* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.license_);
  }
  _impl_.license_ = reinterpret_cast<::control::canbus::License*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.license)
}
inline ::control::canbus::License* Chassis::release_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::canbus::License* released = _impl_.license_;
  _impl_.license_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::canbus::License* Chassis::unsafe_arena_release_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.license)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::canbus::License* temp = _impl_.license_;
  _impl_.license_ = nullptr;
  return temp;
}
inline ::control::canbus::License* Chassis::_internal_mutable_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.license_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::canbus::License>(GetArena());
    _impl_.license_ = reinterpret_cast<::control::canbus::License*>(p);
  }
  return _impl_.license_;
}
inline ::control::canbus::License* Chassis::mutable_license() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::control::canbus::License* _msg = _internal_mutable_license();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.license)
  return _msg;
}
inline void Chassis::set_allocated_license(::control::canbus::License* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.license_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.license_ = reinterpret_cast<::control::canbus::License*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.license)
}

// optional .control.common.VehicleID vehicle_id = 33;
inline bool Chassis::has_vehicle_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_id_ != nullptr);
  return value;
}
inline const ::control::common::VehicleID& Chassis::_internal_vehicle_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::VehicleID* p = _impl_.vehicle_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::VehicleID&>(::control::common::_VehicleID_default_instance_);
}
inline const ::control::common::VehicleID& Chassis::vehicle_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.vehicle_id)
  return _internal_vehicle_id();
}
inline void Chassis::unsafe_arena_set_allocated_vehicle_id(::control::common::VehicleID* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_id_);
  }
  _impl_.vehicle_id_ = reinterpret_cast<::control::common::VehicleID*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.vehicle_id)
}
inline ::control::common::VehicleID* Chassis::release_vehicle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::common::VehicleID* released = _impl_.vehicle_id_;
  _impl_.vehicle_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::VehicleID* Chassis::unsafe_arena_release_vehicle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.vehicle_id)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::common::VehicleID* temp = _impl_.vehicle_id_;
  _impl_.vehicle_id_ = nullptr;
  return temp;
}
inline ::control::common::VehicleID* Chassis::_internal_mutable_vehicle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vehicle_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::VehicleID>(GetArena());
    _impl_.vehicle_id_ = reinterpret_cast<::control::common::VehicleID*>(p);
  }
  return _impl_.vehicle_id_;
}
inline ::control::common::VehicleID* Chassis::mutable_vehicle_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::control::common::VehicleID* _msg = _internal_mutable_vehicle_id();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.vehicle_id)
  return _msg;
}
inline void Chassis::set_allocated_vehicle_id(::control::common::VehicleID* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.vehicle_id_ = reinterpret_cast<::control::common::VehicleID*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.vehicle_id)
}

// optional int32 battery_soc_percentage = 34 [default = -1];
inline bool Chassis::has_battery_soc_percentage() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Chassis::clear_battery_soc_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_soc_percentage_ = -1;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int32_t Chassis::battery_soc_percentage() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.battery_soc_percentage)
  return _internal_battery_soc_percentage();
}
inline void Chassis::set_battery_soc_percentage(::int32_t value) {
  _internal_set_battery_soc_percentage(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.battery_soc_percentage)
}
inline ::int32_t Chassis::_internal_battery_soc_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.battery_soc_percentage_;
}
inline void Chassis::_internal_set_battery_soc_percentage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_soc_percentage_ = value;
}

// optional float throttle_percentage_cmd = 35 [default = nan];
inline bool Chassis::has_throttle_percentage_cmd() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Chassis::clear_throttle_percentage_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline float Chassis::throttle_percentage_cmd() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.throttle_percentage_cmd)
  return _internal_throttle_percentage_cmd();
}
inline void Chassis::set_throttle_percentage_cmd(float value) {
  _internal_set_throttle_percentage_cmd(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.throttle_percentage_cmd)
}
inline float Chassis::_internal_throttle_percentage_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_percentage_cmd_;
}
inline void Chassis::_internal_set_throttle_percentage_cmd(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_percentage_cmd_ = value;
}

// optional float brake_percentage_cmd = 36 [default = nan];
inline bool Chassis::has_brake_percentage_cmd() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Chassis::clear_brake_percentage_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline float Chassis::brake_percentage_cmd() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.brake_percentage_cmd)
  return _internal_brake_percentage_cmd();
}
inline void Chassis::set_brake_percentage_cmd(float value) {
  _internal_set_brake_percentage_cmd(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.brake_percentage_cmd)
}
inline float Chassis::_internal_brake_percentage_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_percentage_cmd_;
}
inline void Chassis::_internal_set_brake_percentage_cmd(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_percentage_cmd_ = value;
}

// optional float steering_percentage_cmd = 37 [default = nan];
inline bool Chassis::has_steering_percentage_cmd() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Chassis::clear_steering_percentage_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline float Chassis::steering_percentage_cmd() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.steering_percentage_cmd)
  return _internal_steering_percentage_cmd();
}
inline void Chassis::set_steering_percentage_cmd(float value) {
  _internal_set_steering_percentage_cmd(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.steering_percentage_cmd)
}
inline float Chassis::_internal_steering_percentage_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steering_percentage_cmd_;
}
inline void Chassis::_internal_set_steering_percentage_cmd(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_percentage_cmd_ = value;
}

// optional .control.canbus.Chassis.BumperEvent front_bumper_event = 38;
inline bool Chassis::has_front_bumper_event() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Chassis::clear_front_bumper_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.front_bumper_event_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::control::canbus::Chassis_BumperEvent Chassis::front_bumper_event() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.front_bumper_event)
  return _internal_front_bumper_event();
}
inline void Chassis::set_front_bumper_event(::control::canbus::Chassis_BumperEvent value) {
  _internal_set_front_bumper_event(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.front_bumper_event)
}
inline ::control::canbus::Chassis_BumperEvent Chassis::_internal_front_bumper_event() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_BumperEvent>(_impl_.front_bumper_event_);
}
inline void Chassis::_internal_set_front_bumper_event(::control::canbus::Chassis_BumperEvent value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_BumperEvent_IsValid(value));
  _impl_.front_bumper_event_ = value;
}

// optional .control.canbus.Chassis.BumperEvent back_bumper_event = 39;
inline bool Chassis::has_back_bumper_event() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Chassis::clear_back_bumper_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.back_bumper_event_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::control::canbus::Chassis_BumperEvent Chassis::back_bumper_event() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.back_bumper_event)
  return _internal_back_bumper_event();
}
inline void Chassis::set_back_bumper_event(::control::canbus::Chassis_BumperEvent value) {
  _internal_set_back_bumper_event(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.back_bumper_event)
}
inline ::control::canbus::Chassis_BumperEvent Chassis::_internal_back_bumper_event() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_BumperEvent>(_impl_.back_bumper_event_);
}
inline void Chassis::_internal_set_back_bumper_event(::control::canbus::Chassis_BumperEvent value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_BumperEvent_IsValid(value));
  _impl_.back_bumper_event_ = value;
}

// optional .control.canbus.CheckResponse check_response = 40;
inline bool Chassis::has_check_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.check_response_ != nullptr);
  return value;
}
inline void Chassis::clear_check_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.check_response_ != nullptr) _impl_.check_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::control::canbus::CheckResponse& Chassis::_internal_check_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::canbus::CheckResponse* p = _impl_.check_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::canbus::CheckResponse&>(::control::canbus::_CheckResponse_default_instance_);
}
inline const ::control::canbus::CheckResponse& Chassis::check_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.check_response)
  return _internal_check_response();
}
inline void Chassis::unsafe_arena_set_allocated_check_response(::control::canbus::CheckResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.check_response_);
  }
  _impl_.check_response_ = reinterpret_cast<::control::canbus::CheckResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.check_response)
}
inline ::control::canbus::CheckResponse* Chassis::release_check_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::canbus::CheckResponse* released = _impl_.check_response_;
  _impl_.check_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::canbus::CheckResponse* Chassis::unsafe_arena_release_check_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.check_response)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::canbus::CheckResponse* temp = _impl_.check_response_;
  _impl_.check_response_ = nullptr;
  return temp;
}
inline ::control::canbus::CheckResponse* Chassis::_internal_mutable_check_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.check_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::canbus::CheckResponse>(GetArena());
    _impl_.check_response_ = reinterpret_cast<::control::canbus::CheckResponse*>(p);
  }
  return _impl_.check_response_;
}
inline ::control::canbus::CheckResponse* Chassis::mutable_check_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::control::canbus::CheckResponse* _msg = _internal_mutable_check_response();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.check_response)
  return _msg;
}
inline void Chassis::set_allocated_check_response(::control::canbus::CheckResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.check_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.check_response_ = reinterpret_cast<::control::canbus::CheckResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.check_response)
}

// optional .google.protobuf.Any custom_status = 41;
inline bool Chassis::has_custom_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_status_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& Chassis::_internal_custom_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.custom_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& Chassis::custom_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.custom_status)
  return _internal_custom_status();
}
inline void Chassis::unsafe_arena_set_allocated_custom_status(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.custom_status_);
  }
  _impl_.custom_status_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Chassis.custom_status)
}
inline ::google::protobuf::Any* Chassis::release_custom_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Any* released = _impl_.custom_status_;
  _impl_.custom_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* Chassis::unsafe_arena_release_custom_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Chassis.custom_status)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Any* temp = _impl_.custom_status_;
  _impl_.custom_status_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Chassis::_internal_mutable_custom_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.custom_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.custom_status_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.custom_status_;
}
inline ::google::protobuf::Any* Chassis::mutable_custom_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::google::protobuf::Any* _msg = _internal_mutable_custom_status();
  // @@protoc_insertion_point(field_mutable:control.canbus.Chassis.custom_status)
  return _msg;
}
inline void Chassis::set_allocated_custom_status(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.custom_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.custom_status_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Chassis.custom_status)
}

// optional .control.canbus.Chassis.SteerMode steer_mode = 42;
inline bool Chassis::has_steer_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Chassis::clear_steer_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::control::canbus::Chassis_SteerMode Chassis::steer_mode() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.steer_mode)
  return _internal_steer_mode();
}
inline void Chassis::set_steer_mode(::control::canbus::Chassis_SteerMode value) {
  _internal_set_steer_mode(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.steer_mode)
}
inline ::control::canbus::Chassis_SteerMode Chassis::_internal_steer_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_SteerMode>(_impl_.steer_mode_);
}
inline void Chassis::_internal_set_steer_mode(::control::canbus::Chassis_SteerMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_SteerMode_IsValid(value));
  _impl_.steer_mode_ = value;
}

// optional int32 door_fl_status = 43;
inline bool Chassis::has_door_fl_status() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Chassis::clear_door_fl_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.door_fl_status_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::int32_t Chassis::door_fl_status() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.door_fl_status)
  return _internal_door_fl_status();
}
inline void Chassis::set_door_fl_status(::int32_t value) {
  _internal_set_door_fl_status(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.door_fl_status)
}
inline ::int32_t Chassis::_internal_door_fl_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.door_fl_status_;
}
inline void Chassis::_internal_set_door_fl_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.door_fl_status_ = value;
}

// optional int32 switch_status = 44;
inline bool Chassis::has_switch_status() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Chassis::clear_switch_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_status_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::int32_t Chassis::switch_status() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.switch_status)
  return _internal_switch_status();
}
inline void Chassis::set_switch_status(::int32_t value) {
  _internal_set_switch_status(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.switch_status)
}
inline ::int32_t Chassis::_internal_switch_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.switch_status_;
}
inline void Chassis::_internal_set_switch_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_status_ = value;
}

// optional uint32 epb_status = 45;
inline bool Chassis::has_epb_status() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Chassis::clear_epb_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epb_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::uint32_t Chassis::epb_status() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.epb_status)
  return _internal_epb_status();
}
inline void Chassis::set_epb_status(::uint32_t value) {
  _internal_set_epb_status(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.epb_status)
}
inline ::uint32_t Chassis::_internal_epb_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epb_status_;
}
inline void Chassis::_internal_set_epb_status(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epb_status_ = value;
}

// optional int32 mtr_trq = 46;
inline bool Chassis::has_mtr_trq() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Chassis::clear_mtr_trq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mtr_trq_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int32_t Chassis::mtr_trq() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.mtr_trq)
  return _internal_mtr_trq();
}
inline void Chassis::set_mtr_trq(::int32_t value) {
  _internal_set_mtr_trq(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.mtr_trq)
}
inline ::int32_t Chassis::_internal_mtr_trq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mtr_trq_;
}
inline void Chassis::_internal_set_mtr_trq(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mtr_trq_ = value;
}

// optional uint32 container_position = 47;
inline bool Chassis::has_container_position() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Chassis::clear_container_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_position_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::uint32_t Chassis::container_position() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.container_position)
  return _internal_container_position();
}
inline void Chassis::set_container_position(::uint32_t value) {
  _internal_set_container_position(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.container_position)
}
inline ::uint32_t Chassis::_internal_container_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.container_position_;
}
inline void Chassis::_internal_set_container_position(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_position_ = value;
}

// optional uint32 container_status = 48;
inline bool Chassis::has_container_status() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Chassis::clear_container_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_status_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::uint32_t Chassis::container_status() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.container_status)
  return _internal_container_status();
}
inline void Chassis::set_container_status(::uint32_t value) {
  _internal_set_container_status(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.container_status)
}
inline ::uint32_t Chassis::_internal_container_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.container_status_;
}
inline void Chassis::_internal_set_container_status(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_status_ = value;
}

// optional uint32 pto_status = 49;
inline bool Chassis::has_pto_status() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Chassis::clear_pto_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pto_status_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::uint32_t Chassis::pto_status() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.pto_status)
  return _internal_pto_status();
}
inline void Chassis::set_pto_status(::uint32_t value) {
  _internal_set_pto_status(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.pto_status)
}
inline ::uint32_t Chassis::_internal_pto_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pto_status_;
}
inline void Chassis::_internal_set_pto_status(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pto_status_ = value;
}

// optional double arm_angle = 50 [default = 0];
inline bool Chassis::has_arm_angle() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Chassis::clear_arm_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arm_angle_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline double Chassis::arm_angle() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.arm_angle)
  return _internal_arm_angle();
}
inline void Chassis::set_arm_angle(double value) {
  _internal_set_arm_angle(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.arm_angle)
}
inline double Chassis::_internal_arm_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.arm_angle_;
}
inline void Chassis::_internal_set_arm_angle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arm_angle_ = value;
}

// optional double shovel_angle = 51 [default = 0];
inline bool Chassis::has_shovel_angle() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Chassis::clear_shovel_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shovel_angle_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline double Chassis::shovel_angle() const {
  // @@protoc_insertion_point(field_get:control.canbus.Chassis.shovel_angle)
  return _internal_shovel_angle();
}
inline void Chassis::set_shovel_angle(double value) {
  _internal_set_shovel_angle(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.canbus.Chassis.shovel_angle)
}
inline double Chassis::_internal_shovel_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shovel_angle_;
}
inline void Chassis::_internal_set_shovel_angle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shovel_angle_ = value;
}

// -------------------------------------------------------------------

// ChassisGPS

// optional double latitude = 1;
inline bool ChassisGPS::has_latitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChassisGPS::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ChassisGPS::latitude() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.latitude)
  return _internal_latitude();
}
inline void ChassisGPS::set_latitude(double value) {
  _internal_set_latitude(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.latitude)
}
inline double ChassisGPS::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void ChassisGPS::_internal_set_latitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// optional double longitude = 2;
inline bool ChassisGPS::has_longitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChassisGPS::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ChassisGPS::longitude() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.longitude)
  return _internal_longitude();
}
inline void ChassisGPS::set_longitude(double value) {
  _internal_set_longitude(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.longitude)
}
inline double ChassisGPS::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void ChassisGPS::_internal_set_longitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// optional bool gps_valid = 3;
inline bool ChassisGPS::has_gps_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ChassisGPS::clear_gps_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ChassisGPS::gps_valid() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.gps_valid)
  return _internal_gps_valid();
}
inline void ChassisGPS::set_gps_valid(bool value) {
  _internal_set_gps_valid(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.gps_valid)
}
inline bool ChassisGPS::_internal_gps_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gps_valid_;
}
inline void ChassisGPS::_internal_set_gps_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_valid_ = value;
}

// optional int32 year = 4;
inline bool ChassisGPS::has_year() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ChassisGPS::clear_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.year_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ChassisGPS::year() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.year)
  return _internal_year();
}
inline void ChassisGPS::set_year(::int32_t value) {
  _internal_set_year(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.year)
}
inline ::int32_t ChassisGPS::_internal_year() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.year_;
}
inline void ChassisGPS::_internal_set_year(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.year_ = value;
}

// optional int32 month = 5;
inline bool ChassisGPS::has_month() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChassisGPS::clear_month() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.month_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ChassisGPS::month() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.month)
  return _internal_month();
}
inline void ChassisGPS::set_month(::int32_t value) {
  _internal_set_month(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.month)
}
inline ::int32_t ChassisGPS::_internal_month() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.month_;
}
inline void ChassisGPS::_internal_set_month(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.month_ = value;
}

// optional int32 day = 6;
inline bool ChassisGPS::has_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ChassisGPS::clear_day() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.day_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ChassisGPS::day() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.day)
  return _internal_day();
}
inline void ChassisGPS::set_day(::int32_t value) {
  _internal_set_day(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.day)
}
inline ::int32_t ChassisGPS::_internal_day() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.day_;
}
inline void ChassisGPS::_internal_set_day(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.day_ = value;
}

// optional int32 hours = 7;
inline bool ChassisGPS::has_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ChassisGPS::clear_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hours_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ChassisGPS::hours() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.hours)
  return _internal_hours();
}
inline void ChassisGPS::set_hours(::int32_t value) {
  _internal_set_hours(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.hours)
}
inline ::int32_t ChassisGPS::_internal_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hours_;
}
inline void ChassisGPS::_internal_set_hours(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hours_ = value;
}

// optional int32 minutes = 8;
inline bool ChassisGPS::has_minutes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ChassisGPS::clear_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minutes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t ChassisGPS::minutes() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.minutes)
  return _internal_minutes();
}
inline void ChassisGPS::set_minutes(::int32_t value) {
  _internal_set_minutes(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.minutes)
}
inline ::int32_t ChassisGPS::_internal_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minutes_;
}
inline void ChassisGPS::_internal_set_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minutes_ = value;
}

// optional int32 seconds = 9;
inline bool ChassisGPS::has_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ChassisGPS::clear_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t ChassisGPS::seconds() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.seconds)
  return _internal_seconds();
}
inline void ChassisGPS::set_seconds(::int32_t value) {
  _internal_set_seconds(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.seconds)
}
inline ::int32_t ChassisGPS::_internal_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seconds_;
}
inline void ChassisGPS::_internal_set_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seconds_ = value;
}

// optional double compass_direction = 10;
inline bool ChassisGPS::has_compass_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ChassisGPS::clear_compass_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compass_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ChassisGPS::compass_direction() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.compass_direction)
  return _internal_compass_direction();
}
inline void ChassisGPS::set_compass_direction(double value) {
  _internal_set_compass_direction(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.compass_direction)
}
inline double ChassisGPS::_internal_compass_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compass_direction_;
}
inline void ChassisGPS::_internal_set_compass_direction(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compass_direction_ = value;
}

// optional double pdop = 11;
inline bool ChassisGPS::has_pdop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ChassisGPS::clear_pdop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pdop_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ChassisGPS::pdop() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.pdop)
  return _internal_pdop();
}
inline void ChassisGPS::set_pdop(double value) {
  _internal_set_pdop(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.pdop)
}
inline double ChassisGPS::_internal_pdop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pdop_;
}
inline void ChassisGPS::_internal_set_pdop(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pdop_ = value;
}

// optional bool is_gps_fault = 12;
inline bool ChassisGPS::has_is_gps_fault() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ChassisGPS::clear_is_gps_fault() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_gps_fault_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ChassisGPS::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.is_gps_fault)
  return _internal_is_gps_fault();
}
inline void ChassisGPS::set_is_gps_fault(bool value) {
  _internal_set_is_gps_fault(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.is_gps_fault)
}
inline bool ChassisGPS::_internal_is_gps_fault() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_gps_fault_;
}
inline void ChassisGPS::_internal_set_is_gps_fault(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_gps_fault_ = value;
}

// optional bool is_inferred = 13;
inline bool ChassisGPS::has_is_inferred() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ChassisGPS::clear_is_inferred() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_inferred_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ChassisGPS::is_inferred() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.is_inferred)
  return _internal_is_inferred();
}
inline void ChassisGPS::set_is_inferred(bool value) {
  _internal_set_is_inferred(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.is_inferred)
}
inline bool ChassisGPS::_internal_is_inferred() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_inferred_;
}
inline void ChassisGPS::_internal_set_is_inferred(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_inferred_ = value;
}

// optional double altitude = 14;
inline bool ChassisGPS::has_altitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ChassisGPS::clear_altitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double ChassisGPS::altitude() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.altitude)
  return _internal_altitude();
}
inline void ChassisGPS::set_altitude(double value) {
  _internal_set_altitude(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.altitude)
}
inline double ChassisGPS::_internal_altitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.altitude_;
}
inline void ChassisGPS::_internal_set_altitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = value;
}

// optional double heading = 15;
inline bool ChassisGPS::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ChassisGPS::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double ChassisGPS::heading() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.heading)
  return _internal_heading();
}
inline void ChassisGPS::set_heading(double value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.heading)
}
inline double ChassisGPS::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void ChassisGPS::_internal_set_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// optional double hdop = 16;
inline bool ChassisGPS::has_hdop() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ChassisGPS::clear_hdop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hdop_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double ChassisGPS::hdop() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.hdop)
  return _internal_hdop();
}
inline void ChassisGPS::set_hdop(double value) {
  _internal_set_hdop(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.hdop)
}
inline double ChassisGPS::_internal_hdop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hdop_;
}
inline void ChassisGPS::_internal_set_hdop(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hdop_ = value;
}

// optional double vdop = 17;
inline bool ChassisGPS::has_vdop() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ChassisGPS::clear_vdop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdop_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double ChassisGPS::vdop() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.vdop)
  return _internal_vdop();
}
inline void ChassisGPS::set_vdop(double value) {
  _internal_set_vdop(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.vdop)
}
inline double ChassisGPS::_internal_vdop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vdop_;
}
inline void ChassisGPS::_internal_set_vdop(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdop_ = value;
}

// optional .control.canbus.GpsQuality quality = 18;
inline bool ChassisGPS::has_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ChassisGPS::clear_quality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::control::canbus::GpsQuality ChassisGPS::quality() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.quality)
  return _internal_quality();
}
inline void ChassisGPS::set_quality(::control::canbus::GpsQuality value) {
  _internal_set_quality(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.quality)
}
inline ::control::canbus::GpsQuality ChassisGPS::_internal_quality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::GpsQuality>(_impl_.quality_);
}
inline void ChassisGPS::_internal_set_quality(::control::canbus::GpsQuality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::GpsQuality_IsValid(value));
  _impl_.quality_ = value;
}

// optional int32 num_satellites = 19;
inline bool ChassisGPS::has_num_satellites() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ChassisGPS::clear_num_satellites() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_satellites_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t ChassisGPS::num_satellites() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.num_satellites)
  return _internal_num_satellites();
}
inline void ChassisGPS::set_num_satellites(::int32_t value) {
  _internal_set_num_satellites(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.num_satellites)
}
inline ::int32_t ChassisGPS::_internal_num_satellites() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_satellites_;
}
inline void ChassisGPS::_internal_set_num_satellites(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_satellites_ = value;
}

// optional double gps_speed = 20;
inline bool ChassisGPS::has_gps_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ChassisGPS::clear_gps_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double ChassisGPS::gps_speed() const {
  // @@protoc_insertion_point(field_get:control.canbus.ChassisGPS.gps_speed)
  return _internal_gps_speed();
}
inline void ChassisGPS::set_gps_speed(double value) {
  _internal_set_gps_speed(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.canbus.ChassisGPS.gps_speed)
}
inline double ChassisGPS::_internal_gps_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gps_speed_;
}
inline void ChassisGPS::_internal_set_gps_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_speed_ = value;
}

// -------------------------------------------------------------------

// WheelSpeed

// optional bool is_wheel_spd_rr_valid = 1 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_rr_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void WheelSpeed::clear_is_wheel_spd_rr_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_rr_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool WheelSpeed::is_wheel_spd_rr_valid() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.is_wheel_spd_rr_valid)
  return _internal_is_wheel_spd_rr_valid();
}
inline void WheelSpeed::set_is_wheel_spd_rr_valid(bool value) {
  _internal_set_is_wheel_spd_rr_valid(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.is_wheel_spd_rr_valid)
}
inline bool WheelSpeed::_internal_is_wheel_spd_rr_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_wheel_spd_rr_valid_;
}
inline void WheelSpeed::_internal_set_is_wheel_spd_rr_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_rr_valid_ = value;
}

// optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_rr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_direction_rr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_direction_rr_ = 3;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rr() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_direction_rr)
  return _internal_wheel_direction_rr();
}
inline void WheelSpeed::set_wheel_direction_rr(::control::canbus::WheelSpeed_WheelSpeedType value) {
  _internal_set_wheel_direction_rr(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_direction_rr)
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::_internal_wheel_direction_rr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(_impl_.wheel_direction_rr_);
}
inline void WheelSpeed::_internal_set_wheel_direction_rr(::control::canbus::WheelSpeed_WheelSpeedType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  _impl_.wheel_direction_rr_ = value;
}

// optional double wheel_spd_rr = 3 [default = 0];
inline bool WheelSpeed::has_wheel_spd_rr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_spd_rr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_rr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double WheelSpeed::wheel_spd_rr() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_spd_rr)
  return _internal_wheel_spd_rr();
}
inline void WheelSpeed::set_wheel_spd_rr(double value) {
  _internal_set_wheel_spd_rr(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_spd_rr)
}
inline double WheelSpeed::_internal_wheel_spd_rr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wheel_spd_rr_;
}
inline void WheelSpeed::_internal_set_wheel_spd_rr(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_rr_ = value;
}

// optional bool is_wheel_spd_rl_valid = 4 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_rl_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void WheelSpeed::clear_is_wheel_spd_rl_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_rl_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool WheelSpeed::is_wheel_spd_rl_valid() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.is_wheel_spd_rl_valid)
  return _internal_is_wheel_spd_rl_valid();
}
inline void WheelSpeed::set_is_wheel_spd_rl_valid(bool value) {
  _internal_set_is_wheel_spd_rl_valid(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.is_wheel_spd_rl_valid)
}
inline bool WheelSpeed::_internal_is_wheel_spd_rl_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_wheel_spd_rl_valid_;
}
inline void WheelSpeed::_internal_set_is_wheel_spd_rl_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_rl_valid_ = value;
}

// optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_rl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_direction_rl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_direction_rl_ = 3;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rl() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_direction_rl)
  return _internal_wheel_direction_rl();
}
inline void WheelSpeed::set_wheel_direction_rl(::control::canbus::WheelSpeed_WheelSpeedType value) {
  _internal_set_wheel_direction_rl(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_direction_rl)
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::_internal_wheel_direction_rl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(_impl_.wheel_direction_rl_);
}
inline void WheelSpeed::_internal_set_wheel_direction_rl(::control::canbus::WheelSpeed_WheelSpeedType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  _impl_.wheel_direction_rl_ = value;
}

// optional double wheel_spd_rl = 6 [default = 0];
inline bool WheelSpeed::has_wheel_spd_rl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_spd_rl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_rl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double WheelSpeed::wheel_spd_rl() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_spd_rl)
  return _internal_wheel_spd_rl();
}
inline void WheelSpeed::set_wheel_spd_rl(double value) {
  _internal_set_wheel_spd_rl(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_spd_rl)
}
inline double WheelSpeed::_internal_wheel_spd_rl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wheel_spd_rl_;
}
inline void WheelSpeed::_internal_set_wheel_spd_rl(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_rl_ = value;
}

// optional bool is_wheel_spd_fr_valid = 7 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_fr_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void WheelSpeed::clear_is_wheel_spd_fr_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_fr_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool WheelSpeed::is_wheel_spd_fr_valid() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.is_wheel_spd_fr_valid)
  return _internal_is_wheel_spd_fr_valid();
}
inline void WheelSpeed::set_is_wheel_spd_fr_valid(bool value) {
  _internal_set_is_wheel_spd_fr_valid(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.is_wheel_spd_fr_valid)
}
inline bool WheelSpeed::_internal_is_wheel_spd_fr_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_wheel_spd_fr_valid_;
}
inline void WheelSpeed::_internal_set_is_wheel_spd_fr_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_fr_valid_ = value;
}

// optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_fr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_direction_fr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_direction_fr_ = 3;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fr() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_direction_fr)
  return _internal_wheel_direction_fr();
}
inline void WheelSpeed::set_wheel_direction_fr(::control::canbus::WheelSpeed_WheelSpeedType value) {
  _internal_set_wheel_direction_fr(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_direction_fr)
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::_internal_wheel_direction_fr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(_impl_.wheel_direction_fr_);
}
inline void WheelSpeed::_internal_set_wheel_direction_fr(::control::canbus::WheelSpeed_WheelSpeedType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  _impl_.wheel_direction_fr_ = value;
}

// optional double wheel_spd_fr = 9 [default = 0];
inline bool WheelSpeed::has_wheel_spd_fr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_spd_fr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_fr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double WheelSpeed::wheel_spd_fr() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_spd_fr)
  return _internal_wheel_spd_fr();
}
inline void WheelSpeed::set_wheel_spd_fr(double value) {
  _internal_set_wheel_spd_fr(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_spd_fr)
}
inline double WheelSpeed::_internal_wheel_spd_fr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wheel_spd_fr_;
}
inline void WheelSpeed::_internal_set_wheel_spd_fr(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_fr_ = value;
}

// optional bool is_wheel_spd_fl_valid = 10 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_fl_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void WheelSpeed::clear_is_wheel_spd_fl_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_fl_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool WheelSpeed::is_wheel_spd_fl_valid() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.is_wheel_spd_fl_valid)
  return _internal_is_wheel_spd_fl_valid();
}
inline void WheelSpeed::set_is_wheel_spd_fl_valid(bool value) {
  _internal_set_is_wheel_spd_fl_valid(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.is_wheel_spd_fl_valid)
}
inline bool WheelSpeed::_internal_is_wheel_spd_fl_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_wheel_spd_fl_valid_;
}
inline void WheelSpeed::_internal_set_is_wheel_spd_fl_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_wheel_spd_fl_valid_ = value;
}

// optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_direction_fl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_direction_fl_ = 3;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fl() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_direction_fl)
  return _internal_wheel_direction_fl();
}
inline void WheelSpeed::set_wheel_direction_fl(::control::canbus::WheelSpeed_WheelSpeedType value) {
  _internal_set_wheel_direction_fl(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_direction_fl)
}
inline ::control::canbus::WheelSpeed_WheelSpeedType WheelSpeed::_internal_wheel_direction_fl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(_impl_.wheel_direction_fl_);
}
inline void WheelSpeed::_internal_set_wheel_direction_fl(::control::canbus::WheelSpeed_WheelSpeedType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  _impl_.wheel_direction_fl_ = value;
}

// optional double wheel_spd_fl = 12 [default = 0];
inline bool WheelSpeed::has_wheel_spd_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void WheelSpeed::clear_wheel_spd_fl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_fl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double WheelSpeed::wheel_spd_fl() const {
  // @@protoc_insertion_point(field_get:control.canbus.WheelSpeed.wheel_spd_fl)
  return _internal_wheel_spd_fl();
}
inline void WheelSpeed::set_wheel_spd_fl(double value) {
  _internal_set_wheel_spd_fl(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.canbus.WheelSpeed.wheel_spd_fl)
}
inline double WheelSpeed::_internal_wheel_spd_fl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wheel_spd_fl_;
}
inline void WheelSpeed::_internal_set_wheel_spd_fl(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_spd_fl_ = value;
}

// -------------------------------------------------------------------

// Sonar

// optional double range = 1;
inline bool Sonar::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Sonar::clear_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Sonar::range() const {
  // @@protoc_insertion_point(field_get:control.canbus.Sonar.range)
  return _internal_range();
}
inline void Sonar::set_range(double value) {
  _internal_set_range(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.canbus.Sonar.range)
}
inline double Sonar::_internal_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.range_;
}
inline void Sonar::_internal_set_range(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_ = value;
}

// optional .control.common.Point3D translation = 2;
inline bool Sonar::has_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.translation_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Sonar::_internal_translation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Sonar::translation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Sonar.translation)
  return _internal_translation();
}
inline void Sonar::unsafe_arena_set_allocated_translation(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Sonar.translation)
}
inline ::control::common::Point3D* Sonar::release_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Point3D* released = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Sonar::unsafe_arena_release_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Sonar.translation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Point3D* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Sonar::_internal_mutable_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.translation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.translation_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.translation_;
}
inline ::control::common::Point3D* Sonar::mutable_translation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::Point3D* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:control.canbus.Sonar.translation)
  return _msg;
}
inline void Sonar::set_allocated_translation(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.translation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.translation_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Sonar.translation)
}

// optional .control.common.Quaternion rotation = 3;
inline bool Sonar::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline const ::control::common::Quaternion& Sonar::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Quaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Quaternion&>(::control::common::_Quaternion_default_instance_);
}
inline const ::control::common::Quaternion& Sonar::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Sonar.rotation)
  return _internal_rotation();
}
inline void Sonar::unsafe_arena_set_allocated_rotation(::control::common::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::control::common::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.canbus.Sonar.rotation)
}
inline ::control::common::Quaternion* Sonar::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Quaternion* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Quaternion* Sonar::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.Sonar.rotation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::control::common::Quaternion* Sonar::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Quaternion>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::control::common::Quaternion*>(p);
  }
  return _impl_.rotation_;
}
inline ::control::common::Quaternion* Sonar::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:control.canbus.Sonar.rotation)
  return _msg;
}
inline void Sonar::set_allocated_rotation(::control::common::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rotation_ = reinterpret_cast<::control::common::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.canbus.Sonar.rotation)
}

// -------------------------------------------------------------------

// Surround

// optional bool cross_traffic_alert_left = 1;
inline bool Surround::has_cross_traffic_alert_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Surround::clear_cross_traffic_alert_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_left_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Surround::cross_traffic_alert_left() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.cross_traffic_alert_left)
  return _internal_cross_traffic_alert_left();
}
inline void Surround::set_cross_traffic_alert_left(bool value) {
  _internal_set_cross_traffic_alert_left(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.cross_traffic_alert_left)
}
inline bool Surround::_internal_cross_traffic_alert_left() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cross_traffic_alert_left_;
}
inline void Surround::_internal_set_cross_traffic_alert_left(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_left_ = value;
}

// optional bool cross_traffic_alert_left_enabled = 2;
inline bool Surround::has_cross_traffic_alert_left_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Surround::clear_cross_traffic_alert_left_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_left_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Surround::cross_traffic_alert_left_enabled() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.cross_traffic_alert_left_enabled)
  return _internal_cross_traffic_alert_left_enabled();
}
inline void Surround::set_cross_traffic_alert_left_enabled(bool value) {
  _internal_set_cross_traffic_alert_left_enabled(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.cross_traffic_alert_left_enabled)
}
inline bool Surround::_internal_cross_traffic_alert_left_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cross_traffic_alert_left_enabled_;
}
inline void Surround::_internal_set_cross_traffic_alert_left_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_left_enabled_ = value;
}

// optional bool blind_spot_left_alert = 3;
inline bool Surround::has_blind_spot_left_alert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Surround::clear_blind_spot_left_alert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_left_alert_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Surround::blind_spot_left_alert() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.blind_spot_left_alert)
  return _internal_blind_spot_left_alert();
}
inline void Surround::set_blind_spot_left_alert(bool value) {
  _internal_set_blind_spot_left_alert(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.blind_spot_left_alert)
}
inline bool Surround::_internal_blind_spot_left_alert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blind_spot_left_alert_;
}
inline void Surround::_internal_set_blind_spot_left_alert(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_left_alert_ = value;
}

// optional bool blind_spot_left_alert_enabled = 4;
inline bool Surround::has_blind_spot_left_alert_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Surround::clear_blind_spot_left_alert_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_left_alert_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Surround::blind_spot_left_alert_enabled() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.blind_spot_left_alert_enabled)
  return _internal_blind_spot_left_alert_enabled();
}
inline void Surround::set_blind_spot_left_alert_enabled(bool value) {
  _internal_set_blind_spot_left_alert_enabled(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.blind_spot_left_alert_enabled)
}
inline bool Surround::_internal_blind_spot_left_alert_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blind_spot_left_alert_enabled_;
}
inline void Surround::_internal_set_blind_spot_left_alert_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_left_alert_enabled_ = value;
}

// optional bool cross_traffic_alert_right = 5;
inline bool Surround::has_cross_traffic_alert_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Surround::clear_cross_traffic_alert_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_right_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Surround::cross_traffic_alert_right() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.cross_traffic_alert_right)
  return _internal_cross_traffic_alert_right();
}
inline void Surround::set_cross_traffic_alert_right(bool value) {
  _internal_set_cross_traffic_alert_right(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.cross_traffic_alert_right)
}
inline bool Surround::_internal_cross_traffic_alert_right() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cross_traffic_alert_right_;
}
inline void Surround::_internal_set_cross_traffic_alert_right(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_right_ = value;
}

// optional bool cross_traffic_alert_right_enabled = 6;
inline bool Surround::has_cross_traffic_alert_right_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Surround::clear_cross_traffic_alert_right_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_right_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Surround::cross_traffic_alert_right_enabled() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.cross_traffic_alert_right_enabled)
  return _internal_cross_traffic_alert_right_enabled();
}
inline void Surround::set_cross_traffic_alert_right_enabled(bool value) {
  _internal_set_cross_traffic_alert_right_enabled(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.cross_traffic_alert_right_enabled)
}
inline bool Surround::_internal_cross_traffic_alert_right_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cross_traffic_alert_right_enabled_;
}
inline void Surround::_internal_set_cross_traffic_alert_right_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_traffic_alert_right_enabled_ = value;
}

// optional bool blind_spot_right_alert = 7;
inline bool Surround::has_blind_spot_right_alert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Surround::clear_blind_spot_right_alert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_right_alert_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Surround::blind_spot_right_alert() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.blind_spot_right_alert)
  return _internal_blind_spot_right_alert();
}
inline void Surround::set_blind_spot_right_alert(bool value) {
  _internal_set_blind_spot_right_alert(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.blind_spot_right_alert)
}
inline bool Surround::_internal_blind_spot_right_alert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blind_spot_right_alert_;
}
inline void Surround::_internal_set_blind_spot_right_alert(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_right_alert_ = value;
}

// optional bool blind_spot_right_alert_enabled = 8;
inline bool Surround::has_blind_spot_right_alert_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Surround::clear_blind_spot_right_alert_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_right_alert_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Surround::blind_spot_right_alert_enabled() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.blind_spot_right_alert_enabled)
  return _internal_blind_spot_right_alert_enabled();
}
inline void Surround::set_blind_spot_right_alert_enabled(bool value) {
  _internal_set_blind_spot_right_alert_enabled(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.blind_spot_right_alert_enabled)
}
inline bool Surround::_internal_blind_spot_right_alert_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blind_spot_right_alert_enabled_;
}
inline void Surround::_internal_set_blind_spot_right_alert_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blind_spot_right_alert_enabled_ = value;
}

// optional double sonar00 = 9;
inline bool Surround::has_sonar00() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Surround::clear_sonar00() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar00_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double Surround::sonar00() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar00)
  return _internal_sonar00();
}
inline void Surround::set_sonar00(double value) {
  _internal_set_sonar00(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar00)
}
inline double Surround::_internal_sonar00() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar00_;
}
inline void Surround::_internal_set_sonar00(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar00_ = value;
}

// optional double sonar01 = 10;
inline bool Surround::has_sonar01() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Surround::clear_sonar01() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar01_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double Surround::sonar01() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar01)
  return _internal_sonar01();
}
inline void Surround::set_sonar01(double value) {
  _internal_set_sonar01(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar01)
}
inline double Surround::_internal_sonar01() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar01_;
}
inline void Surround::_internal_set_sonar01(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar01_ = value;
}

// optional double sonar02 = 11;
inline bool Surround::has_sonar02() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Surround::clear_sonar02() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar02_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double Surround::sonar02() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar02)
  return _internal_sonar02();
}
inline void Surround::set_sonar02(double value) {
  _internal_set_sonar02(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar02)
}
inline double Surround::_internal_sonar02() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar02_;
}
inline void Surround::_internal_set_sonar02(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar02_ = value;
}

// optional double sonar03 = 12;
inline bool Surround::has_sonar03() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Surround::clear_sonar03() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar03_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double Surround::sonar03() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar03)
  return _internal_sonar03();
}
inline void Surround::set_sonar03(double value) {
  _internal_set_sonar03(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar03)
}
inline double Surround::_internal_sonar03() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar03_;
}
inline void Surround::_internal_set_sonar03(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar03_ = value;
}

// optional double sonar04 = 13;
inline bool Surround::has_sonar04() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Surround::clear_sonar04() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar04_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double Surround::sonar04() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar04)
  return _internal_sonar04();
}
inline void Surround::set_sonar04(double value) {
  _internal_set_sonar04(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar04)
}
inline double Surround::_internal_sonar04() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar04_;
}
inline void Surround::_internal_set_sonar04(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar04_ = value;
}

// optional double sonar05 = 14;
inline bool Surround::has_sonar05() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Surround::clear_sonar05() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar05_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double Surround::sonar05() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar05)
  return _internal_sonar05();
}
inline void Surround::set_sonar05(double value) {
  _internal_set_sonar05(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar05)
}
inline double Surround::_internal_sonar05() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar05_;
}
inline void Surround::_internal_set_sonar05(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar05_ = value;
}

// optional double sonar06 = 15;
inline bool Surround::has_sonar06() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Surround::clear_sonar06() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar06_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double Surround::sonar06() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar06)
  return _internal_sonar06();
}
inline void Surround::set_sonar06(double value) {
  _internal_set_sonar06(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar06)
}
inline double Surround::_internal_sonar06() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar06_;
}
inline void Surround::_internal_set_sonar06(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar06_ = value;
}

// optional double sonar07 = 16;
inline bool Surround::has_sonar07() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Surround::clear_sonar07() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar07_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double Surround::sonar07() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar07)
  return _internal_sonar07();
}
inline void Surround::set_sonar07(double value) {
  _internal_set_sonar07(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar07)
}
inline double Surround::_internal_sonar07() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar07_;
}
inline void Surround::_internal_set_sonar07(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar07_ = value;
}

// optional double sonar08 = 17;
inline bool Surround::has_sonar08() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Surround::clear_sonar08() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar08_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double Surround::sonar08() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar08)
  return _internal_sonar08();
}
inline void Surround::set_sonar08(double value) {
  _internal_set_sonar08(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar08)
}
inline double Surround::_internal_sonar08() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar08_;
}
inline void Surround::_internal_set_sonar08(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar08_ = value;
}

// optional double sonar09 = 18;
inline bool Surround::has_sonar09() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Surround::clear_sonar09() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar09_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double Surround::sonar09() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar09)
  return _internal_sonar09();
}
inline void Surround::set_sonar09(double value) {
  _internal_set_sonar09(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar09)
}
inline double Surround::_internal_sonar09() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar09_;
}
inline void Surround::_internal_set_sonar09(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar09_ = value;
}

// optional double sonar10 = 19;
inline bool Surround::has_sonar10() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Surround::clear_sonar10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar10_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double Surround::sonar10() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar10)
  return _internal_sonar10();
}
inline void Surround::set_sonar10(double value) {
  _internal_set_sonar10(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar10)
}
inline double Surround::_internal_sonar10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar10_;
}
inline void Surround::_internal_set_sonar10(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar10_ = value;
}

// optional double sonar11 = 20;
inline bool Surround::has_sonar11() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Surround::clear_sonar11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar11_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double Surround::sonar11() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar11)
  return _internal_sonar11();
}
inline void Surround::set_sonar11(double value) {
  _internal_set_sonar11(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar11)
}
inline double Surround::_internal_sonar11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar11_;
}
inline void Surround::_internal_set_sonar11(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar11_ = value;
}

// optional bool sonar_enabled = 21;
inline bool Surround::has_sonar_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Surround::clear_sonar_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool Surround::sonar_enabled() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar_enabled)
  return _internal_sonar_enabled();
}
inline void Surround::set_sonar_enabled(bool value) {
  _internal_set_sonar_enabled(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar_enabled)
}
inline bool Surround::_internal_sonar_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar_enabled_;
}
inline void Surround::_internal_set_sonar_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar_enabled_ = value;
}

// optional bool sonar_fault = 22;
inline bool Surround::has_sonar_fault() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Surround::clear_sonar_fault() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar_fault_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool Surround::sonar_fault() const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar_fault)
  return _internal_sonar_fault();
}
inline void Surround::set_sonar_fault(bool value) {
  _internal_set_sonar_fault(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar_fault)
}
inline bool Surround::_internal_sonar_fault() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar_fault_;
}
inline void Surround::_internal_set_sonar_fault(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar_fault_ = value;
}

// repeated double sonar_range = 23;
inline int Surround::_internal_sonar_range_size() const {
  return _internal_sonar_range().size();
}
inline int Surround::sonar_range_size() const {
  return _internal_sonar_range_size();
}
inline void Surround::clear_sonar_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar_range_.Clear();
}
inline double Surround::sonar_range(int index) const {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar_range)
  return _internal_sonar_range().Get(index);
}
inline void Surround::set_sonar_range(int index, double value) {
  _internal_mutable_sonar_range()->Set(index, value);
  // @@protoc_insertion_point(field_set:control.canbus.Surround.sonar_range)
}
inline void Surround::add_sonar_range(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_sonar_range()->Add(value);
  // @@protoc_insertion_point(field_add:control.canbus.Surround.sonar_range)
}
inline const ::google::protobuf::RepeatedField<double>& Surround::sonar_range() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.canbus.Surround.sonar_range)
  return _internal_sonar_range();
}
inline ::google::protobuf::RepeatedField<double>* Surround::mutable_sonar_range()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.canbus.Surround.sonar_range)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sonar_range();
}
inline const ::google::protobuf::RepeatedField<double>&
Surround::_internal_sonar_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar_range_;
}
inline ::google::protobuf::RepeatedField<double>* Surround::_internal_mutable_sonar_range() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sonar_range_;
}

// repeated .control.canbus.Sonar sonar = 24;
inline int Surround::_internal_sonar_size() const {
  return _internal_sonar().size();
}
inline int Surround::sonar_size() const {
  return _internal_sonar_size();
}
inline void Surround::clear_sonar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sonar_.Clear();
}
inline ::control::canbus::Sonar* Surround::mutable_sonar(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.canbus.Surround.sonar)
  return _internal_mutable_sonar()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>* Surround::mutable_sonar()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.canbus.Surround.sonar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sonar();
}
inline const ::control::canbus::Sonar& Surround::sonar(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.Surround.sonar)
  return _internal_sonar().Get(index);
}
inline ::control::canbus::Sonar* Surround::add_sonar() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::canbus::Sonar* _add = _internal_mutable_sonar()->Add();
  // @@protoc_insertion_point(field_add:control.canbus.Surround.sonar)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>& Surround::sonar() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.canbus.Surround.sonar)
  return _internal_sonar();
}
inline const ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>&
Surround::_internal_sonar() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sonar_;
}
inline ::google::protobuf::RepeatedPtrField<::control::canbus::Sonar>*
Surround::_internal_mutable_sonar() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sonar_;
}

// -------------------------------------------------------------------

// License

// optional string vin = 1 [deprecated = true];
inline bool License::has_vin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void License::clear_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& License::vin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.canbus.License.vin)
  return _internal_vin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void License::set_vin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.canbus.License.vin)
}
inline std::string* License::mutable_vin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vin();
  // @@protoc_insertion_point(field_mutable:control.canbus.License.vin)
  return _s;
}
inline const std::string& License::_internal_vin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vin_.Get();
}
inline void License::_internal_set_vin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vin_.Set(value, GetArena());
}
inline std::string* License::_internal_mutable_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.vin_.Mutable( GetArena());
}
inline std::string* License::release_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.canbus.License.vin)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.vin_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vin_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void License::set_allocated_vin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vin_.IsDefault()) {
          _impl_.vin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.canbus.License.vin)
}

// -------------------------------------------------------------------

// CheckResponse

// optional bool is_eps_online = 1 [default = false];
inline bool CheckResponse::has_is_eps_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CheckResponse::clear_is_eps_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_eps_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CheckResponse::is_eps_online() const {
  // @@protoc_insertion_point(field_get:control.canbus.CheckResponse.is_eps_online)
  return _internal_is_eps_online();
}
inline void CheckResponse::set_is_eps_online(bool value) {
  _internal_set_is_eps_online(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.canbus.CheckResponse.is_eps_online)
}
inline bool CheckResponse::_internal_is_eps_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_eps_online_;
}
inline void CheckResponse::_internal_set_is_eps_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_eps_online_ = value;
}

// optional bool is_epb_online = 2 [default = false];
inline bool CheckResponse::has_is_epb_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CheckResponse::clear_is_epb_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_epb_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CheckResponse::is_epb_online() const {
  // @@protoc_insertion_point(field_get:control.canbus.CheckResponse.is_epb_online)
  return _internal_is_epb_online();
}
inline void CheckResponse::set_is_epb_online(bool value) {
  _internal_set_is_epb_online(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.canbus.CheckResponse.is_epb_online)
}
inline bool CheckResponse::_internal_is_epb_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_epb_online_;
}
inline void CheckResponse::_internal_set_is_epb_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_epb_online_ = value;
}

// optional bool is_esp_online = 3 [default = false];
inline bool CheckResponse::has_is_esp_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CheckResponse::clear_is_esp_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_esp_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CheckResponse::is_esp_online() const {
  // @@protoc_insertion_point(field_get:control.canbus.CheckResponse.is_esp_online)
  return _internal_is_esp_online();
}
inline void CheckResponse::set_is_esp_online(bool value) {
  _internal_set_is_esp_online(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.canbus.CheckResponse.is_esp_online)
}
inline bool CheckResponse::_internal_is_esp_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_esp_online_;
}
inline void CheckResponse::_internal_set_is_esp_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_esp_online_ = value;
}

// optional bool is_vtog_online = 4 [default = false];
inline bool CheckResponse::has_is_vtog_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CheckResponse::clear_is_vtog_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_vtog_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CheckResponse::is_vtog_online() const {
  // @@protoc_insertion_point(field_get:control.canbus.CheckResponse.is_vtog_online)
  return _internal_is_vtog_online();
}
inline void CheckResponse::set_is_vtog_online(bool value) {
  _internal_set_is_vtog_online(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.canbus.CheckResponse.is_vtog_online)
}
inline bool CheckResponse::_internal_is_vtog_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_vtog_online_;
}
inline void CheckResponse::_internal_set_is_vtog_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_vtog_online_ = value;
}

// optional bool is_scu_online = 5 [default = false];
inline bool CheckResponse::has_is_scu_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CheckResponse::clear_is_scu_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_scu_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CheckResponse::is_scu_online() const {
  // @@protoc_insertion_point(field_get:control.canbus.CheckResponse.is_scu_online)
  return _internal_is_scu_online();
}
inline void CheckResponse::set_is_scu_online(bool value) {
  _internal_set_is_scu_online(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.canbus.CheckResponse.is_scu_online)
}
inline bool CheckResponse::_internal_is_scu_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_scu_online_;
}
inline void CheckResponse::_internal_set_is_scu_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_scu_online_ = value;
}

// optional bool is_switch_online = 6 [default = false];
inline bool CheckResponse::has_is_switch_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CheckResponse::clear_is_switch_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_switch_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CheckResponse::is_switch_online() const {
  // @@protoc_insertion_point(field_get:control.canbus.CheckResponse.is_switch_online)
  return _internal_is_switch_online();
}
inline void CheckResponse::set_is_switch_online(bool value) {
  _internal_set_is_switch_online(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.canbus.CheckResponse.is_switch_online)
}
inline bool CheckResponse::_internal_is_switch_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_switch_online_;
}
inline void CheckResponse::_internal_set_is_switch_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_switch_online_ = value;
}

// optional bool is_vcu_online = 7 [default = false];
inline bool CheckResponse::has_is_vcu_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CheckResponse::clear_is_vcu_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_vcu_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CheckResponse::is_vcu_online() const {
  // @@protoc_insertion_point(field_get:control.canbus.CheckResponse.is_vcu_online)
  return _internal_is_vcu_online();
}
inline void CheckResponse::set_is_vcu_online(bool value) {
  _internal_set_is_vcu_online(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.canbus.CheckResponse.is_vcu_online)
}
inline bool CheckResponse::_internal_is_vcu_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_vcu_online_;
}
inline void CheckResponse::_internal_set_is_vcu_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_vcu_online_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::canbus::Chassis_DrivingMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::canbus::Chassis_DrivingMode>() {
  return ::control::canbus::Chassis_DrivingMode_descriptor();
}
template <>
struct is_proto_enum<::control::canbus::Chassis_ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::canbus::Chassis_ErrorCode>() {
  return ::control::canbus::Chassis_ErrorCode_descriptor();
}
template <>
struct is_proto_enum<::control::canbus::Chassis_GearPosition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::canbus::Chassis_GearPosition>() {
  return ::control::canbus::Chassis_GearPosition_descriptor();
}
template <>
struct is_proto_enum<::control::canbus::Chassis_BumperEvent> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::canbus::Chassis_BumperEvent>() {
  return ::control::canbus::Chassis_BumperEvent_descriptor();
}
template <>
struct is_proto_enum<::control::canbus::Chassis_SteerMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::canbus::Chassis_SteerMode>() {
  return ::control::canbus::Chassis_SteerMode_descriptor();
}
template <>
struct is_proto_enum<::control::canbus::WheelSpeed_WheelSpeedType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::canbus::WheelSpeed_WheelSpeedType>() {
  return ::control::canbus::WheelSpeed_WheelSpeedType_descriptor();
}
template <>
struct is_proto_enum<::control::canbus::GpsQuality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::canbus::GpsQuality>() {
  return ::control::canbus::GpsQuality_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_2epb_2eh

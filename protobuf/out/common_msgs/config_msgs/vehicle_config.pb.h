// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/config_msgs/vehicle_config.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/geometry.pb.h"
#include "common_msgs/basic_msgs/vehicle_id.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
namespace control {
namespace common {
class Extrinsics;
struct ExtrinsicsDefaultTypeInternal;
extern ExtrinsicsDefaultTypeInternal _Extrinsics_default_instance_;
class LatencyParam;
struct LatencyParamDefaultTypeInternal;
extern LatencyParamDefaultTypeInternal _LatencyParam_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class VehicleConfig;
struct VehicleConfigDefaultTypeInternal;
extern VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
class VehicleParam;
struct VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace common {
enum VehicleBrand : int {
  LINCOLN_MKZ = 0,
  GEM = 1,
  LEXUS = 2,
  TRANSIT = 3,
  GE3 = 4,
  WEY = 5,
  ZHONGYUN = 6,
  CH = 7,
  DKIT = 8,
  NEOLIX = 9,
};

bool VehicleBrand_IsValid(int value);
extern const uint32_t VehicleBrand_internal_data_[];
constexpr VehicleBrand VehicleBrand_MIN = static_cast<VehicleBrand>(0);
constexpr VehicleBrand VehicleBrand_MAX = static_cast<VehicleBrand>(9);
constexpr int VehicleBrand_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
VehicleBrand_descriptor();
template <typename T>
const std::string& VehicleBrand_Name(T value) {
  static_assert(std::is_same<T, VehicleBrand>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VehicleBrand_Name().");
  return VehicleBrand_Name(static_cast<VehicleBrand>(value));
}
template <>
inline const std::string& VehicleBrand_Name(VehicleBrand value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VehicleBrand_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool VehicleBrand_Parse(absl::string_view name, VehicleBrand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleBrand>(
      VehicleBrand_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LatencyParam final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.LatencyParam) */ {
 public:
  inline LatencyParam() : LatencyParam(nullptr) {}
  ~LatencyParam() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LatencyParam(
      ::google::protobuf::internal::ConstantInitialized);

  inline LatencyParam(const LatencyParam& from) : LatencyParam(nullptr, from) {}
  inline LatencyParam(LatencyParam&& from) noexcept
      : LatencyParam(nullptr, std::move(from)) {}
  inline LatencyParam& operator=(const LatencyParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyParam& operator=(LatencyParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyParam* internal_default_instance() {
    return reinterpret_cast<const LatencyParam*>(
        &_LatencyParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LatencyParam& a, LatencyParam& b) { a.Swap(&b); }
  inline void Swap(LatencyParam* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyParam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatencyParam* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LatencyParam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LatencyParam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LatencyParam& from) { LatencyParam::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LatencyParam* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.LatencyParam"; }

 protected:
  explicit LatencyParam(::google::protobuf::Arena* arena);
  LatencyParam(::google::protobuf::Arena* arena, const LatencyParam& from);
  LatencyParam(::google::protobuf::Arena* arena, LatencyParam&& from) noexcept
      : LatencyParam(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeadTimeFieldNumber = 1,
    kRiseTimeFieldNumber = 2,
    kPeakTimeFieldNumber = 3,
    kSettlingTimeFieldNumber = 4,
  };
  // optional double dead_time = 1;
  bool has_dead_time() const;
  void clear_dead_time() ;
  double dead_time() const;
  void set_dead_time(double value);

  private:
  double _internal_dead_time() const;
  void _internal_set_dead_time(double value);

  public:
  // optional double rise_time = 2;
  bool has_rise_time() const;
  void clear_rise_time() ;
  double rise_time() const;
  void set_rise_time(double value);

  private:
  double _internal_rise_time() const;
  void _internal_set_rise_time(double value);

  public:
  // optional double peak_time = 3;
  bool has_peak_time() const;
  void clear_peak_time() ;
  double peak_time() const;
  void set_peak_time(double value);

  private:
  double _internal_peak_time() const;
  void _internal_set_peak_time(double value);

  public:
  // optional double settling_time = 4;
  bool has_settling_time() const;
  void clear_settling_time() ;
  double settling_time() const;
  void set_settling_time(double value);

  private:
  double _internal_settling_time() const;
  void _internal_set_settling_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.common.LatencyParam)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LatencyParam_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LatencyParam& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double dead_time_;
    double rise_time_;
    double peak_time_;
    double settling_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleParam final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.VehicleParam) */ {
 public:
  inline VehicleParam() : VehicleParam(nullptr) {}
  ~VehicleParam() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleParam(
      ::google::protobuf::internal::ConstantInitialized);

  inline VehicleParam(const VehicleParam& from) : VehicleParam(nullptr, from) {}
  inline VehicleParam(VehicleParam&& from) noexcept
      : VehicleParam(nullptr, std::move(from)) {}
  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
        &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(VehicleParam& a, VehicleParam& b) { a.Swap(&b); }
  inline void Swap(VehicleParam* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleParam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleParam* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<VehicleParam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleParam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VehicleParam& from) { VehicleParam::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleParam* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.VehicleParam"; }

 protected:
  explicit VehicleParam(::google::protobuf::Arena* arena);
  VehicleParam(::google::protobuf::Arena* arena, const VehicleParam& from);
  VehicleParam(::google::protobuf::Arena* arena, VehicleParam&& from) noexcept
      : VehicleParam(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVehicleIdFieldNumber = 2,
    kSteeringLatencyParamFieldNumber = 22,
    kThrottleLatencyParamFieldNumber = 23,
    kBrakeLatencyParamFieldNumber = 24,
    kCubicCoeffFieldNumber = 25,
    kQuadraticCoeffFieldNumber = 26,
    kLinearCoeffFieldNumber = 27,
    kOffsetFieldNumber = 28,
    kBrandFieldNumber = 1,
    kMaxAbsSpeedWhenStoppedFieldNumber = 19,
    kFrontEdgeToCenterFieldNumber = 3,
    kBackEdgeToCenterFieldNumber = 4,
    kLeftEdgeToCenterFieldNumber = 5,
    kRightEdgeToCenterFieldNumber = 6,
    kLengthFieldNumber = 7,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
    kMinTurnRadiusFieldNumber = 10,
    kMaxAccelerationFieldNumber = 11,
    kMaxDecelerationFieldNumber = 12,
    kMaxSteerAngleFieldNumber = 13,
    kMaxSteerAngleRateFieldNumber = 14,
    kMinSteerAngleRateFieldNumber = 15,
    kSteerRatioFieldNumber = 16,
    kWheelBaseFieldNumber = 17,
    kWheelRollingRadiusFieldNumber = 18,
    kBrakeDeadzoneFieldNumber = 20,
    kThrottleDeadzoneFieldNumber = 21,
  };
  // optional .control.common.VehicleID vehicle_id = 2;
  bool has_vehicle_id() const;
  void clear_vehicle_id() ;
  const ::control::common::VehicleID& vehicle_id() const;
  PROTOBUF_NODISCARD ::control::common::VehicleID* release_vehicle_id();
  ::control::common::VehicleID* mutable_vehicle_id();
  void set_allocated_vehicle_id(::control::common::VehicleID* value);
  void unsafe_arena_set_allocated_vehicle_id(::control::common::VehicleID* value);
  ::control::common::VehicleID* unsafe_arena_release_vehicle_id();

  private:
  const ::control::common::VehicleID& _internal_vehicle_id() const;
  ::control::common::VehicleID* _internal_mutable_vehicle_id();

  public:
  // optional .control.common.LatencyParam steering_latency_param = 22;
  bool has_steering_latency_param() const;
  void clear_steering_latency_param() ;
  const ::control::common::LatencyParam& steering_latency_param() const;
  PROTOBUF_NODISCARD ::control::common::LatencyParam* release_steering_latency_param();
  ::control::common::LatencyParam* mutable_steering_latency_param();
  void set_allocated_steering_latency_param(::control::common::LatencyParam* value);
  void unsafe_arena_set_allocated_steering_latency_param(::control::common::LatencyParam* value);
  ::control::common::LatencyParam* unsafe_arena_release_steering_latency_param();

  private:
  const ::control::common::LatencyParam& _internal_steering_latency_param() const;
  ::control::common::LatencyParam* _internal_mutable_steering_latency_param();

  public:
  // optional .control.common.LatencyParam throttle_latency_param = 23;
  bool has_throttle_latency_param() const;
  void clear_throttle_latency_param() ;
  const ::control::common::LatencyParam& throttle_latency_param() const;
  PROTOBUF_NODISCARD ::control::common::LatencyParam* release_throttle_latency_param();
  ::control::common::LatencyParam* mutable_throttle_latency_param();
  void set_allocated_throttle_latency_param(::control::common::LatencyParam* value);
  void unsafe_arena_set_allocated_throttle_latency_param(::control::common::LatencyParam* value);
  ::control::common::LatencyParam* unsafe_arena_release_throttle_latency_param();

  private:
  const ::control::common::LatencyParam& _internal_throttle_latency_param() const;
  ::control::common::LatencyParam* _internal_mutable_throttle_latency_param();

  public:
  // optional .control.common.LatencyParam brake_latency_param = 24;
  bool has_brake_latency_param() const;
  void clear_brake_latency_param() ;
  const ::control::common::LatencyParam& brake_latency_param() const;
  PROTOBUF_NODISCARD ::control::common::LatencyParam* release_brake_latency_param();
  ::control::common::LatencyParam* mutable_brake_latency_param();
  void set_allocated_brake_latency_param(::control::common::LatencyParam* value);
  void unsafe_arena_set_allocated_brake_latency_param(::control::common::LatencyParam* value);
  ::control::common::LatencyParam* unsafe_arena_release_brake_latency_param();

  private:
  const ::control::common::LatencyParam& _internal_brake_latency_param() const;
  ::control::common::LatencyParam* _internal_mutable_brake_latency_param();

  public:
  // optional double cubic_coeff = 25;
  bool has_cubic_coeff() const;
  void clear_cubic_coeff() ;
  double cubic_coeff() const;
  void set_cubic_coeff(double value);

  private:
  double _internal_cubic_coeff() const;
  void _internal_set_cubic_coeff(double value);

  public:
  // optional double quadratic_coeff = 26;
  bool has_quadratic_coeff() const;
  void clear_quadratic_coeff() ;
  double quadratic_coeff() const;
  void set_quadratic_coeff(double value);

  private:
  double _internal_quadratic_coeff() const;
  void _internal_set_quadratic_coeff(double value);

  public:
  // optional double linear_coeff = 27;
  bool has_linear_coeff() const;
  void clear_linear_coeff() ;
  double linear_coeff() const;
  void set_linear_coeff(double value);

  private:
  double _internal_linear_coeff() const;
  void _internal_set_linear_coeff(double value);

  public:
  // optional double offset = 28;
  bool has_offset() const;
  void clear_offset() ;
  double offset() const;
  void set_offset(double value);

  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);

  public:
  // optional .control.common.VehicleBrand brand = 1;
  bool has_brand() const;
  void clear_brand() ;
  ::control::common::VehicleBrand brand() const;
  void set_brand(::control::common::VehicleBrand value);

  private:
  ::control::common::VehicleBrand _internal_brand() const;
  void _internal_set_brand(::control::common::VehicleBrand value);

  public:
  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  bool has_max_abs_speed_when_stopped() const;
  void clear_max_abs_speed_when_stopped() ;
  float max_abs_speed_when_stopped() const;
  void set_max_abs_speed_when_stopped(float value);

  private:
  float _internal_max_abs_speed_when_stopped() const;
  void _internal_set_max_abs_speed_when_stopped(float value);

  public:
  // optional double front_edge_to_center = 3 [default = nan];
  bool has_front_edge_to_center() const;
  void clear_front_edge_to_center() ;
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);

  private:
  double _internal_front_edge_to_center() const;
  void _internal_set_front_edge_to_center(double value);

  public:
  // optional double back_edge_to_center = 4 [default = nan];
  bool has_back_edge_to_center() const;
  void clear_back_edge_to_center() ;
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);

  private:
  double _internal_back_edge_to_center() const;
  void _internal_set_back_edge_to_center(double value);

  public:
  // optional double left_edge_to_center = 5 [default = nan];
  bool has_left_edge_to_center() const;
  void clear_left_edge_to_center() ;
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);

  private:
  double _internal_left_edge_to_center() const;
  void _internal_set_left_edge_to_center(double value);

  public:
  // optional double right_edge_to_center = 6 [default = nan];
  bool has_right_edge_to_center() const;
  void clear_right_edge_to_center() ;
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);

  private:
  double _internal_right_edge_to_center() const;
  void _internal_set_right_edge_to_center(double value);

  public:
  // optional double length = 7 [default = nan];
  bool has_length() const;
  void clear_length() ;
  double length() const;
  void set_length(double value);

  private:
  double _internal_length() const;
  void _internal_set_length(double value);

  public:
  // optional double width = 8 [default = nan];
  bool has_width() const;
  void clear_width() ;
  double width() const;
  void set_width(double value);

  private:
  double _internal_width() const;
  void _internal_set_width(double value);

  public:
  // optional double height = 9 [default = nan];
  bool has_height() const;
  void clear_height() ;
  double height() const;
  void set_height(double value);

  private:
  double _internal_height() const;
  void _internal_set_height(double value);

  public:
  // optional double min_turn_radius = 10 [default = nan];
  bool has_min_turn_radius() const;
  void clear_min_turn_radius() ;
  double min_turn_radius() const;
  void set_min_turn_radius(double value);

  private:
  double _internal_min_turn_radius() const;
  void _internal_set_min_turn_radius(double value);

  public:
  // optional double max_acceleration = 11 [default = nan];
  bool has_max_acceleration() const;
  void clear_max_acceleration() ;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);

  public:
  // optional double max_deceleration = 12 [default = nan];
  bool has_max_deceleration() const;
  void clear_max_deceleration() ;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);

  public:
  // optional double max_steer_angle = 13 [default = nan];
  bool has_max_steer_angle() const;
  void clear_max_steer_angle() ;
  double max_steer_angle() const;
  void set_max_steer_angle(double value);

  private:
  double _internal_max_steer_angle() const;
  void _internal_set_max_steer_angle(double value);

  public:
  // optional double max_steer_angle_rate = 14 [default = nan];
  bool has_max_steer_angle_rate() const;
  void clear_max_steer_angle_rate() ;
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);

  private:
  double _internal_max_steer_angle_rate() const;
  void _internal_set_max_steer_angle_rate(double value);

  public:
  // optional double min_steer_angle_rate = 15 [default = nan];
  bool has_min_steer_angle_rate() const;
  void clear_min_steer_angle_rate() ;
  double min_steer_angle_rate() const;
  void set_min_steer_angle_rate(double value);

  private:
  double _internal_min_steer_angle_rate() const;
  void _internal_set_min_steer_angle_rate(double value);

  public:
  // optional double steer_ratio = 16 [default = nan];
  bool has_steer_ratio() const;
  void clear_steer_ratio() ;
  double steer_ratio() const;
  void set_steer_ratio(double value);

  private:
  double _internal_steer_ratio() const;
  void _internal_set_steer_ratio(double value);

  public:
  // optional double wheel_base = 17 [default = nan];
  bool has_wheel_base() const;
  void clear_wheel_base() ;
  double wheel_base() const;
  void set_wheel_base(double value);

  private:
  double _internal_wheel_base() const;
  void _internal_set_wheel_base(double value);

  public:
  // optional double wheel_rolling_radius = 18 [default = nan];
  bool has_wheel_rolling_radius() const;
  void clear_wheel_rolling_radius() ;
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);

  private:
  double _internal_wheel_rolling_radius() const;
  void _internal_set_wheel_rolling_radius(double value);

  public:
  // optional double brake_deadzone = 20 [default = nan];
  bool has_brake_deadzone() const;
  void clear_brake_deadzone() ;
  double brake_deadzone() const;
  void set_brake_deadzone(double value);

  private:
  double _internal_brake_deadzone() const;
  void _internal_set_brake_deadzone(double value);

  public:
  // optional double throttle_deadzone = 21 [default = nan];
  bool has_throttle_deadzone() const;
  void clear_throttle_deadzone() ;
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);

  private:
  double _internal_throttle_deadzone() const;
  void _internal_set_throttle_deadzone(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.common.VehicleParam)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 28, 5,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VehicleParam_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VehicleParam& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::VehicleID* vehicle_id_;
    ::control::common::LatencyParam* steering_latency_param_;
    ::control::common::LatencyParam* throttle_latency_param_;
    ::control::common::LatencyParam* brake_latency_param_;
    double cubic_coeff_;
    double quadratic_coeff_;
    double linear_coeff_;
    double offset_;
    int brand_;
    float max_abs_speed_when_stopped_;
    double front_edge_to_center_;
    double back_edge_to_center_;
    double left_edge_to_center_;
    double right_edge_to_center_;
    double length_;
    double width_;
    double height_;
    double min_turn_radius_;
    double max_acceleration_;
    double max_deceleration_;
    double max_steer_angle_;
    double max_steer_angle_rate_;
    double min_steer_angle_rate_;
    double steer_ratio_;
    double wheel_base_;
    double wheel_rolling_radius_;
    double brake_deadzone_;
    double throttle_deadzone_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Transform final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transform(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transform(const Transform& from) : Transform(nullptr, from) {}
  inline Transform(Transform&& from) noexcept
      : Transform(nullptr, std::move(from)) {}
  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
        &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Transform& a, Transform& b) { a.Swap(&b); }
  inline void Swap(Transform* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Transform>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transform& from) { Transform::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Transform* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.Transform"; }

 protected:
  explicit Transform(::google::protobuf::Arena* arena);
  Transform(::google::protobuf::Arena* arena, const Transform& from);
  Transform(::google::protobuf::Arena* arena, Transform&& from) noexcept
      : Transform(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceFrameFieldNumber = 1,
    kTargetFrameFieldNumber = 2,
    kTranslationFieldNumber = 3,
    kRotationFieldNumber = 4,
  };
  // optional bytes source_frame = 1;
  bool has_source_frame() const;
  void clear_source_frame() ;
  const std::string& source_frame() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_frame(Arg_&& arg, Args_... args);
  std::string* mutable_source_frame();
  PROTOBUF_NODISCARD std::string* release_source_frame();
  void set_allocated_source_frame(std::string* value);

  private:
  const std::string& _internal_source_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_frame(
      const std::string& value);
  std::string* _internal_mutable_source_frame();

  public:
  // optional bytes target_frame = 2;
  bool has_target_frame() const;
  void clear_target_frame() ;
  const std::string& target_frame() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_frame(Arg_&& arg, Args_... args);
  std::string* mutable_target_frame();
  PROTOBUF_NODISCARD std::string* release_target_frame();
  void set_allocated_target_frame(std::string* value);

  private:
  const std::string& _internal_target_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_frame(
      const std::string& value);
  std::string* _internal_mutable_target_frame();

  public:
  // optional .control.common.Point3D translation = 3;
  bool has_translation() const;
  void clear_translation() ;
  const ::control::common::Point3D& translation() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_translation();
  ::control::common::Point3D* mutable_translation();
  void set_allocated_translation(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_translation(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_translation();

  private:
  const ::control::common::Point3D& _internal_translation() const;
  ::control::common::Point3D* _internal_mutable_translation();

  public:
  // optional .control.common.Quaternion rotation = 4;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::control::common::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::control::common::Quaternion* release_rotation();
  ::control::common::Quaternion* mutable_rotation();
  void set_allocated_rotation(::control::common::Quaternion* value);
  void unsafe_arena_set_allocated_rotation(::control::common::Quaternion* value);
  ::control::common::Quaternion* unsafe_arena_release_rotation();

  private:
  const ::control::common::Quaternion& _internal_rotation() const;
  ::control::common::Quaternion* _internal_mutable_rotation();

  public:
  // @@protoc_insertion_point(class_scope:control.common.Transform)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Transform_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transform& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_frame_;
    ::google::protobuf::internal::ArenaStringPtr target_frame_;
    ::control::common::Point3D* translation_;
    ::control::common::Quaternion* rotation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Extrinsics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.Extrinsics) */ {
 public:
  inline Extrinsics() : Extrinsics(nullptr) {}
  ~Extrinsics() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Extrinsics(
      ::google::protobuf::internal::ConstantInitialized);

  inline Extrinsics(const Extrinsics& from) : Extrinsics(nullptr, from) {}
  inline Extrinsics(Extrinsics&& from) noexcept
      : Extrinsics(nullptr, std::move(from)) {}
  inline Extrinsics& operator=(const Extrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extrinsics& operator=(Extrinsics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extrinsics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extrinsics* internal_default_instance() {
    return reinterpret_cast<const Extrinsics*>(
        &_Extrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Extrinsics& a, Extrinsics& b) { a.Swap(&b); }
  inline void Swap(Extrinsics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extrinsics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Extrinsics* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Extrinsics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Extrinsics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Extrinsics& from) { Extrinsics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Extrinsics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.Extrinsics"; }

 protected:
  explicit Extrinsics(::google::protobuf::Arena* arena);
  Extrinsics(::google::protobuf::Arena* arena, const Extrinsics& from);
  Extrinsics(::google::protobuf::Arena* arena, Extrinsics&& from) noexcept
      : Extrinsics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTansformsFieldNumber = 1,
  };
  // repeated .control.common.Transform tansforms = 1;
  int tansforms_size() const;
  private:
  int _internal_tansforms_size() const;

  public:
  void clear_tansforms() ;
  ::control::common::Transform* mutable_tansforms(int index);
  ::google::protobuf::RepeatedPtrField<::control::common::Transform>* mutable_tansforms();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::common::Transform>& _internal_tansforms() const;
  ::google::protobuf::RepeatedPtrField<::control::common::Transform>* _internal_mutable_tansforms();
  public:
  const ::control::common::Transform& tansforms(int index) const;
  ::control::common::Transform* add_tansforms();
  const ::google::protobuf::RepeatedPtrField<::control::common::Transform>& tansforms() const;
  // @@protoc_insertion_point(class_scope:control.common.Extrinsics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Extrinsics_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Extrinsics& from_msg);
    ::google::protobuf::RepeatedPtrField< ::control::common::Transform > tansforms_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.VehicleConfig) */ {
 public:
  inline VehicleConfig() : VehicleConfig(nullptr) {}
  ~VehicleConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline VehicleConfig(const VehicleConfig& from) : VehicleConfig(nullptr, from) {}
  inline VehicleConfig(VehicleConfig&& from) noexcept
      : VehicleConfig(nullptr, std::move(from)) {}
  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleConfig& operator=(VehicleConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleConfig* internal_default_instance() {
    return reinterpret_cast<const VehicleConfig*>(
        &_VehicleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(VehicleConfig& a, VehicleConfig& b) { a.Swap(&b); }
  inline void Swap(VehicleConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<VehicleConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VehicleConfig& from) { VehicleConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.VehicleConfig"; }

 protected:
  explicit VehicleConfig(::google::protobuf::Arena* arena);
  VehicleConfig(::google::protobuf::Arena* arena, const VehicleConfig& from);
  VehicleConfig(::google::protobuf::Arena* arena, VehicleConfig&& from) noexcept
      : VehicleConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kVehicleParamFieldNumber = 2,
    kExtrinsicsFieldNumber = 3,
  };
  // optional .control.common.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::control::common::Header& header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_header();

  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();

  public:
  // optional .control.common.VehicleParam vehicle_param = 2;
  bool has_vehicle_param() const;
  void clear_vehicle_param() ;
  const ::control::common::VehicleParam& vehicle_param() const;
  PROTOBUF_NODISCARD ::control::common::VehicleParam* release_vehicle_param();
  ::control::common::VehicleParam* mutable_vehicle_param();
  void set_allocated_vehicle_param(::control::common::VehicleParam* value);
  void unsafe_arena_set_allocated_vehicle_param(::control::common::VehicleParam* value);
  ::control::common::VehicleParam* unsafe_arena_release_vehicle_param();

  private:
  const ::control::common::VehicleParam& _internal_vehicle_param() const;
  ::control::common::VehicleParam* _internal_mutable_vehicle_param();

  public:
  // optional .control.common.Extrinsics extrinsics = 3;
  bool has_extrinsics() const;
  void clear_extrinsics() ;
  const ::control::common::Extrinsics& extrinsics() const;
  PROTOBUF_NODISCARD ::control::common::Extrinsics* release_extrinsics();
  ::control::common::Extrinsics* mutable_extrinsics();
  void set_allocated_extrinsics(::control::common::Extrinsics* value);
  void unsafe_arena_set_allocated_extrinsics(::control::common::Extrinsics* value);
  ::control::common::Extrinsics* unsafe_arena_release_extrinsics();

  private:
  const ::control::common::Extrinsics& _internal_extrinsics() const;
  ::control::common::Extrinsics* _internal_mutable_extrinsics();

  public:
  // @@protoc_insertion_point(class_scope:control.common.VehicleConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VehicleConfig_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VehicleConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::Header* header_;
    ::control::common::VehicleParam* vehicle_param_;
    ::control::common::Extrinsics* extrinsics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Transform

// optional bytes source_frame = 1;
inline bool Transform::has_source_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Transform::clear_source_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_frame_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transform::source_frame() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Transform.source_frame)
  return _internal_source_frame();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transform::set_source_frame(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_frame_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.Transform.source_frame)
}
inline std::string* Transform::mutable_source_frame() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_frame();
  // @@protoc_insertion_point(field_mutable:control.common.Transform.source_frame)
  return _s;
}
inline const std::string& Transform::_internal_source_frame() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_frame_.Get();
}
inline void Transform::_internal_set_source_frame(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_frame_.Set(value, GetArena());
}
inline std::string* Transform::_internal_mutable_source_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_frame_.Mutable( GetArena());
}
inline std::string* Transform::release_source_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.Transform.source_frame)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_frame_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_frame_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Transform::set_allocated_source_frame(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_frame_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_frame_.IsDefault()) {
          _impl_.source_frame_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.Transform.source_frame)
}

// optional bytes target_frame = 2;
inline bool Transform::has_target_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Transform::clear_target_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_frame_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transform::target_frame() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Transform.target_frame)
  return _internal_target_frame();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transform::set_target_frame(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_frame_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.Transform.target_frame)
}
inline std::string* Transform::mutable_target_frame() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_frame();
  // @@protoc_insertion_point(field_mutable:control.common.Transform.target_frame)
  return _s;
}
inline const std::string& Transform::_internal_target_frame() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_frame_.Get();
}
inline void Transform::_internal_set_target_frame(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_frame_.Set(value, GetArena());
}
inline std::string* Transform::_internal_mutable_target_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.target_frame_.Mutable( GetArena());
}
inline std::string* Transform::release_target_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.Transform.target_frame)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.target_frame_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_frame_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Transform::set_allocated_target_frame(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.target_frame_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_frame_.IsDefault()) {
          _impl_.target_frame_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.Transform.target_frame)
}

// optional .control.common.Point3D translation = 3;
inline bool Transform::has_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.translation_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Transform::_internal_translation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Transform::translation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Transform.translation)
  return _internal_translation();
}
inline void Transform::unsafe_arena_set_allocated_translation(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.Transform.translation)
}
inline ::control::common::Point3D* Transform::release_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Point3D* released = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Transform::unsafe_arena_release_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.Transform.translation)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Point3D* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Transform::_internal_mutable_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.translation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.translation_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.translation_;
}
inline ::control::common::Point3D* Transform::mutable_translation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::Point3D* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:control.common.Transform.translation)
  return _msg;
}
inline void Transform::set_allocated_translation(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.translation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.translation_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.Transform.translation)
}

// optional .control.common.Quaternion rotation = 4;
inline bool Transform::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline const ::control::common::Quaternion& Transform::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Quaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Quaternion&>(::control::common::_Quaternion_default_instance_);
}
inline const ::control::common::Quaternion& Transform::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(::control::common::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::control::common::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.Transform.rotation)
}
inline ::control::common::Quaternion* Transform::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::Quaternion* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Quaternion* Transform::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.Transform.rotation)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::control::common::Quaternion* Transform::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Quaternion>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::control::common::Quaternion*>(p);
  }
  return _impl_.rotation_;
}
inline ::control::common::Quaternion* Transform::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::common::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:control.common.Transform.rotation)
  return _msg;
}
inline void Transform::set_allocated_rotation(::control::common::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.rotation_ = reinterpret_cast<::control::common::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.Transform.rotation)
}

// -------------------------------------------------------------------

// Extrinsics

// repeated .control.common.Transform tansforms = 1;
inline int Extrinsics::_internal_tansforms_size() const {
  return _internal_tansforms().size();
}
inline int Extrinsics::tansforms_size() const {
  return _internal_tansforms_size();
}
inline void Extrinsics::clear_tansforms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tansforms_.Clear();
}
inline ::control::common::Transform* Extrinsics::mutable_tansforms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.common.Extrinsics.tansforms)
  return _internal_mutable_tansforms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::common::Transform>* Extrinsics::mutable_tansforms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.common.Extrinsics.tansforms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tansforms();
}
inline const ::control::common::Transform& Extrinsics::tansforms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Extrinsics.tansforms)
  return _internal_tansforms().Get(index);
}
inline ::control::common::Transform* Extrinsics::add_tansforms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::common::Transform* _add = _internal_mutable_tansforms()->Add();
  // @@protoc_insertion_point(field_add:control.common.Extrinsics.tansforms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::Transform>& Extrinsics::tansforms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.common.Extrinsics.tansforms)
  return _internal_tansforms();
}
inline const ::google::protobuf::RepeatedPtrField<::control::common::Transform>&
Extrinsics::_internal_tansforms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tansforms_;
}
inline ::google::protobuf::RepeatedPtrField<::control::common::Transform>*
Extrinsics::_internal_mutable_tansforms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tansforms_;
}

// -------------------------------------------------------------------

// LatencyParam

// optional double dead_time = 1;
inline bool LatencyParam::has_dead_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LatencyParam::clear_dead_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dead_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LatencyParam::dead_time() const {
  // @@protoc_insertion_point(field_get:control.common.LatencyParam.dead_time)
  return _internal_dead_time();
}
inline void LatencyParam::set_dead_time(double value) {
  _internal_set_dead_time(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.common.LatencyParam.dead_time)
}
inline double LatencyParam::_internal_dead_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dead_time_;
}
inline void LatencyParam::_internal_set_dead_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dead_time_ = value;
}

// optional double rise_time = 2;
inline bool LatencyParam::has_rise_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LatencyParam::clear_rise_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rise_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LatencyParam::rise_time() const {
  // @@protoc_insertion_point(field_get:control.common.LatencyParam.rise_time)
  return _internal_rise_time();
}
inline void LatencyParam::set_rise_time(double value) {
  _internal_set_rise_time(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.common.LatencyParam.rise_time)
}
inline double LatencyParam::_internal_rise_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rise_time_;
}
inline void LatencyParam::_internal_set_rise_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rise_time_ = value;
}

// optional double peak_time = 3;
inline bool LatencyParam::has_peak_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LatencyParam::clear_peak_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peak_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LatencyParam::peak_time() const {
  // @@protoc_insertion_point(field_get:control.common.LatencyParam.peak_time)
  return _internal_peak_time();
}
inline void LatencyParam::set_peak_time(double value) {
  _internal_set_peak_time(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.common.LatencyParam.peak_time)
}
inline double LatencyParam::_internal_peak_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.peak_time_;
}
inline void LatencyParam::_internal_set_peak_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peak_time_ = value;
}

// optional double settling_time = 4;
inline bool LatencyParam::has_settling_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LatencyParam::clear_settling_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.settling_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double LatencyParam::settling_time() const {
  // @@protoc_insertion_point(field_get:control.common.LatencyParam.settling_time)
  return _internal_settling_time();
}
inline void LatencyParam::set_settling_time(double value) {
  _internal_set_settling_time(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.common.LatencyParam.settling_time)
}
inline double LatencyParam::_internal_settling_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.settling_time_;
}
inline void LatencyParam::_internal_set_settling_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.settling_time_ = value;
}

// -------------------------------------------------------------------

// VehicleParam

// optional .control.common.VehicleBrand brand = 1;
inline bool VehicleParam::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void VehicleParam::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brand_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::control::common::VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.brand)
  return _internal_brand();
}
inline void VehicleParam::set_brand(::control::common::VehicleBrand value) {
  _internal_set_brand(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.brand)
}
inline ::control::common::VehicleBrand VehicleParam::_internal_brand() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::common::VehicleBrand>(_impl_.brand_);
}
inline void VehicleParam::_internal_set_brand(::control::common::VehicleBrand value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::common::VehicleBrand_IsValid(value));
  _impl_.brand_ = value;
}

// optional .control.common.VehicleID vehicle_id = 2;
inline bool VehicleParam::has_vehicle_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_id_ != nullptr);
  return value;
}
inline const ::control::common::VehicleID& VehicleParam::_internal_vehicle_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::VehicleID* p = _impl_.vehicle_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::VehicleID&>(::control::common::_VehicleID_default_instance_);
}
inline const ::control::common::VehicleID& VehicleParam::vehicle_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.vehicle_id)
  return _internal_vehicle_id();
}
inline void VehicleParam::unsafe_arena_set_allocated_vehicle_id(::control::common::VehicleID* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_id_);
  }
  _impl_.vehicle_id_ = reinterpret_cast<::control::common::VehicleID*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleParam.vehicle_id)
}
inline ::control::common::VehicleID* VehicleParam::release_vehicle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::VehicleID* released = _impl_.vehicle_id_;
  _impl_.vehicle_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::VehicleID* VehicleParam::unsafe_arena_release_vehicle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleParam.vehicle_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::VehicleID* temp = _impl_.vehicle_id_;
  _impl_.vehicle_id_ = nullptr;
  return temp;
}
inline ::control::common::VehicleID* VehicleParam::_internal_mutable_vehicle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vehicle_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::VehicleID>(GetArena());
    _impl_.vehicle_id_ = reinterpret_cast<::control::common::VehicleID*>(p);
  }
  return _impl_.vehicle_id_;
}
inline ::control::common::VehicleID* VehicleParam::mutable_vehicle_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::VehicleID* _msg = _internal_mutable_vehicle_id();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleParam.vehicle_id)
  return _msg;
}
inline void VehicleParam::set_allocated_vehicle_id(::control::common::VehicleID* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vehicle_id_ = reinterpret_cast<::control::common::VehicleID*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleParam.vehicle_id)
}

// optional double front_edge_to_center = 3 [default = nan];
inline bool VehicleParam::has_front_edge_to_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void VehicleParam::clear_front_edge_to_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.front_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.front_edge_to_center)
  return _internal_front_edge_to_center();
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  _internal_set_front_edge_to_center(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.front_edge_to_center)
}
inline double VehicleParam::_internal_front_edge_to_center() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.front_edge_to_center_;
}
inline void VehicleParam::_internal_set_front_edge_to_center(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.front_edge_to_center_ = value;
}

// optional double back_edge_to_center = 4 [default = nan];
inline bool VehicleParam::has_back_edge_to_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void VehicleParam::clear_back_edge_to_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.back_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.back_edge_to_center)
  return _internal_back_edge_to_center();
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  _internal_set_back_edge_to_center(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.back_edge_to_center)
}
inline double VehicleParam::_internal_back_edge_to_center() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.back_edge_to_center_;
}
inline void VehicleParam::_internal_set_back_edge_to_center(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.back_edge_to_center_ = value;
}

// optional double left_edge_to_center = 5 [default = nan];
inline bool VehicleParam::has_left_edge_to_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void VehicleParam::clear_left_edge_to_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.left_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.left_edge_to_center)
  return _internal_left_edge_to_center();
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  _internal_set_left_edge_to_center(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.left_edge_to_center)
}
inline double VehicleParam::_internal_left_edge_to_center() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.left_edge_to_center_;
}
inline void VehicleParam::_internal_set_left_edge_to_center(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.left_edge_to_center_ = value;
}

// optional double right_edge_to_center = 6 [default = nan];
inline bool VehicleParam::has_right_edge_to_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void VehicleParam::clear_right_edge_to_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.right_edge_to_center)
  return _internal_right_edge_to_center();
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  _internal_set_right_edge_to_center(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.right_edge_to_center)
}
inline double VehicleParam::_internal_right_edge_to_center() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.right_edge_to_center_;
}
inline void VehicleParam::_internal_set_right_edge_to_center(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_edge_to_center_ = value;
}

// optional double length = 7 [default = nan];
inline bool VehicleParam::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void VehicleParam::clear_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.length_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.length)
  return _internal_length();
}
inline void VehicleParam::set_length(double value) {
  _internal_set_length(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.length)
}
inline double VehicleParam::_internal_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.length_;
}
inline void VehicleParam::_internal_set_length(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.length_ = value;
}

// optional double width = 8 [default = nan];
inline bool VehicleParam::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void VehicleParam::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.width)
  return _internal_width();
}
inline void VehicleParam::set_width(double value) {
  _internal_set_width(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.width)
}
inline double VehicleParam::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void VehicleParam::_internal_set_width(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// optional double height = 9 [default = nan];
inline bool VehicleParam::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void VehicleParam::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.height)
  return _internal_height();
}
inline void VehicleParam::set_height(double value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.height)
}
inline double VehicleParam::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void VehicleParam::_internal_set_height(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// optional double min_turn_radius = 10 [default = nan];
inline bool VehicleParam::has_min_turn_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void VehicleParam::clear_min_turn_radius() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_turn_radius_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.min_turn_radius)
  return _internal_min_turn_radius();
}
inline void VehicleParam::set_min_turn_radius(double value) {
  _internal_set_min_turn_radius(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.min_turn_radius)
}
inline double VehicleParam::_internal_min_turn_radius() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_turn_radius_;
}
inline void VehicleParam::_internal_set_min_turn_radius(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_turn_radius_ = value;
}

// optional double max_acceleration = 11 [default = nan];
inline bool VehicleParam::has_max_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void VehicleParam::clear_max_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_acceleration_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.max_acceleration)
  return _internal_max_acceleration();
}
inline void VehicleParam::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.max_acceleration)
}
inline double VehicleParam::_internal_max_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_acceleration_;
}
inline void VehicleParam::_internal_set_max_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_acceleration_ = value;
}

// optional double max_deceleration = 12 [default = nan];
inline bool VehicleParam::has_max_deceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void VehicleParam::clear_max_deceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_deceleration_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.max_deceleration)
  return _internal_max_deceleration();
}
inline void VehicleParam::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.max_deceleration)
}
inline double VehicleParam::_internal_max_deceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_deceleration_;
}
inline void VehicleParam::_internal_set_max_deceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_deceleration_ = value;
}

// optional double max_steer_angle = 13 [default = nan];
inline bool VehicleParam::has_max_steer_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void VehicleParam::clear_max_steer_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_steer_angle_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.max_steer_angle)
  return _internal_max_steer_angle();
}
inline void VehicleParam::set_max_steer_angle(double value) {
  _internal_set_max_steer_angle(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.max_steer_angle)
}
inline double VehicleParam::_internal_max_steer_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_steer_angle_;
}
inline void VehicleParam::_internal_set_max_steer_angle(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_steer_angle_ = value;
}

// optional double max_steer_angle_rate = 14 [default = nan];
inline bool VehicleParam::has_max_steer_angle_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void VehicleParam::clear_max_steer_angle_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.max_steer_angle_rate)
  return _internal_max_steer_angle_rate();
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  _internal_set_max_steer_angle_rate(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.max_steer_angle_rate)
}
inline double VehicleParam::_internal_max_steer_angle_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_steer_angle_rate_;
}
inline void VehicleParam::_internal_set_max_steer_angle_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_steer_angle_rate_ = value;
}

// optional double min_steer_angle_rate = 15 [default = nan];
inline bool VehicleParam::has_min_steer_angle_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void VehicleParam::clear_min_steer_angle_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.min_steer_angle_rate)
  return _internal_min_steer_angle_rate();
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  _internal_set_min_steer_angle_rate(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.min_steer_angle_rate)
}
inline double VehicleParam::_internal_min_steer_angle_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_steer_angle_rate_;
}
inline void VehicleParam::_internal_set_min_steer_angle_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_steer_angle_rate_ = value;
}

// optional double steer_ratio = 16 [default = nan];
inline bool VehicleParam::has_steer_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void VehicleParam::clear_steer_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_ratio_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.steer_ratio)
  return _internal_steer_ratio();
}
inline void VehicleParam::set_steer_ratio(double value) {
  _internal_set_steer_ratio(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.steer_ratio)
}
inline double VehicleParam::_internal_steer_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_ratio_;
}
inline void VehicleParam::_internal_set_steer_ratio(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_ratio_ = value;
}

// optional double wheel_base = 17 [default = nan];
inline bool VehicleParam::has_wheel_base() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void VehicleParam::clear_wheel_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_base_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.wheel_base)
  return _internal_wheel_base();
}
inline void VehicleParam::set_wheel_base(double value) {
  _internal_set_wheel_base(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.wheel_base)
}
inline double VehicleParam::_internal_wheel_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wheel_base_;
}
inline void VehicleParam::_internal_set_wheel_base(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_base_ = value;
}

// optional double wheel_rolling_radius = 18 [default = nan];
inline bool VehicleParam::has_wheel_rolling_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void VehicleParam::clear_wheel_rolling_radius() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.wheel_rolling_radius)
  return _internal_wheel_rolling_radius();
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  _internal_set_wheel_rolling_radius(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.wheel_rolling_radius)
}
inline double VehicleParam::_internal_wheel_rolling_radius() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wheel_rolling_radius_;
}
inline void VehicleParam::_internal_set_wheel_rolling_radius(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wheel_rolling_radius_ = value;
}

// optional float max_abs_speed_when_stopped = 19 [default = nan];
inline bool VehicleParam::has_max_abs_speed_when_stopped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void VehicleParam::clear_max_abs_speed_when_stopped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_abs_speed_when_stopped_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.max_abs_speed_when_stopped)
  return _internal_max_abs_speed_when_stopped();
}
inline void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  _internal_set_max_abs_speed_when_stopped(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.max_abs_speed_when_stopped)
}
inline float VehicleParam::_internal_max_abs_speed_when_stopped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_abs_speed_when_stopped_;
}
inline void VehicleParam::_internal_set_max_abs_speed_when_stopped(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_abs_speed_when_stopped_ = value;
}

// optional double brake_deadzone = 20 [default = nan];
inline bool VehicleParam::has_brake_deadzone() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void VehicleParam::clear_brake_deadzone() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double VehicleParam::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.brake_deadzone)
  return _internal_brake_deadzone();
}
inline void VehicleParam::set_brake_deadzone(double value) {
  _internal_set_brake_deadzone(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.brake_deadzone)
}
inline double VehicleParam::_internal_brake_deadzone() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_deadzone_;
}
inline void VehicleParam::_internal_set_brake_deadzone(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_deadzone_ = value;
}

// optional double throttle_deadzone = 21 [default = nan];
inline bool VehicleParam::has_throttle_deadzone() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void VehicleParam::clear_throttle_deadzone() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double VehicleParam::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.throttle_deadzone)
  return _internal_throttle_deadzone();
}
inline void VehicleParam::set_throttle_deadzone(double value) {
  _internal_set_throttle_deadzone(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.throttle_deadzone)
}
inline double VehicleParam::_internal_throttle_deadzone() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_deadzone_;
}
inline void VehicleParam::_internal_set_throttle_deadzone(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_deadzone_ = value;
}

// optional .control.common.LatencyParam steering_latency_param = 22;
inline bool VehicleParam::has_steering_latency_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steering_latency_param_ != nullptr);
  return value;
}
inline void VehicleParam::clear_steering_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steering_latency_param_ != nullptr) _impl_.steering_latency_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::control::common::LatencyParam& VehicleParam::_internal_steering_latency_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::LatencyParam* p = _impl_.steering_latency_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::LatencyParam&>(::control::common::_LatencyParam_default_instance_);
}
inline const ::control::common::LatencyParam& VehicleParam::steering_latency_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.steering_latency_param)
  return _internal_steering_latency_param();
}
inline void VehicleParam::unsafe_arena_set_allocated_steering_latency_param(::control::common::LatencyParam* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.steering_latency_param_);
  }
  _impl_.steering_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleParam.steering_latency_param)
}
inline ::control::common::LatencyParam* VehicleParam::release_steering_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::LatencyParam* released = _impl_.steering_latency_param_;
  _impl_.steering_latency_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::LatencyParam* VehicleParam::unsafe_arena_release_steering_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleParam.steering_latency_param)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::LatencyParam* temp = _impl_.steering_latency_param_;
  _impl_.steering_latency_param_ = nullptr;
  return temp;
}
inline ::control::common::LatencyParam* VehicleParam::_internal_mutable_steering_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steering_latency_param_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::LatencyParam>(GetArena());
    _impl_.steering_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(p);
  }
  return _impl_.steering_latency_param_;
}
inline ::control::common::LatencyParam* VehicleParam::mutable_steering_latency_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::LatencyParam* _msg = _internal_mutable_steering_latency_param();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleParam.steering_latency_param)
  return _msg;
}
inline void VehicleParam::set_allocated_steering_latency_param(::control::common::LatencyParam* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.steering_latency_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.steering_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleParam.steering_latency_param)
}

// optional .control.common.LatencyParam throttle_latency_param = 23;
inline bool VehicleParam::has_throttle_latency_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.throttle_latency_param_ != nullptr);
  return value;
}
inline void VehicleParam::clear_throttle_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.throttle_latency_param_ != nullptr) _impl_.throttle_latency_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::control::common::LatencyParam& VehicleParam::_internal_throttle_latency_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::LatencyParam* p = _impl_.throttle_latency_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::LatencyParam&>(::control::common::_LatencyParam_default_instance_);
}
inline const ::control::common::LatencyParam& VehicleParam::throttle_latency_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.throttle_latency_param)
  return _internal_throttle_latency_param();
}
inline void VehicleParam::unsafe_arena_set_allocated_throttle_latency_param(::control::common::LatencyParam* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.throttle_latency_param_);
  }
  _impl_.throttle_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleParam.throttle_latency_param)
}
inline ::control::common::LatencyParam* VehicleParam::release_throttle_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::LatencyParam* released = _impl_.throttle_latency_param_;
  _impl_.throttle_latency_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::LatencyParam* VehicleParam::unsafe_arena_release_throttle_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleParam.throttle_latency_param)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::LatencyParam* temp = _impl_.throttle_latency_param_;
  _impl_.throttle_latency_param_ = nullptr;
  return temp;
}
inline ::control::common::LatencyParam* VehicleParam::_internal_mutable_throttle_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.throttle_latency_param_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::LatencyParam>(GetArena());
    _impl_.throttle_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(p);
  }
  return _impl_.throttle_latency_param_;
}
inline ::control::common::LatencyParam* VehicleParam::mutable_throttle_latency_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::LatencyParam* _msg = _internal_mutable_throttle_latency_param();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleParam.throttle_latency_param)
  return _msg;
}
inline void VehicleParam::set_allocated_throttle_latency_param(::control::common::LatencyParam* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.throttle_latency_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.throttle_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleParam.throttle_latency_param)
}

// optional .control.common.LatencyParam brake_latency_param = 24;
inline bool VehicleParam::has_brake_latency_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brake_latency_param_ != nullptr);
  return value;
}
inline void VehicleParam::clear_brake_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brake_latency_param_ != nullptr) _impl_.brake_latency_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::control::common::LatencyParam& VehicleParam::_internal_brake_latency_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::LatencyParam* p = _impl_.brake_latency_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::LatencyParam&>(::control::common::_LatencyParam_default_instance_);
}
inline const ::control::common::LatencyParam& VehicleParam::brake_latency_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.brake_latency_param)
  return _internal_brake_latency_param();
}
inline void VehicleParam::unsafe_arena_set_allocated_brake_latency_param(::control::common::LatencyParam* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brake_latency_param_);
  }
  _impl_.brake_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleParam.brake_latency_param)
}
inline ::control::common::LatencyParam* VehicleParam::release_brake_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::LatencyParam* released = _impl_.brake_latency_param_;
  _impl_.brake_latency_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::LatencyParam* VehicleParam::unsafe_arena_release_brake_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleParam.brake_latency_param)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::LatencyParam* temp = _impl_.brake_latency_param_;
  _impl_.brake_latency_param_ = nullptr;
  return temp;
}
inline ::control::common::LatencyParam* VehicleParam::_internal_mutable_brake_latency_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brake_latency_param_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::LatencyParam>(GetArena());
    _impl_.brake_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(p);
  }
  return _impl_.brake_latency_param_;
}
inline ::control::common::LatencyParam* VehicleParam::mutable_brake_latency_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::common::LatencyParam* _msg = _internal_mutable_brake_latency_param();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleParam.brake_latency_param)
  return _msg;
}
inline void VehicleParam::set_allocated_brake_latency_param(::control::common::LatencyParam* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.brake_latency_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.brake_latency_param_ = reinterpret_cast<::control::common::LatencyParam*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleParam.brake_latency_param)
}

// optional double cubic_coeff = 25;
inline bool VehicleParam::has_cubic_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VehicleParam::clear_cubic_coeff() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cubic_coeff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double VehicleParam::cubic_coeff() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.cubic_coeff)
  return _internal_cubic_coeff();
}
inline void VehicleParam::set_cubic_coeff(double value) {
  _internal_set_cubic_coeff(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.cubic_coeff)
}
inline double VehicleParam::_internal_cubic_coeff() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cubic_coeff_;
}
inline void VehicleParam::_internal_set_cubic_coeff(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cubic_coeff_ = value;
}

// optional double quadratic_coeff = 26;
inline bool VehicleParam::has_quadratic_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VehicleParam::clear_quadratic_coeff() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quadratic_coeff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double VehicleParam::quadratic_coeff() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.quadratic_coeff)
  return _internal_quadratic_coeff();
}
inline void VehicleParam::set_quadratic_coeff(double value) {
  _internal_set_quadratic_coeff(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.quadratic_coeff)
}
inline double VehicleParam::_internal_quadratic_coeff() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quadratic_coeff_;
}
inline void VehicleParam::_internal_set_quadratic_coeff(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quadratic_coeff_ = value;
}

// optional double linear_coeff = 27;
inline bool VehicleParam::has_linear_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VehicleParam::clear_linear_coeff() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_coeff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double VehicleParam::linear_coeff() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.linear_coeff)
  return _internal_linear_coeff();
}
inline void VehicleParam::set_linear_coeff(double value) {
  _internal_set_linear_coeff(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.linear_coeff)
}
inline double VehicleParam::_internal_linear_coeff() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linear_coeff_;
}
inline void VehicleParam::_internal_set_linear_coeff(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_coeff_ = value;
}

// optional double offset = 28;
inline bool VehicleParam::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VehicleParam::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double VehicleParam::offset() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleParam.offset)
  return _internal_offset();
}
inline void VehicleParam::set_offset(double value) {
  _internal_set_offset(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.common.VehicleParam.offset)
}
inline double VehicleParam::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void VehicleParam::_internal_set_offset(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// VehicleConfig

// optional .control.common.Header header = 1;
inline bool VehicleConfig::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::control::common::Header& VehicleConfig::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& VehicleConfig::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleConfig.header)
  return _internal_header();
}
inline void VehicleConfig::unsafe_arena_set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleConfig.header)
}
inline ::control::common::Header* VehicleConfig::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* VehicleConfig::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleConfig.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::control::common::Header* VehicleConfig::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.header_;
}
inline ::control::common::Header* VehicleConfig::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleConfig.header)
  return _msg;
}
inline void VehicleConfig::set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleConfig.header)
}

// optional .control.common.VehicleParam vehicle_param = 2;
inline bool VehicleConfig::has_vehicle_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_param_ != nullptr);
  return value;
}
inline void VehicleConfig::clear_vehicle_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vehicle_param_ != nullptr) _impl_.vehicle_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::control::common::VehicleParam& VehicleConfig::_internal_vehicle_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::VehicleParam* p = _impl_.vehicle_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::VehicleParam&>(::control::common::_VehicleParam_default_instance_);
}
inline const ::control::common::VehicleParam& VehicleConfig::vehicle_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleConfig.vehicle_param)
  return _internal_vehicle_param();
}
inline void VehicleConfig::unsafe_arena_set_allocated_vehicle_param(::control::common::VehicleParam* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_param_);
  }
  _impl_.vehicle_param_ = reinterpret_cast<::control::common::VehicleParam*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleConfig.vehicle_param)
}
inline ::control::common::VehicleParam* VehicleConfig::release_vehicle_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::VehicleParam* released = _impl_.vehicle_param_;
  _impl_.vehicle_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::VehicleParam* VehicleConfig::unsafe_arena_release_vehicle_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleConfig.vehicle_param)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::VehicleParam* temp = _impl_.vehicle_param_;
  _impl_.vehicle_param_ = nullptr;
  return temp;
}
inline ::control::common::VehicleParam* VehicleConfig::_internal_mutable_vehicle_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vehicle_param_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::VehicleParam>(GetArena());
    _impl_.vehicle_param_ = reinterpret_cast<::control::common::VehicleParam*>(p);
  }
  return _impl_.vehicle_param_;
}
inline ::control::common::VehicleParam* VehicleConfig::mutable_vehicle_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::VehicleParam* _msg = _internal_mutable_vehicle_param();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleConfig.vehicle_param)
  return _msg;
}
inline void VehicleConfig::set_allocated_vehicle_param(::control::common::VehicleParam* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.vehicle_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.vehicle_param_ = reinterpret_cast<::control::common::VehicleParam*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleConfig.vehicle_param)
}

// optional .control.common.Extrinsics extrinsics = 3;
inline bool VehicleConfig::has_extrinsics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extrinsics_ != nullptr);
  return value;
}
inline void VehicleConfig::clear_extrinsics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.extrinsics_ != nullptr) _impl_.extrinsics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::control::common::Extrinsics& VehicleConfig::_internal_extrinsics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Extrinsics* p = _impl_.extrinsics_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Extrinsics&>(::control::common::_Extrinsics_default_instance_);
}
inline const ::control::common::Extrinsics& VehicleConfig::extrinsics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleConfig.extrinsics)
  return _internal_extrinsics();
}
inline void VehicleConfig::unsafe_arena_set_allocated_extrinsics(::control::common::Extrinsics* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extrinsics_);
  }
  _impl_.extrinsics_ = reinterpret_cast<::control::common::Extrinsics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleConfig.extrinsics)
}
inline ::control::common::Extrinsics* VehicleConfig::release_extrinsics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Extrinsics* released = _impl_.extrinsics_;
  _impl_.extrinsics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Extrinsics* VehicleConfig::unsafe_arena_release_extrinsics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleConfig.extrinsics)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Extrinsics* temp = _impl_.extrinsics_;
  _impl_.extrinsics_ = nullptr;
  return temp;
}
inline ::control::common::Extrinsics* VehicleConfig::_internal_mutable_extrinsics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.extrinsics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Extrinsics>(GetArena());
    _impl_.extrinsics_ = reinterpret_cast<::control::common::Extrinsics*>(p);
  }
  return _impl_.extrinsics_;
}
inline ::control::common::Extrinsics* VehicleConfig::mutable_extrinsics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::Extrinsics* _msg = _internal_mutable_extrinsics();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleConfig.extrinsics)
  return _msg;
}
inline void VehicleConfig::set_allocated_extrinsics(::control::common::Extrinsics* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.extrinsics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.extrinsics_ = reinterpret_cast<::control::common::Extrinsics*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleConfig.extrinsics)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::common::VehicleBrand> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::common::VehicleBrand>() {
  return ::control::common::VehicleBrand_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_2epb_2eh

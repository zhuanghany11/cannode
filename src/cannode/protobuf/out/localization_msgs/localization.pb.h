// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization_msgs/localization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/geometry.pb.h"
#include "common_msgs/basic_msgs/pnc_point.pb.h"
#include "localization_msgs/localization_status.pb.h"
#include "localization_msgs/pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localization_5fmsgs_2flocalization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localization_5fmsgs_2flocalization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localization_5fmsgs_2flocalization_2eproto;
namespace control {
namespace localization {
class LocalizationEstimate;
class LocalizationEstimateDefaultTypeInternal;
extern LocalizationEstimateDefaultTypeInternal _LocalizationEstimate_default_instance_;
class LocalizationStatus;
class LocalizationStatusDefaultTypeInternal;
extern LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
class Uncertainty;
class UncertaintyDefaultTypeInternal;
extern UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
}  // namespace localization
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::localization::LocalizationEstimate* Arena::CreateMaybeMessage<::control::localization::LocalizationEstimate>(Arena*);
template<> ::control::localization::LocalizationStatus* Arena::CreateMaybeMessage<::control::localization::LocalizationStatus>(Arena*);
template<> ::control::localization::Uncertainty* Arena::CreateMaybeMessage<::control::localization::Uncertainty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {
namespace localization {

enum MeasureState : int {
  OK = 0,
  WARNNING = 1,
  ERROR = 2,
  CRITICAL_ERROR = 3,
  FATAL_ERROR = 4
};
bool MeasureState_IsValid(int value);
constexpr MeasureState MeasureState_MIN = OK;
constexpr MeasureState MeasureState_MAX = FATAL_ERROR;
constexpr int MeasureState_ARRAYSIZE = MeasureState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeasureState_descriptor();
template<typename T>
inline const std::string& MeasureState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MeasureState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MeasureState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MeasureState_descriptor(), enum_t_value);
}
inline bool MeasureState_Parse(
    const std::string& name, MeasureState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MeasureState>(
    MeasureState_descriptor(), name, value);
}
// ===================================================================

class Uncertainty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.localization.Uncertainty) */ {
 public:
  inline Uncertainty() : Uncertainty(nullptr) {};
  virtual ~Uncertainty();

  Uncertainty(const Uncertainty& from);
  Uncertainty(Uncertainty&& from) noexcept
    : Uncertainty() {
    *this = ::std::move(from);
  }

  inline Uncertainty& operator=(const Uncertainty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uncertainty& operator=(Uncertainty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uncertainty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uncertainty* internal_default_instance() {
    return reinterpret_cast<const Uncertainty*>(
               &_Uncertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uncertainty& a, Uncertainty& b) {
    a.Swap(&b);
  }
  inline void Swap(Uncertainty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uncertainty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uncertainty* New() const final {
    return CreateMaybeMessage<Uncertainty>(nullptr);
  }

  Uncertainty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uncertainty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uncertainty& from);
  void MergeFrom(const Uncertainty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uncertainty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.localization.Uncertainty";
  }
  protected:
  explicit Uncertainty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localization_5fmsgs_2flocalization_2eproto);
    return ::descriptor_table_localization_5fmsgs_2flocalization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionStdDevFieldNumber = 1,
    kOrientationStdDevFieldNumber = 2,
    kLinearVelocityStdDevFieldNumber = 3,
    kLinearAccelerationStdDevFieldNumber = 4,
    kAngularVelocityStdDevFieldNumber = 5,
  };
  // optional .control.common.Point3D position_std_dev = 1;
  bool has_position_std_dev() const;
  private:
  bool _internal_has_position_std_dev() const;
  public:
  void clear_position_std_dev();
  const ::control::common::Point3D& position_std_dev() const;
  ::control::common::Point3D* release_position_std_dev();
  ::control::common::Point3D* mutable_position_std_dev();
  void set_allocated_position_std_dev(::control::common::Point3D* position_std_dev);
  private:
  const ::control::common::Point3D& _internal_position_std_dev() const;
  ::control::common::Point3D* _internal_mutable_position_std_dev();
  public:
  void unsafe_arena_set_allocated_position_std_dev(
      ::control::common::Point3D* position_std_dev);
  ::control::common::Point3D* unsafe_arena_release_position_std_dev();

  // optional .control.common.Point3D orientation_std_dev = 2;
  bool has_orientation_std_dev() const;
  private:
  bool _internal_has_orientation_std_dev() const;
  public:
  void clear_orientation_std_dev();
  const ::control::common::Point3D& orientation_std_dev() const;
  ::control::common::Point3D* release_orientation_std_dev();
  ::control::common::Point3D* mutable_orientation_std_dev();
  void set_allocated_orientation_std_dev(::control::common::Point3D* orientation_std_dev);
  private:
  const ::control::common::Point3D& _internal_orientation_std_dev() const;
  ::control::common::Point3D* _internal_mutable_orientation_std_dev();
  public:
  void unsafe_arena_set_allocated_orientation_std_dev(
      ::control::common::Point3D* orientation_std_dev);
  ::control::common::Point3D* unsafe_arena_release_orientation_std_dev();

  // optional .control.common.Point3D linear_velocity_std_dev = 3;
  bool has_linear_velocity_std_dev() const;
  private:
  bool _internal_has_linear_velocity_std_dev() const;
  public:
  void clear_linear_velocity_std_dev();
  const ::control::common::Point3D& linear_velocity_std_dev() const;
  ::control::common::Point3D* release_linear_velocity_std_dev();
  ::control::common::Point3D* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::control::common::Point3D* linear_velocity_std_dev);
  private:
  const ::control::common::Point3D& _internal_linear_velocity_std_dev() const;
  ::control::common::Point3D* _internal_mutable_linear_velocity_std_dev();
  public:
  void unsafe_arena_set_allocated_linear_velocity_std_dev(
      ::control::common::Point3D* linear_velocity_std_dev);
  ::control::common::Point3D* unsafe_arena_release_linear_velocity_std_dev();

  // optional .control.common.Point3D linear_acceleration_std_dev = 4;
  bool has_linear_acceleration_std_dev() const;
  private:
  bool _internal_has_linear_acceleration_std_dev() const;
  public:
  void clear_linear_acceleration_std_dev();
  const ::control::common::Point3D& linear_acceleration_std_dev() const;
  ::control::common::Point3D* release_linear_acceleration_std_dev();
  ::control::common::Point3D* mutable_linear_acceleration_std_dev();
  void set_allocated_linear_acceleration_std_dev(::control::common::Point3D* linear_acceleration_std_dev);
  private:
  const ::control::common::Point3D& _internal_linear_acceleration_std_dev() const;
  ::control::common::Point3D* _internal_mutable_linear_acceleration_std_dev();
  public:
  void unsafe_arena_set_allocated_linear_acceleration_std_dev(
      ::control::common::Point3D* linear_acceleration_std_dev);
  ::control::common::Point3D* unsafe_arena_release_linear_acceleration_std_dev();

  // optional .control.common.Point3D angular_velocity_std_dev = 5;
  bool has_angular_velocity_std_dev() const;
  private:
  bool _internal_has_angular_velocity_std_dev() const;
  public:
  void clear_angular_velocity_std_dev();
  const ::control::common::Point3D& angular_velocity_std_dev() const;
  ::control::common::Point3D* release_angular_velocity_std_dev();
  ::control::common::Point3D* mutable_angular_velocity_std_dev();
  void set_allocated_angular_velocity_std_dev(::control::common::Point3D* angular_velocity_std_dev);
  private:
  const ::control::common::Point3D& _internal_angular_velocity_std_dev() const;
  ::control::common::Point3D* _internal_mutable_angular_velocity_std_dev();
  public:
  void unsafe_arena_set_allocated_angular_velocity_std_dev(
      ::control::common::Point3D* angular_velocity_std_dev);
  ::control::common::Point3D* unsafe_arena_release_angular_velocity_std_dev();

  // @@protoc_insertion_point(class_scope:control.localization.Uncertainty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::Point3D* position_std_dev_;
  ::control::common::Point3D* orientation_std_dev_;
  ::control::common::Point3D* linear_velocity_std_dev_;
  ::control::common::Point3D* linear_acceleration_std_dev_;
  ::control::common::Point3D* angular_velocity_std_dev_;
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_2eproto;
};
// -------------------------------------------------------------------

class LocalizationEstimate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.localization.LocalizationEstimate) */ {
 public:
  inline LocalizationEstimate() : LocalizationEstimate(nullptr) {};
  virtual ~LocalizationEstimate();

  LocalizationEstimate(const LocalizationEstimate& from);
  LocalizationEstimate(LocalizationEstimate&& from) noexcept
    : LocalizationEstimate() {
    *this = ::std::move(from);
  }

  inline LocalizationEstimate& operator=(const LocalizationEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationEstimate& operator=(LocalizationEstimate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalizationEstimate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationEstimate* internal_default_instance() {
    return reinterpret_cast<const LocalizationEstimate*>(
               &_LocalizationEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalizationEstimate& a, LocalizationEstimate& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationEstimate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationEstimate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalizationEstimate* New() const final {
    return CreateMaybeMessage<LocalizationEstimate>(nullptr);
  }

  LocalizationEstimate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationEstimate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalizationEstimate& from);
  void MergeFrom(const LocalizationEstimate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationEstimate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.localization.LocalizationEstimate";
  }
  protected:
  explicit LocalizationEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localization_5fmsgs_2flocalization_2eproto);
    return ::descriptor_table_localization_5fmsgs_2flocalization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
    kUncertaintyFieldNumber = 3,
    kMsfStatusFieldNumber = 6,
    kSensorStatusFieldNumber = 7,
    kMeasurementTimeFieldNumber = 4,
  };
  // repeated .control.common.TrajectoryPoint trajectory_point = 5;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::control::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::common::TrajectoryPoint >*
      mutable_trajectory_point();
  private:
  const ::control::common::TrajectoryPoint& _internal_trajectory_point(int index) const;
  ::control::common::TrajectoryPoint* _internal_add_trajectory_point();
  public:
  const ::control::common::TrajectoryPoint& trajectory_point(int index) const;
  ::control::common::TrajectoryPoint* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::common::TrajectoryPoint >&
      trajectory_point() const;

  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // optional .control.localization.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::control::localization::Pose& pose() const;
  ::control::localization::Pose* release_pose();
  ::control::localization::Pose* mutable_pose();
  void set_allocated_pose(::control::localization::Pose* pose);
  private:
  const ::control::localization::Pose& _internal_pose() const;
  ::control::localization::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::control::localization::Pose* pose);
  ::control::localization::Pose* unsafe_arena_release_pose();

  // optional .control.localization.Uncertainty uncertainty = 3;
  bool has_uncertainty() const;
  private:
  bool _internal_has_uncertainty() const;
  public:
  void clear_uncertainty();
  const ::control::localization::Uncertainty& uncertainty() const;
  ::control::localization::Uncertainty* release_uncertainty();
  ::control::localization::Uncertainty* mutable_uncertainty();
  void set_allocated_uncertainty(::control::localization::Uncertainty* uncertainty);
  private:
  const ::control::localization::Uncertainty& _internal_uncertainty() const;
  ::control::localization::Uncertainty* _internal_mutable_uncertainty();
  public:
  void unsafe_arena_set_allocated_uncertainty(
      ::control::localization::Uncertainty* uncertainty);
  ::control::localization::Uncertainty* unsafe_arena_release_uncertainty();

  // optional .control.localization.MsfStatus msf_status = 6;
  bool has_msf_status() const;
  private:
  bool _internal_has_msf_status() const;
  public:
  void clear_msf_status();
  const ::control::localization::MsfStatus& msf_status() const;
  ::control::localization::MsfStatus* release_msf_status();
  ::control::localization::MsfStatus* mutable_msf_status();
  void set_allocated_msf_status(::control::localization::MsfStatus* msf_status);
  private:
  const ::control::localization::MsfStatus& _internal_msf_status() const;
  ::control::localization::MsfStatus* _internal_mutable_msf_status();
  public:
  void unsafe_arena_set_allocated_msf_status(
      ::control::localization::MsfStatus* msf_status);
  ::control::localization::MsfStatus* unsafe_arena_release_msf_status();

  // optional .control.localization.MsfSensorMsgStatus sensor_status = 7;
  bool has_sensor_status() const;
  private:
  bool _internal_has_sensor_status() const;
  public:
  void clear_sensor_status();
  const ::control::localization::MsfSensorMsgStatus& sensor_status() const;
  ::control::localization::MsfSensorMsgStatus* release_sensor_status();
  ::control::localization::MsfSensorMsgStatus* mutable_sensor_status();
  void set_allocated_sensor_status(::control::localization::MsfSensorMsgStatus* sensor_status);
  private:
  const ::control::localization::MsfSensorMsgStatus& _internal_sensor_status() const;
  ::control::localization::MsfSensorMsgStatus* _internal_mutable_sensor_status();
  public:
  void unsafe_arena_set_allocated_sensor_status(
      ::control::localization::MsfSensorMsgStatus* sensor_status);
  ::control::localization::MsfSensorMsgStatus* unsafe_arena_release_sensor_status();

  // optional double measurement_time = 4;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.localization.LocalizationEstimate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::common::TrajectoryPoint > trajectory_point_;
  ::control::common::Header* header_;
  ::control::localization::Pose* pose_;
  ::control::localization::Uncertainty* uncertainty_;
  ::control::localization::MsfStatus* msf_status_;
  ::control::localization::MsfSensorMsgStatus* sensor_status_;
  double measurement_time_;
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_2eproto;
};
// -------------------------------------------------------------------

class LocalizationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.localization.LocalizationStatus) */ {
 public:
  inline LocalizationStatus() : LocalizationStatus(nullptr) {};
  virtual ~LocalizationStatus();

  LocalizationStatus(const LocalizationStatus& from);
  LocalizationStatus(LocalizationStatus&& from) noexcept
    : LocalizationStatus() {
    *this = ::std::move(from);
  }

  inline LocalizationStatus& operator=(const LocalizationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationStatus& operator=(LocalizationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalizationStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationStatus* internal_default_instance() {
    return reinterpret_cast<const LocalizationStatus*>(
               &_LocalizationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalizationStatus& a, LocalizationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalizationStatus* New() const final {
    return CreateMaybeMessage<LocalizationStatus>(nullptr);
  }

  LocalizationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalizationStatus& from);
  void MergeFrom(const LocalizationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.localization.LocalizationStatus";
  }
  protected:
  explicit LocalizationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localization_5fmsgs_2flocalization_2eproto);
    return ::descriptor_table_localization_5fmsgs_2flocalization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateMessageFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kFusionStatusFieldNumber = 2,
    kGnssStatusFieldNumber = 3,
    kMeasurementTimeFieldNumber = 5,
    kLidarStatusFieldNumber = 4,
  };
  // optional string state_message = 6;
  bool has_state_message() const;
  private:
  bool _internal_has_state_message() const;
  public:
  void clear_state_message();
  const std::string& state_message() const;
  void set_state_message(const std::string& value);
  void set_state_message(std::string&& value);
  void set_state_message(const char* value);
  void set_state_message(const char* value, size_t size);
  std::string* mutable_state_message();
  std::string* release_state_message();
  void set_allocated_state_message(std::string* state_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state_message(
      std::string* state_message);
  private:
  const std::string& _internal_state_message() const;
  void _internal_set_state_message(const std::string& value);
  std::string* _internal_mutable_state_message();
  public:

  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // optional .control.localization.MeasureState fusion_status = 2;
  bool has_fusion_status() const;
  private:
  bool _internal_has_fusion_status() const;
  public:
  void clear_fusion_status();
  ::control::localization::MeasureState fusion_status() const;
  void set_fusion_status(::control::localization::MeasureState value);
  private:
  ::control::localization::MeasureState _internal_fusion_status() const;
  void _internal_set_fusion_status(::control::localization::MeasureState value);
  public:

  // optional .control.localization.MeasureState gnss_status = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_gnss_status() const;
  private:
  bool _internal_has_gnss_status() const;
  public:
  PROTOBUF_DEPRECATED void clear_gnss_status();
  PROTOBUF_DEPRECATED ::control::localization::MeasureState gnss_status() const;
  PROTOBUF_DEPRECATED void set_gnss_status(::control::localization::MeasureState value);
  private:
  ::control::localization::MeasureState _internal_gnss_status() const;
  void _internal_set_gnss_status(::control::localization::MeasureState value);
  public:

  // optional double measurement_time = 5;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional .control.localization.MeasureState lidar_status = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_lidar_status() const;
  private:
  bool _internal_has_lidar_status() const;
  public:
  PROTOBUF_DEPRECATED void clear_lidar_status();
  PROTOBUF_DEPRECATED ::control::localization::MeasureState lidar_status() const;
  PROTOBUF_DEPRECATED void set_lidar_status(::control::localization::MeasureState value);
  private:
  ::control::localization::MeasureState _internal_lidar_status() const;
  void _internal_set_lidar_status(::control::localization::MeasureState value);
  public:

  // @@protoc_insertion_point(class_scope:control.localization.LocalizationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_message_;
  ::control::common::Header* header_;
  int fusion_status_;
  int gnss_status_;
  double measurement_time_;
  int lidar_status_;
  friend struct ::TableStruct_localization_5fmsgs_2flocalization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uncertainty

// optional .control.common.Point3D position_std_dev = 1;
inline bool Uncertainty::_internal_has_position_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_std_dev_ != nullptr);
  return value;
}
inline bool Uncertainty::has_position_std_dev() const {
  return _internal_has_position_std_dev();
}
inline const ::control::common::Point3D& Uncertainty::_internal_position_std_dev() const {
  const ::control::common::Point3D* p = position_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Point3D*>(
      &::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::position_std_dev() const {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.position_std_dev)
  return _internal_position_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_position_std_dev(
    ::control::common::Point3D* position_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_std_dev_);
  }
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.position_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_position_std_dev() {
  auto temp = unsafe_arena_release_position_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_position_std_dev() {
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.position_std_dev)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_position_std_dev() {
  _has_bits_[0] |= 0x00000001u;
  if (position_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Point3D>(GetArena());
    position_std_dev_ = p;
  }
  return position_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_position_std_dev() {
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.position_std_dev)
  return _internal_mutable_position_std_dev();
}
inline void Uncertainty::set_allocated_position_std_dev(::control::common::Point3D* position_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_std_dev_);
  }
  if (position_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      position_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_std_dev_ = position_std_dev;
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.position_std_dev)
}

// optional .control.common.Point3D orientation_std_dev = 2;
inline bool Uncertainty::_internal_has_orientation_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || orientation_std_dev_ != nullptr);
  return value;
}
inline bool Uncertainty::has_orientation_std_dev() const {
  return _internal_has_orientation_std_dev();
}
inline const ::control::common::Point3D& Uncertainty::_internal_orientation_std_dev() const {
  const ::control::common::Point3D* p = orientation_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Point3D*>(
      &::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::orientation_std_dev() const {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.orientation_std_dev)
  return _internal_orientation_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_orientation_std_dev(
    ::control::common::Point3D* orientation_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_std_dev_);
  }
  orientation_std_dev_ = orientation_std_dev;
  if (orientation_std_dev) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.orientation_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_orientation_std_dev() {
  auto temp = unsafe_arena_release_orientation_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_orientation_std_dev() {
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.orientation_std_dev)
  _has_bits_[0] &= ~0x00000002u;
  ::control::common::Point3D* temp = orientation_std_dev_;
  orientation_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_orientation_std_dev() {
  _has_bits_[0] |= 0x00000002u;
  if (orientation_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Point3D>(GetArena());
    orientation_std_dev_ = p;
  }
  return orientation_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_orientation_std_dev() {
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.orientation_std_dev)
  return _internal_mutable_orientation_std_dev();
}
inline void Uncertainty::set_allocated_orientation_std_dev(::control::common::Point3D* orientation_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_std_dev_);
  }
  if (orientation_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      orientation_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orientation_std_dev_ = orientation_std_dev;
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.orientation_std_dev)
}

// optional .control.common.Point3D linear_velocity_std_dev = 3;
inline bool Uncertainty::_internal_has_linear_velocity_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_velocity_std_dev_ != nullptr);
  return value;
}
inline bool Uncertainty::has_linear_velocity_std_dev() const {
  return _internal_has_linear_velocity_std_dev();
}
inline const ::control::common::Point3D& Uncertainty::_internal_linear_velocity_std_dev() const {
  const ::control::common::Point3D* p = linear_velocity_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Point3D*>(
      &::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.linear_velocity_std_dev)
  return _internal_linear_velocity_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_linear_velocity_std_dev(
    ::control::common::Point3D* linear_velocity_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_std_dev_);
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.linear_velocity_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  auto temp = unsafe_arena_release_linear_velocity_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.linear_velocity_std_dev)
  _has_bits_[0] &= ~0x00000004u;
  ::control::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_velocity_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Point3D>(GetArena());
    linear_velocity_std_dev_ = p;
  }
  return linear_velocity_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.linear_velocity_std_dev)
  return _internal_mutable_linear_velocity_std_dev();
}
inline void Uncertainty::set_allocated_linear_velocity_std_dev(::control::common::Point3D* linear_velocity_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_std_dev_);
  }
  if (linear_velocity_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      linear_velocity_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.linear_velocity_std_dev)
}

// optional .control.common.Point3D linear_acceleration_std_dev = 4;
inline bool Uncertainty::_internal_has_linear_acceleration_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || linear_acceleration_std_dev_ != nullptr);
  return value;
}
inline bool Uncertainty::has_linear_acceleration_std_dev() const {
  return _internal_has_linear_acceleration_std_dev();
}
inline const ::control::common::Point3D& Uncertainty::_internal_linear_acceleration_std_dev() const {
  const ::control::common::Point3D* p = linear_acceleration_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Point3D*>(
      &::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::linear_acceleration_std_dev() const {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.linear_acceleration_std_dev)
  return _internal_linear_acceleration_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_linear_acceleration_std_dev(
    ::control::common::Point3D* linear_acceleration_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_std_dev_);
  }
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  if (linear_acceleration_std_dev) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.linear_acceleration_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  auto temp = unsafe_arena_release_linear_acceleration_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.linear_acceleration_std_dev)
  _has_bits_[0] &= ~0x00000008u;
  ::control::common::Point3D* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_linear_acceleration_std_dev() {
  _has_bits_[0] |= 0x00000008u;
  if (linear_acceleration_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Point3D>(GetArena());
    linear_acceleration_std_dev_ = p;
  }
  return linear_acceleration_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.linear_acceleration_std_dev)
  return _internal_mutable_linear_acceleration_std_dev();
}
inline void Uncertainty::set_allocated_linear_acceleration_std_dev(::control::common::Point3D* linear_acceleration_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_std_dev_);
  }
  if (linear_acceleration_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      linear_acceleration_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.linear_acceleration_std_dev)
}

// optional .control.common.Point3D angular_velocity_std_dev = 5;
inline bool Uncertainty::_internal_has_angular_velocity_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_std_dev_ != nullptr);
  return value;
}
inline bool Uncertainty::has_angular_velocity_std_dev() const {
  return _internal_has_angular_velocity_std_dev();
}
inline const ::control::common::Point3D& Uncertainty::_internal_angular_velocity_std_dev() const {
  const ::control::common::Point3D* p = angular_velocity_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Point3D*>(
      &::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Uncertainty::angular_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:control.localization.Uncertainty.angular_velocity_std_dev)
  return _internal_angular_velocity_std_dev();
}
inline void Uncertainty::unsafe_arena_set_allocated_angular_velocity_std_dev(
    ::control::common::Point3D* angular_velocity_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_std_dev_);
  }
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  if (angular_velocity_std_dev) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Uncertainty.angular_velocity_std_dev)
}
inline ::control::common::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  auto temp = unsafe_arena_release_angular_velocity_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Point3D* Uncertainty::unsafe_arena_release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:control.localization.Uncertainty.angular_velocity_std_dev)
  _has_bits_[0] &= ~0x00000010u;
  ::control::common::Point3D* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Uncertainty::_internal_mutable_angular_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
  if (angular_velocity_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Point3D>(GetArena());
    angular_velocity_std_dev_ = p;
  }
  return angular_velocity_std_dev_;
}
inline ::control::common::Point3D* Uncertainty::mutable_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_mutable:control.localization.Uncertainty.angular_velocity_std_dev)
  return _internal_mutable_angular_velocity_std_dev();
}
inline void Uncertainty::set_allocated_angular_velocity_std_dev(::control::common::Point3D* angular_velocity_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_std_dev_);
  }
  if (angular_velocity_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      angular_velocity_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:control.localization.Uncertainty.angular_velocity_std_dev)
}

// -------------------------------------------------------------------

// LocalizationEstimate

// optional .control.common.Header header = 1;
inline bool LocalizationEstimate::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LocalizationEstimate::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& LocalizationEstimate::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& LocalizationEstimate::header() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.header)
  return _internal_header();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.header)
}
inline ::control::common::Header* LocalizationEstimate::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* LocalizationEstimate::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.header)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* LocalizationEstimate::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* LocalizationEstimate::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.header)
  return _internal_mutable_header();
}
inline void LocalizationEstimate::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.header)
}

// optional .control.localization.Pose pose = 2;
inline bool LocalizationEstimate::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool LocalizationEstimate::has_pose() const {
  return _internal_has_pose();
}
inline const ::control::localization::Pose& LocalizationEstimate::_internal_pose() const {
  const ::control::localization::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::localization::Pose*>(
      &::control::localization::_Pose_default_instance_);
}
inline const ::control::localization::Pose& LocalizationEstimate::pose() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.pose)
  return _internal_pose();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_pose(
    ::control::localization::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.pose)
}
inline ::control::localization::Pose* LocalizationEstimate::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::localization::Pose* LocalizationEstimate::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.pose)
  _has_bits_[0] &= ~0x00000002u;
  ::control::localization::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::control::localization::Pose* LocalizationEstimate::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000002u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::localization::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::control::localization::Pose* LocalizationEstimate::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.pose)
  return _internal_mutable_pose();
}
inline void LocalizationEstimate::set_allocated_pose(::control::localization::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.pose)
}

// optional .control.localization.Uncertainty uncertainty = 3;
inline bool LocalizationEstimate::_internal_has_uncertainty() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || uncertainty_ != nullptr);
  return value;
}
inline bool LocalizationEstimate::has_uncertainty() const {
  return _internal_has_uncertainty();
}
inline void LocalizationEstimate::clear_uncertainty() {
  if (uncertainty_ != nullptr) uncertainty_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::control::localization::Uncertainty& LocalizationEstimate::_internal_uncertainty() const {
  const ::control::localization::Uncertainty* p = uncertainty_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::localization::Uncertainty*>(
      &::control::localization::_Uncertainty_default_instance_);
}
inline const ::control::localization::Uncertainty& LocalizationEstimate::uncertainty() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.uncertainty)
  return _internal_uncertainty();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_uncertainty(
    ::control::localization::Uncertainty* uncertainty) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uncertainty_);
  }
  uncertainty_ = uncertainty;
  if (uncertainty) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.uncertainty)
}
inline ::control::localization::Uncertainty* LocalizationEstimate::release_uncertainty() {
  auto temp = unsafe_arena_release_uncertainty();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::localization::Uncertainty* LocalizationEstimate::unsafe_arena_release_uncertainty() {
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.uncertainty)
  _has_bits_[0] &= ~0x00000004u;
  ::control::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = nullptr;
  return temp;
}
inline ::control::localization::Uncertainty* LocalizationEstimate::_internal_mutable_uncertainty() {
  _has_bits_[0] |= 0x00000004u;
  if (uncertainty_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::localization::Uncertainty>(GetArena());
    uncertainty_ = p;
  }
  return uncertainty_;
}
inline ::control::localization::Uncertainty* LocalizationEstimate::mutable_uncertainty() {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.uncertainty)
  return _internal_mutable_uncertainty();
}
inline void LocalizationEstimate::set_allocated_uncertainty(::control::localization::Uncertainty* uncertainty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uncertainty_;
  }
  if (uncertainty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uncertainty);
    if (message_arena != submessage_arena) {
      uncertainty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uncertainty, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uncertainty_ = uncertainty;
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.uncertainty)
}

// optional double measurement_time = 4;
inline bool LocalizationEstimate::_internal_has_measurement_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LocalizationEstimate::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void LocalizationEstimate::clear_measurement_time() {
  measurement_time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LocalizationEstimate::_internal_measurement_time() const {
  return measurement_time_;
}
inline double LocalizationEstimate::measurement_time() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.measurement_time)
  return _internal_measurement_time();
}
inline void LocalizationEstimate::_internal_set_measurement_time(double value) {
  _has_bits_[0] |= 0x00000020u;
  measurement_time_ = value;
}
inline void LocalizationEstimate::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:control.localization.LocalizationEstimate.measurement_time)
}

// repeated .control.common.TrajectoryPoint trajectory_point = 5;
inline int LocalizationEstimate::_internal_trajectory_point_size() const {
  return trajectory_point_.size();
}
inline int LocalizationEstimate::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::control::common::TrajectoryPoint* LocalizationEstimate::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::common::TrajectoryPoint >*
LocalizationEstimate::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:control.localization.LocalizationEstimate.trajectory_point)
  return &trajectory_point_;
}
inline const ::control::common::TrajectoryPoint& LocalizationEstimate::_internal_trajectory_point(int index) const {
  return trajectory_point_.Get(index);
}
inline const ::control::common::TrajectoryPoint& LocalizationEstimate::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::control::common::TrajectoryPoint* LocalizationEstimate::_internal_add_trajectory_point() {
  return trajectory_point_.Add();
}
inline ::control::common::TrajectoryPoint* LocalizationEstimate::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:control.localization.LocalizationEstimate.trajectory_point)
  return _internal_add_trajectory_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::common::TrajectoryPoint >&
LocalizationEstimate::trajectory_point() const {
  // @@protoc_insertion_point(field_list:control.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_;
}

// optional .control.localization.MsfStatus msf_status = 6;
inline bool LocalizationEstimate::_internal_has_msf_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || msf_status_ != nullptr);
  return value;
}
inline bool LocalizationEstimate::has_msf_status() const {
  return _internal_has_msf_status();
}
inline const ::control::localization::MsfStatus& LocalizationEstimate::_internal_msf_status() const {
  const ::control::localization::MsfStatus* p = msf_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::localization::MsfStatus*>(
      &::control::localization::_MsfStatus_default_instance_);
}
inline const ::control::localization::MsfStatus& LocalizationEstimate::msf_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.msf_status)
  return _internal_msf_status();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_msf_status(
    ::control::localization::MsfStatus* msf_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msf_status_);
  }
  msf_status_ = msf_status;
  if (msf_status) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.msf_status)
}
inline ::control::localization::MsfStatus* LocalizationEstimate::release_msf_status() {
  auto temp = unsafe_arena_release_msf_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::localization::MsfStatus* LocalizationEstimate::unsafe_arena_release_msf_status() {
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.msf_status)
  _has_bits_[0] &= ~0x00000008u;
  ::control::localization::MsfStatus* temp = msf_status_;
  msf_status_ = nullptr;
  return temp;
}
inline ::control::localization::MsfStatus* LocalizationEstimate::_internal_mutable_msf_status() {
  _has_bits_[0] |= 0x00000008u;
  if (msf_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::localization::MsfStatus>(GetArena());
    msf_status_ = p;
  }
  return msf_status_;
}
inline ::control::localization::MsfStatus* LocalizationEstimate::mutable_msf_status() {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.msf_status)
  return _internal_mutable_msf_status();
}
inline void LocalizationEstimate::set_allocated_msf_status(::control::localization::MsfStatus* msf_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msf_status_);
  }
  if (msf_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msf_status)->GetArena();
    if (message_arena != submessage_arena) {
      msf_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msf_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  msf_status_ = msf_status;
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.msf_status)
}

// optional .control.localization.MsfSensorMsgStatus sensor_status = 7;
inline bool LocalizationEstimate::_internal_has_sensor_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || sensor_status_ != nullptr);
  return value;
}
inline bool LocalizationEstimate::has_sensor_status() const {
  return _internal_has_sensor_status();
}
inline const ::control::localization::MsfSensorMsgStatus& LocalizationEstimate::_internal_sensor_status() const {
  const ::control::localization::MsfSensorMsgStatus* p = sensor_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::localization::MsfSensorMsgStatus*>(
      &::control::localization::_MsfSensorMsgStatus_default_instance_);
}
inline const ::control::localization::MsfSensorMsgStatus& LocalizationEstimate::sensor_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationEstimate.sensor_status)
  return _internal_sensor_status();
}
inline void LocalizationEstimate::unsafe_arena_set_allocated_sensor_status(
    ::control::localization::MsfSensorMsgStatus* sensor_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_status_);
  }
  sensor_status_ = sensor_status;
  if (sensor_status) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationEstimate.sensor_status)
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::release_sensor_status() {
  auto temp = unsafe_arena_release_sensor_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::unsafe_arena_release_sensor_status() {
  // @@protoc_insertion_point(field_release:control.localization.LocalizationEstimate.sensor_status)
  _has_bits_[0] &= ~0x00000010u;
  ::control::localization::MsfSensorMsgStatus* temp = sensor_status_;
  sensor_status_ = nullptr;
  return temp;
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::_internal_mutable_sensor_status() {
  _has_bits_[0] |= 0x00000010u;
  if (sensor_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::localization::MsfSensorMsgStatus>(GetArena());
    sensor_status_ = p;
  }
  return sensor_status_;
}
inline ::control::localization::MsfSensorMsgStatus* LocalizationEstimate::mutable_sensor_status() {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationEstimate.sensor_status)
  return _internal_mutable_sensor_status();
}
inline void LocalizationEstimate::set_allocated_sensor_status(::control::localization::MsfSensorMsgStatus* sensor_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_status_);
  }
  if (sensor_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_status)->GetArena();
    if (message_arena != submessage_arena) {
      sensor_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sensor_status_ = sensor_status;
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationEstimate.sensor_status)
}

// -------------------------------------------------------------------

// LocalizationStatus

// optional .control.common.Header header = 1;
inline bool LocalizationStatus::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LocalizationStatus::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& LocalizationStatus::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& LocalizationStatus::header() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.header)
  return _internal_header();
}
inline void LocalizationStatus::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationStatus.header)
}
inline ::control::common::Header* LocalizationStatus::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* LocalizationStatus::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.localization.LocalizationStatus.header)
  _has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* LocalizationStatus::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* LocalizationStatus::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationStatus.header)
  return _internal_mutable_header();
}
inline void LocalizationStatus::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationStatus.header)
}

// optional .control.localization.MeasureState fusion_status = 2;
inline bool LocalizationStatus::_internal_has_fusion_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocalizationStatus::has_fusion_status() const {
  return _internal_has_fusion_status();
}
inline void LocalizationStatus::clear_fusion_status() {
  fusion_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::control::localization::MeasureState LocalizationStatus::_internal_fusion_status() const {
  return static_cast< ::control::localization::MeasureState >(fusion_status_);
}
inline ::control::localization::MeasureState LocalizationStatus::fusion_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.fusion_status)
  return _internal_fusion_status();
}
inline void LocalizationStatus::_internal_set_fusion_status(::control::localization::MeasureState value) {
  assert(::control::localization::MeasureState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  fusion_status_ = value;
}
inline void LocalizationStatus::set_fusion_status(::control::localization::MeasureState value) {
  _internal_set_fusion_status(value);
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.fusion_status)
}

// optional .control.localization.MeasureState gnss_status = 3 [deprecated = true];
inline bool LocalizationStatus::_internal_has_gnss_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocalizationStatus::has_gnss_status() const {
  return _internal_has_gnss_status();
}
inline void LocalizationStatus::clear_gnss_status() {
  gnss_status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::control::localization::MeasureState LocalizationStatus::_internal_gnss_status() const {
  return static_cast< ::control::localization::MeasureState >(gnss_status_);
}
inline ::control::localization::MeasureState LocalizationStatus::gnss_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.gnss_status)
  return _internal_gnss_status();
}
inline void LocalizationStatus::_internal_set_gnss_status(::control::localization::MeasureState value) {
  assert(::control::localization::MeasureState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  gnss_status_ = value;
}
inline void LocalizationStatus::set_gnss_status(::control::localization::MeasureState value) {
  _internal_set_gnss_status(value);
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.gnss_status)
}

// optional .control.localization.MeasureState lidar_status = 4 [deprecated = true];
inline bool LocalizationStatus::_internal_has_lidar_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LocalizationStatus::has_lidar_status() const {
  return _internal_has_lidar_status();
}
inline void LocalizationStatus::clear_lidar_status() {
  lidar_status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::control::localization::MeasureState LocalizationStatus::_internal_lidar_status() const {
  return static_cast< ::control::localization::MeasureState >(lidar_status_);
}
inline ::control::localization::MeasureState LocalizationStatus::lidar_status() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.lidar_status)
  return _internal_lidar_status();
}
inline void LocalizationStatus::_internal_set_lidar_status(::control::localization::MeasureState value) {
  assert(::control::localization::MeasureState_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  lidar_status_ = value;
}
inline void LocalizationStatus::set_lidar_status(::control::localization::MeasureState value) {
  _internal_set_lidar_status(value);
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.lidar_status)
}

// optional double measurement_time = 5;
inline bool LocalizationStatus::_internal_has_measurement_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LocalizationStatus::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void LocalizationStatus::clear_measurement_time() {
  measurement_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double LocalizationStatus::_internal_measurement_time() const {
  return measurement_time_;
}
inline double LocalizationStatus::measurement_time() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.measurement_time)
  return _internal_measurement_time();
}
inline void LocalizationStatus::_internal_set_measurement_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  measurement_time_ = value;
}
inline void LocalizationStatus::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.measurement_time)
}

// optional string state_message = 6;
inline bool LocalizationStatus::_internal_has_state_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalizationStatus::has_state_message() const {
  return _internal_has_state_message();
}
inline void LocalizationStatus::clear_state_message() {
  state_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalizationStatus::state_message() const {
  // @@protoc_insertion_point(field_get:control.localization.LocalizationStatus.state_message)
  return _internal_state_message();
}
inline void LocalizationStatus::set_state_message(const std::string& value) {
  _internal_set_state_message(value);
  // @@protoc_insertion_point(field_set:control.localization.LocalizationStatus.state_message)
}
inline std::string* LocalizationStatus::mutable_state_message() {
  // @@protoc_insertion_point(field_mutable:control.localization.LocalizationStatus.state_message)
  return _internal_mutable_state_message();
}
inline const std::string& LocalizationStatus::_internal_state_message() const {
  return state_message_.Get();
}
inline void LocalizationStatus::_internal_set_state_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  state_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LocalizationStatus::set_state_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  state_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:control.localization.LocalizationStatus.state_message)
}
inline void LocalizationStatus::set_state_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  state_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:control.localization.LocalizationStatus.state_message)
}
inline void LocalizationStatus::set_state_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  state_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:control.localization.LocalizationStatus.state_message)
}
inline std::string* LocalizationStatus::_internal_mutable_state_message() {
  _has_bits_[0] |= 0x00000001u;
  return state_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LocalizationStatus::release_state_message() {
  // @@protoc_insertion_point(field_release:control.localization.LocalizationStatus.state_message)
  if (!_internal_has_state_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return state_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocalizationStatus::set_allocated_state_message(std::string* state_message) {
  if (state_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:control.localization.LocalizationStatus.state_message)
}
inline std::string* LocalizationStatus::unsafe_arena_release_state_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:control.localization.LocalizationStatus.state_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return state_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LocalizationStatus::unsafe_arena_set_allocated_state_message(
    std::string* state_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.LocalizationStatus.state_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace control

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::control::localization::MeasureState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::control::localization::MeasureState>() {
  return ::control::localization::MeasureState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2flocalization_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: localization_msgs/pose.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2fpose_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2fpose_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs/basic_msgs/geometry.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_localization_5fmsgs_2fpose_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_localization_5fmsgs_2fpose_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_localization_5fmsgs_2fpose_2eproto;
namespace control {
namespace localization {
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace localization {

// ===================================================================


// -------------------------------------------------------------------

class Pose final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.localization.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Pose(
      ::google::protobuf::internal::ConstantInitialized);

  inline Pose(const Pose& from) : Pose(nullptr, from) {}
  inline Pose(Pose&& from) noexcept
      : Pose(nullptr, std::move(from)) {}
  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
        &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Pose& a, Pose& b) { a.Swap(&b); }
  inline void Swap(Pose* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Pose>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Pose& from) { Pose::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Pose* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.localization.Pose"; }

 protected:
  explicit Pose(::google::protobuf::Arena* arena);
  Pose(::google::protobuf::Arena* arena, const Pose& from);
  Pose(::google::protobuf::Arena* arena, Pose&& from) noexcept
      : Pose(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kLinearVelocityFieldNumber = 3,
    kLinearAccelerationFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kLinearAccelerationVrfFieldNumber = 7,
    kAngularVelocityVrfFieldNumber = 8,
    kEulerAnglesFieldNumber = 9,
    kLinearVelocityVrfFieldNumber = 10,
    kHeadingFieldNumber = 6,
  };
  // optional .control.common.PointENU position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::control::common::PointENU& position() const;
  PROTOBUF_NODISCARD ::control::common::PointENU* release_position();
  ::control::common::PointENU* mutable_position();
  void set_allocated_position(::control::common::PointENU* value);
  void unsafe_arena_set_allocated_position(::control::common::PointENU* value);
  ::control::common::PointENU* unsafe_arena_release_position();

  private:
  const ::control::common::PointENU& _internal_position() const;
  ::control::common::PointENU* _internal_mutable_position();

  public:
  // optional .control.common.Quaternion orientation = 2;
  bool has_orientation() const;
  void clear_orientation() ;
  const ::control::common::Quaternion& orientation() const;
  PROTOBUF_NODISCARD ::control::common::Quaternion* release_orientation();
  ::control::common::Quaternion* mutable_orientation();
  void set_allocated_orientation(::control::common::Quaternion* value);
  void unsafe_arena_set_allocated_orientation(::control::common::Quaternion* value);
  ::control::common::Quaternion* unsafe_arena_release_orientation();

  private:
  const ::control::common::Quaternion& _internal_orientation() const;
  ::control::common::Quaternion* _internal_mutable_orientation();

  public:
  // optional .control.common.Point3D linear_velocity = 3;
  bool has_linear_velocity() const;
  void clear_linear_velocity() ;
  const ::control::common::Point3D& linear_velocity() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_linear_velocity();
  ::control::common::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_linear_velocity(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_linear_velocity();

  private:
  const ::control::common::Point3D& _internal_linear_velocity() const;
  ::control::common::Point3D* _internal_mutable_linear_velocity();

  public:
  // optional .control.common.Point3D linear_acceleration = 4;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration() ;
  const ::control::common::Point3D& linear_acceleration() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_linear_acceleration();
  ::control::common::Point3D* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_linear_acceleration(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_linear_acceleration();

  private:
  const ::control::common::Point3D& _internal_linear_acceleration() const;
  ::control::common::Point3D* _internal_mutable_linear_acceleration();

  public:
  // optional .control.common.Point3D angular_velocity = 5;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::control::common::Point3D& angular_velocity() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_angular_velocity();
  ::control::common::Point3D* mutable_angular_velocity();
  void set_allocated_angular_velocity(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_angular_velocity(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_angular_velocity();

  private:
  const ::control::common::Point3D& _internal_angular_velocity() const;
  ::control::common::Point3D* _internal_mutable_angular_velocity();

  public:
  // optional .control.common.Point3D linear_acceleration_vrf = 7;
  bool has_linear_acceleration_vrf() const;
  void clear_linear_acceleration_vrf() ;
  const ::control::common::Point3D& linear_acceleration_vrf() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_linear_acceleration_vrf();
  ::control::common::Point3D* mutable_linear_acceleration_vrf();
  void set_allocated_linear_acceleration_vrf(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_linear_acceleration_vrf(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_linear_acceleration_vrf();

  private:
  const ::control::common::Point3D& _internal_linear_acceleration_vrf() const;
  ::control::common::Point3D* _internal_mutable_linear_acceleration_vrf();

  public:
  // optional .control.common.Point3D angular_velocity_vrf = 8;
  bool has_angular_velocity_vrf() const;
  void clear_angular_velocity_vrf() ;
  const ::control::common::Point3D& angular_velocity_vrf() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_angular_velocity_vrf();
  ::control::common::Point3D* mutable_angular_velocity_vrf();
  void set_allocated_angular_velocity_vrf(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_angular_velocity_vrf(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_angular_velocity_vrf();

  private:
  const ::control::common::Point3D& _internal_angular_velocity_vrf() const;
  ::control::common::Point3D* _internal_mutable_angular_velocity_vrf();

  public:
  // optional .control.common.Point3D euler_angles = 9;
  bool has_euler_angles() const;
  void clear_euler_angles() ;
  const ::control::common::Point3D& euler_angles() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_euler_angles();
  ::control::common::Point3D* mutable_euler_angles();
  void set_allocated_euler_angles(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_euler_angles(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_euler_angles();

  private:
  const ::control::common::Point3D& _internal_euler_angles() const;
  ::control::common::Point3D* _internal_mutable_euler_angles();

  public:
  // optional .control.common.Point3D linear_velocity_vrf = 10;
  bool has_linear_velocity_vrf() const;
  void clear_linear_velocity_vrf() ;
  const ::control::common::Point3D& linear_velocity_vrf() const;
  PROTOBUF_NODISCARD ::control::common::Point3D* release_linear_velocity_vrf();
  ::control::common::Point3D* mutable_linear_velocity_vrf();
  void set_allocated_linear_velocity_vrf(::control::common::Point3D* value);
  void unsafe_arena_set_allocated_linear_velocity_vrf(::control::common::Point3D* value);
  ::control::common::Point3D* unsafe_arena_release_linear_velocity_vrf();

  private:
  const ::control::common::Point3D& _internal_linear_velocity_vrf() const;
  ::control::common::Point3D* _internal_mutable_linear_velocity_vrf();

  public:
  // optional double heading = 6;
  bool has_heading() const;
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.localization.Pose)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 9,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Pose_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Pose& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::PointENU* position_;
    ::control::common::Quaternion* orientation_;
    ::control::common::Point3D* linear_velocity_;
    ::control::common::Point3D* linear_acceleration_;
    ::control::common::Point3D* angular_velocity_;
    ::control::common::Point3D* linear_acceleration_vrf_;
    ::control::common::Point3D* angular_velocity_vrf_;
    ::control::common::Point3D* euler_angles_;
    ::control::common::Point3D* linear_velocity_vrf_;
    double heading_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_localization_5fmsgs_2fpose_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Pose

// optional .control.common.PointENU position = 1;
inline bool Pose::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::control::common::PointENU& Pose::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::PointENU* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::PointENU&>(::control::common::_PointENU_default_instance_);
}
inline const ::control::common::PointENU& Pose::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.position)
  return _internal_position();
}
inline void Pose::unsafe_arena_set_allocated_position(::control::common::PointENU* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::control::common::PointENU*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.position)
}
inline ::control::common::PointENU* Pose::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::PointENU* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::PointENU* Pose::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::PointENU* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::control::common::PointENU* Pose::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::PointENU>(GetArena());
    _impl_.position_ = reinterpret_cast<::control::common::PointENU*>(p);
  }
  return _impl_.position_;
}
inline ::control::common::PointENU* Pose::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::PointENU* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.position)
  return _msg;
}
inline void Pose::set_allocated_position(::control::common::PointENU* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::control::common::PointENU*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.position)
}

// optional .control.common.Quaternion orientation = 2;
inline bool Pose::has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline const ::control::common::Quaternion& Pose::_internal_orientation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Quaternion* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Quaternion&>(::control::common::_Quaternion_default_instance_);
}
inline const ::control::common::Quaternion& Pose::orientation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.orientation)
  return _internal_orientation();
}
inline void Pose::unsafe_arena_set_allocated_orientation(::control::common::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = reinterpret_cast<::control::common::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.orientation)
}
inline ::control::common::Quaternion* Pose::release_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Quaternion* released = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Quaternion* Pose::unsafe_arena_release_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.orientation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::common::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::control::common::Quaternion* Pose::_internal_mutable_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Quaternion>(GetArena());
    _impl_.orientation_ = reinterpret_cast<::control::common::Quaternion*>(p);
  }
  return _impl_.orientation_;
}
inline ::control::common::Quaternion* Pose::mutable_orientation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::common::Quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.orientation)
  return _msg;
}
inline void Pose::set_allocated_orientation(::control::common::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.orientation_ = reinterpret_cast<::control::common::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.orientation)
}

// optional .control.common.Point3D linear_velocity = 3;
inline bool Pose::has_linear_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Pose::_internal_linear_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Pose::linear_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.linear_velocity)
  return _internal_linear_velocity();
}
inline void Pose::unsafe_arena_set_allocated_linear_velocity(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_);
  }
  _impl_.linear_velocity_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.linear_velocity)
}
inline ::control::common::Point3D* Pose::release_linear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Point3D* released = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Pose::unsafe_arena_release_linear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.linear_velocity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::Point3D* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Pose::_internal_mutable_linear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.linear_velocity_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.linear_velocity_;
}
inline ::control::common::Point3D* Pose::mutable_linear_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::Point3D* _msg = _internal_mutable_linear_velocity();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.linear_velocity)
  return _msg;
}
inline void Pose::set_allocated_linear_velocity(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.linear_velocity_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.linear_velocity)
}

// optional .control.common.Point3D linear_acceleration = 4;
inline bool Pose::has_linear_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_acceleration_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Pose::_internal_linear_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Pose::linear_acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void Pose::unsafe_arena_set_allocated_linear_acceleration(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }
  _impl_.linear_acceleration_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.linear_acceleration)
}
inline ::control::common::Point3D* Pose::release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::Point3D* released = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Pose::unsafe_arena_release_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.linear_acceleration)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::common::Point3D* temp = _impl_.linear_acceleration_;
  _impl_.linear_acceleration_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Pose::_internal_mutable_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.linear_acceleration_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.linear_acceleration_;
}
inline ::control::common::Point3D* Pose::mutable_linear_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::common::Point3D* _msg = _internal_mutable_linear_acceleration();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.linear_acceleration)
  return _msg;
}
inline void Pose::set_allocated_linear_acceleration(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.linear_acceleration_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.linear_acceleration)
}

// optional .control.common.Point3D angular_velocity = 5;
inline bool Pose::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Pose::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Pose::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.angular_velocity)
  return _internal_angular_velocity();
}
inline void Pose::unsafe_arena_set_allocated_angular_velocity(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.angular_velocity)
}
inline ::control::common::Point3D* Pose::release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::common::Point3D* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Pose::unsafe_arena_release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::common::Point3D* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Pose::_internal_mutable_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::control::common::Point3D* Pose::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::common::Point3D* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.angular_velocity)
  return _msg;
}
inline void Pose::set_allocated_angular_velocity(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.angular_velocity)
}

// optional double heading = 6;
inline bool Pose::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Pose::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double Pose::heading() const {
  // @@protoc_insertion_point(field_get:control.localization.Pose.heading)
  return _internal_heading();
}
inline void Pose::set_heading(double value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.localization.Pose.heading)
}
inline double Pose::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void Pose::_internal_set_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// optional .control.common.Point3D linear_acceleration_vrf = 7;
inline bool Pose::has_linear_acceleration_vrf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_acceleration_vrf_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Pose::_internal_linear_acceleration_vrf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.linear_acceleration_vrf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Pose::linear_acceleration_vrf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.linear_acceleration_vrf)
  return _internal_linear_acceleration_vrf();
}
inline void Pose::unsafe_arena_set_allocated_linear_acceleration_vrf(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_vrf_);
  }
  _impl_.linear_acceleration_vrf_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.linear_acceleration_vrf)
}
inline ::control::common::Point3D* Pose::release_linear_acceleration_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::common::Point3D* released = _impl_.linear_acceleration_vrf_;
  _impl_.linear_acceleration_vrf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Pose::unsafe_arena_release_linear_acceleration_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.linear_acceleration_vrf)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::common::Point3D* temp = _impl_.linear_acceleration_vrf_;
  _impl_.linear_acceleration_vrf_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Pose::_internal_mutable_linear_acceleration_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_acceleration_vrf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.linear_acceleration_vrf_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.linear_acceleration_vrf_;
}
inline ::control::common::Point3D* Pose::mutable_linear_acceleration_vrf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::control::common::Point3D* _msg = _internal_mutable_linear_acceleration_vrf();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.linear_acceleration_vrf)
  return _msg;
}
inline void Pose::set_allocated_linear_acceleration_vrf(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_acceleration_vrf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.linear_acceleration_vrf_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.linear_acceleration_vrf)
}

// optional .control.common.Point3D angular_velocity_vrf = 8;
inline bool Pose::has_angular_velocity_vrf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_vrf_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Pose::_internal_angular_velocity_vrf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.angular_velocity_vrf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Pose::angular_velocity_vrf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.angular_velocity_vrf)
  return _internal_angular_velocity_vrf();
}
inline void Pose::unsafe_arena_set_allocated_angular_velocity_vrf(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_vrf_);
  }
  _impl_.angular_velocity_vrf_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.angular_velocity_vrf)
}
inline ::control::common::Point3D* Pose::release_angular_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::common::Point3D* released = _impl_.angular_velocity_vrf_;
  _impl_.angular_velocity_vrf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Pose::unsafe_arena_release_angular_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.angular_velocity_vrf)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::common::Point3D* temp = _impl_.angular_velocity_vrf_;
  _impl_.angular_velocity_vrf_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Pose::_internal_mutable_angular_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_vrf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.angular_velocity_vrf_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.angular_velocity_vrf_;
}
inline ::control::common::Point3D* Pose::mutable_angular_velocity_vrf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::control::common::Point3D* _msg = _internal_mutable_angular_velocity_vrf();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.angular_velocity_vrf)
  return _msg;
}
inline void Pose::set_allocated_angular_velocity_vrf(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_vrf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.angular_velocity_vrf_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.angular_velocity_vrf)
}

// optional .control.common.Point3D euler_angles = 9;
inline bool Pose::has_euler_angles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.euler_angles_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Pose::_internal_euler_angles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.euler_angles_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Pose::euler_angles() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.euler_angles)
  return _internal_euler_angles();
}
inline void Pose::unsafe_arena_set_allocated_euler_angles(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.euler_angles_);
  }
  _impl_.euler_angles_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.euler_angles)
}
inline ::control::common::Point3D* Pose::release_euler_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::common::Point3D* released = _impl_.euler_angles_;
  _impl_.euler_angles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Pose::unsafe_arena_release_euler_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.euler_angles)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::common::Point3D* temp = _impl_.euler_angles_;
  _impl_.euler_angles_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Pose::_internal_mutable_euler_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.euler_angles_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.euler_angles_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.euler_angles_;
}
inline ::control::common::Point3D* Pose::mutable_euler_angles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::control::common::Point3D* _msg = _internal_mutable_euler_angles();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.euler_angles)
  return _msg;
}
inline void Pose::set_allocated_euler_angles(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.euler_angles_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.euler_angles_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.euler_angles)
}

// optional .control.common.Point3D linear_velocity_vrf = 10;
inline bool Pose::has_linear_velocity_vrf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_vrf_ != nullptr);
  return value;
}
inline const ::control::common::Point3D& Pose::_internal_linear_velocity_vrf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Point3D* p = _impl_.linear_velocity_vrf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Point3D&>(::control::common::_Point3D_default_instance_);
}
inline const ::control::common::Point3D& Pose::linear_velocity_vrf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.localization.Pose.linear_velocity_vrf)
  return _internal_linear_velocity_vrf();
}
inline void Pose::unsafe_arena_set_allocated_linear_velocity_vrf(::control::common::Point3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_vrf_);
  }
  _impl_.linear_velocity_vrf_ = reinterpret_cast<::control::common::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.localization.Pose.linear_velocity_vrf)
}
inline ::control::common::Point3D* Pose::release_linear_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::common::Point3D* released = _impl_.linear_velocity_vrf_;
  _impl_.linear_velocity_vrf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Point3D* Pose::unsafe_arena_release_linear_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.localization.Pose.linear_velocity_vrf)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::common::Point3D* temp = _impl_.linear_velocity_vrf_;
  _impl_.linear_velocity_vrf_ = nullptr;
  return temp;
}
inline ::control::common::Point3D* Pose::_internal_mutable_linear_velocity_vrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.linear_velocity_vrf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Point3D>(GetArena());
    _impl_.linear_velocity_vrf_ = reinterpret_cast<::control::common::Point3D*>(p);
  }
  return _impl_.linear_velocity_vrf_;
}
inline ::control::common::Point3D* Pose::mutable_linear_velocity_vrf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::control::common::Point3D* _msg = _internal_mutable_linear_velocity_vrf();
  // @@protoc_insertion_point(field_mutable:control.localization.Pose.linear_velocity_vrf)
  return _msg;
}
inline void Pose::set_allocated_linear_velocity_vrf(::control::common::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_vrf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.linear_velocity_vrf_ = reinterpret_cast<::control::common::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.localization.Pose.linear_velocity_vrf)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_localization_5fmsgs_2fpose_2eproto_2epb_2eh

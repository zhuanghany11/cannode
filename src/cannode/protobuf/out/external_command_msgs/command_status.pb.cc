// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external_command_msgs/command_status.proto

#include "external_command_msgs/command_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
namespace control {
namespace external_command {
class CommandStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStatusRequest> _instance;
} _CommandStatusRequest_default_instance_;
class CommandStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStatus> _instance;
} _CommandStatus_default_instance_;
}  // namespace external_command
}  // namespace control
static void InitDefaultsscc_info_CommandStatus_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::external_command::_CommandStatus_default_instance_;
    new (ptr) ::control::external_command::CommandStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::external_command::CommandStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandStatus_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandStatus_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_CommandStatusRequest_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::external_command::_CommandStatusRequest_default_instance_;
    new (ptr) ::control::external_command::CommandStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::external_command::CommandStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandStatusRequest_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandStatusRequest_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatusRequest, header_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatusRequest, command_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatus, header_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatus, command_id_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatus, status_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::CommandStatus, message_),
  1,
  3,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::control::external_command::CommandStatusRequest)},
  { 9, 18, sizeof(::control::external_command::CommandStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::external_command::_CommandStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::external_command::_CommandStatus_default_instance_),
};

const char descriptor_table_protodef_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*external_command_msgs/command_status.p"
  "roto\022\030control.external_command\032#common_m"
  "sgs/basic_msgs/header.proto\"V\n\024CommandSt"
  "atusRequest\022&\n\006header\030\001 \001(\0132\026.control.co"
  "mmon.Header\022\026\n\ncommand_id\030\002 \001(\003:\002-1\"\235\001\n\r"
  "CommandStatus\022&\n\006header\030\001 \001(\0132\026.control."
  "common.Header\022\026\n\ncommand_id\030\002 \001(\003:\002-1\022;\n"
  "\006status\030\003 \002(\0162+.control.external_command"
  ".CommandStatusType\022\017\n\007message\030\004 \001(\t*F\n\021C"
  "ommandStatusType\022\013\n\007RUNNING\020\001\022\014\n\010FINISHE"
  "D\020\002\022\t\n\005ERROR\020\003\022\013\n\007UNKNOWN\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto_deps[1] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto_sccs[2] = {
  &scc_info_CommandStatus_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.base,
  &scc_info_CommandStatusRequest_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto = {
  false, false, descriptor_table_protodef_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto, "external_command_msgs/command_status.proto", 427,
  &descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto_once, descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto_sccs, descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto::offsets,
  file_level_metadata_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto, 2, file_level_enum_descriptors_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto, file_level_service_descriptors_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto)), true);
namespace control {
namespace external_command {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto);
  return file_level_enum_descriptors_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto[0];
}
bool CommandStatusType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommandStatusRequest::InitAsDefaultInstance() {
  ::control::external_command::_CommandStatusRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
}
class CommandStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStatusRequest>()._has_bits_);
  static const ::control::common::Header& header(const CommandStatusRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::control::common::Header&
CommandStatusRequest::_Internal::header(const CommandStatusRequest* msg) {
  return *msg->header_;
}
void CommandStatusRequest::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandStatusRequest::CommandStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.external_command.CommandStatusRequest)
}
CommandStatusRequest::CommandStatusRequest(const CommandStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  command_id_ = from.command_id_;
  // @@protoc_insertion_point(copy_constructor:control.external_command.CommandStatusRequest)
}

void CommandStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandStatusRequest_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.base);
  header_ = nullptr;
  command_id_ = PROTOBUF_LONGLONG(-1);
}

CommandStatusRequest::~CommandStatusRequest() {
  // @@protoc_insertion_point(destructor:control.external_command.CommandStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CommandStatusRequest::ArenaDtor(void* object) {
  CommandStatusRequest* _this = reinterpret_cast< CommandStatusRequest* >(object);
  (void)_this;
}
void CommandStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStatusRequest& CommandStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStatusRequest_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void CommandStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:control.external_command.CommandStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    command_id_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.external_command.CommandStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_command_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.external_command.CommandStatusRequest)
  return target;
}

size_t CommandStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.external_command.CommandStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int64 command_id = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_command_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.external_command.CommandStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.external_command.CommandStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.external_command.CommandStatusRequest)
    MergeFrom(*source);
  }
}

void CommandStatusRequest::MergeFrom(const CommandStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.external_command.CommandStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.external_command.CommandStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStatusRequest::CopyFrom(const CommandStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.external_command.CommandStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStatusRequest::IsInitialized() const {
  return true;
}

void CommandStatusRequest::InternalSwap(CommandStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStatus::InitAsDefaultInstance() {
  ::control::external_command::_CommandStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
}
class CommandStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStatus>()._has_bits_);
  static const ::control::common::Header& header(const CommandStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::control::common::Header&
CommandStatus::_Internal::header(const CommandStatus* msg) {
  return *msg->header_;
}
void CommandStatus::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandStatus::CommandStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.external_command.CommandStatus)
}
CommandStatus::CommandStatus(const CommandStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:control.external_command.CommandStatus)
}

void CommandStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandStatus_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
  status_ = 1;
  command_id_ = PROTOBUF_LONGLONG(-1);
}

CommandStatus::~CommandStatus() {
  // @@protoc_insertion_point(destructor:control.external_command.CommandStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CommandStatus::ArenaDtor(void* object) {
  CommandStatus* _this = reinterpret_cast< CommandStatus* >(object);
  (void)_this;
}
void CommandStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStatus& CommandStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStatus_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void CommandStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:control.external_command.CommandStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    status_ = 1;
    command_id_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.external_command.CommandStatusType status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::external_command::CommandStatusType_IsValid(val))) {
            _internal_set_status(static_cast<::control::external_command::CommandStatusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.external_command.CommandStatus.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.external_command.CommandStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_command_id(), target);
  }

  // required .control.external_command.CommandStatusType status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.external_command.CommandStatus.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.external_command.CommandStatus)
  return target;
}

size_t CommandStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.external_command.CommandStatus)
  size_t total_size = 0;

  // required .control.external_command.CommandStatusType status = 3;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.external_command.CommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.external_command.CommandStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.external_command.CommandStatus)
    MergeFrom(*source);
  }
}

void CommandStatus::MergeFrom(const CommandStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.external_command.CommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.external_command.CommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStatus::CopyFrom(const CommandStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.external_command.CommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommandStatus::InternalSwap(CommandStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
  swap(status_, other->status_);
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace external_command
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::external_command::CommandStatusRequest* Arena::CreateMaybeMessage< ::control::external_command::CommandStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::external_command::CommandStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::control::external_command::CommandStatus* Arena::CreateMaybeMessage< ::control::external_command::CommandStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::external_command::CommandStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

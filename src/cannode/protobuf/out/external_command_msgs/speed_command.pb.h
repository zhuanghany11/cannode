// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external_command_msgs/speed_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs/basic_msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto;
namespace control {
namespace external_command {
class SpeedCommand;
class SpeedCommandDefaultTypeInternal;
extern SpeedCommandDefaultTypeInternal _SpeedCommand_default_instance_;
}  // namespace external_command
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::external_command::SpeedCommand* Arena::CreateMaybeMessage<::control::external_command::SpeedCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {
namespace external_command {

// ===================================================================

class SpeedCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.external_command.SpeedCommand) */ {
 public:
  inline SpeedCommand() : SpeedCommand(nullptr) {};
  virtual ~SpeedCommand();

  SpeedCommand(const SpeedCommand& from);
  SpeedCommand(SpeedCommand&& from) noexcept
    : SpeedCommand() {
    *this = ::std::move(from);
  }

  inline SpeedCommand& operator=(const SpeedCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedCommand& operator=(SpeedCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedCommand& default_instance();

  enum LinearSpeedCase {
    kTargetSpeed = 3,
    kTargetSpeedFactor = 4,
    kIsRestoreTargetSpeed = 5,
    LINEAR_SPEED_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedCommand* internal_default_instance() {
    return reinterpret_cast<const SpeedCommand*>(
               &_SpeedCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeedCommand& a, SpeedCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedCommand* New() const final {
    return CreateMaybeMessage<SpeedCommand>(nullptr);
  }

  SpeedCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedCommand& from);
  void MergeFrom(const SpeedCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.external_command.SpeedCommand";
  }
  protected:
  explicit SpeedCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto);
    return ::descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCommandIdFieldNumber = 2,
    kTargetSpeedFieldNumber = 3,
    kTargetSpeedFactorFieldNumber = 4,
    kIsRestoreTargetSpeedFieldNumber = 5,
  };
  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // optional int64 command_id = 2 [default = -1];
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int64 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double target_speed = 3;
  bool has_target_speed() const;
  private:
  bool _internal_has_target_speed() const;
  public:
  void clear_target_speed();
  double target_speed() const;
  void set_target_speed(double value);
  private:
  double _internal_target_speed() const;
  void _internal_set_target_speed(double value);
  public:

  // double target_speed_factor = 4;
  bool has_target_speed_factor() const;
  private:
  bool _internal_has_target_speed_factor() const;
  public:
  void clear_target_speed_factor();
  double target_speed_factor() const;
  void set_target_speed_factor(double value);
  private:
  double _internal_target_speed_factor() const;
  void _internal_set_target_speed_factor(double value);
  public:

  // bool is_restore_target_speed = 5;
  bool has_is_restore_target_speed() const;
  private:
  bool _internal_has_is_restore_target_speed() const;
  public:
  void clear_is_restore_target_speed();
  bool is_restore_target_speed() const;
  void set_is_restore_target_speed(bool value);
  private:
  bool _internal_is_restore_target_speed() const;
  void _internal_set_is_restore_target_speed(bool value);
  public:

  void clear_linear_speed();
  LinearSpeedCase linear_speed_case() const;
  // @@protoc_insertion_point(class_scope:control.external_command.SpeedCommand)
 private:
  class _Internal;
  void set_has_target_speed();
  void set_has_target_speed_factor();
  void set_has_is_restore_target_speed();

  inline bool has_linear_speed() const;
  inline void clear_has_linear_speed();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 command_id_;
  union LinearSpeedUnion {
    LinearSpeedUnion() {}
    double target_speed_;
    double target_speed_factor_;
    bool is_restore_target_speed_;
  } linear_speed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeedCommand

// optional .control.common.Header header = 1;
inline bool SpeedCommand::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool SpeedCommand::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& SpeedCommand::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& SpeedCommand::header() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.header)
  return _internal_header();
}
inline void SpeedCommand::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.external_command.SpeedCommand.header)
}
inline ::control::common::Header* SpeedCommand::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* SpeedCommand::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.external_command.SpeedCommand.header)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* SpeedCommand::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* SpeedCommand::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.external_command.SpeedCommand.header)
  return _internal_mutable_header();
}
inline void SpeedCommand::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.external_command.SpeedCommand.header)
}

// optional int64 command_id = 2 [default = -1];
inline bool SpeedCommand::_internal_has_command_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpeedCommand::has_command_id() const {
  return _internal_has_command_id();
}
inline void SpeedCommand::clear_command_id() {
  command_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpeedCommand::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpeedCommand::command_id() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.command_id)
  return _internal_command_id();
}
inline void SpeedCommand::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  command_id_ = value;
}
inline void SpeedCommand::set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.command_id)
}

// double target_speed = 3;
inline bool SpeedCommand::_internal_has_target_speed() const {
  return linear_speed_case() == kTargetSpeed;
}
inline bool SpeedCommand::has_target_speed() const {
  return _internal_has_target_speed();
}
inline void SpeedCommand::set_has_target_speed() {
  _oneof_case_[0] = kTargetSpeed;
}
inline void SpeedCommand::clear_target_speed() {
  if (_internal_has_target_speed()) {
    linear_speed_.target_speed_ = 0;
    clear_has_linear_speed();
  }
}
inline double SpeedCommand::_internal_target_speed() const {
  if (_internal_has_target_speed()) {
    return linear_speed_.target_speed_;
  }
  return 0;
}
inline void SpeedCommand::_internal_set_target_speed(double value) {
  if (!_internal_has_target_speed()) {
    clear_linear_speed();
    set_has_target_speed();
  }
  linear_speed_.target_speed_ = value;
}
inline double SpeedCommand::target_speed() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.target_speed)
  return _internal_target_speed();
}
inline void SpeedCommand::set_target_speed(double value) {
  _internal_set_target_speed(value);
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.target_speed)
}

// double target_speed_factor = 4;
inline bool SpeedCommand::_internal_has_target_speed_factor() const {
  return linear_speed_case() == kTargetSpeedFactor;
}
inline bool SpeedCommand::has_target_speed_factor() const {
  return _internal_has_target_speed_factor();
}
inline void SpeedCommand::set_has_target_speed_factor() {
  _oneof_case_[0] = kTargetSpeedFactor;
}
inline void SpeedCommand::clear_target_speed_factor() {
  if (_internal_has_target_speed_factor()) {
    linear_speed_.target_speed_factor_ = 0;
    clear_has_linear_speed();
  }
}
inline double SpeedCommand::_internal_target_speed_factor() const {
  if (_internal_has_target_speed_factor()) {
    return linear_speed_.target_speed_factor_;
  }
  return 0;
}
inline void SpeedCommand::_internal_set_target_speed_factor(double value) {
  if (!_internal_has_target_speed_factor()) {
    clear_linear_speed();
    set_has_target_speed_factor();
  }
  linear_speed_.target_speed_factor_ = value;
}
inline double SpeedCommand::target_speed_factor() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.target_speed_factor)
  return _internal_target_speed_factor();
}
inline void SpeedCommand::set_target_speed_factor(double value) {
  _internal_set_target_speed_factor(value);
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.target_speed_factor)
}

// bool is_restore_target_speed = 5;
inline bool SpeedCommand::_internal_has_is_restore_target_speed() const {
  return linear_speed_case() == kIsRestoreTargetSpeed;
}
inline bool SpeedCommand::has_is_restore_target_speed() const {
  return _internal_has_is_restore_target_speed();
}
inline void SpeedCommand::set_has_is_restore_target_speed() {
  _oneof_case_[0] = kIsRestoreTargetSpeed;
}
inline void SpeedCommand::clear_is_restore_target_speed() {
  if (_internal_has_is_restore_target_speed()) {
    linear_speed_.is_restore_target_speed_ = false;
    clear_has_linear_speed();
  }
}
inline bool SpeedCommand::_internal_is_restore_target_speed() const {
  if (_internal_has_is_restore_target_speed()) {
    return linear_speed_.is_restore_target_speed_;
  }
  return false;
}
inline void SpeedCommand::_internal_set_is_restore_target_speed(bool value) {
  if (!_internal_has_is_restore_target_speed()) {
    clear_linear_speed();
    set_has_is_restore_target_speed();
  }
  linear_speed_.is_restore_target_speed_ = value;
}
inline bool SpeedCommand::is_restore_target_speed() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.is_restore_target_speed)
  return _internal_is_restore_target_speed();
}
inline void SpeedCommand::set_is_restore_target_speed(bool value) {
  _internal_set_is_restore_target_speed(value);
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.is_restore_target_speed)
}

inline bool SpeedCommand::has_linear_speed() const {
  return linear_speed_case() != LINEAR_SPEED_NOT_SET;
}
inline void SpeedCommand::clear_has_linear_speed() {
  _oneof_case_[0] = LINEAR_SPEED_NOT_SET;
}
inline SpeedCommand::LinearSpeedCase SpeedCommand::linear_speed_case() const {
  return SpeedCommand::LinearSpeedCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace external_command
}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: external_command_msgs/speed_command.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs/basic_msgs/header.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto;
namespace control {
namespace external_command {
class SpeedCommand;
struct SpeedCommandDefaultTypeInternal;
extern SpeedCommandDefaultTypeInternal _SpeedCommand_default_instance_;
}  // namespace external_command
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace external_command {

// ===================================================================


// -------------------------------------------------------------------

class SpeedCommand final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.external_command.SpeedCommand) */ {
 public:
  inline SpeedCommand() : SpeedCommand(nullptr) {}
  ~SpeedCommand() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeedCommand(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpeedCommand(const SpeedCommand& from) : SpeedCommand(nullptr, from) {}
  inline SpeedCommand(SpeedCommand&& from) noexcept
      : SpeedCommand(nullptr, std::move(from)) {}
  inline SpeedCommand& operator=(const SpeedCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedCommand& operator=(SpeedCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedCommand& default_instance() {
    return *internal_default_instance();
  }
  enum LinearSpeedCase {
    kTargetSpeed = 3,
    kTargetSpeedFactor = 4,
    kIsRestoreTargetSpeed = 5,
    LINEAR_SPEED_NOT_SET = 0,
  };
  static inline const SpeedCommand* internal_default_instance() {
    return reinterpret_cast<const SpeedCommand*>(
        &_SpeedCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SpeedCommand& a, SpeedCommand& b) { a.Swap(&b); }
  inline void Swap(SpeedCommand* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedCommand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedCommand* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SpeedCommand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeedCommand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeedCommand& from) { SpeedCommand::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SpeedCommand* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.external_command.SpeedCommand"; }

 protected:
  explicit SpeedCommand(::google::protobuf::Arena* arena);
  SpeedCommand(::google::protobuf::Arena* arena, const SpeedCommand& from);
  SpeedCommand(::google::protobuf::Arena* arena, SpeedCommand&& from) noexcept
      : SpeedCommand(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kCommandIdFieldNumber = 2,
    kTargetSpeedFieldNumber = 3,
    kTargetSpeedFactorFieldNumber = 4,
    kIsRestoreTargetSpeedFieldNumber = 5,
  };
  // optional .control.common.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::control::common::Header& header() const;
  PROTOBUF_NODISCARD ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* value);
  void unsafe_arena_set_allocated_header(::control::common::Header* value);
  ::control::common::Header* unsafe_arena_release_header();

  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();

  public:
  // optional int64 command_id = 2 [default = -1];
  bool has_command_id() const;
  void clear_command_id() ;
  ::int64_t command_id() const;
  void set_command_id(::int64_t value);

  private:
  ::int64_t _internal_command_id() const;
  void _internal_set_command_id(::int64_t value);

  public:
  // double target_speed = 3;
  bool has_target_speed() const;
  void clear_target_speed() ;
  double target_speed() const;
  void set_target_speed(double value);

  private:
  double _internal_target_speed() const;
  void _internal_set_target_speed(double value);

  public:
  // double target_speed_factor = 4;
  bool has_target_speed_factor() const;
  void clear_target_speed_factor() ;
  double target_speed_factor() const;
  void set_target_speed_factor(double value);

  private:
  double _internal_target_speed_factor() const;
  void _internal_set_target_speed_factor(double value);

  public:
  // bool is_restore_target_speed = 5;
  bool has_is_restore_target_speed() const;
  void clear_is_restore_target_speed() ;
  bool is_restore_target_speed() const;
  void set_is_restore_target_speed(bool value);

  private:
  bool _internal_is_restore_target_speed() const;
  void _internal_set_is_restore_target_speed(bool value);

  public:
  void clear_linear_speed();
  LinearSpeedCase linear_speed_case() const;
  // @@protoc_insertion_point(class_scope:control.external_command.SpeedCommand)
 private:
  class _Internal;
  void set_has_target_speed();
  void set_has_target_speed_factor();
  void set_has_is_restore_target_speed();
  inline bool has_linear_speed() const;
  inline void clear_has_linear_speed();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 5, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SpeedCommand_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpeedCommand& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::common::Header* header_;
    ::int64_t command_id_;
    union LinearSpeedUnion {
      constexpr LinearSpeedUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      double target_speed_;
      double target_speed_factor_;
      bool is_restore_target_speed_;
    } linear_speed_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SpeedCommand

// optional .control.common.Header header = 1;
inline bool SpeedCommand::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::control::common::Header& SpeedCommand::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::Header&>(::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& SpeedCommand::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.header)
  return _internal_header();
}
inline void SpeedCommand::unsafe_arena_set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.external_command.SpeedCommand.header)
}
inline ::control::common::Header* SpeedCommand::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::Header* SpeedCommand::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.external_command.SpeedCommand.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::control::common::Header* SpeedCommand::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::control::common::Header*>(p);
  }
  return _impl_.header_;
}
inline ::control::common::Header* SpeedCommand::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:control.external_command.SpeedCommand.header)
  return _msg;
}
inline void SpeedCommand::set_allocated_header(::control::common::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::control::common::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.external_command.SpeedCommand.header)
}

// optional int64 command_id = 2 [default = -1];
inline bool SpeedCommand::has_command_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SpeedCommand::clear_command_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_id_ = ::int64_t{-1};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t SpeedCommand::command_id() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.command_id)
  return _internal_command_id();
}
inline void SpeedCommand::set_command_id(::int64_t value) {
  _internal_set_command_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.command_id)
}
inline ::int64_t SpeedCommand::_internal_command_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_id_;
}
inline void SpeedCommand::_internal_set_command_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_id_ = value;
}

// double target_speed = 3;
inline bool SpeedCommand::has_target_speed() const {
  return linear_speed_case() == kTargetSpeed;
}
inline void SpeedCommand::set_has_target_speed() {
  _impl_._oneof_case_[0] = kTargetSpeed;
}
inline void SpeedCommand::clear_target_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (linear_speed_case() == kTargetSpeed) {
    _impl_.linear_speed_.target_speed_ = 0;
    clear_has_linear_speed();
  }
}
inline double SpeedCommand::target_speed() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.target_speed)
  return _internal_target_speed();
}
inline void SpeedCommand::set_target_speed(double value) {
  if (linear_speed_case() != kTargetSpeed) {
    clear_linear_speed();
    set_has_target_speed();
  }
  _impl_.linear_speed_.target_speed_ = value;
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.target_speed)
}
inline double SpeedCommand::_internal_target_speed() const {
  if (linear_speed_case() == kTargetSpeed) {
    return _impl_.linear_speed_.target_speed_;
  }
  return 0;
}

// double target_speed_factor = 4;
inline bool SpeedCommand::has_target_speed_factor() const {
  return linear_speed_case() == kTargetSpeedFactor;
}
inline void SpeedCommand::set_has_target_speed_factor() {
  _impl_._oneof_case_[0] = kTargetSpeedFactor;
}
inline void SpeedCommand::clear_target_speed_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (linear_speed_case() == kTargetSpeedFactor) {
    _impl_.linear_speed_.target_speed_factor_ = 0;
    clear_has_linear_speed();
  }
}
inline double SpeedCommand::target_speed_factor() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.target_speed_factor)
  return _internal_target_speed_factor();
}
inline void SpeedCommand::set_target_speed_factor(double value) {
  if (linear_speed_case() != kTargetSpeedFactor) {
    clear_linear_speed();
    set_has_target_speed_factor();
  }
  _impl_.linear_speed_.target_speed_factor_ = value;
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.target_speed_factor)
}
inline double SpeedCommand::_internal_target_speed_factor() const {
  if (linear_speed_case() == kTargetSpeedFactor) {
    return _impl_.linear_speed_.target_speed_factor_;
  }
  return 0;
}

// bool is_restore_target_speed = 5;
inline bool SpeedCommand::has_is_restore_target_speed() const {
  return linear_speed_case() == kIsRestoreTargetSpeed;
}
inline void SpeedCommand::set_has_is_restore_target_speed() {
  _impl_._oneof_case_[0] = kIsRestoreTargetSpeed;
}
inline void SpeedCommand::clear_is_restore_target_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (linear_speed_case() == kIsRestoreTargetSpeed) {
    _impl_.linear_speed_.is_restore_target_speed_ = false;
    clear_has_linear_speed();
  }
}
inline bool SpeedCommand::is_restore_target_speed() const {
  // @@protoc_insertion_point(field_get:control.external_command.SpeedCommand.is_restore_target_speed)
  return _internal_is_restore_target_speed();
}
inline void SpeedCommand::set_is_restore_target_speed(bool value) {
  if (linear_speed_case() != kIsRestoreTargetSpeed) {
    clear_linear_speed();
    set_has_is_restore_target_speed();
  }
  _impl_.linear_speed_.is_restore_target_speed_ = value;
  // @@protoc_insertion_point(field_set:control.external_command.SpeedCommand.is_restore_target_speed)
}
inline bool SpeedCommand::_internal_is_restore_target_speed() const {
  if (linear_speed_case() == kIsRestoreTargetSpeed) {
    return _impl_.linear_speed_.is_restore_target_speed_;
  }
  return false;
}

inline bool SpeedCommand::has_linear_speed() const {
  return linear_speed_case() != LINEAR_SPEED_NOT_SET;
}
inline void SpeedCommand::clear_has_linear_speed() {
  _impl_._oneof_case_[0] = LINEAR_SPEED_NOT_SET;
}
inline SpeedCommand::LinearSpeedCase SpeedCommand::linear_speed_case() const {
  return SpeedCommand::LinearSpeedCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace external_command
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_2epb_2eh

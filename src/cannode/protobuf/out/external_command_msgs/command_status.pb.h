// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external_command_msgs/command_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs/basic_msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto;
namespace control {
namespace external_command {
class CommandStatus;
class CommandStatusDefaultTypeInternal;
extern CommandStatusDefaultTypeInternal _CommandStatus_default_instance_;
class CommandStatusRequest;
class CommandStatusRequestDefaultTypeInternal;
extern CommandStatusRequestDefaultTypeInternal _CommandStatusRequest_default_instance_;
}  // namespace external_command
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::external_command::CommandStatus* Arena::CreateMaybeMessage<::control::external_command::CommandStatus>(Arena*);
template<> ::control::external_command::CommandStatusRequest* Arena::CreateMaybeMessage<::control::external_command::CommandStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {
namespace external_command {

enum CommandStatusType : int {
  RUNNING = 1,
  FINISHED = 2,
  ERROR = 3,
  UNKNOWN = 4
};
bool CommandStatusType_IsValid(int value);
constexpr CommandStatusType CommandStatusType_MIN = RUNNING;
constexpr CommandStatusType CommandStatusType_MAX = UNKNOWN;
constexpr int CommandStatusType_ARRAYSIZE = CommandStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandStatusType_descriptor();
template<typename T>
inline const std::string& CommandStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandStatusType_descriptor(), enum_t_value);
}
inline bool CommandStatusType_Parse(
    const std::string& name, CommandStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandStatusType>(
    CommandStatusType_descriptor(), name, value);
}
// ===================================================================

class CommandStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.external_command.CommandStatusRequest) */ {
 public:
  inline CommandStatusRequest() : CommandStatusRequest(nullptr) {};
  virtual ~CommandStatusRequest();

  CommandStatusRequest(const CommandStatusRequest& from);
  CommandStatusRequest(CommandStatusRequest&& from) noexcept
    : CommandStatusRequest() {
    *this = ::std::move(from);
  }

  inline CommandStatusRequest& operator=(const CommandStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStatusRequest& operator=(CommandStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CommandStatusRequest*>(
               &_CommandStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandStatusRequest& a, CommandStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandStatusRequest* New() const final {
    return CreateMaybeMessage<CommandStatusRequest>(nullptr);
  }

  CommandStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandStatusRequest& from);
  void MergeFrom(const CommandStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.external_command.CommandStatusRequest";
  }
  protected:
  explicit CommandStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto);
    return ::descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCommandIdFieldNumber = 2,
  };
  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // optional int64 command_id = 2 [default = -1];
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int64 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:control.external_command.CommandStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 command_id_;
  friend struct ::TableStruct_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class CommandStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.external_command.CommandStatus) */ {
 public:
  inline CommandStatus() : CommandStatus(nullptr) {};
  virtual ~CommandStatus();

  CommandStatus(const CommandStatus& from);
  CommandStatus(CommandStatus&& from) noexcept
    : CommandStatus() {
    *this = ::std::move(from);
  }

  inline CommandStatus& operator=(const CommandStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStatus& operator=(CommandStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandStatus* internal_default_instance() {
    return reinterpret_cast<const CommandStatus*>(
               &_CommandStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandStatus& a, CommandStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandStatus* New() const final {
    return CreateMaybeMessage<CommandStatus>(nullptr);
  }

  CommandStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandStatus& from);
  void MergeFrom(const CommandStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.external_command.CommandStatus";
  }
  protected:
  explicit CommandStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto);
    return ::descriptor_table_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 3,
    kCommandIdFieldNumber = 2,
  };
  // optional string message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // required .control.external_command.CommandStatusType status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::control::external_command::CommandStatusType status() const;
  void set_status(::control::external_command::CommandStatusType value);
  private:
  ::control::external_command::CommandStatusType _internal_status() const;
  void _internal_set_status(::control::external_command::CommandStatusType value);
  public:

  // optional int64 command_id = 2 [default = -1];
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int64 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:control.external_command.CommandStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::control::common::Header* header_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 command_id_;
  friend struct ::TableStruct_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandStatusRequest

// optional .control.common.Header header = 1;
inline bool CommandStatusRequest::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CommandStatusRequest::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& CommandStatusRequest::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& CommandStatusRequest::header() const {
  // @@protoc_insertion_point(field_get:control.external_command.CommandStatusRequest.header)
  return _internal_header();
}
inline void CommandStatusRequest::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.external_command.CommandStatusRequest.header)
}
inline ::control::common::Header* CommandStatusRequest::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* CommandStatusRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.external_command.CommandStatusRequest.header)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* CommandStatusRequest::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* CommandStatusRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.external_command.CommandStatusRequest.header)
  return _internal_mutable_header();
}
inline void CommandStatusRequest::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.external_command.CommandStatusRequest.header)
}

// optional int64 command_id = 2 [default = -1];
inline bool CommandStatusRequest::_internal_has_command_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandStatusRequest::has_command_id() const {
  return _internal_has_command_id();
}
inline void CommandStatusRequest::clear_command_id() {
  command_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandStatusRequest::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandStatusRequest::command_id() const {
  // @@protoc_insertion_point(field_get:control.external_command.CommandStatusRequest.command_id)
  return _internal_command_id();
}
inline void CommandStatusRequest::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  command_id_ = value;
}
inline void CommandStatusRequest::set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:control.external_command.CommandStatusRequest.command_id)
}

// -------------------------------------------------------------------

// CommandStatus

// optional .control.common.Header header = 1;
inline bool CommandStatus::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CommandStatus::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& CommandStatus::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& CommandStatus::header() const {
  // @@protoc_insertion_point(field_get:control.external_command.CommandStatus.header)
  return _internal_header();
}
inline void CommandStatus::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.external_command.CommandStatus.header)
}
inline ::control::common::Header* CommandStatus::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* CommandStatus::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.external_command.CommandStatus.header)
  _has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* CommandStatus::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* CommandStatus::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.external_command.CommandStatus.header)
  return _internal_mutable_header();
}
inline void CommandStatus::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.external_command.CommandStatus.header)
}

// optional int64 command_id = 2 [default = -1];
inline bool CommandStatus::_internal_has_command_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandStatus::has_command_id() const {
  return _internal_has_command_id();
}
inline void CommandStatus::clear_command_id() {
  command_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandStatus::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandStatus::command_id() const {
  // @@protoc_insertion_point(field_get:control.external_command.CommandStatus.command_id)
  return _internal_command_id();
}
inline void CommandStatus::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  command_id_ = value;
}
inline void CommandStatus::set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:control.external_command.CommandStatus.command_id)
}

// required .control.external_command.CommandStatusType status = 3;
inline bool CommandStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandStatus::has_status() const {
  return _internal_has_status();
}
inline void CommandStatus::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::control::external_command::CommandStatusType CommandStatus::_internal_status() const {
  return static_cast< ::control::external_command::CommandStatusType >(status_);
}
inline ::control::external_command::CommandStatusType CommandStatus::status() const {
  // @@protoc_insertion_point(field_get:control.external_command.CommandStatus.status)
  return _internal_status();
}
inline void CommandStatus::_internal_set_status(::control::external_command::CommandStatusType value) {
  assert(::control::external_command::CommandStatusType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void CommandStatus::set_status(::control::external_command::CommandStatusType value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:control.external_command.CommandStatus.status)
}

// optional string message = 4;
inline bool CommandStatus::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandStatus::has_message() const {
  return _internal_has_message();
}
inline void CommandStatus::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandStatus::message() const {
  // @@protoc_insertion_point(field_get:control.external_command.CommandStatus.message)
  return _internal_message();
}
inline void CommandStatus::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:control.external_command.CommandStatus.message)
}
inline std::string* CommandStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:control.external_command.CommandStatus.message)
  return _internal_mutable_message();
}
inline const std::string& CommandStatus::_internal_message() const {
  return message_.Get();
}
inline void CommandStatus::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandStatus::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:control.external_command.CommandStatus.message)
}
inline void CommandStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:control.external_command.CommandStatus.message)
}
inline void CommandStatus::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:control.external_command.CommandStatus.message)
}
inline std::string* CommandStatus::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandStatus::release_message() {
  // @@protoc_insertion_point(field_release:control.external_command.CommandStatus.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:control.external_command.CommandStatus.message)
}
inline std::string* CommandStatus::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:control.external_command.CommandStatus.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommandStatus::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.external_command.CommandStatus.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace external_command
}  // namespace control

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::control::external_command::CommandStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::control::external_command::CommandStatusType>() {
  return ::control::external_command::CommandStatusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_external_5fcommand_5fmsgs_2fcommand_5fstatus_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external_command_msgs/speed_command.proto

#include "external_command_msgs/speed_command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
namespace control {
namespace external_command {
class SpeedCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedCommand> _instance;
  double target_speed_;
  double target_speed_factor_;
  bool is_restore_target_speed_;
} _SpeedCommand_default_instance_;
}  // namespace external_command
}  // namespace control
static void InitDefaultsscc_info_SpeedCommand_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::external_command::_SpeedCommand_default_instance_;
    new (ptr) ::control::external_command::SpeedCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::external_command::SpeedCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedCommand_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpeedCommand_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, header_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, command_id_),
  offsetof(::control::external_command::SpeedCommandDefaultTypeInternal, target_speed_),
  offsetof(::control::external_command::SpeedCommandDefaultTypeInternal, target_speed_factor_),
  offsetof(::control::external_command::SpeedCommandDefaultTypeInternal, is_restore_target_speed_),
  PROTOBUF_FIELD_OFFSET(::control::external_command::SpeedCommand, linear_speed_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::control::external_command::SpeedCommand)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::external_command::_SpeedCommand_default_instance_),
};

const char descriptor_table_protodef_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)external_command_msgs/speed_command.pr"
  "oto\022\030control.external_command\032#common_ms"
  "gs/basic_msgs/header.proto\"\270\001\n\014SpeedComm"
  "and\022&\n\006header\030\001 \001(\0132\026.control.common.Hea"
  "der\022\026\n\ncommand_id\030\002 \001(\003:\002-1\022\026\n\014target_sp"
  "eed\030\003 \001(\001H\000\022\035\n\023target_speed_factor\030\004 \001(\001"
  "H\000\022!\n\027is_restore_target_speed\030\005 \001(\010H\000B\016\n"
  "\014linear_speed"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_deps[1] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_sccs[1] = {
  &scc_info_SpeedCommand_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto = {
  false, false, descriptor_table_protodef_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto, "external_command_msgs/speed_command.proto", 293,
  &descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_once, descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_sccs, descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto::offsets,
  file_level_metadata_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto, 1, file_level_enum_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto, file_level_service_descriptors_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto)), true);
namespace control {
namespace external_command {

// ===================================================================

void SpeedCommand::InitAsDefaultInstance() {
  ::control::external_command::_SpeedCommand_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::external_command::_SpeedCommand_default_instance_.target_speed_ = 0;
  ::control::external_command::_SpeedCommand_default_instance_.target_speed_factor_ = 0;
  ::control::external_command::_SpeedCommand_default_instance_.is_restore_target_speed_ = false;
}
class SpeedCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedCommand>()._has_bits_);
  static const ::control::common::Header& header(const SpeedCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::control::common::Header&
SpeedCommand::_Internal::header(const SpeedCommand* msg) {
  return *msg->header_;
}
void SpeedCommand::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpeedCommand::SpeedCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.external_command.SpeedCommand)
}
SpeedCommand::SpeedCommand(const SpeedCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  command_id_ = from.command_id_;
  clear_has_linear_speed();
  switch (from.linear_speed_case()) {
    case kTargetSpeed: {
      _internal_set_target_speed(from._internal_target_speed());
      break;
    }
    case kTargetSpeedFactor: {
      _internal_set_target_speed_factor(from._internal_target_speed_factor());
      break;
    }
    case kIsRestoreTargetSpeed: {
      _internal_set_is_restore_target_speed(from._internal_is_restore_target_speed());
      break;
    }
    case LINEAR_SPEED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:control.external_command.SpeedCommand)
}

void SpeedCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedCommand_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto.base);
  header_ = nullptr;
  command_id_ = PROTOBUF_LONGLONG(-1);
  clear_has_linear_speed();
}

SpeedCommand::~SpeedCommand() {
  // @@protoc_insertion_point(destructor:control.external_command.SpeedCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_linear_speed()) {
    clear_linear_speed();
  }
}

void SpeedCommand::ArenaDtor(void* object) {
  SpeedCommand* _this = reinterpret_cast< SpeedCommand* >(object);
  (void)_this;
}
void SpeedCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedCommand& SpeedCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedCommand_external_5fcommand_5fmsgs_2fspeed_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void SpeedCommand::clear_linear_speed() {
// @@protoc_insertion_point(one_of_clear_start:control.external_command.SpeedCommand)
  switch (linear_speed_case()) {
    case kTargetSpeed: {
      // No need to clear
      break;
    }
    case kTargetSpeedFactor: {
      // No need to clear
      break;
    }
    case kIsRestoreTargetSpeed: {
      // No need to clear
      break;
    }
    case LINEAR_SPEED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LINEAR_SPEED_NOT_SET;
}


void SpeedCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:control.external_command.SpeedCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    command_id_ = PROTOBUF_LONGLONG(-1);
  }
  clear_linear_speed();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double target_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_target_speed(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double target_speed_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_target_speed_factor(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_restore_target_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_is_restore_target_speed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.external_command.SpeedCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_command_id(), target);
  }

  switch (linear_speed_case()) {
    case kTargetSpeed: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_target_speed(), target);
      break;
    }
    case kTargetSpeedFactor: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_target_speed_factor(), target);
      break;
    }
    case kIsRestoreTargetSpeed: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_restore_target_speed(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.external_command.SpeedCommand)
  return target;
}

size_t SpeedCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.external_command.SpeedCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int64 command_id = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_command_id());
    }

  }
  switch (linear_speed_case()) {
    // double target_speed = 3;
    case kTargetSpeed: {
      total_size += 1 + 8;
      break;
    }
    // double target_speed_factor = 4;
    case kTargetSpeedFactor: {
      total_size += 1 + 8;
      break;
    }
    // bool is_restore_target_speed = 5;
    case kIsRestoreTargetSpeed: {
      total_size += 1 + 1;
      break;
    }
    case LINEAR_SPEED_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.external_command.SpeedCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.external_command.SpeedCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.external_command.SpeedCommand)
    MergeFrom(*source);
  }
}

void SpeedCommand::MergeFrom(const SpeedCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.external_command.SpeedCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.linear_speed_case()) {
    case kTargetSpeed: {
      _internal_set_target_speed(from._internal_target_speed());
      break;
    }
    case kTargetSpeedFactor: {
      _internal_set_target_speed_factor(from._internal_target_speed_factor());
      break;
    }
    case kIsRestoreTargetSpeed: {
      _internal_set_is_restore_target_speed(from._internal_is_restore_target_speed());
      break;
    }
    case LINEAR_SPEED_NOT_SET: {
      break;
    }
  }
}

void SpeedCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.external_command.SpeedCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedCommand::CopyFrom(const SpeedCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.external_command.SpeedCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedCommand::IsInitialized() const {
  return true;
}

void SpeedCommand::InternalSwap(SpeedCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(command_id_, other->command_id_);
  swap(linear_speed_, other->linear_speed_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace external_command
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::external_command::SpeedCommand* Arena::CreateMaybeMessage< ::control::external_command::SpeedCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::external_command::SpeedCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

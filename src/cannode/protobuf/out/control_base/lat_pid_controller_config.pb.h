// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/lat_pid_controller_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
namespace control {
class LatPidConfig;
class LatPidConfigDefaultTypeInternal;
extern LatPidConfigDefaultTypeInternal _LatPidConfig_default_instance_;
class PiffCCSteeringFakeDeadZoneConfig;
class PiffCCSteeringFakeDeadZoneConfigDefaultTypeInternal;
extern PiffCCSteeringFakeDeadZoneConfigDefaultTypeInternal _PiffCCSteeringFakeDeadZoneConfig_default_instance_;
class PiffCoeffientGainConfig;
class PiffCoeffientGainConfigDefaultTypeInternal;
extern PiffCoeffientGainConfigDefaultTypeInternal _PiffCoeffientGainConfig_default_instance_;
class PiffCommonParametersConfig;
class PiffCommonParametersConfigDefaultTypeInternal;
extern PiffCommonParametersConfigDefaultTypeInternal _PiffCommonParametersConfig_default_instance_;
class PiffControllerContentConfig;
class PiffControllerContentConfigDefaultTypeInternal;
extern PiffControllerContentConfigDefaultTypeInternal _PiffControllerContentConfig_default_instance_;
class PiffControllerContentRateConfig;
class PiffControllerContentRateConfigDefaultTypeInternal;
extern PiffControllerContentRateConfigDefaultTypeInternal _PiffControllerContentRateConfig_default_instance_;
class PiffDTInputFrameLimitConfig;
class PiffDTInputFrameLimitConfigDefaultTypeInternal;
extern PiffDTInputFrameLimitConfigDefaultTypeInternal _PiffDTInputFrameLimitConfig_default_instance_;
class PiffDTInputMaxLimitConfig;
class PiffDTInputMaxLimitConfigDefaultTypeInternal;
extern PiffDTInputMaxLimitConfigDefaultTypeInternal _PiffDTInputMaxLimitConfig_default_instance_;
class PiffDataTransformConfig;
class PiffDataTransformConfigDefaultTypeInternal;
extern PiffDataTransformConfigDefaultTypeInternal _PiffDataTransformConfig_default_instance_;
class PiffIntegratorConfig;
class PiffIntegratorConfigDefaultTypeInternal;
extern PiffIntegratorConfigDefaultTypeInternal _PiffIntegratorConfig_default_instance_;
class PiffLinearModeIntegratorConfig;
class PiffLinearModeIntegratorConfigDefaultTypeInternal;
extern PiffLinearModeIntegratorConfigDefaultTypeInternal _PiffLinearModeIntegratorConfig_default_instance_;
class PiffMeanFilterConfig;
class PiffMeanFilterConfigDefaultTypeInternal;
extern PiffMeanFilterConfigDefaultTypeInternal _PiffMeanFilterConfig_default_instance_;
class PiffMeanFilterSwitch;
class PiffMeanFilterSwitchDefaultTypeInternal;
extern PiffMeanFilterSwitchDefaultTypeInternal _PiffMeanFilterSwitch_default_instance_;
class PiffMeanFilterWindowSize;
class PiffMeanFilterWindowSizeDefaultTypeInternal;
extern PiffMeanFilterWindowSizeDefaultTypeInternal _PiffMeanFilterWindowSize_default_instance_;
class PiffPPActivateControlConfig;
class PiffPPActivateControlConfigDefaultTypeInternal;
extern PiffPPActivateControlConfigDefaultTypeInternal _PiffPPActivateControlConfig_default_instance_;
class PiffPPActivateControlContentConfig;
class PiffPPActivateControlContentConfigDefaultTypeInternal;
extern PiffPPActivateControlContentConfigDefaultTypeInternal _PiffPPActivateControlContentConfig_default_instance_;
class PiffPPDeactivateControlConfig;
class PiffPPDeactivateControlConfigDefaultTypeInternal;
extern PiffPPDeactivateControlConfigDefaultTypeInternal _PiffPPDeactivateControlConfig_default_instance_;
class PiffPPDectivateControlContentConfig;
class PiffPPDectivateControlContentConfigDefaultTypeInternal;
extern PiffPPDectivateControlContentConfigDefaultTypeInternal _PiffPPDectivateControlContentConfig_default_instance_;
class PiffPPSteeringAngleLimit;
class PiffPPSteeringAngleLimitDefaultTypeInternal;
extern PiffPPSteeringAngleLimitDefaultTypeInternal _PiffPPSteeringAngleLimit_default_instance_;
class PiffParameters;
class PiffParametersDefaultTypeInternal;
extern PiffParametersDefaultTypeInternal _PiffParameters_default_instance_;
class PiffPercentageModeIntegratorConfig;
class PiffPercentageModeIntegratorConfigDefaultTypeInternal;
extern PiffPercentageModeIntegratorConfigDefaultTypeInternal _PiffPercentageModeIntegratorConfig_default_instance_;
class PiffPostProcessConfig;
class PiffPostProcessConfigDefaultTypeInternal;
extern PiffPostProcessConfigDefaultTypeInternal _PiffPostProcessConfig_default_instance_;
class PiffProtectIntegratorConfig;
class PiffProtectIntegratorConfigDefaultTypeInternal;
extern PiffProtectIntegratorConfigDefaultTypeInternal _PiffProtectIntegratorConfig_default_instance_;
class PiffTrackingDifferentiatorConfig;
class PiffTrackingDifferentiatorConfigDefaultTypeInternal;
extern PiffTrackingDifferentiatorConfigDefaultTypeInternal _PiffTrackingDifferentiatorConfig_default_instance_;
class PiffTrackingDifferentiatorStateParameters;
class PiffTrackingDifferentiatorStateParametersDefaultTypeInternal;
extern PiffTrackingDifferentiatorStateParametersDefaultTypeInternal _PiffTrackingDifferentiatorStateParameters_default_instance_;
class PiffTrackingDifferentiatorSwitch;
class PiffTrackingDifferentiatorSwitchDefaultTypeInternal;
extern PiffTrackingDifferentiatorSwitchDefaultTypeInternal _PiffTrackingDifferentiatorSwitch_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::LatPidConfig* Arena::CreateMaybeMessage<::control::LatPidConfig>(Arena*);
template<> ::control::PiffCCSteeringFakeDeadZoneConfig* Arena::CreateMaybeMessage<::control::PiffCCSteeringFakeDeadZoneConfig>(Arena*);
template<> ::control::PiffCoeffientGainConfig* Arena::CreateMaybeMessage<::control::PiffCoeffientGainConfig>(Arena*);
template<> ::control::PiffCommonParametersConfig* Arena::CreateMaybeMessage<::control::PiffCommonParametersConfig>(Arena*);
template<> ::control::PiffControllerContentConfig* Arena::CreateMaybeMessage<::control::PiffControllerContentConfig>(Arena*);
template<> ::control::PiffControllerContentRateConfig* Arena::CreateMaybeMessage<::control::PiffControllerContentRateConfig>(Arena*);
template<> ::control::PiffDTInputFrameLimitConfig* Arena::CreateMaybeMessage<::control::PiffDTInputFrameLimitConfig>(Arena*);
template<> ::control::PiffDTInputMaxLimitConfig* Arena::CreateMaybeMessage<::control::PiffDTInputMaxLimitConfig>(Arena*);
template<> ::control::PiffDataTransformConfig* Arena::CreateMaybeMessage<::control::PiffDataTransformConfig>(Arena*);
template<> ::control::PiffIntegratorConfig* Arena::CreateMaybeMessage<::control::PiffIntegratorConfig>(Arena*);
template<> ::control::PiffLinearModeIntegratorConfig* Arena::CreateMaybeMessage<::control::PiffLinearModeIntegratorConfig>(Arena*);
template<> ::control::PiffMeanFilterConfig* Arena::CreateMaybeMessage<::control::PiffMeanFilterConfig>(Arena*);
template<> ::control::PiffMeanFilterSwitch* Arena::CreateMaybeMessage<::control::PiffMeanFilterSwitch>(Arena*);
template<> ::control::PiffMeanFilterWindowSize* Arena::CreateMaybeMessage<::control::PiffMeanFilterWindowSize>(Arena*);
template<> ::control::PiffPPActivateControlConfig* Arena::CreateMaybeMessage<::control::PiffPPActivateControlConfig>(Arena*);
template<> ::control::PiffPPActivateControlContentConfig* Arena::CreateMaybeMessage<::control::PiffPPActivateControlContentConfig>(Arena*);
template<> ::control::PiffPPDeactivateControlConfig* Arena::CreateMaybeMessage<::control::PiffPPDeactivateControlConfig>(Arena*);
template<> ::control::PiffPPDectivateControlContentConfig* Arena::CreateMaybeMessage<::control::PiffPPDectivateControlContentConfig>(Arena*);
template<> ::control::PiffPPSteeringAngleLimit* Arena::CreateMaybeMessage<::control::PiffPPSteeringAngleLimit>(Arena*);
template<> ::control::PiffParameters* Arena::CreateMaybeMessage<::control::PiffParameters>(Arena*);
template<> ::control::PiffPercentageModeIntegratorConfig* Arena::CreateMaybeMessage<::control::PiffPercentageModeIntegratorConfig>(Arena*);
template<> ::control::PiffPostProcessConfig* Arena::CreateMaybeMessage<::control::PiffPostProcessConfig>(Arena*);
template<> ::control::PiffProtectIntegratorConfig* Arena::CreateMaybeMessage<::control::PiffProtectIntegratorConfig>(Arena*);
template<> ::control::PiffTrackingDifferentiatorConfig* Arena::CreateMaybeMessage<::control::PiffTrackingDifferentiatorConfig>(Arena*);
template<> ::control::PiffTrackingDifferentiatorStateParameters* Arena::CreateMaybeMessage<::control::PiffTrackingDifferentiatorStateParameters>(Arena*);
template<> ::control::PiffTrackingDifferentiatorSwitch* Arena::CreateMaybeMessage<::control::PiffTrackingDifferentiatorSwitch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class PiffParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffParameters) */ {
 public:
  inline PiffParameters() : PiffParameters(nullptr) {};
  virtual ~PiffParameters();

  PiffParameters(const PiffParameters& from);
  PiffParameters(PiffParameters&& from) noexcept
    : PiffParameters() {
    *this = ::std::move(from);
  }

  inline PiffParameters& operator=(const PiffParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffParameters& operator=(PiffParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffParameters* internal_default_instance() {
    return reinterpret_cast<const PiffParameters*>(
               &_PiffParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PiffParameters& a, PiffParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffParameters* New() const final {
    return CreateMaybeMessage<PiffParameters>(nullptr);
  }

  PiffParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffParameters& from);
  void MergeFrom(const PiffParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffParameters";
  }
  protected:
  explicit PiffParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixKFieldNumber = 3,
    kCurvatureFieldNumber = 1,
    kSpeedKphFieldNumber = 2,
  };
  // repeated float matrix_k = 3;
  int matrix_k_size() const;
  private:
  int _internal_matrix_k_size() const;
  public:
  void clear_matrix_k();
  private:
  float _internal_matrix_k(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_matrix_k() const;
  void _internal_add_matrix_k(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_matrix_k();
  public:
  float matrix_k(int index) const;
  void set_matrix_k(int index, float value);
  void add_matrix_k(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      matrix_k() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_matrix_k();

  // required float curvature = 1;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);
  private:
  float _internal_curvature() const;
  void _internal_set_curvature(float value);
  public:

  // required float speed_kph = 2;
  bool has_speed_kph() const;
  private:
  bool _internal_has_speed_kph() const;
  public:
  void clear_speed_kph();
  float speed_kph() const;
  void set_speed_kph(float value);
  private:
  float _internal_speed_kph() const;
  void _internal_set_speed_kph(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffParameters)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > matrix_k_;
  float curvature_;
  float speed_kph_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffMeanFilterSwitch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffMeanFilterSwitch) */ {
 public:
  inline PiffMeanFilterSwitch() : PiffMeanFilterSwitch(nullptr) {};
  virtual ~PiffMeanFilterSwitch();

  PiffMeanFilterSwitch(const PiffMeanFilterSwitch& from);
  PiffMeanFilterSwitch(PiffMeanFilterSwitch&& from) noexcept
    : PiffMeanFilterSwitch() {
    *this = ::std::move(from);
  }

  inline PiffMeanFilterSwitch& operator=(const PiffMeanFilterSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffMeanFilterSwitch& operator=(PiffMeanFilterSwitch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffMeanFilterSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffMeanFilterSwitch* internal_default_instance() {
    return reinterpret_cast<const PiffMeanFilterSwitch*>(
               &_PiffMeanFilterSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PiffMeanFilterSwitch& a, PiffMeanFilterSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffMeanFilterSwitch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffMeanFilterSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffMeanFilterSwitch* New() const final {
    return CreateMaybeMessage<PiffMeanFilterSwitch>(nullptr);
  }

  PiffMeanFilterSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffMeanFilterSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffMeanFilterSwitch& from);
  void MergeFrom(const PiffMeanFilterSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffMeanFilterSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffMeanFilterSwitch";
  }
  protected:
  explicit PiffMeanFilterSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableCenterLineC0FieldNumber = 1,
    kEnableCenterLineC1FieldNumber = 2,
    kEnableCenterLineC2FieldNumber = 3,
    kEnableSpeedMpsFieldNumber = 4,
    kEnableYawRateFieldNumber = 5,
  };
  // required bool enable_center_line_c0 = 1;
  bool has_enable_center_line_c0() const;
  private:
  bool _internal_has_enable_center_line_c0() const;
  public:
  void clear_enable_center_line_c0();
  bool enable_center_line_c0() const;
  void set_enable_center_line_c0(bool value);
  private:
  bool _internal_enable_center_line_c0() const;
  void _internal_set_enable_center_line_c0(bool value);
  public:

  // required bool enable_center_line_c1 = 2;
  bool has_enable_center_line_c1() const;
  private:
  bool _internal_has_enable_center_line_c1() const;
  public:
  void clear_enable_center_line_c1();
  bool enable_center_line_c1() const;
  void set_enable_center_line_c1(bool value);
  private:
  bool _internal_enable_center_line_c1() const;
  void _internal_set_enable_center_line_c1(bool value);
  public:

  // required bool enable_center_line_c2 = 3;
  bool has_enable_center_line_c2() const;
  private:
  bool _internal_has_enable_center_line_c2() const;
  public:
  void clear_enable_center_line_c2();
  bool enable_center_line_c2() const;
  void set_enable_center_line_c2(bool value);
  private:
  bool _internal_enable_center_line_c2() const;
  void _internal_set_enable_center_line_c2(bool value);
  public:

  // required bool enable_speed_mps = 4;
  bool has_enable_speed_mps() const;
  private:
  bool _internal_has_enable_speed_mps() const;
  public:
  void clear_enable_speed_mps();
  bool enable_speed_mps() const;
  void set_enable_speed_mps(bool value);
  private:
  bool _internal_enable_speed_mps() const;
  void _internal_set_enable_speed_mps(bool value);
  public:

  // required bool enable_yaw_rate = 5;
  bool has_enable_yaw_rate() const;
  private:
  bool _internal_has_enable_yaw_rate() const;
  public:
  void clear_enable_yaw_rate();
  bool enable_yaw_rate() const;
  void set_enable_yaw_rate(bool value);
  private:
  bool _internal_enable_yaw_rate() const;
  void _internal_set_enable_yaw_rate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffMeanFilterSwitch)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_center_line_c0_;
  bool enable_center_line_c1_;
  bool enable_center_line_c2_;
  bool enable_speed_mps_;
  bool enable_yaw_rate_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffMeanFilterWindowSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffMeanFilterWindowSize) */ {
 public:
  inline PiffMeanFilterWindowSize() : PiffMeanFilterWindowSize(nullptr) {};
  virtual ~PiffMeanFilterWindowSize();

  PiffMeanFilterWindowSize(const PiffMeanFilterWindowSize& from);
  PiffMeanFilterWindowSize(PiffMeanFilterWindowSize&& from) noexcept
    : PiffMeanFilterWindowSize() {
    *this = ::std::move(from);
  }

  inline PiffMeanFilterWindowSize& operator=(const PiffMeanFilterWindowSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffMeanFilterWindowSize& operator=(PiffMeanFilterWindowSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffMeanFilterWindowSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffMeanFilterWindowSize* internal_default_instance() {
    return reinterpret_cast<const PiffMeanFilterWindowSize*>(
               &_PiffMeanFilterWindowSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PiffMeanFilterWindowSize& a, PiffMeanFilterWindowSize& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffMeanFilterWindowSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffMeanFilterWindowSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffMeanFilterWindowSize* New() const final {
    return CreateMaybeMessage<PiffMeanFilterWindowSize>(nullptr);
  }

  PiffMeanFilterWindowSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffMeanFilterWindowSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffMeanFilterWindowSize& from);
  void MergeFrom(const PiffMeanFilterWindowSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffMeanFilterWindowSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffMeanFilterWindowSize";
  }
  protected:
  explicit PiffMeanFilterWindowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterLineC0MfwsFieldNumber = 1,
    kCenterLineC1MfwsFieldNumber = 2,
    kCenterLineC2MfwsFieldNumber = 3,
    kSpeedMpsMfwsFieldNumber = 4,
    kYawRateMfwsFieldNumber = 5,
  };
  // required int32 center_line_c0_mfws = 1;
  bool has_center_line_c0_mfws() const;
  private:
  bool _internal_has_center_line_c0_mfws() const;
  public:
  void clear_center_line_c0_mfws();
  ::PROTOBUF_NAMESPACE_ID::int32 center_line_c0_mfws() const;
  void set_center_line_c0_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_center_line_c0_mfws() const;
  void _internal_set_center_line_c0_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 center_line_c1_mfws = 2;
  bool has_center_line_c1_mfws() const;
  private:
  bool _internal_has_center_line_c1_mfws() const;
  public:
  void clear_center_line_c1_mfws();
  ::PROTOBUF_NAMESPACE_ID::int32 center_line_c1_mfws() const;
  void set_center_line_c1_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_center_line_c1_mfws() const;
  void _internal_set_center_line_c1_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 center_line_c2_mfws = 3;
  bool has_center_line_c2_mfws() const;
  private:
  bool _internal_has_center_line_c2_mfws() const;
  public:
  void clear_center_line_c2_mfws();
  ::PROTOBUF_NAMESPACE_ID::int32 center_line_c2_mfws() const;
  void set_center_line_c2_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_center_line_c2_mfws() const;
  void _internal_set_center_line_c2_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 speed_mps_mfws = 4;
  bool has_speed_mps_mfws() const;
  private:
  bool _internal_has_speed_mps_mfws() const;
  public:
  void clear_speed_mps_mfws();
  ::PROTOBUF_NAMESPACE_ID::int32 speed_mps_mfws() const;
  void set_speed_mps_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed_mps_mfws() const;
  void _internal_set_speed_mps_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 yaw_rate_mfws = 5;
  bool has_yaw_rate_mfws() const;
  private:
  bool _internal_has_yaw_rate_mfws() const;
  public:
  void clear_yaw_rate_mfws();
  ::PROTOBUF_NAMESPACE_ID::int32 yaw_rate_mfws() const;
  void set_yaw_rate_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yaw_rate_mfws() const;
  void _internal_set_yaw_rate_mfws(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffMeanFilterWindowSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 center_line_c0_mfws_;
  ::PROTOBUF_NAMESPACE_ID::int32 center_line_c1_mfws_;
  ::PROTOBUF_NAMESPACE_ID::int32 center_line_c2_mfws_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_mps_mfws_;
  ::PROTOBUF_NAMESPACE_ID::int32 yaw_rate_mfws_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffMeanFilterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffMeanFilterConfig) */ {
 public:
  inline PiffMeanFilterConfig() : PiffMeanFilterConfig(nullptr) {};
  virtual ~PiffMeanFilterConfig();

  PiffMeanFilterConfig(const PiffMeanFilterConfig& from);
  PiffMeanFilterConfig(PiffMeanFilterConfig&& from) noexcept
    : PiffMeanFilterConfig() {
    *this = ::std::move(from);
  }

  inline PiffMeanFilterConfig& operator=(const PiffMeanFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffMeanFilterConfig& operator=(PiffMeanFilterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffMeanFilterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffMeanFilterConfig* internal_default_instance() {
    return reinterpret_cast<const PiffMeanFilterConfig*>(
               &_PiffMeanFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PiffMeanFilterConfig& a, PiffMeanFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffMeanFilterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffMeanFilterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffMeanFilterConfig* New() const final {
    return CreateMaybeMessage<PiffMeanFilterConfig>(nullptr);
  }

  PiffMeanFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffMeanFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffMeanFilterConfig& from);
  void MergeFrom(const PiffMeanFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffMeanFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffMeanFilterConfig";
  }
  protected:
  explicit PiffMeanFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterSwitchFieldNumber = 1,
    kWindowSizeFieldNumber = 2,
  };
  // required .control.PiffMeanFilterSwitch filter_switch = 1;
  bool has_filter_switch() const;
  private:
  bool _internal_has_filter_switch() const;
  public:
  void clear_filter_switch();
  const ::control::PiffMeanFilterSwitch& filter_switch() const;
  ::control::PiffMeanFilterSwitch* release_filter_switch();
  ::control::PiffMeanFilterSwitch* mutable_filter_switch();
  void set_allocated_filter_switch(::control::PiffMeanFilterSwitch* filter_switch);
  private:
  const ::control::PiffMeanFilterSwitch& _internal_filter_switch() const;
  ::control::PiffMeanFilterSwitch* _internal_mutable_filter_switch();
  public:
  void unsafe_arena_set_allocated_filter_switch(
      ::control::PiffMeanFilterSwitch* filter_switch);
  ::control::PiffMeanFilterSwitch* unsafe_arena_release_filter_switch();

  // required .control.PiffMeanFilterWindowSize window_size = 2;
  bool has_window_size() const;
  private:
  bool _internal_has_window_size() const;
  public:
  void clear_window_size();
  const ::control::PiffMeanFilterWindowSize& window_size() const;
  ::control::PiffMeanFilterWindowSize* release_window_size();
  ::control::PiffMeanFilterWindowSize* mutable_window_size();
  void set_allocated_window_size(::control::PiffMeanFilterWindowSize* window_size);
  private:
  const ::control::PiffMeanFilterWindowSize& _internal_window_size() const;
  ::control::PiffMeanFilterWindowSize* _internal_mutable_window_size();
  public:
  void unsafe_arena_set_allocated_window_size(
      ::control::PiffMeanFilterWindowSize* window_size);
  ::control::PiffMeanFilterWindowSize* unsafe_arena_release_window_size();

  // @@protoc_insertion_point(class_scope:control.PiffMeanFilterConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::PiffMeanFilterSwitch* filter_switch_;
  ::control::PiffMeanFilterWindowSize* window_size_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffControllerContentRateConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffControllerContentRateConfig) */ {
 public:
  inline PiffControllerContentRateConfig() : PiffControllerContentRateConfig(nullptr) {};
  virtual ~PiffControllerContentRateConfig();

  PiffControllerContentRateConfig(const PiffControllerContentRateConfig& from);
  PiffControllerContentRateConfig(PiffControllerContentRateConfig&& from) noexcept
    : PiffControllerContentRateConfig() {
    *this = ::std::move(from);
  }

  inline PiffControllerContentRateConfig& operator=(const PiffControllerContentRateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffControllerContentRateConfig& operator=(PiffControllerContentRateConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffControllerContentRateConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffControllerContentRateConfig* internal_default_instance() {
    return reinterpret_cast<const PiffControllerContentRateConfig*>(
               &_PiffControllerContentRateConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PiffControllerContentRateConfig& a, PiffControllerContentRateConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffControllerContentRateConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffControllerContentRateConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffControllerContentRateConfig* New() const final {
    return CreateMaybeMessage<PiffControllerContentRateConfig>(nullptr);
  }

  PiffControllerContentRateConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffControllerContentRateConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffControllerContentRateConfig& from);
  void MergeFrom(const PiffControllerContentRateConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffControllerContentRateConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffControllerContentRateConfig";
  }
  protected:
  explicit PiffControllerContentRateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurvatureFieldNumber = 1,
    kSpeedKphFieldNumber = 2,
    kFfRateFieldNumber = 3,
    kFbRateFieldNumber = 4,
  };
  // required float curvature = 1;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);
  private:
  float _internal_curvature() const;
  void _internal_set_curvature(float value);
  public:

  // required float speed_kph = 2;
  bool has_speed_kph() const;
  private:
  bool _internal_has_speed_kph() const;
  public:
  void clear_speed_kph();
  float speed_kph() const;
  void set_speed_kph(float value);
  private:
  float _internal_speed_kph() const;
  void _internal_set_speed_kph(float value);
  public:

  // required float ff_rate = 3;
  bool has_ff_rate() const;
  private:
  bool _internal_has_ff_rate() const;
  public:
  void clear_ff_rate();
  float ff_rate() const;
  void set_ff_rate(float value);
  private:
  float _internal_ff_rate() const;
  void _internal_set_ff_rate(float value);
  public:

  // required float fb_rate = 4;
  bool has_fb_rate() const;
  private:
  bool _internal_has_fb_rate() const;
  public:
  void clear_fb_rate();
  float fb_rate() const;
  void set_fb_rate(float value);
  private:
  float _internal_fb_rate() const;
  void _internal_set_fb_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffControllerContentRateConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float curvature_;
  float speed_kph_;
  float ff_rate_;
  float fb_rate_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffLinearModeIntegratorConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffLinearModeIntegratorConfig) */ {
 public:
  inline PiffLinearModeIntegratorConfig() : PiffLinearModeIntegratorConfig(nullptr) {};
  virtual ~PiffLinearModeIntegratorConfig();

  PiffLinearModeIntegratorConfig(const PiffLinearModeIntegratorConfig& from);
  PiffLinearModeIntegratorConfig(PiffLinearModeIntegratorConfig&& from) noexcept
    : PiffLinearModeIntegratorConfig() {
    *this = ::std::move(from);
  }

  inline PiffLinearModeIntegratorConfig& operator=(const PiffLinearModeIntegratorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffLinearModeIntegratorConfig& operator=(PiffLinearModeIntegratorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffLinearModeIntegratorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffLinearModeIntegratorConfig* internal_default_instance() {
    return reinterpret_cast<const PiffLinearModeIntegratorConfig*>(
               &_PiffLinearModeIntegratorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PiffLinearModeIntegratorConfig& a, PiffLinearModeIntegratorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffLinearModeIntegratorConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffLinearModeIntegratorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffLinearModeIntegratorConfig* New() const final {
    return CreateMaybeMessage<PiffLinearModeIntegratorConfig>(nullptr);
  }

  PiffLinearModeIntegratorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffLinearModeIntegratorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffLinearModeIntegratorConfig& from);
  void MergeFrom(const PiffLinearModeIntegratorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffLinearModeIntegratorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffLinearModeIntegratorConfig";
  }
  protected:
  explicit PiffLinearModeIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKiFieldNumber = 2,
    kKiModeFieldNumber = 1,
  };
  // repeated float ki = 2;
  int ki_size() const;
  private:
  int _internal_ki_size() const;
  public:
  void clear_ki();
  private:
  float _internal_ki(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ki() const;
  void _internal_add_ki(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ki();
  public:
  float ki(int index) const;
  void set_ki(int index, float value);
  void add_ki(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ki() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ki();

  // required int32 ki_mode = 1;
  bool has_ki_mode() const;
  private:
  bool _internal_has_ki_mode() const;
  public:
  void clear_ki_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 ki_mode() const;
  void set_ki_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ki_mode() const;
  void _internal_set_ki_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffLinearModeIntegratorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ki_;
  ::PROTOBUF_NAMESPACE_ID::int32 ki_mode_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffPercentageModeIntegratorConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffPercentageModeIntegratorConfig) */ {
 public:
  inline PiffPercentageModeIntegratorConfig() : PiffPercentageModeIntegratorConfig(nullptr) {};
  virtual ~PiffPercentageModeIntegratorConfig();

  PiffPercentageModeIntegratorConfig(const PiffPercentageModeIntegratorConfig& from);
  PiffPercentageModeIntegratorConfig(PiffPercentageModeIntegratorConfig&& from) noexcept
    : PiffPercentageModeIntegratorConfig() {
    *this = ::std::move(from);
  }

  inline PiffPercentageModeIntegratorConfig& operator=(const PiffPercentageModeIntegratorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffPercentageModeIntegratorConfig& operator=(PiffPercentageModeIntegratorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffPercentageModeIntegratorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffPercentageModeIntegratorConfig* internal_default_instance() {
    return reinterpret_cast<const PiffPercentageModeIntegratorConfig*>(
               &_PiffPercentageModeIntegratorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PiffPercentageModeIntegratorConfig& a, PiffPercentageModeIntegratorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffPercentageModeIntegratorConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffPercentageModeIntegratorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffPercentageModeIntegratorConfig* New() const final {
    return CreateMaybeMessage<PiffPercentageModeIntegratorConfig>(nullptr);
  }

  PiffPercentageModeIntegratorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffPercentageModeIntegratorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffPercentageModeIntegratorConfig& from);
  void MergeFrom(const PiffPercentageModeIntegratorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffPercentageModeIntegratorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffPercentageModeIntegratorConfig";
  }
  protected:
  explicit PiffPercentageModeIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackPercentageFieldNumber = 1,
    kEnableLateralErrContributionFieldNumber = 2,
    kEnableLateralErrRateContributionFieldNumber = 3,
    kEnableHeadingErrContributionFieldNumber = 4,
    kEnableHeadingErrRateContributionFieldNumber = 5,
  };
  // required float track_percentage = 1;
  bool has_track_percentage() const;
  private:
  bool _internal_has_track_percentage() const;
  public:
  void clear_track_percentage();
  float track_percentage() const;
  void set_track_percentage(float value);
  private:
  float _internal_track_percentage() const;
  void _internal_set_track_percentage(float value);
  public:

  // required bool enable_lateral_err_contribution = 2;
  bool has_enable_lateral_err_contribution() const;
  private:
  bool _internal_has_enable_lateral_err_contribution() const;
  public:
  void clear_enable_lateral_err_contribution();
  bool enable_lateral_err_contribution() const;
  void set_enable_lateral_err_contribution(bool value);
  private:
  bool _internal_enable_lateral_err_contribution() const;
  void _internal_set_enable_lateral_err_contribution(bool value);
  public:

  // required bool enable_lateral_err_rate_contribution = 3;
  bool has_enable_lateral_err_rate_contribution() const;
  private:
  bool _internal_has_enable_lateral_err_rate_contribution() const;
  public:
  void clear_enable_lateral_err_rate_contribution();
  bool enable_lateral_err_rate_contribution() const;
  void set_enable_lateral_err_rate_contribution(bool value);
  private:
  bool _internal_enable_lateral_err_rate_contribution() const;
  void _internal_set_enable_lateral_err_rate_contribution(bool value);
  public:

  // required bool enable_heading_err_contribution = 4;
  bool has_enable_heading_err_contribution() const;
  private:
  bool _internal_has_enable_heading_err_contribution() const;
  public:
  void clear_enable_heading_err_contribution();
  bool enable_heading_err_contribution() const;
  void set_enable_heading_err_contribution(bool value);
  private:
  bool _internal_enable_heading_err_contribution() const;
  void _internal_set_enable_heading_err_contribution(bool value);
  public:

  // required bool enable_heading_err_rate_contribution = 5;
  bool has_enable_heading_err_rate_contribution() const;
  private:
  bool _internal_has_enable_heading_err_rate_contribution() const;
  public:
  void clear_enable_heading_err_rate_contribution();
  bool enable_heading_err_rate_contribution() const;
  void set_enable_heading_err_rate_contribution(bool value);
  private:
  bool _internal_enable_heading_err_rate_contribution() const;
  void _internal_set_enable_heading_err_rate_contribution(bool value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffPercentageModeIntegratorConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float track_percentage_;
  bool enable_lateral_err_contribution_;
  bool enable_lateral_err_rate_contribution_;
  bool enable_heading_err_contribution_;
  bool enable_heading_err_rate_contribution_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffProtectIntegratorConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffProtectIntegratorConfig) */ {
 public:
  inline PiffProtectIntegratorConfig() : PiffProtectIntegratorConfig(nullptr) {};
  virtual ~PiffProtectIntegratorConfig();

  PiffProtectIntegratorConfig(const PiffProtectIntegratorConfig& from);
  PiffProtectIntegratorConfig(PiffProtectIntegratorConfig&& from) noexcept
    : PiffProtectIntegratorConfig() {
    *this = ::std::move(from);
  }

  inline PiffProtectIntegratorConfig& operator=(const PiffProtectIntegratorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffProtectIntegratorConfig& operator=(PiffProtectIntegratorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffProtectIntegratorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffProtectIntegratorConfig* internal_default_instance() {
    return reinterpret_cast<const PiffProtectIntegratorConfig*>(
               &_PiffProtectIntegratorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PiffProtectIntegratorConfig& a, PiffProtectIntegratorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffProtectIntegratorConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffProtectIntegratorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffProtectIntegratorConfig* New() const final {
    return CreateMaybeMessage<PiffProtectIntegratorConfig>(nullptr);
  }

  PiffProtectIntegratorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffProtectIntegratorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffProtectIntegratorConfig& from);
  void MergeFrom(const PiffProtectIntegratorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffProtectIntegratorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffProtectIntegratorConfig";
  }
  protected:
  explicit PiffProtectIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagProtectionFieldNumber = 1,
    kFramesProtectionFieldNumber = 2,
  };
  // required bool flag_protection = 1;
  bool has_flag_protection() const;
  private:
  bool _internal_has_flag_protection() const;
  public:
  void clear_flag_protection();
  bool flag_protection() const;
  void set_flag_protection(bool value);
  private:
  bool _internal_flag_protection() const;
  void _internal_set_flag_protection(bool value);
  public:

  // required int32 frames_protection = 2;
  bool has_frames_protection() const;
  private:
  bool _internal_has_frames_protection() const;
  public:
  void clear_frames_protection();
  ::PROTOBUF_NAMESPACE_ID::int32 frames_protection() const;
  void set_frames_protection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frames_protection() const;
  void _internal_set_frames_protection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffProtectIntegratorConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool flag_protection_;
  ::PROTOBUF_NAMESPACE_ID::int32 frames_protection_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffIntegratorConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffIntegratorConfig) */ {
 public:
  inline PiffIntegratorConfig() : PiffIntegratorConfig(nullptr) {};
  virtual ~PiffIntegratorConfig();

  PiffIntegratorConfig(const PiffIntegratorConfig& from);
  PiffIntegratorConfig(PiffIntegratorConfig&& from) noexcept
    : PiffIntegratorConfig() {
    *this = ::std::move(from);
  }

  inline PiffIntegratorConfig& operator=(const PiffIntegratorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffIntegratorConfig& operator=(PiffIntegratorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffIntegratorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffIntegratorConfig* internal_default_instance() {
    return reinterpret_cast<const PiffIntegratorConfig*>(
               &_PiffIntegratorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PiffIntegratorConfig& a, PiffIntegratorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffIntegratorConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffIntegratorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffIntegratorConfig* New() const final {
    return CreateMaybeMessage<PiffIntegratorConfig>(nullptr);
  }

  PiffIntegratorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffIntegratorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffIntegratorConfig& from);
  void MergeFrom(const PiffIntegratorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffIntegratorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffIntegratorConfig";
  }
  protected:
  explicit PiffIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearModeIntegratorConfFieldNumber = 4,
    kPercentageModeIntegratorConfFieldNumber = 5,
    kProtectIntegratorConfFieldNumber = 6,
    kEnableIntegratorFieldNumber = 1,
    kSteeringSaturationLevelDegFieldNumber = 2,
    kModeIntegratorFieldNumber = 3,
  };
  // required .control.PiffLinearModeIntegratorConfig linear_mode_integrator_conf = 4;
  bool has_linear_mode_integrator_conf() const;
  private:
  bool _internal_has_linear_mode_integrator_conf() const;
  public:
  void clear_linear_mode_integrator_conf();
  const ::control::PiffLinearModeIntegratorConfig& linear_mode_integrator_conf() const;
  ::control::PiffLinearModeIntegratorConfig* release_linear_mode_integrator_conf();
  ::control::PiffLinearModeIntegratorConfig* mutable_linear_mode_integrator_conf();
  void set_allocated_linear_mode_integrator_conf(::control::PiffLinearModeIntegratorConfig* linear_mode_integrator_conf);
  private:
  const ::control::PiffLinearModeIntegratorConfig& _internal_linear_mode_integrator_conf() const;
  ::control::PiffLinearModeIntegratorConfig* _internal_mutable_linear_mode_integrator_conf();
  public:
  void unsafe_arena_set_allocated_linear_mode_integrator_conf(
      ::control::PiffLinearModeIntegratorConfig* linear_mode_integrator_conf);
  ::control::PiffLinearModeIntegratorConfig* unsafe_arena_release_linear_mode_integrator_conf();

  // required .control.PiffPercentageModeIntegratorConfig percentage_mode_integrator_conf = 5;
  bool has_percentage_mode_integrator_conf() const;
  private:
  bool _internal_has_percentage_mode_integrator_conf() const;
  public:
  void clear_percentage_mode_integrator_conf();
  const ::control::PiffPercentageModeIntegratorConfig& percentage_mode_integrator_conf() const;
  ::control::PiffPercentageModeIntegratorConfig* release_percentage_mode_integrator_conf();
  ::control::PiffPercentageModeIntegratorConfig* mutable_percentage_mode_integrator_conf();
  void set_allocated_percentage_mode_integrator_conf(::control::PiffPercentageModeIntegratorConfig* percentage_mode_integrator_conf);
  private:
  const ::control::PiffPercentageModeIntegratorConfig& _internal_percentage_mode_integrator_conf() const;
  ::control::PiffPercentageModeIntegratorConfig* _internal_mutable_percentage_mode_integrator_conf();
  public:
  void unsafe_arena_set_allocated_percentage_mode_integrator_conf(
      ::control::PiffPercentageModeIntegratorConfig* percentage_mode_integrator_conf);
  ::control::PiffPercentageModeIntegratorConfig* unsafe_arena_release_percentage_mode_integrator_conf();

  // required .control.PiffProtectIntegratorConfig protect_integrator_conf = 6;
  bool has_protect_integrator_conf() const;
  private:
  bool _internal_has_protect_integrator_conf() const;
  public:
  void clear_protect_integrator_conf();
  const ::control::PiffProtectIntegratorConfig& protect_integrator_conf() const;
  ::control::PiffProtectIntegratorConfig* release_protect_integrator_conf();
  ::control::PiffProtectIntegratorConfig* mutable_protect_integrator_conf();
  void set_allocated_protect_integrator_conf(::control::PiffProtectIntegratorConfig* protect_integrator_conf);
  private:
  const ::control::PiffProtectIntegratorConfig& _internal_protect_integrator_conf() const;
  ::control::PiffProtectIntegratorConfig* _internal_mutable_protect_integrator_conf();
  public:
  void unsafe_arena_set_allocated_protect_integrator_conf(
      ::control::PiffProtectIntegratorConfig* protect_integrator_conf);
  ::control::PiffProtectIntegratorConfig* unsafe_arena_release_protect_integrator_conf();

  // required bool enable_integrator = 1;
  bool has_enable_integrator() const;
  private:
  bool _internal_has_enable_integrator() const;
  public:
  void clear_enable_integrator();
  bool enable_integrator() const;
  void set_enable_integrator(bool value);
  private:
  bool _internal_enable_integrator() const;
  void _internal_set_enable_integrator(bool value);
  public:

  // required float steering_saturation_level_deg = 2;
  bool has_steering_saturation_level_deg() const;
  private:
  bool _internal_has_steering_saturation_level_deg() const;
  public:
  void clear_steering_saturation_level_deg();
  float steering_saturation_level_deg() const;
  void set_steering_saturation_level_deg(float value);
  private:
  float _internal_steering_saturation_level_deg() const;
  void _internal_set_steering_saturation_level_deg(float value);
  public:

  // required int32 mode_integrator = 3;
  bool has_mode_integrator() const;
  private:
  bool _internal_has_mode_integrator() const;
  public:
  void clear_mode_integrator();
  ::PROTOBUF_NAMESPACE_ID::int32 mode_integrator() const;
  void set_mode_integrator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode_integrator() const;
  void _internal_set_mode_integrator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffIntegratorConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::PiffLinearModeIntegratorConfig* linear_mode_integrator_conf_;
  ::control::PiffPercentageModeIntegratorConfig* percentage_mode_integrator_conf_;
  ::control::PiffProtectIntegratorConfig* protect_integrator_conf_;
  bool enable_integrator_;
  float steering_saturation_level_deg_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_integrator_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffCCSteeringFakeDeadZoneConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffCCSteeringFakeDeadZoneConfig) */ {
 public:
  inline PiffCCSteeringFakeDeadZoneConfig() : PiffCCSteeringFakeDeadZoneConfig(nullptr) {};
  virtual ~PiffCCSteeringFakeDeadZoneConfig();

  PiffCCSteeringFakeDeadZoneConfig(const PiffCCSteeringFakeDeadZoneConfig& from);
  PiffCCSteeringFakeDeadZoneConfig(PiffCCSteeringFakeDeadZoneConfig&& from) noexcept
    : PiffCCSteeringFakeDeadZoneConfig() {
    *this = ::std::move(from);
  }

  inline PiffCCSteeringFakeDeadZoneConfig& operator=(const PiffCCSteeringFakeDeadZoneConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffCCSteeringFakeDeadZoneConfig& operator=(PiffCCSteeringFakeDeadZoneConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffCCSteeringFakeDeadZoneConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffCCSteeringFakeDeadZoneConfig* internal_default_instance() {
    return reinterpret_cast<const PiffCCSteeringFakeDeadZoneConfig*>(
               &_PiffCCSteeringFakeDeadZoneConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PiffCCSteeringFakeDeadZoneConfig& a, PiffCCSteeringFakeDeadZoneConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffCCSteeringFakeDeadZoneConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffCCSteeringFakeDeadZoneConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffCCSteeringFakeDeadZoneConfig* New() const final {
    return CreateMaybeMessage<PiffCCSteeringFakeDeadZoneConfig>(nullptr);
  }

  PiffCCSteeringFakeDeadZoneConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffCCSteeringFakeDeadZoneConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffCCSteeringFakeDeadZoneConfig& from);
  void MergeFrom(const PiffCCSteeringFakeDeadZoneConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffCCSteeringFakeDeadZoneConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffCCSteeringFakeDeadZoneConfig";
  }
  protected:
  explicit PiffCCSteeringFakeDeadZoneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLateralErrorMFakeZoneFieldNumber = 2,
    kEnableFakeDeadZoneFieldNumber = 1,
    kEnableFakeTransitionZoneFieldNumber = 4,
    kHeadingErrorRadFakeZoneFieldNumber = 3,
    kLateralErrorMTransitionZoneFieldNumber = 5,
    kHeadingErrorRadTransitionZoneFieldNumber = 6,
    kModeFieldNumber = 7,
  };
  // required float lateral_error_m_fake_zone = 2;
  bool has_lateral_error_m_fake_zone() const;
  private:
  bool _internal_has_lateral_error_m_fake_zone() const;
  public:
  void clear_lateral_error_m_fake_zone();
  float lateral_error_m_fake_zone() const;
  void set_lateral_error_m_fake_zone(float value);
  private:
  float _internal_lateral_error_m_fake_zone() const;
  void _internal_set_lateral_error_m_fake_zone(float value);
  public:

  // required bool enable_fake_dead_zone = 1;
  bool has_enable_fake_dead_zone() const;
  private:
  bool _internal_has_enable_fake_dead_zone() const;
  public:
  void clear_enable_fake_dead_zone();
  bool enable_fake_dead_zone() const;
  void set_enable_fake_dead_zone(bool value);
  private:
  bool _internal_enable_fake_dead_zone() const;
  void _internal_set_enable_fake_dead_zone(bool value);
  public:

  // required bool enable_fake_transition_zone = 4;
  bool has_enable_fake_transition_zone() const;
  private:
  bool _internal_has_enable_fake_transition_zone() const;
  public:
  void clear_enable_fake_transition_zone();
  bool enable_fake_transition_zone() const;
  void set_enable_fake_transition_zone(bool value);
  private:
  bool _internal_enable_fake_transition_zone() const;
  void _internal_set_enable_fake_transition_zone(bool value);
  public:

  // required float heading_error_rad_fake_zone = 3;
  bool has_heading_error_rad_fake_zone() const;
  private:
  bool _internal_has_heading_error_rad_fake_zone() const;
  public:
  void clear_heading_error_rad_fake_zone();
  float heading_error_rad_fake_zone() const;
  void set_heading_error_rad_fake_zone(float value);
  private:
  float _internal_heading_error_rad_fake_zone() const;
  void _internal_set_heading_error_rad_fake_zone(float value);
  public:

  // required float lateral_error_m_transition_zone = 5;
  bool has_lateral_error_m_transition_zone() const;
  private:
  bool _internal_has_lateral_error_m_transition_zone() const;
  public:
  void clear_lateral_error_m_transition_zone();
  float lateral_error_m_transition_zone() const;
  void set_lateral_error_m_transition_zone(float value);
  private:
  float _internal_lateral_error_m_transition_zone() const;
  void _internal_set_lateral_error_m_transition_zone(float value);
  public:

  // required float heading_error_rad_transition_zone = 6;
  bool has_heading_error_rad_transition_zone() const;
  private:
  bool _internal_has_heading_error_rad_transition_zone() const;
  public:
  void clear_heading_error_rad_transition_zone();
  float heading_error_rad_transition_zone() const;
  void set_heading_error_rad_transition_zone(float value);
  private:
  float _internal_heading_error_rad_transition_zone() const;
  void _internal_set_heading_error_rad_transition_zone(float value);
  public:

  // required int32 mode = 7;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffCCSteeringFakeDeadZoneConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float lateral_error_m_fake_zone_;
  bool enable_fake_dead_zone_;
  bool enable_fake_transition_zone_;
  float heading_error_rad_fake_zone_;
  float lateral_error_m_transition_zone_;
  float heading_error_rad_transition_zone_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffControllerContentConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffControllerContentConfig) */ {
 public:
  inline PiffControllerContentConfig() : PiffControllerContentConfig(nullptr) {};
  virtual ~PiffControllerContentConfig();

  PiffControllerContentConfig(const PiffControllerContentConfig& from);
  PiffControllerContentConfig(PiffControllerContentConfig&& from) noexcept
    : PiffControllerContentConfig() {
    *this = ::std::move(from);
  }

  inline PiffControllerContentConfig& operator=(const PiffControllerContentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffControllerContentConfig& operator=(PiffControllerContentConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffControllerContentConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffControllerContentConfig* internal_default_instance() {
    return reinterpret_cast<const PiffControllerContentConfig*>(
               &_PiffControllerContentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PiffControllerContentConfig& a, PiffControllerContentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffControllerContentConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffControllerContentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffControllerContentConfig* New() const final {
    return CreateMaybeMessage<PiffControllerContentConfig>(nullptr);
  }

  PiffControllerContentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffControllerContentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffControllerContentConfig& from);
  void MergeFrom(const PiffControllerContentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffControllerContentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffControllerContentConfig";
  }
  protected:
  explicit PiffControllerContentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateConfFieldNumber = 5,
    kIntegratorConfFieldNumber = 6,
    kSteeringFakeDeadZoneConfFieldNumber = 8,
    kPreviewModeFieldNumber = 1,
    kPreviewTimeMsC01FieldNumber = 2,
    kPreviewTimeMsC2FieldNumber = 3,
    kCurvatureMinStartFfFieldNumber = 4,
    kSteeringBiasDegFieldNumber = 7,
    kCurvaturnTransitionFfFieldNumber = 9,
  };
  // repeated .control.PiffControllerContentRateConfig rate_conf = 5;
  int rate_conf_size() const;
  private:
  int _internal_rate_conf_size() const;
  public:
  void clear_rate_conf();
  ::control::PiffControllerContentRateConfig* mutable_rate_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffControllerContentRateConfig >*
      mutable_rate_conf();
  private:
  const ::control::PiffControllerContentRateConfig& _internal_rate_conf(int index) const;
  ::control::PiffControllerContentRateConfig* _internal_add_rate_conf();
  public:
  const ::control::PiffControllerContentRateConfig& rate_conf(int index) const;
  ::control::PiffControllerContentRateConfig* add_rate_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffControllerContentRateConfig >&
      rate_conf() const;

  // required .control.PiffIntegratorConfig integrator_conf = 6;
  bool has_integrator_conf() const;
  private:
  bool _internal_has_integrator_conf() const;
  public:
  void clear_integrator_conf();
  const ::control::PiffIntegratorConfig& integrator_conf() const;
  ::control::PiffIntegratorConfig* release_integrator_conf();
  ::control::PiffIntegratorConfig* mutable_integrator_conf();
  void set_allocated_integrator_conf(::control::PiffIntegratorConfig* integrator_conf);
  private:
  const ::control::PiffIntegratorConfig& _internal_integrator_conf() const;
  ::control::PiffIntegratorConfig* _internal_mutable_integrator_conf();
  public:
  void unsafe_arena_set_allocated_integrator_conf(
      ::control::PiffIntegratorConfig* integrator_conf);
  ::control::PiffIntegratorConfig* unsafe_arena_release_integrator_conf();

  // required .control.PiffCCSteeringFakeDeadZoneConfig steering_fake_dead_zone_conf = 8;
  bool has_steering_fake_dead_zone_conf() const;
  private:
  bool _internal_has_steering_fake_dead_zone_conf() const;
  public:
  void clear_steering_fake_dead_zone_conf();
  const ::control::PiffCCSteeringFakeDeadZoneConfig& steering_fake_dead_zone_conf() const;
  ::control::PiffCCSteeringFakeDeadZoneConfig* release_steering_fake_dead_zone_conf();
  ::control::PiffCCSteeringFakeDeadZoneConfig* mutable_steering_fake_dead_zone_conf();
  void set_allocated_steering_fake_dead_zone_conf(::control::PiffCCSteeringFakeDeadZoneConfig* steering_fake_dead_zone_conf);
  private:
  const ::control::PiffCCSteeringFakeDeadZoneConfig& _internal_steering_fake_dead_zone_conf() const;
  ::control::PiffCCSteeringFakeDeadZoneConfig* _internal_mutable_steering_fake_dead_zone_conf();
  public:
  void unsafe_arena_set_allocated_steering_fake_dead_zone_conf(
      ::control::PiffCCSteeringFakeDeadZoneConfig* steering_fake_dead_zone_conf);
  ::control::PiffCCSteeringFakeDeadZoneConfig* unsafe_arena_release_steering_fake_dead_zone_conf();

  // required int32 preview_mode = 1;
  bool has_preview_mode() const;
  private:
  bool _internal_has_preview_mode() const;
  public:
  void clear_preview_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 preview_mode() const;
  void set_preview_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_preview_mode() const;
  void _internal_set_preview_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float preview_time_ms_c01 = 2;
  bool has_preview_time_ms_c01() const;
  private:
  bool _internal_has_preview_time_ms_c01() const;
  public:
  void clear_preview_time_ms_c01();
  float preview_time_ms_c01() const;
  void set_preview_time_ms_c01(float value);
  private:
  float _internal_preview_time_ms_c01() const;
  void _internal_set_preview_time_ms_c01(float value);
  public:

  // required float preview_time_ms_c2 = 3;
  bool has_preview_time_ms_c2() const;
  private:
  bool _internal_has_preview_time_ms_c2() const;
  public:
  void clear_preview_time_ms_c2();
  float preview_time_ms_c2() const;
  void set_preview_time_ms_c2(float value);
  private:
  float _internal_preview_time_ms_c2() const;
  void _internal_set_preview_time_ms_c2(float value);
  public:

  // required float curvature_min_start_ff = 4;
  bool has_curvature_min_start_ff() const;
  private:
  bool _internal_has_curvature_min_start_ff() const;
  public:
  void clear_curvature_min_start_ff();
  float curvature_min_start_ff() const;
  void set_curvature_min_start_ff(float value);
  private:
  float _internal_curvature_min_start_ff() const;
  void _internal_set_curvature_min_start_ff(float value);
  public:

  // required float steering_bias_deg = 7;
  bool has_steering_bias_deg() const;
  private:
  bool _internal_has_steering_bias_deg() const;
  public:
  void clear_steering_bias_deg();
  float steering_bias_deg() const;
  void set_steering_bias_deg(float value);
  private:
  float _internal_steering_bias_deg() const;
  void _internal_set_steering_bias_deg(float value);
  public:

  // required float curvaturn_transition_ff = 9;
  bool has_curvaturn_transition_ff() const;
  private:
  bool _internal_has_curvaturn_transition_ff() const;
  public:
  void clear_curvaturn_transition_ff();
  float curvaturn_transition_ff() const;
  void set_curvaturn_transition_ff(float value);
  private:
  float _internal_curvaturn_transition_ff() const;
  void _internal_set_curvaturn_transition_ff(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffControllerContentConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffControllerContentRateConfig > rate_conf_;
  ::control::PiffIntegratorConfig* integrator_conf_;
  ::control::PiffCCSteeringFakeDeadZoneConfig* steering_fake_dead_zone_conf_;
  ::PROTOBUF_NAMESPACE_ID::int32 preview_mode_;
  float preview_time_ms_c01_;
  float preview_time_ms_c2_;
  float curvature_min_start_ff_;
  float steering_bias_deg_;
  float curvaturn_transition_ff_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffTrackingDifferentiatorSwitch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffTrackingDifferentiatorSwitch) */ {
 public:
  inline PiffTrackingDifferentiatorSwitch() : PiffTrackingDifferentiatorSwitch(nullptr) {};
  virtual ~PiffTrackingDifferentiatorSwitch();

  PiffTrackingDifferentiatorSwitch(const PiffTrackingDifferentiatorSwitch& from);
  PiffTrackingDifferentiatorSwitch(PiffTrackingDifferentiatorSwitch&& from) noexcept
    : PiffTrackingDifferentiatorSwitch() {
    *this = ::std::move(from);
  }

  inline PiffTrackingDifferentiatorSwitch& operator=(const PiffTrackingDifferentiatorSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffTrackingDifferentiatorSwitch& operator=(PiffTrackingDifferentiatorSwitch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffTrackingDifferentiatorSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffTrackingDifferentiatorSwitch* internal_default_instance() {
    return reinterpret_cast<const PiffTrackingDifferentiatorSwitch*>(
               &_PiffTrackingDifferentiatorSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PiffTrackingDifferentiatorSwitch& a, PiffTrackingDifferentiatorSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffTrackingDifferentiatorSwitch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffTrackingDifferentiatorSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffTrackingDifferentiatorSwitch* New() const final {
    return CreateMaybeMessage<PiffTrackingDifferentiatorSwitch>(nullptr);
  }

  PiffTrackingDifferentiatorSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffTrackingDifferentiatorSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffTrackingDifferentiatorSwitch& from);
  void MergeFrom(const PiffTrackingDifferentiatorSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffTrackingDifferentiatorSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffTrackingDifferentiatorSwitch";
  }
  protected:
  explicit PiffTrackingDifferentiatorSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableCenterLineC2FieldNumber = 1,
    kEnableYawRateFieldNumber = 2,
  };
  // required bool enable_center_line_c2 = 1;
  bool has_enable_center_line_c2() const;
  private:
  bool _internal_has_enable_center_line_c2() const;
  public:
  void clear_enable_center_line_c2();
  bool enable_center_line_c2() const;
  void set_enable_center_line_c2(bool value);
  private:
  bool _internal_enable_center_line_c2() const;
  void _internal_set_enable_center_line_c2(bool value);
  public:

  // required bool enable_yaw_rate = 2;
  bool has_enable_yaw_rate() const;
  private:
  bool _internal_has_enable_yaw_rate() const;
  public:
  void clear_enable_yaw_rate();
  bool enable_yaw_rate() const;
  void set_enable_yaw_rate(bool value);
  private:
  bool _internal_enable_yaw_rate() const;
  void _internal_set_enable_yaw_rate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffTrackingDifferentiatorSwitch)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_center_line_c2_;
  bool enable_yaw_rate_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffTrackingDifferentiatorStateParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffTrackingDifferentiatorStateParameters) */ {
 public:
  inline PiffTrackingDifferentiatorStateParameters() : PiffTrackingDifferentiatorStateParameters(nullptr) {};
  virtual ~PiffTrackingDifferentiatorStateParameters();

  PiffTrackingDifferentiatorStateParameters(const PiffTrackingDifferentiatorStateParameters& from);
  PiffTrackingDifferentiatorStateParameters(PiffTrackingDifferentiatorStateParameters&& from) noexcept
    : PiffTrackingDifferentiatorStateParameters() {
    *this = ::std::move(from);
  }

  inline PiffTrackingDifferentiatorStateParameters& operator=(const PiffTrackingDifferentiatorStateParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffTrackingDifferentiatorStateParameters& operator=(PiffTrackingDifferentiatorStateParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffTrackingDifferentiatorStateParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffTrackingDifferentiatorStateParameters* internal_default_instance() {
    return reinterpret_cast<const PiffTrackingDifferentiatorStateParameters*>(
               &_PiffTrackingDifferentiatorStateParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PiffTrackingDifferentiatorStateParameters& a, PiffTrackingDifferentiatorStateParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffTrackingDifferentiatorStateParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffTrackingDifferentiatorStateParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffTrackingDifferentiatorStateParameters* New() const final {
    return CreateMaybeMessage<PiffTrackingDifferentiatorStateParameters>(nullptr);
  }

  PiffTrackingDifferentiatorStateParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffTrackingDifferentiatorStateParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffTrackingDifferentiatorStateParameters& from);
  void MergeFrom(const PiffTrackingDifferentiatorStateParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffTrackingDifferentiatorStateParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffTrackingDifferentiatorStateParameters";
  }
  protected:
  explicit PiffTrackingDifferentiatorStateParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingRateFieldNumber = 1,
    kSmoothFrameFieldNumber = 2,
  };
  // required float tracking_rate = 1;
  bool has_tracking_rate() const;
  private:
  bool _internal_has_tracking_rate() const;
  public:
  void clear_tracking_rate();
  float tracking_rate() const;
  void set_tracking_rate(float value);
  private:
  float _internal_tracking_rate() const;
  void _internal_set_tracking_rate(float value);
  public:

  // required int32 smooth_frame = 2;
  bool has_smooth_frame() const;
  private:
  bool _internal_has_smooth_frame() const;
  public:
  void clear_smooth_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 smooth_frame() const;
  void set_smooth_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_smooth_frame() const;
  void _internal_set_smooth_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffTrackingDifferentiatorStateParameters)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float tracking_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 smooth_frame_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffTrackingDifferentiatorConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffTrackingDifferentiatorConfig) */ {
 public:
  inline PiffTrackingDifferentiatorConfig() : PiffTrackingDifferentiatorConfig(nullptr) {};
  virtual ~PiffTrackingDifferentiatorConfig();

  PiffTrackingDifferentiatorConfig(const PiffTrackingDifferentiatorConfig& from);
  PiffTrackingDifferentiatorConfig(PiffTrackingDifferentiatorConfig&& from) noexcept
    : PiffTrackingDifferentiatorConfig() {
    *this = ::std::move(from);
  }

  inline PiffTrackingDifferentiatorConfig& operator=(const PiffTrackingDifferentiatorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffTrackingDifferentiatorConfig& operator=(PiffTrackingDifferentiatorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffTrackingDifferentiatorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffTrackingDifferentiatorConfig* internal_default_instance() {
    return reinterpret_cast<const PiffTrackingDifferentiatorConfig*>(
               &_PiffTrackingDifferentiatorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PiffTrackingDifferentiatorConfig& a, PiffTrackingDifferentiatorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffTrackingDifferentiatorConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffTrackingDifferentiatorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffTrackingDifferentiatorConfig* New() const final {
    return CreateMaybeMessage<PiffTrackingDifferentiatorConfig>(nullptr);
  }

  PiffTrackingDifferentiatorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffTrackingDifferentiatorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffTrackingDifferentiatorConfig& from);
  void MergeFrom(const PiffTrackingDifferentiatorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffTrackingDifferentiatorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffTrackingDifferentiatorConfig";
  }
  protected:
  explicit PiffTrackingDifferentiatorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTdSwitchFieldNumber = 1,
    kCenterLineC2ParasFieldNumber = 2,
    kYawRateParasFieldNumber = 3,
  };
  // required .control.PiffTrackingDifferentiatorSwitch td_switch = 1;
  bool has_td_switch() const;
  private:
  bool _internal_has_td_switch() const;
  public:
  void clear_td_switch();
  const ::control::PiffTrackingDifferentiatorSwitch& td_switch() const;
  ::control::PiffTrackingDifferentiatorSwitch* release_td_switch();
  ::control::PiffTrackingDifferentiatorSwitch* mutable_td_switch();
  void set_allocated_td_switch(::control::PiffTrackingDifferentiatorSwitch* td_switch);
  private:
  const ::control::PiffTrackingDifferentiatorSwitch& _internal_td_switch() const;
  ::control::PiffTrackingDifferentiatorSwitch* _internal_mutable_td_switch();
  public:
  void unsafe_arena_set_allocated_td_switch(
      ::control::PiffTrackingDifferentiatorSwitch* td_switch);
  ::control::PiffTrackingDifferentiatorSwitch* unsafe_arena_release_td_switch();

  // required .control.PiffTrackingDifferentiatorStateParameters center_line_c2_paras = 2;
  bool has_center_line_c2_paras() const;
  private:
  bool _internal_has_center_line_c2_paras() const;
  public:
  void clear_center_line_c2_paras();
  const ::control::PiffTrackingDifferentiatorStateParameters& center_line_c2_paras() const;
  ::control::PiffTrackingDifferentiatorStateParameters* release_center_line_c2_paras();
  ::control::PiffTrackingDifferentiatorStateParameters* mutable_center_line_c2_paras();
  void set_allocated_center_line_c2_paras(::control::PiffTrackingDifferentiatorStateParameters* center_line_c2_paras);
  private:
  const ::control::PiffTrackingDifferentiatorStateParameters& _internal_center_line_c2_paras() const;
  ::control::PiffTrackingDifferentiatorStateParameters* _internal_mutable_center_line_c2_paras();
  public:
  void unsafe_arena_set_allocated_center_line_c2_paras(
      ::control::PiffTrackingDifferentiatorStateParameters* center_line_c2_paras);
  ::control::PiffTrackingDifferentiatorStateParameters* unsafe_arena_release_center_line_c2_paras();

  // required .control.PiffTrackingDifferentiatorStateParameters yaw_rate_paras = 3;
  bool has_yaw_rate_paras() const;
  private:
  bool _internal_has_yaw_rate_paras() const;
  public:
  void clear_yaw_rate_paras();
  const ::control::PiffTrackingDifferentiatorStateParameters& yaw_rate_paras() const;
  ::control::PiffTrackingDifferentiatorStateParameters* release_yaw_rate_paras();
  ::control::PiffTrackingDifferentiatorStateParameters* mutable_yaw_rate_paras();
  void set_allocated_yaw_rate_paras(::control::PiffTrackingDifferentiatorStateParameters* yaw_rate_paras);
  private:
  const ::control::PiffTrackingDifferentiatorStateParameters& _internal_yaw_rate_paras() const;
  ::control::PiffTrackingDifferentiatorStateParameters* _internal_mutable_yaw_rate_paras();
  public:
  void unsafe_arena_set_allocated_yaw_rate_paras(
      ::control::PiffTrackingDifferentiatorStateParameters* yaw_rate_paras);
  ::control::PiffTrackingDifferentiatorStateParameters* unsafe_arena_release_yaw_rate_paras();

  // @@protoc_insertion_point(class_scope:control.PiffTrackingDifferentiatorConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::PiffTrackingDifferentiatorSwitch* td_switch_;
  ::control::PiffTrackingDifferentiatorStateParameters* center_line_c2_paras_;
  ::control::PiffTrackingDifferentiatorStateParameters* yaw_rate_paras_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffDTInputMaxLimitConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffDTInputMaxLimitConfig) */ {
 public:
  inline PiffDTInputMaxLimitConfig() : PiffDTInputMaxLimitConfig(nullptr) {};
  virtual ~PiffDTInputMaxLimitConfig();

  PiffDTInputMaxLimitConfig(const PiffDTInputMaxLimitConfig& from);
  PiffDTInputMaxLimitConfig(PiffDTInputMaxLimitConfig&& from) noexcept
    : PiffDTInputMaxLimitConfig() {
    *this = ::std::move(from);
  }

  inline PiffDTInputMaxLimitConfig& operator=(const PiffDTInputMaxLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffDTInputMaxLimitConfig& operator=(PiffDTInputMaxLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffDTInputMaxLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffDTInputMaxLimitConfig* internal_default_instance() {
    return reinterpret_cast<const PiffDTInputMaxLimitConfig*>(
               &_PiffDTInputMaxLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PiffDTInputMaxLimitConfig& a, PiffDTInputMaxLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffDTInputMaxLimitConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffDTInputMaxLimitConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffDTInputMaxLimitConfig* New() const final {
    return CreateMaybeMessage<PiffDTInputMaxLimitConfig>(nullptr);
  }

  PiffDTInputMaxLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffDTInputMaxLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffDTInputMaxLimitConfig& from);
  void MergeFrom(const PiffDTInputMaxLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffDTInputMaxLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffDTInputMaxLimitConfig";
  }
  protected:
  explicit PiffDTInputMaxLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedKphFieldNumber = 1,
    kLateralErrorFieldNumber = 2,
    kHeadingErrorDegFieldNumber = 3,
  };
  // required float speed_kph = 1;
  bool has_speed_kph() const;
  private:
  bool _internal_has_speed_kph() const;
  public:
  void clear_speed_kph();
  float speed_kph() const;
  void set_speed_kph(float value);
  private:
  float _internal_speed_kph() const;
  void _internal_set_speed_kph(float value);
  public:

  // required float lateral_error = 2;
  bool has_lateral_error() const;
  private:
  bool _internal_has_lateral_error() const;
  public:
  void clear_lateral_error();
  float lateral_error() const;
  void set_lateral_error(float value);
  private:
  float _internal_lateral_error() const;
  void _internal_set_lateral_error(float value);
  public:

  // required float heading_error_deg = 3;
  bool has_heading_error_deg() const;
  private:
  bool _internal_has_heading_error_deg() const;
  public:
  void clear_heading_error_deg();
  float heading_error_deg() const;
  void set_heading_error_deg(float value);
  private:
  float _internal_heading_error_deg() const;
  void _internal_set_heading_error_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffDTInputMaxLimitConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float speed_kph_;
  float lateral_error_;
  float heading_error_deg_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffDTInputFrameLimitConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffDTInputFrameLimitConfig) */ {
 public:
  inline PiffDTInputFrameLimitConfig() : PiffDTInputFrameLimitConfig(nullptr) {};
  virtual ~PiffDTInputFrameLimitConfig();

  PiffDTInputFrameLimitConfig(const PiffDTInputFrameLimitConfig& from);
  PiffDTInputFrameLimitConfig(PiffDTInputFrameLimitConfig&& from) noexcept
    : PiffDTInputFrameLimitConfig() {
    *this = ::std::move(from);
  }

  inline PiffDTInputFrameLimitConfig& operator=(const PiffDTInputFrameLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffDTInputFrameLimitConfig& operator=(PiffDTInputFrameLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffDTInputFrameLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffDTInputFrameLimitConfig* internal_default_instance() {
    return reinterpret_cast<const PiffDTInputFrameLimitConfig*>(
               &_PiffDTInputFrameLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PiffDTInputFrameLimitConfig& a, PiffDTInputFrameLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffDTInputFrameLimitConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffDTInputFrameLimitConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffDTInputFrameLimitConfig* New() const final {
    return CreateMaybeMessage<PiffDTInputFrameLimitConfig>(nullptr);
  }

  PiffDTInputFrameLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffDTInputFrameLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffDTInputFrameLimitConfig& from);
  void MergeFrom(const PiffDTInputFrameLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffDTInputFrameLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffDTInputFrameLimitConfig";
  }
  protected:
  explicit PiffDTInputFrameLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedKphFieldNumber = 1,
    kC0JumpMaxMFieldNumber = 2,
    kC0TransitRateMpsFieldNumber = 3,
    kC0TrackPercentageFieldNumber = 4,
    kC1JumpMaxRadFieldNumber = 5,
    kC1TransitRateRadpsFieldNumber = 6,
    kC1TrackPercentageFieldNumber = 7,
    kC2JumpMaxFieldNumber = 8,
    kC2TransitRateFieldNumber = 9,
    kC2TrackPercentageFieldNumber = 10,
  };
  // required float speed_kph = 1;
  bool has_speed_kph() const;
  private:
  bool _internal_has_speed_kph() const;
  public:
  void clear_speed_kph();
  float speed_kph() const;
  void set_speed_kph(float value);
  private:
  float _internal_speed_kph() const;
  void _internal_set_speed_kph(float value);
  public:

  // required float c0_jump_max_m = 2;
  bool has_c0_jump_max_m() const;
  private:
  bool _internal_has_c0_jump_max_m() const;
  public:
  void clear_c0_jump_max_m();
  float c0_jump_max_m() const;
  void set_c0_jump_max_m(float value);
  private:
  float _internal_c0_jump_max_m() const;
  void _internal_set_c0_jump_max_m(float value);
  public:

  // required float c0_transit_rate_mps = 3;
  bool has_c0_transit_rate_mps() const;
  private:
  bool _internal_has_c0_transit_rate_mps() const;
  public:
  void clear_c0_transit_rate_mps();
  float c0_transit_rate_mps() const;
  void set_c0_transit_rate_mps(float value);
  private:
  float _internal_c0_transit_rate_mps() const;
  void _internal_set_c0_transit_rate_mps(float value);
  public:

  // required float c0_track_percentage = 4;
  bool has_c0_track_percentage() const;
  private:
  bool _internal_has_c0_track_percentage() const;
  public:
  void clear_c0_track_percentage();
  float c0_track_percentage() const;
  void set_c0_track_percentage(float value);
  private:
  float _internal_c0_track_percentage() const;
  void _internal_set_c0_track_percentage(float value);
  public:

  // required float c1_jump_max_rad = 5;
  bool has_c1_jump_max_rad() const;
  private:
  bool _internal_has_c1_jump_max_rad() const;
  public:
  void clear_c1_jump_max_rad();
  float c1_jump_max_rad() const;
  void set_c1_jump_max_rad(float value);
  private:
  float _internal_c1_jump_max_rad() const;
  void _internal_set_c1_jump_max_rad(float value);
  public:

  // required float c1_transit_rate_radps = 6;
  bool has_c1_transit_rate_radps() const;
  private:
  bool _internal_has_c1_transit_rate_radps() const;
  public:
  void clear_c1_transit_rate_radps();
  float c1_transit_rate_radps() const;
  void set_c1_transit_rate_radps(float value);
  private:
  float _internal_c1_transit_rate_radps() const;
  void _internal_set_c1_transit_rate_radps(float value);
  public:

  // required float c1_track_percentage = 7;
  bool has_c1_track_percentage() const;
  private:
  bool _internal_has_c1_track_percentage() const;
  public:
  void clear_c1_track_percentage();
  float c1_track_percentage() const;
  void set_c1_track_percentage(float value);
  private:
  float _internal_c1_track_percentage() const;
  void _internal_set_c1_track_percentage(float value);
  public:

  // required float c2_jump_max = 8;
  bool has_c2_jump_max() const;
  private:
  bool _internal_has_c2_jump_max() const;
  public:
  void clear_c2_jump_max();
  float c2_jump_max() const;
  void set_c2_jump_max(float value);
  private:
  float _internal_c2_jump_max() const;
  void _internal_set_c2_jump_max(float value);
  public:

  // required float c2_transit_rate = 9;
  bool has_c2_transit_rate() const;
  private:
  bool _internal_has_c2_transit_rate() const;
  public:
  void clear_c2_transit_rate();
  float c2_transit_rate() const;
  void set_c2_transit_rate(float value);
  private:
  float _internal_c2_transit_rate() const;
  void _internal_set_c2_transit_rate(float value);
  public:

  // required float c2_track_percentage = 10;
  bool has_c2_track_percentage() const;
  private:
  bool _internal_has_c2_track_percentage() const;
  public:
  void clear_c2_track_percentage();
  float c2_track_percentage() const;
  void set_c2_track_percentage(float value);
  private:
  float _internal_c2_track_percentage() const;
  void _internal_set_c2_track_percentage(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffDTInputFrameLimitConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float speed_kph_;
  float c0_jump_max_m_;
  float c0_transit_rate_mps_;
  float c0_track_percentage_;
  float c1_jump_max_rad_;
  float c1_transit_rate_radps_;
  float c1_track_percentage_;
  float c2_jump_max_;
  float c2_transit_rate_;
  float c2_track_percentage_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffDataTransformConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffDataTransformConfig) */ {
 public:
  inline PiffDataTransformConfig() : PiffDataTransformConfig(nullptr) {};
  virtual ~PiffDataTransformConfig();

  PiffDataTransformConfig(const PiffDataTransformConfig& from);
  PiffDataTransformConfig(PiffDataTransformConfig&& from) noexcept
    : PiffDataTransformConfig() {
    *this = ::std::move(from);
  }

  inline PiffDataTransformConfig& operator=(const PiffDataTransformConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffDataTransformConfig& operator=(PiffDataTransformConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffDataTransformConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffDataTransformConfig* internal_default_instance() {
    return reinterpret_cast<const PiffDataTransformConfig*>(
               &_PiffDataTransformConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PiffDataTransformConfig& a, PiffDataTransformConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffDataTransformConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffDataTransformConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffDataTransformConfig* New() const final {
    return CreateMaybeMessage<PiffDataTransformConfig>(nullptr);
  }

  PiffDataTransformConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffDataTransformConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffDataTransformConfig& from);
  void MergeFrom(const PiffDataTransformConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffDataTransformConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffDataTransformConfig";
  }
  protected:
  explicit PiffDataTransformConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputMaxLimitConfFieldNumber = 2,
    kInputFrameLimitConfFieldNumber = 4,
    kEnableInputMaxLimitFieldNumber = 1,
    kEnableInputFrameLimitFieldNumber = 3,
    kFrameRampModeFieldNumber = 5,
  };
  // repeated .control.PiffDTInputMaxLimitConfig input_max_limit_conf = 2;
  int input_max_limit_conf_size() const;
  private:
  int _internal_input_max_limit_conf_size() const;
  public:
  void clear_input_max_limit_conf();
  ::control::PiffDTInputMaxLimitConfig* mutable_input_max_limit_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputMaxLimitConfig >*
      mutable_input_max_limit_conf();
  private:
  const ::control::PiffDTInputMaxLimitConfig& _internal_input_max_limit_conf(int index) const;
  ::control::PiffDTInputMaxLimitConfig* _internal_add_input_max_limit_conf();
  public:
  const ::control::PiffDTInputMaxLimitConfig& input_max_limit_conf(int index) const;
  ::control::PiffDTInputMaxLimitConfig* add_input_max_limit_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputMaxLimitConfig >&
      input_max_limit_conf() const;

  // repeated .control.PiffDTInputFrameLimitConfig input_frame_limit_conf = 4;
  int input_frame_limit_conf_size() const;
  private:
  int _internal_input_frame_limit_conf_size() const;
  public:
  void clear_input_frame_limit_conf();
  ::control::PiffDTInputFrameLimitConfig* mutable_input_frame_limit_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputFrameLimitConfig >*
      mutable_input_frame_limit_conf();
  private:
  const ::control::PiffDTInputFrameLimitConfig& _internal_input_frame_limit_conf(int index) const;
  ::control::PiffDTInputFrameLimitConfig* _internal_add_input_frame_limit_conf();
  public:
  const ::control::PiffDTInputFrameLimitConfig& input_frame_limit_conf(int index) const;
  ::control::PiffDTInputFrameLimitConfig* add_input_frame_limit_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputFrameLimitConfig >&
      input_frame_limit_conf() const;

  // required bool enable_input_max_limit = 1;
  bool has_enable_input_max_limit() const;
  private:
  bool _internal_has_enable_input_max_limit() const;
  public:
  void clear_enable_input_max_limit();
  bool enable_input_max_limit() const;
  void set_enable_input_max_limit(bool value);
  private:
  bool _internal_enable_input_max_limit() const;
  void _internal_set_enable_input_max_limit(bool value);
  public:

  // required bool enable_input_frame_limit = 3;
  bool has_enable_input_frame_limit() const;
  private:
  bool _internal_has_enable_input_frame_limit() const;
  public:
  void clear_enable_input_frame_limit();
  bool enable_input_frame_limit() const;
  void set_enable_input_frame_limit(bool value);
  private:
  bool _internal_enable_input_frame_limit() const;
  void _internal_set_enable_input_frame_limit(bool value);
  public:

  // required int32 frame_ramp_mode = 5;
  bool has_frame_ramp_mode() const;
  private:
  bool _internal_has_frame_ramp_mode() const;
  public:
  void clear_frame_ramp_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_ramp_mode() const;
  void set_frame_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_ramp_mode() const;
  void _internal_set_frame_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffDataTransformConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputMaxLimitConfig > input_max_limit_conf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputFrameLimitConfig > input_frame_limit_conf_;
  bool enable_input_max_limit_;
  bool enable_input_frame_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_ramp_mode_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffPPSteeringAngleLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffPPSteeringAngleLimit) */ {
 public:
  inline PiffPPSteeringAngleLimit() : PiffPPSteeringAngleLimit(nullptr) {};
  virtual ~PiffPPSteeringAngleLimit();

  PiffPPSteeringAngleLimit(const PiffPPSteeringAngleLimit& from);
  PiffPPSteeringAngleLimit(PiffPPSteeringAngleLimit&& from) noexcept
    : PiffPPSteeringAngleLimit() {
    *this = ::std::move(from);
  }

  inline PiffPPSteeringAngleLimit& operator=(const PiffPPSteeringAngleLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffPPSteeringAngleLimit& operator=(PiffPPSteeringAngleLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffPPSteeringAngleLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffPPSteeringAngleLimit* internal_default_instance() {
    return reinterpret_cast<const PiffPPSteeringAngleLimit*>(
               &_PiffPPSteeringAngleLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PiffPPSteeringAngleLimit& a, PiffPPSteeringAngleLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffPPSteeringAngleLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffPPSteeringAngleLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffPPSteeringAngleLimit* New() const final {
    return CreateMaybeMessage<PiffPPSteeringAngleLimit>(nullptr);
  }

  PiffPPSteeringAngleLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffPPSteeringAngleLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffPPSteeringAngleLimit& from);
  void MergeFrom(const PiffPPSteeringAngleLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffPPSteeringAngleLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffPPSteeringAngleLimit";
  }
  protected:
  explicit PiffPPSteeringAngleLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedKphFieldNumber = 1,
    kSteeringRangeDegFieldNumber = 2,
    kSteeringRateRangeDegpsFieldNumber = 3,
  };
  // required float speed_kph = 1;
  bool has_speed_kph() const;
  private:
  bool _internal_has_speed_kph() const;
  public:
  void clear_speed_kph();
  float speed_kph() const;
  void set_speed_kph(float value);
  private:
  float _internal_speed_kph() const;
  void _internal_set_speed_kph(float value);
  public:

  // required float steering_range_deg = 2;
  bool has_steering_range_deg() const;
  private:
  bool _internal_has_steering_range_deg() const;
  public:
  void clear_steering_range_deg();
  float steering_range_deg() const;
  void set_steering_range_deg(float value);
  private:
  float _internal_steering_range_deg() const;
  void _internal_set_steering_range_deg(float value);
  public:

  // required float steering_rate_range_degps = 3;
  bool has_steering_rate_range_degps() const;
  private:
  bool _internal_has_steering_rate_range_degps() const;
  public:
  void clear_steering_rate_range_degps();
  float steering_rate_range_degps() const;
  void set_steering_rate_range_degps(float value);
  private:
  float _internal_steering_rate_range_degps() const;
  void _internal_set_steering_rate_range_degps(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffPPSteeringAngleLimit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float speed_kph_;
  float steering_range_deg_;
  float steering_rate_range_degps_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffPPActivateControlContentConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffPPActivateControlContentConfig) */ {
 public:
  inline PiffPPActivateControlContentConfig() : PiffPPActivateControlContentConfig(nullptr) {};
  virtual ~PiffPPActivateControlContentConfig();

  PiffPPActivateControlContentConfig(const PiffPPActivateControlContentConfig& from);
  PiffPPActivateControlContentConfig(PiffPPActivateControlContentConfig&& from) noexcept
    : PiffPPActivateControlContentConfig() {
    *this = ::std::move(from);
  }

  inline PiffPPActivateControlContentConfig& operator=(const PiffPPActivateControlContentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffPPActivateControlContentConfig& operator=(PiffPPActivateControlContentConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffPPActivateControlContentConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffPPActivateControlContentConfig* internal_default_instance() {
    return reinterpret_cast<const PiffPPActivateControlContentConfig*>(
               &_PiffPPActivateControlContentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PiffPPActivateControlContentConfig& a, PiffPPActivateControlContentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffPPActivateControlContentConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffPPActivateControlContentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffPPActivateControlContentConfig* New() const final {
    return CreateMaybeMessage<PiffPPActivateControlContentConfig>(nullptr);
  }

  PiffPPActivateControlContentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffPPActivateControlContentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffPPActivateControlContentConfig& from);
  void MergeFrom(const PiffPPActivateControlContentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffPPActivateControlContentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffPPActivateControlContentConfig";
  }
  protected:
  explicit PiffPPActivateControlContentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedKphFieldNumber = 1,
    kSteeringRateDegpsFieldNumber = 2,
    kSteeringDeadZoneDegFieldNumber = 3,
    kSteeringFrameTrackPercentageFieldNumber = 4,
  };
  // required float speed_kph = 1;
  bool has_speed_kph() const;
  private:
  bool _internal_has_speed_kph() const;
  public:
  void clear_speed_kph();
  float speed_kph() const;
  void set_speed_kph(float value);
  private:
  float _internal_speed_kph() const;
  void _internal_set_speed_kph(float value);
  public:

  // required float steering_rate_degps = 2;
  bool has_steering_rate_degps() const;
  private:
  bool _internal_has_steering_rate_degps() const;
  public:
  void clear_steering_rate_degps();
  float steering_rate_degps() const;
  void set_steering_rate_degps(float value);
  private:
  float _internal_steering_rate_degps() const;
  void _internal_set_steering_rate_degps(float value);
  public:

  // required float steering_dead_zone_deg = 3;
  bool has_steering_dead_zone_deg() const;
  private:
  bool _internal_has_steering_dead_zone_deg() const;
  public:
  void clear_steering_dead_zone_deg();
  float steering_dead_zone_deg() const;
  void set_steering_dead_zone_deg(float value);
  private:
  float _internal_steering_dead_zone_deg() const;
  void _internal_set_steering_dead_zone_deg(float value);
  public:

  // required float steering_frame_track_percentage = 4;
  bool has_steering_frame_track_percentage() const;
  private:
  bool _internal_has_steering_frame_track_percentage() const;
  public:
  void clear_steering_frame_track_percentage();
  float steering_frame_track_percentage() const;
  void set_steering_frame_track_percentage(float value);
  private:
  float _internal_steering_frame_track_percentage() const;
  void _internal_set_steering_frame_track_percentage(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffPPActivateControlContentConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float speed_kph_;
  float steering_rate_degps_;
  float steering_dead_zone_deg_;
  float steering_frame_track_percentage_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffPPDectivateControlContentConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffPPDectivateControlContentConfig) */ {
 public:
  inline PiffPPDectivateControlContentConfig() : PiffPPDectivateControlContentConfig(nullptr) {};
  virtual ~PiffPPDectivateControlContentConfig();

  PiffPPDectivateControlContentConfig(const PiffPPDectivateControlContentConfig& from);
  PiffPPDectivateControlContentConfig(PiffPPDectivateControlContentConfig&& from) noexcept
    : PiffPPDectivateControlContentConfig() {
    *this = ::std::move(from);
  }

  inline PiffPPDectivateControlContentConfig& operator=(const PiffPPDectivateControlContentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffPPDectivateControlContentConfig& operator=(PiffPPDectivateControlContentConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffPPDectivateControlContentConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffPPDectivateControlContentConfig* internal_default_instance() {
    return reinterpret_cast<const PiffPPDectivateControlContentConfig*>(
               &_PiffPPDectivateControlContentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PiffPPDectivateControlContentConfig& a, PiffPPDectivateControlContentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffPPDectivateControlContentConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffPPDectivateControlContentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffPPDectivateControlContentConfig* New() const final {
    return CreateMaybeMessage<PiffPPDectivateControlContentConfig>(nullptr);
  }

  PiffPPDectivateControlContentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffPPDectivateControlContentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffPPDectivateControlContentConfig& from);
  void MergeFrom(const PiffPPDectivateControlContentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffPPDectivateControlContentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffPPDectivateControlContentConfig";
  }
  protected:
  explicit PiffPPDectivateControlContentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedKphFieldNumber = 1,
    kSteeringRateDegpsFieldNumber = 2,
    kSteeringFrameTrackPercentageFieldNumber = 3,
  };
  // required float speed_kph = 1;
  bool has_speed_kph() const;
  private:
  bool _internal_has_speed_kph() const;
  public:
  void clear_speed_kph();
  float speed_kph() const;
  void set_speed_kph(float value);
  private:
  float _internal_speed_kph() const;
  void _internal_set_speed_kph(float value);
  public:

  // required float steering_rate_degps = 2;
  bool has_steering_rate_degps() const;
  private:
  bool _internal_has_steering_rate_degps() const;
  public:
  void clear_steering_rate_degps();
  float steering_rate_degps() const;
  void set_steering_rate_degps(float value);
  private:
  float _internal_steering_rate_degps() const;
  void _internal_set_steering_rate_degps(float value);
  public:

  // required float steering_frame_track_percentage = 3;
  bool has_steering_frame_track_percentage() const;
  private:
  bool _internal_has_steering_frame_track_percentage() const;
  public:
  void clear_steering_frame_track_percentage();
  float steering_frame_track_percentage() const;
  void set_steering_frame_track_percentage(float value);
  private:
  float _internal_steering_frame_track_percentage() const;
  void _internal_set_steering_frame_track_percentage(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffPPDectivateControlContentConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float speed_kph_;
  float steering_rate_degps_;
  float steering_frame_track_percentage_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffPPActivateControlConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffPPActivateControlConfig) */ {
 public:
  inline PiffPPActivateControlConfig() : PiffPPActivateControlConfig(nullptr) {};
  virtual ~PiffPPActivateControlConfig();

  PiffPPActivateControlConfig(const PiffPPActivateControlConfig& from);
  PiffPPActivateControlConfig(PiffPPActivateControlConfig&& from) noexcept
    : PiffPPActivateControlConfig() {
    *this = ::std::move(from);
  }

  inline PiffPPActivateControlConfig& operator=(const PiffPPActivateControlConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffPPActivateControlConfig& operator=(PiffPPActivateControlConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffPPActivateControlConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffPPActivateControlConfig* internal_default_instance() {
    return reinterpret_cast<const PiffPPActivateControlConfig*>(
               &_PiffPPActivateControlConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PiffPPActivateControlConfig& a, PiffPPActivateControlConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffPPActivateControlConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffPPActivateControlConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffPPActivateControlConfig* New() const final {
    return CreateMaybeMessage<PiffPPActivateControlConfig>(nullptr);
  }

  PiffPPActivateControlConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffPPActivateControlConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffPPActivateControlConfig& from);
  void MergeFrom(const PiffPPActivateControlConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffPPActivateControlConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffPPActivateControlConfig";
  }
  protected:
  explicit PiffPPActivateControlConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivateConfFieldNumber = 2,
    kEnablePostActivateControlFieldNumber = 1,
    kRampModeFieldNumber = 3,
  };
  // repeated .control.PiffPPActivateControlContentConfig activate_conf = 2;
  int activate_conf_size() const;
  private:
  int _internal_activate_conf_size() const;
  public:
  void clear_activate_conf();
  ::control::PiffPPActivateControlContentConfig* mutable_activate_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPActivateControlContentConfig >*
      mutable_activate_conf();
  private:
  const ::control::PiffPPActivateControlContentConfig& _internal_activate_conf(int index) const;
  ::control::PiffPPActivateControlContentConfig* _internal_add_activate_conf();
  public:
  const ::control::PiffPPActivateControlContentConfig& activate_conf(int index) const;
  ::control::PiffPPActivateControlContentConfig* add_activate_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPActivateControlContentConfig >&
      activate_conf() const;

  // required bool enable_post_activate_control = 1;
  bool has_enable_post_activate_control() const;
  private:
  bool _internal_has_enable_post_activate_control() const;
  public:
  void clear_enable_post_activate_control();
  bool enable_post_activate_control() const;
  void set_enable_post_activate_control(bool value);
  private:
  bool _internal_enable_post_activate_control() const;
  void _internal_set_enable_post_activate_control(bool value);
  public:

  // required int32 ramp_mode = 3;
  bool has_ramp_mode() const;
  private:
  bool _internal_has_ramp_mode() const;
  public:
  void clear_ramp_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 ramp_mode() const;
  void set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ramp_mode() const;
  void _internal_set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffPPActivateControlConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPActivateControlContentConfig > activate_conf_;
  bool enable_post_activate_control_;
  ::PROTOBUF_NAMESPACE_ID::int32 ramp_mode_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffPPDeactivateControlConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffPPDeactivateControlConfig) */ {
 public:
  inline PiffPPDeactivateControlConfig() : PiffPPDeactivateControlConfig(nullptr) {};
  virtual ~PiffPPDeactivateControlConfig();

  PiffPPDeactivateControlConfig(const PiffPPDeactivateControlConfig& from);
  PiffPPDeactivateControlConfig(PiffPPDeactivateControlConfig&& from) noexcept
    : PiffPPDeactivateControlConfig() {
    *this = ::std::move(from);
  }

  inline PiffPPDeactivateControlConfig& operator=(const PiffPPDeactivateControlConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffPPDeactivateControlConfig& operator=(PiffPPDeactivateControlConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffPPDeactivateControlConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffPPDeactivateControlConfig* internal_default_instance() {
    return reinterpret_cast<const PiffPPDeactivateControlConfig*>(
               &_PiffPPDeactivateControlConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PiffPPDeactivateControlConfig& a, PiffPPDeactivateControlConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffPPDeactivateControlConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffPPDeactivateControlConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffPPDeactivateControlConfig* New() const final {
    return CreateMaybeMessage<PiffPPDeactivateControlConfig>(nullptr);
  }

  PiffPPDeactivateControlConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffPPDeactivateControlConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffPPDeactivateControlConfig& from);
  void MergeFrom(const PiffPPDeactivateControlConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffPPDeactivateControlConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffPPDeactivateControlConfig";
  }
  protected:
  explicit PiffPPDeactivateControlConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeactivateConfFieldNumber = 2,
    kEnablePostDeactivateControlFieldNumber = 1,
    kRampModeFieldNumber = 3,
  };
  // repeated .control.PiffPPDectivateControlContentConfig deactivate_conf = 2;
  int deactivate_conf_size() const;
  private:
  int _internal_deactivate_conf_size() const;
  public:
  void clear_deactivate_conf();
  ::control::PiffPPDectivateControlContentConfig* mutable_deactivate_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPDectivateControlContentConfig >*
      mutable_deactivate_conf();
  private:
  const ::control::PiffPPDectivateControlContentConfig& _internal_deactivate_conf(int index) const;
  ::control::PiffPPDectivateControlContentConfig* _internal_add_deactivate_conf();
  public:
  const ::control::PiffPPDectivateControlContentConfig& deactivate_conf(int index) const;
  ::control::PiffPPDectivateControlContentConfig* add_deactivate_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPDectivateControlContentConfig >&
      deactivate_conf() const;

  // required bool enable_post_deactivate_control = 1;
  bool has_enable_post_deactivate_control() const;
  private:
  bool _internal_has_enable_post_deactivate_control() const;
  public:
  void clear_enable_post_deactivate_control();
  bool enable_post_deactivate_control() const;
  void set_enable_post_deactivate_control(bool value);
  private:
  bool _internal_enable_post_deactivate_control() const;
  void _internal_set_enable_post_deactivate_control(bool value);
  public:

  // required int32 ramp_mode = 3;
  bool has_ramp_mode() const;
  private:
  bool _internal_has_ramp_mode() const;
  public:
  void clear_ramp_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 ramp_mode() const;
  void set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ramp_mode() const;
  void _internal_set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffPPDeactivateControlConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPDectivateControlContentConfig > deactivate_conf_;
  bool enable_post_deactivate_control_;
  ::PROTOBUF_NAMESPACE_ID::int32 ramp_mode_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffPostProcessConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffPostProcessConfig) */ {
 public:
  inline PiffPostProcessConfig() : PiffPostProcessConfig(nullptr) {};
  virtual ~PiffPostProcessConfig();

  PiffPostProcessConfig(const PiffPostProcessConfig& from);
  PiffPostProcessConfig(PiffPostProcessConfig&& from) noexcept
    : PiffPostProcessConfig() {
    *this = ::std::move(from);
  }

  inline PiffPostProcessConfig& operator=(const PiffPostProcessConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffPostProcessConfig& operator=(PiffPostProcessConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffPostProcessConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffPostProcessConfig* internal_default_instance() {
    return reinterpret_cast<const PiffPostProcessConfig*>(
               &_PiffPostProcessConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PiffPostProcessConfig& a, PiffPostProcessConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffPostProcessConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffPostProcessConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffPostProcessConfig* New() const final {
    return CreateMaybeMessage<PiffPostProcessConfig>(nullptr);
  }

  PiffPostProcessConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffPostProcessConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffPostProcessConfig& from);
  void MergeFrom(const PiffPostProcessConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffPostProcessConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffPostProcessConfig";
  }
  protected:
  explicit PiffPostProcessConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteeringAngleLimitFieldNumber = 4,
    kPostActivateControlConfFieldNumber = 5,
    kPostDeactivateControlConfFieldNumber = 6,
    kEnableSteeringLimitFieldNumber = 1,
    kSteeringRangeFactorFieldNumber = 2,
    kSteeringRateRangeFactorFieldNumber = 3,
  };
  // repeated .control.PiffPPSteeringAngleLimit steering_angle_limit = 4;
  int steering_angle_limit_size() const;
  private:
  int _internal_steering_angle_limit_size() const;
  public:
  void clear_steering_angle_limit();
  ::control::PiffPPSteeringAngleLimit* mutable_steering_angle_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPSteeringAngleLimit >*
      mutable_steering_angle_limit();
  private:
  const ::control::PiffPPSteeringAngleLimit& _internal_steering_angle_limit(int index) const;
  ::control::PiffPPSteeringAngleLimit* _internal_add_steering_angle_limit();
  public:
  const ::control::PiffPPSteeringAngleLimit& steering_angle_limit(int index) const;
  ::control::PiffPPSteeringAngleLimit* add_steering_angle_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPSteeringAngleLimit >&
      steering_angle_limit() const;

  // required .control.PiffPPActivateControlConfig post_activate_control_conf = 5;
  bool has_post_activate_control_conf() const;
  private:
  bool _internal_has_post_activate_control_conf() const;
  public:
  void clear_post_activate_control_conf();
  const ::control::PiffPPActivateControlConfig& post_activate_control_conf() const;
  ::control::PiffPPActivateControlConfig* release_post_activate_control_conf();
  ::control::PiffPPActivateControlConfig* mutable_post_activate_control_conf();
  void set_allocated_post_activate_control_conf(::control::PiffPPActivateControlConfig* post_activate_control_conf);
  private:
  const ::control::PiffPPActivateControlConfig& _internal_post_activate_control_conf() const;
  ::control::PiffPPActivateControlConfig* _internal_mutable_post_activate_control_conf();
  public:
  void unsafe_arena_set_allocated_post_activate_control_conf(
      ::control::PiffPPActivateControlConfig* post_activate_control_conf);
  ::control::PiffPPActivateControlConfig* unsafe_arena_release_post_activate_control_conf();

  // required .control.PiffPPDeactivateControlConfig post_deactivate_control_conf = 6;
  bool has_post_deactivate_control_conf() const;
  private:
  bool _internal_has_post_deactivate_control_conf() const;
  public:
  void clear_post_deactivate_control_conf();
  const ::control::PiffPPDeactivateControlConfig& post_deactivate_control_conf() const;
  ::control::PiffPPDeactivateControlConfig* release_post_deactivate_control_conf();
  ::control::PiffPPDeactivateControlConfig* mutable_post_deactivate_control_conf();
  void set_allocated_post_deactivate_control_conf(::control::PiffPPDeactivateControlConfig* post_deactivate_control_conf);
  private:
  const ::control::PiffPPDeactivateControlConfig& _internal_post_deactivate_control_conf() const;
  ::control::PiffPPDeactivateControlConfig* _internal_mutable_post_deactivate_control_conf();
  public:
  void unsafe_arena_set_allocated_post_deactivate_control_conf(
      ::control::PiffPPDeactivateControlConfig* post_deactivate_control_conf);
  ::control::PiffPPDeactivateControlConfig* unsafe_arena_release_post_deactivate_control_conf();

  // required bool enable_steering_limit = 1;
  bool has_enable_steering_limit() const;
  private:
  bool _internal_has_enable_steering_limit() const;
  public:
  void clear_enable_steering_limit();
  bool enable_steering_limit() const;
  void set_enable_steering_limit(bool value);
  private:
  bool _internal_enable_steering_limit() const;
  void _internal_set_enable_steering_limit(bool value);
  public:

  // required float steering_range_factor = 2;
  bool has_steering_range_factor() const;
  private:
  bool _internal_has_steering_range_factor() const;
  public:
  void clear_steering_range_factor();
  float steering_range_factor() const;
  void set_steering_range_factor(float value);
  private:
  float _internal_steering_range_factor() const;
  void _internal_set_steering_range_factor(float value);
  public:

  // required float steering_rate_range_factor = 3;
  bool has_steering_rate_range_factor() const;
  private:
  bool _internal_has_steering_rate_range_factor() const;
  public:
  void clear_steering_rate_range_factor();
  float steering_rate_range_factor() const;
  void set_steering_rate_range_factor(float value);
  private:
  float _internal_steering_rate_range_factor() const;
  void _internal_set_steering_rate_range_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffPostProcessConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPSteeringAngleLimit > steering_angle_limit_;
  ::control::PiffPPActivateControlConfig* post_activate_control_conf_;
  ::control::PiffPPDeactivateControlConfig* post_deactivate_control_conf_;
  bool enable_steering_limit_;
  float steering_range_factor_;
  float steering_rate_range_factor_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffCoeffientGainConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffCoeffientGainConfig) */ {
 public:
  inline PiffCoeffientGainConfig() : PiffCoeffientGainConfig(nullptr) {};
  virtual ~PiffCoeffientGainConfig();

  PiffCoeffientGainConfig(const PiffCoeffientGainConfig& from);
  PiffCoeffientGainConfig(PiffCoeffientGainConfig&& from) noexcept
    : PiffCoeffientGainConfig() {
    *this = ::std::move(from);
  }

  inline PiffCoeffientGainConfig& operator=(const PiffCoeffientGainConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffCoeffientGainConfig& operator=(PiffCoeffientGainConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffCoeffientGainConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffCoeffientGainConfig* internal_default_instance() {
    return reinterpret_cast<const PiffCoeffientGainConfig*>(
               &_PiffCoeffientGainConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PiffCoeffientGainConfig& a, PiffCoeffientGainConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffCoeffientGainConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffCoeffientGainConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffCoeffientGainConfig* New() const final {
    return CreateMaybeMessage<PiffCoeffientGainConfig>(nullptr);
  }

  PiffCoeffientGainConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffCoeffientGainConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffCoeffientGainConfig& from);
  void MergeFrom(const PiffCoeffientGainConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffCoeffientGainConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffCoeffientGainConfig";
  }
  protected:
  explicit PiffCoeffientGainConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kC0ThresholdFieldNumber = 1,
    kC1CoefFieldNumber = 2,
    kC2CoefFieldNumber = 3,
  };
  // required float c0_threshold = 1;
  bool has_c0_threshold() const;
  private:
  bool _internal_has_c0_threshold() const;
  public:
  void clear_c0_threshold();
  float c0_threshold() const;
  void set_c0_threshold(float value);
  private:
  float _internal_c0_threshold() const;
  void _internal_set_c0_threshold(float value);
  public:

  // required float c1_coef = 2;
  bool has_c1_coef() const;
  private:
  bool _internal_has_c1_coef() const;
  public:
  void clear_c1_coef();
  float c1_coef() const;
  void set_c1_coef(float value);
  private:
  float _internal_c1_coef() const;
  void _internal_set_c1_coef(float value);
  public:

  // required float c2_coef = 3;
  bool has_c2_coef() const;
  private:
  bool _internal_has_c2_coef() const;
  public:
  void clear_c2_coef();
  float c2_coef() const;
  void set_c2_coef(float value);
  private:
  float _internal_c2_coef() const;
  void _internal_set_c2_coef(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffCoeffientGainConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float c0_threshold_;
  float c1_coef_;
  float c2_coef_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiffCommonParametersConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PiffCommonParametersConfig) */ {
 public:
  inline PiffCommonParametersConfig() : PiffCommonParametersConfig(nullptr) {};
  virtual ~PiffCommonParametersConfig();

  PiffCommonParametersConfig(const PiffCommonParametersConfig& from);
  PiffCommonParametersConfig(PiffCommonParametersConfig&& from) noexcept
    : PiffCommonParametersConfig() {
    *this = ::std::move(from);
  }

  inline PiffCommonParametersConfig& operator=(const PiffCommonParametersConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiffCommonParametersConfig& operator=(PiffCommonParametersConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiffCommonParametersConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiffCommonParametersConfig* internal_default_instance() {
    return reinterpret_cast<const PiffCommonParametersConfig*>(
               &_PiffCommonParametersConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PiffCommonParametersConfig& a, PiffCommonParametersConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiffCommonParametersConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiffCommonParametersConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiffCommonParametersConfig* New() const final {
    return CreateMaybeMessage<PiffCommonParametersConfig>(nullptr);
  }

  PiffCommonParametersConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiffCommonParametersConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiffCommonParametersConfig& from);
  void MergeFrom(const PiffCommonParametersConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiffCommonParametersConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PiffCommonParametersConfig";
  }
  protected:
  explicit PiffCommonParametersConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlPeriodFieldNumber = 1,
    kStandstillSpeedMpsFieldNumber = 3,
  };
  // required float control_period = 1;
  bool has_control_period() const;
  private:
  bool _internal_has_control_period() const;
  public:
  void clear_control_period();
  float control_period() const;
  void set_control_period(float value);
  private:
  float _internal_control_period() const;
  void _internal_set_control_period(float value);
  public:

  // required float standstill_speed_mps = 3;
  bool has_standstill_speed_mps() const;
  private:
  bool _internal_has_standstill_speed_mps() const;
  public:
  void clear_standstill_speed_mps();
  float standstill_speed_mps() const;
  void set_standstill_speed_mps(float value);
  private:
  float _internal_standstill_speed_mps() const;
  void _internal_set_standstill_speed_mps(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PiffCommonParametersConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float control_period_;
  float standstill_speed_mps_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LatPidConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.LatPidConfig) */ {
 public:
  inline LatPidConfig() : LatPidConfig(nullptr) {};
  virtual ~LatPidConfig();

  LatPidConfig(const LatPidConfig& from);
  LatPidConfig(LatPidConfig&& from) noexcept
    : LatPidConfig() {
    *this = ::std::move(from);
  }

  inline LatPidConfig& operator=(const LatPidConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatPidConfig& operator=(LatPidConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LatPidConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatPidConfig* internal_default_instance() {
    return reinterpret_cast<const LatPidConfig*>(
               &_LatPidConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LatPidConfig& a, LatPidConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LatPidConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatPidConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatPidConfig* New() const final {
    return CreateMaybeMessage<LatPidConfig>(nullptr);
  }

  LatPidConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatPidConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LatPidConfig& from);
  void MergeFrom(const LatPidConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatPidConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.LatPidConfig";
  }
  protected:
  explicit LatPidConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto);
    return ::descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPiffParasFieldNumber = 3,
    kCommonParaConfFieldNumber = 1,
    kControllerContentConfFieldNumber = 2,
    kMeanFilterConfFieldNumber = 4,
    kTrackingDifferentiatorConfFieldNumber = 5,
    kDataTransformConfFieldNumber = 6,
    kPostProcessConfFieldNumber = 7,
    kCoeffientGainConfFieldNumber = 8,
  };
  // repeated .control.PiffParameters piff_paras = 3;
  int piff_paras_size() const;
  private:
  int _internal_piff_paras_size() const;
  public:
  void clear_piff_paras();
  ::control::PiffParameters* mutable_piff_paras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffParameters >*
      mutable_piff_paras();
  private:
  const ::control::PiffParameters& _internal_piff_paras(int index) const;
  ::control::PiffParameters* _internal_add_piff_paras();
  public:
  const ::control::PiffParameters& piff_paras(int index) const;
  ::control::PiffParameters* add_piff_paras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffParameters >&
      piff_paras() const;

  // required .control.PiffCommonParametersConfig common_para_conf = 1;
  bool has_common_para_conf() const;
  private:
  bool _internal_has_common_para_conf() const;
  public:
  void clear_common_para_conf();
  const ::control::PiffCommonParametersConfig& common_para_conf() const;
  ::control::PiffCommonParametersConfig* release_common_para_conf();
  ::control::PiffCommonParametersConfig* mutable_common_para_conf();
  void set_allocated_common_para_conf(::control::PiffCommonParametersConfig* common_para_conf);
  private:
  const ::control::PiffCommonParametersConfig& _internal_common_para_conf() const;
  ::control::PiffCommonParametersConfig* _internal_mutable_common_para_conf();
  public:
  void unsafe_arena_set_allocated_common_para_conf(
      ::control::PiffCommonParametersConfig* common_para_conf);
  ::control::PiffCommonParametersConfig* unsafe_arena_release_common_para_conf();

  // required .control.PiffControllerContentConfig controller_content_conf = 2;
  bool has_controller_content_conf() const;
  private:
  bool _internal_has_controller_content_conf() const;
  public:
  void clear_controller_content_conf();
  const ::control::PiffControllerContentConfig& controller_content_conf() const;
  ::control::PiffControllerContentConfig* release_controller_content_conf();
  ::control::PiffControllerContentConfig* mutable_controller_content_conf();
  void set_allocated_controller_content_conf(::control::PiffControllerContentConfig* controller_content_conf);
  private:
  const ::control::PiffControllerContentConfig& _internal_controller_content_conf() const;
  ::control::PiffControllerContentConfig* _internal_mutable_controller_content_conf();
  public:
  void unsafe_arena_set_allocated_controller_content_conf(
      ::control::PiffControllerContentConfig* controller_content_conf);
  ::control::PiffControllerContentConfig* unsafe_arena_release_controller_content_conf();

  // required .control.PiffMeanFilterConfig mean_filter_conf = 4;
  bool has_mean_filter_conf() const;
  private:
  bool _internal_has_mean_filter_conf() const;
  public:
  void clear_mean_filter_conf();
  const ::control::PiffMeanFilterConfig& mean_filter_conf() const;
  ::control::PiffMeanFilterConfig* release_mean_filter_conf();
  ::control::PiffMeanFilterConfig* mutable_mean_filter_conf();
  void set_allocated_mean_filter_conf(::control::PiffMeanFilterConfig* mean_filter_conf);
  private:
  const ::control::PiffMeanFilterConfig& _internal_mean_filter_conf() const;
  ::control::PiffMeanFilterConfig* _internal_mutable_mean_filter_conf();
  public:
  void unsafe_arena_set_allocated_mean_filter_conf(
      ::control::PiffMeanFilterConfig* mean_filter_conf);
  ::control::PiffMeanFilterConfig* unsafe_arena_release_mean_filter_conf();

  // required .control.PiffTrackingDifferentiatorConfig tracking_differentiator_conf = 5;
  bool has_tracking_differentiator_conf() const;
  private:
  bool _internal_has_tracking_differentiator_conf() const;
  public:
  void clear_tracking_differentiator_conf();
  const ::control::PiffTrackingDifferentiatorConfig& tracking_differentiator_conf() const;
  ::control::PiffTrackingDifferentiatorConfig* release_tracking_differentiator_conf();
  ::control::PiffTrackingDifferentiatorConfig* mutable_tracking_differentiator_conf();
  void set_allocated_tracking_differentiator_conf(::control::PiffTrackingDifferentiatorConfig* tracking_differentiator_conf);
  private:
  const ::control::PiffTrackingDifferentiatorConfig& _internal_tracking_differentiator_conf() const;
  ::control::PiffTrackingDifferentiatorConfig* _internal_mutable_tracking_differentiator_conf();
  public:
  void unsafe_arena_set_allocated_tracking_differentiator_conf(
      ::control::PiffTrackingDifferentiatorConfig* tracking_differentiator_conf);
  ::control::PiffTrackingDifferentiatorConfig* unsafe_arena_release_tracking_differentiator_conf();

  // required .control.PiffDataTransformConfig data_transform_conf = 6;
  bool has_data_transform_conf() const;
  private:
  bool _internal_has_data_transform_conf() const;
  public:
  void clear_data_transform_conf();
  const ::control::PiffDataTransformConfig& data_transform_conf() const;
  ::control::PiffDataTransformConfig* release_data_transform_conf();
  ::control::PiffDataTransformConfig* mutable_data_transform_conf();
  void set_allocated_data_transform_conf(::control::PiffDataTransformConfig* data_transform_conf);
  private:
  const ::control::PiffDataTransformConfig& _internal_data_transform_conf() const;
  ::control::PiffDataTransformConfig* _internal_mutable_data_transform_conf();
  public:
  void unsafe_arena_set_allocated_data_transform_conf(
      ::control::PiffDataTransformConfig* data_transform_conf);
  ::control::PiffDataTransformConfig* unsafe_arena_release_data_transform_conf();

  // required .control.PiffPostProcessConfig post_process_conf = 7;
  bool has_post_process_conf() const;
  private:
  bool _internal_has_post_process_conf() const;
  public:
  void clear_post_process_conf();
  const ::control::PiffPostProcessConfig& post_process_conf() const;
  ::control::PiffPostProcessConfig* release_post_process_conf();
  ::control::PiffPostProcessConfig* mutable_post_process_conf();
  void set_allocated_post_process_conf(::control::PiffPostProcessConfig* post_process_conf);
  private:
  const ::control::PiffPostProcessConfig& _internal_post_process_conf() const;
  ::control::PiffPostProcessConfig* _internal_mutable_post_process_conf();
  public:
  void unsafe_arena_set_allocated_post_process_conf(
      ::control::PiffPostProcessConfig* post_process_conf);
  ::control::PiffPostProcessConfig* unsafe_arena_release_post_process_conf();

  // required .control.PiffCoeffientGainConfig coeffient_gain_conf = 8;
  bool has_coeffient_gain_conf() const;
  private:
  bool _internal_has_coeffient_gain_conf() const;
  public:
  void clear_coeffient_gain_conf();
  const ::control::PiffCoeffientGainConfig& coeffient_gain_conf() const;
  ::control::PiffCoeffientGainConfig* release_coeffient_gain_conf();
  ::control::PiffCoeffientGainConfig* mutable_coeffient_gain_conf();
  void set_allocated_coeffient_gain_conf(::control::PiffCoeffientGainConfig* coeffient_gain_conf);
  private:
  const ::control::PiffCoeffientGainConfig& _internal_coeffient_gain_conf() const;
  ::control::PiffCoeffientGainConfig* _internal_mutable_coeffient_gain_conf();
  public:
  void unsafe_arena_set_allocated_coeffient_gain_conf(
      ::control::PiffCoeffientGainConfig* coeffient_gain_conf);
  ::control::PiffCoeffientGainConfig* unsafe_arena_release_coeffient_gain_conf();

  // @@protoc_insertion_point(class_scope:control.LatPidConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffParameters > piff_paras_;
  ::control::PiffCommonParametersConfig* common_para_conf_;
  ::control::PiffControllerContentConfig* controller_content_conf_;
  ::control::PiffMeanFilterConfig* mean_filter_conf_;
  ::control::PiffTrackingDifferentiatorConfig* tracking_differentiator_conf_;
  ::control::PiffDataTransformConfig* data_transform_conf_;
  ::control::PiffPostProcessConfig* post_process_conf_;
  ::control::PiffCoeffientGainConfig* coeffient_gain_conf_;
  friend struct ::TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PiffParameters

// required float curvature = 1;
inline bool PiffParameters::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffParameters::has_curvature() const {
  return _internal_has_curvature();
}
inline void PiffParameters::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffParameters::_internal_curvature() const {
  return curvature_;
}
inline float PiffParameters::curvature() const {
  // @@protoc_insertion_point(field_get:control.PiffParameters.curvature)
  return _internal_curvature();
}
inline void PiffParameters::_internal_set_curvature(float value) {
  _has_bits_[0] |= 0x00000001u;
  curvature_ = value;
}
inline void PiffParameters::set_curvature(float value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:control.PiffParameters.curvature)
}

// required float speed_kph = 2;
inline bool PiffParameters::_internal_has_speed_kph() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffParameters::has_speed_kph() const {
  return _internal_has_speed_kph();
}
inline void PiffParameters::clear_speed_kph() {
  speed_kph_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffParameters::_internal_speed_kph() const {
  return speed_kph_;
}
inline float PiffParameters::speed_kph() const {
  // @@protoc_insertion_point(field_get:control.PiffParameters.speed_kph)
  return _internal_speed_kph();
}
inline void PiffParameters::_internal_set_speed_kph(float value) {
  _has_bits_[0] |= 0x00000002u;
  speed_kph_ = value;
}
inline void PiffParameters::set_speed_kph(float value) {
  _internal_set_speed_kph(value);
  // @@protoc_insertion_point(field_set:control.PiffParameters.speed_kph)
}

// repeated float matrix_k = 3;
inline int PiffParameters::_internal_matrix_k_size() const {
  return matrix_k_.size();
}
inline int PiffParameters::matrix_k_size() const {
  return _internal_matrix_k_size();
}
inline void PiffParameters::clear_matrix_k() {
  matrix_k_.Clear();
}
inline float PiffParameters::_internal_matrix_k(int index) const {
  return matrix_k_.Get(index);
}
inline float PiffParameters::matrix_k(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffParameters.matrix_k)
  return _internal_matrix_k(index);
}
inline void PiffParameters::set_matrix_k(int index, float value) {
  matrix_k_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.PiffParameters.matrix_k)
}
inline void PiffParameters::_internal_add_matrix_k(float value) {
  matrix_k_.Add(value);
}
inline void PiffParameters::add_matrix_k(float value) {
  _internal_add_matrix_k(value);
  // @@protoc_insertion_point(field_add:control.PiffParameters.matrix_k)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PiffParameters::_internal_matrix_k() const {
  return matrix_k_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PiffParameters::matrix_k() const {
  // @@protoc_insertion_point(field_list:control.PiffParameters.matrix_k)
  return _internal_matrix_k();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PiffParameters::_internal_mutable_matrix_k() {
  return &matrix_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PiffParameters::mutable_matrix_k() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffParameters.matrix_k)
  return _internal_mutable_matrix_k();
}

// -------------------------------------------------------------------

// PiffMeanFilterSwitch

// required bool enable_center_line_c0 = 1;
inline bool PiffMeanFilterSwitch::_internal_has_enable_center_line_c0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffMeanFilterSwitch::has_enable_center_line_c0() const {
  return _internal_has_enable_center_line_c0();
}
inline void PiffMeanFilterSwitch::clear_enable_center_line_c0() {
  enable_center_line_c0_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PiffMeanFilterSwitch::_internal_enable_center_line_c0() const {
  return enable_center_line_c0_;
}
inline bool PiffMeanFilterSwitch::enable_center_line_c0() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterSwitch.enable_center_line_c0)
  return _internal_enable_center_line_c0();
}
inline void PiffMeanFilterSwitch::_internal_set_enable_center_line_c0(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_center_line_c0_ = value;
}
inline void PiffMeanFilterSwitch::set_enable_center_line_c0(bool value) {
  _internal_set_enable_center_line_c0(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterSwitch.enable_center_line_c0)
}

// required bool enable_center_line_c1 = 2;
inline bool PiffMeanFilterSwitch::_internal_has_enable_center_line_c1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffMeanFilterSwitch::has_enable_center_line_c1() const {
  return _internal_has_enable_center_line_c1();
}
inline void PiffMeanFilterSwitch::clear_enable_center_line_c1() {
  enable_center_line_c1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PiffMeanFilterSwitch::_internal_enable_center_line_c1() const {
  return enable_center_line_c1_;
}
inline bool PiffMeanFilterSwitch::enable_center_line_c1() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterSwitch.enable_center_line_c1)
  return _internal_enable_center_line_c1();
}
inline void PiffMeanFilterSwitch::_internal_set_enable_center_line_c1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_center_line_c1_ = value;
}
inline void PiffMeanFilterSwitch::set_enable_center_line_c1(bool value) {
  _internal_set_enable_center_line_c1(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterSwitch.enable_center_line_c1)
}

// required bool enable_center_line_c2 = 3;
inline bool PiffMeanFilterSwitch::_internal_has_enable_center_line_c2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffMeanFilterSwitch::has_enable_center_line_c2() const {
  return _internal_has_enable_center_line_c2();
}
inline void PiffMeanFilterSwitch::clear_enable_center_line_c2() {
  enable_center_line_c2_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PiffMeanFilterSwitch::_internal_enable_center_line_c2() const {
  return enable_center_line_c2_;
}
inline bool PiffMeanFilterSwitch::enable_center_line_c2() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterSwitch.enable_center_line_c2)
  return _internal_enable_center_line_c2();
}
inline void PiffMeanFilterSwitch::_internal_set_enable_center_line_c2(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_center_line_c2_ = value;
}
inline void PiffMeanFilterSwitch::set_enable_center_line_c2(bool value) {
  _internal_set_enable_center_line_c2(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterSwitch.enable_center_line_c2)
}

// required bool enable_speed_mps = 4;
inline bool PiffMeanFilterSwitch::_internal_has_enable_speed_mps() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffMeanFilterSwitch::has_enable_speed_mps() const {
  return _internal_has_enable_speed_mps();
}
inline void PiffMeanFilterSwitch::clear_enable_speed_mps() {
  enable_speed_mps_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PiffMeanFilterSwitch::_internal_enable_speed_mps() const {
  return enable_speed_mps_;
}
inline bool PiffMeanFilterSwitch::enable_speed_mps() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterSwitch.enable_speed_mps)
  return _internal_enable_speed_mps();
}
inline void PiffMeanFilterSwitch::_internal_set_enable_speed_mps(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_speed_mps_ = value;
}
inline void PiffMeanFilterSwitch::set_enable_speed_mps(bool value) {
  _internal_set_enable_speed_mps(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterSwitch.enable_speed_mps)
}

// required bool enable_yaw_rate = 5;
inline bool PiffMeanFilterSwitch::_internal_has_enable_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffMeanFilterSwitch::has_enable_yaw_rate() const {
  return _internal_has_enable_yaw_rate();
}
inline void PiffMeanFilterSwitch::clear_enable_yaw_rate() {
  enable_yaw_rate_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PiffMeanFilterSwitch::_internal_enable_yaw_rate() const {
  return enable_yaw_rate_;
}
inline bool PiffMeanFilterSwitch::enable_yaw_rate() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterSwitch.enable_yaw_rate)
  return _internal_enable_yaw_rate();
}
inline void PiffMeanFilterSwitch::_internal_set_enable_yaw_rate(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_yaw_rate_ = value;
}
inline void PiffMeanFilterSwitch::set_enable_yaw_rate(bool value) {
  _internal_set_enable_yaw_rate(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterSwitch.enable_yaw_rate)
}

// -------------------------------------------------------------------

// PiffMeanFilterWindowSize

// required int32 center_line_c0_mfws = 1;
inline bool PiffMeanFilterWindowSize::_internal_has_center_line_c0_mfws() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffMeanFilterWindowSize::has_center_line_c0_mfws() const {
  return _internal_has_center_line_c0_mfws();
}
inline void PiffMeanFilterWindowSize::clear_center_line_c0_mfws() {
  center_line_c0_mfws_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::_internal_center_line_c0_mfws() const {
  return center_line_c0_mfws_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::center_line_c0_mfws() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterWindowSize.center_line_c0_mfws)
  return _internal_center_line_c0_mfws();
}
inline void PiffMeanFilterWindowSize::_internal_set_center_line_c0_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  center_line_c0_mfws_ = value;
}
inline void PiffMeanFilterWindowSize::set_center_line_c0_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_center_line_c0_mfws(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterWindowSize.center_line_c0_mfws)
}

// required int32 center_line_c1_mfws = 2;
inline bool PiffMeanFilterWindowSize::_internal_has_center_line_c1_mfws() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffMeanFilterWindowSize::has_center_line_c1_mfws() const {
  return _internal_has_center_line_c1_mfws();
}
inline void PiffMeanFilterWindowSize::clear_center_line_c1_mfws() {
  center_line_c1_mfws_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::_internal_center_line_c1_mfws() const {
  return center_line_c1_mfws_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::center_line_c1_mfws() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterWindowSize.center_line_c1_mfws)
  return _internal_center_line_c1_mfws();
}
inline void PiffMeanFilterWindowSize::_internal_set_center_line_c1_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  center_line_c1_mfws_ = value;
}
inline void PiffMeanFilterWindowSize::set_center_line_c1_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_center_line_c1_mfws(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterWindowSize.center_line_c1_mfws)
}

// required int32 center_line_c2_mfws = 3;
inline bool PiffMeanFilterWindowSize::_internal_has_center_line_c2_mfws() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffMeanFilterWindowSize::has_center_line_c2_mfws() const {
  return _internal_has_center_line_c2_mfws();
}
inline void PiffMeanFilterWindowSize::clear_center_line_c2_mfws() {
  center_line_c2_mfws_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::_internal_center_line_c2_mfws() const {
  return center_line_c2_mfws_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::center_line_c2_mfws() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterWindowSize.center_line_c2_mfws)
  return _internal_center_line_c2_mfws();
}
inline void PiffMeanFilterWindowSize::_internal_set_center_line_c2_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  center_line_c2_mfws_ = value;
}
inline void PiffMeanFilterWindowSize::set_center_line_c2_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_center_line_c2_mfws(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterWindowSize.center_line_c2_mfws)
}

// required int32 speed_mps_mfws = 4;
inline bool PiffMeanFilterWindowSize::_internal_has_speed_mps_mfws() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffMeanFilterWindowSize::has_speed_mps_mfws() const {
  return _internal_has_speed_mps_mfws();
}
inline void PiffMeanFilterWindowSize::clear_speed_mps_mfws() {
  speed_mps_mfws_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::_internal_speed_mps_mfws() const {
  return speed_mps_mfws_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::speed_mps_mfws() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterWindowSize.speed_mps_mfws)
  return _internal_speed_mps_mfws();
}
inline void PiffMeanFilterWindowSize::_internal_set_speed_mps_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  speed_mps_mfws_ = value;
}
inline void PiffMeanFilterWindowSize::set_speed_mps_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed_mps_mfws(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterWindowSize.speed_mps_mfws)
}

// required int32 yaw_rate_mfws = 5;
inline bool PiffMeanFilterWindowSize::_internal_has_yaw_rate_mfws() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffMeanFilterWindowSize::has_yaw_rate_mfws() const {
  return _internal_has_yaw_rate_mfws();
}
inline void PiffMeanFilterWindowSize::clear_yaw_rate_mfws() {
  yaw_rate_mfws_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::_internal_yaw_rate_mfws() const {
  return yaw_rate_mfws_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffMeanFilterWindowSize::yaw_rate_mfws() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterWindowSize.yaw_rate_mfws)
  return _internal_yaw_rate_mfws();
}
inline void PiffMeanFilterWindowSize::_internal_set_yaw_rate_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  yaw_rate_mfws_ = value;
}
inline void PiffMeanFilterWindowSize::set_yaw_rate_mfws(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yaw_rate_mfws(value);
  // @@protoc_insertion_point(field_set:control.PiffMeanFilterWindowSize.yaw_rate_mfws)
}

// -------------------------------------------------------------------

// PiffMeanFilterConfig

// required .control.PiffMeanFilterSwitch filter_switch = 1;
inline bool PiffMeanFilterConfig::_internal_has_filter_switch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || filter_switch_ != nullptr);
  return value;
}
inline bool PiffMeanFilterConfig::has_filter_switch() const {
  return _internal_has_filter_switch();
}
inline void PiffMeanFilterConfig::clear_filter_switch() {
  if (filter_switch_ != nullptr) filter_switch_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PiffMeanFilterSwitch& PiffMeanFilterConfig::_internal_filter_switch() const {
  const ::control::PiffMeanFilterSwitch* p = filter_switch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffMeanFilterSwitch*>(
      &::control::_PiffMeanFilterSwitch_default_instance_);
}
inline const ::control::PiffMeanFilterSwitch& PiffMeanFilterConfig::filter_switch() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterConfig.filter_switch)
  return _internal_filter_switch();
}
inline void PiffMeanFilterConfig::unsafe_arena_set_allocated_filter_switch(
    ::control::PiffMeanFilterSwitch* filter_switch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_switch_);
  }
  filter_switch_ = filter_switch;
  if (filter_switch) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffMeanFilterConfig.filter_switch)
}
inline ::control::PiffMeanFilterSwitch* PiffMeanFilterConfig::release_filter_switch() {
  auto temp = unsafe_arena_release_filter_switch();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffMeanFilterSwitch* PiffMeanFilterConfig::unsafe_arena_release_filter_switch() {
  // @@protoc_insertion_point(field_release:control.PiffMeanFilterConfig.filter_switch)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PiffMeanFilterSwitch* temp = filter_switch_;
  filter_switch_ = nullptr;
  return temp;
}
inline ::control::PiffMeanFilterSwitch* PiffMeanFilterConfig::_internal_mutable_filter_switch() {
  _has_bits_[0] |= 0x00000001u;
  if (filter_switch_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffMeanFilterSwitch>(GetArena());
    filter_switch_ = p;
  }
  return filter_switch_;
}
inline ::control::PiffMeanFilterSwitch* PiffMeanFilterConfig::mutable_filter_switch() {
  // @@protoc_insertion_point(field_mutable:control.PiffMeanFilterConfig.filter_switch)
  return _internal_mutable_filter_switch();
}
inline void PiffMeanFilterConfig::set_allocated_filter_switch(::control::PiffMeanFilterSwitch* filter_switch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_switch_;
  }
  if (filter_switch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter_switch);
    if (message_arena != submessage_arena) {
      filter_switch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_switch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_switch_ = filter_switch;
  // @@protoc_insertion_point(field_set_allocated:control.PiffMeanFilterConfig.filter_switch)
}

// required .control.PiffMeanFilterWindowSize window_size = 2;
inline bool PiffMeanFilterConfig::_internal_has_window_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || window_size_ != nullptr);
  return value;
}
inline bool PiffMeanFilterConfig::has_window_size() const {
  return _internal_has_window_size();
}
inline void PiffMeanFilterConfig::clear_window_size() {
  if (window_size_ != nullptr) window_size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::PiffMeanFilterWindowSize& PiffMeanFilterConfig::_internal_window_size() const {
  const ::control::PiffMeanFilterWindowSize* p = window_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffMeanFilterWindowSize*>(
      &::control::_PiffMeanFilterWindowSize_default_instance_);
}
inline const ::control::PiffMeanFilterWindowSize& PiffMeanFilterConfig::window_size() const {
  // @@protoc_insertion_point(field_get:control.PiffMeanFilterConfig.window_size)
  return _internal_window_size();
}
inline void PiffMeanFilterConfig::unsafe_arena_set_allocated_window_size(
    ::control::PiffMeanFilterWindowSize* window_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_size_);
  }
  window_size_ = window_size;
  if (window_size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffMeanFilterConfig.window_size)
}
inline ::control::PiffMeanFilterWindowSize* PiffMeanFilterConfig::release_window_size() {
  auto temp = unsafe_arena_release_window_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffMeanFilterWindowSize* PiffMeanFilterConfig::unsafe_arena_release_window_size() {
  // @@protoc_insertion_point(field_release:control.PiffMeanFilterConfig.window_size)
  _has_bits_[0] &= ~0x00000002u;
  ::control::PiffMeanFilterWindowSize* temp = window_size_;
  window_size_ = nullptr;
  return temp;
}
inline ::control::PiffMeanFilterWindowSize* PiffMeanFilterConfig::_internal_mutable_window_size() {
  _has_bits_[0] |= 0x00000002u;
  if (window_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffMeanFilterWindowSize>(GetArena());
    window_size_ = p;
  }
  return window_size_;
}
inline ::control::PiffMeanFilterWindowSize* PiffMeanFilterConfig::mutable_window_size() {
  // @@protoc_insertion_point(field_mutable:control.PiffMeanFilterConfig.window_size)
  return _internal_mutable_window_size();
}
inline void PiffMeanFilterConfig::set_allocated_window_size(::control::PiffMeanFilterWindowSize* window_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete window_size_;
  }
  if (window_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window_size);
    if (message_arena != submessage_arena) {
      window_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_size_ = window_size;
  // @@protoc_insertion_point(field_set_allocated:control.PiffMeanFilterConfig.window_size)
}

// -------------------------------------------------------------------

// PiffControllerContentRateConfig

// required float curvature = 1;
inline bool PiffControllerContentRateConfig::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffControllerContentRateConfig::has_curvature() const {
  return _internal_has_curvature();
}
inline void PiffControllerContentRateConfig::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffControllerContentRateConfig::_internal_curvature() const {
  return curvature_;
}
inline float PiffControllerContentRateConfig::curvature() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentRateConfig.curvature)
  return _internal_curvature();
}
inline void PiffControllerContentRateConfig::_internal_set_curvature(float value) {
  _has_bits_[0] |= 0x00000001u;
  curvature_ = value;
}
inline void PiffControllerContentRateConfig::set_curvature(float value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentRateConfig.curvature)
}

// required float speed_kph = 2;
inline bool PiffControllerContentRateConfig::_internal_has_speed_kph() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffControllerContentRateConfig::has_speed_kph() const {
  return _internal_has_speed_kph();
}
inline void PiffControllerContentRateConfig::clear_speed_kph() {
  speed_kph_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffControllerContentRateConfig::_internal_speed_kph() const {
  return speed_kph_;
}
inline float PiffControllerContentRateConfig::speed_kph() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentRateConfig.speed_kph)
  return _internal_speed_kph();
}
inline void PiffControllerContentRateConfig::_internal_set_speed_kph(float value) {
  _has_bits_[0] |= 0x00000002u;
  speed_kph_ = value;
}
inline void PiffControllerContentRateConfig::set_speed_kph(float value) {
  _internal_set_speed_kph(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentRateConfig.speed_kph)
}

// required float ff_rate = 3;
inline bool PiffControllerContentRateConfig::_internal_has_ff_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffControllerContentRateConfig::has_ff_rate() const {
  return _internal_has_ff_rate();
}
inline void PiffControllerContentRateConfig::clear_ff_rate() {
  ff_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PiffControllerContentRateConfig::_internal_ff_rate() const {
  return ff_rate_;
}
inline float PiffControllerContentRateConfig::ff_rate() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentRateConfig.ff_rate)
  return _internal_ff_rate();
}
inline void PiffControllerContentRateConfig::_internal_set_ff_rate(float value) {
  _has_bits_[0] |= 0x00000004u;
  ff_rate_ = value;
}
inline void PiffControllerContentRateConfig::set_ff_rate(float value) {
  _internal_set_ff_rate(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentRateConfig.ff_rate)
}

// required float fb_rate = 4;
inline bool PiffControllerContentRateConfig::_internal_has_fb_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffControllerContentRateConfig::has_fb_rate() const {
  return _internal_has_fb_rate();
}
inline void PiffControllerContentRateConfig::clear_fb_rate() {
  fb_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PiffControllerContentRateConfig::_internal_fb_rate() const {
  return fb_rate_;
}
inline float PiffControllerContentRateConfig::fb_rate() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentRateConfig.fb_rate)
  return _internal_fb_rate();
}
inline void PiffControllerContentRateConfig::_internal_set_fb_rate(float value) {
  _has_bits_[0] |= 0x00000008u;
  fb_rate_ = value;
}
inline void PiffControllerContentRateConfig::set_fb_rate(float value) {
  _internal_set_fb_rate(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentRateConfig.fb_rate)
}

// -------------------------------------------------------------------

// PiffLinearModeIntegratorConfig

// required int32 ki_mode = 1;
inline bool PiffLinearModeIntegratorConfig::_internal_has_ki_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffLinearModeIntegratorConfig::has_ki_mode() const {
  return _internal_has_ki_mode();
}
inline void PiffLinearModeIntegratorConfig::clear_ki_mode() {
  ki_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffLinearModeIntegratorConfig::_internal_ki_mode() const {
  return ki_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffLinearModeIntegratorConfig::ki_mode() const {
  // @@protoc_insertion_point(field_get:control.PiffLinearModeIntegratorConfig.ki_mode)
  return _internal_ki_mode();
}
inline void PiffLinearModeIntegratorConfig::_internal_set_ki_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  ki_mode_ = value;
}
inline void PiffLinearModeIntegratorConfig::set_ki_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ki_mode(value);
  // @@protoc_insertion_point(field_set:control.PiffLinearModeIntegratorConfig.ki_mode)
}

// repeated float ki = 2;
inline int PiffLinearModeIntegratorConfig::_internal_ki_size() const {
  return ki_.size();
}
inline int PiffLinearModeIntegratorConfig::ki_size() const {
  return _internal_ki_size();
}
inline void PiffLinearModeIntegratorConfig::clear_ki() {
  ki_.Clear();
}
inline float PiffLinearModeIntegratorConfig::_internal_ki(int index) const {
  return ki_.Get(index);
}
inline float PiffLinearModeIntegratorConfig::ki(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffLinearModeIntegratorConfig.ki)
  return _internal_ki(index);
}
inline void PiffLinearModeIntegratorConfig::set_ki(int index, float value) {
  ki_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.PiffLinearModeIntegratorConfig.ki)
}
inline void PiffLinearModeIntegratorConfig::_internal_add_ki(float value) {
  ki_.Add(value);
}
inline void PiffLinearModeIntegratorConfig::add_ki(float value) {
  _internal_add_ki(value);
  // @@protoc_insertion_point(field_add:control.PiffLinearModeIntegratorConfig.ki)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PiffLinearModeIntegratorConfig::_internal_ki() const {
  return ki_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PiffLinearModeIntegratorConfig::ki() const {
  // @@protoc_insertion_point(field_list:control.PiffLinearModeIntegratorConfig.ki)
  return _internal_ki();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PiffLinearModeIntegratorConfig::_internal_mutable_ki() {
  return &ki_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PiffLinearModeIntegratorConfig::mutable_ki() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffLinearModeIntegratorConfig.ki)
  return _internal_mutable_ki();
}

// -------------------------------------------------------------------

// PiffPercentageModeIntegratorConfig

// required float track_percentage = 1;
inline bool PiffPercentageModeIntegratorConfig::_internal_has_track_percentage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffPercentageModeIntegratorConfig::has_track_percentage() const {
  return _internal_has_track_percentage();
}
inline void PiffPercentageModeIntegratorConfig::clear_track_percentage() {
  track_percentage_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffPercentageModeIntegratorConfig::_internal_track_percentage() const {
  return track_percentage_;
}
inline float PiffPercentageModeIntegratorConfig::track_percentage() const {
  // @@protoc_insertion_point(field_get:control.PiffPercentageModeIntegratorConfig.track_percentage)
  return _internal_track_percentage();
}
inline void PiffPercentageModeIntegratorConfig::_internal_set_track_percentage(float value) {
  _has_bits_[0] |= 0x00000001u;
  track_percentage_ = value;
}
inline void PiffPercentageModeIntegratorConfig::set_track_percentage(float value) {
  _internal_set_track_percentage(value);
  // @@protoc_insertion_point(field_set:control.PiffPercentageModeIntegratorConfig.track_percentage)
}

// required bool enable_lateral_err_contribution = 2;
inline bool PiffPercentageModeIntegratorConfig::_internal_has_enable_lateral_err_contribution() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffPercentageModeIntegratorConfig::has_enable_lateral_err_contribution() const {
  return _internal_has_enable_lateral_err_contribution();
}
inline void PiffPercentageModeIntegratorConfig::clear_enable_lateral_err_contribution() {
  enable_lateral_err_contribution_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PiffPercentageModeIntegratorConfig::_internal_enable_lateral_err_contribution() const {
  return enable_lateral_err_contribution_;
}
inline bool PiffPercentageModeIntegratorConfig::enable_lateral_err_contribution() const {
  // @@protoc_insertion_point(field_get:control.PiffPercentageModeIntegratorConfig.enable_lateral_err_contribution)
  return _internal_enable_lateral_err_contribution();
}
inline void PiffPercentageModeIntegratorConfig::_internal_set_enable_lateral_err_contribution(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_lateral_err_contribution_ = value;
}
inline void PiffPercentageModeIntegratorConfig::set_enable_lateral_err_contribution(bool value) {
  _internal_set_enable_lateral_err_contribution(value);
  // @@protoc_insertion_point(field_set:control.PiffPercentageModeIntegratorConfig.enable_lateral_err_contribution)
}

// required bool enable_lateral_err_rate_contribution = 3;
inline bool PiffPercentageModeIntegratorConfig::_internal_has_enable_lateral_err_rate_contribution() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffPercentageModeIntegratorConfig::has_enable_lateral_err_rate_contribution() const {
  return _internal_has_enable_lateral_err_rate_contribution();
}
inline void PiffPercentageModeIntegratorConfig::clear_enable_lateral_err_rate_contribution() {
  enable_lateral_err_rate_contribution_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PiffPercentageModeIntegratorConfig::_internal_enable_lateral_err_rate_contribution() const {
  return enable_lateral_err_rate_contribution_;
}
inline bool PiffPercentageModeIntegratorConfig::enable_lateral_err_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.PiffPercentageModeIntegratorConfig.enable_lateral_err_rate_contribution)
  return _internal_enable_lateral_err_rate_contribution();
}
inline void PiffPercentageModeIntegratorConfig::_internal_set_enable_lateral_err_rate_contribution(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_lateral_err_rate_contribution_ = value;
}
inline void PiffPercentageModeIntegratorConfig::set_enable_lateral_err_rate_contribution(bool value) {
  _internal_set_enable_lateral_err_rate_contribution(value);
  // @@protoc_insertion_point(field_set:control.PiffPercentageModeIntegratorConfig.enable_lateral_err_rate_contribution)
}

// required bool enable_heading_err_contribution = 4;
inline bool PiffPercentageModeIntegratorConfig::_internal_has_enable_heading_err_contribution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffPercentageModeIntegratorConfig::has_enable_heading_err_contribution() const {
  return _internal_has_enable_heading_err_contribution();
}
inline void PiffPercentageModeIntegratorConfig::clear_enable_heading_err_contribution() {
  enable_heading_err_contribution_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PiffPercentageModeIntegratorConfig::_internal_enable_heading_err_contribution() const {
  return enable_heading_err_contribution_;
}
inline bool PiffPercentageModeIntegratorConfig::enable_heading_err_contribution() const {
  // @@protoc_insertion_point(field_get:control.PiffPercentageModeIntegratorConfig.enable_heading_err_contribution)
  return _internal_enable_heading_err_contribution();
}
inline void PiffPercentageModeIntegratorConfig::_internal_set_enable_heading_err_contribution(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_heading_err_contribution_ = value;
}
inline void PiffPercentageModeIntegratorConfig::set_enable_heading_err_contribution(bool value) {
  _internal_set_enable_heading_err_contribution(value);
  // @@protoc_insertion_point(field_set:control.PiffPercentageModeIntegratorConfig.enable_heading_err_contribution)
}

// required bool enable_heading_err_rate_contribution = 5;
inline bool PiffPercentageModeIntegratorConfig::_internal_has_enable_heading_err_rate_contribution() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffPercentageModeIntegratorConfig::has_enable_heading_err_rate_contribution() const {
  return _internal_has_enable_heading_err_rate_contribution();
}
inline void PiffPercentageModeIntegratorConfig::clear_enable_heading_err_rate_contribution() {
  enable_heading_err_rate_contribution_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PiffPercentageModeIntegratorConfig::_internal_enable_heading_err_rate_contribution() const {
  return enable_heading_err_rate_contribution_;
}
inline bool PiffPercentageModeIntegratorConfig::enable_heading_err_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.PiffPercentageModeIntegratorConfig.enable_heading_err_rate_contribution)
  return _internal_enable_heading_err_rate_contribution();
}
inline void PiffPercentageModeIntegratorConfig::_internal_set_enable_heading_err_rate_contribution(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_heading_err_rate_contribution_ = value;
}
inline void PiffPercentageModeIntegratorConfig::set_enable_heading_err_rate_contribution(bool value) {
  _internal_set_enable_heading_err_rate_contribution(value);
  // @@protoc_insertion_point(field_set:control.PiffPercentageModeIntegratorConfig.enable_heading_err_rate_contribution)
}

// -------------------------------------------------------------------

// PiffProtectIntegratorConfig

// required bool flag_protection = 1;
inline bool PiffProtectIntegratorConfig::_internal_has_flag_protection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffProtectIntegratorConfig::has_flag_protection() const {
  return _internal_has_flag_protection();
}
inline void PiffProtectIntegratorConfig::clear_flag_protection() {
  flag_protection_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PiffProtectIntegratorConfig::_internal_flag_protection() const {
  return flag_protection_;
}
inline bool PiffProtectIntegratorConfig::flag_protection() const {
  // @@protoc_insertion_point(field_get:control.PiffProtectIntegratorConfig.flag_protection)
  return _internal_flag_protection();
}
inline void PiffProtectIntegratorConfig::_internal_set_flag_protection(bool value) {
  _has_bits_[0] |= 0x00000001u;
  flag_protection_ = value;
}
inline void PiffProtectIntegratorConfig::set_flag_protection(bool value) {
  _internal_set_flag_protection(value);
  // @@protoc_insertion_point(field_set:control.PiffProtectIntegratorConfig.flag_protection)
}

// required int32 frames_protection = 2;
inline bool PiffProtectIntegratorConfig::_internal_has_frames_protection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffProtectIntegratorConfig::has_frames_protection() const {
  return _internal_has_frames_protection();
}
inline void PiffProtectIntegratorConfig::clear_frames_protection() {
  frames_protection_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffProtectIntegratorConfig::_internal_frames_protection() const {
  return frames_protection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffProtectIntegratorConfig::frames_protection() const {
  // @@protoc_insertion_point(field_get:control.PiffProtectIntegratorConfig.frames_protection)
  return _internal_frames_protection();
}
inline void PiffProtectIntegratorConfig::_internal_set_frames_protection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frames_protection_ = value;
}
inline void PiffProtectIntegratorConfig::set_frames_protection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frames_protection(value);
  // @@protoc_insertion_point(field_set:control.PiffProtectIntegratorConfig.frames_protection)
}

// -------------------------------------------------------------------

// PiffIntegratorConfig

// required bool enable_integrator = 1;
inline bool PiffIntegratorConfig::_internal_has_enable_integrator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffIntegratorConfig::has_enable_integrator() const {
  return _internal_has_enable_integrator();
}
inline void PiffIntegratorConfig::clear_enable_integrator() {
  enable_integrator_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PiffIntegratorConfig::_internal_enable_integrator() const {
  return enable_integrator_;
}
inline bool PiffIntegratorConfig::enable_integrator() const {
  // @@protoc_insertion_point(field_get:control.PiffIntegratorConfig.enable_integrator)
  return _internal_enable_integrator();
}
inline void PiffIntegratorConfig::_internal_set_enable_integrator(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_integrator_ = value;
}
inline void PiffIntegratorConfig::set_enable_integrator(bool value) {
  _internal_set_enable_integrator(value);
  // @@protoc_insertion_point(field_set:control.PiffIntegratorConfig.enable_integrator)
}

// required float steering_saturation_level_deg = 2;
inline bool PiffIntegratorConfig::_internal_has_steering_saturation_level_deg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffIntegratorConfig::has_steering_saturation_level_deg() const {
  return _internal_has_steering_saturation_level_deg();
}
inline void PiffIntegratorConfig::clear_steering_saturation_level_deg() {
  steering_saturation_level_deg_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PiffIntegratorConfig::_internal_steering_saturation_level_deg() const {
  return steering_saturation_level_deg_;
}
inline float PiffIntegratorConfig::steering_saturation_level_deg() const {
  // @@protoc_insertion_point(field_get:control.PiffIntegratorConfig.steering_saturation_level_deg)
  return _internal_steering_saturation_level_deg();
}
inline void PiffIntegratorConfig::_internal_set_steering_saturation_level_deg(float value) {
  _has_bits_[0] |= 0x00000010u;
  steering_saturation_level_deg_ = value;
}
inline void PiffIntegratorConfig::set_steering_saturation_level_deg(float value) {
  _internal_set_steering_saturation_level_deg(value);
  // @@protoc_insertion_point(field_set:control.PiffIntegratorConfig.steering_saturation_level_deg)
}

// required int32 mode_integrator = 3;
inline bool PiffIntegratorConfig::_internal_has_mode_integrator() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PiffIntegratorConfig::has_mode_integrator() const {
  return _internal_has_mode_integrator();
}
inline void PiffIntegratorConfig::clear_mode_integrator() {
  mode_integrator_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffIntegratorConfig::_internal_mode_integrator() const {
  return mode_integrator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffIntegratorConfig::mode_integrator() const {
  // @@protoc_insertion_point(field_get:control.PiffIntegratorConfig.mode_integrator)
  return _internal_mode_integrator();
}
inline void PiffIntegratorConfig::_internal_set_mode_integrator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mode_integrator_ = value;
}
inline void PiffIntegratorConfig::set_mode_integrator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode_integrator(value);
  // @@protoc_insertion_point(field_set:control.PiffIntegratorConfig.mode_integrator)
}

// required .control.PiffLinearModeIntegratorConfig linear_mode_integrator_conf = 4;
inline bool PiffIntegratorConfig::_internal_has_linear_mode_integrator_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || linear_mode_integrator_conf_ != nullptr);
  return value;
}
inline bool PiffIntegratorConfig::has_linear_mode_integrator_conf() const {
  return _internal_has_linear_mode_integrator_conf();
}
inline void PiffIntegratorConfig::clear_linear_mode_integrator_conf() {
  if (linear_mode_integrator_conf_ != nullptr) linear_mode_integrator_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PiffLinearModeIntegratorConfig& PiffIntegratorConfig::_internal_linear_mode_integrator_conf() const {
  const ::control::PiffLinearModeIntegratorConfig* p = linear_mode_integrator_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffLinearModeIntegratorConfig*>(
      &::control::_PiffLinearModeIntegratorConfig_default_instance_);
}
inline const ::control::PiffLinearModeIntegratorConfig& PiffIntegratorConfig::linear_mode_integrator_conf() const {
  // @@protoc_insertion_point(field_get:control.PiffIntegratorConfig.linear_mode_integrator_conf)
  return _internal_linear_mode_integrator_conf();
}
inline void PiffIntegratorConfig::unsafe_arena_set_allocated_linear_mode_integrator_conf(
    ::control::PiffLinearModeIntegratorConfig* linear_mode_integrator_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_mode_integrator_conf_);
  }
  linear_mode_integrator_conf_ = linear_mode_integrator_conf;
  if (linear_mode_integrator_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffIntegratorConfig.linear_mode_integrator_conf)
}
inline ::control::PiffLinearModeIntegratorConfig* PiffIntegratorConfig::release_linear_mode_integrator_conf() {
  auto temp = unsafe_arena_release_linear_mode_integrator_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffLinearModeIntegratorConfig* PiffIntegratorConfig::unsafe_arena_release_linear_mode_integrator_conf() {
  // @@protoc_insertion_point(field_release:control.PiffIntegratorConfig.linear_mode_integrator_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PiffLinearModeIntegratorConfig* temp = linear_mode_integrator_conf_;
  linear_mode_integrator_conf_ = nullptr;
  return temp;
}
inline ::control::PiffLinearModeIntegratorConfig* PiffIntegratorConfig::_internal_mutable_linear_mode_integrator_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (linear_mode_integrator_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffLinearModeIntegratorConfig>(GetArena());
    linear_mode_integrator_conf_ = p;
  }
  return linear_mode_integrator_conf_;
}
inline ::control::PiffLinearModeIntegratorConfig* PiffIntegratorConfig::mutable_linear_mode_integrator_conf() {
  // @@protoc_insertion_point(field_mutable:control.PiffIntegratorConfig.linear_mode_integrator_conf)
  return _internal_mutable_linear_mode_integrator_conf();
}
inline void PiffIntegratorConfig::set_allocated_linear_mode_integrator_conf(::control::PiffLinearModeIntegratorConfig* linear_mode_integrator_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_mode_integrator_conf_;
  }
  if (linear_mode_integrator_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear_mode_integrator_conf);
    if (message_arena != submessage_arena) {
      linear_mode_integrator_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_mode_integrator_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linear_mode_integrator_conf_ = linear_mode_integrator_conf;
  // @@protoc_insertion_point(field_set_allocated:control.PiffIntegratorConfig.linear_mode_integrator_conf)
}

// required .control.PiffPercentageModeIntegratorConfig percentage_mode_integrator_conf = 5;
inline bool PiffIntegratorConfig::_internal_has_percentage_mode_integrator_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || percentage_mode_integrator_conf_ != nullptr);
  return value;
}
inline bool PiffIntegratorConfig::has_percentage_mode_integrator_conf() const {
  return _internal_has_percentage_mode_integrator_conf();
}
inline void PiffIntegratorConfig::clear_percentage_mode_integrator_conf() {
  if (percentage_mode_integrator_conf_ != nullptr) percentage_mode_integrator_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::PiffPercentageModeIntegratorConfig& PiffIntegratorConfig::_internal_percentage_mode_integrator_conf() const {
  const ::control::PiffPercentageModeIntegratorConfig* p = percentage_mode_integrator_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffPercentageModeIntegratorConfig*>(
      &::control::_PiffPercentageModeIntegratorConfig_default_instance_);
}
inline const ::control::PiffPercentageModeIntegratorConfig& PiffIntegratorConfig::percentage_mode_integrator_conf() const {
  // @@protoc_insertion_point(field_get:control.PiffIntegratorConfig.percentage_mode_integrator_conf)
  return _internal_percentage_mode_integrator_conf();
}
inline void PiffIntegratorConfig::unsafe_arena_set_allocated_percentage_mode_integrator_conf(
    ::control::PiffPercentageModeIntegratorConfig* percentage_mode_integrator_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(percentage_mode_integrator_conf_);
  }
  percentage_mode_integrator_conf_ = percentage_mode_integrator_conf;
  if (percentage_mode_integrator_conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffIntegratorConfig.percentage_mode_integrator_conf)
}
inline ::control::PiffPercentageModeIntegratorConfig* PiffIntegratorConfig::release_percentage_mode_integrator_conf() {
  auto temp = unsafe_arena_release_percentage_mode_integrator_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffPercentageModeIntegratorConfig* PiffIntegratorConfig::unsafe_arena_release_percentage_mode_integrator_conf() {
  // @@protoc_insertion_point(field_release:control.PiffIntegratorConfig.percentage_mode_integrator_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::control::PiffPercentageModeIntegratorConfig* temp = percentage_mode_integrator_conf_;
  percentage_mode_integrator_conf_ = nullptr;
  return temp;
}
inline ::control::PiffPercentageModeIntegratorConfig* PiffIntegratorConfig::_internal_mutable_percentage_mode_integrator_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (percentage_mode_integrator_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffPercentageModeIntegratorConfig>(GetArena());
    percentage_mode_integrator_conf_ = p;
  }
  return percentage_mode_integrator_conf_;
}
inline ::control::PiffPercentageModeIntegratorConfig* PiffIntegratorConfig::mutable_percentage_mode_integrator_conf() {
  // @@protoc_insertion_point(field_mutable:control.PiffIntegratorConfig.percentage_mode_integrator_conf)
  return _internal_mutable_percentage_mode_integrator_conf();
}
inline void PiffIntegratorConfig::set_allocated_percentage_mode_integrator_conf(::control::PiffPercentageModeIntegratorConfig* percentage_mode_integrator_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete percentage_mode_integrator_conf_;
  }
  if (percentage_mode_integrator_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(percentage_mode_integrator_conf);
    if (message_arena != submessage_arena) {
      percentage_mode_integrator_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, percentage_mode_integrator_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  percentage_mode_integrator_conf_ = percentage_mode_integrator_conf;
  // @@protoc_insertion_point(field_set_allocated:control.PiffIntegratorConfig.percentage_mode_integrator_conf)
}

// required .control.PiffProtectIntegratorConfig protect_integrator_conf = 6;
inline bool PiffIntegratorConfig::_internal_has_protect_integrator_conf() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || protect_integrator_conf_ != nullptr);
  return value;
}
inline bool PiffIntegratorConfig::has_protect_integrator_conf() const {
  return _internal_has_protect_integrator_conf();
}
inline void PiffIntegratorConfig::clear_protect_integrator_conf() {
  if (protect_integrator_conf_ != nullptr) protect_integrator_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::control::PiffProtectIntegratorConfig& PiffIntegratorConfig::_internal_protect_integrator_conf() const {
  const ::control::PiffProtectIntegratorConfig* p = protect_integrator_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffProtectIntegratorConfig*>(
      &::control::_PiffProtectIntegratorConfig_default_instance_);
}
inline const ::control::PiffProtectIntegratorConfig& PiffIntegratorConfig::protect_integrator_conf() const {
  // @@protoc_insertion_point(field_get:control.PiffIntegratorConfig.protect_integrator_conf)
  return _internal_protect_integrator_conf();
}
inline void PiffIntegratorConfig::unsafe_arena_set_allocated_protect_integrator_conf(
    ::control::PiffProtectIntegratorConfig* protect_integrator_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protect_integrator_conf_);
  }
  protect_integrator_conf_ = protect_integrator_conf;
  if (protect_integrator_conf) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffIntegratorConfig.protect_integrator_conf)
}
inline ::control::PiffProtectIntegratorConfig* PiffIntegratorConfig::release_protect_integrator_conf() {
  auto temp = unsafe_arena_release_protect_integrator_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffProtectIntegratorConfig* PiffIntegratorConfig::unsafe_arena_release_protect_integrator_conf() {
  // @@protoc_insertion_point(field_release:control.PiffIntegratorConfig.protect_integrator_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::control::PiffProtectIntegratorConfig* temp = protect_integrator_conf_;
  protect_integrator_conf_ = nullptr;
  return temp;
}
inline ::control::PiffProtectIntegratorConfig* PiffIntegratorConfig::_internal_mutable_protect_integrator_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (protect_integrator_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffProtectIntegratorConfig>(GetArena());
    protect_integrator_conf_ = p;
  }
  return protect_integrator_conf_;
}
inline ::control::PiffProtectIntegratorConfig* PiffIntegratorConfig::mutable_protect_integrator_conf() {
  // @@protoc_insertion_point(field_mutable:control.PiffIntegratorConfig.protect_integrator_conf)
  return _internal_mutable_protect_integrator_conf();
}
inline void PiffIntegratorConfig::set_allocated_protect_integrator_conf(::control::PiffProtectIntegratorConfig* protect_integrator_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete protect_integrator_conf_;
  }
  if (protect_integrator_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(protect_integrator_conf);
    if (message_arena != submessage_arena) {
      protect_integrator_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protect_integrator_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  protect_integrator_conf_ = protect_integrator_conf;
  // @@protoc_insertion_point(field_set_allocated:control.PiffIntegratorConfig.protect_integrator_conf)
}

// -------------------------------------------------------------------

// PiffCCSteeringFakeDeadZoneConfig

// required bool enable_fake_dead_zone = 1;
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_has_enable_fake_dead_zone() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::has_enable_fake_dead_zone() const {
  return _internal_has_enable_fake_dead_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::clear_enable_fake_dead_zone() {
  enable_fake_dead_zone_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_enable_fake_dead_zone() const {
  return enable_fake_dead_zone_;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::enable_fake_dead_zone() const {
  // @@protoc_insertion_point(field_get:control.PiffCCSteeringFakeDeadZoneConfig.enable_fake_dead_zone)
  return _internal_enable_fake_dead_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::_internal_set_enable_fake_dead_zone(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_fake_dead_zone_ = value;
}
inline void PiffCCSteeringFakeDeadZoneConfig::set_enable_fake_dead_zone(bool value) {
  _internal_set_enable_fake_dead_zone(value);
  // @@protoc_insertion_point(field_set:control.PiffCCSteeringFakeDeadZoneConfig.enable_fake_dead_zone)
}

// required float lateral_error_m_fake_zone = 2;
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_has_lateral_error_m_fake_zone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::has_lateral_error_m_fake_zone() const {
  return _internal_has_lateral_error_m_fake_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::clear_lateral_error_m_fake_zone() {
  lateral_error_m_fake_zone_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffCCSteeringFakeDeadZoneConfig::_internal_lateral_error_m_fake_zone() const {
  return lateral_error_m_fake_zone_;
}
inline float PiffCCSteeringFakeDeadZoneConfig::lateral_error_m_fake_zone() const {
  // @@protoc_insertion_point(field_get:control.PiffCCSteeringFakeDeadZoneConfig.lateral_error_m_fake_zone)
  return _internal_lateral_error_m_fake_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::_internal_set_lateral_error_m_fake_zone(float value) {
  _has_bits_[0] |= 0x00000001u;
  lateral_error_m_fake_zone_ = value;
}
inline void PiffCCSteeringFakeDeadZoneConfig::set_lateral_error_m_fake_zone(float value) {
  _internal_set_lateral_error_m_fake_zone(value);
  // @@protoc_insertion_point(field_set:control.PiffCCSteeringFakeDeadZoneConfig.lateral_error_m_fake_zone)
}

// required float heading_error_rad_fake_zone = 3;
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_has_heading_error_rad_fake_zone() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::has_heading_error_rad_fake_zone() const {
  return _internal_has_heading_error_rad_fake_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::clear_heading_error_rad_fake_zone() {
  heading_error_rad_fake_zone_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PiffCCSteeringFakeDeadZoneConfig::_internal_heading_error_rad_fake_zone() const {
  return heading_error_rad_fake_zone_;
}
inline float PiffCCSteeringFakeDeadZoneConfig::heading_error_rad_fake_zone() const {
  // @@protoc_insertion_point(field_get:control.PiffCCSteeringFakeDeadZoneConfig.heading_error_rad_fake_zone)
  return _internal_heading_error_rad_fake_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::_internal_set_heading_error_rad_fake_zone(float value) {
  _has_bits_[0] |= 0x00000008u;
  heading_error_rad_fake_zone_ = value;
}
inline void PiffCCSteeringFakeDeadZoneConfig::set_heading_error_rad_fake_zone(float value) {
  _internal_set_heading_error_rad_fake_zone(value);
  // @@protoc_insertion_point(field_set:control.PiffCCSteeringFakeDeadZoneConfig.heading_error_rad_fake_zone)
}

// required bool enable_fake_transition_zone = 4;
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_has_enable_fake_transition_zone() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::has_enable_fake_transition_zone() const {
  return _internal_has_enable_fake_transition_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::clear_enable_fake_transition_zone() {
  enable_fake_transition_zone_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_enable_fake_transition_zone() const {
  return enable_fake_transition_zone_;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::enable_fake_transition_zone() const {
  // @@protoc_insertion_point(field_get:control.PiffCCSteeringFakeDeadZoneConfig.enable_fake_transition_zone)
  return _internal_enable_fake_transition_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::_internal_set_enable_fake_transition_zone(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_fake_transition_zone_ = value;
}
inline void PiffCCSteeringFakeDeadZoneConfig::set_enable_fake_transition_zone(bool value) {
  _internal_set_enable_fake_transition_zone(value);
  // @@protoc_insertion_point(field_set:control.PiffCCSteeringFakeDeadZoneConfig.enable_fake_transition_zone)
}

// required float lateral_error_m_transition_zone = 5;
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_has_lateral_error_m_transition_zone() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::has_lateral_error_m_transition_zone() const {
  return _internal_has_lateral_error_m_transition_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::clear_lateral_error_m_transition_zone() {
  lateral_error_m_transition_zone_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PiffCCSteeringFakeDeadZoneConfig::_internal_lateral_error_m_transition_zone() const {
  return lateral_error_m_transition_zone_;
}
inline float PiffCCSteeringFakeDeadZoneConfig::lateral_error_m_transition_zone() const {
  // @@protoc_insertion_point(field_get:control.PiffCCSteeringFakeDeadZoneConfig.lateral_error_m_transition_zone)
  return _internal_lateral_error_m_transition_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::_internal_set_lateral_error_m_transition_zone(float value) {
  _has_bits_[0] |= 0x00000010u;
  lateral_error_m_transition_zone_ = value;
}
inline void PiffCCSteeringFakeDeadZoneConfig::set_lateral_error_m_transition_zone(float value) {
  _internal_set_lateral_error_m_transition_zone(value);
  // @@protoc_insertion_point(field_set:control.PiffCCSteeringFakeDeadZoneConfig.lateral_error_m_transition_zone)
}

// required float heading_error_rad_transition_zone = 6;
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_has_heading_error_rad_transition_zone() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::has_heading_error_rad_transition_zone() const {
  return _internal_has_heading_error_rad_transition_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::clear_heading_error_rad_transition_zone() {
  heading_error_rad_transition_zone_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PiffCCSteeringFakeDeadZoneConfig::_internal_heading_error_rad_transition_zone() const {
  return heading_error_rad_transition_zone_;
}
inline float PiffCCSteeringFakeDeadZoneConfig::heading_error_rad_transition_zone() const {
  // @@protoc_insertion_point(field_get:control.PiffCCSteeringFakeDeadZoneConfig.heading_error_rad_transition_zone)
  return _internal_heading_error_rad_transition_zone();
}
inline void PiffCCSteeringFakeDeadZoneConfig::_internal_set_heading_error_rad_transition_zone(float value) {
  _has_bits_[0] |= 0x00000020u;
  heading_error_rad_transition_zone_ = value;
}
inline void PiffCCSteeringFakeDeadZoneConfig::set_heading_error_rad_transition_zone(float value) {
  _internal_set_heading_error_rad_transition_zone(value);
  // @@protoc_insertion_point(field_set:control.PiffCCSteeringFakeDeadZoneConfig.heading_error_rad_transition_zone)
}

// required int32 mode = 7;
inline bool PiffCCSteeringFakeDeadZoneConfig::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PiffCCSteeringFakeDeadZoneConfig::has_mode() const {
  return _internal_has_mode();
}
inline void PiffCCSteeringFakeDeadZoneConfig::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffCCSteeringFakeDeadZoneConfig::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffCCSteeringFakeDeadZoneConfig::mode() const {
  // @@protoc_insertion_point(field_get:control.PiffCCSteeringFakeDeadZoneConfig.mode)
  return _internal_mode();
}
inline void PiffCCSteeringFakeDeadZoneConfig::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  mode_ = value;
}
inline void PiffCCSteeringFakeDeadZoneConfig::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:control.PiffCCSteeringFakeDeadZoneConfig.mode)
}

// -------------------------------------------------------------------

// PiffControllerContentConfig

// required int32 preview_mode = 1;
inline bool PiffControllerContentConfig::_internal_has_preview_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffControllerContentConfig::has_preview_mode() const {
  return _internal_has_preview_mode();
}
inline void PiffControllerContentConfig::clear_preview_mode() {
  preview_mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffControllerContentConfig::_internal_preview_mode() const {
  return preview_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffControllerContentConfig::preview_mode() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.preview_mode)
  return _internal_preview_mode();
}
inline void PiffControllerContentConfig::_internal_set_preview_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  preview_mode_ = value;
}
inline void PiffControllerContentConfig::set_preview_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_preview_mode(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentConfig.preview_mode)
}

// required float preview_time_ms_c01 = 2;
inline bool PiffControllerContentConfig::_internal_has_preview_time_ms_c01() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffControllerContentConfig::has_preview_time_ms_c01() const {
  return _internal_has_preview_time_ms_c01();
}
inline void PiffControllerContentConfig::clear_preview_time_ms_c01() {
  preview_time_ms_c01_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PiffControllerContentConfig::_internal_preview_time_ms_c01() const {
  return preview_time_ms_c01_;
}
inline float PiffControllerContentConfig::preview_time_ms_c01() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.preview_time_ms_c01)
  return _internal_preview_time_ms_c01();
}
inline void PiffControllerContentConfig::_internal_set_preview_time_ms_c01(float value) {
  _has_bits_[0] |= 0x00000008u;
  preview_time_ms_c01_ = value;
}
inline void PiffControllerContentConfig::set_preview_time_ms_c01(float value) {
  _internal_set_preview_time_ms_c01(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentConfig.preview_time_ms_c01)
}

// required float preview_time_ms_c2 = 3;
inline bool PiffControllerContentConfig::_internal_has_preview_time_ms_c2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffControllerContentConfig::has_preview_time_ms_c2() const {
  return _internal_has_preview_time_ms_c2();
}
inline void PiffControllerContentConfig::clear_preview_time_ms_c2() {
  preview_time_ms_c2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PiffControllerContentConfig::_internal_preview_time_ms_c2() const {
  return preview_time_ms_c2_;
}
inline float PiffControllerContentConfig::preview_time_ms_c2() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.preview_time_ms_c2)
  return _internal_preview_time_ms_c2();
}
inline void PiffControllerContentConfig::_internal_set_preview_time_ms_c2(float value) {
  _has_bits_[0] |= 0x00000010u;
  preview_time_ms_c2_ = value;
}
inline void PiffControllerContentConfig::set_preview_time_ms_c2(float value) {
  _internal_set_preview_time_ms_c2(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentConfig.preview_time_ms_c2)
}

// required float curvature_min_start_ff = 4;
inline bool PiffControllerContentConfig::_internal_has_curvature_min_start_ff() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PiffControllerContentConfig::has_curvature_min_start_ff() const {
  return _internal_has_curvature_min_start_ff();
}
inline void PiffControllerContentConfig::clear_curvature_min_start_ff() {
  curvature_min_start_ff_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PiffControllerContentConfig::_internal_curvature_min_start_ff() const {
  return curvature_min_start_ff_;
}
inline float PiffControllerContentConfig::curvature_min_start_ff() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.curvature_min_start_ff)
  return _internal_curvature_min_start_ff();
}
inline void PiffControllerContentConfig::_internal_set_curvature_min_start_ff(float value) {
  _has_bits_[0] |= 0x00000020u;
  curvature_min_start_ff_ = value;
}
inline void PiffControllerContentConfig::set_curvature_min_start_ff(float value) {
  _internal_set_curvature_min_start_ff(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentConfig.curvature_min_start_ff)
}

// repeated .control.PiffControllerContentRateConfig rate_conf = 5;
inline int PiffControllerContentConfig::_internal_rate_conf_size() const {
  return rate_conf_.size();
}
inline int PiffControllerContentConfig::rate_conf_size() const {
  return _internal_rate_conf_size();
}
inline void PiffControllerContentConfig::clear_rate_conf() {
  rate_conf_.Clear();
}
inline ::control::PiffControllerContentRateConfig* PiffControllerContentConfig::mutable_rate_conf(int index) {
  // @@protoc_insertion_point(field_mutable:control.PiffControllerContentConfig.rate_conf)
  return rate_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffControllerContentRateConfig >*
PiffControllerContentConfig::mutable_rate_conf() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffControllerContentConfig.rate_conf)
  return &rate_conf_;
}
inline const ::control::PiffControllerContentRateConfig& PiffControllerContentConfig::_internal_rate_conf(int index) const {
  return rate_conf_.Get(index);
}
inline const ::control::PiffControllerContentRateConfig& PiffControllerContentConfig::rate_conf(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.rate_conf)
  return _internal_rate_conf(index);
}
inline ::control::PiffControllerContentRateConfig* PiffControllerContentConfig::_internal_add_rate_conf() {
  return rate_conf_.Add();
}
inline ::control::PiffControllerContentRateConfig* PiffControllerContentConfig::add_rate_conf() {
  // @@protoc_insertion_point(field_add:control.PiffControllerContentConfig.rate_conf)
  return _internal_add_rate_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffControllerContentRateConfig >&
PiffControllerContentConfig::rate_conf() const {
  // @@protoc_insertion_point(field_list:control.PiffControllerContentConfig.rate_conf)
  return rate_conf_;
}

// required .control.PiffIntegratorConfig integrator_conf = 6;
inline bool PiffControllerContentConfig::_internal_has_integrator_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || integrator_conf_ != nullptr);
  return value;
}
inline bool PiffControllerContentConfig::has_integrator_conf() const {
  return _internal_has_integrator_conf();
}
inline void PiffControllerContentConfig::clear_integrator_conf() {
  if (integrator_conf_ != nullptr) integrator_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PiffIntegratorConfig& PiffControllerContentConfig::_internal_integrator_conf() const {
  const ::control::PiffIntegratorConfig* p = integrator_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffIntegratorConfig*>(
      &::control::_PiffIntegratorConfig_default_instance_);
}
inline const ::control::PiffIntegratorConfig& PiffControllerContentConfig::integrator_conf() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.integrator_conf)
  return _internal_integrator_conf();
}
inline void PiffControllerContentConfig::unsafe_arena_set_allocated_integrator_conf(
    ::control::PiffIntegratorConfig* integrator_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(integrator_conf_);
  }
  integrator_conf_ = integrator_conf;
  if (integrator_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffControllerContentConfig.integrator_conf)
}
inline ::control::PiffIntegratorConfig* PiffControllerContentConfig::release_integrator_conf() {
  auto temp = unsafe_arena_release_integrator_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffIntegratorConfig* PiffControllerContentConfig::unsafe_arena_release_integrator_conf() {
  // @@protoc_insertion_point(field_release:control.PiffControllerContentConfig.integrator_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PiffIntegratorConfig* temp = integrator_conf_;
  integrator_conf_ = nullptr;
  return temp;
}
inline ::control::PiffIntegratorConfig* PiffControllerContentConfig::_internal_mutable_integrator_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (integrator_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffIntegratorConfig>(GetArena());
    integrator_conf_ = p;
  }
  return integrator_conf_;
}
inline ::control::PiffIntegratorConfig* PiffControllerContentConfig::mutable_integrator_conf() {
  // @@protoc_insertion_point(field_mutable:control.PiffControllerContentConfig.integrator_conf)
  return _internal_mutable_integrator_conf();
}
inline void PiffControllerContentConfig::set_allocated_integrator_conf(::control::PiffIntegratorConfig* integrator_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete integrator_conf_;
  }
  if (integrator_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(integrator_conf);
    if (message_arena != submessage_arena) {
      integrator_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integrator_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  integrator_conf_ = integrator_conf;
  // @@protoc_insertion_point(field_set_allocated:control.PiffControllerContentConfig.integrator_conf)
}

// required float steering_bias_deg = 7;
inline bool PiffControllerContentConfig::_internal_has_steering_bias_deg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PiffControllerContentConfig::has_steering_bias_deg() const {
  return _internal_has_steering_bias_deg();
}
inline void PiffControllerContentConfig::clear_steering_bias_deg() {
  steering_bias_deg_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PiffControllerContentConfig::_internal_steering_bias_deg() const {
  return steering_bias_deg_;
}
inline float PiffControllerContentConfig::steering_bias_deg() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.steering_bias_deg)
  return _internal_steering_bias_deg();
}
inline void PiffControllerContentConfig::_internal_set_steering_bias_deg(float value) {
  _has_bits_[0] |= 0x00000040u;
  steering_bias_deg_ = value;
}
inline void PiffControllerContentConfig::set_steering_bias_deg(float value) {
  _internal_set_steering_bias_deg(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentConfig.steering_bias_deg)
}

// required .control.PiffCCSteeringFakeDeadZoneConfig steering_fake_dead_zone_conf = 8;
inline bool PiffControllerContentConfig::_internal_has_steering_fake_dead_zone_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || steering_fake_dead_zone_conf_ != nullptr);
  return value;
}
inline bool PiffControllerContentConfig::has_steering_fake_dead_zone_conf() const {
  return _internal_has_steering_fake_dead_zone_conf();
}
inline void PiffControllerContentConfig::clear_steering_fake_dead_zone_conf() {
  if (steering_fake_dead_zone_conf_ != nullptr) steering_fake_dead_zone_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::PiffCCSteeringFakeDeadZoneConfig& PiffControllerContentConfig::_internal_steering_fake_dead_zone_conf() const {
  const ::control::PiffCCSteeringFakeDeadZoneConfig* p = steering_fake_dead_zone_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffCCSteeringFakeDeadZoneConfig*>(
      &::control::_PiffCCSteeringFakeDeadZoneConfig_default_instance_);
}
inline const ::control::PiffCCSteeringFakeDeadZoneConfig& PiffControllerContentConfig::steering_fake_dead_zone_conf() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.steering_fake_dead_zone_conf)
  return _internal_steering_fake_dead_zone_conf();
}
inline void PiffControllerContentConfig::unsafe_arena_set_allocated_steering_fake_dead_zone_conf(
    ::control::PiffCCSteeringFakeDeadZoneConfig* steering_fake_dead_zone_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steering_fake_dead_zone_conf_);
  }
  steering_fake_dead_zone_conf_ = steering_fake_dead_zone_conf;
  if (steering_fake_dead_zone_conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffControllerContentConfig.steering_fake_dead_zone_conf)
}
inline ::control::PiffCCSteeringFakeDeadZoneConfig* PiffControllerContentConfig::release_steering_fake_dead_zone_conf() {
  auto temp = unsafe_arena_release_steering_fake_dead_zone_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffCCSteeringFakeDeadZoneConfig* PiffControllerContentConfig::unsafe_arena_release_steering_fake_dead_zone_conf() {
  // @@protoc_insertion_point(field_release:control.PiffControllerContentConfig.steering_fake_dead_zone_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::control::PiffCCSteeringFakeDeadZoneConfig* temp = steering_fake_dead_zone_conf_;
  steering_fake_dead_zone_conf_ = nullptr;
  return temp;
}
inline ::control::PiffCCSteeringFakeDeadZoneConfig* PiffControllerContentConfig::_internal_mutable_steering_fake_dead_zone_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (steering_fake_dead_zone_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffCCSteeringFakeDeadZoneConfig>(GetArena());
    steering_fake_dead_zone_conf_ = p;
  }
  return steering_fake_dead_zone_conf_;
}
inline ::control::PiffCCSteeringFakeDeadZoneConfig* PiffControllerContentConfig::mutable_steering_fake_dead_zone_conf() {
  // @@protoc_insertion_point(field_mutable:control.PiffControllerContentConfig.steering_fake_dead_zone_conf)
  return _internal_mutable_steering_fake_dead_zone_conf();
}
inline void PiffControllerContentConfig::set_allocated_steering_fake_dead_zone_conf(::control::PiffCCSteeringFakeDeadZoneConfig* steering_fake_dead_zone_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete steering_fake_dead_zone_conf_;
  }
  if (steering_fake_dead_zone_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(steering_fake_dead_zone_conf);
    if (message_arena != submessage_arena) {
      steering_fake_dead_zone_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_fake_dead_zone_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  steering_fake_dead_zone_conf_ = steering_fake_dead_zone_conf;
  // @@protoc_insertion_point(field_set_allocated:control.PiffControllerContentConfig.steering_fake_dead_zone_conf)
}

// required float curvaturn_transition_ff = 9;
inline bool PiffControllerContentConfig::_internal_has_curvaturn_transition_ff() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PiffControllerContentConfig::has_curvaturn_transition_ff() const {
  return _internal_has_curvaturn_transition_ff();
}
inline void PiffControllerContentConfig::clear_curvaturn_transition_ff() {
  curvaturn_transition_ff_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PiffControllerContentConfig::_internal_curvaturn_transition_ff() const {
  return curvaturn_transition_ff_;
}
inline float PiffControllerContentConfig::curvaturn_transition_ff() const {
  // @@protoc_insertion_point(field_get:control.PiffControllerContentConfig.curvaturn_transition_ff)
  return _internal_curvaturn_transition_ff();
}
inline void PiffControllerContentConfig::_internal_set_curvaturn_transition_ff(float value) {
  _has_bits_[0] |= 0x00000080u;
  curvaturn_transition_ff_ = value;
}
inline void PiffControllerContentConfig::set_curvaturn_transition_ff(float value) {
  _internal_set_curvaturn_transition_ff(value);
  // @@protoc_insertion_point(field_set:control.PiffControllerContentConfig.curvaturn_transition_ff)
}

// -------------------------------------------------------------------

// PiffTrackingDifferentiatorSwitch

// required bool enable_center_line_c2 = 1;
inline bool PiffTrackingDifferentiatorSwitch::_internal_has_enable_center_line_c2() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffTrackingDifferentiatorSwitch::has_enable_center_line_c2() const {
  return _internal_has_enable_center_line_c2();
}
inline void PiffTrackingDifferentiatorSwitch::clear_enable_center_line_c2() {
  enable_center_line_c2_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PiffTrackingDifferentiatorSwitch::_internal_enable_center_line_c2() const {
  return enable_center_line_c2_;
}
inline bool PiffTrackingDifferentiatorSwitch::enable_center_line_c2() const {
  // @@protoc_insertion_point(field_get:control.PiffTrackingDifferentiatorSwitch.enable_center_line_c2)
  return _internal_enable_center_line_c2();
}
inline void PiffTrackingDifferentiatorSwitch::_internal_set_enable_center_line_c2(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_center_line_c2_ = value;
}
inline void PiffTrackingDifferentiatorSwitch::set_enable_center_line_c2(bool value) {
  _internal_set_enable_center_line_c2(value);
  // @@protoc_insertion_point(field_set:control.PiffTrackingDifferentiatorSwitch.enable_center_line_c2)
}

// required bool enable_yaw_rate = 2;
inline bool PiffTrackingDifferentiatorSwitch::_internal_has_enable_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffTrackingDifferentiatorSwitch::has_enable_yaw_rate() const {
  return _internal_has_enable_yaw_rate();
}
inline void PiffTrackingDifferentiatorSwitch::clear_enable_yaw_rate() {
  enable_yaw_rate_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PiffTrackingDifferentiatorSwitch::_internal_enable_yaw_rate() const {
  return enable_yaw_rate_;
}
inline bool PiffTrackingDifferentiatorSwitch::enable_yaw_rate() const {
  // @@protoc_insertion_point(field_get:control.PiffTrackingDifferentiatorSwitch.enable_yaw_rate)
  return _internal_enable_yaw_rate();
}
inline void PiffTrackingDifferentiatorSwitch::_internal_set_enable_yaw_rate(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_yaw_rate_ = value;
}
inline void PiffTrackingDifferentiatorSwitch::set_enable_yaw_rate(bool value) {
  _internal_set_enable_yaw_rate(value);
  // @@protoc_insertion_point(field_set:control.PiffTrackingDifferentiatorSwitch.enable_yaw_rate)
}

// -------------------------------------------------------------------

// PiffTrackingDifferentiatorStateParameters

// required float tracking_rate = 1;
inline bool PiffTrackingDifferentiatorStateParameters::_internal_has_tracking_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffTrackingDifferentiatorStateParameters::has_tracking_rate() const {
  return _internal_has_tracking_rate();
}
inline void PiffTrackingDifferentiatorStateParameters::clear_tracking_rate() {
  tracking_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffTrackingDifferentiatorStateParameters::_internal_tracking_rate() const {
  return tracking_rate_;
}
inline float PiffTrackingDifferentiatorStateParameters::tracking_rate() const {
  // @@protoc_insertion_point(field_get:control.PiffTrackingDifferentiatorStateParameters.tracking_rate)
  return _internal_tracking_rate();
}
inline void PiffTrackingDifferentiatorStateParameters::_internal_set_tracking_rate(float value) {
  _has_bits_[0] |= 0x00000001u;
  tracking_rate_ = value;
}
inline void PiffTrackingDifferentiatorStateParameters::set_tracking_rate(float value) {
  _internal_set_tracking_rate(value);
  // @@protoc_insertion_point(field_set:control.PiffTrackingDifferentiatorStateParameters.tracking_rate)
}

// required int32 smooth_frame = 2;
inline bool PiffTrackingDifferentiatorStateParameters::_internal_has_smooth_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffTrackingDifferentiatorStateParameters::has_smooth_frame() const {
  return _internal_has_smooth_frame();
}
inline void PiffTrackingDifferentiatorStateParameters::clear_smooth_frame() {
  smooth_frame_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffTrackingDifferentiatorStateParameters::_internal_smooth_frame() const {
  return smooth_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffTrackingDifferentiatorStateParameters::smooth_frame() const {
  // @@protoc_insertion_point(field_get:control.PiffTrackingDifferentiatorStateParameters.smooth_frame)
  return _internal_smooth_frame();
}
inline void PiffTrackingDifferentiatorStateParameters::_internal_set_smooth_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  smooth_frame_ = value;
}
inline void PiffTrackingDifferentiatorStateParameters::set_smooth_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_smooth_frame(value);
  // @@protoc_insertion_point(field_set:control.PiffTrackingDifferentiatorStateParameters.smooth_frame)
}

// -------------------------------------------------------------------

// PiffTrackingDifferentiatorConfig

// required .control.PiffTrackingDifferentiatorSwitch td_switch = 1;
inline bool PiffTrackingDifferentiatorConfig::_internal_has_td_switch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || td_switch_ != nullptr);
  return value;
}
inline bool PiffTrackingDifferentiatorConfig::has_td_switch() const {
  return _internal_has_td_switch();
}
inline void PiffTrackingDifferentiatorConfig::clear_td_switch() {
  if (td_switch_ != nullptr) td_switch_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PiffTrackingDifferentiatorSwitch& PiffTrackingDifferentiatorConfig::_internal_td_switch() const {
  const ::control::PiffTrackingDifferentiatorSwitch* p = td_switch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffTrackingDifferentiatorSwitch*>(
      &::control::_PiffTrackingDifferentiatorSwitch_default_instance_);
}
inline const ::control::PiffTrackingDifferentiatorSwitch& PiffTrackingDifferentiatorConfig::td_switch() const {
  // @@protoc_insertion_point(field_get:control.PiffTrackingDifferentiatorConfig.td_switch)
  return _internal_td_switch();
}
inline void PiffTrackingDifferentiatorConfig::unsafe_arena_set_allocated_td_switch(
    ::control::PiffTrackingDifferentiatorSwitch* td_switch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(td_switch_);
  }
  td_switch_ = td_switch;
  if (td_switch) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffTrackingDifferentiatorConfig.td_switch)
}
inline ::control::PiffTrackingDifferentiatorSwitch* PiffTrackingDifferentiatorConfig::release_td_switch() {
  auto temp = unsafe_arena_release_td_switch();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffTrackingDifferentiatorSwitch* PiffTrackingDifferentiatorConfig::unsafe_arena_release_td_switch() {
  // @@protoc_insertion_point(field_release:control.PiffTrackingDifferentiatorConfig.td_switch)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PiffTrackingDifferentiatorSwitch* temp = td_switch_;
  td_switch_ = nullptr;
  return temp;
}
inline ::control::PiffTrackingDifferentiatorSwitch* PiffTrackingDifferentiatorConfig::_internal_mutable_td_switch() {
  _has_bits_[0] |= 0x00000001u;
  if (td_switch_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffTrackingDifferentiatorSwitch>(GetArena());
    td_switch_ = p;
  }
  return td_switch_;
}
inline ::control::PiffTrackingDifferentiatorSwitch* PiffTrackingDifferentiatorConfig::mutable_td_switch() {
  // @@protoc_insertion_point(field_mutable:control.PiffTrackingDifferentiatorConfig.td_switch)
  return _internal_mutable_td_switch();
}
inline void PiffTrackingDifferentiatorConfig::set_allocated_td_switch(::control::PiffTrackingDifferentiatorSwitch* td_switch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete td_switch_;
  }
  if (td_switch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(td_switch);
    if (message_arena != submessage_arena) {
      td_switch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, td_switch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  td_switch_ = td_switch;
  // @@protoc_insertion_point(field_set_allocated:control.PiffTrackingDifferentiatorConfig.td_switch)
}

// required .control.PiffTrackingDifferentiatorStateParameters center_line_c2_paras = 2;
inline bool PiffTrackingDifferentiatorConfig::_internal_has_center_line_c2_paras() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || center_line_c2_paras_ != nullptr);
  return value;
}
inline bool PiffTrackingDifferentiatorConfig::has_center_line_c2_paras() const {
  return _internal_has_center_line_c2_paras();
}
inline void PiffTrackingDifferentiatorConfig::clear_center_line_c2_paras() {
  if (center_line_c2_paras_ != nullptr) center_line_c2_paras_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::PiffTrackingDifferentiatorStateParameters& PiffTrackingDifferentiatorConfig::_internal_center_line_c2_paras() const {
  const ::control::PiffTrackingDifferentiatorStateParameters* p = center_line_c2_paras_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffTrackingDifferentiatorStateParameters*>(
      &::control::_PiffTrackingDifferentiatorStateParameters_default_instance_);
}
inline const ::control::PiffTrackingDifferentiatorStateParameters& PiffTrackingDifferentiatorConfig::center_line_c2_paras() const {
  // @@protoc_insertion_point(field_get:control.PiffTrackingDifferentiatorConfig.center_line_c2_paras)
  return _internal_center_line_c2_paras();
}
inline void PiffTrackingDifferentiatorConfig::unsafe_arena_set_allocated_center_line_c2_paras(
    ::control::PiffTrackingDifferentiatorStateParameters* center_line_c2_paras) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_line_c2_paras_);
  }
  center_line_c2_paras_ = center_line_c2_paras;
  if (center_line_c2_paras) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffTrackingDifferentiatorConfig.center_line_c2_paras)
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::release_center_line_c2_paras() {
  auto temp = unsafe_arena_release_center_line_c2_paras();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::unsafe_arena_release_center_line_c2_paras() {
  // @@protoc_insertion_point(field_release:control.PiffTrackingDifferentiatorConfig.center_line_c2_paras)
  _has_bits_[0] &= ~0x00000002u;
  ::control::PiffTrackingDifferentiatorStateParameters* temp = center_line_c2_paras_;
  center_line_c2_paras_ = nullptr;
  return temp;
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::_internal_mutable_center_line_c2_paras() {
  _has_bits_[0] |= 0x00000002u;
  if (center_line_c2_paras_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffTrackingDifferentiatorStateParameters>(GetArena());
    center_line_c2_paras_ = p;
  }
  return center_line_c2_paras_;
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::mutable_center_line_c2_paras() {
  // @@protoc_insertion_point(field_mutable:control.PiffTrackingDifferentiatorConfig.center_line_c2_paras)
  return _internal_mutable_center_line_c2_paras();
}
inline void PiffTrackingDifferentiatorConfig::set_allocated_center_line_c2_paras(::control::PiffTrackingDifferentiatorStateParameters* center_line_c2_paras) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_line_c2_paras_;
  }
  if (center_line_c2_paras) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center_line_c2_paras);
    if (message_arena != submessage_arena) {
      center_line_c2_paras = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_line_c2_paras, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  center_line_c2_paras_ = center_line_c2_paras;
  // @@protoc_insertion_point(field_set_allocated:control.PiffTrackingDifferentiatorConfig.center_line_c2_paras)
}

// required .control.PiffTrackingDifferentiatorStateParameters yaw_rate_paras = 3;
inline bool PiffTrackingDifferentiatorConfig::_internal_has_yaw_rate_paras() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || yaw_rate_paras_ != nullptr);
  return value;
}
inline bool PiffTrackingDifferentiatorConfig::has_yaw_rate_paras() const {
  return _internal_has_yaw_rate_paras();
}
inline void PiffTrackingDifferentiatorConfig::clear_yaw_rate_paras() {
  if (yaw_rate_paras_ != nullptr) yaw_rate_paras_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::control::PiffTrackingDifferentiatorStateParameters& PiffTrackingDifferentiatorConfig::_internal_yaw_rate_paras() const {
  const ::control::PiffTrackingDifferentiatorStateParameters* p = yaw_rate_paras_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffTrackingDifferentiatorStateParameters*>(
      &::control::_PiffTrackingDifferentiatorStateParameters_default_instance_);
}
inline const ::control::PiffTrackingDifferentiatorStateParameters& PiffTrackingDifferentiatorConfig::yaw_rate_paras() const {
  // @@protoc_insertion_point(field_get:control.PiffTrackingDifferentiatorConfig.yaw_rate_paras)
  return _internal_yaw_rate_paras();
}
inline void PiffTrackingDifferentiatorConfig::unsafe_arena_set_allocated_yaw_rate_paras(
    ::control::PiffTrackingDifferentiatorStateParameters* yaw_rate_paras) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw_rate_paras_);
  }
  yaw_rate_paras_ = yaw_rate_paras;
  if (yaw_rate_paras) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffTrackingDifferentiatorConfig.yaw_rate_paras)
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::release_yaw_rate_paras() {
  auto temp = unsafe_arena_release_yaw_rate_paras();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::unsafe_arena_release_yaw_rate_paras() {
  // @@protoc_insertion_point(field_release:control.PiffTrackingDifferentiatorConfig.yaw_rate_paras)
  _has_bits_[0] &= ~0x00000004u;
  ::control::PiffTrackingDifferentiatorStateParameters* temp = yaw_rate_paras_;
  yaw_rate_paras_ = nullptr;
  return temp;
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::_internal_mutable_yaw_rate_paras() {
  _has_bits_[0] |= 0x00000004u;
  if (yaw_rate_paras_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffTrackingDifferentiatorStateParameters>(GetArena());
    yaw_rate_paras_ = p;
  }
  return yaw_rate_paras_;
}
inline ::control::PiffTrackingDifferentiatorStateParameters* PiffTrackingDifferentiatorConfig::mutable_yaw_rate_paras() {
  // @@protoc_insertion_point(field_mutable:control.PiffTrackingDifferentiatorConfig.yaw_rate_paras)
  return _internal_mutable_yaw_rate_paras();
}
inline void PiffTrackingDifferentiatorConfig::set_allocated_yaw_rate_paras(::control::PiffTrackingDifferentiatorStateParameters* yaw_rate_paras) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete yaw_rate_paras_;
  }
  if (yaw_rate_paras) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(yaw_rate_paras);
    if (message_arena != submessage_arena) {
      yaw_rate_paras = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw_rate_paras, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  yaw_rate_paras_ = yaw_rate_paras;
  // @@protoc_insertion_point(field_set_allocated:control.PiffTrackingDifferentiatorConfig.yaw_rate_paras)
}

// -------------------------------------------------------------------

// PiffDTInputMaxLimitConfig

// required float speed_kph = 1;
inline bool PiffDTInputMaxLimitConfig::_internal_has_speed_kph() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffDTInputMaxLimitConfig::has_speed_kph() const {
  return _internal_has_speed_kph();
}
inline void PiffDTInputMaxLimitConfig::clear_speed_kph() {
  speed_kph_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffDTInputMaxLimitConfig::_internal_speed_kph() const {
  return speed_kph_;
}
inline float PiffDTInputMaxLimitConfig::speed_kph() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputMaxLimitConfig.speed_kph)
  return _internal_speed_kph();
}
inline void PiffDTInputMaxLimitConfig::_internal_set_speed_kph(float value) {
  _has_bits_[0] |= 0x00000001u;
  speed_kph_ = value;
}
inline void PiffDTInputMaxLimitConfig::set_speed_kph(float value) {
  _internal_set_speed_kph(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputMaxLimitConfig.speed_kph)
}

// required float lateral_error = 2;
inline bool PiffDTInputMaxLimitConfig::_internal_has_lateral_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffDTInputMaxLimitConfig::has_lateral_error() const {
  return _internal_has_lateral_error();
}
inline void PiffDTInputMaxLimitConfig::clear_lateral_error() {
  lateral_error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffDTInputMaxLimitConfig::_internal_lateral_error() const {
  return lateral_error_;
}
inline float PiffDTInputMaxLimitConfig::lateral_error() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputMaxLimitConfig.lateral_error)
  return _internal_lateral_error();
}
inline void PiffDTInputMaxLimitConfig::_internal_set_lateral_error(float value) {
  _has_bits_[0] |= 0x00000002u;
  lateral_error_ = value;
}
inline void PiffDTInputMaxLimitConfig::set_lateral_error(float value) {
  _internal_set_lateral_error(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputMaxLimitConfig.lateral_error)
}

// required float heading_error_deg = 3;
inline bool PiffDTInputMaxLimitConfig::_internal_has_heading_error_deg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffDTInputMaxLimitConfig::has_heading_error_deg() const {
  return _internal_has_heading_error_deg();
}
inline void PiffDTInputMaxLimitConfig::clear_heading_error_deg() {
  heading_error_deg_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PiffDTInputMaxLimitConfig::_internal_heading_error_deg() const {
  return heading_error_deg_;
}
inline float PiffDTInputMaxLimitConfig::heading_error_deg() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputMaxLimitConfig.heading_error_deg)
  return _internal_heading_error_deg();
}
inline void PiffDTInputMaxLimitConfig::_internal_set_heading_error_deg(float value) {
  _has_bits_[0] |= 0x00000004u;
  heading_error_deg_ = value;
}
inline void PiffDTInputMaxLimitConfig::set_heading_error_deg(float value) {
  _internal_set_heading_error_deg(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputMaxLimitConfig.heading_error_deg)
}

// -------------------------------------------------------------------

// PiffDTInputFrameLimitConfig

// required float speed_kph = 1;
inline bool PiffDTInputFrameLimitConfig::_internal_has_speed_kph() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_speed_kph() const {
  return _internal_has_speed_kph();
}
inline void PiffDTInputFrameLimitConfig::clear_speed_kph() {
  speed_kph_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffDTInputFrameLimitConfig::_internal_speed_kph() const {
  return speed_kph_;
}
inline float PiffDTInputFrameLimitConfig::speed_kph() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.speed_kph)
  return _internal_speed_kph();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_speed_kph(float value) {
  _has_bits_[0] |= 0x00000001u;
  speed_kph_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_speed_kph(float value) {
  _internal_set_speed_kph(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.speed_kph)
}

// required float c0_jump_max_m = 2;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c0_jump_max_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c0_jump_max_m() const {
  return _internal_has_c0_jump_max_m();
}
inline void PiffDTInputFrameLimitConfig::clear_c0_jump_max_m() {
  c0_jump_max_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c0_jump_max_m() const {
  return c0_jump_max_m_;
}
inline float PiffDTInputFrameLimitConfig::c0_jump_max_m() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c0_jump_max_m)
  return _internal_c0_jump_max_m();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c0_jump_max_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  c0_jump_max_m_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c0_jump_max_m(float value) {
  _internal_set_c0_jump_max_m(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c0_jump_max_m)
}

// required float c0_transit_rate_mps = 3;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c0_transit_rate_mps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c0_transit_rate_mps() const {
  return _internal_has_c0_transit_rate_mps();
}
inline void PiffDTInputFrameLimitConfig::clear_c0_transit_rate_mps() {
  c0_transit_rate_mps_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c0_transit_rate_mps() const {
  return c0_transit_rate_mps_;
}
inline float PiffDTInputFrameLimitConfig::c0_transit_rate_mps() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c0_transit_rate_mps)
  return _internal_c0_transit_rate_mps();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c0_transit_rate_mps(float value) {
  _has_bits_[0] |= 0x00000004u;
  c0_transit_rate_mps_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c0_transit_rate_mps(float value) {
  _internal_set_c0_transit_rate_mps(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c0_transit_rate_mps)
}

// required float c0_track_percentage = 4;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c0_track_percentage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c0_track_percentage() const {
  return _internal_has_c0_track_percentage();
}
inline void PiffDTInputFrameLimitConfig::clear_c0_track_percentage() {
  c0_track_percentage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c0_track_percentage() const {
  return c0_track_percentage_;
}
inline float PiffDTInputFrameLimitConfig::c0_track_percentage() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c0_track_percentage)
  return _internal_c0_track_percentage();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c0_track_percentage(float value) {
  _has_bits_[0] |= 0x00000008u;
  c0_track_percentage_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c0_track_percentage(float value) {
  _internal_set_c0_track_percentage(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c0_track_percentage)
}

// required float c1_jump_max_rad = 5;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c1_jump_max_rad() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c1_jump_max_rad() const {
  return _internal_has_c1_jump_max_rad();
}
inline void PiffDTInputFrameLimitConfig::clear_c1_jump_max_rad() {
  c1_jump_max_rad_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c1_jump_max_rad() const {
  return c1_jump_max_rad_;
}
inline float PiffDTInputFrameLimitConfig::c1_jump_max_rad() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c1_jump_max_rad)
  return _internal_c1_jump_max_rad();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c1_jump_max_rad(float value) {
  _has_bits_[0] |= 0x00000010u;
  c1_jump_max_rad_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c1_jump_max_rad(float value) {
  _internal_set_c1_jump_max_rad(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c1_jump_max_rad)
}

// required float c1_transit_rate_radps = 6;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c1_transit_rate_radps() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c1_transit_rate_radps() const {
  return _internal_has_c1_transit_rate_radps();
}
inline void PiffDTInputFrameLimitConfig::clear_c1_transit_rate_radps() {
  c1_transit_rate_radps_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c1_transit_rate_radps() const {
  return c1_transit_rate_radps_;
}
inline float PiffDTInputFrameLimitConfig::c1_transit_rate_radps() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c1_transit_rate_radps)
  return _internal_c1_transit_rate_radps();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c1_transit_rate_radps(float value) {
  _has_bits_[0] |= 0x00000020u;
  c1_transit_rate_radps_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c1_transit_rate_radps(float value) {
  _internal_set_c1_transit_rate_radps(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c1_transit_rate_radps)
}

// required float c1_track_percentage = 7;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c1_track_percentage() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c1_track_percentage() const {
  return _internal_has_c1_track_percentage();
}
inline void PiffDTInputFrameLimitConfig::clear_c1_track_percentage() {
  c1_track_percentage_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c1_track_percentage() const {
  return c1_track_percentage_;
}
inline float PiffDTInputFrameLimitConfig::c1_track_percentage() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c1_track_percentage)
  return _internal_c1_track_percentage();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c1_track_percentage(float value) {
  _has_bits_[0] |= 0x00000040u;
  c1_track_percentage_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c1_track_percentage(float value) {
  _internal_set_c1_track_percentage(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c1_track_percentage)
}

// required float c2_jump_max = 8;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c2_jump_max() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c2_jump_max() const {
  return _internal_has_c2_jump_max();
}
inline void PiffDTInputFrameLimitConfig::clear_c2_jump_max() {
  c2_jump_max_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c2_jump_max() const {
  return c2_jump_max_;
}
inline float PiffDTInputFrameLimitConfig::c2_jump_max() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c2_jump_max)
  return _internal_c2_jump_max();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c2_jump_max(float value) {
  _has_bits_[0] |= 0x00000080u;
  c2_jump_max_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c2_jump_max(float value) {
  _internal_set_c2_jump_max(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c2_jump_max)
}

// required float c2_transit_rate = 9;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c2_transit_rate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c2_transit_rate() const {
  return _internal_has_c2_transit_rate();
}
inline void PiffDTInputFrameLimitConfig::clear_c2_transit_rate() {
  c2_transit_rate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c2_transit_rate() const {
  return c2_transit_rate_;
}
inline float PiffDTInputFrameLimitConfig::c2_transit_rate() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c2_transit_rate)
  return _internal_c2_transit_rate();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c2_transit_rate(float value) {
  _has_bits_[0] |= 0x00000100u;
  c2_transit_rate_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c2_transit_rate(float value) {
  _internal_set_c2_transit_rate(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c2_transit_rate)
}

// required float c2_track_percentage = 10;
inline bool PiffDTInputFrameLimitConfig::_internal_has_c2_track_percentage() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PiffDTInputFrameLimitConfig::has_c2_track_percentage() const {
  return _internal_has_c2_track_percentage();
}
inline void PiffDTInputFrameLimitConfig::clear_c2_track_percentage() {
  c2_track_percentage_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float PiffDTInputFrameLimitConfig::_internal_c2_track_percentage() const {
  return c2_track_percentage_;
}
inline float PiffDTInputFrameLimitConfig::c2_track_percentage() const {
  // @@protoc_insertion_point(field_get:control.PiffDTInputFrameLimitConfig.c2_track_percentage)
  return _internal_c2_track_percentage();
}
inline void PiffDTInputFrameLimitConfig::_internal_set_c2_track_percentage(float value) {
  _has_bits_[0] |= 0x00000200u;
  c2_track_percentage_ = value;
}
inline void PiffDTInputFrameLimitConfig::set_c2_track_percentage(float value) {
  _internal_set_c2_track_percentage(value);
  // @@protoc_insertion_point(field_set:control.PiffDTInputFrameLimitConfig.c2_track_percentage)
}

// -------------------------------------------------------------------

// PiffDataTransformConfig

// required bool enable_input_max_limit = 1;
inline bool PiffDataTransformConfig::_internal_has_enable_input_max_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffDataTransformConfig::has_enable_input_max_limit() const {
  return _internal_has_enable_input_max_limit();
}
inline void PiffDataTransformConfig::clear_enable_input_max_limit() {
  enable_input_max_limit_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PiffDataTransformConfig::_internal_enable_input_max_limit() const {
  return enable_input_max_limit_;
}
inline bool PiffDataTransformConfig::enable_input_max_limit() const {
  // @@protoc_insertion_point(field_get:control.PiffDataTransformConfig.enable_input_max_limit)
  return _internal_enable_input_max_limit();
}
inline void PiffDataTransformConfig::_internal_set_enable_input_max_limit(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_input_max_limit_ = value;
}
inline void PiffDataTransformConfig::set_enable_input_max_limit(bool value) {
  _internal_set_enable_input_max_limit(value);
  // @@protoc_insertion_point(field_set:control.PiffDataTransformConfig.enable_input_max_limit)
}

// repeated .control.PiffDTInputMaxLimitConfig input_max_limit_conf = 2;
inline int PiffDataTransformConfig::_internal_input_max_limit_conf_size() const {
  return input_max_limit_conf_.size();
}
inline int PiffDataTransformConfig::input_max_limit_conf_size() const {
  return _internal_input_max_limit_conf_size();
}
inline void PiffDataTransformConfig::clear_input_max_limit_conf() {
  input_max_limit_conf_.Clear();
}
inline ::control::PiffDTInputMaxLimitConfig* PiffDataTransformConfig::mutable_input_max_limit_conf(int index) {
  // @@protoc_insertion_point(field_mutable:control.PiffDataTransformConfig.input_max_limit_conf)
  return input_max_limit_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputMaxLimitConfig >*
PiffDataTransformConfig::mutable_input_max_limit_conf() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffDataTransformConfig.input_max_limit_conf)
  return &input_max_limit_conf_;
}
inline const ::control::PiffDTInputMaxLimitConfig& PiffDataTransformConfig::_internal_input_max_limit_conf(int index) const {
  return input_max_limit_conf_.Get(index);
}
inline const ::control::PiffDTInputMaxLimitConfig& PiffDataTransformConfig::input_max_limit_conf(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffDataTransformConfig.input_max_limit_conf)
  return _internal_input_max_limit_conf(index);
}
inline ::control::PiffDTInputMaxLimitConfig* PiffDataTransformConfig::_internal_add_input_max_limit_conf() {
  return input_max_limit_conf_.Add();
}
inline ::control::PiffDTInputMaxLimitConfig* PiffDataTransformConfig::add_input_max_limit_conf() {
  // @@protoc_insertion_point(field_add:control.PiffDataTransformConfig.input_max_limit_conf)
  return _internal_add_input_max_limit_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputMaxLimitConfig >&
PiffDataTransformConfig::input_max_limit_conf() const {
  // @@protoc_insertion_point(field_list:control.PiffDataTransformConfig.input_max_limit_conf)
  return input_max_limit_conf_;
}

// required bool enable_input_frame_limit = 3;
inline bool PiffDataTransformConfig::_internal_has_enable_input_frame_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffDataTransformConfig::has_enable_input_frame_limit() const {
  return _internal_has_enable_input_frame_limit();
}
inline void PiffDataTransformConfig::clear_enable_input_frame_limit() {
  enable_input_frame_limit_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PiffDataTransformConfig::_internal_enable_input_frame_limit() const {
  return enable_input_frame_limit_;
}
inline bool PiffDataTransformConfig::enable_input_frame_limit() const {
  // @@protoc_insertion_point(field_get:control.PiffDataTransformConfig.enable_input_frame_limit)
  return _internal_enable_input_frame_limit();
}
inline void PiffDataTransformConfig::_internal_set_enable_input_frame_limit(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_input_frame_limit_ = value;
}
inline void PiffDataTransformConfig::set_enable_input_frame_limit(bool value) {
  _internal_set_enable_input_frame_limit(value);
  // @@protoc_insertion_point(field_set:control.PiffDataTransformConfig.enable_input_frame_limit)
}

// repeated .control.PiffDTInputFrameLimitConfig input_frame_limit_conf = 4;
inline int PiffDataTransformConfig::_internal_input_frame_limit_conf_size() const {
  return input_frame_limit_conf_.size();
}
inline int PiffDataTransformConfig::input_frame_limit_conf_size() const {
  return _internal_input_frame_limit_conf_size();
}
inline void PiffDataTransformConfig::clear_input_frame_limit_conf() {
  input_frame_limit_conf_.Clear();
}
inline ::control::PiffDTInputFrameLimitConfig* PiffDataTransformConfig::mutable_input_frame_limit_conf(int index) {
  // @@protoc_insertion_point(field_mutable:control.PiffDataTransformConfig.input_frame_limit_conf)
  return input_frame_limit_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputFrameLimitConfig >*
PiffDataTransformConfig::mutable_input_frame_limit_conf() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffDataTransformConfig.input_frame_limit_conf)
  return &input_frame_limit_conf_;
}
inline const ::control::PiffDTInputFrameLimitConfig& PiffDataTransformConfig::_internal_input_frame_limit_conf(int index) const {
  return input_frame_limit_conf_.Get(index);
}
inline const ::control::PiffDTInputFrameLimitConfig& PiffDataTransformConfig::input_frame_limit_conf(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffDataTransformConfig.input_frame_limit_conf)
  return _internal_input_frame_limit_conf(index);
}
inline ::control::PiffDTInputFrameLimitConfig* PiffDataTransformConfig::_internal_add_input_frame_limit_conf() {
  return input_frame_limit_conf_.Add();
}
inline ::control::PiffDTInputFrameLimitConfig* PiffDataTransformConfig::add_input_frame_limit_conf() {
  // @@protoc_insertion_point(field_add:control.PiffDataTransformConfig.input_frame_limit_conf)
  return _internal_add_input_frame_limit_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffDTInputFrameLimitConfig >&
PiffDataTransformConfig::input_frame_limit_conf() const {
  // @@protoc_insertion_point(field_list:control.PiffDataTransformConfig.input_frame_limit_conf)
  return input_frame_limit_conf_;
}

// required int32 frame_ramp_mode = 5;
inline bool PiffDataTransformConfig::_internal_has_frame_ramp_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffDataTransformConfig::has_frame_ramp_mode() const {
  return _internal_has_frame_ramp_mode();
}
inline void PiffDataTransformConfig::clear_frame_ramp_mode() {
  frame_ramp_mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffDataTransformConfig::_internal_frame_ramp_mode() const {
  return frame_ramp_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffDataTransformConfig::frame_ramp_mode() const {
  // @@protoc_insertion_point(field_get:control.PiffDataTransformConfig.frame_ramp_mode)
  return _internal_frame_ramp_mode();
}
inline void PiffDataTransformConfig::_internal_set_frame_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  frame_ramp_mode_ = value;
}
inline void PiffDataTransformConfig::set_frame_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_ramp_mode(value);
  // @@protoc_insertion_point(field_set:control.PiffDataTransformConfig.frame_ramp_mode)
}

// -------------------------------------------------------------------

// PiffPPSteeringAngleLimit

// required float speed_kph = 1;
inline bool PiffPPSteeringAngleLimit::_internal_has_speed_kph() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffPPSteeringAngleLimit::has_speed_kph() const {
  return _internal_has_speed_kph();
}
inline void PiffPPSteeringAngleLimit::clear_speed_kph() {
  speed_kph_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffPPSteeringAngleLimit::_internal_speed_kph() const {
  return speed_kph_;
}
inline float PiffPPSteeringAngleLimit::speed_kph() const {
  // @@protoc_insertion_point(field_get:control.PiffPPSteeringAngleLimit.speed_kph)
  return _internal_speed_kph();
}
inline void PiffPPSteeringAngleLimit::_internal_set_speed_kph(float value) {
  _has_bits_[0] |= 0x00000001u;
  speed_kph_ = value;
}
inline void PiffPPSteeringAngleLimit::set_speed_kph(float value) {
  _internal_set_speed_kph(value);
  // @@protoc_insertion_point(field_set:control.PiffPPSteeringAngleLimit.speed_kph)
}

// required float steering_range_deg = 2;
inline bool PiffPPSteeringAngleLimit::_internal_has_steering_range_deg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffPPSteeringAngleLimit::has_steering_range_deg() const {
  return _internal_has_steering_range_deg();
}
inline void PiffPPSteeringAngleLimit::clear_steering_range_deg() {
  steering_range_deg_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffPPSteeringAngleLimit::_internal_steering_range_deg() const {
  return steering_range_deg_;
}
inline float PiffPPSteeringAngleLimit::steering_range_deg() const {
  // @@protoc_insertion_point(field_get:control.PiffPPSteeringAngleLimit.steering_range_deg)
  return _internal_steering_range_deg();
}
inline void PiffPPSteeringAngleLimit::_internal_set_steering_range_deg(float value) {
  _has_bits_[0] |= 0x00000002u;
  steering_range_deg_ = value;
}
inline void PiffPPSteeringAngleLimit::set_steering_range_deg(float value) {
  _internal_set_steering_range_deg(value);
  // @@protoc_insertion_point(field_set:control.PiffPPSteeringAngleLimit.steering_range_deg)
}

// required float steering_rate_range_degps = 3;
inline bool PiffPPSteeringAngleLimit::_internal_has_steering_rate_range_degps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffPPSteeringAngleLimit::has_steering_rate_range_degps() const {
  return _internal_has_steering_rate_range_degps();
}
inline void PiffPPSteeringAngleLimit::clear_steering_rate_range_degps() {
  steering_rate_range_degps_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PiffPPSteeringAngleLimit::_internal_steering_rate_range_degps() const {
  return steering_rate_range_degps_;
}
inline float PiffPPSteeringAngleLimit::steering_rate_range_degps() const {
  // @@protoc_insertion_point(field_get:control.PiffPPSteeringAngleLimit.steering_rate_range_degps)
  return _internal_steering_rate_range_degps();
}
inline void PiffPPSteeringAngleLimit::_internal_set_steering_rate_range_degps(float value) {
  _has_bits_[0] |= 0x00000004u;
  steering_rate_range_degps_ = value;
}
inline void PiffPPSteeringAngleLimit::set_steering_rate_range_degps(float value) {
  _internal_set_steering_rate_range_degps(value);
  // @@protoc_insertion_point(field_set:control.PiffPPSteeringAngleLimit.steering_rate_range_degps)
}

// -------------------------------------------------------------------

// PiffPPActivateControlContentConfig

// required float speed_kph = 1;
inline bool PiffPPActivateControlContentConfig::_internal_has_speed_kph() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffPPActivateControlContentConfig::has_speed_kph() const {
  return _internal_has_speed_kph();
}
inline void PiffPPActivateControlContentConfig::clear_speed_kph() {
  speed_kph_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffPPActivateControlContentConfig::_internal_speed_kph() const {
  return speed_kph_;
}
inline float PiffPPActivateControlContentConfig::speed_kph() const {
  // @@protoc_insertion_point(field_get:control.PiffPPActivateControlContentConfig.speed_kph)
  return _internal_speed_kph();
}
inline void PiffPPActivateControlContentConfig::_internal_set_speed_kph(float value) {
  _has_bits_[0] |= 0x00000001u;
  speed_kph_ = value;
}
inline void PiffPPActivateControlContentConfig::set_speed_kph(float value) {
  _internal_set_speed_kph(value);
  // @@protoc_insertion_point(field_set:control.PiffPPActivateControlContentConfig.speed_kph)
}

// required float steering_rate_degps = 2;
inline bool PiffPPActivateControlContentConfig::_internal_has_steering_rate_degps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffPPActivateControlContentConfig::has_steering_rate_degps() const {
  return _internal_has_steering_rate_degps();
}
inline void PiffPPActivateControlContentConfig::clear_steering_rate_degps() {
  steering_rate_degps_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffPPActivateControlContentConfig::_internal_steering_rate_degps() const {
  return steering_rate_degps_;
}
inline float PiffPPActivateControlContentConfig::steering_rate_degps() const {
  // @@protoc_insertion_point(field_get:control.PiffPPActivateControlContentConfig.steering_rate_degps)
  return _internal_steering_rate_degps();
}
inline void PiffPPActivateControlContentConfig::_internal_set_steering_rate_degps(float value) {
  _has_bits_[0] |= 0x00000002u;
  steering_rate_degps_ = value;
}
inline void PiffPPActivateControlContentConfig::set_steering_rate_degps(float value) {
  _internal_set_steering_rate_degps(value);
  // @@protoc_insertion_point(field_set:control.PiffPPActivateControlContentConfig.steering_rate_degps)
}

// required float steering_dead_zone_deg = 3;
inline bool PiffPPActivateControlContentConfig::_internal_has_steering_dead_zone_deg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffPPActivateControlContentConfig::has_steering_dead_zone_deg() const {
  return _internal_has_steering_dead_zone_deg();
}
inline void PiffPPActivateControlContentConfig::clear_steering_dead_zone_deg() {
  steering_dead_zone_deg_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PiffPPActivateControlContentConfig::_internal_steering_dead_zone_deg() const {
  return steering_dead_zone_deg_;
}
inline float PiffPPActivateControlContentConfig::steering_dead_zone_deg() const {
  // @@protoc_insertion_point(field_get:control.PiffPPActivateControlContentConfig.steering_dead_zone_deg)
  return _internal_steering_dead_zone_deg();
}
inline void PiffPPActivateControlContentConfig::_internal_set_steering_dead_zone_deg(float value) {
  _has_bits_[0] |= 0x00000004u;
  steering_dead_zone_deg_ = value;
}
inline void PiffPPActivateControlContentConfig::set_steering_dead_zone_deg(float value) {
  _internal_set_steering_dead_zone_deg(value);
  // @@protoc_insertion_point(field_set:control.PiffPPActivateControlContentConfig.steering_dead_zone_deg)
}

// required float steering_frame_track_percentage = 4;
inline bool PiffPPActivateControlContentConfig::_internal_has_steering_frame_track_percentage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffPPActivateControlContentConfig::has_steering_frame_track_percentage() const {
  return _internal_has_steering_frame_track_percentage();
}
inline void PiffPPActivateControlContentConfig::clear_steering_frame_track_percentage() {
  steering_frame_track_percentage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PiffPPActivateControlContentConfig::_internal_steering_frame_track_percentage() const {
  return steering_frame_track_percentage_;
}
inline float PiffPPActivateControlContentConfig::steering_frame_track_percentage() const {
  // @@protoc_insertion_point(field_get:control.PiffPPActivateControlContentConfig.steering_frame_track_percentage)
  return _internal_steering_frame_track_percentage();
}
inline void PiffPPActivateControlContentConfig::_internal_set_steering_frame_track_percentage(float value) {
  _has_bits_[0] |= 0x00000008u;
  steering_frame_track_percentage_ = value;
}
inline void PiffPPActivateControlContentConfig::set_steering_frame_track_percentage(float value) {
  _internal_set_steering_frame_track_percentage(value);
  // @@protoc_insertion_point(field_set:control.PiffPPActivateControlContentConfig.steering_frame_track_percentage)
}

// -------------------------------------------------------------------

// PiffPPDectivateControlContentConfig

// required float speed_kph = 1;
inline bool PiffPPDectivateControlContentConfig::_internal_has_speed_kph() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffPPDectivateControlContentConfig::has_speed_kph() const {
  return _internal_has_speed_kph();
}
inline void PiffPPDectivateControlContentConfig::clear_speed_kph() {
  speed_kph_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffPPDectivateControlContentConfig::_internal_speed_kph() const {
  return speed_kph_;
}
inline float PiffPPDectivateControlContentConfig::speed_kph() const {
  // @@protoc_insertion_point(field_get:control.PiffPPDectivateControlContentConfig.speed_kph)
  return _internal_speed_kph();
}
inline void PiffPPDectivateControlContentConfig::_internal_set_speed_kph(float value) {
  _has_bits_[0] |= 0x00000001u;
  speed_kph_ = value;
}
inline void PiffPPDectivateControlContentConfig::set_speed_kph(float value) {
  _internal_set_speed_kph(value);
  // @@protoc_insertion_point(field_set:control.PiffPPDectivateControlContentConfig.speed_kph)
}

// required float steering_rate_degps = 2;
inline bool PiffPPDectivateControlContentConfig::_internal_has_steering_rate_degps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffPPDectivateControlContentConfig::has_steering_rate_degps() const {
  return _internal_has_steering_rate_degps();
}
inline void PiffPPDectivateControlContentConfig::clear_steering_rate_degps() {
  steering_rate_degps_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffPPDectivateControlContentConfig::_internal_steering_rate_degps() const {
  return steering_rate_degps_;
}
inline float PiffPPDectivateControlContentConfig::steering_rate_degps() const {
  // @@protoc_insertion_point(field_get:control.PiffPPDectivateControlContentConfig.steering_rate_degps)
  return _internal_steering_rate_degps();
}
inline void PiffPPDectivateControlContentConfig::_internal_set_steering_rate_degps(float value) {
  _has_bits_[0] |= 0x00000002u;
  steering_rate_degps_ = value;
}
inline void PiffPPDectivateControlContentConfig::set_steering_rate_degps(float value) {
  _internal_set_steering_rate_degps(value);
  // @@protoc_insertion_point(field_set:control.PiffPPDectivateControlContentConfig.steering_rate_degps)
}

// required float steering_frame_track_percentage = 3;
inline bool PiffPPDectivateControlContentConfig::_internal_has_steering_frame_track_percentage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffPPDectivateControlContentConfig::has_steering_frame_track_percentage() const {
  return _internal_has_steering_frame_track_percentage();
}
inline void PiffPPDectivateControlContentConfig::clear_steering_frame_track_percentage() {
  steering_frame_track_percentage_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PiffPPDectivateControlContentConfig::_internal_steering_frame_track_percentage() const {
  return steering_frame_track_percentage_;
}
inline float PiffPPDectivateControlContentConfig::steering_frame_track_percentage() const {
  // @@protoc_insertion_point(field_get:control.PiffPPDectivateControlContentConfig.steering_frame_track_percentage)
  return _internal_steering_frame_track_percentage();
}
inline void PiffPPDectivateControlContentConfig::_internal_set_steering_frame_track_percentage(float value) {
  _has_bits_[0] |= 0x00000004u;
  steering_frame_track_percentage_ = value;
}
inline void PiffPPDectivateControlContentConfig::set_steering_frame_track_percentage(float value) {
  _internal_set_steering_frame_track_percentage(value);
  // @@protoc_insertion_point(field_set:control.PiffPPDectivateControlContentConfig.steering_frame_track_percentage)
}

// -------------------------------------------------------------------

// PiffPPActivateControlConfig

// required bool enable_post_activate_control = 1;
inline bool PiffPPActivateControlConfig::_internal_has_enable_post_activate_control() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffPPActivateControlConfig::has_enable_post_activate_control() const {
  return _internal_has_enable_post_activate_control();
}
inline void PiffPPActivateControlConfig::clear_enable_post_activate_control() {
  enable_post_activate_control_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PiffPPActivateControlConfig::_internal_enable_post_activate_control() const {
  return enable_post_activate_control_;
}
inline bool PiffPPActivateControlConfig::enable_post_activate_control() const {
  // @@protoc_insertion_point(field_get:control.PiffPPActivateControlConfig.enable_post_activate_control)
  return _internal_enable_post_activate_control();
}
inline void PiffPPActivateControlConfig::_internal_set_enable_post_activate_control(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_post_activate_control_ = value;
}
inline void PiffPPActivateControlConfig::set_enable_post_activate_control(bool value) {
  _internal_set_enable_post_activate_control(value);
  // @@protoc_insertion_point(field_set:control.PiffPPActivateControlConfig.enable_post_activate_control)
}

// repeated .control.PiffPPActivateControlContentConfig activate_conf = 2;
inline int PiffPPActivateControlConfig::_internal_activate_conf_size() const {
  return activate_conf_.size();
}
inline int PiffPPActivateControlConfig::activate_conf_size() const {
  return _internal_activate_conf_size();
}
inline void PiffPPActivateControlConfig::clear_activate_conf() {
  activate_conf_.Clear();
}
inline ::control::PiffPPActivateControlContentConfig* PiffPPActivateControlConfig::mutable_activate_conf(int index) {
  // @@protoc_insertion_point(field_mutable:control.PiffPPActivateControlConfig.activate_conf)
  return activate_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPActivateControlContentConfig >*
PiffPPActivateControlConfig::mutable_activate_conf() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffPPActivateControlConfig.activate_conf)
  return &activate_conf_;
}
inline const ::control::PiffPPActivateControlContentConfig& PiffPPActivateControlConfig::_internal_activate_conf(int index) const {
  return activate_conf_.Get(index);
}
inline const ::control::PiffPPActivateControlContentConfig& PiffPPActivateControlConfig::activate_conf(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffPPActivateControlConfig.activate_conf)
  return _internal_activate_conf(index);
}
inline ::control::PiffPPActivateControlContentConfig* PiffPPActivateControlConfig::_internal_add_activate_conf() {
  return activate_conf_.Add();
}
inline ::control::PiffPPActivateControlContentConfig* PiffPPActivateControlConfig::add_activate_conf() {
  // @@protoc_insertion_point(field_add:control.PiffPPActivateControlConfig.activate_conf)
  return _internal_add_activate_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPActivateControlContentConfig >&
PiffPPActivateControlConfig::activate_conf() const {
  // @@protoc_insertion_point(field_list:control.PiffPPActivateControlConfig.activate_conf)
  return activate_conf_;
}

// required int32 ramp_mode = 3;
inline bool PiffPPActivateControlConfig::_internal_has_ramp_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffPPActivateControlConfig::has_ramp_mode() const {
  return _internal_has_ramp_mode();
}
inline void PiffPPActivateControlConfig::clear_ramp_mode() {
  ramp_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffPPActivateControlConfig::_internal_ramp_mode() const {
  return ramp_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffPPActivateControlConfig::ramp_mode() const {
  // @@protoc_insertion_point(field_get:control.PiffPPActivateControlConfig.ramp_mode)
  return _internal_ramp_mode();
}
inline void PiffPPActivateControlConfig::_internal_set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ramp_mode_ = value;
}
inline void PiffPPActivateControlConfig::set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ramp_mode(value);
  // @@protoc_insertion_point(field_set:control.PiffPPActivateControlConfig.ramp_mode)
}

// -------------------------------------------------------------------

// PiffPPDeactivateControlConfig

// required bool enable_post_deactivate_control = 1;
inline bool PiffPPDeactivateControlConfig::_internal_has_enable_post_deactivate_control() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffPPDeactivateControlConfig::has_enable_post_deactivate_control() const {
  return _internal_has_enable_post_deactivate_control();
}
inline void PiffPPDeactivateControlConfig::clear_enable_post_deactivate_control() {
  enable_post_deactivate_control_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PiffPPDeactivateControlConfig::_internal_enable_post_deactivate_control() const {
  return enable_post_deactivate_control_;
}
inline bool PiffPPDeactivateControlConfig::enable_post_deactivate_control() const {
  // @@protoc_insertion_point(field_get:control.PiffPPDeactivateControlConfig.enable_post_deactivate_control)
  return _internal_enable_post_deactivate_control();
}
inline void PiffPPDeactivateControlConfig::_internal_set_enable_post_deactivate_control(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_post_deactivate_control_ = value;
}
inline void PiffPPDeactivateControlConfig::set_enable_post_deactivate_control(bool value) {
  _internal_set_enable_post_deactivate_control(value);
  // @@protoc_insertion_point(field_set:control.PiffPPDeactivateControlConfig.enable_post_deactivate_control)
}

// repeated .control.PiffPPDectivateControlContentConfig deactivate_conf = 2;
inline int PiffPPDeactivateControlConfig::_internal_deactivate_conf_size() const {
  return deactivate_conf_.size();
}
inline int PiffPPDeactivateControlConfig::deactivate_conf_size() const {
  return _internal_deactivate_conf_size();
}
inline void PiffPPDeactivateControlConfig::clear_deactivate_conf() {
  deactivate_conf_.Clear();
}
inline ::control::PiffPPDectivateControlContentConfig* PiffPPDeactivateControlConfig::mutable_deactivate_conf(int index) {
  // @@protoc_insertion_point(field_mutable:control.PiffPPDeactivateControlConfig.deactivate_conf)
  return deactivate_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPDectivateControlContentConfig >*
PiffPPDeactivateControlConfig::mutable_deactivate_conf() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffPPDeactivateControlConfig.deactivate_conf)
  return &deactivate_conf_;
}
inline const ::control::PiffPPDectivateControlContentConfig& PiffPPDeactivateControlConfig::_internal_deactivate_conf(int index) const {
  return deactivate_conf_.Get(index);
}
inline const ::control::PiffPPDectivateControlContentConfig& PiffPPDeactivateControlConfig::deactivate_conf(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffPPDeactivateControlConfig.deactivate_conf)
  return _internal_deactivate_conf(index);
}
inline ::control::PiffPPDectivateControlContentConfig* PiffPPDeactivateControlConfig::_internal_add_deactivate_conf() {
  return deactivate_conf_.Add();
}
inline ::control::PiffPPDectivateControlContentConfig* PiffPPDeactivateControlConfig::add_deactivate_conf() {
  // @@protoc_insertion_point(field_add:control.PiffPPDeactivateControlConfig.deactivate_conf)
  return _internal_add_deactivate_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPDectivateControlContentConfig >&
PiffPPDeactivateControlConfig::deactivate_conf() const {
  // @@protoc_insertion_point(field_list:control.PiffPPDeactivateControlConfig.deactivate_conf)
  return deactivate_conf_;
}

// required int32 ramp_mode = 3;
inline bool PiffPPDeactivateControlConfig::_internal_has_ramp_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffPPDeactivateControlConfig::has_ramp_mode() const {
  return _internal_has_ramp_mode();
}
inline void PiffPPDeactivateControlConfig::clear_ramp_mode() {
  ramp_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffPPDeactivateControlConfig::_internal_ramp_mode() const {
  return ramp_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PiffPPDeactivateControlConfig::ramp_mode() const {
  // @@protoc_insertion_point(field_get:control.PiffPPDeactivateControlConfig.ramp_mode)
  return _internal_ramp_mode();
}
inline void PiffPPDeactivateControlConfig::_internal_set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ramp_mode_ = value;
}
inline void PiffPPDeactivateControlConfig::set_ramp_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ramp_mode(value);
  // @@protoc_insertion_point(field_set:control.PiffPPDeactivateControlConfig.ramp_mode)
}

// -------------------------------------------------------------------

// PiffPostProcessConfig

// required bool enable_steering_limit = 1;
inline bool PiffPostProcessConfig::_internal_has_enable_steering_limit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffPostProcessConfig::has_enable_steering_limit() const {
  return _internal_has_enable_steering_limit();
}
inline void PiffPostProcessConfig::clear_enable_steering_limit() {
  enable_steering_limit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PiffPostProcessConfig::_internal_enable_steering_limit() const {
  return enable_steering_limit_;
}
inline bool PiffPostProcessConfig::enable_steering_limit() const {
  // @@protoc_insertion_point(field_get:control.PiffPostProcessConfig.enable_steering_limit)
  return _internal_enable_steering_limit();
}
inline void PiffPostProcessConfig::_internal_set_enable_steering_limit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_steering_limit_ = value;
}
inline void PiffPostProcessConfig::set_enable_steering_limit(bool value) {
  _internal_set_enable_steering_limit(value);
  // @@protoc_insertion_point(field_set:control.PiffPostProcessConfig.enable_steering_limit)
}

// required float steering_range_factor = 2;
inline bool PiffPostProcessConfig::_internal_has_steering_range_factor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiffPostProcessConfig::has_steering_range_factor() const {
  return _internal_has_steering_range_factor();
}
inline void PiffPostProcessConfig::clear_steering_range_factor() {
  steering_range_factor_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PiffPostProcessConfig::_internal_steering_range_factor() const {
  return steering_range_factor_;
}
inline float PiffPostProcessConfig::steering_range_factor() const {
  // @@protoc_insertion_point(field_get:control.PiffPostProcessConfig.steering_range_factor)
  return _internal_steering_range_factor();
}
inline void PiffPostProcessConfig::_internal_set_steering_range_factor(float value) {
  _has_bits_[0] |= 0x00000008u;
  steering_range_factor_ = value;
}
inline void PiffPostProcessConfig::set_steering_range_factor(float value) {
  _internal_set_steering_range_factor(value);
  // @@protoc_insertion_point(field_set:control.PiffPostProcessConfig.steering_range_factor)
}

// required float steering_rate_range_factor = 3;
inline bool PiffPostProcessConfig::_internal_has_steering_rate_range_factor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiffPostProcessConfig::has_steering_rate_range_factor() const {
  return _internal_has_steering_rate_range_factor();
}
inline void PiffPostProcessConfig::clear_steering_rate_range_factor() {
  steering_rate_range_factor_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PiffPostProcessConfig::_internal_steering_rate_range_factor() const {
  return steering_rate_range_factor_;
}
inline float PiffPostProcessConfig::steering_rate_range_factor() const {
  // @@protoc_insertion_point(field_get:control.PiffPostProcessConfig.steering_rate_range_factor)
  return _internal_steering_rate_range_factor();
}
inline void PiffPostProcessConfig::_internal_set_steering_rate_range_factor(float value) {
  _has_bits_[0] |= 0x00000010u;
  steering_rate_range_factor_ = value;
}
inline void PiffPostProcessConfig::set_steering_rate_range_factor(float value) {
  _internal_set_steering_rate_range_factor(value);
  // @@protoc_insertion_point(field_set:control.PiffPostProcessConfig.steering_rate_range_factor)
}

// repeated .control.PiffPPSteeringAngleLimit steering_angle_limit = 4;
inline int PiffPostProcessConfig::_internal_steering_angle_limit_size() const {
  return steering_angle_limit_.size();
}
inline int PiffPostProcessConfig::steering_angle_limit_size() const {
  return _internal_steering_angle_limit_size();
}
inline void PiffPostProcessConfig::clear_steering_angle_limit() {
  steering_angle_limit_.Clear();
}
inline ::control::PiffPPSteeringAngleLimit* PiffPostProcessConfig::mutable_steering_angle_limit(int index) {
  // @@protoc_insertion_point(field_mutable:control.PiffPostProcessConfig.steering_angle_limit)
  return steering_angle_limit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPSteeringAngleLimit >*
PiffPostProcessConfig::mutable_steering_angle_limit() {
  // @@protoc_insertion_point(field_mutable_list:control.PiffPostProcessConfig.steering_angle_limit)
  return &steering_angle_limit_;
}
inline const ::control::PiffPPSteeringAngleLimit& PiffPostProcessConfig::_internal_steering_angle_limit(int index) const {
  return steering_angle_limit_.Get(index);
}
inline const ::control::PiffPPSteeringAngleLimit& PiffPostProcessConfig::steering_angle_limit(int index) const {
  // @@protoc_insertion_point(field_get:control.PiffPostProcessConfig.steering_angle_limit)
  return _internal_steering_angle_limit(index);
}
inline ::control::PiffPPSteeringAngleLimit* PiffPostProcessConfig::_internal_add_steering_angle_limit() {
  return steering_angle_limit_.Add();
}
inline ::control::PiffPPSteeringAngleLimit* PiffPostProcessConfig::add_steering_angle_limit() {
  // @@protoc_insertion_point(field_add:control.PiffPostProcessConfig.steering_angle_limit)
  return _internal_add_steering_angle_limit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffPPSteeringAngleLimit >&
PiffPostProcessConfig::steering_angle_limit() const {
  // @@protoc_insertion_point(field_list:control.PiffPostProcessConfig.steering_angle_limit)
  return steering_angle_limit_;
}

// required .control.PiffPPActivateControlConfig post_activate_control_conf = 5;
inline bool PiffPostProcessConfig::_internal_has_post_activate_control_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || post_activate_control_conf_ != nullptr);
  return value;
}
inline bool PiffPostProcessConfig::has_post_activate_control_conf() const {
  return _internal_has_post_activate_control_conf();
}
inline void PiffPostProcessConfig::clear_post_activate_control_conf() {
  if (post_activate_control_conf_ != nullptr) post_activate_control_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PiffPPActivateControlConfig& PiffPostProcessConfig::_internal_post_activate_control_conf() const {
  const ::control::PiffPPActivateControlConfig* p = post_activate_control_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffPPActivateControlConfig*>(
      &::control::_PiffPPActivateControlConfig_default_instance_);
}
inline const ::control::PiffPPActivateControlConfig& PiffPostProcessConfig::post_activate_control_conf() const {
  // @@protoc_insertion_point(field_get:control.PiffPostProcessConfig.post_activate_control_conf)
  return _internal_post_activate_control_conf();
}
inline void PiffPostProcessConfig::unsafe_arena_set_allocated_post_activate_control_conf(
    ::control::PiffPPActivateControlConfig* post_activate_control_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_activate_control_conf_);
  }
  post_activate_control_conf_ = post_activate_control_conf;
  if (post_activate_control_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffPostProcessConfig.post_activate_control_conf)
}
inline ::control::PiffPPActivateControlConfig* PiffPostProcessConfig::release_post_activate_control_conf() {
  auto temp = unsafe_arena_release_post_activate_control_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffPPActivateControlConfig* PiffPostProcessConfig::unsafe_arena_release_post_activate_control_conf() {
  // @@protoc_insertion_point(field_release:control.PiffPostProcessConfig.post_activate_control_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PiffPPActivateControlConfig* temp = post_activate_control_conf_;
  post_activate_control_conf_ = nullptr;
  return temp;
}
inline ::control::PiffPPActivateControlConfig* PiffPostProcessConfig::_internal_mutable_post_activate_control_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (post_activate_control_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffPPActivateControlConfig>(GetArena());
    post_activate_control_conf_ = p;
  }
  return post_activate_control_conf_;
}
inline ::control::PiffPPActivateControlConfig* PiffPostProcessConfig::mutable_post_activate_control_conf() {
  // @@protoc_insertion_point(field_mutable:control.PiffPostProcessConfig.post_activate_control_conf)
  return _internal_mutable_post_activate_control_conf();
}
inline void PiffPostProcessConfig::set_allocated_post_activate_control_conf(::control::PiffPPActivateControlConfig* post_activate_control_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete post_activate_control_conf_;
  }
  if (post_activate_control_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(post_activate_control_conf);
    if (message_arena != submessage_arena) {
      post_activate_control_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_activate_control_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  post_activate_control_conf_ = post_activate_control_conf;
  // @@protoc_insertion_point(field_set_allocated:control.PiffPostProcessConfig.post_activate_control_conf)
}

// required .control.PiffPPDeactivateControlConfig post_deactivate_control_conf = 6;
inline bool PiffPostProcessConfig::_internal_has_post_deactivate_control_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || post_deactivate_control_conf_ != nullptr);
  return value;
}
inline bool PiffPostProcessConfig::has_post_deactivate_control_conf() const {
  return _internal_has_post_deactivate_control_conf();
}
inline void PiffPostProcessConfig::clear_post_deactivate_control_conf() {
  if (post_deactivate_control_conf_ != nullptr) post_deactivate_control_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::PiffPPDeactivateControlConfig& PiffPostProcessConfig::_internal_post_deactivate_control_conf() const {
  const ::control::PiffPPDeactivateControlConfig* p = post_deactivate_control_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffPPDeactivateControlConfig*>(
      &::control::_PiffPPDeactivateControlConfig_default_instance_);
}
inline const ::control::PiffPPDeactivateControlConfig& PiffPostProcessConfig::post_deactivate_control_conf() const {
  // @@protoc_insertion_point(field_get:control.PiffPostProcessConfig.post_deactivate_control_conf)
  return _internal_post_deactivate_control_conf();
}
inline void PiffPostProcessConfig::unsafe_arena_set_allocated_post_deactivate_control_conf(
    ::control::PiffPPDeactivateControlConfig* post_deactivate_control_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_deactivate_control_conf_);
  }
  post_deactivate_control_conf_ = post_deactivate_control_conf;
  if (post_deactivate_control_conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.PiffPostProcessConfig.post_deactivate_control_conf)
}
inline ::control::PiffPPDeactivateControlConfig* PiffPostProcessConfig::release_post_deactivate_control_conf() {
  auto temp = unsafe_arena_release_post_deactivate_control_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffPPDeactivateControlConfig* PiffPostProcessConfig::unsafe_arena_release_post_deactivate_control_conf() {
  // @@protoc_insertion_point(field_release:control.PiffPostProcessConfig.post_deactivate_control_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::control::PiffPPDeactivateControlConfig* temp = post_deactivate_control_conf_;
  post_deactivate_control_conf_ = nullptr;
  return temp;
}
inline ::control::PiffPPDeactivateControlConfig* PiffPostProcessConfig::_internal_mutable_post_deactivate_control_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (post_deactivate_control_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffPPDeactivateControlConfig>(GetArena());
    post_deactivate_control_conf_ = p;
  }
  return post_deactivate_control_conf_;
}
inline ::control::PiffPPDeactivateControlConfig* PiffPostProcessConfig::mutable_post_deactivate_control_conf() {
  // @@protoc_insertion_point(field_mutable:control.PiffPostProcessConfig.post_deactivate_control_conf)
  return _internal_mutable_post_deactivate_control_conf();
}
inline void PiffPostProcessConfig::set_allocated_post_deactivate_control_conf(::control::PiffPPDeactivateControlConfig* post_deactivate_control_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete post_deactivate_control_conf_;
  }
  if (post_deactivate_control_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(post_deactivate_control_conf);
    if (message_arena != submessage_arena) {
      post_deactivate_control_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_deactivate_control_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  post_deactivate_control_conf_ = post_deactivate_control_conf;
  // @@protoc_insertion_point(field_set_allocated:control.PiffPostProcessConfig.post_deactivate_control_conf)
}

// -------------------------------------------------------------------

// PiffCoeffientGainConfig

// required float c0_threshold = 1;
inline bool PiffCoeffientGainConfig::_internal_has_c0_threshold() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffCoeffientGainConfig::has_c0_threshold() const {
  return _internal_has_c0_threshold();
}
inline void PiffCoeffientGainConfig::clear_c0_threshold() {
  c0_threshold_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffCoeffientGainConfig::_internal_c0_threshold() const {
  return c0_threshold_;
}
inline float PiffCoeffientGainConfig::c0_threshold() const {
  // @@protoc_insertion_point(field_get:control.PiffCoeffientGainConfig.c0_threshold)
  return _internal_c0_threshold();
}
inline void PiffCoeffientGainConfig::_internal_set_c0_threshold(float value) {
  _has_bits_[0] |= 0x00000001u;
  c0_threshold_ = value;
}
inline void PiffCoeffientGainConfig::set_c0_threshold(float value) {
  _internal_set_c0_threshold(value);
  // @@protoc_insertion_point(field_set:control.PiffCoeffientGainConfig.c0_threshold)
}

// required float c1_coef = 2;
inline bool PiffCoeffientGainConfig::_internal_has_c1_coef() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffCoeffientGainConfig::has_c1_coef() const {
  return _internal_has_c1_coef();
}
inline void PiffCoeffientGainConfig::clear_c1_coef() {
  c1_coef_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffCoeffientGainConfig::_internal_c1_coef() const {
  return c1_coef_;
}
inline float PiffCoeffientGainConfig::c1_coef() const {
  // @@protoc_insertion_point(field_get:control.PiffCoeffientGainConfig.c1_coef)
  return _internal_c1_coef();
}
inline void PiffCoeffientGainConfig::_internal_set_c1_coef(float value) {
  _has_bits_[0] |= 0x00000002u;
  c1_coef_ = value;
}
inline void PiffCoeffientGainConfig::set_c1_coef(float value) {
  _internal_set_c1_coef(value);
  // @@protoc_insertion_point(field_set:control.PiffCoeffientGainConfig.c1_coef)
}

// required float c2_coef = 3;
inline bool PiffCoeffientGainConfig::_internal_has_c2_coef() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiffCoeffientGainConfig::has_c2_coef() const {
  return _internal_has_c2_coef();
}
inline void PiffCoeffientGainConfig::clear_c2_coef() {
  c2_coef_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PiffCoeffientGainConfig::_internal_c2_coef() const {
  return c2_coef_;
}
inline float PiffCoeffientGainConfig::c2_coef() const {
  // @@protoc_insertion_point(field_get:control.PiffCoeffientGainConfig.c2_coef)
  return _internal_c2_coef();
}
inline void PiffCoeffientGainConfig::_internal_set_c2_coef(float value) {
  _has_bits_[0] |= 0x00000004u;
  c2_coef_ = value;
}
inline void PiffCoeffientGainConfig::set_c2_coef(float value) {
  _internal_set_c2_coef(value);
  // @@protoc_insertion_point(field_set:control.PiffCoeffientGainConfig.c2_coef)
}

// -------------------------------------------------------------------

// PiffCommonParametersConfig

// required float control_period = 1;
inline bool PiffCommonParametersConfig::_internal_has_control_period() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiffCommonParametersConfig::has_control_period() const {
  return _internal_has_control_period();
}
inline void PiffCommonParametersConfig::clear_control_period() {
  control_period_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PiffCommonParametersConfig::_internal_control_period() const {
  return control_period_;
}
inline float PiffCommonParametersConfig::control_period() const {
  // @@protoc_insertion_point(field_get:control.PiffCommonParametersConfig.control_period)
  return _internal_control_period();
}
inline void PiffCommonParametersConfig::_internal_set_control_period(float value) {
  _has_bits_[0] |= 0x00000001u;
  control_period_ = value;
}
inline void PiffCommonParametersConfig::set_control_period(float value) {
  _internal_set_control_period(value);
  // @@protoc_insertion_point(field_set:control.PiffCommonParametersConfig.control_period)
}

// required float standstill_speed_mps = 3;
inline bool PiffCommonParametersConfig::_internal_has_standstill_speed_mps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiffCommonParametersConfig::has_standstill_speed_mps() const {
  return _internal_has_standstill_speed_mps();
}
inline void PiffCommonParametersConfig::clear_standstill_speed_mps() {
  standstill_speed_mps_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PiffCommonParametersConfig::_internal_standstill_speed_mps() const {
  return standstill_speed_mps_;
}
inline float PiffCommonParametersConfig::standstill_speed_mps() const {
  // @@protoc_insertion_point(field_get:control.PiffCommonParametersConfig.standstill_speed_mps)
  return _internal_standstill_speed_mps();
}
inline void PiffCommonParametersConfig::_internal_set_standstill_speed_mps(float value) {
  _has_bits_[0] |= 0x00000002u;
  standstill_speed_mps_ = value;
}
inline void PiffCommonParametersConfig::set_standstill_speed_mps(float value) {
  _internal_set_standstill_speed_mps(value);
  // @@protoc_insertion_point(field_set:control.PiffCommonParametersConfig.standstill_speed_mps)
}

// -------------------------------------------------------------------

// LatPidConfig

// required .control.PiffCommonParametersConfig common_para_conf = 1;
inline bool LatPidConfig::_internal_has_common_para_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || common_para_conf_ != nullptr);
  return value;
}
inline bool LatPidConfig::has_common_para_conf() const {
  return _internal_has_common_para_conf();
}
inline void LatPidConfig::clear_common_para_conf() {
  if (common_para_conf_ != nullptr) common_para_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PiffCommonParametersConfig& LatPidConfig::_internal_common_para_conf() const {
  const ::control::PiffCommonParametersConfig* p = common_para_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffCommonParametersConfig*>(
      &::control::_PiffCommonParametersConfig_default_instance_);
}
inline const ::control::PiffCommonParametersConfig& LatPidConfig::common_para_conf() const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.common_para_conf)
  return _internal_common_para_conf();
}
inline void LatPidConfig::unsafe_arena_set_allocated_common_para_conf(
    ::control::PiffCommonParametersConfig* common_para_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_para_conf_);
  }
  common_para_conf_ = common_para_conf;
  if (common_para_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LatPidConfig.common_para_conf)
}
inline ::control::PiffCommonParametersConfig* LatPidConfig::release_common_para_conf() {
  auto temp = unsafe_arena_release_common_para_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffCommonParametersConfig* LatPidConfig::unsafe_arena_release_common_para_conf() {
  // @@protoc_insertion_point(field_release:control.LatPidConfig.common_para_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PiffCommonParametersConfig* temp = common_para_conf_;
  common_para_conf_ = nullptr;
  return temp;
}
inline ::control::PiffCommonParametersConfig* LatPidConfig::_internal_mutable_common_para_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (common_para_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffCommonParametersConfig>(GetArena());
    common_para_conf_ = p;
  }
  return common_para_conf_;
}
inline ::control::PiffCommonParametersConfig* LatPidConfig::mutable_common_para_conf() {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.common_para_conf)
  return _internal_mutable_common_para_conf();
}
inline void LatPidConfig::set_allocated_common_para_conf(::control::PiffCommonParametersConfig* common_para_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_para_conf_;
  }
  if (common_para_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_para_conf);
    if (message_arena != submessage_arena) {
      common_para_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_para_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  common_para_conf_ = common_para_conf;
  // @@protoc_insertion_point(field_set_allocated:control.LatPidConfig.common_para_conf)
}

// required .control.PiffControllerContentConfig controller_content_conf = 2;
inline bool LatPidConfig::_internal_has_controller_content_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || controller_content_conf_ != nullptr);
  return value;
}
inline bool LatPidConfig::has_controller_content_conf() const {
  return _internal_has_controller_content_conf();
}
inline void LatPidConfig::clear_controller_content_conf() {
  if (controller_content_conf_ != nullptr) controller_content_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::PiffControllerContentConfig& LatPidConfig::_internal_controller_content_conf() const {
  const ::control::PiffControllerContentConfig* p = controller_content_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffControllerContentConfig*>(
      &::control::_PiffControllerContentConfig_default_instance_);
}
inline const ::control::PiffControllerContentConfig& LatPidConfig::controller_content_conf() const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.controller_content_conf)
  return _internal_controller_content_conf();
}
inline void LatPidConfig::unsafe_arena_set_allocated_controller_content_conf(
    ::control::PiffControllerContentConfig* controller_content_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_content_conf_);
  }
  controller_content_conf_ = controller_content_conf;
  if (controller_content_conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LatPidConfig.controller_content_conf)
}
inline ::control::PiffControllerContentConfig* LatPidConfig::release_controller_content_conf() {
  auto temp = unsafe_arena_release_controller_content_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffControllerContentConfig* LatPidConfig::unsafe_arena_release_controller_content_conf() {
  // @@protoc_insertion_point(field_release:control.LatPidConfig.controller_content_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::control::PiffControllerContentConfig* temp = controller_content_conf_;
  controller_content_conf_ = nullptr;
  return temp;
}
inline ::control::PiffControllerContentConfig* LatPidConfig::_internal_mutable_controller_content_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (controller_content_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffControllerContentConfig>(GetArena());
    controller_content_conf_ = p;
  }
  return controller_content_conf_;
}
inline ::control::PiffControllerContentConfig* LatPidConfig::mutable_controller_content_conf() {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.controller_content_conf)
  return _internal_mutable_controller_content_conf();
}
inline void LatPidConfig::set_allocated_controller_content_conf(::control::PiffControllerContentConfig* controller_content_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete controller_content_conf_;
  }
  if (controller_content_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(controller_content_conf);
    if (message_arena != submessage_arena) {
      controller_content_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_content_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_content_conf_ = controller_content_conf;
  // @@protoc_insertion_point(field_set_allocated:control.LatPidConfig.controller_content_conf)
}

// repeated .control.PiffParameters piff_paras = 3;
inline int LatPidConfig::_internal_piff_paras_size() const {
  return piff_paras_.size();
}
inline int LatPidConfig::piff_paras_size() const {
  return _internal_piff_paras_size();
}
inline void LatPidConfig::clear_piff_paras() {
  piff_paras_.Clear();
}
inline ::control::PiffParameters* LatPidConfig::mutable_piff_paras(int index) {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.piff_paras)
  return piff_paras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffParameters >*
LatPidConfig::mutable_piff_paras() {
  // @@protoc_insertion_point(field_mutable_list:control.LatPidConfig.piff_paras)
  return &piff_paras_;
}
inline const ::control::PiffParameters& LatPidConfig::_internal_piff_paras(int index) const {
  return piff_paras_.Get(index);
}
inline const ::control::PiffParameters& LatPidConfig::piff_paras(int index) const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.piff_paras)
  return _internal_piff_paras(index);
}
inline ::control::PiffParameters* LatPidConfig::_internal_add_piff_paras() {
  return piff_paras_.Add();
}
inline ::control::PiffParameters* LatPidConfig::add_piff_paras() {
  // @@protoc_insertion_point(field_add:control.LatPidConfig.piff_paras)
  return _internal_add_piff_paras();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::PiffParameters >&
LatPidConfig::piff_paras() const {
  // @@protoc_insertion_point(field_list:control.LatPidConfig.piff_paras)
  return piff_paras_;
}

// required .control.PiffMeanFilterConfig mean_filter_conf = 4;
inline bool LatPidConfig::_internal_has_mean_filter_conf() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || mean_filter_conf_ != nullptr);
  return value;
}
inline bool LatPidConfig::has_mean_filter_conf() const {
  return _internal_has_mean_filter_conf();
}
inline void LatPidConfig::clear_mean_filter_conf() {
  if (mean_filter_conf_ != nullptr) mean_filter_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::control::PiffMeanFilterConfig& LatPidConfig::_internal_mean_filter_conf() const {
  const ::control::PiffMeanFilterConfig* p = mean_filter_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffMeanFilterConfig*>(
      &::control::_PiffMeanFilterConfig_default_instance_);
}
inline const ::control::PiffMeanFilterConfig& LatPidConfig::mean_filter_conf() const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.mean_filter_conf)
  return _internal_mean_filter_conf();
}
inline void LatPidConfig::unsafe_arena_set_allocated_mean_filter_conf(
    ::control::PiffMeanFilterConfig* mean_filter_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mean_filter_conf_);
  }
  mean_filter_conf_ = mean_filter_conf;
  if (mean_filter_conf) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LatPidConfig.mean_filter_conf)
}
inline ::control::PiffMeanFilterConfig* LatPidConfig::release_mean_filter_conf() {
  auto temp = unsafe_arena_release_mean_filter_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffMeanFilterConfig* LatPidConfig::unsafe_arena_release_mean_filter_conf() {
  // @@protoc_insertion_point(field_release:control.LatPidConfig.mean_filter_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::control::PiffMeanFilterConfig* temp = mean_filter_conf_;
  mean_filter_conf_ = nullptr;
  return temp;
}
inline ::control::PiffMeanFilterConfig* LatPidConfig::_internal_mutable_mean_filter_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (mean_filter_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffMeanFilterConfig>(GetArena());
    mean_filter_conf_ = p;
  }
  return mean_filter_conf_;
}
inline ::control::PiffMeanFilterConfig* LatPidConfig::mutable_mean_filter_conf() {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.mean_filter_conf)
  return _internal_mutable_mean_filter_conf();
}
inline void LatPidConfig::set_allocated_mean_filter_conf(::control::PiffMeanFilterConfig* mean_filter_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mean_filter_conf_;
  }
  if (mean_filter_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mean_filter_conf);
    if (message_arena != submessage_arena) {
      mean_filter_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mean_filter_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mean_filter_conf_ = mean_filter_conf;
  // @@protoc_insertion_point(field_set_allocated:control.LatPidConfig.mean_filter_conf)
}

// required .control.PiffTrackingDifferentiatorConfig tracking_differentiator_conf = 5;
inline bool LatPidConfig::_internal_has_tracking_differentiator_conf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tracking_differentiator_conf_ != nullptr);
  return value;
}
inline bool LatPidConfig::has_tracking_differentiator_conf() const {
  return _internal_has_tracking_differentiator_conf();
}
inline void LatPidConfig::clear_tracking_differentiator_conf() {
  if (tracking_differentiator_conf_ != nullptr) tracking_differentiator_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::control::PiffTrackingDifferentiatorConfig& LatPidConfig::_internal_tracking_differentiator_conf() const {
  const ::control::PiffTrackingDifferentiatorConfig* p = tracking_differentiator_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffTrackingDifferentiatorConfig*>(
      &::control::_PiffTrackingDifferentiatorConfig_default_instance_);
}
inline const ::control::PiffTrackingDifferentiatorConfig& LatPidConfig::tracking_differentiator_conf() const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.tracking_differentiator_conf)
  return _internal_tracking_differentiator_conf();
}
inline void LatPidConfig::unsafe_arena_set_allocated_tracking_differentiator_conf(
    ::control::PiffTrackingDifferentiatorConfig* tracking_differentiator_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracking_differentiator_conf_);
  }
  tracking_differentiator_conf_ = tracking_differentiator_conf;
  if (tracking_differentiator_conf) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LatPidConfig.tracking_differentiator_conf)
}
inline ::control::PiffTrackingDifferentiatorConfig* LatPidConfig::release_tracking_differentiator_conf() {
  auto temp = unsafe_arena_release_tracking_differentiator_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffTrackingDifferentiatorConfig* LatPidConfig::unsafe_arena_release_tracking_differentiator_conf() {
  // @@protoc_insertion_point(field_release:control.LatPidConfig.tracking_differentiator_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::control::PiffTrackingDifferentiatorConfig* temp = tracking_differentiator_conf_;
  tracking_differentiator_conf_ = nullptr;
  return temp;
}
inline ::control::PiffTrackingDifferentiatorConfig* LatPidConfig::_internal_mutable_tracking_differentiator_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (tracking_differentiator_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffTrackingDifferentiatorConfig>(GetArena());
    tracking_differentiator_conf_ = p;
  }
  return tracking_differentiator_conf_;
}
inline ::control::PiffTrackingDifferentiatorConfig* LatPidConfig::mutable_tracking_differentiator_conf() {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.tracking_differentiator_conf)
  return _internal_mutable_tracking_differentiator_conf();
}
inline void LatPidConfig::set_allocated_tracking_differentiator_conf(::control::PiffTrackingDifferentiatorConfig* tracking_differentiator_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracking_differentiator_conf_;
  }
  if (tracking_differentiator_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracking_differentiator_conf);
    if (message_arena != submessage_arena) {
      tracking_differentiator_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracking_differentiator_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tracking_differentiator_conf_ = tracking_differentiator_conf;
  // @@protoc_insertion_point(field_set_allocated:control.LatPidConfig.tracking_differentiator_conf)
}

// required .control.PiffDataTransformConfig data_transform_conf = 6;
inline bool LatPidConfig::_internal_has_data_transform_conf() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || data_transform_conf_ != nullptr);
  return value;
}
inline bool LatPidConfig::has_data_transform_conf() const {
  return _internal_has_data_transform_conf();
}
inline void LatPidConfig::clear_data_transform_conf() {
  if (data_transform_conf_ != nullptr) data_transform_conf_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::control::PiffDataTransformConfig& LatPidConfig::_internal_data_transform_conf() const {
  const ::control::PiffDataTransformConfig* p = data_transform_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffDataTransformConfig*>(
      &::control::_PiffDataTransformConfig_default_instance_);
}
inline const ::control::PiffDataTransformConfig& LatPidConfig::data_transform_conf() const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.data_transform_conf)
  return _internal_data_transform_conf();
}
inline void LatPidConfig::unsafe_arena_set_allocated_data_transform_conf(
    ::control::PiffDataTransformConfig* data_transform_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_transform_conf_);
  }
  data_transform_conf_ = data_transform_conf;
  if (data_transform_conf) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LatPidConfig.data_transform_conf)
}
inline ::control::PiffDataTransformConfig* LatPidConfig::release_data_transform_conf() {
  auto temp = unsafe_arena_release_data_transform_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffDataTransformConfig* LatPidConfig::unsafe_arena_release_data_transform_conf() {
  // @@protoc_insertion_point(field_release:control.LatPidConfig.data_transform_conf)
  _has_bits_[0] &= ~0x00000010u;
  ::control::PiffDataTransformConfig* temp = data_transform_conf_;
  data_transform_conf_ = nullptr;
  return temp;
}
inline ::control::PiffDataTransformConfig* LatPidConfig::_internal_mutable_data_transform_conf() {
  _has_bits_[0] |= 0x00000010u;
  if (data_transform_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffDataTransformConfig>(GetArena());
    data_transform_conf_ = p;
  }
  return data_transform_conf_;
}
inline ::control::PiffDataTransformConfig* LatPidConfig::mutable_data_transform_conf() {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.data_transform_conf)
  return _internal_mutable_data_transform_conf();
}
inline void LatPidConfig::set_allocated_data_transform_conf(::control::PiffDataTransformConfig* data_transform_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_transform_conf_;
  }
  if (data_transform_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_transform_conf);
    if (message_arena != submessage_arena) {
      data_transform_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_transform_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  data_transform_conf_ = data_transform_conf;
  // @@protoc_insertion_point(field_set_allocated:control.LatPidConfig.data_transform_conf)
}

// required .control.PiffPostProcessConfig post_process_conf = 7;
inline bool LatPidConfig::_internal_has_post_process_conf() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || post_process_conf_ != nullptr);
  return value;
}
inline bool LatPidConfig::has_post_process_conf() const {
  return _internal_has_post_process_conf();
}
inline void LatPidConfig::clear_post_process_conf() {
  if (post_process_conf_ != nullptr) post_process_conf_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::control::PiffPostProcessConfig& LatPidConfig::_internal_post_process_conf() const {
  const ::control::PiffPostProcessConfig* p = post_process_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffPostProcessConfig*>(
      &::control::_PiffPostProcessConfig_default_instance_);
}
inline const ::control::PiffPostProcessConfig& LatPidConfig::post_process_conf() const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.post_process_conf)
  return _internal_post_process_conf();
}
inline void LatPidConfig::unsafe_arena_set_allocated_post_process_conf(
    ::control::PiffPostProcessConfig* post_process_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_process_conf_);
  }
  post_process_conf_ = post_process_conf;
  if (post_process_conf) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LatPidConfig.post_process_conf)
}
inline ::control::PiffPostProcessConfig* LatPidConfig::release_post_process_conf() {
  auto temp = unsafe_arena_release_post_process_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffPostProcessConfig* LatPidConfig::unsafe_arena_release_post_process_conf() {
  // @@protoc_insertion_point(field_release:control.LatPidConfig.post_process_conf)
  _has_bits_[0] &= ~0x00000020u;
  ::control::PiffPostProcessConfig* temp = post_process_conf_;
  post_process_conf_ = nullptr;
  return temp;
}
inline ::control::PiffPostProcessConfig* LatPidConfig::_internal_mutable_post_process_conf() {
  _has_bits_[0] |= 0x00000020u;
  if (post_process_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffPostProcessConfig>(GetArena());
    post_process_conf_ = p;
  }
  return post_process_conf_;
}
inline ::control::PiffPostProcessConfig* LatPidConfig::mutable_post_process_conf() {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.post_process_conf)
  return _internal_mutable_post_process_conf();
}
inline void LatPidConfig::set_allocated_post_process_conf(::control::PiffPostProcessConfig* post_process_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete post_process_conf_;
  }
  if (post_process_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(post_process_conf);
    if (message_arena != submessage_arena) {
      post_process_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_process_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  post_process_conf_ = post_process_conf;
  // @@protoc_insertion_point(field_set_allocated:control.LatPidConfig.post_process_conf)
}

// required .control.PiffCoeffientGainConfig coeffient_gain_conf = 8;
inline bool LatPidConfig::_internal_has_coeffient_gain_conf() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || coeffient_gain_conf_ != nullptr);
  return value;
}
inline bool LatPidConfig::has_coeffient_gain_conf() const {
  return _internal_has_coeffient_gain_conf();
}
inline void LatPidConfig::clear_coeffient_gain_conf() {
  if (coeffient_gain_conf_ != nullptr) coeffient_gain_conf_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::control::PiffCoeffientGainConfig& LatPidConfig::_internal_coeffient_gain_conf() const {
  const ::control::PiffCoeffientGainConfig* p = coeffient_gain_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PiffCoeffientGainConfig*>(
      &::control::_PiffCoeffientGainConfig_default_instance_);
}
inline const ::control::PiffCoeffientGainConfig& LatPidConfig::coeffient_gain_conf() const {
  // @@protoc_insertion_point(field_get:control.LatPidConfig.coeffient_gain_conf)
  return _internal_coeffient_gain_conf();
}
inline void LatPidConfig::unsafe_arena_set_allocated_coeffient_gain_conf(
    ::control::PiffCoeffientGainConfig* coeffient_gain_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coeffient_gain_conf_);
  }
  coeffient_gain_conf_ = coeffient_gain_conf;
  if (coeffient_gain_conf) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LatPidConfig.coeffient_gain_conf)
}
inline ::control::PiffCoeffientGainConfig* LatPidConfig::release_coeffient_gain_conf() {
  auto temp = unsafe_arena_release_coeffient_gain_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PiffCoeffientGainConfig* LatPidConfig::unsafe_arena_release_coeffient_gain_conf() {
  // @@protoc_insertion_point(field_release:control.LatPidConfig.coeffient_gain_conf)
  _has_bits_[0] &= ~0x00000040u;
  ::control::PiffCoeffientGainConfig* temp = coeffient_gain_conf_;
  coeffient_gain_conf_ = nullptr;
  return temp;
}
inline ::control::PiffCoeffientGainConfig* LatPidConfig::_internal_mutable_coeffient_gain_conf() {
  _has_bits_[0] |= 0x00000040u;
  if (coeffient_gain_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PiffCoeffientGainConfig>(GetArena());
    coeffient_gain_conf_ = p;
  }
  return coeffient_gain_conf_;
}
inline ::control::PiffCoeffientGainConfig* LatPidConfig::mutable_coeffient_gain_conf() {
  // @@protoc_insertion_point(field_mutable:control.LatPidConfig.coeffient_gain_conf)
  return _internal_mutable_coeffient_gain_conf();
}
inline void LatPidConfig::set_allocated_coeffient_gain_conf(::control::PiffCoeffientGainConfig* coeffient_gain_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coeffient_gain_conf_;
  }
  if (coeffient_gain_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coeffient_gain_conf);
    if (message_arena != submessage_arena) {
      coeffient_gain_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coeffient_gain_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  coeffient_gain_conf_ = coeffient_gain_conf;
  // @@protoc_insertion_point(field_set_allocated:control.LatPidConfig.coeffient_gain_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto

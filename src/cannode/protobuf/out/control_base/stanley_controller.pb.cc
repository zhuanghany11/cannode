// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/stanley_controller.proto

#include "control_base/stanley_controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace control {
class StanleyControllerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StanleyControllerConfig> _instance;
} _StanleyControllerConfig_default_instance_;
}  // namespace control
static void InitDefaultsscc_info_StanleyControllerConfig_control_5fbase_2fstanley_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_StanleyControllerConfig_default_instance_;
    new (ptr) ::control::StanleyControllerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::StanleyControllerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StanleyControllerConfig_control_5fbase_2fstanley_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StanleyControllerConfig_control_5fbase_2fstanley_5fcontroller_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2fstanley_5fcontroller_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, enable_lat_error_filter_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, enable_heading_error_filter_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, query_time_nearest_point_only_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, query_relative_time_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, k_y_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, base_preview_dis_),
  PROTOBUF_FIELD_OFFSET(::control::StanleyControllerConfig, base_preview_time_),
  0,
  1,
  3,
  2,
  5,
  4,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::control::StanleyControllerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_StanleyControllerConfig_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2fstanley_5fcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%control_base/stanley_controller.proto\022"
  "\007control\"\256\002\n\027StanleyControllerConfig\022&\n\027"
  "enable_lat_error_filter\030\001 \001(\010:\005false\022*\n\033"
  "enable_heading_error_filter\030\002 \001(\010:\005false"
  "\022\"\n\027mean_filter_window_size\030\003 \001(\005:\0015\022,\n\035"
  "query_time_nearest_point_only\030\004 \001(\010:\005fal"
  "se\022 \n\023query_relative_time\030\005 \001(\001:\0030.8\022\020\n\003"
  "k_y\030\006 \001(\002:\0030.3\022\033\n\020base_preview_dis\030\007 \001(\002"
  ":\0013\022\034\n\021base_preview_time\030\010 \001(\002:\0012"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_sccs[1] = {
  &scc_info_StanleyControllerConfig_control_5fbase_2fstanley_5fcontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2fstanley_5fcontroller_2eproto, "control_base/stanley_controller.proto", 353,
  &descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_once, descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_sccs, descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto::offsets,
  file_level_metadata_control_5fbase_2fstanley_5fcontroller_2eproto, 1, file_level_enum_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto, file_level_service_descriptors_control_5fbase_2fstanley_5fcontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2fstanley_5fcontroller_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto)), true);
namespace control {

// ===================================================================

void StanleyControllerConfig::InitAsDefaultInstance() {
}
class StanleyControllerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StanleyControllerConfig>()._has_bits_);
  static void set_has_enable_lat_error_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_heading_error_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mean_filter_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_query_time_nearest_point_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_query_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_k_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_base_preview_dis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_base_preview_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

StanleyControllerConfig::StanleyControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.StanleyControllerConfig)
}
StanleyControllerConfig::StanleyControllerConfig(const StanleyControllerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_lat_error_filter_, &from.enable_lat_error_filter_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_preview_time_) -
    reinterpret_cast<char*>(&enable_lat_error_filter_)) + sizeof(base_preview_time_));
  // @@protoc_insertion_point(copy_constructor:control.StanleyControllerConfig)
}

void StanleyControllerConfig::SharedCtor() {
  ::memset(&enable_lat_error_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_time_nearest_point_only_) -
      reinterpret_cast<char*>(&enable_lat_error_filter_)) + sizeof(query_time_nearest_point_only_));
  mean_filter_window_size_ = 5;
  k_y_ = 0.3f;
  query_relative_time_ = 0.8;
  base_preview_dis_ = 3;
  base_preview_time_ = 2;
}

StanleyControllerConfig::~StanleyControllerConfig() {
  // @@protoc_insertion_point(destructor:control.StanleyControllerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StanleyControllerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StanleyControllerConfig::ArenaDtor(void* object) {
  StanleyControllerConfig* _this = reinterpret_cast< StanleyControllerConfig* >(object);
  (void)_this;
}
void StanleyControllerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StanleyControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StanleyControllerConfig& StanleyControllerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StanleyControllerConfig_control_5fbase_2fstanley_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void StanleyControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.StanleyControllerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_lat_error_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_time_nearest_point_only_) -
      reinterpret_cast<char*>(&enable_lat_error_filter_)) + sizeof(query_time_nearest_point_only_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    mean_filter_window_size_ = 5;
    k_y_ = 0.3f;
    query_relative_time_ = 0.8;
    base_preview_dis_ = 3;
    base_preview_time_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StanleyControllerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_lat_error_filter = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_lat_error_filter(&has_bits);
          enable_lat_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_heading_error_filter = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_heading_error_filter(&has_bits);
          enable_heading_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mean_filter_window_size = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mean_filter_window_size(&has_bits);
          mean_filter_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool query_time_nearest_point_only = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_query_time_nearest_point_only(&has_bits);
          query_time_nearest_point_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double query_relative_time = 5 [default = 0.8];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_query_relative_time(&has_bits);
          query_relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float k_y = 6 [default = 0.3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_k_y(&has_bits);
          k_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float base_preview_dis = 7 [default = 3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_base_preview_dis(&has_bits);
          base_preview_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float base_preview_time = 8 [default = 2];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_base_preview_time(&has_bits);
          base_preview_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StanleyControllerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.StanleyControllerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_lat_error_filter = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_lat_error_filter(), target);
  }

  // optional bool enable_heading_error_filter = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_heading_error_filter(), target);
  }

  // optional int32 mean_filter_window_size = 3 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mean_filter_window_size(), target);
  }

  // optional bool query_time_nearest_point_only = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_query_time_nearest_point_only(), target);
  }

  // optional double query_relative_time = 5 [default = 0.8];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_query_relative_time(), target);
  }

  // optional float k_y = 6 [default = 0.3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_k_y(), target);
  }

  // optional float base_preview_dis = 7 [default = 3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_base_preview_dis(), target);
  }

  // optional float base_preview_time = 8 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_base_preview_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.StanleyControllerConfig)
  return target;
}

size_t StanleyControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.StanleyControllerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_lat_error_filter = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable_heading_error_filter = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool query_time_nearest_point_only = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 mean_filter_window_size = 3 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mean_filter_window_size());
    }

    // optional float k_y = 6 [default = 0.3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional double query_relative_time = 5 [default = 0.8];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional float base_preview_dis = 7 [default = 3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float base_preview_time = 8 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StanleyControllerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.StanleyControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StanleyControllerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StanleyControllerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.StanleyControllerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.StanleyControllerConfig)
    MergeFrom(*source);
  }
}

void StanleyControllerConfig::MergeFrom(const StanleyControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.StanleyControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_lat_error_filter_ = from.enable_lat_error_filter_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_heading_error_filter_ = from.enable_heading_error_filter_;
    }
    if (cached_has_bits & 0x00000004u) {
      query_time_nearest_point_only_ = from.query_time_nearest_point_only_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      k_y_ = from.k_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      query_relative_time_ = from.query_relative_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_preview_dis_ = from.base_preview_dis_;
    }
    if (cached_has_bits & 0x00000080u) {
      base_preview_time_ = from.base_preview_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StanleyControllerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.StanleyControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanleyControllerConfig::CopyFrom(const StanleyControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.StanleyControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanleyControllerConfig::IsInitialized() const {
  return true;
}

void StanleyControllerConfig::InternalSwap(StanleyControllerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, query_time_nearest_point_only_)
      + sizeof(StanleyControllerConfig::query_time_nearest_point_only_)
      - PROTOBUF_FIELD_OFFSET(StanleyControllerConfig, enable_lat_error_filter_)>(
          reinterpret_cast<char*>(&enable_lat_error_filter_),
          reinterpret_cast<char*>(&other->enable_lat_error_filter_));
  swap(mean_filter_window_size_, other->mean_filter_window_size_);
  swap(k_y_, other->k_y_);
  swap(query_relative_time_, other->query_relative_time_);
  swap(base_preview_dis_, other->base_preview_dis_);
  swap(base_preview_time_, other->base_preview_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StanleyControllerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::StanleyControllerConfig* Arena::CreateMaybeMessage< ::control::StanleyControllerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::StanleyControllerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

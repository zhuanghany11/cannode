// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/multipoint_preview_pp.proto

#include "control_base/multipoint_preview_pp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegrationParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PIDParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
namespace control {
class PIDParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PIDParameters> _instance;
} _PIDParameters_default_instance_;
class IntegrationParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegrationParameters> _instance;
} _IntegrationParameters_default_instance_;
class MultipointPreviewPPConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipointPreviewPPConfig> _instance;
} _MultipointPreviewPPConfig_default_instance_;
}  // namespace control
static void InitDefaultsscc_info_IntegrationParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_IntegrationParameters_default_instance_;
    new (ptr) ::control::IntegrationParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::IntegrationParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegrationParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntegrationParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto}, {}};

static void InitDefaultsscc_info_MultipointPreviewPPConfig_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_MultipointPreviewPPConfig_default_instance_;
    new (ptr) ::control::MultipointPreviewPPConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::MultipointPreviewPPConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultipointPreviewPPConfig_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultipointPreviewPPConfig_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto}, {
      &scc_info_PIDParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base,
      &scc_info_IntegrationParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base,}};

static void InitDefaultsscc_info_PIDParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PIDParameters_default_instance_;
    new (ptr) ::control::PIDParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PIDParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PIDParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PIDParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, enable_pid_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, kp_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, ki_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, kd_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, kp_coef_full_laod_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, smaller_kd_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, enable_adjust_kp_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, kp_coef_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, max_kp_threshold_),
  PROTOBUF_FIELD_OFFSET(::control::PIDParameters, larger_kp_threshold_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  1,
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, enable_integration_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, forgetting_factor_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, integrator_saturation_threshold_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, lat_error_threshold_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, ki_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, reversse_ki_),
  PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, kappa_threshold_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, base_preview_dis_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, base_preview_time_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, preview_time_coef_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, pid_params_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, preview_point_weight_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, kappa_threshold_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, kappa_time_coef_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, enable_predis_compensation_baseon_lat_err_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, coef_with_lat_error_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, dis_compensation_threshold_with_lat_error_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, query_time_nearest_point_only_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, query_relative_time_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, enable_lat_error_filter_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, enable_heading_error_filter_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, integration_params_),
  6,
  7,
  ~0u,
  0,
  ~0u,
  8,
  11,
  2,
  9,
  10,
  3,
  13,
  4,
  5,
  12,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::control::PIDParameters)},
  { 25, 38, sizeof(::control::IntegrationParameters)},
  { 46, 67, sizeof(::control::MultipointPreviewPPConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PIDParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_IntegrationParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_MultipointPreviewPPConfig_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(control_base/multipoint_preview_pp.pro"
  "to\022\007control\"\212\002\n\rPIDParameters\022\030\n\nenable_"
  "pid\030\001 \001(\010:\004true\022\r\n\002kp\030\002 \001(\002:\0011\022\r\n\002ki\030\003 \001"
  "(\002:\0012\022\017\n\002kd\030\004 \001(\002:\0030.6\022\034\n\021kp_coef_full_l"
  "aod\030\005 \001(\002:\0011\022\027\n\nsmaller_kd\030\006 \001(\002:\0030.2\022\037\n"
  "\020enable_adjust_kp\030\007 \001(\010:\005false\022\025\n\007kp_coe"
  "f\030\010 \001(\002:\0041.05\022\036\n\020max_kp_threshold\030\t \001(\002:"
  "\0040.02\022!\n\023larger_kp_threshold\030\n \001(\002:\0040.06"
  "\"\213\002\n\025IntegrationParameters\022!\n\022enable_int"
  "egration\030\001 \001(\010:\005false\022\037\n\021forgetting_fact"
  "or\030\002 \001(\002:\0040.98\022*\n\037integrator_saturation_"
  "threshold\030\003 \001(\002:\0015\022\034\n\017speed_threshold\030\004 "
  "\001(\002:\0030.5\022\036\n\023lat_error_threshold\030\005 \001(\002:\0012"
  "\022\r\n\002ki\030\006 \001(\002:\0011\022\026\n\013reversse_ki\030\007 \001(\002:\0012\022"
  "\035\n\017kappa_threshold\030\010 \001(\002:\0040.01\"\217\005\n\031Multi"
  "pointPreviewPPConfig\022\033\n\020base_preview_dis"
  "\030\001 \001(\002:\0015\022\034\n\021base_preview_time\030\002 \001(\002:\0012\022"
  "\031\n\021preview_time_coef\030\003 \003(\002\022*\n\npid_params"
  "\030\004 \001(\0132\026.control.PIDParameters\022\034\n\024previe"
  "w_point_weight\030\005 \003(\001\022\035\n\017kappa_threshold\030"
  "\006 \001(\001:\0040.02\022\033\n\017kappa_time_coef\030\007 \001(\002:\00210"
  "\0228\n)enable_predis_compensation_baseon_la"
  "t_err\030\010 \001(\010:\005false\022 \n\023coef_with_lat_erro"
  "r\030\t \001(\001:\0031.8\0226\n)dis_compensation_thresho"
  "ld_with_lat_error\030\n \001(\001:\0031.5\022,\n\035query_ti"
  "me_nearest_point_only\030\013 \001(\010:\005false\022 \n\023qu"
  "ery_relative_time\030\014 \001(\001:\0030.8\022&\n\027enable_l"
  "at_error_filter\030\r \001(\010:\005false\022*\n\033enable_h"
  "eading_error_filter\030\016 \001(\010:\005false\022\"\n\027mean"
  "_filter_window_size\030\017 \001(\005:\0015\022:\n\022integrat"
  "ion_params\030\020 \001(\0132\036.control.IntegrationPa"
  "rameters"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_sccs[3] = {
  &scc_info_IntegrationParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base,
  &scc_info_MultipointPreviewPPConfig_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base,
  &scc_info_PIDParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto, "control_base/multipoint_preview_pp.proto", 1248,
  &descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_once, descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_sccs, descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto::offsets,
  file_level_metadata_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto, 3, file_level_enum_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto, file_level_service_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto)), true);
namespace control {

// ===================================================================

void PIDParameters::InitAsDefaultInstance() {
}
class PIDParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<PIDParameters>()._has_bits_);
  static void set_has_enable_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ki(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kp_coef_full_laod(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_smaller_kd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enable_adjust_kp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kp_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_kp_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_larger_kp_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PIDParameters::PIDParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PIDParameters)
}
PIDParameters::PIDParameters(const PIDParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_adjust_kp_, &from.enable_adjust_kp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_kp_threshold_) -
    reinterpret_cast<char*>(&enable_adjust_kp_)) + sizeof(max_kp_threshold_));
  // @@protoc_insertion_point(copy_constructor:control.PIDParameters)
}

void PIDParameters::SharedCtor() {
  enable_adjust_kp_ = false;
  larger_kp_threshold_ = 0.06f;
  enable_pid_ = true;
  kp_ = 1;
  ki_ = 2;
  kd_ = 0.6f;
  kp_coef_full_laod_ = 1;
  smaller_kd_ = 0.2f;
  kp_coef_ = 1.05f;
  max_kp_threshold_ = 0.02f;
}

PIDParameters::~PIDParameters() {
  // @@protoc_insertion_point(destructor:control.PIDParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PIDParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PIDParameters::ArenaDtor(void* object) {
  PIDParameters* _this = reinterpret_cast< PIDParameters* >(object);
  (void)_this;
}
void PIDParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PIDParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PIDParameters& PIDParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PIDParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base);
  return *internal_default_instance();
}


void PIDParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PIDParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    enable_adjust_kp_ = false;
    larger_kp_threshold_ = 0.06f;
    enable_pid_ = true;
    kp_ = 1;
    ki_ = 2;
    kd_ = 0.6f;
    kp_coef_full_laod_ = 1;
    smaller_kd_ = 0.2f;
  }
  if (cached_has_bits & 0x00000300u) {
    kp_coef_ = 1.05f;
    max_kp_threshold_ = 0.02f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PIDParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_pid = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_pid(&has_bits);
          enable_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float kp = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_kp(&has_bits);
          kp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ki = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ki(&has_bits);
          ki_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kd = 4 [default = 0.6];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_kd(&has_bits);
          kd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kp_coef_full_laod = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_kp_coef_full_laod(&has_bits);
          kp_coef_full_laod_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float smaller_kd = 6 [default = 0.2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_smaller_kd(&has_bits);
          smaller_kd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enable_adjust_kp = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enable_adjust_kp(&has_bits);
          enable_adjust_kp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float kp_coef = 8 [default = 1.05];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_kp_coef(&has_bits);
          kp_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_kp_threshold = 9 [default = 0.02];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_max_kp_threshold(&has_bits);
          max_kp_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float larger_kp_threshold = 10 [default = 0.06];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_larger_kp_threshold(&has_bits);
          larger_kp_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PIDParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PIDParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_pid = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_pid(), target);
  }

  // optional float kp = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_kp(), target);
  }

  // optional float ki = 3 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ki(), target);
  }

  // optional float kd = 4 [default = 0.6];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_kd(), target);
  }

  // optional float kp_coef_full_laod = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_kp_coef_full_laod(), target);
  }

  // optional float smaller_kd = 6 [default = 0.2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_smaller_kd(), target);
  }

  // optional bool enable_adjust_kp = 7 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_adjust_kp(), target);
  }

  // optional float kp_coef = 8 [default = 1.05];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_kp_coef(), target);
  }

  // optional float max_kp_threshold = 9 [default = 0.02];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_max_kp_threshold(), target);
  }

  // optional float larger_kp_threshold = 10 [default = 0.06];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_larger_kp_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PIDParameters)
  return target;
}

size_t PIDParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PIDParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_adjust_kp = 7 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float larger_kp_threshold = 10 [default = 0.06];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool enable_pid = 1 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float kp = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float ki = 3 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float kd = 4 [default = 0.6];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float kp_coef_full_laod = 5 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float smaller_kd = 6 [default = 0.2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float kp_coef = 8 [default = 1.05];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float max_kp_threshold = 9 [default = 0.02];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PIDParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PIDParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const PIDParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PIDParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PIDParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PIDParameters)
    MergeFrom(*source);
  }
}

void PIDParameters::MergeFrom(const PIDParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PIDParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_adjust_kp_ = from.enable_adjust_kp_;
    }
    if (cached_has_bits & 0x00000002u) {
      larger_kp_threshold_ = from.larger_kp_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_pid_ = from.enable_pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      kp_ = from.kp_;
    }
    if (cached_has_bits & 0x00000010u) {
      ki_ = from.ki_;
    }
    if (cached_has_bits & 0x00000020u) {
      kd_ = from.kd_;
    }
    if (cached_has_bits & 0x00000040u) {
      kp_coef_full_laod_ = from.kp_coef_full_laod_;
    }
    if (cached_has_bits & 0x00000080u) {
      smaller_kd_ = from.smaller_kd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      kp_coef_ = from.kp_coef_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_kp_threshold_ = from.max_kp_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PIDParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PIDParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PIDParameters::CopyFrom(const PIDParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PIDParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PIDParameters::IsInitialized() const {
  return true;
}

void PIDParameters::InternalSwap(PIDParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_adjust_kp_, other->enable_adjust_kp_);
  swap(larger_kp_threshold_, other->larger_kp_threshold_);
  swap(enable_pid_, other->enable_pid_);
  swap(kp_, other->kp_);
  swap(ki_, other->ki_);
  swap(kd_, other->kd_);
  swap(kp_coef_full_laod_, other->kp_coef_full_laod_);
  swap(smaller_kd_, other->smaller_kd_);
  swap(kp_coef_, other->kp_coef_);
  swap(max_kp_threshold_, other->max_kp_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PIDParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntegrationParameters::InitAsDefaultInstance() {
}
class IntegrationParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<IntegrationParameters>()._has_bits_);
  static void set_has_enable_integration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_forgetting_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_integrator_saturation_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lat_error_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ki(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reversse_ki(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_kappa_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IntegrationParameters::IntegrationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.IntegrationParameters)
}
IntegrationParameters::IntegrationParameters(const IntegrationParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_integration_, &from.enable_integration_,
    static_cast<size_t>(reinterpret_cast<char*>(&reversse_ki_) -
    reinterpret_cast<char*>(&enable_integration_)) + sizeof(reversse_ki_));
  // @@protoc_insertion_point(copy_constructor:control.IntegrationParameters)
}

void IntegrationParameters::SharedCtor() {
  enable_integration_ = false;
  kappa_threshold_ = 0.01f;
  forgetting_factor_ = 0.98f;
  integrator_saturation_threshold_ = 5;
  speed_threshold_ = 0.5f;
  lat_error_threshold_ = 2;
  ki_ = 1;
  reversse_ki_ = 2;
}

IntegrationParameters::~IntegrationParameters() {
  // @@protoc_insertion_point(destructor:control.IntegrationParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegrationParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntegrationParameters::ArenaDtor(void* object) {
  IntegrationParameters* _this = reinterpret_cast< IntegrationParameters* >(object);
  (void)_this;
}
void IntegrationParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegrationParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegrationParameters& IntegrationParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegrationParameters_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base);
  return *internal_default_instance();
}


void IntegrationParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:control.IntegrationParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    enable_integration_ = false;
    kappa_threshold_ = 0.01f;
    forgetting_factor_ = 0.98f;
    integrator_saturation_threshold_ = 5;
    speed_threshold_ = 0.5f;
    lat_error_threshold_ = 2;
    ki_ = 1;
    reversse_ki_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegrationParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_integration = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_integration(&has_bits);
          enable_integration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float forgetting_factor = 2 [default = 0.98];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_forgetting_factor(&has_bits);
          forgetting_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float integrator_saturation_threshold = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_integrator_saturation_threshold(&has_bits);
          integrator_saturation_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_threshold = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_speed_threshold(&has_bits);
          speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lat_error_threshold = 5 [default = 2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_lat_error_threshold(&has_bits);
          lat_error_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ki = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ki(&has_bits);
          ki_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float reversse_ki = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_reversse_ki(&has_bits);
          reversse_ki_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kappa_threshold = 8 [default = 0.01];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_kappa_threshold(&has_bits);
          kappa_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegrationParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.IntegrationParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_integration = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_integration(), target);
  }

  // optional float forgetting_factor = 2 [default = 0.98];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_forgetting_factor(), target);
  }

  // optional float integrator_saturation_threshold = 3 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_integrator_saturation_threshold(), target);
  }

  // optional float speed_threshold = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed_threshold(), target);
  }

  // optional float lat_error_threshold = 5 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lat_error_threshold(), target);
  }

  // optional float ki = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ki(), target);
  }

  // optional float reversse_ki = 7 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_reversse_ki(), target);
  }

  // optional float kappa_threshold = 8 [default = 0.01];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_kappa_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.IntegrationParameters)
  return target;
}

size_t IntegrationParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.IntegrationParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_integration = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float kappa_threshold = 8 [default = 0.01];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float forgetting_factor = 2 [default = 0.98];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float integrator_saturation_threshold = 3 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float speed_threshold = 4 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float lat_error_threshold = 5 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float ki = 6 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float reversse_ki = 7 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegrationParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.IntegrationParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegrationParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegrationParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.IntegrationParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.IntegrationParameters)
    MergeFrom(*source);
  }
}

void IntegrationParameters::MergeFrom(const IntegrationParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.IntegrationParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_integration_ = from.enable_integration_;
    }
    if (cached_has_bits & 0x00000002u) {
      kappa_threshold_ = from.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      forgetting_factor_ = from.forgetting_factor_;
    }
    if (cached_has_bits & 0x00000008u) {
      integrator_saturation_threshold_ = from.integrator_saturation_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_threshold_ = from.speed_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      lat_error_threshold_ = from.lat_error_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      ki_ = from.ki_;
    }
    if (cached_has_bits & 0x00000080u) {
      reversse_ki_ = from.reversse_ki_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntegrationParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.IntegrationParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegrationParameters::CopyFrom(const IntegrationParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.IntegrationParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegrationParameters::IsInitialized() const {
  return true;
}

void IntegrationParameters::InternalSwap(IntegrationParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_integration_, other->enable_integration_);
  swap(kappa_threshold_, other->kappa_threshold_);
  swap(forgetting_factor_, other->forgetting_factor_);
  swap(integrator_saturation_threshold_, other->integrator_saturation_threshold_);
  swap(speed_threshold_, other->speed_threshold_);
  swap(lat_error_threshold_, other->lat_error_threshold_);
  swap(ki_, other->ki_);
  swap(reversse_ki_, other->reversse_ki_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegrationParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipointPreviewPPConfig::InitAsDefaultInstance() {
  ::control::_MultipointPreviewPPConfig_default_instance_._instance.get_mutable()->pid_params_ = const_cast< ::control::PIDParameters*>(
      ::control::PIDParameters::internal_default_instance());
  ::control::_MultipointPreviewPPConfig_default_instance_._instance.get_mutable()->integration_params_ = const_cast< ::control::IntegrationParameters*>(
      ::control::IntegrationParameters::internal_default_instance());
}
class MultipointPreviewPPConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MultipointPreviewPPConfig>()._has_bits_);
  static void set_has_base_preview_dis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_base_preview_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::control::PIDParameters& pid_params(const MultipointPreviewPPConfig* msg);
  static void set_has_pid_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kappa_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_kappa_time_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enable_predis_compensation_baseon_lat_err(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coef_with_lat_error(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dis_compensation_threshold_with_lat_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_query_time_nearest_point_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_query_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_enable_lat_error_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_heading_error_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mean_filter_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::control::IntegrationParameters& integration_params(const MultipointPreviewPPConfig* msg);
  static void set_has_integration_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::control::PIDParameters&
MultipointPreviewPPConfig::_Internal::pid_params(const MultipointPreviewPPConfig* msg) {
  return *msg->pid_params_;
}
const ::control::IntegrationParameters&
MultipointPreviewPPConfig::_Internal::integration_params(const MultipointPreviewPPConfig* msg) {
  return *msg->integration_params_;
}
MultipointPreviewPPConfig::MultipointPreviewPPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  preview_time_coef_(arena),
  preview_point_weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.MultipointPreviewPPConfig)
}
MultipointPreviewPPConfig::MultipointPreviewPPConfig(const MultipointPreviewPPConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      preview_time_coef_(from.preview_time_coef_),
      preview_point_weight_(from.preview_point_weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pid_params()) {
    pid_params_ = new ::control::PIDParameters(*from.pid_params_);
  } else {
    pid_params_ = nullptr;
  }
  if (from._internal_has_integration_params()) {
    integration_params_ = new ::control::IntegrationParameters(*from.integration_params_);
  } else {
    integration_params_ = nullptr;
  }
  ::memcpy(&enable_predis_compensation_baseon_lat_err_, &from.enable_predis_compensation_baseon_lat_err_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_relative_time_) -
    reinterpret_cast<char*>(&enable_predis_compensation_baseon_lat_err_)) + sizeof(query_relative_time_));
  // @@protoc_insertion_point(copy_constructor:control.MultipointPreviewPPConfig)
}

void MultipointPreviewPPConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipointPreviewPPConfig_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base);
  ::memset(&pid_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_heading_error_filter_) -
      reinterpret_cast<char*>(&pid_params_)) + sizeof(enable_heading_error_filter_));
  base_preview_dis_ = 5;
  base_preview_time_ = 2;
  kappa_threshold_ = 0.02;
  coef_with_lat_error_ = 1.8;
  dis_compensation_threshold_with_lat_error_ = 1.5;
  kappa_time_coef_ = 10;
  mean_filter_window_size_ = 5;
  query_relative_time_ = 0.8;
}

MultipointPreviewPPConfig::~MultipointPreviewPPConfig() {
  // @@protoc_insertion_point(destructor:control.MultipointPreviewPPConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultipointPreviewPPConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pid_params_;
  if (this != internal_default_instance()) delete integration_params_;
}

void MultipointPreviewPPConfig::ArenaDtor(void* object) {
  MultipointPreviewPPConfig* _this = reinterpret_cast< MultipointPreviewPPConfig* >(object);
  (void)_this;
}
void MultipointPreviewPPConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultipointPreviewPPConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipointPreviewPPConfig& MultipointPreviewPPConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipointPreviewPPConfig_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.base);
  return *internal_default_instance();
}


void MultipointPreviewPPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.MultipointPreviewPPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preview_time_coef_.Clear();
  preview_point_weight_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pid_params_ != nullptr);
      pid_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(integration_params_ != nullptr);
      integration_params_->Clear();
    }
  }
  ::memset(&enable_predis_compensation_baseon_lat_err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_heading_error_filter_) -
      reinterpret_cast<char*>(&enable_predis_compensation_baseon_lat_err_)) + sizeof(enable_heading_error_filter_));
  if (cached_has_bits & 0x000000c0u) {
    base_preview_dis_ = 5;
    base_preview_time_ = 2;
  }
  if (cached_has_bits & 0x00003f00u) {
    kappa_threshold_ = 0.02;
    coef_with_lat_error_ = 1.8;
    dis_compensation_threshold_with_lat_error_ = 1.5;
    kappa_time_coef_ = 10;
    mean_filter_window_size_ = 5;
    query_relative_time_ = 0.8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultipointPreviewPPConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float base_preview_dis = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_base_preview_dis(&has_bits);
          base_preview_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float base_preview_time = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_base_preview_time(&has_bits);
          base_preview_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float preview_time_coef = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_preview_time_coef(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_preview_time_coef(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.PIDParameters pid_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pid_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double preview_point_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_preview_point_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_preview_point_weight(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double kappa_threshold = 6 [default = 0.02];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_kappa_threshold(&has_bits);
          kappa_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float kappa_time_coef = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_kappa_time_coef(&has_bits);
          kappa_time_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enable_predis_compensation_baseon_lat_err(&has_bits);
          enable_predis_compensation_baseon_lat_err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double coef_with_lat_error = 9 [default = 1.8];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_coef_with_lat_error(&has_bits);
          coef_with_lat_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_dis_compensation_threshold_with_lat_error(&has_bits);
          dis_compensation_threshold_with_lat_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool query_time_nearest_point_only = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_query_time_nearest_point_only(&has_bits);
          query_time_nearest_point_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double query_relative_time = 12 [default = 0.8];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_query_relative_time(&has_bits);
          query_relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_lat_error_filter = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_enable_lat_error_filter(&has_bits);
          enable_lat_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_heading_error_filter = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enable_heading_error_filter(&has_bits);
          enable_heading_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mean_filter_window_size = 15 [default = 5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_mean_filter_window_size(&has_bits);
          mean_filter_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.IntegrationParameters integration_params = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_integration_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipointPreviewPPConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.MultipointPreviewPPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base_preview_dis = 1 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_base_preview_dis(), target);
  }

  // optional float base_preview_time = 2 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_base_preview_time(), target);
  }

  // repeated float preview_time_coef = 3;
  for (int i = 0, n = this->_internal_preview_time_coef_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_preview_time_coef(i), target);
  }

  // optional .control.PIDParameters pid_params = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pid_params(this), target, stream);
  }

  // repeated double preview_point_weight = 5;
  for (int i = 0, n = this->_internal_preview_point_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_preview_point_weight(i), target);
  }

  // optional double kappa_threshold = 6 [default = 0.02];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_kappa_threshold(), target);
  }

  // optional float kappa_time_coef = 7 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_kappa_time_coef(), target);
  }

  // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_predis_compensation_baseon_lat_err(), target);
  }

  // optional double coef_with_lat_error = 9 [default = 1.8];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_coef_with_lat_error(), target);
  }

  // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_dis_compensation_threshold_with_lat_error(), target);
  }

  // optional bool query_time_nearest_point_only = 11 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_query_time_nearest_point_only(), target);
  }

  // optional double query_relative_time = 12 [default = 0.8];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_query_relative_time(), target);
  }

  // optional bool enable_lat_error_filter = 13 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_enable_lat_error_filter(), target);
  }

  // optional bool enable_heading_error_filter = 14 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_heading_error_filter(), target);
  }

  // optional int32 mean_filter_window_size = 15 [default = 5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_mean_filter_window_size(), target);
  }

  // optional .control.IntegrationParameters integration_params = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::integration_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.MultipointPreviewPPConfig)
  return target;
}

size_t MultipointPreviewPPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.MultipointPreviewPPConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float preview_time_coef = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_preview_time_coef_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_preview_time_coef_size());
    total_size += data_size;
  }

  // repeated double preview_point_weight = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_preview_point_weight_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_preview_point_weight_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.PIDParameters pid_params = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pid_params_);
    }

    // optional .control.IntegrationParameters integration_params = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *integration_params_);
    }

    // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool query_time_nearest_point_only = 11 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_lat_error_filter = 13 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enable_heading_error_filter = 14 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float base_preview_dis = 1 [default = 5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float base_preview_time = 2 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double kappa_threshold = 6 [default = 0.02];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double coef_with_lat_error = 9 [default = 1.8];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional float kappa_time_coef = 7 [default = 10];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 mean_filter_window_size = 15 [default = 5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mean_filter_window_size());
    }

    // optional double query_relative_time = 12 [default = 0.8];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipointPreviewPPConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.MultipointPreviewPPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipointPreviewPPConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipointPreviewPPConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.MultipointPreviewPPConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.MultipointPreviewPPConfig)
    MergeFrom(*source);
  }
}

void MultipointPreviewPPConfig::MergeFrom(const MultipointPreviewPPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.MultipointPreviewPPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preview_time_coef_.MergeFrom(from.preview_time_coef_);
  preview_point_weight_.MergeFrom(from.preview_point_weight_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pid_params()->::control::PIDParameters::MergeFrom(from._internal_pid_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_integration_params()->::control::IntegrationParameters::MergeFrom(from._internal_integration_params());
    }
    if (cached_has_bits & 0x00000004u) {
      enable_predis_compensation_baseon_lat_err_ = from.enable_predis_compensation_baseon_lat_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      query_time_nearest_point_only_ = from.query_time_nearest_point_only_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_lat_error_filter_ = from.enable_lat_error_filter_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_heading_error_filter_ = from.enable_heading_error_filter_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_preview_dis_ = from.base_preview_dis_;
    }
    if (cached_has_bits & 0x00000080u) {
      base_preview_time_ = from.base_preview_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      kappa_threshold_ = from.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      coef_with_lat_error_ = from.coef_with_lat_error_;
    }
    if (cached_has_bits & 0x00000400u) {
      dis_compensation_threshold_with_lat_error_ = from.dis_compensation_threshold_with_lat_error_;
    }
    if (cached_has_bits & 0x00000800u) {
      kappa_time_coef_ = from.kappa_time_coef_;
    }
    if (cached_has_bits & 0x00001000u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      query_relative_time_ = from.query_relative_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultipointPreviewPPConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.MultipointPreviewPPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipointPreviewPPConfig::CopyFrom(const MultipointPreviewPPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.MultipointPreviewPPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipointPreviewPPConfig::IsInitialized() const {
  return true;
}

void MultipointPreviewPPConfig::InternalSwap(MultipointPreviewPPConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  preview_time_coef_.InternalSwap(&other->preview_time_coef_);
  preview_point_weight_.InternalSwap(&other->preview_point_weight_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, enable_heading_error_filter_)
      + sizeof(MultipointPreviewPPConfig::enable_heading_error_filter_)
      - PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, pid_params_)>(
          reinterpret_cast<char*>(&pid_params_),
          reinterpret_cast<char*>(&other->pid_params_));
  swap(base_preview_dis_, other->base_preview_dis_);
  swap(base_preview_time_, other->base_preview_time_);
  swap(kappa_threshold_, other->kappa_threshold_);
  swap(coef_with_lat_error_, other->coef_with_lat_error_);
  swap(dis_compensation_threshold_with_lat_error_, other->dis_compensation_threshold_with_lat_error_);
  swap(kappa_time_coef_, other->kappa_time_coef_);
  swap(mean_filter_window_size_, other->mean_filter_window_size_);
  swap(query_relative_time_, other->query_relative_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipointPreviewPPConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::PIDParameters* Arena::CreateMaybeMessage< ::control::PIDParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PIDParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::control::IntegrationParameters* Arena::CreateMaybeMessage< ::control::IntegrationParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::IntegrationParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::control::MultipointPreviewPPConfig* Arena::CreateMaybeMessage< ::control::MultipointPreviewPPConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::MultipointPreviewPPConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

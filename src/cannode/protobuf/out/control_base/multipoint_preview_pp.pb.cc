// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/multipoint_preview_pp.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/multipoint_preview_pp.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {

inline constexpr PIDParameters::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        enable_adjust_kp_{false},
        larger_kp_threshold_{0.06f},
        enable_pid_{true},
        kp_{1},
        ki_{2},
        kd_{0.6f},
        kp_coef_full_laod_{1},
        smaller_kd_{0.2f},
        kp_coef_{1.05f},
        max_kp_threshold_{0.02f} {}

template <typename>
PROTOBUF_CONSTEXPR PIDParameters::PIDParameters(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PIDParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PIDParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PIDParametersDefaultTypeInternal() {}
  union {
    PIDParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PIDParametersDefaultTypeInternal _PIDParameters_default_instance_;

inline constexpr IntegrationParameters::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        enable_integration_{false},
        kappa_threshold_{0.01f},
        forgetting_factor_{0.98f},
        integrator_saturation_threshold_{5},
        speed_threshold_{0.5f},
        lat_error_threshold_{2},
        ki_{1},
        reversse_ki_{2} {}

template <typename>
PROTOBUF_CONSTEXPR IntegrationParameters::IntegrationParameters(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IntegrationParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntegrationParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntegrationParametersDefaultTypeInternal() {}
  union {
    IntegrationParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntegrationParametersDefaultTypeInternal _IntegrationParameters_default_instance_;

inline constexpr MultipointPreviewPPConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        preview_time_coef_{},
        preview_point_weight_{},
        pid_params_{nullptr},
        integration_params_{nullptr},
        enable_predis_compensation_baseon_lat_err_{false},
        query_time_nearest_point_only_{false},
        enable_lat_error_filter_{false},
        enable_heading_error_filter_{false},
        base_preview_dis_{5},
        base_preview_time_{2},
        kappa_threshold_{0.02},
        coef_with_lat_error_{1.8},
        dis_compensation_threshold_with_lat_error_{1.5},
        kappa_time_coef_{10},
        mean_filter_window_size_{5},
        query_relative_time_{0.8} {}

template <typename>
PROTOBUF_CONSTEXPR MultipointPreviewPPConfig::MultipointPreviewPPConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MultipointPreviewPPConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultipointPreviewPPConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultipointPreviewPPConfigDefaultTypeInternal() {}
  union {
    MultipointPreviewPPConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultipointPreviewPPConfigDefaultTypeInternal _MultipointPreviewPPConfig_default_instance_;
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.enable_pid_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.kp_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.ki_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.kd_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.kp_coef_full_laod_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.smaller_kd_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.enable_adjust_kp_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.kp_coef_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.max_kp_threshold_),
        PROTOBUF_FIELD_OFFSET(::control::PIDParameters, _impl_.larger_kp_threshold_),
        2,
        3,
        4,
        5,
        6,
        7,
        0,
        8,
        9,
        1,
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.enable_integration_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.forgetting_factor_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.integrator_saturation_threshold_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.speed_threshold_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.lat_error_threshold_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.ki_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.reversse_ki_),
        PROTOBUF_FIELD_OFFSET(::control::IntegrationParameters, _impl_.kappa_threshold_),
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        1,
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.base_preview_dis_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.base_preview_time_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.preview_time_coef_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.pid_params_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.preview_point_weight_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.kappa_threshold_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.kappa_time_coef_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.enable_predis_compensation_baseon_lat_err_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.coef_with_lat_error_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.dis_compensation_threshold_with_lat_error_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.query_time_nearest_point_only_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.query_relative_time_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.enable_lat_error_filter_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.enable_heading_error_filter_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.mean_filter_window_size_),
        PROTOBUF_FIELD_OFFSET(::control::MultipointPreviewPPConfig, _impl_.integration_params_),
        6,
        7,
        ~0u,
        0,
        ~0u,
        8,
        11,
        2,
        9,
        10,
        3,
        13,
        4,
        5,
        12,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 18, -1, sizeof(::control::PIDParameters)},
        {28, 44, -1, sizeof(::control::IntegrationParameters)},
        {52, 76, -1, sizeof(::control::MultipointPreviewPPConfig)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::_PIDParameters_default_instance_._instance,
    &::control::_IntegrationParameters_default_instance_._instance,
    &::control::_MultipointPreviewPPConfig_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n(control_base/multipoint_preview_pp.pro"
    "to\022\007control\"\212\002\n\rPIDParameters\022\030\n\nenable_"
    "pid\030\001 \001(\010:\004true\022\r\n\002kp\030\002 \001(\002:\0011\022\r\n\002ki\030\003 \001"
    "(\002:\0012\022\017\n\002kd\030\004 \001(\002:\0030.6\022\034\n\021kp_coef_full_l"
    "aod\030\005 \001(\002:\0011\022\027\n\nsmaller_kd\030\006 \001(\002:\0030.2\022\037\n"
    "\020enable_adjust_kp\030\007 \001(\010:\005false\022\025\n\007kp_coe"
    "f\030\010 \001(\002:\0041.05\022\036\n\020max_kp_threshold\030\t \001(\002:"
    "\0040.02\022!\n\023larger_kp_threshold\030\n \001(\002:\0040.06"
    "\"\213\002\n\025IntegrationParameters\022!\n\022enable_int"
    "egration\030\001 \001(\010:\005false\022\037\n\021forgetting_fact"
    "or\030\002 \001(\002:\0040.98\022*\n\037integrator_saturation_"
    "threshold\030\003 \001(\002:\0015\022\034\n\017speed_threshold\030\004 "
    "\001(\002:\0030.5\022\036\n\023lat_error_threshold\030\005 \001(\002:\0012"
    "\022\r\n\002ki\030\006 \001(\002:\0011\022\026\n\013reversse_ki\030\007 \001(\002:\0012\022"
    "\035\n\017kappa_threshold\030\010 \001(\002:\0040.01\"\217\005\n\031Multi"
    "pointPreviewPPConfig\022\033\n\020base_preview_dis"
    "\030\001 \001(\002:\0015\022\034\n\021base_preview_time\030\002 \001(\002:\0012\022"
    "\031\n\021preview_time_coef\030\003 \003(\002\022*\n\npid_params"
    "\030\004 \001(\0132\026.control.PIDParameters\022\034\n\024previe"
    "w_point_weight\030\005 \003(\001\022\035\n\017kappa_threshold\030"
    "\006 \001(\001:\0040.02\022\033\n\017kappa_time_coef\030\007 \001(\002:\00210"
    "\0228\n)enable_predis_compensation_baseon_la"
    "t_err\030\010 \001(\010:\005false\022 \n\023coef_with_lat_erro"
    "r\030\t \001(\001:\0031.8\0226\n)dis_compensation_thresho"
    "ld_with_lat_error\030\n \001(\001:\0031.5\022,\n\035query_ti"
    "me_nearest_point_only\030\013 \001(\010:\005false\022 \n\023qu"
    "ery_relative_time\030\014 \001(\001:\0030.8\022&\n\027enable_l"
    "at_error_filter\030\r \001(\010:\005false\022*\n\033enable_h"
    "eading_error_filter\030\016 \001(\010:\005false\022\"\n\027mean"
    "_filter_window_size\030\017 \001(\005:\0015\022:\n\022integrat"
    "ion_params\030\020 \001(\0132\036.control.IntegrationPa"
    "rameters"
};
static ::absl::once_flag descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto = {
    false,
    false,
    1248,
    descriptor_table_protodef_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto,
    "control_base/multipoint_preview_pp.proto",
    &descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto,
    file_level_service_descriptors_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto,
};
namespace control {
// ===================================================================

class PIDParameters::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PIDParameters>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_._has_bits_);
};

PIDParameters::PIDParameters(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PIDParameters)
}
PIDParameters::PIDParameters(
    ::google::protobuf::Arena* arena, const PIDParameters& from)
    : PIDParameters(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PIDParameters::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        larger_kp_threshold_{0.06f},
        enable_pid_{true},
        kp_{1},
        ki_{2},
        kd_{0.6f},
        kp_coef_full_laod_{1},
        smaller_kd_{0.2f},
        kp_coef_{1.05f},
        max_kp_threshold_{0.02f} {}

inline void PIDParameters::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enable_adjust_kp_ = {};
}
PIDParameters::~PIDParameters() {
  // @@protoc_insertion_point(destructor:control.PIDParameters)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PIDParameters::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PIDParameters::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PIDParameters::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PIDParameters>(),
            ::google::protobuf::Message::GetNewImpl<PIDParameters>(),
            ::google::protobuf::Message::GetClearImpl<PIDParameters>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<PIDParameters>(),
                ::google::protobuf::Message::GetSerializeImpl<PIDParameters>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_._cached_size_),
            false,
        },
        &PIDParameters::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PIDParameters::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> PIDParameters::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PIDParameters_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::PIDParameters>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable_pid = 1 [default = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PIDParameters, _impl_.enable_pid_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.enable_pid_)}},
    // optional float kp = 2 [default = 1];
    {::_pbi::TcParser::FastF32S1,
     {21, 3, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kp_)}},
    // optional float ki = 3 [default = 2];
    {::_pbi::TcParser::FastF32S1,
     {29, 4, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.ki_)}},
    // optional float kd = 4 [default = 0.6];
    {::_pbi::TcParser::FastF32S1,
     {37, 5, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kd_)}},
    // optional float kp_coef_full_laod = 5 [default = 1];
    {::_pbi::TcParser::FastF32S1,
     {45, 6, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kp_coef_full_laod_)}},
    // optional float smaller_kd = 6 [default = 0.2];
    {::_pbi::TcParser::FastF32S1,
     {53, 7, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.smaller_kd_)}},
    // optional bool enable_adjust_kp = 7 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PIDParameters, _impl_.enable_adjust_kp_), 0>(),
     {56, 0, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.enable_adjust_kp_)}},
    // optional float kp_coef = 8 [default = 1.05];
    {::_pbi::TcParser::FastF32S1,
     {69, 8, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kp_coef_)}},
    // optional float max_kp_threshold = 9 [default = 0.02];
    {::_pbi::TcParser::FastF32S1,
     {77, 9, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.max_kp_threshold_)}},
    // optional float larger_kp_threshold = 10 [default = 0.06];
    {::_pbi::TcParser::FastF32S1,
     {85, 1, 0, PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.larger_kp_threshold_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable_pid = 1 [default = true];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.enable_pid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional float kp = 2 [default = 1];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ki = 3 [default = 2];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.ki_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float kd = 4 [default = 0.6];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kd_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float kp_coef_full_laod = 5 [default = 1];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kp_coef_full_laod_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float smaller_kd = 6 [default = 0.2];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.smaller_kd_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional bool enable_adjust_kp = 7 [default = false];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.enable_adjust_kp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional float kp_coef = 8 [default = 1.05];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.kp_coef_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float max_kp_threshold = 9 [default = 0.02];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.max_kp_threshold_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float larger_kp_threshold = 10 [default = 0.06];
    {PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.larger_kp_threshold_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PIDParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PIDParameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.enable_adjust_kp_ = false;
    _impl_.larger_kp_threshold_ = 0.06f;
    _impl_.enable_pid_ = true;
    _impl_.kp_ = 1;
    _impl_.ki_ = 2;
    _impl_.kd_ = 0.6f;
    _impl_.kp_coef_full_laod_ = 1;
    _impl_.smaller_kd_ = 0.2f;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.kp_coef_ = 1.05f;
    _impl_.max_kp_threshold_ = 0.02f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* PIDParameters::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PIDParameters)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable_pid = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable_pid(), target);
  }

  // optional float kp = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_kp(), target);
  }

  // optional float ki = 3 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_ki(), target);
  }

  // optional float kd = 4 [default = 0.6];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_kd(), target);
  }

  // optional float kp_coef_full_laod = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_kp_coef_full_laod(), target);
  }

  // optional float smaller_kd = 6 [default = 0.2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_smaller_kd(), target);
  }

  // optional bool enable_adjust_kp = 7 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_enable_adjust_kp(), target);
  }

  // optional float kp_coef = 8 [default = 1.05];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_kp_coef(), target);
  }

  // optional float max_kp_threshold = 9 [default = 0.02];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_max_kp_threshold(), target);
  }

  // optional float larger_kp_threshold = 10 [default = 0.06];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_larger_kp_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PIDParameters)
  return target;
}

::size_t PIDParameters::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.PIDParameters)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_adjust_kp = 7 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }
    // optional float larger_kp_threshold = 10 [default = 0.06];
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }
    // optional bool enable_pid = 1 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }
    // optional float kp = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }
    // optional float ki = 3 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }
    // optional float kd = 4 [default = 0.6];
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }
    // optional float kp_coef_full_laod = 5 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }
    // optional float smaller_kd = 6 [default = 0.2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }
  }
  if (cached_has_bits & 0x00000300u) {
    // optional float kp_coef = 8 [default = 1.05];
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }
    // optional float max_kp_threshold = 9 [default = 0.02];
    if (cached_has_bits & 0x00000200u) {
      total_size += 5;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void PIDParameters::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PIDParameters*>(&to_msg);
  auto& from = static_cast<const PIDParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.PIDParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.enable_adjust_kp_ = from._impl_.enable_adjust_kp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.larger_kp_threshold_ = from._impl_.larger_kp_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.enable_pid_ = from._impl_.enable_pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kp_ = from._impl_.kp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ki_ = from._impl_.ki_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kd_ = from._impl_.kd_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.kp_coef_full_laod_ = from._impl_.kp_coef_full_laod_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.smaller_kd_ = from._impl_.smaller_kd_;
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.kp_coef_ = from._impl_.kp_coef_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_kp_threshold_ = from._impl_.max_kp_threshold_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PIDParameters::CopyFrom(const PIDParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PIDParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PIDParameters::InternalSwap(PIDParameters* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.max_kp_threshold_)
      + sizeof(PIDParameters::_impl_.max_kp_threshold_)
      - PROTOBUF_FIELD_OFFSET(PIDParameters, _impl_.enable_adjust_kp_)>(
          reinterpret_cast<char*>(&_impl_.enable_adjust_kp_),
          reinterpret_cast<char*>(&other->_impl_.enable_adjust_kp_));
}

::google::protobuf::Metadata PIDParameters::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IntegrationParameters::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IntegrationParameters>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_._has_bits_);
};

IntegrationParameters::IntegrationParameters(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.IntegrationParameters)
}
IntegrationParameters::IntegrationParameters(
    ::google::protobuf::Arena* arena, const IntegrationParameters& from)
    : IntegrationParameters(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IntegrationParameters::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        kappa_threshold_{0.01f},
        forgetting_factor_{0.98f},
        integrator_saturation_threshold_{5},
        speed_threshold_{0.5f},
        lat_error_threshold_{2},
        ki_{1},
        reversse_ki_{2} {}

inline void IntegrationParameters::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enable_integration_ = {};
}
IntegrationParameters::~IntegrationParameters() {
  // @@protoc_insertion_point(destructor:control.IntegrationParameters)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IntegrationParameters::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    IntegrationParameters::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &IntegrationParameters::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<IntegrationParameters>(),
            ::google::protobuf::Message::GetNewImpl<IntegrationParameters>(),
            ::google::protobuf::Message::GetClearImpl<IntegrationParameters>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<IntegrationParameters>(),
                ::google::protobuf::Message::GetSerializeImpl<IntegrationParameters>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_._cached_size_),
            false,
        },
        &IntegrationParameters::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* IntegrationParameters::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> IntegrationParameters::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IntegrationParameters_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::IntegrationParameters>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float kappa_threshold = 8 [default = 0.01];
    {::_pbi::TcParser::FastF32S1,
     {69, 1, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.kappa_threshold_)}},
    // optional bool enable_integration = 1 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IntegrationParameters, _impl_.enable_integration_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.enable_integration_)}},
    // optional float forgetting_factor = 2 [default = 0.98];
    {::_pbi::TcParser::FastF32S1,
     {21, 2, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.forgetting_factor_)}},
    // optional float integrator_saturation_threshold = 3 [default = 5];
    {::_pbi::TcParser::FastF32S1,
     {29, 3, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.integrator_saturation_threshold_)}},
    // optional float speed_threshold = 4 [default = 0.5];
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.speed_threshold_)}},
    // optional float lat_error_threshold = 5 [default = 2];
    {::_pbi::TcParser::FastF32S1,
     {45, 5, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.lat_error_threshold_)}},
    // optional float ki = 6 [default = 1];
    {::_pbi::TcParser::FastF32S1,
     {53, 6, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.ki_)}},
    // optional float reversse_ki = 7 [default = 2];
    {::_pbi::TcParser::FastF32S1,
     {61, 7, 0, PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.reversse_ki_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable_integration = 1 [default = false];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.enable_integration_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional float forgetting_factor = 2 [default = 0.98];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.forgetting_factor_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float integrator_saturation_threshold = 3 [default = 5];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.integrator_saturation_threshold_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float speed_threshold = 4 [default = 0.5];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.speed_threshold_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float lat_error_threshold = 5 [default = 2];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.lat_error_threshold_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ki = 6 [default = 1];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.ki_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float reversse_ki = 7 [default = 2];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.reversse_ki_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float kappa_threshold = 8 [default = 0.01];
    {PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.kappa_threshold_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void IntegrationParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:control.IntegrationParameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.enable_integration_ = false;
    _impl_.kappa_threshold_ = 0.01f;
    _impl_.forgetting_factor_ = 0.98f;
    _impl_.integrator_saturation_threshold_ = 5;
    _impl_.speed_threshold_ = 0.5f;
    _impl_.lat_error_threshold_ = 2;
    _impl_.ki_ = 1;
    _impl_.reversse_ki_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* IntegrationParameters::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.IntegrationParameters)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable_integration = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable_integration(), target);
  }

  // optional float forgetting_factor = 2 [default = 0.98];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_forgetting_factor(), target);
  }

  // optional float integrator_saturation_threshold = 3 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_integrator_saturation_threshold(), target);
  }

  // optional float speed_threshold = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_speed_threshold(), target);
  }

  // optional float lat_error_threshold = 5 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_lat_error_threshold(), target);
  }

  // optional float ki = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_ki(), target);
  }

  // optional float reversse_ki = 7 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_reversse_ki(), target);
  }

  // optional float kappa_threshold = 8 [default = 0.01];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_kappa_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.IntegrationParameters)
  return target;
}

::size_t IntegrationParameters::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.IntegrationParameters)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_integration = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }
    // optional float kappa_threshold = 8 [default = 0.01];
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }
    // optional float forgetting_factor = 2 [default = 0.98];
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }
    // optional float integrator_saturation_threshold = 3 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }
    // optional float speed_threshold = 4 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }
    // optional float lat_error_threshold = 5 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }
    // optional float ki = 6 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }
    // optional float reversse_ki = 7 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void IntegrationParameters::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IntegrationParameters*>(&to_msg);
  auto& from = static_cast<const IntegrationParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.IntegrationParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.enable_integration_ = from._impl_.enable_integration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kappa_threshold_ = from._impl_.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.forgetting_factor_ = from._impl_.forgetting_factor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.integrator_saturation_threshold_ = from._impl_.integrator_saturation_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.speed_threshold_ = from._impl_.speed_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.lat_error_threshold_ = from._impl_.lat_error_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ki_ = from._impl_.ki_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.reversse_ki_ = from._impl_.reversse_ki_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IntegrationParameters::CopyFrom(const IntegrationParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.IntegrationParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IntegrationParameters::InternalSwap(IntegrationParameters* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.reversse_ki_)
      + sizeof(IntegrationParameters::_impl_.reversse_ki_)
      - PROTOBUF_FIELD_OFFSET(IntegrationParameters, _impl_.enable_integration_)>(
          reinterpret_cast<char*>(&_impl_.enable_integration_),
          reinterpret_cast<char*>(&other->_impl_.enable_integration_));
}

::google::protobuf::Metadata IntegrationParameters::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MultipointPreviewPPConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MultipointPreviewPPConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_._has_bits_);
};

MultipointPreviewPPConfig::MultipointPreviewPPConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.MultipointPreviewPPConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultipointPreviewPPConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::MultipointPreviewPPConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        preview_time_coef_{visibility, arena, from.preview_time_coef_},
        preview_point_weight_{visibility, arena, from.preview_point_weight_} {}

MultipointPreviewPPConfig::MultipointPreviewPPConfig(
    ::google::protobuf::Arena* arena,
    const MultipointPreviewPPConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MultipointPreviewPPConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pid_params_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::PIDParameters>(
                              arena, *from._impl_.pid_params_)
                        : nullptr;
  _impl_.integration_params_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::IntegrationParameters>(
                              arena, *from._impl_.integration_params_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_predis_compensation_baseon_lat_err_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enable_predis_compensation_baseon_lat_err_),
           offsetof(Impl_, query_relative_time_) -
               offsetof(Impl_, enable_predis_compensation_baseon_lat_err_) +
               sizeof(Impl_::query_relative_time_));

  // @@protoc_insertion_point(copy_constructor:control.MultipointPreviewPPConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultipointPreviewPPConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        preview_time_coef_{visibility, arena},
        preview_point_weight_{visibility, arena},
        base_preview_dis_{5},
        base_preview_time_{2},
        kappa_threshold_{0.02},
        coef_with_lat_error_{1.8},
        dis_compensation_threshold_with_lat_error_{1.5},
        kappa_time_coef_{10},
        mean_filter_window_size_{5},
        query_relative_time_{0.8} {}

inline void MultipointPreviewPPConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pid_params_),
           0,
           offsetof(Impl_, enable_heading_error_filter_) -
               offsetof(Impl_, pid_params_) +
               sizeof(Impl_::enable_heading_error_filter_));
}
MultipointPreviewPPConfig::~MultipointPreviewPPConfig() {
  // @@protoc_insertion_point(destructor:control.MultipointPreviewPPConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultipointPreviewPPConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pid_params_;
  delete _impl_.integration_params_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MultipointPreviewPPConfig::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MultipointPreviewPPConfig::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MultipointPreviewPPConfig>(),
            ::google::protobuf::Message::GetNewImpl<MultipointPreviewPPConfig>(),
            ::google::protobuf::Message::GetClearImpl<MultipointPreviewPPConfig>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<MultipointPreviewPPConfig>(),
                ::google::protobuf::Message::GetSerializeImpl<MultipointPreviewPPConfig>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_._cached_size_),
            false,
        },
        &MultipointPreviewPPConfig::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MultipointPreviewPPConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 2, 0, 2> MultipointPreviewPPConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MultipointPreviewPPConfig_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::MultipointPreviewPPConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .control.IntegrationParameters integration_params = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 1, 1, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.integration_params_)}},
    // optional float base_preview_dis = 1 [default = 5];
    {::_pbi::TcParser::FastF32S1,
     {13, 6, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.base_preview_dis_)}},
    // optional float base_preview_time = 2 [default = 2];
    {::_pbi::TcParser::FastF32S1,
     {21, 7, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.base_preview_time_)}},
    // repeated float preview_time_coef = 3;
    {::_pbi::TcParser::FastF32R1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.preview_time_coef_)}},
    // optional .control.PIDParameters pid_params = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.pid_params_)}},
    // repeated double preview_point_weight = 5;
    {::_pbi::TcParser::FastF64R1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.preview_point_weight_)}},
    // optional double kappa_threshold = 6 [default = 0.02];
    {::_pbi::TcParser::FastF64S1,
     {49, 8, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.kappa_threshold_)}},
    // optional float kappa_time_coef = 7 [default = 10];
    {::_pbi::TcParser::FastF32S1,
     {61, 11, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.kappa_time_coef_)}},
    // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MultipointPreviewPPConfig, _impl_.enable_predis_compensation_baseon_lat_err_), 2>(),
     {64, 2, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.enable_predis_compensation_baseon_lat_err_)}},
    // optional double coef_with_lat_error = 9 [default = 1.8];
    {::_pbi::TcParser::FastF64S1,
     {73, 9, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.coef_with_lat_error_)}},
    // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
    {::_pbi::TcParser::FastF64S1,
     {81, 10, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.dis_compensation_threshold_with_lat_error_)}},
    // optional bool query_time_nearest_point_only = 11 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MultipointPreviewPPConfig, _impl_.query_time_nearest_point_only_), 3>(),
     {88, 3, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.query_time_nearest_point_only_)}},
    // optional double query_relative_time = 12 [default = 0.8];
    {::_pbi::TcParser::FastF64S1,
     {97, 13, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.query_relative_time_)}},
    // optional bool enable_lat_error_filter = 13 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MultipointPreviewPPConfig, _impl_.enable_lat_error_filter_), 4>(),
     {104, 4, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.enable_lat_error_filter_)}},
    // optional bool enable_heading_error_filter = 14 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MultipointPreviewPPConfig, _impl_.enable_heading_error_filter_), 5>(),
     {112, 5, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.enable_heading_error_filter_)}},
    // optional int32 mean_filter_window_size = 15 [default = 5];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MultipointPreviewPPConfig, _impl_.mean_filter_window_size_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.mean_filter_window_size_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float base_preview_dis = 1 [default = 5];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.base_preview_dis_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float base_preview_time = 2 [default = 2];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.base_preview_time_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // repeated float preview_time_coef = 3;
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.preview_time_coef_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
    // optional .control.PIDParameters pid_params = 4;
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.pid_params_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated double preview_point_weight = 5;
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.preview_point_weight_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // optional double kappa_threshold = 6 [default = 0.02];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.kappa_threshold_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional float kappa_time_coef = 7 [default = 10];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.kappa_time_coef_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.enable_predis_compensation_baseon_lat_err_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double coef_with_lat_error = 9 [default = 1.8];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.coef_with_lat_error_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.dis_compensation_threshold_with_lat_error_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool query_time_nearest_point_only = 11 [default = false];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.query_time_nearest_point_only_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double query_relative_time = 12 [default = 0.8];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.query_relative_time_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool enable_lat_error_filter = 13 [default = false];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.enable_lat_error_filter_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_heading_error_filter = 14 [default = false];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.enable_heading_error_filter_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 mean_filter_window_size = 15 [default = 5];
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.mean_filter_window_size_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .control.IntegrationParameters integration_params = 16;
    {PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.integration_params_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::PIDParameters>()},
    {::_pbi::TcParser::GetTable<::control::IntegrationParameters>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MultipointPreviewPPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.MultipointPreviewPPConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preview_time_coef_.Clear();
  _impl_.preview_point_weight_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pid_params_ != nullptr);
      _impl_.pid_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.integration_params_ != nullptr);
      _impl_.integration_params_->Clear();
    }
  }
  ::memset(&_impl_.enable_predis_compensation_baseon_lat_err_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_heading_error_filter_) -
      reinterpret_cast<char*>(&_impl_.enable_predis_compensation_baseon_lat_err_)) + sizeof(_impl_.enable_heading_error_filter_));
  if (cached_has_bits & 0x000000c0u) {
    _impl_.base_preview_dis_ = 5;
    _impl_.base_preview_time_ = 2;
  }
  if (cached_has_bits & 0x00003f00u) {
    _impl_.kappa_threshold_ = 0.02;
    _impl_.coef_with_lat_error_ = 1.8;
    _impl_.dis_compensation_threshold_with_lat_error_ = 1.5;
    _impl_.kappa_time_coef_ = 10;
    _impl_.mean_filter_window_size_ = 5;
    _impl_.query_relative_time_ = 0.8;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MultipointPreviewPPConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.MultipointPreviewPPConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float base_preview_dis = 1 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_base_preview_dis(), target);
  }

  // optional float base_preview_time = 2 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_base_preview_time(), target);
  }

  // repeated float preview_time_coef = 3;
  for (int i = 0, n = this->_internal_preview_time_coef_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_preview_time_coef().Get(i), target);
  }

  // optional .control.PIDParameters pid_params = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.pid_params_, _impl_.pid_params_->GetCachedSize(), target, stream);
  }

  // repeated double preview_point_weight = 5;
  for (int i = 0, n = this->_internal_preview_point_weight_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_preview_point_weight().Get(i), target);
  }

  // optional double kappa_threshold = 6 [default = 0.02];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_kappa_threshold(), target);
  }

  // optional float kappa_time_coef = 7 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_kappa_time_coef(), target);
  }

  // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_enable_predis_compensation_baseon_lat_err(), target);
  }

  // optional double coef_with_lat_error = 9 [default = 1.8];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_coef_with_lat_error(), target);
  }

  // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_dis_compensation_threshold_with_lat_error(), target);
  }

  // optional bool query_time_nearest_point_only = 11 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_query_time_nearest_point_only(), target);
  }

  // optional double query_relative_time = 12 [default = 0.8];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_query_relative_time(), target);
  }

  // optional bool enable_lat_error_filter = 13 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_enable_lat_error_filter(), target);
  }

  // optional bool enable_heading_error_filter = 14 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_enable_heading_error_filter(), target);
  }

  // optional int32 mean_filter_window_size = 15 [default = 5];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_mean_filter_window_size(), target);
  }

  // optional .control.IntegrationParameters integration_params = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *_impl_.integration_params_, _impl_.integration_params_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.MultipointPreviewPPConfig)
  return target;
}

::size_t MultipointPreviewPPConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.MultipointPreviewPPConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated float preview_time_coef = 3;
     {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this->_internal_preview_time_coef_size())
      ;
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this->_internal_preview_time_coef_size());
      ;
      total_size += tag_size + data_size;
    }
    // repeated double preview_point_weight = 5;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_preview_point_weight_size())
      ;
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this->_internal_preview_point_weight_size());
      ;
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.PIDParameters pid_params = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pid_params_);
    }
    // optional .control.IntegrationParameters integration_params = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.integration_params_);
    }
    // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }
    // optional bool query_time_nearest_point_only = 11 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }
    // optional bool enable_lat_error_filter = 13 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }
    // optional bool enable_heading_error_filter = 14 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }
    // optional float base_preview_dis = 1 [default = 5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }
    // optional float base_preview_time = 2 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double kappa_threshold = 6 [default = 0.02];
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }
    // optional double coef_with_lat_error = 9 [default = 1.8];
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }
    // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }
    // optional float kappa_time_coef = 7 [default = 10];
    if (cached_has_bits & 0x00000800u) {
      total_size += 5;
    }
    // optional int32 mean_filter_window_size = 15 [default = 5];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mean_filter_window_size());
    }
    // optional double query_relative_time = 12 [default = 0.8];
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void MultipointPreviewPPConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultipointPreviewPPConfig*>(&to_msg);
  auto& from = static_cast<const MultipointPreviewPPConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.MultipointPreviewPPConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_preview_time_coef()->MergeFrom(from._internal_preview_time_coef());
  _this->_internal_mutable_preview_point_weight()->MergeFrom(from._internal_preview_point_weight());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.pid_params_ != nullptr);
      if (_this->_impl_.pid_params_ == nullptr) {
        _this->_impl_.pid_params_ =
            ::google::protobuf::Message::CopyConstruct<::control::PIDParameters>(arena, *from._impl_.pid_params_);
      } else {
        _this->_impl_.pid_params_->MergeFrom(*from._impl_.pid_params_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.integration_params_ != nullptr);
      if (_this->_impl_.integration_params_ == nullptr) {
        _this->_impl_.integration_params_ =
            ::google::protobuf::Message::CopyConstruct<::control::IntegrationParameters>(arena, *from._impl_.integration_params_);
      } else {
        _this->_impl_.integration_params_->MergeFrom(*from._impl_.integration_params_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.enable_predis_compensation_baseon_lat_err_ = from._impl_.enable_predis_compensation_baseon_lat_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.query_time_nearest_point_only_ = from._impl_.query_time_nearest_point_only_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.enable_lat_error_filter_ = from._impl_.enable_lat_error_filter_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.enable_heading_error_filter_ = from._impl_.enable_heading_error_filter_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_preview_dis_ = from._impl_.base_preview_dis_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.base_preview_time_ = from._impl_.base_preview_time_;
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.kappa_threshold_ = from._impl_.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.coef_with_lat_error_ = from._impl_.coef_with_lat_error_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.dis_compensation_threshold_with_lat_error_ = from._impl_.dis_compensation_threshold_with_lat_error_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.kappa_time_coef_ = from._impl_.kappa_time_coef_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.mean_filter_window_size_ = from._impl_.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.query_relative_time_ = from._impl_.query_relative_time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultipointPreviewPPConfig::CopyFrom(const MultipointPreviewPPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.MultipointPreviewPPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultipointPreviewPPConfig::InternalSwap(MultipointPreviewPPConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.preview_time_coef_.InternalSwap(&other->_impl_.preview_time_coef_);
  _impl_.preview_point_weight_.InternalSwap(&other->_impl_.preview_point_weight_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.query_relative_time_)
      + sizeof(MultipointPreviewPPConfig::_impl_.query_relative_time_)
      - PROTOBUF_FIELD_OFFSET(MultipointPreviewPPConfig, _impl_.pid_params_)>(
          reinterpret_cast<char*>(&_impl_.pid_params_),
          reinterpret_cast<char*>(&other->_impl_.pid_params_));
}

::google::protobuf::Metadata MultipointPreviewPPConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

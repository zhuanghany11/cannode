// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/multipoint_preview_pp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
namespace control {
class IntegrationParameters;
class IntegrationParametersDefaultTypeInternal;
extern IntegrationParametersDefaultTypeInternal _IntegrationParameters_default_instance_;
class MultipointPreviewPPConfig;
class MultipointPreviewPPConfigDefaultTypeInternal;
extern MultipointPreviewPPConfigDefaultTypeInternal _MultipointPreviewPPConfig_default_instance_;
class PIDParameters;
class PIDParametersDefaultTypeInternal;
extern PIDParametersDefaultTypeInternal _PIDParameters_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::IntegrationParameters* Arena::CreateMaybeMessage<::control::IntegrationParameters>(Arena*);
template<> ::control::MultipointPreviewPPConfig* Arena::CreateMaybeMessage<::control::MultipointPreviewPPConfig>(Arena*);
template<> ::control::PIDParameters* Arena::CreateMaybeMessage<::control::PIDParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class PIDParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.PIDParameters) */ {
 public:
  inline PIDParameters() : PIDParameters(nullptr) {};
  virtual ~PIDParameters();

  PIDParameters(const PIDParameters& from);
  PIDParameters(PIDParameters&& from) noexcept
    : PIDParameters() {
    *this = ::std::move(from);
  }

  inline PIDParameters& operator=(const PIDParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline PIDParameters& operator=(PIDParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PIDParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PIDParameters* internal_default_instance() {
    return reinterpret_cast<const PIDParameters*>(
               &_PIDParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PIDParameters& a, PIDParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(PIDParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PIDParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PIDParameters* New() const final {
    return CreateMaybeMessage<PIDParameters>(nullptr);
  }

  PIDParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PIDParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PIDParameters& from);
  void MergeFrom(const PIDParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PIDParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.PIDParameters";
  }
  protected:
  explicit PIDParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto);
    return ::descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableAdjustKpFieldNumber = 7,
    kLargerKpThresholdFieldNumber = 10,
    kEnablePidFieldNumber = 1,
    kKpFieldNumber = 2,
    kKiFieldNumber = 3,
    kKdFieldNumber = 4,
    kKpCoefFullLaodFieldNumber = 5,
    kSmallerKdFieldNumber = 6,
    kKpCoefFieldNumber = 8,
    kMaxKpThresholdFieldNumber = 9,
  };
  // optional bool enable_adjust_kp = 7 [default = false];
  bool has_enable_adjust_kp() const;
  private:
  bool _internal_has_enable_adjust_kp() const;
  public:
  void clear_enable_adjust_kp();
  bool enable_adjust_kp() const;
  void set_enable_adjust_kp(bool value);
  private:
  bool _internal_enable_adjust_kp() const;
  void _internal_set_enable_adjust_kp(bool value);
  public:

  // optional float larger_kp_threshold = 10 [default = 0.06];
  bool has_larger_kp_threshold() const;
  private:
  bool _internal_has_larger_kp_threshold() const;
  public:
  void clear_larger_kp_threshold();
  float larger_kp_threshold() const;
  void set_larger_kp_threshold(float value);
  private:
  float _internal_larger_kp_threshold() const;
  void _internal_set_larger_kp_threshold(float value);
  public:

  // optional bool enable_pid = 1 [default = true];
  bool has_enable_pid() const;
  private:
  bool _internal_has_enable_pid() const;
  public:
  void clear_enable_pid();
  bool enable_pid() const;
  void set_enable_pid(bool value);
  private:
  bool _internal_enable_pid() const;
  void _internal_set_enable_pid(bool value);
  public:

  // optional float kp = 2 [default = 1];
  bool has_kp() const;
  private:
  bool _internal_has_kp() const;
  public:
  void clear_kp();
  float kp() const;
  void set_kp(float value);
  private:
  float _internal_kp() const;
  void _internal_set_kp(float value);
  public:

  // optional float ki = 3 [default = 2];
  bool has_ki() const;
  private:
  bool _internal_has_ki() const;
  public:
  void clear_ki();
  float ki() const;
  void set_ki(float value);
  private:
  float _internal_ki() const;
  void _internal_set_ki(float value);
  public:

  // optional float kd = 4 [default = 0.6];
  bool has_kd() const;
  private:
  bool _internal_has_kd() const;
  public:
  void clear_kd();
  float kd() const;
  void set_kd(float value);
  private:
  float _internal_kd() const;
  void _internal_set_kd(float value);
  public:

  // optional float kp_coef_full_laod = 5 [default = 1];
  bool has_kp_coef_full_laod() const;
  private:
  bool _internal_has_kp_coef_full_laod() const;
  public:
  void clear_kp_coef_full_laod();
  float kp_coef_full_laod() const;
  void set_kp_coef_full_laod(float value);
  private:
  float _internal_kp_coef_full_laod() const;
  void _internal_set_kp_coef_full_laod(float value);
  public:

  // optional float smaller_kd = 6 [default = 0.2];
  bool has_smaller_kd() const;
  private:
  bool _internal_has_smaller_kd() const;
  public:
  void clear_smaller_kd();
  float smaller_kd() const;
  void set_smaller_kd(float value);
  private:
  float _internal_smaller_kd() const;
  void _internal_set_smaller_kd(float value);
  public:

  // optional float kp_coef = 8 [default = 1.05];
  bool has_kp_coef() const;
  private:
  bool _internal_has_kp_coef() const;
  public:
  void clear_kp_coef();
  float kp_coef() const;
  void set_kp_coef(float value);
  private:
  float _internal_kp_coef() const;
  void _internal_set_kp_coef(float value);
  public:

  // optional float max_kp_threshold = 9 [default = 0.02];
  bool has_max_kp_threshold() const;
  private:
  bool _internal_has_max_kp_threshold() const;
  public:
  void clear_max_kp_threshold();
  float max_kp_threshold() const;
  void set_max_kp_threshold(float value);
  private:
  float _internal_max_kp_threshold() const;
  void _internal_set_max_kp_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.PIDParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_adjust_kp_;
  float larger_kp_threshold_;
  bool enable_pid_;
  float kp_;
  float ki_;
  float kd_;
  float kp_coef_full_laod_;
  float smaller_kd_;
  float kp_coef_;
  float max_kp_threshold_;
  friend struct ::TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
};
// -------------------------------------------------------------------

class IntegrationParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.IntegrationParameters) */ {
 public:
  inline IntegrationParameters() : IntegrationParameters(nullptr) {};
  virtual ~IntegrationParameters();

  IntegrationParameters(const IntegrationParameters& from);
  IntegrationParameters(IntegrationParameters&& from) noexcept
    : IntegrationParameters() {
    *this = ::std::move(from);
  }

  inline IntegrationParameters& operator=(const IntegrationParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegrationParameters& operator=(IntegrationParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegrationParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegrationParameters* internal_default_instance() {
    return reinterpret_cast<const IntegrationParameters*>(
               &_IntegrationParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntegrationParameters& a, IntegrationParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegrationParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegrationParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegrationParameters* New() const final {
    return CreateMaybeMessage<IntegrationParameters>(nullptr);
  }

  IntegrationParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegrationParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegrationParameters& from);
  void MergeFrom(const IntegrationParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegrationParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.IntegrationParameters";
  }
  protected:
  explicit IntegrationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto);
    return ::descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableIntegrationFieldNumber = 1,
    kKappaThresholdFieldNumber = 8,
    kForgettingFactorFieldNumber = 2,
    kIntegratorSaturationThresholdFieldNumber = 3,
    kSpeedThresholdFieldNumber = 4,
    kLatErrorThresholdFieldNumber = 5,
    kKiFieldNumber = 6,
    kReversseKiFieldNumber = 7,
  };
  // optional bool enable_integration = 1 [default = false];
  bool has_enable_integration() const;
  private:
  bool _internal_has_enable_integration() const;
  public:
  void clear_enable_integration();
  bool enable_integration() const;
  void set_enable_integration(bool value);
  private:
  bool _internal_enable_integration() const;
  void _internal_set_enable_integration(bool value);
  public:

  // optional float kappa_threshold = 8 [default = 0.01];
  bool has_kappa_threshold() const;
  private:
  bool _internal_has_kappa_threshold() const;
  public:
  void clear_kappa_threshold();
  float kappa_threshold() const;
  void set_kappa_threshold(float value);
  private:
  float _internal_kappa_threshold() const;
  void _internal_set_kappa_threshold(float value);
  public:

  // optional float forgetting_factor = 2 [default = 0.98];
  bool has_forgetting_factor() const;
  private:
  bool _internal_has_forgetting_factor() const;
  public:
  void clear_forgetting_factor();
  float forgetting_factor() const;
  void set_forgetting_factor(float value);
  private:
  float _internal_forgetting_factor() const;
  void _internal_set_forgetting_factor(float value);
  public:

  // optional float integrator_saturation_threshold = 3 [default = 5];
  bool has_integrator_saturation_threshold() const;
  private:
  bool _internal_has_integrator_saturation_threshold() const;
  public:
  void clear_integrator_saturation_threshold();
  float integrator_saturation_threshold() const;
  void set_integrator_saturation_threshold(float value);
  private:
  float _internal_integrator_saturation_threshold() const;
  void _internal_set_integrator_saturation_threshold(float value);
  public:

  // optional float speed_threshold = 4 [default = 0.5];
  bool has_speed_threshold() const;
  private:
  bool _internal_has_speed_threshold() const;
  public:
  void clear_speed_threshold();
  float speed_threshold() const;
  void set_speed_threshold(float value);
  private:
  float _internal_speed_threshold() const;
  void _internal_set_speed_threshold(float value);
  public:

  // optional float lat_error_threshold = 5 [default = 2];
  bool has_lat_error_threshold() const;
  private:
  bool _internal_has_lat_error_threshold() const;
  public:
  void clear_lat_error_threshold();
  float lat_error_threshold() const;
  void set_lat_error_threshold(float value);
  private:
  float _internal_lat_error_threshold() const;
  void _internal_set_lat_error_threshold(float value);
  public:

  // optional float ki = 6 [default = 1];
  bool has_ki() const;
  private:
  bool _internal_has_ki() const;
  public:
  void clear_ki();
  float ki() const;
  void set_ki(float value);
  private:
  float _internal_ki() const;
  void _internal_set_ki(float value);
  public:

  // optional float reversse_ki = 7 [default = 2];
  bool has_reversse_ki() const;
  private:
  bool _internal_has_reversse_ki() const;
  public:
  void clear_reversse_ki();
  float reversse_ki() const;
  void set_reversse_ki(float value);
  private:
  float _internal_reversse_ki() const;
  void _internal_set_reversse_ki(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.IntegrationParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_integration_;
  float kappa_threshold_;
  float forgetting_factor_;
  float integrator_saturation_threshold_;
  float speed_threshold_;
  float lat_error_threshold_;
  float ki_;
  float reversse_ki_;
  friend struct ::TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
};
// -------------------------------------------------------------------

class MultipointPreviewPPConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.MultipointPreviewPPConfig) */ {
 public:
  inline MultipointPreviewPPConfig() : MultipointPreviewPPConfig(nullptr) {};
  virtual ~MultipointPreviewPPConfig();

  MultipointPreviewPPConfig(const MultipointPreviewPPConfig& from);
  MultipointPreviewPPConfig(MultipointPreviewPPConfig&& from) noexcept
    : MultipointPreviewPPConfig() {
    *this = ::std::move(from);
  }

  inline MultipointPreviewPPConfig& operator=(const MultipointPreviewPPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipointPreviewPPConfig& operator=(MultipointPreviewPPConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultipointPreviewPPConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultipointPreviewPPConfig* internal_default_instance() {
    return reinterpret_cast<const MultipointPreviewPPConfig*>(
               &_MultipointPreviewPPConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultipointPreviewPPConfig& a, MultipointPreviewPPConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipointPreviewPPConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipointPreviewPPConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultipointPreviewPPConfig* New() const final {
    return CreateMaybeMessage<MultipointPreviewPPConfig>(nullptr);
  }

  MultipointPreviewPPConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultipointPreviewPPConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultipointPreviewPPConfig& from);
  void MergeFrom(const MultipointPreviewPPConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipointPreviewPPConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.MultipointPreviewPPConfig";
  }
  protected:
  explicit MultipointPreviewPPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto);
    return ::descriptor_table_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviewTimeCoefFieldNumber = 3,
    kPreviewPointWeightFieldNumber = 5,
    kPidParamsFieldNumber = 4,
    kIntegrationParamsFieldNumber = 16,
    kEnablePredisCompensationBaseonLatErrFieldNumber = 8,
    kQueryTimeNearestPointOnlyFieldNumber = 11,
    kEnableLatErrorFilterFieldNumber = 13,
    kEnableHeadingErrorFilterFieldNumber = 14,
    kBasePreviewDisFieldNumber = 1,
    kBasePreviewTimeFieldNumber = 2,
    kKappaThresholdFieldNumber = 6,
    kCoefWithLatErrorFieldNumber = 9,
    kDisCompensationThresholdWithLatErrorFieldNumber = 10,
    kKappaTimeCoefFieldNumber = 7,
    kMeanFilterWindowSizeFieldNumber = 15,
    kQueryRelativeTimeFieldNumber = 12,
  };
  // repeated float preview_time_coef = 3;
  int preview_time_coef_size() const;
  private:
  int _internal_preview_time_coef_size() const;
  public:
  void clear_preview_time_coef();
  private:
  float _internal_preview_time_coef(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_preview_time_coef() const;
  void _internal_add_preview_time_coef(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_preview_time_coef();
  public:
  float preview_time_coef(int index) const;
  void set_preview_time_coef(int index, float value);
  void add_preview_time_coef(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      preview_time_coef() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_preview_time_coef();

  // repeated double preview_point_weight = 5;
  int preview_point_weight_size() const;
  private:
  int _internal_preview_point_weight_size() const;
  public:
  void clear_preview_point_weight();
  private:
  double _internal_preview_point_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_preview_point_weight() const;
  void _internal_add_preview_point_weight(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_preview_point_weight();
  public:
  double preview_point_weight(int index) const;
  void set_preview_point_weight(int index, double value);
  void add_preview_point_weight(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      preview_point_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_preview_point_weight();

  // optional .control.PIDParameters pid_params = 4;
  bool has_pid_params() const;
  private:
  bool _internal_has_pid_params() const;
  public:
  void clear_pid_params();
  const ::control::PIDParameters& pid_params() const;
  ::control::PIDParameters* release_pid_params();
  ::control::PIDParameters* mutable_pid_params();
  void set_allocated_pid_params(::control::PIDParameters* pid_params);
  private:
  const ::control::PIDParameters& _internal_pid_params() const;
  ::control::PIDParameters* _internal_mutable_pid_params();
  public:
  void unsafe_arena_set_allocated_pid_params(
      ::control::PIDParameters* pid_params);
  ::control::PIDParameters* unsafe_arena_release_pid_params();

  // optional .control.IntegrationParameters integration_params = 16;
  bool has_integration_params() const;
  private:
  bool _internal_has_integration_params() const;
  public:
  void clear_integration_params();
  const ::control::IntegrationParameters& integration_params() const;
  ::control::IntegrationParameters* release_integration_params();
  ::control::IntegrationParameters* mutable_integration_params();
  void set_allocated_integration_params(::control::IntegrationParameters* integration_params);
  private:
  const ::control::IntegrationParameters& _internal_integration_params() const;
  ::control::IntegrationParameters* _internal_mutable_integration_params();
  public:
  void unsafe_arena_set_allocated_integration_params(
      ::control::IntegrationParameters* integration_params);
  ::control::IntegrationParameters* unsafe_arena_release_integration_params();

  // optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
  bool has_enable_predis_compensation_baseon_lat_err() const;
  private:
  bool _internal_has_enable_predis_compensation_baseon_lat_err() const;
  public:
  void clear_enable_predis_compensation_baseon_lat_err();
  bool enable_predis_compensation_baseon_lat_err() const;
  void set_enable_predis_compensation_baseon_lat_err(bool value);
  private:
  bool _internal_enable_predis_compensation_baseon_lat_err() const;
  void _internal_set_enable_predis_compensation_baseon_lat_err(bool value);
  public:

  // optional bool query_time_nearest_point_only = 11 [default = false];
  bool has_query_time_nearest_point_only() const;
  private:
  bool _internal_has_query_time_nearest_point_only() const;
  public:
  void clear_query_time_nearest_point_only();
  bool query_time_nearest_point_only() const;
  void set_query_time_nearest_point_only(bool value);
  private:
  bool _internal_query_time_nearest_point_only() const;
  void _internal_set_query_time_nearest_point_only(bool value);
  public:

  // optional bool enable_lat_error_filter = 13 [default = false];
  bool has_enable_lat_error_filter() const;
  private:
  bool _internal_has_enable_lat_error_filter() const;
  public:
  void clear_enable_lat_error_filter();
  bool enable_lat_error_filter() const;
  void set_enable_lat_error_filter(bool value);
  private:
  bool _internal_enable_lat_error_filter() const;
  void _internal_set_enable_lat_error_filter(bool value);
  public:

  // optional bool enable_heading_error_filter = 14 [default = false];
  bool has_enable_heading_error_filter() const;
  private:
  bool _internal_has_enable_heading_error_filter() const;
  public:
  void clear_enable_heading_error_filter();
  bool enable_heading_error_filter() const;
  void set_enable_heading_error_filter(bool value);
  private:
  bool _internal_enable_heading_error_filter() const;
  void _internal_set_enable_heading_error_filter(bool value);
  public:

  // optional float base_preview_dis = 1 [default = 5];
  bool has_base_preview_dis() const;
  private:
  bool _internal_has_base_preview_dis() const;
  public:
  void clear_base_preview_dis();
  float base_preview_dis() const;
  void set_base_preview_dis(float value);
  private:
  float _internal_base_preview_dis() const;
  void _internal_set_base_preview_dis(float value);
  public:

  // optional float base_preview_time = 2 [default = 2];
  bool has_base_preview_time() const;
  private:
  bool _internal_has_base_preview_time() const;
  public:
  void clear_base_preview_time();
  float base_preview_time() const;
  void set_base_preview_time(float value);
  private:
  float _internal_base_preview_time() const;
  void _internal_set_base_preview_time(float value);
  public:

  // optional double kappa_threshold = 6 [default = 0.02];
  bool has_kappa_threshold() const;
  private:
  bool _internal_has_kappa_threshold() const;
  public:
  void clear_kappa_threshold();
  double kappa_threshold() const;
  void set_kappa_threshold(double value);
  private:
  double _internal_kappa_threshold() const;
  void _internal_set_kappa_threshold(double value);
  public:

  // optional double coef_with_lat_error = 9 [default = 1.8];
  bool has_coef_with_lat_error() const;
  private:
  bool _internal_has_coef_with_lat_error() const;
  public:
  void clear_coef_with_lat_error();
  double coef_with_lat_error() const;
  void set_coef_with_lat_error(double value);
  private:
  double _internal_coef_with_lat_error() const;
  void _internal_set_coef_with_lat_error(double value);
  public:

  // optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
  bool has_dis_compensation_threshold_with_lat_error() const;
  private:
  bool _internal_has_dis_compensation_threshold_with_lat_error() const;
  public:
  void clear_dis_compensation_threshold_with_lat_error();
  double dis_compensation_threshold_with_lat_error() const;
  void set_dis_compensation_threshold_with_lat_error(double value);
  private:
  double _internal_dis_compensation_threshold_with_lat_error() const;
  void _internal_set_dis_compensation_threshold_with_lat_error(double value);
  public:

  // optional float kappa_time_coef = 7 [default = 10];
  bool has_kappa_time_coef() const;
  private:
  bool _internal_has_kappa_time_coef() const;
  public:
  void clear_kappa_time_coef();
  float kappa_time_coef() const;
  void set_kappa_time_coef(float value);
  private:
  float _internal_kappa_time_coef() const;
  void _internal_set_kappa_time_coef(float value);
  public:

  // optional int32 mean_filter_window_size = 15 [default = 5];
  bool has_mean_filter_window_size() const;
  private:
  bool _internal_has_mean_filter_window_size() const;
  public:
  void clear_mean_filter_window_size();
  ::PROTOBUF_NAMESPACE_ID::int32 mean_filter_window_size() const;
  void set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double query_relative_time = 12 [default = 0.8];
  bool has_query_relative_time() const;
  private:
  bool _internal_has_query_relative_time() const;
  public:
  void clear_query_relative_time();
  double query_relative_time() const;
  void set_query_relative_time(double value);
  private:
  double _internal_query_relative_time() const;
  void _internal_set_query_relative_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.MultipointPreviewPPConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > preview_time_coef_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > preview_point_weight_;
  ::control::PIDParameters* pid_params_;
  ::control::IntegrationParameters* integration_params_;
  bool enable_predis_compensation_baseon_lat_err_;
  bool query_time_nearest_point_only_;
  bool enable_lat_error_filter_;
  bool enable_heading_error_filter_;
  float base_preview_dis_;
  float base_preview_time_;
  double kappa_threshold_;
  double coef_with_lat_error_;
  double dis_compensation_threshold_with_lat_error_;
  float kappa_time_coef_;
  ::PROTOBUF_NAMESPACE_ID::int32 mean_filter_window_size_;
  double query_relative_time_;
  friend struct ::TableStruct_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PIDParameters

// optional bool enable_pid = 1 [default = true];
inline bool PIDParameters::_internal_has_enable_pid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PIDParameters::has_enable_pid() const {
  return _internal_has_enable_pid();
}
inline void PIDParameters::clear_enable_pid() {
  enable_pid_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PIDParameters::_internal_enable_pid() const {
  return enable_pid_;
}
inline bool PIDParameters::enable_pid() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.enable_pid)
  return _internal_enable_pid();
}
inline void PIDParameters::_internal_set_enable_pid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_pid_ = value;
}
inline void PIDParameters::set_enable_pid(bool value) {
  _internal_set_enable_pid(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.enable_pid)
}

// optional float kp = 2 [default = 1];
inline bool PIDParameters::_internal_has_kp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PIDParameters::has_kp() const {
  return _internal_has_kp();
}
inline void PIDParameters::clear_kp() {
  kp_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PIDParameters::_internal_kp() const {
  return kp_;
}
inline float PIDParameters::kp() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kp)
  return _internal_kp();
}
inline void PIDParameters::_internal_set_kp(float value) {
  _has_bits_[0] |= 0x00000008u;
  kp_ = value;
}
inline void PIDParameters::set_kp(float value) {
  _internal_set_kp(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.kp)
}

// optional float ki = 3 [default = 2];
inline bool PIDParameters::_internal_has_ki() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PIDParameters::has_ki() const {
  return _internal_has_ki();
}
inline void PIDParameters::clear_ki() {
  ki_ = 2;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PIDParameters::_internal_ki() const {
  return ki_;
}
inline float PIDParameters::ki() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.ki)
  return _internal_ki();
}
inline void PIDParameters::_internal_set_ki(float value) {
  _has_bits_[0] |= 0x00000010u;
  ki_ = value;
}
inline void PIDParameters::set_ki(float value) {
  _internal_set_ki(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.ki)
}

// optional float kd = 4 [default = 0.6];
inline bool PIDParameters::_internal_has_kd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PIDParameters::has_kd() const {
  return _internal_has_kd();
}
inline void PIDParameters::clear_kd() {
  kd_ = 0.6f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PIDParameters::_internal_kd() const {
  return kd_;
}
inline float PIDParameters::kd() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kd)
  return _internal_kd();
}
inline void PIDParameters::_internal_set_kd(float value) {
  _has_bits_[0] |= 0x00000020u;
  kd_ = value;
}
inline void PIDParameters::set_kd(float value) {
  _internal_set_kd(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.kd)
}

// optional float kp_coef_full_laod = 5 [default = 1];
inline bool PIDParameters::_internal_has_kp_coef_full_laod() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PIDParameters::has_kp_coef_full_laod() const {
  return _internal_has_kp_coef_full_laod();
}
inline void PIDParameters::clear_kp_coef_full_laod() {
  kp_coef_full_laod_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PIDParameters::_internal_kp_coef_full_laod() const {
  return kp_coef_full_laod_;
}
inline float PIDParameters::kp_coef_full_laod() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kp_coef_full_laod)
  return _internal_kp_coef_full_laod();
}
inline void PIDParameters::_internal_set_kp_coef_full_laod(float value) {
  _has_bits_[0] |= 0x00000040u;
  kp_coef_full_laod_ = value;
}
inline void PIDParameters::set_kp_coef_full_laod(float value) {
  _internal_set_kp_coef_full_laod(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.kp_coef_full_laod)
}

// optional float smaller_kd = 6 [default = 0.2];
inline bool PIDParameters::_internal_has_smaller_kd() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PIDParameters::has_smaller_kd() const {
  return _internal_has_smaller_kd();
}
inline void PIDParameters::clear_smaller_kd() {
  smaller_kd_ = 0.2f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PIDParameters::_internal_smaller_kd() const {
  return smaller_kd_;
}
inline float PIDParameters::smaller_kd() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.smaller_kd)
  return _internal_smaller_kd();
}
inline void PIDParameters::_internal_set_smaller_kd(float value) {
  _has_bits_[0] |= 0x00000080u;
  smaller_kd_ = value;
}
inline void PIDParameters::set_smaller_kd(float value) {
  _internal_set_smaller_kd(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.smaller_kd)
}

// optional bool enable_adjust_kp = 7 [default = false];
inline bool PIDParameters::_internal_has_enable_adjust_kp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PIDParameters::has_enable_adjust_kp() const {
  return _internal_has_enable_adjust_kp();
}
inline void PIDParameters::clear_enable_adjust_kp() {
  enable_adjust_kp_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PIDParameters::_internal_enable_adjust_kp() const {
  return enable_adjust_kp_;
}
inline bool PIDParameters::enable_adjust_kp() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.enable_adjust_kp)
  return _internal_enable_adjust_kp();
}
inline void PIDParameters::_internal_set_enable_adjust_kp(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_adjust_kp_ = value;
}
inline void PIDParameters::set_enable_adjust_kp(bool value) {
  _internal_set_enable_adjust_kp(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.enable_adjust_kp)
}

// optional float kp_coef = 8 [default = 1.05];
inline bool PIDParameters::_internal_has_kp_coef() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PIDParameters::has_kp_coef() const {
  return _internal_has_kp_coef();
}
inline void PIDParameters::clear_kp_coef() {
  kp_coef_ = 1.05f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float PIDParameters::_internal_kp_coef() const {
  return kp_coef_;
}
inline float PIDParameters::kp_coef() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.kp_coef)
  return _internal_kp_coef();
}
inline void PIDParameters::_internal_set_kp_coef(float value) {
  _has_bits_[0] |= 0x00000100u;
  kp_coef_ = value;
}
inline void PIDParameters::set_kp_coef(float value) {
  _internal_set_kp_coef(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.kp_coef)
}

// optional float max_kp_threshold = 9 [default = 0.02];
inline bool PIDParameters::_internal_has_max_kp_threshold() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PIDParameters::has_max_kp_threshold() const {
  return _internal_has_max_kp_threshold();
}
inline void PIDParameters::clear_max_kp_threshold() {
  max_kp_threshold_ = 0.02f;
  _has_bits_[0] &= ~0x00000200u;
}
inline float PIDParameters::_internal_max_kp_threshold() const {
  return max_kp_threshold_;
}
inline float PIDParameters::max_kp_threshold() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.max_kp_threshold)
  return _internal_max_kp_threshold();
}
inline void PIDParameters::_internal_set_max_kp_threshold(float value) {
  _has_bits_[0] |= 0x00000200u;
  max_kp_threshold_ = value;
}
inline void PIDParameters::set_max_kp_threshold(float value) {
  _internal_set_max_kp_threshold(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.max_kp_threshold)
}

// optional float larger_kp_threshold = 10 [default = 0.06];
inline bool PIDParameters::_internal_has_larger_kp_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PIDParameters::has_larger_kp_threshold() const {
  return _internal_has_larger_kp_threshold();
}
inline void PIDParameters::clear_larger_kp_threshold() {
  larger_kp_threshold_ = 0.06f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PIDParameters::_internal_larger_kp_threshold() const {
  return larger_kp_threshold_;
}
inline float PIDParameters::larger_kp_threshold() const {
  // @@protoc_insertion_point(field_get:control.PIDParameters.larger_kp_threshold)
  return _internal_larger_kp_threshold();
}
inline void PIDParameters::_internal_set_larger_kp_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  larger_kp_threshold_ = value;
}
inline void PIDParameters::set_larger_kp_threshold(float value) {
  _internal_set_larger_kp_threshold(value);
  // @@protoc_insertion_point(field_set:control.PIDParameters.larger_kp_threshold)
}

// -------------------------------------------------------------------

// IntegrationParameters

// optional bool enable_integration = 1 [default = false];
inline bool IntegrationParameters::_internal_has_enable_integration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IntegrationParameters::has_enable_integration() const {
  return _internal_has_enable_integration();
}
inline void IntegrationParameters::clear_enable_integration() {
  enable_integration_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool IntegrationParameters::_internal_enable_integration() const {
  return enable_integration_;
}
inline bool IntegrationParameters::enable_integration() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.enable_integration)
  return _internal_enable_integration();
}
inline void IntegrationParameters::_internal_set_enable_integration(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_integration_ = value;
}
inline void IntegrationParameters::set_enable_integration(bool value) {
  _internal_set_enable_integration(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.enable_integration)
}

// optional float forgetting_factor = 2 [default = 0.98];
inline bool IntegrationParameters::_internal_has_forgetting_factor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IntegrationParameters::has_forgetting_factor() const {
  return _internal_has_forgetting_factor();
}
inline void IntegrationParameters::clear_forgetting_factor() {
  forgetting_factor_ = 0.98f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float IntegrationParameters::_internal_forgetting_factor() const {
  return forgetting_factor_;
}
inline float IntegrationParameters::forgetting_factor() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.forgetting_factor)
  return _internal_forgetting_factor();
}
inline void IntegrationParameters::_internal_set_forgetting_factor(float value) {
  _has_bits_[0] |= 0x00000004u;
  forgetting_factor_ = value;
}
inline void IntegrationParameters::set_forgetting_factor(float value) {
  _internal_set_forgetting_factor(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.forgetting_factor)
}

// optional float integrator_saturation_threshold = 3 [default = 5];
inline bool IntegrationParameters::_internal_has_integrator_saturation_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IntegrationParameters::has_integrator_saturation_threshold() const {
  return _internal_has_integrator_saturation_threshold();
}
inline void IntegrationParameters::clear_integrator_saturation_threshold() {
  integrator_saturation_threshold_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline float IntegrationParameters::_internal_integrator_saturation_threshold() const {
  return integrator_saturation_threshold_;
}
inline float IntegrationParameters::integrator_saturation_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.integrator_saturation_threshold)
  return _internal_integrator_saturation_threshold();
}
inline void IntegrationParameters::_internal_set_integrator_saturation_threshold(float value) {
  _has_bits_[0] |= 0x00000008u;
  integrator_saturation_threshold_ = value;
}
inline void IntegrationParameters::set_integrator_saturation_threshold(float value) {
  _internal_set_integrator_saturation_threshold(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.integrator_saturation_threshold)
}

// optional float speed_threshold = 4 [default = 0.5];
inline bool IntegrationParameters::_internal_has_speed_threshold() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IntegrationParameters::has_speed_threshold() const {
  return _internal_has_speed_threshold();
}
inline void IntegrationParameters::clear_speed_threshold() {
  speed_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float IntegrationParameters::_internal_speed_threshold() const {
  return speed_threshold_;
}
inline float IntegrationParameters::speed_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.speed_threshold)
  return _internal_speed_threshold();
}
inline void IntegrationParameters::_internal_set_speed_threshold(float value) {
  _has_bits_[0] |= 0x00000010u;
  speed_threshold_ = value;
}
inline void IntegrationParameters::set_speed_threshold(float value) {
  _internal_set_speed_threshold(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.speed_threshold)
}

// optional float lat_error_threshold = 5 [default = 2];
inline bool IntegrationParameters::_internal_has_lat_error_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IntegrationParameters::has_lat_error_threshold() const {
  return _internal_has_lat_error_threshold();
}
inline void IntegrationParameters::clear_lat_error_threshold() {
  lat_error_threshold_ = 2;
  _has_bits_[0] &= ~0x00000020u;
}
inline float IntegrationParameters::_internal_lat_error_threshold() const {
  return lat_error_threshold_;
}
inline float IntegrationParameters::lat_error_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.lat_error_threshold)
  return _internal_lat_error_threshold();
}
inline void IntegrationParameters::_internal_set_lat_error_threshold(float value) {
  _has_bits_[0] |= 0x00000020u;
  lat_error_threshold_ = value;
}
inline void IntegrationParameters::set_lat_error_threshold(float value) {
  _internal_set_lat_error_threshold(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.lat_error_threshold)
}

// optional float ki = 6 [default = 1];
inline bool IntegrationParameters::_internal_has_ki() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IntegrationParameters::has_ki() const {
  return _internal_has_ki();
}
inline void IntegrationParameters::clear_ki() {
  ki_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float IntegrationParameters::_internal_ki() const {
  return ki_;
}
inline float IntegrationParameters::ki() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.ki)
  return _internal_ki();
}
inline void IntegrationParameters::_internal_set_ki(float value) {
  _has_bits_[0] |= 0x00000040u;
  ki_ = value;
}
inline void IntegrationParameters::set_ki(float value) {
  _internal_set_ki(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.ki)
}

// optional float reversse_ki = 7 [default = 2];
inline bool IntegrationParameters::_internal_has_reversse_ki() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IntegrationParameters::has_reversse_ki() const {
  return _internal_has_reversse_ki();
}
inline void IntegrationParameters::clear_reversse_ki() {
  reversse_ki_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline float IntegrationParameters::_internal_reversse_ki() const {
  return reversse_ki_;
}
inline float IntegrationParameters::reversse_ki() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.reversse_ki)
  return _internal_reversse_ki();
}
inline void IntegrationParameters::_internal_set_reversse_ki(float value) {
  _has_bits_[0] |= 0x00000080u;
  reversse_ki_ = value;
}
inline void IntegrationParameters::set_reversse_ki(float value) {
  _internal_set_reversse_ki(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.reversse_ki)
}

// optional float kappa_threshold = 8 [default = 0.01];
inline bool IntegrationParameters::_internal_has_kappa_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IntegrationParameters::has_kappa_threshold() const {
  return _internal_has_kappa_threshold();
}
inline void IntegrationParameters::clear_kappa_threshold() {
  kappa_threshold_ = 0.01f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float IntegrationParameters::_internal_kappa_threshold() const {
  return kappa_threshold_;
}
inline float IntegrationParameters::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:control.IntegrationParameters.kappa_threshold)
  return _internal_kappa_threshold();
}
inline void IntegrationParameters::_internal_set_kappa_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  kappa_threshold_ = value;
}
inline void IntegrationParameters::set_kappa_threshold(float value) {
  _internal_set_kappa_threshold(value);
  // @@protoc_insertion_point(field_set:control.IntegrationParameters.kappa_threshold)
}

// -------------------------------------------------------------------

// MultipointPreviewPPConfig

// optional float base_preview_dis = 1 [default = 5];
inline bool MultipointPreviewPPConfig::_internal_has_base_preview_dis() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_base_preview_dis() const {
  return _internal_has_base_preview_dis();
}
inline void MultipointPreviewPPConfig::clear_base_preview_dis() {
  base_preview_dis_ = 5;
  _has_bits_[0] &= ~0x00000040u;
}
inline float MultipointPreviewPPConfig::_internal_base_preview_dis() const {
  return base_preview_dis_;
}
inline float MultipointPreviewPPConfig::base_preview_dis() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.base_preview_dis)
  return _internal_base_preview_dis();
}
inline void MultipointPreviewPPConfig::_internal_set_base_preview_dis(float value) {
  _has_bits_[0] |= 0x00000040u;
  base_preview_dis_ = value;
}
inline void MultipointPreviewPPConfig::set_base_preview_dis(float value) {
  _internal_set_base_preview_dis(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.base_preview_dis)
}

// optional float base_preview_time = 2 [default = 2];
inline bool MultipointPreviewPPConfig::_internal_has_base_preview_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_base_preview_time() const {
  return _internal_has_base_preview_time();
}
inline void MultipointPreviewPPConfig::clear_base_preview_time() {
  base_preview_time_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline float MultipointPreviewPPConfig::_internal_base_preview_time() const {
  return base_preview_time_;
}
inline float MultipointPreviewPPConfig::base_preview_time() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.base_preview_time)
  return _internal_base_preview_time();
}
inline void MultipointPreviewPPConfig::_internal_set_base_preview_time(float value) {
  _has_bits_[0] |= 0x00000080u;
  base_preview_time_ = value;
}
inline void MultipointPreviewPPConfig::set_base_preview_time(float value) {
  _internal_set_base_preview_time(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.base_preview_time)
}

// repeated float preview_time_coef = 3;
inline int MultipointPreviewPPConfig::_internal_preview_time_coef_size() const {
  return preview_time_coef_.size();
}
inline int MultipointPreviewPPConfig::preview_time_coef_size() const {
  return _internal_preview_time_coef_size();
}
inline void MultipointPreviewPPConfig::clear_preview_time_coef() {
  preview_time_coef_.Clear();
}
inline float MultipointPreviewPPConfig::_internal_preview_time_coef(int index) const {
  return preview_time_coef_.Get(index);
}
inline float MultipointPreviewPPConfig::preview_time_coef(int index) const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.preview_time_coef)
  return _internal_preview_time_coef(index);
}
inline void MultipointPreviewPPConfig::set_preview_time_coef(int index, float value) {
  preview_time_coef_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.preview_time_coef)
}
inline void MultipointPreviewPPConfig::_internal_add_preview_time_coef(float value) {
  preview_time_coef_.Add(value);
}
inline void MultipointPreviewPPConfig::add_preview_time_coef(float value) {
  _internal_add_preview_time_coef(value);
  // @@protoc_insertion_point(field_add:control.MultipointPreviewPPConfig.preview_time_coef)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MultipointPreviewPPConfig::_internal_preview_time_coef() const {
  return preview_time_coef_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MultipointPreviewPPConfig::preview_time_coef() const {
  // @@protoc_insertion_point(field_list:control.MultipointPreviewPPConfig.preview_time_coef)
  return _internal_preview_time_coef();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MultipointPreviewPPConfig::_internal_mutable_preview_time_coef() {
  return &preview_time_coef_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MultipointPreviewPPConfig::mutable_preview_time_coef() {
  // @@protoc_insertion_point(field_mutable_list:control.MultipointPreviewPPConfig.preview_time_coef)
  return _internal_mutable_preview_time_coef();
}

// optional .control.PIDParameters pid_params = 4;
inline bool MultipointPreviewPPConfig::_internal_has_pid_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pid_params_ != nullptr);
  return value;
}
inline bool MultipointPreviewPPConfig::has_pid_params() const {
  return _internal_has_pid_params();
}
inline void MultipointPreviewPPConfig::clear_pid_params() {
  if (pid_params_ != nullptr) pid_params_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::PIDParameters& MultipointPreviewPPConfig::_internal_pid_params() const {
  const ::control::PIDParameters* p = pid_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PIDParameters*>(
      &::control::_PIDParameters_default_instance_);
}
inline const ::control::PIDParameters& MultipointPreviewPPConfig::pid_params() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.pid_params)
  return _internal_pid_params();
}
inline void MultipointPreviewPPConfig::unsafe_arena_set_allocated_pid_params(
    ::control::PIDParameters* pid_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pid_params_);
  }
  pid_params_ = pid_params;
  if (pid_params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.MultipointPreviewPPConfig.pid_params)
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::release_pid_params() {
  auto temp = unsafe_arena_release_pid_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::unsafe_arena_release_pid_params() {
  // @@protoc_insertion_point(field_release:control.MultipointPreviewPPConfig.pid_params)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PIDParameters* temp = pid_params_;
  pid_params_ = nullptr;
  return temp;
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::_internal_mutable_pid_params() {
  _has_bits_[0] |= 0x00000001u;
  if (pid_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PIDParameters>(GetArena());
    pid_params_ = p;
  }
  return pid_params_;
}
inline ::control::PIDParameters* MultipointPreviewPPConfig::mutable_pid_params() {
  // @@protoc_insertion_point(field_mutable:control.MultipointPreviewPPConfig.pid_params)
  return _internal_mutable_pid_params();
}
inline void MultipointPreviewPPConfig::set_allocated_pid_params(::control::PIDParameters* pid_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pid_params_;
  }
  if (pid_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pid_params);
    if (message_arena != submessage_arena) {
      pid_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pid_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_params_ = pid_params;
  // @@protoc_insertion_point(field_set_allocated:control.MultipointPreviewPPConfig.pid_params)
}

// repeated double preview_point_weight = 5;
inline int MultipointPreviewPPConfig::_internal_preview_point_weight_size() const {
  return preview_point_weight_.size();
}
inline int MultipointPreviewPPConfig::preview_point_weight_size() const {
  return _internal_preview_point_weight_size();
}
inline void MultipointPreviewPPConfig::clear_preview_point_weight() {
  preview_point_weight_.Clear();
}
inline double MultipointPreviewPPConfig::_internal_preview_point_weight(int index) const {
  return preview_point_weight_.Get(index);
}
inline double MultipointPreviewPPConfig::preview_point_weight(int index) const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.preview_point_weight)
  return _internal_preview_point_weight(index);
}
inline void MultipointPreviewPPConfig::set_preview_point_weight(int index, double value) {
  preview_point_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.preview_point_weight)
}
inline void MultipointPreviewPPConfig::_internal_add_preview_point_weight(double value) {
  preview_point_weight_.Add(value);
}
inline void MultipointPreviewPPConfig::add_preview_point_weight(double value) {
  _internal_add_preview_point_weight(value);
  // @@protoc_insertion_point(field_add:control.MultipointPreviewPPConfig.preview_point_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MultipointPreviewPPConfig::_internal_preview_point_weight() const {
  return preview_point_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MultipointPreviewPPConfig::preview_point_weight() const {
  // @@protoc_insertion_point(field_list:control.MultipointPreviewPPConfig.preview_point_weight)
  return _internal_preview_point_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MultipointPreviewPPConfig::_internal_mutable_preview_point_weight() {
  return &preview_point_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MultipointPreviewPPConfig::mutable_preview_point_weight() {
  // @@protoc_insertion_point(field_mutable_list:control.MultipointPreviewPPConfig.preview_point_weight)
  return _internal_mutable_preview_point_weight();
}

// optional double kappa_threshold = 6 [default = 0.02];
inline bool MultipointPreviewPPConfig::_internal_has_kappa_threshold() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_kappa_threshold() const {
  return _internal_has_kappa_threshold();
}
inline void MultipointPreviewPPConfig::clear_kappa_threshold() {
  kappa_threshold_ = 0.02;
  _has_bits_[0] &= ~0x00000100u;
}
inline double MultipointPreviewPPConfig::_internal_kappa_threshold() const {
  return kappa_threshold_;
}
inline double MultipointPreviewPPConfig::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.kappa_threshold)
  return _internal_kappa_threshold();
}
inline void MultipointPreviewPPConfig::_internal_set_kappa_threshold(double value) {
  _has_bits_[0] |= 0x00000100u;
  kappa_threshold_ = value;
}
inline void MultipointPreviewPPConfig::set_kappa_threshold(double value) {
  _internal_set_kappa_threshold(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.kappa_threshold)
}

// optional float kappa_time_coef = 7 [default = 10];
inline bool MultipointPreviewPPConfig::_internal_has_kappa_time_coef() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_kappa_time_coef() const {
  return _internal_has_kappa_time_coef();
}
inline void MultipointPreviewPPConfig::clear_kappa_time_coef() {
  kappa_time_coef_ = 10;
  _has_bits_[0] &= ~0x00000800u;
}
inline float MultipointPreviewPPConfig::_internal_kappa_time_coef() const {
  return kappa_time_coef_;
}
inline float MultipointPreviewPPConfig::kappa_time_coef() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.kappa_time_coef)
  return _internal_kappa_time_coef();
}
inline void MultipointPreviewPPConfig::_internal_set_kappa_time_coef(float value) {
  _has_bits_[0] |= 0x00000800u;
  kappa_time_coef_ = value;
}
inline void MultipointPreviewPPConfig::set_kappa_time_coef(float value) {
  _internal_set_kappa_time_coef(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.kappa_time_coef)
}

// optional bool enable_predis_compensation_baseon_lat_err = 8 [default = false];
inline bool MultipointPreviewPPConfig::_internal_has_enable_predis_compensation_baseon_lat_err() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_enable_predis_compensation_baseon_lat_err() const {
  return _internal_has_enable_predis_compensation_baseon_lat_err();
}
inline void MultipointPreviewPPConfig::clear_enable_predis_compensation_baseon_lat_err() {
  enable_predis_compensation_baseon_lat_err_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MultipointPreviewPPConfig::_internal_enable_predis_compensation_baseon_lat_err() const {
  return enable_predis_compensation_baseon_lat_err_;
}
inline bool MultipointPreviewPPConfig::enable_predis_compensation_baseon_lat_err() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.enable_predis_compensation_baseon_lat_err)
  return _internal_enable_predis_compensation_baseon_lat_err();
}
inline void MultipointPreviewPPConfig::_internal_set_enable_predis_compensation_baseon_lat_err(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_predis_compensation_baseon_lat_err_ = value;
}
inline void MultipointPreviewPPConfig::set_enable_predis_compensation_baseon_lat_err(bool value) {
  _internal_set_enable_predis_compensation_baseon_lat_err(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.enable_predis_compensation_baseon_lat_err)
}

// optional double coef_with_lat_error = 9 [default = 1.8];
inline bool MultipointPreviewPPConfig::_internal_has_coef_with_lat_error() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_coef_with_lat_error() const {
  return _internal_has_coef_with_lat_error();
}
inline void MultipointPreviewPPConfig::clear_coef_with_lat_error() {
  coef_with_lat_error_ = 1.8;
  _has_bits_[0] &= ~0x00000200u;
}
inline double MultipointPreviewPPConfig::_internal_coef_with_lat_error() const {
  return coef_with_lat_error_;
}
inline double MultipointPreviewPPConfig::coef_with_lat_error() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.coef_with_lat_error)
  return _internal_coef_with_lat_error();
}
inline void MultipointPreviewPPConfig::_internal_set_coef_with_lat_error(double value) {
  _has_bits_[0] |= 0x00000200u;
  coef_with_lat_error_ = value;
}
inline void MultipointPreviewPPConfig::set_coef_with_lat_error(double value) {
  _internal_set_coef_with_lat_error(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.coef_with_lat_error)
}

// optional double dis_compensation_threshold_with_lat_error = 10 [default = 1.5];
inline bool MultipointPreviewPPConfig::_internal_has_dis_compensation_threshold_with_lat_error() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_dis_compensation_threshold_with_lat_error() const {
  return _internal_has_dis_compensation_threshold_with_lat_error();
}
inline void MultipointPreviewPPConfig::clear_dis_compensation_threshold_with_lat_error() {
  dis_compensation_threshold_with_lat_error_ = 1.5;
  _has_bits_[0] &= ~0x00000400u;
}
inline double MultipointPreviewPPConfig::_internal_dis_compensation_threshold_with_lat_error() const {
  return dis_compensation_threshold_with_lat_error_;
}
inline double MultipointPreviewPPConfig::dis_compensation_threshold_with_lat_error() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.dis_compensation_threshold_with_lat_error)
  return _internal_dis_compensation_threshold_with_lat_error();
}
inline void MultipointPreviewPPConfig::_internal_set_dis_compensation_threshold_with_lat_error(double value) {
  _has_bits_[0] |= 0x00000400u;
  dis_compensation_threshold_with_lat_error_ = value;
}
inline void MultipointPreviewPPConfig::set_dis_compensation_threshold_with_lat_error(double value) {
  _internal_set_dis_compensation_threshold_with_lat_error(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.dis_compensation_threshold_with_lat_error)
}

// optional bool query_time_nearest_point_only = 11 [default = false];
inline bool MultipointPreviewPPConfig::_internal_has_query_time_nearest_point_only() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_query_time_nearest_point_only() const {
  return _internal_has_query_time_nearest_point_only();
}
inline void MultipointPreviewPPConfig::clear_query_time_nearest_point_only() {
  query_time_nearest_point_only_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MultipointPreviewPPConfig::_internal_query_time_nearest_point_only() const {
  return query_time_nearest_point_only_;
}
inline bool MultipointPreviewPPConfig::query_time_nearest_point_only() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.query_time_nearest_point_only)
  return _internal_query_time_nearest_point_only();
}
inline void MultipointPreviewPPConfig::_internal_set_query_time_nearest_point_only(bool value) {
  _has_bits_[0] |= 0x00000008u;
  query_time_nearest_point_only_ = value;
}
inline void MultipointPreviewPPConfig::set_query_time_nearest_point_only(bool value) {
  _internal_set_query_time_nearest_point_only(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.query_time_nearest_point_only)
}

// optional double query_relative_time = 12 [default = 0.8];
inline bool MultipointPreviewPPConfig::_internal_has_query_relative_time() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_query_relative_time() const {
  return _internal_has_query_relative_time();
}
inline void MultipointPreviewPPConfig::clear_query_relative_time() {
  query_relative_time_ = 0.8;
  _has_bits_[0] &= ~0x00002000u;
}
inline double MultipointPreviewPPConfig::_internal_query_relative_time() const {
  return query_relative_time_;
}
inline double MultipointPreviewPPConfig::query_relative_time() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.query_relative_time)
  return _internal_query_relative_time();
}
inline void MultipointPreviewPPConfig::_internal_set_query_relative_time(double value) {
  _has_bits_[0] |= 0x00002000u;
  query_relative_time_ = value;
}
inline void MultipointPreviewPPConfig::set_query_relative_time(double value) {
  _internal_set_query_relative_time(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.query_relative_time)
}

// optional bool enable_lat_error_filter = 13 [default = false];
inline bool MultipointPreviewPPConfig::_internal_has_enable_lat_error_filter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_enable_lat_error_filter() const {
  return _internal_has_enable_lat_error_filter();
}
inline void MultipointPreviewPPConfig::clear_enable_lat_error_filter() {
  enable_lat_error_filter_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MultipointPreviewPPConfig::_internal_enable_lat_error_filter() const {
  return enable_lat_error_filter_;
}
inline bool MultipointPreviewPPConfig::enable_lat_error_filter() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.enable_lat_error_filter)
  return _internal_enable_lat_error_filter();
}
inline void MultipointPreviewPPConfig::_internal_set_enable_lat_error_filter(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_lat_error_filter_ = value;
}
inline void MultipointPreviewPPConfig::set_enable_lat_error_filter(bool value) {
  _internal_set_enable_lat_error_filter(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.enable_lat_error_filter)
}

// optional bool enable_heading_error_filter = 14 [default = false];
inline bool MultipointPreviewPPConfig::_internal_has_enable_heading_error_filter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_enable_heading_error_filter() const {
  return _internal_has_enable_heading_error_filter();
}
inline void MultipointPreviewPPConfig::clear_enable_heading_error_filter() {
  enable_heading_error_filter_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool MultipointPreviewPPConfig::_internal_enable_heading_error_filter() const {
  return enable_heading_error_filter_;
}
inline bool MultipointPreviewPPConfig::enable_heading_error_filter() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.enable_heading_error_filter)
  return _internal_enable_heading_error_filter();
}
inline void MultipointPreviewPPConfig::_internal_set_enable_heading_error_filter(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_heading_error_filter_ = value;
}
inline void MultipointPreviewPPConfig::set_enable_heading_error_filter(bool value) {
  _internal_set_enable_heading_error_filter(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.enable_heading_error_filter)
}

// optional int32 mean_filter_window_size = 15 [default = 5];
inline bool MultipointPreviewPPConfig::_internal_has_mean_filter_window_size() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MultipointPreviewPPConfig::has_mean_filter_window_size() const {
  return _internal_has_mean_filter_window_size();
}
inline void MultipointPreviewPPConfig::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 5;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultipointPreviewPPConfig::_internal_mean_filter_window_size() const {
  return mean_filter_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultipointPreviewPPConfig::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void MultipointPreviewPPConfig::_internal_set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  mean_filter_window_size_ = value;
}
inline void MultipointPreviewPPConfig::set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mean_filter_window_size(value);
  // @@protoc_insertion_point(field_set:control.MultipointPreviewPPConfig.mean_filter_window_size)
}

// optional .control.IntegrationParameters integration_params = 16;
inline bool MultipointPreviewPPConfig::_internal_has_integration_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || integration_params_ != nullptr);
  return value;
}
inline bool MultipointPreviewPPConfig::has_integration_params() const {
  return _internal_has_integration_params();
}
inline void MultipointPreviewPPConfig::clear_integration_params() {
  if (integration_params_ != nullptr) integration_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::IntegrationParameters& MultipointPreviewPPConfig::_internal_integration_params() const {
  const ::control::IntegrationParameters* p = integration_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::IntegrationParameters*>(
      &::control::_IntegrationParameters_default_instance_);
}
inline const ::control::IntegrationParameters& MultipointPreviewPPConfig::integration_params() const {
  // @@protoc_insertion_point(field_get:control.MultipointPreviewPPConfig.integration_params)
  return _internal_integration_params();
}
inline void MultipointPreviewPPConfig::unsafe_arena_set_allocated_integration_params(
    ::control::IntegrationParameters* integration_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(integration_params_);
  }
  integration_params_ = integration_params;
  if (integration_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.MultipointPreviewPPConfig.integration_params)
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::release_integration_params() {
  auto temp = unsafe_arena_release_integration_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::unsafe_arena_release_integration_params() {
  // @@protoc_insertion_point(field_release:control.MultipointPreviewPPConfig.integration_params)
  _has_bits_[0] &= ~0x00000002u;
  ::control::IntegrationParameters* temp = integration_params_;
  integration_params_ = nullptr;
  return temp;
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::_internal_mutable_integration_params() {
  _has_bits_[0] |= 0x00000002u;
  if (integration_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::IntegrationParameters>(GetArena());
    integration_params_ = p;
  }
  return integration_params_;
}
inline ::control::IntegrationParameters* MultipointPreviewPPConfig::mutable_integration_params() {
  // @@protoc_insertion_point(field_mutable:control.MultipointPreviewPPConfig.integration_params)
  return _internal_mutable_integration_params();
}
inline void MultipointPreviewPPConfig::set_allocated_integration_params(::control::IntegrationParameters* integration_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete integration_params_;
  }
  if (integration_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(integration_params);
    if (message_arena != submessage_arena) {
      integration_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integration_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  integration_params_ = integration_params;
  // @@protoc_insertion_point(field_set_allocated:control.MultipointPreviewPPConfig.integration_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fmultipoint_5fpreview_5fpp_2eproto

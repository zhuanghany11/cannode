// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/stanley_controller.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fstanley_5fcontroller_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fstanley_5fcontroller_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fstanley_5fcontroller_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto;
namespace control {
class StanleyControllerConfig;
struct StanleyControllerConfigDefaultTypeInternal;
extern StanleyControllerConfigDefaultTypeInternal _StanleyControllerConfig_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {

// ===================================================================


// -------------------------------------------------------------------

class StanleyControllerConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.StanleyControllerConfig) */ {
 public:
  inline StanleyControllerConfig() : StanleyControllerConfig(nullptr) {}
  ~StanleyControllerConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StanleyControllerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline StanleyControllerConfig(const StanleyControllerConfig& from) : StanleyControllerConfig(nullptr, from) {}
  inline StanleyControllerConfig(StanleyControllerConfig&& from) noexcept
      : StanleyControllerConfig(nullptr, std::move(from)) {}
  inline StanleyControllerConfig& operator=(const StanleyControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StanleyControllerConfig& operator=(StanleyControllerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StanleyControllerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StanleyControllerConfig* internal_default_instance() {
    return reinterpret_cast<const StanleyControllerConfig*>(
        &_StanleyControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StanleyControllerConfig& a, StanleyControllerConfig& b) { a.Swap(&b); }
  inline void Swap(StanleyControllerConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StanleyControllerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StanleyControllerConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StanleyControllerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StanleyControllerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StanleyControllerConfig& from) { StanleyControllerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StanleyControllerConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.StanleyControllerConfig"; }

 protected:
  explicit StanleyControllerConfig(::google::protobuf::Arena* arena);
  StanleyControllerConfig(::google::protobuf::Arena* arena, const StanleyControllerConfig& from);
  StanleyControllerConfig(::google::protobuf::Arena* arena, StanleyControllerConfig&& from) noexcept
      : StanleyControllerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnableLatErrorFilterFieldNumber = 1,
    kEnableHeadingErrorFilterFieldNumber = 2,
    kQueryTimeNearestPointOnlyFieldNumber = 4,
    kMeanFilterWindowSizeFieldNumber = 3,
    kKYFieldNumber = 6,
    kQueryRelativeTimeFieldNumber = 5,
    kBasePreviewDisFieldNumber = 7,
    kBasePreviewTimeFieldNumber = 8,
  };
  // optional bool enable_lat_error_filter = 1 [default = false];
  bool has_enable_lat_error_filter() const;
  void clear_enable_lat_error_filter() ;
  bool enable_lat_error_filter() const;
  void set_enable_lat_error_filter(bool value);

  private:
  bool _internal_enable_lat_error_filter() const;
  void _internal_set_enable_lat_error_filter(bool value);

  public:
  // optional bool enable_heading_error_filter = 2 [default = false];
  bool has_enable_heading_error_filter() const;
  void clear_enable_heading_error_filter() ;
  bool enable_heading_error_filter() const;
  void set_enable_heading_error_filter(bool value);

  private:
  bool _internal_enable_heading_error_filter() const;
  void _internal_set_enable_heading_error_filter(bool value);

  public:
  // optional bool query_time_nearest_point_only = 4 [default = false];
  bool has_query_time_nearest_point_only() const;
  void clear_query_time_nearest_point_only() ;
  bool query_time_nearest_point_only() const;
  void set_query_time_nearest_point_only(bool value);

  private:
  bool _internal_query_time_nearest_point_only() const;
  void _internal_set_query_time_nearest_point_only(bool value);

  public:
  // optional int32 mean_filter_window_size = 3 [default = 5];
  bool has_mean_filter_window_size() const;
  void clear_mean_filter_window_size() ;
  ::int32_t mean_filter_window_size() const;
  void set_mean_filter_window_size(::int32_t value);

  private:
  ::int32_t _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(::int32_t value);

  public:
  // optional float k_y = 6 [default = 0.3];
  bool has_k_y() const;
  void clear_k_y() ;
  float k_y() const;
  void set_k_y(float value);

  private:
  float _internal_k_y() const;
  void _internal_set_k_y(float value);

  public:
  // optional double query_relative_time = 5 [default = 0.8];
  bool has_query_relative_time() const;
  void clear_query_relative_time() ;
  double query_relative_time() const;
  void set_query_relative_time(double value);

  private:
  double _internal_query_relative_time() const;
  void _internal_set_query_relative_time(double value);

  public:
  // optional float base_preview_dis = 7 [default = 3];
  bool has_base_preview_dis() const;
  void clear_base_preview_dis() ;
  float base_preview_dis() const;
  void set_base_preview_dis(float value);

  private:
  float _internal_base_preview_dis() const;
  void _internal_set_base_preview_dis(float value);

  public:
  // optional float base_preview_time = 8 [default = 2];
  bool has_base_preview_time() const;
  void clear_base_preview_time() ;
  float base_preview_time() const;
  void set_base_preview_time(float value);

  private:
  float _internal_base_preview_time() const;
  void _internal_set_base_preview_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:control.StanleyControllerConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StanleyControllerConfig_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StanleyControllerConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool enable_lat_error_filter_;
    bool enable_heading_error_filter_;
    bool query_time_nearest_point_only_;
    ::int32_t mean_filter_window_size_;
    float k_y_;
    double query_relative_time_;
    float base_preview_dis_;
    float base_preview_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StanleyControllerConfig

// optional bool enable_lat_error_filter = 1 [default = false];
inline bool StanleyControllerConfig::has_enable_lat_error_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_enable_lat_error_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_lat_error_filter_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool StanleyControllerConfig::enable_lat_error_filter() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.enable_lat_error_filter)
  return _internal_enable_lat_error_filter();
}
inline void StanleyControllerConfig::set_enable_lat_error_filter(bool value) {
  _internal_set_enable_lat_error_filter(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.enable_lat_error_filter)
}
inline bool StanleyControllerConfig::_internal_enable_lat_error_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_lat_error_filter_;
}
inline void StanleyControllerConfig::_internal_set_enable_lat_error_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_lat_error_filter_ = value;
}

// optional bool enable_heading_error_filter = 2 [default = false];
inline bool StanleyControllerConfig::has_enable_heading_error_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_enable_heading_error_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_heading_error_filter_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool StanleyControllerConfig::enable_heading_error_filter() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.enable_heading_error_filter)
  return _internal_enable_heading_error_filter();
}
inline void StanleyControllerConfig::set_enable_heading_error_filter(bool value) {
  _internal_set_enable_heading_error_filter(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.enable_heading_error_filter)
}
inline bool StanleyControllerConfig::_internal_enable_heading_error_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_heading_error_filter_;
}
inline void StanleyControllerConfig::_internal_set_enable_heading_error_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_heading_error_filter_ = value;
}

// optional int32 mean_filter_window_size = 3 [default = 5];
inline bool StanleyControllerConfig::has_mean_filter_window_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_mean_filter_window_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_filter_window_size_ = 5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t StanleyControllerConfig::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void StanleyControllerConfig::set_mean_filter_window_size(::int32_t value) {
  _internal_set_mean_filter_window_size(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.mean_filter_window_size)
}
inline ::int32_t StanleyControllerConfig::_internal_mean_filter_window_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mean_filter_window_size_;
}
inline void StanleyControllerConfig::_internal_set_mean_filter_window_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_filter_window_size_ = value;
}

// optional bool query_time_nearest_point_only = 4 [default = false];
inline bool StanleyControllerConfig::has_query_time_nearest_point_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_query_time_nearest_point_only() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_time_nearest_point_only_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool StanleyControllerConfig::query_time_nearest_point_only() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.query_time_nearest_point_only)
  return _internal_query_time_nearest_point_only();
}
inline void StanleyControllerConfig::set_query_time_nearest_point_only(bool value) {
  _internal_set_query_time_nearest_point_only(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.query_time_nearest_point_only)
}
inline bool StanleyControllerConfig::_internal_query_time_nearest_point_only() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_time_nearest_point_only_;
}
inline void StanleyControllerConfig::_internal_set_query_time_nearest_point_only(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_time_nearest_point_only_ = value;
}

// optional double query_relative_time = 5 [default = 0.8];
inline bool StanleyControllerConfig::has_query_relative_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_query_relative_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_relative_time_ = 0.8;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double StanleyControllerConfig::query_relative_time() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.query_relative_time)
  return _internal_query_relative_time();
}
inline void StanleyControllerConfig::set_query_relative_time(double value) {
  _internal_set_query_relative_time(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.query_relative_time)
}
inline double StanleyControllerConfig::_internal_query_relative_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_relative_time_;
}
inline void StanleyControllerConfig::_internal_set_query_relative_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_relative_time_ = value;
}

// optional float k_y = 6 [default = 0.3];
inline bool StanleyControllerConfig::has_k_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_k_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.k_y_ = 0.3f;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float StanleyControllerConfig::k_y() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.k_y)
  return _internal_k_y();
}
inline void StanleyControllerConfig::set_k_y(float value) {
  _internal_set_k_y(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.k_y)
}
inline float StanleyControllerConfig::_internal_k_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.k_y_;
}
inline void StanleyControllerConfig::_internal_set_k_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.k_y_ = value;
}

// optional float base_preview_dis = 7 [default = 3];
inline bool StanleyControllerConfig::has_base_preview_dis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_base_preview_dis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_dis_ = 3;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float StanleyControllerConfig::base_preview_dis() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.base_preview_dis)
  return _internal_base_preview_dis();
}
inline void StanleyControllerConfig::set_base_preview_dis(float value) {
  _internal_set_base_preview_dis(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.base_preview_dis)
}
inline float StanleyControllerConfig::_internal_base_preview_dis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_preview_dis_;
}
inline void StanleyControllerConfig::_internal_set_base_preview_dis(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_dis_ = value;
}

// optional float base_preview_time = 8 [default = 2];
inline bool StanleyControllerConfig::has_base_preview_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void StanleyControllerConfig::clear_base_preview_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_time_ = 2;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float StanleyControllerConfig::base_preview_time() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.base_preview_time)
  return _internal_base_preview_time();
}
inline void StanleyControllerConfig::set_base_preview_time(float value) {
  _internal_set_base_preview_time(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.base_preview_time)
}
inline float StanleyControllerConfig::_internal_base_preview_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_preview_time_;
}
inline void StanleyControllerConfig::_internal_set_base_preview_time(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_preview_time_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fstanley_5fcontroller_2eproto_2epb_2eh

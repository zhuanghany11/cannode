// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/stanley_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fstanley_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fstanley_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fstanley_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto;
namespace control {
class StanleyControllerConfig;
class StanleyControllerConfigDefaultTypeInternal;
extern StanleyControllerConfigDefaultTypeInternal _StanleyControllerConfig_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::StanleyControllerConfig* Arena::CreateMaybeMessage<::control::StanleyControllerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class StanleyControllerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.StanleyControllerConfig) */ {
 public:
  inline StanleyControllerConfig() : StanleyControllerConfig(nullptr) {};
  virtual ~StanleyControllerConfig();

  StanleyControllerConfig(const StanleyControllerConfig& from);
  StanleyControllerConfig(StanleyControllerConfig&& from) noexcept
    : StanleyControllerConfig() {
    *this = ::std::move(from);
  }

  inline StanleyControllerConfig& operator=(const StanleyControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StanleyControllerConfig& operator=(StanleyControllerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StanleyControllerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StanleyControllerConfig* internal_default_instance() {
    return reinterpret_cast<const StanleyControllerConfig*>(
               &_StanleyControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StanleyControllerConfig& a, StanleyControllerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StanleyControllerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StanleyControllerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StanleyControllerConfig* New() const final {
    return CreateMaybeMessage<StanleyControllerConfig>(nullptr);
  }

  StanleyControllerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StanleyControllerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StanleyControllerConfig& from);
  void MergeFrom(const StanleyControllerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StanleyControllerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.StanleyControllerConfig";
  }
  protected:
  explicit StanleyControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto);
    return ::descriptor_table_control_5fbase_2fstanley_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableLatErrorFilterFieldNumber = 1,
    kEnableHeadingErrorFilterFieldNumber = 2,
    kQueryTimeNearestPointOnlyFieldNumber = 4,
    kMeanFilterWindowSizeFieldNumber = 3,
    kKYFieldNumber = 6,
    kQueryRelativeTimeFieldNumber = 5,
    kBasePreviewDisFieldNumber = 7,
    kBasePreviewTimeFieldNumber = 8,
  };
  // optional bool enable_lat_error_filter = 1 [default = false];
  bool has_enable_lat_error_filter() const;
  private:
  bool _internal_has_enable_lat_error_filter() const;
  public:
  void clear_enable_lat_error_filter();
  bool enable_lat_error_filter() const;
  void set_enable_lat_error_filter(bool value);
  private:
  bool _internal_enable_lat_error_filter() const;
  void _internal_set_enable_lat_error_filter(bool value);
  public:

  // optional bool enable_heading_error_filter = 2 [default = false];
  bool has_enable_heading_error_filter() const;
  private:
  bool _internal_has_enable_heading_error_filter() const;
  public:
  void clear_enable_heading_error_filter();
  bool enable_heading_error_filter() const;
  void set_enable_heading_error_filter(bool value);
  private:
  bool _internal_enable_heading_error_filter() const;
  void _internal_set_enable_heading_error_filter(bool value);
  public:

  // optional bool query_time_nearest_point_only = 4 [default = false];
  bool has_query_time_nearest_point_only() const;
  private:
  bool _internal_has_query_time_nearest_point_only() const;
  public:
  void clear_query_time_nearest_point_only();
  bool query_time_nearest_point_only() const;
  void set_query_time_nearest_point_only(bool value);
  private:
  bool _internal_query_time_nearest_point_only() const;
  void _internal_set_query_time_nearest_point_only(bool value);
  public:

  // optional int32 mean_filter_window_size = 3 [default = 5];
  bool has_mean_filter_window_size() const;
  private:
  bool _internal_has_mean_filter_window_size() const;
  public:
  void clear_mean_filter_window_size();
  ::PROTOBUF_NAMESPACE_ID::int32 mean_filter_window_size() const;
  void set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float k_y = 6 [default = 0.3];
  bool has_k_y() const;
  private:
  bool _internal_has_k_y() const;
  public:
  void clear_k_y();
  float k_y() const;
  void set_k_y(float value);
  private:
  float _internal_k_y() const;
  void _internal_set_k_y(float value);
  public:

  // optional double query_relative_time = 5 [default = 0.8];
  bool has_query_relative_time() const;
  private:
  bool _internal_has_query_relative_time() const;
  public:
  void clear_query_relative_time();
  double query_relative_time() const;
  void set_query_relative_time(double value);
  private:
  double _internal_query_relative_time() const;
  void _internal_set_query_relative_time(double value);
  public:

  // optional float base_preview_dis = 7 [default = 3];
  bool has_base_preview_dis() const;
  private:
  bool _internal_has_base_preview_dis() const;
  public:
  void clear_base_preview_dis();
  float base_preview_dis() const;
  void set_base_preview_dis(float value);
  private:
  float _internal_base_preview_dis() const;
  void _internal_set_base_preview_dis(float value);
  public:

  // optional float base_preview_time = 8 [default = 2];
  bool has_base_preview_time() const;
  private:
  bool _internal_has_base_preview_time() const;
  public:
  void clear_base_preview_time();
  float base_preview_time() const;
  void set_base_preview_time(float value);
  private:
  float _internal_base_preview_time() const;
  void _internal_set_base_preview_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:control.StanleyControllerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_lat_error_filter_;
  bool enable_heading_error_filter_;
  bool query_time_nearest_point_only_;
  ::PROTOBUF_NAMESPACE_ID::int32 mean_filter_window_size_;
  float k_y_;
  double query_relative_time_;
  float base_preview_dis_;
  float base_preview_time_;
  friend struct ::TableStruct_control_5fbase_2fstanley_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StanleyControllerConfig

// optional bool enable_lat_error_filter = 1 [default = false];
inline bool StanleyControllerConfig::_internal_has_enable_lat_error_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_enable_lat_error_filter() const {
  return _internal_has_enable_lat_error_filter();
}
inline void StanleyControllerConfig::clear_enable_lat_error_filter() {
  enable_lat_error_filter_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool StanleyControllerConfig::_internal_enable_lat_error_filter() const {
  return enable_lat_error_filter_;
}
inline bool StanleyControllerConfig::enable_lat_error_filter() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.enable_lat_error_filter)
  return _internal_enable_lat_error_filter();
}
inline void StanleyControllerConfig::_internal_set_enable_lat_error_filter(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_lat_error_filter_ = value;
}
inline void StanleyControllerConfig::set_enable_lat_error_filter(bool value) {
  _internal_set_enable_lat_error_filter(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.enable_lat_error_filter)
}

// optional bool enable_heading_error_filter = 2 [default = false];
inline bool StanleyControllerConfig::_internal_has_enable_heading_error_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_enable_heading_error_filter() const {
  return _internal_has_enable_heading_error_filter();
}
inline void StanleyControllerConfig::clear_enable_heading_error_filter() {
  enable_heading_error_filter_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool StanleyControllerConfig::_internal_enable_heading_error_filter() const {
  return enable_heading_error_filter_;
}
inline bool StanleyControllerConfig::enable_heading_error_filter() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.enable_heading_error_filter)
  return _internal_enable_heading_error_filter();
}
inline void StanleyControllerConfig::_internal_set_enable_heading_error_filter(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_heading_error_filter_ = value;
}
inline void StanleyControllerConfig::set_enable_heading_error_filter(bool value) {
  _internal_set_enable_heading_error_filter(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.enable_heading_error_filter)
}

// optional int32 mean_filter_window_size = 3 [default = 5];
inline bool StanleyControllerConfig::_internal_has_mean_filter_window_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_mean_filter_window_size() const {
  return _internal_has_mean_filter_window_size();
}
inline void StanleyControllerConfig::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StanleyControllerConfig::_internal_mean_filter_window_size() const {
  return mean_filter_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StanleyControllerConfig::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void StanleyControllerConfig::_internal_set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mean_filter_window_size_ = value;
}
inline void StanleyControllerConfig::set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mean_filter_window_size(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.mean_filter_window_size)
}

// optional bool query_time_nearest_point_only = 4 [default = false];
inline bool StanleyControllerConfig::_internal_has_query_time_nearest_point_only() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_query_time_nearest_point_only() const {
  return _internal_has_query_time_nearest_point_only();
}
inline void StanleyControllerConfig::clear_query_time_nearest_point_only() {
  query_time_nearest_point_only_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool StanleyControllerConfig::_internal_query_time_nearest_point_only() const {
  return query_time_nearest_point_only_;
}
inline bool StanleyControllerConfig::query_time_nearest_point_only() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.query_time_nearest_point_only)
  return _internal_query_time_nearest_point_only();
}
inline void StanleyControllerConfig::_internal_set_query_time_nearest_point_only(bool value) {
  _has_bits_[0] |= 0x00000004u;
  query_time_nearest_point_only_ = value;
}
inline void StanleyControllerConfig::set_query_time_nearest_point_only(bool value) {
  _internal_set_query_time_nearest_point_only(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.query_time_nearest_point_only)
}

// optional double query_relative_time = 5 [default = 0.8];
inline bool StanleyControllerConfig::_internal_has_query_relative_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_query_relative_time() const {
  return _internal_has_query_relative_time();
}
inline void StanleyControllerConfig::clear_query_relative_time() {
  query_relative_time_ = 0.8;
  _has_bits_[0] &= ~0x00000020u;
}
inline double StanleyControllerConfig::_internal_query_relative_time() const {
  return query_relative_time_;
}
inline double StanleyControllerConfig::query_relative_time() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.query_relative_time)
  return _internal_query_relative_time();
}
inline void StanleyControllerConfig::_internal_set_query_relative_time(double value) {
  _has_bits_[0] |= 0x00000020u;
  query_relative_time_ = value;
}
inline void StanleyControllerConfig::set_query_relative_time(double value) {
  _internal_set_query_relative_time(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.query_relative_time)
}

// optional float k_y = 6 [default = 0.3];
inline bool StanleyControllerConfig::_internal_has_k_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_k_y() const {
  return _internal_has_k_y();
}
inline void StanleyControllerConfig::clear_k_y() {
  k_y_ = 0.3f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float StanleyControllerConfig::_internal_k_y() const {
  return k_y_;
}
inline float StanleyControllerConfig::k_y() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.k_y)
  return _internal_k_y();
}
inline void StanleyControllerConfig::_internal_set_k_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  k_y_ = value;
}
inline void StanleyControllerConfig::set_k_y(float value) {
  _internal_set_k_y(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.k_y)
}

// optional float base_preview_dis = 7 [default = 3];
inline bool StanleyControllerConfig::_internal_has_base_preview_dis() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_base_preview_dis() const {
  return _internal_has_base_preview_dis();
}
inline void StanleyControllerConfig::clear_base_preview_dis() {
  base_preview_dis_ = 3;
  _has_bits_[0] &= ~0x00000040u;
}
inline float StanleyControllerConfig::_internal_base_preview_dis() const {
  return base_preview_dis_;
}
inline float StanleyControllerConfig::base_preview_dis() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.base_preview_dis)
  return _internal_base_preview_dis();
}
inline void StanleyControllerConfig::_internal_set_base_preview_dis(float value) {
  _has_bits_[0] |= 0x00000040u;
  base_preview_dis_ = value;
}
inline void StanleyControllerConfig::set_base_preview_dis(float value) {
  _internal_set_base_preview_dis(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.base_preview_dis)
}

// optional float base_preview_time = 8 [default = 2];
inline bool StanleyControllerConfig::_internal_has_base_preview_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StanleyControllerConfig::has_base_preview_time() const {
  return _internal_has_base_preview_time();
}
inline void StanleyControllerConfig::clear_base_preview_time() {
  base_preview_time_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline float StanleyControllerConfig::_internal_base_preview_time() const {
  return base_preview_time_;
}
inline float StanleyControllerConfig::base_preview_time() const {
  // @@protoc_insertion_point(field_get:control.StanleyControllerConfig.base_preview_time)
  return _internal_base_preview_time();
}
inline void StanleyControllerConfig::_internal_set_base_preview_time(float value) {
  _has_bits_[0] |= 0x00000080u;
  base_preview_time_ = value;
}
inline void StanleyControllerConfig::set_base_preview_time(float value) {
  _internal_set_base_preview_time(value);
  // @@protoc_insertion_point(field_set:control.StanleyControllerConfig.base_preview_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fstanley_5fcontroller_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/control_debug.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/control_debug.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {

inline constexpr SimpleAntiSlopeDebug::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hill_start_window_{0},
        preview_length_{0},
        quit_hill_start_speed_{0},
        normal_start_tartget_acc_{0},
        hill_start_acc_gain_rate_{0},
        normal_start_acc_gain_rate_{0},
        in_hill_start_condition_{false},
        in_normal_start_condition_{false},
        on_obstacle_{false},
        from_else_to_auto_{false},
        previous_is_auto_{false},
        uphill_too_fast_{false},
        only_use_brk_downhill_{false},
        erase_brk_in_go_{false},
        anti_cmd_brake_{0},
        anti_cmd_throttle_{0},
        erase_brk_in_end_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SimpleAntiSlopeDebug::SimpleAntiSlopeDebug(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimpleAntiSlopeDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleAntiSlopeDebugDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleAntiSlopeDebugDefaultTypeInternal() {}
  union {
    SimpleAntiSlopeDebug _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleAntiSlopeDebugDefaultTypeInternal _SimpleAntiSlopeDebug_default_instance_;

inline constexpr ControlCheckDebug::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lateral_error_check_result_{static_cast< ::control::ControlCheckStatus >(0)},
        lateral_error_check_e_count_{0u},
        lateral_error_check_w_count_{0u},
        heading_error_check_result_{static_cast< ::control::ControlCheckStatus >(0)},
        heading_error_check_e_count_{0u},
        heading_error_check_w_count_{0u},
        station_error_check_result_{static_cast< ::control::ControlCheckStatus >(0)},
        station_error_check_e_count_{0u},
        station_error_check_w_count_{0u},
        speed_error_check_result_{static_cast< ::control::ControlCheckStatus >(0)},
        speed_error_check_e_count_{0u},
        speed_error_check_w_count_{0u},
        lateral_error_e_{0},
        lateral_error_w_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ControlCheckDebug::ControlCheckDebug(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ControlCheckDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlCheckDebugDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlCheckDebugDefaultTypeInternal() {}
  union {
    ControlCheckDebug _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlCheckDebugDefaultTypeInternal _ControlCheckDebug_default_instance_;

inline constexpr SimpleMPCPlusDebug::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        matrix_q_updated_{},
        matrix_r_updated_{},
        control_task_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_matched_point_{nullptr},
        current_reference_point_{nullptr},
        preview_reference_point_{nullptr},
        lateral_error_{0},
        ref_heading_{0},
        heading_{0},
        heading_error_{0},
        heading_error_rate_{0},
        lateral_error_rate_{0},
        curvature_{0},
        steer_angle_{0},
        steer_angle_feedforward_{0},
        steer_angle_lateral_contribution_{0},
        steer_angle_lateral_rate_contribution_{0},
        steer_angle_heading_contribution_{0},
        steer_angle_heading_rate_contribution_{0},
        steer_angle_feedback_{0},
        steering_position_{0},
        ref_speed_{0},
        steer_angle_limited_{0},
        station_reference_{0},
        station_error_{0},
        speed_reference_{0},
        speed_error_{0},
        acceleration_reference_{0},
        station_feedback_{0},
        speed_feedback_{0},
        acceleration_cmd_closeloop_{0},
        acceleration_cmd_{0},
        acceleration_lookup_{0},
        speed_lookup_{0},
        calibration_value_{0},
        steer_unconstrained_control_diff_{0},
        steer_angle_feedforward_compensation_{0},
        lateral_acceleration_{0},
        lateral_jerk_{0},
        ref_heading_rate_{0},
        heading_rate_{0},
        ref_heading_acceleration_{0},
        heading_acceleration_{0},
        heading_error_acceleration_{0},
        ref_heading_jerk_{0},
        heading_jerk_{0},
        heading_error_jerk_{0},
        acceleration_feedback_{0},
        acceleration_error_{0},
        jerk_reference_{0},
        jerk_feedback_{0},
        jerk_error_{0},
        lateral_error_feedback_{0},
        heading_error_feedback_{0},
        steer_angle_feedback_augment_{0},
        preview_station_error_{0},
        preview_speed_reference_{0},
        preview_speed_error_{0},
        preview_acceleration_reference_{0},
        vehicle_pitch_{0},
        slope_offset_compensation_{0},
        path_remain_{0},
        acceleration_lookup_offset_{0},
        acceleration_vrf_{0},
        is_full_stop_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SimpleMPCPlusDebug::SimpleMPCPlusDebug(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimpleMPCPlusDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleMPCPlusDebugDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleMPCPlusDebugDefaultTypeInternal() {}
  union {
    SimpleMPCPlusDebug _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleMPCPlusDebugDefaultTypeInternal _SimpleMPCPlusDebug_default_instance_;

inline constexpr SimpleLongitudinalPlusDebug::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        control_task_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_matched_point_{nullptr},
        current_reference_point_{nullptr},
        preview_reference_point_{nullptr},
        station_reference_{0},
        station_error_{0},
        station_error_limited_{0},
        preview_station_error_{0},
        speed_reference_{0},
        speed_error_{0},
        speed_controller_input_limited_{0},
        preview_speed_reference_{0},
        preview_speed_error_{0},
        preview_acceleration_reference_{0},
        acceleration_cmd_closeloop_{0},
        acceleration_cmd_{0},
        acceleration_lookup_{0},
        speed_lookup_{0},
        calibration_value_{0},
        throttle_cmd_{0},
        brake_cmd_{0},
        slope_offset_compensation_{0},
        current_station_{0},
        path_remain_{0},
        pid_saturation_status_{0},
        leadlag_saturation_status_{0},
        speed_offset_{0},
        current_speed_{0},
        acceleration_reference_{0},
        current_acceleration_{0},
        acceleration_error_{0},
        jerk_reference_{0},
        current_jerk_{0},
        jerk_error_{0},
        acceleration_lookup_limit_{0},
        vehicle_pitch_{0},
        current_steer_interval_{0},
        is_full_stop_{false},
        is_epb_brake_{false},
        is_wait_steer_{false},
        is_stop_reason_by_destination_{false},
        is_stop_reason_by_prdestrian_{false},
        is_full_stop_soft_{false},
        form_go_to_full_stop_{false},
        begin_end_brake_{false},
        path_remain_add_{0},
        max_path_remain_when_stopped_{0},
        hillup_fullstop_brake_rate_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SimpleLongitudinalPlusDebug::SimpleLongitudinalPlusDebug(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimpleLongitudinalPlusDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleLongitudinalPlusDebugDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleLongitudinalPlusDebugDefaultTypeInternal() {}
  union {
    SimpleLongitudinalPlusDebug _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleLongitudinalPlusDebugDefaultTypeInternal _SimpleLongitudinalPlusDebug_default_instance_;

inline constexpr SimpleLateralPlusDebug::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        control_task_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_target_point_{nullptr},
        steer_mrac_debug_{nullptr},
        lat_control_check_debug_{nullptr},
        lateral_error_{0},
        ref_heading_{0},
        heading_{0},
        heading_error_{0},
        heading_error_rate_{0},
        lateral_error_rate_{0},
        curvature_{0},
        steer_angle_{0},
        steer_angle_feedforward_{0},
        steer_angle_lateral_contribution_{0},
        steer_angle_lateral_rate_contribution_{0},
        steer_angle_heading_contribution_{0},
        steer_angle_heading_rate_contribution_{0},
        steer_angle_feedback_{0},
        steering_position_{0},
        ref_speed_{0},
        steer_angle_limited_{0},
        lateral_acceleration_{0},
        lateral_jerk_{0},
        ref_heading_rate_{0},
        heading_rate_{0},
        ref_heading_acceleration_{0},
        heading_acceleration_{0},
        heading_error_acceleration_{0},
        ref_heading_jerk_{0},
        heading_jerk_{0},
        heading_error_jerk_{0},
        lateral_error_feedback_{0},
        heading_error_feedback_{0},
        steer_angle_feedback_augment_{0},
        lateral_centripetal_acceleration_{0},
        efai_rate_{0},
        ed_rate_{0},
        steer_mrac_enable_status_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SimpleLateralPlusDebug::SimpleLateralPlusDebug(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimpleLateralPlusDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleLateralPlusDebugDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleLateralPlusDebugDefaultTypeInternal() {}
  union {
    SimpleLateralPlusDebug _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleLateralPlusDebugDefaultTypeInternal _SimpleLateralPlusDebug_default_instance_;

inline constexpr CleaningSafetyCheckDebug::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        predicted_trajectory_point_{},
        control_task_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cleaning_control_check_debug_{nullptr},
        current_predicted_end_point_{nullptr},
        post_process_throttle_cmd_{0},
        post_process_brake_cmd_{0},
        is_need_post_command_{false},
        is_predicted_collsion_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CleaningSafetyCheckDebug::CleaningSafetyCheckDebug(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CleaningSafetyCheckDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleaningSafetyCheckDebugDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleaningSafetyCheckDebugDefaultTypeInternal() {}
  union {
    CleaningSafetyCheckDebug _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleaningSafetyCheckDebugDefaultTypeInternal _CleaningSafetyCheckDebug_default_instance_;

inline constexpr ControlDebugInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        simple_lon_debug_{nullptr},
        simple_lat_debug_{nullptr},
        simple_mpc_debug_{nullptr},
        simple_anti_slope_debug_{nullptr},
        cleaning_safety_check_debug_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ControlDebugInfo::ControlDebugInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ControlDebugInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlDebugInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlDebugInfoDefaultTypeInternal() {}
  union {
    ControlDebugInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlDebugInfoDefaultTypeInternal _ControlDebugInfo_default_instance_;
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _impl_.simple_lon_debug_),
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _impl_.simple_lat_debug_),
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _impl_.simple_mpc_debug_),
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _impl_.simple_anti_slope_debug_),
        PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _impl_.cleaning_safety_check_debug_),
        0,
        1,
        2,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.station_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.station_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.station_error_limited_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.preview_station_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.speed_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.speed_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.speed_controller_input_limited_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.preview_speed_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.preview_speed_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.preview_acceleration_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.acceleration_cmd_closeloop_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.acceleration_cmd_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.acceleration_lookup_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.speed_lookup_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.calibration_value_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.throttle_cmd_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.brake_cmd_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.is_full_stop_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.slope_offset_compensation_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.current_station_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.path_remain_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.pid_saturation_status_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.leadlag_saturation_status_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.speed_offset_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.current_speed_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.acceleration_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.current_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.acceleration_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.jerk_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.current_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.jerk_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.current_matched_point_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.current_reference_point_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.preview_reference_point_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.acceleration_lookup_limit_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.vehicle_pitch_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.is_epb_brake_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.current_steer_interval_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.is_wait_steer_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.is_stop_reason_by_destination_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.is_stop_reason_by_prdestrian_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.is_full_stop_soft_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.control_task_name_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.path_remain_add_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.max_path_remain_when_stopped_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.form_go_to_full_stop_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.begin_end_brake_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _impl_.hillup_fullstop_brake_rate_),
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        37,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        1,
        2,
        3,
        34,
        35,
        38,
        36,
        39,
        40,
        41,
        42,
        0,
        45,
        46,
        43,
        44,
        47,
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.lateral_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.ref_heading_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_error_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.lateral_error_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.curvature_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_feedforward_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_lateral_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_lateral_rate_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_heading_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_heading_rate_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steering_position_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.ref_speed_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_limited_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.lateral_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.lateral_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.ref_heading_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.ref_heading_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_error_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.ref_heading_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_error_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.lateral_error_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.heading_error_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.current_target_point_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_angle_feedback_augment_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_mrac_debug_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.steer_mrac_enable_status_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.lateral_centripetal_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.control_task_name_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.lat_control_check_debug_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.efai_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _impl_.ed_rate_),
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        1,
        33,
        2,
        37,
        34,
        0,
        3,
        35,
        36,
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.lateral_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.ref_heading_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_error_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.lateral_error_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.curvature_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_feedforward_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_lateral_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_lateral_rate_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_heading_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_heading_rate_contribution_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steering_position_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.ref_speed_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_limited_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.station_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.station_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.speed_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.speed_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.is_full_stop_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.station_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.speed_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_cmd_closeloop_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_cmd_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_lookup_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.speed_lookup_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.calibration_value_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_unconstrained_control_diff_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_feedforward_compensation_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.matrix_q_updated_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.matrix_r_updated_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.lateral_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.lateral_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.ref_heading_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.ref_heading_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_error_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.ref_heading_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_error_jerk_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.jerk_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.jerk_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.jerk_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.lateral_error_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.heading_error_feedback_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.steer_angle_feedback_augment_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.current_matched_point_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.current_reference_point_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.preview_reference_point_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.preview_station_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.preview_speed_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.preview_speed_error_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.preview_acceleration_reference_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.vehicle_pitch_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.slope_offset_compensation_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.path_remain_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_lookup_offset_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.acceleration_vrf_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _impl_.control_task_name_),
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        62,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        ~0u,
        ~0u,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        1,
        2,
        3,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        0,
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.lateral_error_check_result_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.lateral_error_check_e_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.lateral_error_check_w_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.heading_error_check_result_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.heading_error_check_e_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.heading_error_check_w_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.station_error_check_result_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.station_error_check_e_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.station_error_check_w_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.speed_error_check_result_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.speed_error_check_e_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.speed_error_check_w_count_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.lateral_error_e_),
        PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _impl_.lateral_error_w_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.hill_start_window_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.preview_length_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.quit_hill_start_speed_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.normal_start_tartget_acc_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.in_hill_start_condition_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.in_normal_start_condition_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.hill_start_acc_gain_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.normal_start_acc_gain_rate_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.on_obstacle_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.from_else_to_auto_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.previous_is_auto_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.anti_cmd_brake_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.anti_cmd_throttle_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.uphill_too_fast_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.only_use_brk_downhill_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.erase_brk_in_go_),
        PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _impl_.erase_brk_in_end_),
        0,
        1,
        2,
        3,
        6,
        7,
        4,
        5,
        8,
        9,
        10,
        14,
        15,
        11,
        12,
        13,
        16,
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.control_task_name_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.is_need_post_command_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.cleaning_control_check_debug_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.current_predicted_end_point_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.predicted_trajectory_point_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.is_predicted_collsion_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.post_process_throttle_cmd_),
        PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _impl_.post_process_brake_cmd_),
        0,
        5,
        1,
        2,
        ~0u,
        6,
        3,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::control::ControlDebugInfo)},
        {20, 76, -1, sizeof(::control::SimpleLongitudinalPlusDebug)},
        {124, 170, -1, sizeof(::control::SimpleLateralPlusDebug)},
        {208, 281, -1, sizeof(::control::SimpleMPCPlusDebug)},
        {346, 368, -1, sizeof(::control::ControlCheckDebug)},
        {382, 407, -1, sizeof(::control::SimpleAntiSlopeDebug)},
        {424, 440, -1, sizeof(::control::CleaningSafetyCheckDebug)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::_ControlDebugInfo_default_instance_._instance,
    &::control::_SimpleLongitudinalPlusDebug_default_instance_._instance,
    &::control::_SimpleLateralPlusDebug_default_instance_._instance,
    &::control::_SimpleMPCPlusDebug_default_instance_._instance,
    &::control::_ControlCheckDebug_default_instance_._instance,
    &::control::_SimpleAntiSlopeDebug_default_instance_._instance,
    &::control::_CleaningSafetyCheckDebug_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2fcontrol_5fdebug_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n control_base/control_debug.proto\022\007cont"
    "rol\032\036control_msgs/control_cmd.proto\032#com"
    "mon_msgs/basic_msgs/header.proto\032&common"
    "_msgs/basic_msgs/pnc_point.proto\032\037contro"
    "l_base/check_status.proto\"\364\002\n\020ControlDeb"
    "ugInfo\022&\n\006header\030\001 \001(\0132\026.control.common."
    "Header\022>\n\020simple_lon_debug\030\002 \001(\0132$.contr"
    "ol.SimpleLongitudinalPlusDebug\0229\n\020simple"
    "_lat_debug\030\003 \001(\0132\037.control.SimpleLateral"
    "PlusDebug\0225\n\020simple_mpc_debug\030\004 \001(\0132\033.co"
    "ntrol.SimpleMPCPlusDebug\022>\n\027simple_anti_"
    "slope_debug\030\005 \001(\0132\035.control.SimpleAntiSl"
    "opeDebug\022F\n\033cleaning_safety_check_debug\030"
    "\006 \001(\0132!.control.CleaningSafetyCheckDebug"
    "\"\330\013\n\033SimpleLongitudinalPlusDebug\022\031\n\021stat"
    "ion_reference\030\001 \001(\001\022\025\n\rstation_error\030\002 \001"
    "(\001\022\035\n\025station_error_limited\030\003 \001(\001\022\035\n\025pre"
    "view_station_error\030\004 \001(\001\022\027\n\017speed_refere"
    "nce\030\005 \001(\001\022\023\n\013speed_error\030\006 \001(\001\022&\n\036speed_"
    "controller_input_limited\030\007 \001(\001\022\037\n\027previe"
    "w_speed_reference\030\010 \001(\001\022\033\n\023preview_speed"
    "_error\030\t \001(\001\022&\n\036preview_acceleration_ref"
    "erence\030\n \001(\001\022\"\n\032acceleration_cmd_closelo"
    "op\030\013 \001(\001\022\030\n\020acceleration_cmd\030\014 \001(\001\022\033\n\023ac"
    "celeration_lookup\030\r \001(\001\022\024\n\014speed_lookup\030"
    "\016 \001(\001\022\031\n\021calibration_value\030\017 \001(\001\022\024\n\014thro"
    "ttle_cmd\030\020 \001(\001\022\021\n\tbrake_cmd\030\021 \001(\001\022\024\n\014is_"
    "full_stop\030\022 \001(\010\022!\n\031slope_offset_compensa"
    "tion\030\023 \001(\001\022\027\n\017current_station\030\024 \001(\001\022\023\n\013p"
    "ath_remain\030\025 \001(\001\022\035\n\025pid_saturation_statu"
    "s\030\026 \001(\005\022!\n\031leadlag_saturation_status\030\027 \001"
    "(\005\022\024\n\014speed_offset\030\030 \001(\001\022\025\n\rcurrent_spee"
    "d\030\031 \001(\001\022\036\n\026acceleration_reference\030\032 \001(\001\022"
    "\034\n\024current_acceleration\030\033 \001(\001\022\032\n\022acceler"
    "ation_error\030\034 \001(\001\022\026\n\016jerk_reference\030\035 \001("
    "\001\022\024\n\014current_jerk\030\036 \001(\001\022\022\n\njerk_error\030\037 "
    "\001(\001\022>\n\025current_matched_point\030  \001(\0132\037.con"
    "trol.common.TrajectoryPoint\022@\n\027current_r"
    "eference_point\030! \001(\0132\037.control.common.Tr"
    "ajectoryPoint\022@\n\027preview_reference_point"
    "\030\" \001(\0132\037.control.common.TrajectoryPoint\022"
    "!\n\031acceleration_lookup_limit\030# \001(\001\022\025\n\rve"
    "hicle_pitch\030$ \001(\001\022\024\n\014is_epb_brake\030% \001(\010\022"
    "\036\n\026current_steer_interval\030& \001(\001\022\025\n\ris_wa"
    "it_steer\030\' \001(\010\022%\n\035is_stop_reason_by_dest"
    "ination\030( \001(\010\022$\n\034is_stop_reason_by_prdes"
    "trian\030) \001(\010\022\031\n\021is_full_stop_soft\030* \001(\010\022\031"
    "\n\021control_task_name\030+ \001(\t\022\027\n\017path_remain"
    "_add\030, \001(\001\022$\n\034max_path_remain_when_stopp"
    "ed\030- \001(\001\022\034\n\024form_go_to_full_stop\030. \001(\010\022\027"
    "\n\017begin_end_brake\030/ \001(\010\022\"\n\032hillup_fullst"
    "op_brake_rate\0300 \001(\001\"\267\t\n\026SimpleLateralPlu"
    "sDebug\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_hea"
    "ding\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_e"
    "rror\030\004 \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032"
    "\n\022lateral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030"
    "\007 \001(\001\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angl"
    "e_feedforward\030\t \001(\001\022(\n steer_angle_later"
    "al_contribution\030\n \001(\001\022-\n%steer_angle_lat"
    "eral_rate_contribution\030\013 \001(\001\022(\n steer_an"
    "gle_heading_contribution\030\014 \001(\001\022-\n%steer_"
    "angle_heading_rate_contribution\030\r \001(\001\022\034\n"
    "\024steer_angle_feedback\030\016 \001(\001\022\031\n\021steering_"
    "position\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023ste"
    "er_angle_limited\030\021 \001(\001\022\034\n\024lateral_accele"
    "ration\030\022 \001(\001\022\024\n\014lateral_jerk\030\023 \001(\001\022\030\n\020re"
    "f_heading_rate\030\024 \001(\001\022\024\n\014heading_rate\030\025 \001"
    "(\001\022 \n\030ref_heading_acceleration\030\026 \001(\001\022\034\n\024"
    "heading_acceleration\030\027 \001(\001\022\"\n\032heading_er"
    "ror_acceleration\030\030 \001(\001\022\030\n\020ref_heading_je"
    "rk\030\031 \001(\001\022\024\n\014heading_jerk\030\032 \001(\001\022\032\n\022headin"
    "g_error_jerk\030\033 \001(\001\022\036\n\026lateral_error_feed"
    "back\030\034 \001(\001\022\036\n\026heading_error_feedback\030\035 \001"
    "(\001\022=\n\024current_target_point\030\036 \001(\0132\037.contr"
    "ol.common.TrajectoryPoint\022$\n\034steer_angle"
    "_feedback_augment\030\037 \001(\001\022,\n\020steer_mrac_de"
    "bug\030  \001(\0132\022.control.MracDebug\022 \n\030steer_m"
    "rac_enable_status\030! \001(\010\022(\n lateral_centr"
    "ipetal_acceleration\030\" \001(\001\022\031\n\021control_tas"
    "k_name\030# \001(\t\022;\n\027lat_control_check_debug\030"
    "$ \001(\0132\032.control.ControlCheckDebug\022\021\n\tefa"
    "i_rate\030% \001(\001\022\017\n\007ed_rate\030& \001(\001\"\315\017\n\022Simple"
    "MPCPlusDebug\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013r"
    "ef_heading\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rhea"
    "ding_error\030\004 \001(\001\022\032\n\022heading_error_rate\030\005"
    " \001(\001\022\032\n\022lateral_error_rate\030\006 \001(\001\022\021\n\tcurv"
    "ature\030\007 \001(\001\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027stee"
    "r_angle_feedforward\030\t \001(\001\022(\n steer_angle"
    "_lateral_contribution\030\n \001(\001\022-\n%steer_ang"
    "le_lateral_rate_contribution\030\013 \001(\001\022(\n st"
    "eer_angle_heading_contribution\030\014 \001(\001\022-\n%"
    "steer_angle_heading_rate_contribution\030\r "
    "\001(\001\022\034\n\024steer_angle_feedback\030\016 \001(\001\022\031\n\021ste"
    "ering_position\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022"
    "\033\n\023steer_angle_limited\030\021 \001(\001\022\031\n\021station_"
    "reference\030\022 \001(\001\022\025\n\rstation_error\030\023 \001(\001\022\027"
    "\n\017speed_reference\030\024 \001(\001\022\023\n\013speed_error\030\025"
    " \001(\001\022\036\n\026acceleration_reference\030\026 \001(\001\022\024\n\014"
    "is_full_stop\030\027 \001(\010\022\030\n\020station_feedback\030\030"
    " \001(\001\022\026\n\016speed_feedback\030\031 \001(\001\022\"\n\032accelera"
    "tion_cmd_closeloop\030\032 \001(\001\022\030\n\020acceleration"
    "_cmd\030\033 \001(\001\022\033\n\023acceleration_lookup\030\034 \001(\001\022"
    "\024\n\014speed_lookup\030\035 \001(\001\022\031\n\021calibration_val"
    "ue\030\036 \001(\001\022(\n steer_unconstrained_control_"
    "diff\030\037 \001(\001\022,\n$steer_angle_feedforward_co"
    "mpensation\030  \001(\001\022\030\n\020matrix_q_updated\030! \003"
    "(\001\022\030\n\020matrix_r_updated\030\" \003(\001\022\034\n\024lateral_"
    "acceleration\030# \001(\001\022\024\n\014lateral_jerk\030$ \001(\001"
    "\022\030\n\020ref_heading_rate\030% \001(\001\022\024\n\014heading_ra"
    "te\030& \001(\001\022 \n\030ref_heading_acceleration\030\' \001"
    "(\001\022\034\n\024heading_acceleration\030( \001(\001\022\"\n\032head"
    "ing_error_acceleration\030) \001(\001\022\030\n\020ref_head"
    "ing_jerk\030* \001(\001\022\024\n\014heading_jerk\030+ \001(\001\022\032\n\022"
    "heading_error_jerk\030, \001(\001\022\035\n\025acceleration"
    "_feedback\030- \001(\001\022\032\n\022acceleration_error\030. "
    "\001(\001\022\026\n\016jerk_reference\030/ \001(\001\022\025\n\rjerk_feed"
    "back\0300 \001(\001\022\022\n\njerk_error\0301 \001(\001\022\036\n\026latera"
    "l_error_feedback\0302 \001(\001\022\036\n\026heading_error_"
    "feedback\0303 \001(\001\022$\n\034steer_angle_feedback_a"
    "ugment\0304 \001(\001\022>\n\025current_matched_point\0305 "
    "\001(\0132\037.control.common.TrajectoryPoint\022@\n\027"
    "current_reference_point\0306 \001(\0132\037.control."
    "common.TrajectoryPoint\022@\n\027preview_refere"
    "nce_point\0307 \001(\0132\037.control.common.Traject"
    "oryPoint\022\035\n\025preview_station_error\0308 \001(\001\022"
    "\037\n\027preview_speed_reference\0309 \001(\001\022\033\n\023prev"
    "iew_speed_error\030: \001(\001\022&\n\036preview_acceler"
    "ation_reference\030; \001(\001\022\025\n\rvehicle_pitch\030<"
    " \001(\001\022!\n\031slope_offset_compensation\030= \001(\001\022"
    "\023\n\013path_remain\030> \001(\001\022\"\n\032acceleration_loo"
    "kup_offset\030\? \001(\001\022\030\n\020acceleration_vrf\030@ \001"
    "(\001\022\031\n\021control_task_name\030A \001(\t\"\353\004\n\021Contro"
    "lCheckDebug\022\?\n\032lateral_error_check_resul"
    "t\030\001 \001(\0162\033.control.ControlCheckStatus\022#\n\033"
    "lateral_error_check_e_count\030\002 \001(\r\022#\n\033lat"
    "eral_error_check_w_count\030\003 \001(\r\022\?\n\032headin"
    "g_error_check_result\030\004 \001(\0162\033.control.Con"
    "trolCheckStatus\022#\n\033heading_error_check_e"
    "_count\030\005 \001(\r\022#\n\033heading_error_check_w_co"
    "unt\030\006 \001(\r\022\?\n\032station_error_check_result\030"
    "\007 \001(\0162\033.control.ControlCheckStatus\022#\n\033st"
    "ation_error_check_e_count\030\010 \001(\r\022#\n\033stati"
    "on_error_check_w_count\030\t \001(\r\022=\n\030speed_er"
    "ror_check_result\030\n \001(\0162\033.control.Control"
    "CheckStatus\022!\n\031speed_error_check_e_count"
    "\030\013 \001(\r\022!\n\031speed_error_check_w_count\030\014 \001("
    "\r\022\027\n\017lateral_error_e\030\r \001(\001\022\027\n\017lateral_er"
    "ror_w\030\016 \001(\001\"\374\003\n\024SimpleAntiSlopeDebug\022\031\n\021"
    "hill_start_window\030\001 \001(\005\022\026\n\016preview_lengt"
    "h\030\002 \001(\005\022\035\n\025quit_hill_start_speed\030\003 \001(\001\022 "
    "\n\030normal_start_tartget_acc\030\004 \001(\001\022\037\n\027in_h"
    "ill_start_condition\030\005 \001(\010\022!\n\031in_normal_s"
    "tart_condition\030\006 \001(\010\022 \n\030hill_start_acc_g"
    "ain_rate\030\007 \001(\001\022\"\n\032normal_start_acc_gain_"
    "rate\030\010 \001(\001\022\023\n\013on_obstacle\030\t \001(\010\022\031\n\021from_"
    "else_to_auto\030\n \001(\010\022\030\n\020previous_is_auto\030\013"
    " \001(\010\022\026\n\016anti_cmd_brake\030\014 \001(\001\022\031\n\021anti_cmd"
    "_throttle\030\r \001(\001\022\027\n\017uphill_too_fast\030\016 \001(\010"
    "\022\035\n\025only_use_brk_downhill\030\017 \001(\010\022\027\n\017erase"
    "_brk_in_go\030\020 \001(\010\022\030\n\020erase_brk_in_end\030\021 \001"
    "(\010\"\202\003\n\030CleaningSafetyCheckDebug\022\031\n\021contr"
    "ol_task_name\030\001 \001(\t\022\034\n\024is_need_post_comma"
    "nd\030\002 \001(\010\022@\n\034cleaning_control_check_debug"
    "\030\003 \001(\0132\032.control.ControlCheckDebug\022D\n\033cu"
    "rrent_predicted_end_point\030\004 \001(\0132\037.contro"
    "l.common.TrajectoryPoint\022C\n\032predicted_tr"
    "ajectory_point\030\005 \003(\0132\037.control.common.Tr"
    "ajectoryPoint\022\035\n\025is_predicted_collsion\030\006"
    " \001(\010\022!\n\031post_process_throttle_cmd\030\010 \001(\001\022"
    "\036\n\026post_process_brake_cmd\030\t \001(\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_deps[4] =
    {
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto,
        &::descriptor_table_control_5fbase_2fcheck_5fstatus_2eproto,
        &::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto,
};
static ::absl::once_flag descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto = {
    false,
    false,
    6791,
    descriptor_table_protodef_control_5fbase_2fcontrol_5fdebug_2eproto,
    "control_base/control_debug.proto",
    &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_once,
    descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_deps,
    4,
    7,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto,
    file_level_service_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto,
};
namespace control {
// ===================================================================

class ControlDebugInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ControlDebugInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_._has_bits_);
};

void ControlDebugInfo::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlDebugInfo::ControlDebugInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.ControlDebugInfo)
}
inline PROTOBUF_NDEBUG_INLINE ControlDebugInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::ControlDebugInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ControlDebugInfo::ControlDebugInfo(
    ::google::protobuf::Arena* arena,
    const ControlDebugInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ControlDebugInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.simple_lon_debug_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::SimpleLongitudinalPlusDebug>(
                              arena, *from._impl_.simple_lon_debug_)
                        : nullptr;
  _impl_.simple_lat_debug_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::SimpleLateralPlusDebug>(
                              arena, *from._impl_.simple_lat_debug_)
                        : nullptr;
  _impl_.simple_mpc_debug_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::SimpleMPCPlusDebug>(
                              arena, *from._impl_.simple_mpc_debug_)
                        : nullptr;
  _impl_.simple_anti_slope_debug_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::control::SimpleAntiSlopeDebug>(
                              arena, *from._impl_.simple_anti_slope_debug_)
                        : nullptr;
  _impl_.cleaning_safety_check_debug_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::control::CleaningSafetyCheckDebug>(
                              arena, *from._impl_.cleaning_safety_check_debug_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:control.ControlDebugInfo)
}
inline PROTOBUF_NDEBUG_INLINE ControlDebugInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ControlDebugInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, cleaning_safety_check_debug_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::cleaning_safety_check_debug_));
}
ControlDebugInfo::~ControlDebugInfo() {
  // @@protoc_insertion_point(destructor:control.ControlDebugInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlDebugInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.simple_lon_debug_;
  delete _impl_.simple_lat_debug_;
  delete _impl_.simple_mpc_debug_;
  delete _impl_.simple_anti_slope_debug_;
  delete _impl_.cleaning_safety_check_debug_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ControlDebugInfo::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ControlDebugInfo::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ControlDebugInfo>(),
            ::google::protobuf::Message::GetNewImpl<ControlDebugInfo>(),
            ::google::protobuf::Message::GetClearImpl<ControlDebugInfo>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<ControlDebugInfo>(),
                ::google::protobuf::Message::GetSerializeImpl<ControlDebugInfo>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_._cached_size_),
            false,
        },
        &ControlDebugInfo::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ControlDebugInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2> ControlDebugInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlDebugInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::ControlDebugInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.header_)}},
    // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_lon_debug_)}},
    // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_lat_debug_)}},
    // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_mpc_debug_)}},
    // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_anti_slope_debug_)}},
    // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.cleaning_safety_check_debug_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .control.common.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
    {PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_lon_debug_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
    {PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_lat_debug_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
    {PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_mpc_debug_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
    {PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.simple_anti_slope_debug_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
    {PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.cleaning_safety_check_debug_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::Header>()},
    {::_pbi::TcParser::GetTable<::control::SimpleLongitudinalPlusDebug>()},
    {::_pbi::TcParser::GetTable<::control::SimpleLateralPlusDebug>()},
    {::_pbi::TcParser::GetTable<::control::SimpleMPCPlusDebug>()},
    {::_pbi::TcParser::GetTable<::control::SimpleAntiSlopeDebug>()},
    {::_pbi::TcParser::GetTable<::control::CleaningSafetyCheckDebug>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ControlDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:control.ControlDebugInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.simple_lon_debug_ != nullptr);
      _impl_.simple_lon_debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.simple_lat_debug_ != nullptr);
      _impl_.simple_lat_debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.simple_mpc_debug_ != nullptr);
      _impl_.simple_mpc_debug_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.simple_anti_slope_debug_ != nullptr);
      _impl_.simple_anti_slope_debug_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.cleaning_safety_check_debug_ != nullptr);
      _impl_.cleaning_safety_check_debug_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ControlDebugInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.ControlDebugInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.header_, _impl_.header_->GetCachedSize(), target, stream);
  }

  // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.simple_lon_debug_, _impl_.simple_lon_debug_->GetCachedSize(), target, stream);
  }

  // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.simple_lat_debug_, _impl_.simple_lat_debug_->GetCachedSize(), target, stream);
  }

  // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.simple_mpc_debug_, _impl_.simple_mpc_debug_->GetCachedSize(), target, stream);
  }

  // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.simple_anti_slope_debug_, _impl_.simple_anti_slope_debug_->GetCachedSize(), target, stream);
  }

  // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.cleaning_safety_check_debug_, _impl_.cleaning_safety_check_debug_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.ControlDebugInfo)
  return target;
}

::size_t ControlDebugInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.ControlDebugInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }
    // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.simple_lon_debug_);
    }
    // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.simple_lat_debug_);
    }
    // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.simple_mpc_debug_);
    }
    // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.simple_anti_slope_debug_);
    }
    // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cleaning_safety_check_debug_);
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void ControlDebugInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ControlDebugInfo*>(&to_msg);
  auto& from = static_cast<const ControlDebugInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.ControlDebugInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.simple_lon_debug_ != nullptr);
      if (_this->_impl_.simple_lon_debug_ == nullptr) {
        _this->_impl_.simple_lon_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::SimpleLongitudinalPlusDebug>(arena, *from._impl_.simple_lon_debug_);
      } else {
        _this->_impl_.simple_lon_debug_->MergeFrom(*from._impl_.simple_lon_debug_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.simple_lat_debug_ != nullptr);
      if (_this->_impl_.simple_lat_debug_ == nullptr) {
        _this->_impl_.simple_lat_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::SimpleLateralPlusDebug>(arena, *from._impl_.simple_lat_debug_);
      } else {
        _this->_impl_.simple_lat_debug_->MergeFrom(*from._impl_.simple_lat_debug_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.simple_mpc_debug_ != nullptr);
      if (_this->_impl_.simple_mpc_debug_ == nullptr) {
        _this->_impl_.simple_mpc_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::SimpleMPCPlusDebug>(arena, *from._impl_.simple_mpc_debug_);
      } else {
        _this->_impl_.simple_mpc_debug_->MergeFrom(*from._impl_.simple_mpc_debug_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.simple_anti_slope_debug_ != nullptr);
      if (_this->_impl_.simple_anti_slope_debug_ == nullptr) {
        _this->_impl_.simple_anti_slope_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::SimpleAntiSlopeDebug>(arena, *from._impl_.simple_anti_slope_debug_);
      } else {
        _this->_impl_.simple_anti_slope_debug_->MergeFrom(*from._impl_.simple_anti_slope_debug_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.cleaning_safety_check_debug_ != nullptr);
      if (_this->_impl_.cleaning_safety_check_debug_ == nullptr) {
        _this->_impl_.cleaning_safety_check_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::CleaningSafetyCheckDebug>(arena, *from._impl_.cleaning_safety_check_debug_);
      } else {
        _this->_impl_.cleaning_safety_check_debug_->MergeFrom(*from._impl_.cleaning_safety_check_debug_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlDebugInfo::CopyFrom(const ControlDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.ControlDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ControlDebugInfo::InternalSwap(ControlDebugInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.cleaning_safety_check_debug_)
      + sizeof(ControlDebugInfo::_impl_.cleaning_safety_check_debug_)
      - PROTOBUF_FIELD_OFFSET(ControlDebugInfo, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata ControlDebugInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimpleLongitudinalPlusDebug::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimpleLongitudinalPlusDebug>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_._has_bits_);
};

void SimpleLongitudinalPlusDebug::clear_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_matched_point_ != nullptr) _impl_.current_matched_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SimpleLongitudinalPlusDebug::clear_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_reference_point_ != nullptr) _impl_.current_reference_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SimpleLongitudinalPlusDebug::clear_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.preview_reference_point_ != nullptr) _impl_.preview_reference_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SimpleLongitudinalPlusDebug::SimpleLongitudinalPlusDebug(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleLongitudinalPlusDebug)
}
inline PROTOBUF_NDEBUG_INLINE SimpleLongitudinalPlusDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::SimpleLongitudinalPlusDebug& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        control_task_name_(arena, from.control_task_name_) {}

SimpleLongitudinalPlusDebug::SimpleLongitudinalPlusDebug(
    ::google::protobuf::Arena* arena,
    const SimpleLongitudinalPlusDebug& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SimpleLongitudinalPlusDebug* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_matched_point_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.current_matched_point_)
                        : nullptr;
  _impl_.current_reference_point_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.current_reference_point_)
                        : nullptr;
  _impl_.preview_reference_point_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.preview_reference_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, station_reference_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, station_reference_),
           offsetof(Impl_, hillup_fullstop_brake_rate_) -
               offsetof(Impl_, station_reference_) +
               sizeof(Impl_::hillup_fullstop_brake_rate_));

  // @@protoc_insertion_point(copy_constructor:control.SimpleLongitudinalPlusDebug)
}
inline PROTOBUF_NDEBUG_INLINE SimpleLongitudinalPlusDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        control_task_name_(arena) {}

inline void SimpleLongitudinalPlusDebug::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_matched_point_),
           0,
           offsetof(Impl_, hillup_fullstop_brake_rate_) -
               offsetof(Impl_, current_matched_point_) +
               sizeof(Impl_::hillup_fullstop_brake_rate_));
}
SimpleLongitudinalPlusDebug::~SimpleLongitudinalPlusDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleLongitudinalPlusDebug)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SimpleLongitudinalPlusDebug::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.control_task_name_.Destroy();
  delete _impl_.current_matched_point_;
  delete _impl_.current_reference_point_;
  delete _impl_.preview_reference_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SimpleLongitudinalPlusDebug::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SimpleLongitudinalPlusDebug::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SimpleLongitudinalPlusDebug>(),
            ::google::protobuf::Message::GetNewImpl<SimpleLongitudinalPlusDebug>(),
            ::google::protobuf::Message::GetClearImpl<SimpleLongitudinalPlusDebug>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<SimpleLongitudinalPlusDebug>(),
                ::google::protobuf::Message::GetSerializeImpl<SimpleLongitudinalPlusDebug>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_._cached_size_),
            false,
        },
        &SimpleLongitudinalPlusDebug::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SimpleLongitudinalPlusDebug::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 48, 3, 109, 7> SimpleLongitudinalPlusDebug::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_._has_bits_),
    0, // no _extensions_
    48, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    48,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SimpleLongitudinalPlusDebug_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::SimpleLongitudinalPlusDebug>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double station_reference = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 4, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.station_reference_)}},
    // optional double station_error = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 5, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.station_error_)}},
    // optional double station_error_limited = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 6, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.station_error_limited_)}},
    // optional double preview_station_error = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 7, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_station_error_)}},
    // optional double speed_reference = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 8, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_reference_)}},
    // optional double speed_error = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 9, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_error_)}},
    // optional double speed_controller_input_limited = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 10, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_controller_input_limited_)}},
    // optional double preview_speed_reference = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 11, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_speed_reference_)}},
    // optional double preview_speed_error = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 12, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_speed_error_)}},
    // optional double preview_acceleration_reference = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 13, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_acceleration_reference_)}},
    // optional double acceleration_cmd_closeloop = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 14, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_cmd_closeloop_)}},
    // optional double acceleration_cmd = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 15, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_cmd_)}},
    // optional double acceleration_lookup = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 16, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_lookup_)}},
    // optional double speed_lookup = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 17, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_lookup_)}},
    // optional double calibration_value = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 18, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.calibration_value_)}},
    // optional double throttle_cmd = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 19, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.throttle_cmd_)}},
    // optional double brake_cmd = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 20, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.brake_cmd_)}},
    // optional .control.common.TrajectoryPoint preview_reference_point = 34;
    {::_pbi::TcParser::FastMtS2,
     {658, 3, 2, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_reference_point_)}},
    // optional double slope_offset_compensation = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 21, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.slope_offset_compensation_)}},
    // optional double current_station = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 22, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_station_)}},
    // optional double path_remain = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 23, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.path_remain_)}},
    // optional int32 pid_saturation_status = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 24, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.pid_saturation_status_)}},
    // optional int32 leadlag_saturation_status = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 25, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.leadlag_saturation_status_)}},
    // optional double speed_offset = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 26, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_offset_)}},
    // optional double current_speed = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 27, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_speed_)}},
    // optional double acceleration_reference = 26;
    {::_pbi::TcParser::FastF64S2,
     {465, 28, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_reference_)}},
    // optional double current_acceleration = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 29, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_acceleration_)}},
    // optional double acceleration_error = 28;
    {::_pbi::TcParser::FastF64S2,
     {481, 30, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_error_)}},
    // optional double jerk_reference = 29;
    {::_pbi::TcParser::FastF64S2,
     {489, 31, 0, PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.jerk_reference_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 1,
    0, 32,
    65535, 65535
  }}, {{
    // optional double station_reference = 1;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.station_reference_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double station_error = 2;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.station_error_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double station_error_limited = 3;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.station_error_limited_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_station_error = 4;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_station_error_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_reference = 5;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_reference_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_error = 6;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_error_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_controller_input_limited = 7;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_controller_input_limited_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_speed_reference = 8;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_speed_reference_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_speed_error = 9;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_speed_error_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_acceleration_reference = 10;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_acceleration_reference_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_cmd_closeloop = 11;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_cmd_closeloop_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_cmd = 12;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_cmd_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_lookup = 13;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_lookup_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_lookup = 14;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_lookup_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double calibration_value = 15;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.calibration_value_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double throttle_cmd = 16;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.throttle_cmd_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double brake_cmd = 17;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.brake_cmd_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool is_full_stop = 18;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.is_full_stop_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double slope_offset_compensation = 19;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.slope_offset_compensation_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double current_station = 20;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_station_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double path_remain = 21;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.path_remain_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 pid_saturation_status = 22;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.pid_saturation_status_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 leadlag_saturation_status = 23;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.leadlag_saturation_status_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double speed_offset = 24;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.speed_offset_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double current_speed = 25;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_speed_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_reference = 26;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_reference_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double current_acceleration = 27;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_acceleration_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_error = 28;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_error_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double jerk_reference = 29;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.jerk_reference_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double current_jerk = 30;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_jerk_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double jerk_error = 31;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.jerk_error_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.common.TrajectoryPoint current_matched_point = 32;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_matched_point_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.TrajectoryPoint current_reference_point = 33;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_reference_point_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.TrajectoryPoint preview_reference_point = 34;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.preview_reference_point_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double acceleration_lookup_limit = 35;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.acceleration_lookup_limit_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double vehicle_pitch = 36;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.vehicle_pitch_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool is_epb_brake = 37;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.is_epb_brake_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double current_steer_interval = 38;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_steer_interval_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool is_wait_steer = 39;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.is_wait_steer_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_stop_reason_by_destination = 40;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.is_stop_reason_by_destination_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_stop_reason_by_prdestrian = 41;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.is_stop_reason_by_prdestrian_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_full_stop_soft = 42;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.is_full_stop_soft_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string control_task_name = 43;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.control_task_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional double path_remain_add = 44;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.path_remain_add_), _Internal::kHasBitsOffset + 45, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double max_path_remain_when_stopped = 45;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.max_path_remain_when_stopped_), _Internal::kHasBitsOffset + 46, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool form_go_to_full_stop = 46;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.form_go_to_full_stop_), _Internal::kHasBitsOffset + 43, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool begin_end_brake = 47;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.begin_end_brake_), _Internal::kHasBitsOffset + 44, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double hillup_fullstop_brake_rate = 48;
    {PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.hillup_fullstop_brake_rate_), _Internal::kHasBitsOffset + 47, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
  }}, {{
    "\43\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\21\0\0\0\0\0\0\0\0\0\0\0\0"
    "control.SimpleLongitudinalPlusDebug"
    "control_task_name"
  }},
};

PROTOBUF_NOINLINE void SimpleLongitudinalPlusDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleLongitudinalPlusDebug)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_matched_point_ != nullptr);
      _impl_.current_matched_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.current_reference_point_ != nullptr);
      _impl_.current_reference_point_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.preview_reference_point_ != nullptr);
      _impl_.preview_reference_point_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.station_reference_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.preview_station_error_) -
        reinterpret_cast<char*>(&_impl_.station_reference_)) + sizeof(_impl_.preview_station_error_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.speed_reference_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.acceleration_cmd_) -
        reinterpret_cast<char*>(&_impl_.speed_reference_)) + sizeof(_impl_.acceleration_cmd_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.acceleration_lookup_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.path_remain_) -
        reinterpret_cast<char*>(&_impl_.acceleration_lookup_)) + sizeof(_impl_.path_remain_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.pid_saturation_status_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.jerk_reference_) -
        reinterpret_cast<char*>(&_impl_.pid_saturation_status_)) + sizeof(_impl_.jerk_reference_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.current_jerk_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_wait_steer_) -
        reinterpret_cast<char*>(&_impl_.current_jerk_)) + sizeof(_impl_.is_wait_steer_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.is_stop_reason_by_destination_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.hillup_fullstop_brake_rate_) -
        reinterpret_cast<char*>(&_impl_.is_stop_reason_by_destination_)) + sizeof(_impl_.hillup_fullstop_brake_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SimpleLongitudinalPlusDebug::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleLongitudinalPlusDebug)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double station_reference = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_station_reference(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_station_error(), target);
  }

  // optional double station_error_limited = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_station_error_limited(), target);
  }

  // optional double preview_station_error = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_preview_station_error(), target);
  }

  // optional double speed_reference = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_speed_error(), target);
  }

  // optional double speed_controller_input_limited = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_speed_controller_input_limited(), target);
  }

  // optional double preview_speed_reference = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this->_internal_calibration_value(), target);
  }

  // optional double throttle_cmd = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_throttle_cmd(), target);
  }

  // optional double brake_cmd = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this->_internal_brake_cmd(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_full_stop = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_is_full_stop(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double slope_offset_compensation = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        19, this->_internal_slope_offset_compensation(), target);
  }

  // optional double current_station = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this->_internal_current_station(), target);
  }

  // optional double path_remain = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        21, this->_internal_path_remain(), target);
  }

  // optional int32 pid_saturation_status = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        22, this->_internal_pid_saturation_status(), target);
  }

  // optional int32 leadlag_saturation_status = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        23, this->_internal_leadlag_saturation_status(), target);
  }

  // optional double speed_offset = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        24, this->_internal_speed_offset(), target);
  }

  // optional double current_speed = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        25, this->_internal_current_speed(), target);
  }

  // optional double acceleration_reference = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        26, this->_internal_acceleration_reference(), target);
  }

  // optional double current_acceleration = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_current_acceleration(), target);
  }

  // optional double acceleration_error = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        28, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        29, this->_internal_jerk_reference(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double current_jerk = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        30, this->_internal_current_jerk(), target);
  }

  // optional double jerk_error = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        31, this->_internal_jerk_error(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.TrajectoryPoint current_matched_point = 32;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        32, *_impl_.current_matched_point_, _impl_.current_matched_point_->GetCachedSize(), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_reference_point = 33;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        33, *_impl_.current_reference_point_, _impl_.current_reference_point_->GetCachedSize(), target, stream);
  }

  // optional .control.common.TrajectoryPoint preview_reference_point = 34;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        34, *_impl_.preview_reference_point_, _impl_.preview_reference_point_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double acceleration_lookup_limit = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        35, this->_internal_acceleration_lookup_limit(), target);
  }

  // optional double vehicle_pitch = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        36, this->_internal_vehicle_pitch(), target);
  }

  // optional bool is_epb_brake = 37;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        37, this->_internal_is_epb_brake(), target);
  }

  // optional double current_steer_interval = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        38, this->_internal_current_steer_interval(), target);
  }

  // optional bool is_wait_steer = 39;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        39, this->_internal_is_wait_steer(), target);
  }

  // optional bool is_stop_reason_by_destination = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        40, this->_internal_is_stop_reason_by_destination(), target);
  }

  // optional bool is_stop_reason_by_prdestrian = 41;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        41, this->_internal_is_stop_reason_by_prdestrian(), target);
  }

  // optional bool is_full_stop_soft = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        42, this->_internal_is_full_stop_soft(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string control_task_name = 43;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_control_task_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.SimpleLongitudinalPlusDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(43, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double path_remain_add = 44;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        44, this->_internal_path_remain_add(), target);
  }

  // optional double max_path_remain_when_stopped = 45;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        45, this->_internal_max_path_remain_when_stopped(), target);
  }

  // optional bool form_go_to_full_stop = 46;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        46, this->_internal_form_go_to_full_stop(), target);
  }

  // optional bool begin_end_brake = 47;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        47, this->_internal_begin_end_brake(), target);
  }

  // optional double hillup_fullstop_brake_rate = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        48, this->_internal_hillup_fullstop_brake_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleLongitudinalPlusDebug)
  return target;
}

::size_t SimpleLongitudinalPlusDebug::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.SimpleLongitudinalPlusDebug)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string control_task_name = 43;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_control_task_name());
    }
    // optional .control.common.TrajectoryPoint current_matched_point = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_matched_point_);
    }
    // optional .control.common.TrajectoryPoint current_reference_point = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_reference_point_);
    }
    // optional .control.common.TrajectoryPoint preview_reference_point = 34;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.preview_reference_point_);
    }
    // optional double station_reference = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional double station_error = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional double station_error_limited = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }
    // optional double preview_station_error = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double speed_reference = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }
    // optional double speed_error = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }
    // optional double speed_controller_input_limited = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }
    // optional double preview_speed_reference = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 9;
    }
    // optional double preview_speed_error = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional double preview_acceleration_reference = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
    // optional double acceleration_cmd_closeloop = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional double acceleration_cmd = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double acceleration_lookup = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 9;
    }
    // optional double speed_lookup = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 9;
    }
    // optional double calibration_value = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 9;
    }
    // optional double throttle_cmd = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 10;
    }
    // optional double brake_cmd = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional double slope_offset_compensation = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 10;
    }
    // optional double current_station = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 10;
    }
    // optional double path_remain = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 pid_saturation_status = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_pid_saturation_status());
    }
    // optional int32 leadlag_saturation_status = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_leadlag_saturation_status());
    }
    // optional double speed_offset = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 10;
    }
    // optional double current_speed = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 10;
    }
    // optional double acceleration_reference = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 10;
    }
    // optional double current_acceleration = 27;
    if (cached_has_bits & 0x20000000u) {
      total_size += 10;
    }
    // optional double acceleration_error = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 10;
    }
    // optional double jerk_reference = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 10;
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double current_jerk = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 10;
    }
    // optional double jerk_error = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 10;
    }
    // optional double acceleration_lookup_limit = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 10;
    }
    // optional double vehicle_pitch = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 10;
    }
    // optional double current_steer_interval = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 10;
    }
    // optional bool is_full_stop = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3;
    }
    // optional bool is_epb_brake = 37;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3;
    }
    // optional bool is_wait_steer = 39;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_stop_reason_by_destination = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3;
    }
    // optional bool is_stop_reason_by_prdestrian = 41;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3;
    }
    // optional bool is_full_stop_soft = 42;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3;
    }
    // optional bool form_go_to_full_stop = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3;
    }
    // optional bool begin_end_brake = 47;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3;
    }
    // optional double path_remain_add = 44;
    if (cached_has_bits & 0x00002000u) {
      total_size += 10;
    }
    // optional double max_path_remain_when_stopped = 45;
    if (cached_has_bits & 0x00004000u) {
      total_size += 10;
    }
    // optional double hillup_fullstop_brake_rate = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 10;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void SimpleLongitudinalPlusDebug::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimpleLongitudinalPlusDebug*>(&to_msg);
  auto& from = static_cast<const SimpleLongitudinalPlusDebug&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleLongitudinalPlusDebug)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.current_matched_point_ != nullptr);
      if (_this->_impl_.current_matched_point_ == nullptr) {
        _this->_impl_.current_matched_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.current_matched_point_);
      } else {
        _this->_impl_.current_matched_point_->MergeFrom(*from._impl_.current_matched_point_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.current_reference_point_ != nullptr);
      if (_this->_impl_.current_reference_point_ == nullptr) {
        _this->_impl_.current_reference_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.current_reference_point_);
      } else {
        _this->_impl_.current_reference_point_->MergeFrom(*from._impl_.current_reference_point_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.preview_reference_point_ != nullptr);
      if (_this->_impl_.preview_reference_point_ == nullptr) {
        _this->_impl_.preview_reference_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.preview_reference_point_);
      } else {
        _this->_impl_.preview_reference_point_->MergeFrom(*from._impl_.preview_reference_point_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.station_reference_ = from._impl_.station_reference_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.station_error_ = from._impl_.station_error_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.station_error_limited_ = from._impl_.station_error_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.preview_station_error_ = from._impl_.preview_station_error_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.speed_reference_ = from._impl_.speed_reference_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.speed_error_ = from._impl_.speed_error_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.speed_controller_input_limited_ = from._impl_.speed_controller_input_limited_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.preview_speed_reference_ = from._impl_.preview_speed_reference_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.preview_speed_error_ = from._impl_.preview_speed_error_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.preview_acceleration_reference_ = from._impl_.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.acceleration_cmd_closeloop_ = from._impl_.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.acceleration_cmd_ = from._impl_.acceleration_cmd_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.acceleration_lookup_ = from._impl_.acceleration_lookup_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.speed_lookup_ = from._impl_.speed_lookup_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.calibration_value_ = from._impl_.calibration_value_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.throttle_cmd_ = from._impl_.throttle_cmd_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.brake_cmd_ = from._impl_.brake_cmd_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.slope_offset_compensation_ = from._impl_.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.current_station_ = from._impl_.current_station_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.path_remain_ = from._impl_.path_remain_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.pid_saturation_status_ = from._impl_.pid_saturation_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.leadlag_saturation_status_ = from._impl_.leadlag_saturation_status_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.speed_offset_ = from._impl_.speed_offset_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.current_speed_ = from._impl_.current_speed_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.acceleration_reference_ = from._impl_.acceleration_reference_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.current_acceleration_ = from._impl_.current_acceleration_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.acceleration_error_ = from._impl_.acceleration_error_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.jerk_reference_ = from._impl_.jerk_reference_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.current_jerk_ = from._impl_.current_jerk_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.jerk_error_ = from._impl_.jerk_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.acceleration_lookup_limit_ = from._impl_.acceleration_lookup_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vehicle_pitch_ = from._impl_.vehicle_pitch_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.current_steer_interval_ = from._impl_.current_steer_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_full_stop_ = from._impl_.is_full_stop_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_epb_brake_ = from._impl_.is_epb_brake_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_wait_steer_ = from._impl_.is_wait_steer_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_stop_reason_by_destination_ = from._impl_.is_stop_reason_by_destination_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_stop_reason_by_prdestrian_ = from._impl_.is_stop_reason_by_prdestrian_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_full_stop_soft_ = from._impl_.is_full_stop_soft_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.form_go_to_full_stop_ = from._impl_.form_go_to_full_stop_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.begin_end_brake_ = from._impl_.begin_end_brake_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.path_remain_add_ = from._impl_.path_remain_add_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.max_path_remain_when_stopped_ = from._impl_.max_path_remain_when_stopped_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.hillup_fullstop_brake_rate_ = from._impl_.hillup_fullstop_brake_rate_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleLongitudinalPlusDebug::CopyFrom(const SimpleLongitudinalPlusDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleLongitudinalPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimpleLongitudinalPlusDebug::InternalSwap(SimpleLongitudinalPlusDebug* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.control_task_name_, &other->_impl_.control_task_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.hillup_fullstop_brake_rate_)
      + sizeof(SimpleLongitudinalPlusDebug::_impl_.hillup_fullstop_brake_rate_)
      - PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, _impl_.current_matched_point_)>(
          reinterpret_cast<char*>(&_impl_.current_matched_point_),
          reinterpret_cast<char*>(&other->_impl_.current_matched_point_));
}

::google::protobuf::Metadata SimpleLongitudinalPlusDebug::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimpleLateralPlusDebug::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimpleLateralPlusDebug>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_._has_bits_);
};

void SimpleLateralPlusDebug::clear_current_target_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_target_point_ != nullptr) _impl_.current_target_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SimpleLateralPlusDebug::clear_steer_mrac_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steer_mrac_debug_ != nullptr) _impl_.steer_mrac_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SimpleLateralPlusDebug::SimpleLateralPlusDebug(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleLateralPlusDebug)
}
inline PROTOBUF_NDEBUG_INLINE SimpleLateralPlusDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::SimpleLateralPlusDebug& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        control_task_name_(arena, from.control_task_name_) {}

SimpleLateralPlusDebug::SimpleLateralPlusDebug(
    ::google::protobuf::Arena* arena,
    const SimpleLateralPlusDebug& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SimpleLateralPlusDebug* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_target_point_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.current_target_point_)
                        : nullptr;
  _impl_.steer_mrac_debug_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::MracDebug>(
                              arena, *from._impl_.steer_mrac_debug_)
                        : nullptr;
  _impl_.lat_control_check_debug_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::ControlCheckDebug>(
                              arena, *from._impl_.lat_control_check_debug_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lateral_error_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lateral_error_),
           offsetof(Impl_, steer_mrac_enable_status_) -
               offsetof(Impl_, lateral_error_) +
               sizeof(Impl_::steer_mrac_enable_status_));

  // @@protoc_insertion_point(copy_constructor:control.SimpleLateralPlusDebug)
}
inline PROTOBUF_NDEBUG_INLINE SimpleLateralPlusDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        control_task_name_(arena) {}

inline void SimpleLateralPlusDebug::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_target_point_),
           0,
           offsetof(Impl_, steer_mrac_enable_status_) -
               offsetof(Impl_, current_target_point_) +
               sizeof(Impl_::steer_mrac_enable_status_));
}
SimpleLateralPlusDebug::~SimpleLateralPlusDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleLateralPlusDebug)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SimpleLateralPlusDebug::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.control_task_name_.Destroy();
  delete _impl_.current_target_point_;
  delete _impl_.steer_mrac_debug_;
  delete _impl_.lat_control_check_debug_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SimpleLateralPlusDebug::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SimpleLateralPlusDebug::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SimpleLateralPlusDebug>(),
            ::google::protobuf::Message::GetNewImpl<SimpleLateralPlusDebug>(),
            ::google::protobuf::Message::GetClearImpl<SimpleLateralPlusDebug>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<SimpleLateralPlusDebug>(),
                ::google::protobuf::Message::GetSerializeImpl<SimpleLateralPlusDebug>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_._cached_size_),
            false,
        },
        &SimpleLateralPlusDebug::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SimpleLateralPlusDebug::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 38, 3, 88, 7> SimpleLateralPlusDebug::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_._has_bits_),
    0, // no _extensions_
    38, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    38,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SimpleLateralPlusDebug_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::SimpleLateralPlusDebug>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double lateral_error = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 4, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_error_)}},
    // optional double ref_heading = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 5, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_)}},
    // optional double heading = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 6, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_)}},
    // optional double heading_error = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 7, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_)}},
    // optional double heading_error_rate = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 8, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_rate_)}},
    // optional double lateral_error_rate = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 9, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_error_rate_)}},
    // optional double curvature = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 10, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.curvature_)}},
    // optional double steer_angle = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 11, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_)}},
    // optional double steer_angle_feedforward = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 12, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_feedforward_)}},
    // optional double steer_angle_lateral_contribution = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 13, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_lateral_contribution_)}},
    // optional double steer_angle_lateral_rate_contribution = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 14, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_lateral_rate_contribution_)}},
    // optional double steer_angle_heading_contribution = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 15, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_heading_contribution_)}},
    // optional double steer_angle_heading_rate_contribution = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 16, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_heading_rate_contribution_)}},
    // optional double steer_angle_feedback = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 17, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_feedback_)}},
    // optional double steering_position = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 18, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steering_position_)}},
    // optional double ref_speed = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 19, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_speed_)}},
    // optional double steer_angle_limited = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 20, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_limited_)}},
    // optional double lateral_acceleration = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 21, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_acceleration_)}},
    // optional double lateral_jerk = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 22, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_jerk_)}},
    // optional double ref_heading_rate = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 23, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_rate_)}},
    // optional double heading_rate = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 24, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_rate_)}},
    // optional double ref_heading_acceleration = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 25, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_acceleration_)}},
    // optional double heading_acceleration = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 26, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_acceleration_)}},
    // optional double heading_error_acceleration = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 27, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_acceleration_)}},
    // optional double ref_heading_jerk = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 28, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_jerk_)}},
    // optional double heading_jerk = 26;
    {::_pbi::TcParser::FastF64S2,
     {465, 29, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_jerk_)}},
    // optional double heading_error_jerk = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 30, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_jerk_)}},
    // optional double lateral_error_feedback = 28;
    {::_pbi::TcParser::FastF64S2,
     {481, 31, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_error_feedback_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.TrajectoryPoint current_target_point = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 1, 0, PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.current_target_point_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 1,
    65472, 32,
    65535, 65535
  }}, {{
    // optional double lateral_error = 1;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_error_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading = 2;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading = 3;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error = 4;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_rate = 5;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_rate_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_error_rate = 6;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_error_rate_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double curvature = 7;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.curvature_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle = 8;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_feedforward = 9;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_feedforward_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_lateral_contribution = 10;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_lateral_contribution_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_lateral_rate_contribution = 11;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_lateral_rate_contribution_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_heading_contribution = 12;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_heading_contribution_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_heading_rate_contribution = 13;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_heading_rate_contribution_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_feedback = 14;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_feedback_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steering_position = 15;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steering_position_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_speed = 16;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_speed_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_limited = 17;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_limited_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_acceleration = 18;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_acceleration_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_jerk = 19;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_jerk_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading_rate = 20;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_rate_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_rate = 21;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_rate_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading_acceleration = 22;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_acceleration_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_acceleration = 23;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_acceleration_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_acceleration = 24;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_acceleration_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading_jerk = 25;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ref_heading_jerk_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_jerk = 26;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_jerk_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_jerk = 27;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_jerk_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_error_feedback = 28;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_error_feedback_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_feedback = 29;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.heading_error_feedback_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.common.TrajectoryPoint current_target_point = 30;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.current_target_point_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double steer_angle_feedback_augment = 31;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_angle_feedback_augment_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.MracDebug steer_mrac_debug = 32;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_mrac_debug_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool steer_mrac_enable_status = 33;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_mrac_enable_status_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double lateral_centripetal_acceleration = 34;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lateral_centripetal_acceleration_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string control_task_name = 35;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.control_task_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .control.ControlCheckDebug lat_control_check_debug = 36;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.lat_control_check_debug_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double efai_rate = 37;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.efai_rate_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ed_rate = 38;
    {PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.ed_rate_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
    {::_pbi::TcParser::GetTable<::control::MracDebug>()},
    {::_pbi::TcParser::GetTable<::control::ControlCheckDebug>()},
  }}, {{
    "\36\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\21\0\0\0\0"
    "control.SimpleLateralPlusDebug"
    "control_task_name"
  }},
};

PROTOBUF_NOINLINE void SimpleLateralPlusDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleLateralPlusDebug)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_target_point_ != nullptr);
      _impl_.current_target_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.steer_mrac_debug_ != nullptr);
      _impl_.steer_mrac_debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.lat_control_check_debug_ != nullptr);
      _impl_.lat_control_check_debug_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.lateral_error_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.heading_error_) -
        reinterpret_cast<char*>(&_impl_.lateral_error_)) + sizeof(_impl_.heading_error_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.heading_error_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.steer_angle_heading_contribution_) -
        reinterpret_cast<char*>(&_impl_.heading_error_rate_)) + sizeof(_impl_.steer_angle_heading_contribution_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.steer_angle_heading_rate_contribution_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ref_heading_rate_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_heading_rate_contribution_)) + sizeof(_impl_.ref_heading_rate_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.heading_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.lateral_error_feedback_) -
        reinterpret_cast<char*>(&_impl_.heading_rate_)) + sizeof(_impl_.lateral_error_feedback_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.heading_error_feedback_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.steer_mrac_enable_status_) -
        reinterpret_cast<char*>(&_impl_.heading_error_feedback_)) + sizeof(_impl_.steer_mrac_enable_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SimpleLateralPlusDebug::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleLateralPlusDebug)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this->_internal_steer_angle_limited(), target);
  }

  // optional double lateral_acceleration = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        18, this->_internal_lateral_acceleration(), target);
  }

  // optional double lateral_jerk = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        19, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        21, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        22, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        23, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        24, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 25;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        25, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 26;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        26, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 27;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_heading_error_jerk(), target);
  }

  // optional double lateral_error_feedback = 28;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        28, this->_internal_lateral_error_feedback(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double heading_error_feedback = 29;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        29, this->_internal_heading_error_feedback(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.TrajectoryPoint current_target_point = 30;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, *_impl_.current_target_point_, _impl_.current_target_point_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double steer_angle_feedback_augment = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        31, this->_internal_steer_angle_feedback_augment(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.MracDebug steer_mrac_debug = 32;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        32, *_impl_.steer_mrac_debug_, _impl_.steer_mrac_debug_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool steer_mrac_enable_status = 33;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        33, this->_internal_steer_mrac_enable_status(), target);
  }

  // optional double lateral_centripetal_acceleration = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        34, this->_internal_lateral_centripetal_acceleration(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string control_task_name = 35;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_control_task_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.SimpleLateralPlusDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(35, _s, target);
  }

  // optional .control.ControlCheckDebug lat_control_check_debug = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        36, *_impl_.lat_control_check_debug_, _impl_.lat_control_check_debug_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double efai_rate = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        37, this->_internal_efai_rate(), target);
  }

  // optional double ed_rate = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        38, this->_internal_ed_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleLateralPlusDebug)
  return target;
}

::size_t SimpleLateralPlusDebug::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.SimpleLateralPlusDebug)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string control_task_name = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_control_task_name());
    }
    // optional .control.common.TrajectoryPoint current_target_point = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_target_point_);
    }
    // optional .control.MracDebug steer_mrac_debug = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.steer_mrac_debug_);
    }
    // optional .control.ControlCheckDebug lat_control_check_debug = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lat_control_check_debug_);
    }
    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional double heading = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }
    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }
    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }
    // optional double curvature = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }
    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 9;
    }
    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 9;
    }
    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 9;
    }
    // optional double steering_position = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 9;
    }
    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 10;
    }
    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional double lateral_acceleration = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 10;
    }
    // optional double lateral_jerk = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 10;
    }
    // optional double ref_heading_rate = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    // optional double heading_rate = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 10;
    }
    // optional double ref_heading_acceleration = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 10;
    }
    // optional double heading_acceleration = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 10;
    }
    // optional double heading_error_acceleration = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 10;
    }
    // optional double ref_heading_jerk = 25;
    if (cached_has_bits & 0x10000000u) {
      total_size += 10;
    }
    // optional double heading_jerk = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 10;
    }
    // optional double heading_error_jerk = 27;
    if (cached_has_bits & 0x40000000u) {
      total_size += 10;
    }
    // optional double lateral_error_feedback = 28;
    if (cached_has_bits & 0x80000000u) {
      total_size += 10;
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional double heading_error_feedback = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 10;
    }
    // optional double steer_angle_feedback_augment = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 10;
    }
    // optional double lateral_centripetal_acceleration = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 10;
    }
    // optional double efai_rate = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 10;
    }
    // optional double ed_rate = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 10;
    }
    // optional bool steer_mrac_enable_status = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void SimpleLateralPlusDebug::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimpleLateralPlusDebug*>(&to_msg);
  auto& from = static_cast<const SimpleLateralPlusDebug&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleLateralPlusDebug)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.current_target_point_ != nullptr);
      if (_this->_impl_.current_target_point_ == nullptr) {
        _this->_impl_.current_target_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.current_target_point_);
      } else {
        _this->_impl_.current_target_point_->MergeFrom(*from._impl_.current_target_point_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.steer_mrac_debug_ != nullptr);
      if (_this->_impl_.steer_mrac_debug_ == nullptr) {
        _this->_impl_.steer_mrac_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::MracDebug>(arena, *from._impl_.steer_mrac_debug_);
      } else {
        _this->_impl_.steer_mrac_debug_->MergeFrom(*from._impl_.steer_mrac_debug_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.lat_control_check_debug_ != nullptr);
      if (_this->_impl_.lat_control_check_debug_ == nullptr) {
        _this->_impl_.lat_control_check_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::ControlCheckDebug>(arena, *from._impl_.lat_control_check_debug_);
      } else {
        _this->_impl_.lat_control_check_debug_->MergeFrom(*from._impl_.lat_control_check_debug_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lateral_error_ = from._impl_.lateral_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ref_heading_ = from._impl_.ref_heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.heading_error_ = from._impl_.heading_error_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.heading_error_rate_ = from._impl_.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lateral_error_rate_ = from._impl_.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.curvature_ = from._impl_.curvature_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.steer_angle_ = from._impl_.steer_angle_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.steer_angle_feedforward_ = from._impl_.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.steer_angle_lateral_contribution_ = from._impl_.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.steer_angle_lateral_rate_contribution_ = from._impl_.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.steer_angle_heading_contribution_ = from._impl_.steer_angle_heading_contribution_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.steer_angle_heading_rate_contribution_ = from._impl_.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.steer_angle_feedback_ = from._impl_.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.steering_position_ = from._impl_.steering_position_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.ref_speed_ = from._impl_.ref_speed_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.steer_angle_limited_ = from._impl_.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.lateral_acceleration_ = from._impl_.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.lateral_jerk_ = from._impl_.lateral_jerk_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.ref_heading_rate_ = from._impl_.ref_heading_rate_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.heading_rate_ = from._impl_.heading_rate_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.ref_heading_acceleration_ = from._impl_.ref_heading_acceleration_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.heading_acceleration_ = from._impl_.heading_acceleration_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.heading_error_acceleration_ = from._impl_.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.ref_heading_jerk_ = from._impl_.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.heading_jerk_ = from._impl_.heading_jerk_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.heading_error_jerk_ = from._impl_.heading_error_jerk_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.lateral_error_feedback_ = from._impl_.lateral_error_feedback_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.heading_error_feedback_ = from._impl_.heading_error_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steer_angle_feedback_augment_ = from._impl_.steer_angle_feedback_augment_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lateral_centripetal_acceleration_ = from._impl_.lateral_centripetal_acceleration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.efai_rate_ = from._impl_.efai_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ed_rate_ = from._impl_.ed_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.steer_mrac_enable_status_ = from._impl_.steer_mrac_enable_status_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleLateralPlusDebug::CopyFrom(const SimpleLateralPlusDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleLateralPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimpleLateralPlusDebug::InternalSwap(SimpleLateralPlusDebug* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.control_task_name_, &other->_impl_.control_task_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.steer_mrac_enable_status_)
      + sizeof(SimpleLateralPlusDebug::_impl_.steer_mrac_enable_status_)
      - PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, _impl_.current_target_point_)>(
          reinterpret_cast<char*>(&_impl_.current_target_point_),
          reinterpret_cast<char*>(&other->_impl_.current_target_point_));
}

::google::protobuf::Metadata SimpleLateralPlusDebug::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimpleMPCPlusDebug::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimpleMPCPlusDebug>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_._has_bits_);
};

void SimpleMPCPlusDebug::clear_current_matched_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_matched_point_ != nullptr) _impl_.current_matched_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SimpleMPCPlusDebug::clear_current_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_reference_point_ != nullptr) _impl_.current_reference_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SimpleMPCPlusDebug::clear_preview_reference_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.preview_reference_point_ != nullptr) _impl_.preview_reference_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SimpleMPCPlusDebug::SimpleMPCPlusDebug(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleMPCPlusDebug)
}
inline PROTOBUF_NDEBUG_INLINE SimpleMPCPlusDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::SimpleMPCPlusDebug& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        matrix_q_updated_{visibility, arena, from.matrix_q_updated_},
        matrix_r_updated_{visibility, arena, from.matrix_r_updated_},
        control_task_name_(arena, from.control_task_name_) {}

SimpleMPCPlusDebug::SimpleMPCPlusDebug(
    ::google::protobuf::Arena* arena,
    const SimpleMPCPlusDebug& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SimpleMPCPlusDebug* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_matched_point_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.current_matched_point_)
                        : nullptr;
  _impl_.current_reference_point_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.current_reference_point_)
                        : nullptr;
  _impl_.preview_reference_point_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.preview_reference_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lateral_error_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lateral_error_),
           offsetof(Impl_, is_full_stop_) -
               offsetof(Impl_, lateral_error_) +
               sizeof(Impl_::is_full_stop_));

  // @@protoc_insertion_point(copy_constructor:control.SimpleMPCPlusDebug)
}
inline PROTOBUF_NDEBUG_INLINE SimpleMPCPlusDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        matrix_q_updated_{visibility, arena},
        matrix_r_updated_{visibility, arena},
        control_task_name_(arena) {}

inline void SimpleMPCPlusDebug::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_matched_point_),
           0,
           offsetof(Impl_, is_full_stop_) -
               offsetof(Impl_, current_matched_point_) +
               sizeof(Impl_::is_full_stop_));
}
SimpleMPCPlusDebug::~SimpleMPCPlusDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleMPCPlusDebug)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SimpleMPCPlusDebug::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.control_task_name_.Destroy();
  delete _impl_.current_matched_point_;
  delete _impl_.current_reference_point_;
  delete _impl_.preview_reference_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SimpleMPCPlusDebug::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SimpleMPCPlusDebug::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SimpleMPCPlusDebug>(),
            ::google::protobuf::Message::GetNewImpl<SimpleMPCPlusDebug>(),
            ::google::protobuf::Message::GetClearImpl<SimpleMPCPlusDebug>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<SimpleMPCPlusDebug>(),
                ::google::protobuf::Message::GetSerializeImpl<SimpleMPCPlusDebug>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_._cached_size_),
            false,
        },
        &SimpleMPCPlusDebug::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SimpleMPCPlusDebug::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 65, 3, 116, 11> SimpleMPCPlusDebug::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_._has_bits_),
    0, // no _extensions_
    65, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    65,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SimpleMPCPlusDebug_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::SimpleMPCPlusDebug>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double lateral_error = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 4, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.lateral_error_)}},
    // optional double ref_heading = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 5, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.ref_heading_)}},
    // optional double heading = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 6, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_)}},
    // optional double heading_error = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 7, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_error_)}},
    // optional double heading_error_rate = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 8, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_error_rate_)}},
    // optional double lateral_error_rate = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 9, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.lateral_error_rate_)}},
    // optional double curvature = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 10, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.curvature_)}},
    // optional double steer_angle = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 11, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_)}},
    // optional double steer_angle_feedforward = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 12, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_feedforward_)}},
    // optional double steer_angle_lateral_contribution = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 13, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_lateral_contribution_)}},
    // optional double steer_angle_lateral_rate_contribution = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 14, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_lateral_rate_contribution_)}},
    // optional double steer_angle_heading_contribution = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 15, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_heading_contribution_)}},
    // optional double steer_angle_heading_rate_contribution = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 16, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_heading_rate_contribution_)}},
    // optional double steer_angle_feedback = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 17, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_feedback_)}},
    // optional double steering_position = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 18, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steering_position_)}},
    // optional double ref_speed = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 19, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.ref_speed_)}},
    // optional double steer_angle_limited = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 20, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_limited_)}},
    // optional double station_reference = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 21, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.station_reference_)}},
    // optional double station_error = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 22, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.station_error_)}},
    // optional double speed_reference = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 23, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_reference_)}},
    // optional double speed_error = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 24, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_error_)}},
    // optional double acceleration_reference = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 25, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_reference_)}},
    // optional .control.common.TrajectoryPoint preview_reference_point = 55;
    {::_pbi::TcParser::FastMtS2,
     {954, 3, 2, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.preview_reference_point_)}},
    // optional double station_feedback = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 26, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.station_feedback_)}},
    // optional double speed_feedback = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 27, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_feedback_)}},
    // optional double acceleration_cmd_closeloop = 26;
    {::_pbi::TcParser::FastF64S2,
     {465, 28, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_cmd_closeloop_)}},
    // optional double acceleration_cmd = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 29, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_cmd_)}},
    // optional double acceleration_lookup = 28;
    {::_pbi::TcParser::FastF64S2,
     {481, 30, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_lookup_)}},
    // optional double speed_lookup = 29;
    {::_pbi::TcParser::FastF64S2,
     {489, 31, 0, PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_lookup_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 3,
    0, 32, 0, 48, 65534, 64,
    65535, 65535
  }}, {{
    // optional double lateral_error = 1;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.lateral_error_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading = 2;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.ref_heading_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading = 3;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error = 4;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_error_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_rate = 5;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_error_rate_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_error_rate = 6;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.lateral_error_rate_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double curvature = 7;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.curvature_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle = 8;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_feedforward = 9;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_feedforward_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_lateral_contribution = 10;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_lateral_contribution_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_lateral_rate_contribution = 11;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_lateral_rate_contribution_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_heading_contribution = 12;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_heading_contribution_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_heading_rate_contribution = 13;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_heading_rate_contribution_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_feedback = 14;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_feedback_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steering_position = 15;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steering_position_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_speed = 16;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.ref_speed_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_limited = 17;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_limited_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double station_reference = 18;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.station_reference_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double station_error = 19;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.station_error_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_reference = 20;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_reference_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_error = 21;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_error_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_reference = 22;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_reference_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool is_full_stop = 23;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.is_full_stop_), _Internal::kHasBitsOffset + 62, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double station_feedback = 24;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.station_feedback_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_feedback = 25;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_feedback_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_cmd_closeloop = 26;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_cmd_closeloop_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_cmd = 27;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_cmd_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_lookup = 28;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_lookup_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_lookup = 29;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.speed_lookup_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double calibration_value = 30;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.calibration_value_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_unconstrained_control_diff = 31;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_unconstrained_control_diff_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_feedforward_compensation = 32;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_feedforward_compensation_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated double matrix_q_updated = 33;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.matrix_q_updated_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // repeated double matrix_r_updated = 34;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.matrix_r_updated_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // optional double lateral_acceleration = 35;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.lateral_acceleration_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_jerk = 36;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.lateral_jerk_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading_rate = 37;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.ref_heading_rate_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_rate = 38;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_rate_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading_acceleration = 39;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.ref_heading_acceleration_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_acceleration = 40;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_acceleration_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_acceleration = 41;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_error_acceleration_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ref_heading_jerk = 42;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.ref_heading_jerk_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_jerk = 43;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_jerk_), _Internal::kHasBitsOffset + 43, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_jerk = 44;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_error_jerk_), _Internal::kHasBitsOffset + 44, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_feedback = 45;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_feedback_), _Internal::kHasBitsOffset + 45, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_error = 46;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_error_), _Internal::kHasBitsOffset + 46, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double jerk_reference = 47;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.jerk_reference_), _Internal::kHasBitsOffset + 47, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double jerk_feedback = 48;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.jerk_feedback_), _Internal::kHasBitsOffset + 48, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double jerk_error = 49;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.jerk_error_), _Internal::kHasBitsOffset + 49, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_error_feedback = 50;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.lateral_error_feedback_), _Internal::kHasBitsOffset + 50, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading_error_feedback = 51;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.heading_error_feedback_), _Internal::kHasBitsOffset + 51, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_angle_feedback_augment = 52;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.steer_angle_feedback_augment_), _Internal::kHasBitsOffset + 52, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.common.TrajectoryPoint current_matched_point = 53;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.current_matched_point_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.TrajectoryPoint current_reference_point = 54;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.current_reference_point_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.TrajectoryPoint preview_reference_point = 55;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.preview_reference_point_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double preview_station_error = 56;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.preview_station_error_), _Internal::kHasBitsOffset + 53, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_speed_reference = 57;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.preview_speed_reference_), _Internal::kHasBitsOffset + 54, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_speed_error = 58;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.preview_speed_error_), _Internal::kHasBitsOffset + 55, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_acceleration_reference = 59;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.preview_acceleration_reference_), _Internal::kHasBitsOffset + 56, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double vehicle_pitch = 60;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.vehicle_pitch_), _Internal::kHasBitsOffset + 57, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double slope_offset_compensation = 61;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.slope_offset_compensation_), _Internal::kHasBitsOffset + 58, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double path_remain = 62;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.path_remain_), _Internal::kHasBitsOffset + 59, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_lookup_offset = 63;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_lookup_offset_), _Internal::kHasBitsOffset + 60, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_vrf = 64;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.acceleration_vrf_), _Internal::kHasBitsOffset + 61, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional string control_task_name = 65;
    {PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.control_task_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
  }}, {{
    "\32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\21\0\0\0\0\0\0"
    "control.SimpleMPCPlusDebug"
    "control_task_name"
  }},
};

PROTOBUF_NOINLINE void SimpleMPCPlusDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleMPCPlusDebug)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matrix_q_updated_.Clear();
  _impl_.matrix_r_updated_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_matched_point_ != nullptr);
      _impl_.current_matched_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.current_reference_point_ != nullptr);
      _impl_.current_reference_point_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.preview_reference_point_ != nullptr);
      _impl_.preview_reference_point_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.lateral_error_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.heading_error_) -
        reinterpret_cast<char*>(&_impl_.lateral_error_)) + sizeof(_impl_.heading_error_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.heading_error_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.steer_angle_heading_contribution_) -
        reinterpret_cast<char*>(&_impl_.heading_error_rate_)) + sizeof(_impl_.steer_angle_heading_contribution_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.steer_angle_heading_rate_contribution_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.speed_reference_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_heading_rate_contribution_)) + sizeof(_impl_.speed_reference_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.speed_error_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.speed_lookup_) -
        reinterpret_cast<char*>(&_impl_.speed_error_)) + sizeof(_impl_.speed_lookup_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.calibration_value_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ref_heading_acceleration_) -
        reinterpret_cast<char*>(&_impl_.calibration_value_)) + sizeof(_impl_.ref_heading_acceleration_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.heading_acceleration_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.jerk_reference_) -
        reinterpret_cast<char*>(&_impl_.heading_acceleration_)) + sizeof(_impl_.jerk_reference_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.jerk_feedback_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.preview_speed_error_) -
        reinterpret_cast<char*>(&_impl_.jerk_feedback_)) + sizeof(_impl_.preview_speed_error_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&_impl_.preview_acceleration_reference_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_full_stop_) -
        reinterpret_cast<char*>(&_impl_.preview_acceleration_reference_)) + sizeof(_impl_.is_full_stop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SimpleMPCPlusDebug::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleMPCPlusDebug)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this->_internal_steer_angle_limited(), target);
  }

  // optional double station_reference = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        18, this->_internal_station_reference(), target);
  }

  // optional double station_error = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        19, this->_internal_station_error(), target);
  }

  // optional double speed_reference = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        21, this->_internal_speed_error(), target);
  }

  // optional double acceleration_reference = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        22, this->_internal_acceleration_reference(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_full_stop = 23;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_is_full_stop(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double station_feedback = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        24, this->_internal_station_feedback(), target);
  }

  // optional double speed_feedback = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        25, this->_internal_speed_feedback(), target);
  }

  // optional double acceleration_cmd_closeloop = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        26, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        28, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        29, this->_internal_speed_lookup(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double calibration_value = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        30, this->_internal_calibration_value(), target);
  }

  // optional double steer_unconstrained_control_diff = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        31, this->_internal_steer_unconstrained_control_diff(), target);
  }

  // optional double steer_angle_feedforward_compensation = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        32, this->_internal_steer_angle_feedforward_compensation(), target);
  }

  // repeated double matrix_q_updated = 33;
  for (int i = 0, n = this->_internal_matrix_q_updated_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        33, this->_internal_matrix_q_updated().Get(i), target);
  }

  // repeated double matrix_r_updated = 34;
  for (int i = 0, n = this->_internal_matrix_r_updated_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        34, this->_internal_matrix_r_updated().Get(i), target);
  }

  // optional double lateral_acceleration = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        35, this->_internal_lateral_acceleration(), target);
  }

  // optional double lateral_jerk = 36;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        36, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        37, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 38;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        38, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 39;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        39, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        40, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 41;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        41, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        42, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 43;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        43, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 44;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        44, this->_internal_heading_error_jerk(), target);
  }

  // optional double acceleration_feedback = 45;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        45, this->_internal_acceleration_feedback(), target);
  }

  // optional double acceleration_error = 46;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        46, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 47;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        47, this->_internal_jerk_reference(), target);
  }

  // optional double jerk_feedback = 48;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        48, this->_internal_jerk_feedback(), target);
  }

  // optional double jerk_error = 49;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        49, this->_internal_jerk_error(), target);
  }

  // optional double lateral_error_feedback = 50;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        50, this->_internal_lateral_error_feedback(), target);
  }

  // optional double heading_error_feedback = 51;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        51, this->_internal_heading_error_feedback(), target);
  }

  // optional double steer_angle_feedback_augment = 52;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        52, this->_internal_steer_angle_feedback_augment(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.TrajectoryPoint current_matched_point = 53;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        53, *_impl_.current_matched_point_, _impl_.current_matched_point_->GetCachedSize(), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_reference_point = 54;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        54, *_impl_.current_reference_point_, _impl_.current_reference_point_->GetCachedSize(), target, stream);
  }

  // optional .control.common.TrajectoryPoint preview_reference_point = 55;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        55, *_impl_.preview_reference_point_, _impl_.preview_reference_point_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double preview_station_error = 56;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        56, this->_internal_preview_station_error(), target);
  }

  // optional double preview_speed_reference = 57;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        57, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 58;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        58, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 59;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        59, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double vehicle_pitch = 60;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        60, this->_internal_vehicle_pitch(), target);
  }

  // optional double slope_offset_compensation = 61;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        61, this->_internal_slope_offset_compensation(), target);
  }

  // optional double path_remain = 62;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        62, this->_internal_path_remain(), target);
  }

  // optional double acceleration_lookup_offset = 63;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        63, this->_internal_acceleration_lookup_offset(), target);
  }

  // optional double acceleration_vrf = 64;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        64, this->_internal_acceleration_vrf(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string control_task_name = 65;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_control_task_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.SimpleMPCPlusDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(65, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleMPCPlusDebug)
  return target;
}

::size_t SimpleMPCPlusDebug::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.SimpleMPCPlusDebug)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated double matrix_q_updated = 33;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_matrix_q_updated_size())
      ;
      std::size_t tag_size = std::size_t{2} *
          ::_pbi::FromIntSize(this->_internal_matrix_q_updated_size());
      ;
      total_size += tag_size + data_size;
    }
    // repeated double matrix_r_updated = 34;
     {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this->_internal_matrix_r_updated_size())
      ;
      std::size_t tag_size = std::size_t{2} *
          ::_pbi::FromIntSize(this->_internal_matrix_r_updated_size());
      ;
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string control_task_name = 65;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_control_task_name());
    }
    // optional .control.common.TrajectoryPoint current_matched_point = 53;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_matched_point_);
    }
    // optional .control.common.TrajectoryPoint current_reference_point = 54;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_reference_point_);
    }
    // optional .control.common.TrajectoryPoint preview_reference_point = 55;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.preview_reference_point_);
    }
    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional double heading = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }
    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }
    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }
    // optional double curvature = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }
    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 9;
    }
    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 9;
    }
    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 9;
    }
    // optional double steering_position = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 9;
    }
    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 10;
    }
    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional double station_reference = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 10;
    }
    // optional double station_error = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 10;
    }
    // optional double speed_reference = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    // optional double speed_error = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 10;
    }
    // optional double acceleration_reference = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 10;
    }
    // optional double station_feedback = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 10;
    }
    // optional double speed_feedback = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 10;
    }
    // optional double acceleration_cmd_closeloop = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 10;
    }
    // optional double acceleration_cmd = 27;
    if (cached_has_bits & 0x20000000u) {
      total_size += 10;
    }
    // optional double acceleration_lookup = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 10;
    }
    // optional double speed_lookup = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 10;
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double calibration_value = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 10;
    }
    // optional double steer_unconstrained_control_diff = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 10;
    }
    // optional double steer_angle_feedforward_compensation = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 10;
    }
    // optional double lateral_acceleration = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 10;
    }
    // optional double lateral_jerk = 36;
    if (cached_has_bits & 0x00000010u) {
      total_size += 10;
    }
    // optional double ref_heading_rate = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 10;
    }
    // optional double heading_rate = 38;
    if (cached_has_bits & 0x00000040u) {
      total_size += 10;
    }
    // optional double ref_heading_acceleration = 39;
    if (cached_has_bits & 0x00000080u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading_acceleration = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 10;
    }
    // optional double heading_error_acceleration = 41;
    if (cached_has_bits & 0x00000200u) {
      total_size += 10;
    }
    // optional double ref_heading_jerk = 42;
    if (cached_has_bits & 0x00000400u) {
      total_size += 10;
    }
    // optional double heading_jerk = 43;
    if (cached_has_bits & 0x00000800u) {
      total_size += 10;
    }
    // optional double heading_error_jerk = 44;
    if (cached_has_bits & 0x00001000u) {
      total_size += 10;
    }
    // optional double acceleration_feedback = 45;
    if (cached_has_bits & 0x00002000u) {
      total_size += 10;
    }
    // optional double acceleration_error = 46;
    if (cached_has_bits & 0x00004000u) {
      total_size += 10;
    }
    // optional double jerk_reference = 47;
    if (cached_has_bits & 0x00008000u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double jerk_feedback = 48;
    if (cached_has_bits & 0x00010000u) {
      total_size += 10;
    }
    // optional double jerk_error = 49;
    if (cached_has_bits & 0x00020000u) {
      total_size += 10;
    }
    // optional double lateral_error_feedback = 50;
    if (cached_has_bits & 0x00040000u) {
      total_size += 10;
    }
    // optional double heading_error_feedback = 51;
    if (cached_has_bits & 0x00080000u) {
      total_size += 10;
    }
    // optional double steer_angle_feedback_augment = 52;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional double preview_station_error = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 10;
    }
    // optional double preview_speed_reference = 57;
    if (cached_has_bits & 0x00400000u) {
      total_size += 10;
    }
    // optional double preview_speed_error = 58;
    if (cached_has_bits & 0x00800000u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    // optional double preview_acceleration_reference = 59;
    if (cached_has_bits & 0x01000000u) {
      total_size += 10;
    }
    // optional double vehicle_pitch = 60;
    if (cached_has_bits & 0x02000000u) {
      total_size += 10;
    }
    // optional double slope_offset_compensation = 61;
    if (cached_has_bits & 0x04000000u) {
      total_size += 10;
    }
    // optional double path_remain = 62;
    if (cached_has_bits & 0x08000000u) {
      total_size += 10;
    }
    // optional double acceleration_lookup_offset = 63;
    if (cached_has_bits & 0x10000000u) {
      total_size += 10;
    }
    // optional double acceleration_vrf = 64;
    if (cached_has_bits & 0x20000000u) {
      total_size += 10;
    }
    // optional bool is_full_stop = 23;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void SimpleMPCPlusDebug::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimpleMPCPlusDebug*>(&to_msg);
  auto& from = static_cast<const SimpleMPCPlusDebug&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleMPCPlusDebug)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_matrix_q_updated()->MergeFrom(from._internal_matrix_q_updated());
  _this->_internal_mutable_matrix_r_updated()->MergeFrom(from._internal_matrix_r_updated());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.current_matched_point_ != nullptr);
      if (_this->_impl_.current_matched_point_ == nullptr) {
        _this->_impl_.current_matched_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.current_matched_point_);
      } else {
        _this->_impl_.current_matched_point_->MergeFrom(*from._impl_.current_matched_point_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.current_reference_point_ != nullptr);
      if (_this->_impl_.current_reference_point_ == nullptr) {
        _this->_impl_.current_reference_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.current_reference_point_);
      } else {
        _this->_impl_.current_reference_point_->MergeFrom(*from._impl_.current_reference_point_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.preview_reference_point_ != nullptr);
      if (_this->_impl_.preview_reference_point_ == nullptr) {
        _this->_impl_.preview_reference_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.preview_reference_point_);
      } else {
        _this->_impl_.preview_reference_point_->MergeFrom(*from._impl_.preview_reference_point_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lateral_error_ = from._impl_.lateral_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ref_heading_ = from._impl_.ref_heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.heading_error_ = from._impl_.heading_error_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.heading_error_rate_ = from._impl_.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lateral_error_rate_ = from._impl_.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.curvature_ = from._impl_.curvature_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.steer_angle_ = from._impl_.steer_angle_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.steer_angle_feedforward_ = from._impl_.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.steer_angle_lateral_contribution_ = from._impl_.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.steer_angle_lateral_rate_contribution_ = from._impl_.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.steer_angle_heading_contribution_ = from._impl_.steer_angle_heading_contribution_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.steer_angle_heading_rate_contribution_ = from._impl_.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.steer_angle_feedback_ = from._impl_.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.steering_position_ = from._impl_.steering_position_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.ref_speed_ = from._impl_.ref_speed_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.steer_angle_limited_ = from._impl_.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.station_reference_ = from._impl_.station_reference_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.station_error_ = from._impl_.station_error_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.speed_reference_ = from._impl_.speed_reference_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.speed_error_ = from._impl_.speed_error_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.acceleration_reference_ = from._impl_.acceleration_reference_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.station_feedback_ = from._impl_.station_feedback_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.speed_feedback_ = from._impl_.speed_feedback_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.acceleration_cmd_closeloop_ = from._impl_.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.acceleration_cmd_ = from._impl_.acceleration_cmd_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.acceleration_lookup_ = from._impl_.acceleration_lookup_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.speed_lookup_ = from._impl_.speed_lookup_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.calibration_value_ = from._impl_.calibration_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steer_unconstrained_control_diff_ = from._impl_.steer_unconstrained_control_diff_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steer_angle_feedforward_compensation_ = from._impl_.steer_angle_feedforward_compensation_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lateral_acceleration_ = from._impl_.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lateral_jerk_ = from._impl_.lateral_jerk_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ref_heading_rate_ = from._impl_.ref_heading_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.heading_rate_ = from._impl_.heading_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ref_heading_acceleration_ = from._impl_.ref_heading_acceleration_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.heading_acceleration_ = from._impl_.heading_acceleration_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.heading_error_acceleration_ = from._impl_.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ref_heading_jerk_ = from._impl_.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.heading_jerk_ = from._impl_.heading_jerk_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.heading_error_jerk_ = from._impl_.heading_error_jerk_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.acceleration_feedback_ = from._impl_.acceleration_feedback_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.acceleration_error_ = from._impl_.acceleration_error_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.jerk_reference_ = from._impl_.jerk_reference_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.jerk_feedback_ = from._impl_.jerk_feedback_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.jerk_error_ = from._impl_.jerk_error_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.lateral_error_feedback_ = from._impl_.lateral_error_feedback_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.heading_error_feedback_ = from._impl_.heading_error_feedback_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.steer_angle_feedback_augment_ = from._impl_.steer_angle_feedback_augment_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.preview_station_error_ = from._impl_.preview_station_error_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.preview_speed_reference_ = from._impl_.preview_speed_reference_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.preview_speed_error_ = from._impl_.preview_speed_error_;
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.preview_acceleration_reference_ = from._impl_.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.vehicle_pitch_ = from._impl_.vehicle_pitch_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.slope_offset_compensation_ = from._impl_.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.path_remain_ = from._impl_.path_remain_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.acceleration_lookup_offset_ = from._impl_.acceleration_lookup_offset_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.acceleration_vrf_ = from._impl_.acceleration_vrf_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.is_full_stop_ = from._impl_.is_full_stop_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleMPCPlusDebug::CopyFrom(const SimpleMPCPlusDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleMPCPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimpleMPCPlusDebug::InternalSwap(SimpleMPCPlusDebug* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.matrix_q_updated_.InternalSwap(&other->_impl_.matrix_q_updated_);
  _impl_.matrix_r_updated_.InternalSwap(&other->_impl_.matrix_r_updated_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.control_task_name_, &other->_impl_.control_task_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.is_full_stop_)
      + sizeof(SimpleMPCPlusDebug::_impl_.is_full_stop_)
      - PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, _impl_.current_matched_point_)>(
          reinterpret_cast<char*>(&_impl_.current_matched_point_),
          reinterpret_cast<char*>(&other->_impl_.current_matched_point_));
}

::google::protobuf::Metadata SimpleMPCPlusDebug::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ControlCheckDebug::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ControlCheckDebug>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_._has_bits_);
};

ControlCheckDebug::ControlCheckDebug(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.ControlCheckDebug)
}
ControlCheckDebug::ControlCheckDebug(
    ::google::protobuf::Arena* arena, const ControlCheckDebug& from)
    : ControlCheckDebug(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ControlCheckDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ControlCheckDebug::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lateral_error_check_result_),
           0,
           offsetof(Impl_, lateral_error_w_) -
               offsetof(Impl_, lateral_error_check_result_) +
               sizeof(Impl_::lateral_error_w_));
}
ControlCheckDebug::~ControlCheckDebug() {
  // @@protoc_insertion_point(destructor:control.ControlCheckDebug)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlCheckDebug::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ControlCheckDebug::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ControlCheckDebug::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ControlCheckDebug>(),
            ::google::protobuf::Message::GetNewImpl<ControlCheckDebug>(),
            ::google::protobuf::Message::GetClearImpl<ControlCheckDebug>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<ControlCheckDebug>(),
                ::google::protobuf::Message::GetSerializeImpl<ControlCheckDebug>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_._cached_size_),
            false,
        },
        &ControlCheckDebug::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ControlCheckDebug::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 4, 0, 2> ControlCheckDebug::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlCheckDebug_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::ControlCheckDebug>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.ControlCheckStatus lateral_error_check_result = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_check_result_)}},
    // optional uint32 lateral_error_check_e_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.lateral_error_check_e_count_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_check_e_count_)}},
    // optional uint32 lateral_error_check_w_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.lateral_error_check_w_count_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_check_w_count_)}},
    // optional .control.ControlCheckStatus heading_error_check_result = 4;
    {::_pbi::TcParser::FastEr0S1,
     {32, 3, 2, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.heading_error_check_result_)}},
    // optional uint32 heading_error_check_e_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.heading_error_check_e_count_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.heading_error_check_e_count_)}},
    // optional uint32 heading_error_check_w_count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.heading_error_check_w_count_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.heading_error_check_w_count_)}},
    // optional .control.ControlCheckStatus station_error_check_result = 7;
    {::_pbi::TcParser::FastEr0S1,
     {56, 6, 2, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.station_error_check_result_)}},
    // optional uint32 station_error_check_e_count = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.station_error_check_e_count_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.station_error_check_e_count_)}},
    // optional uint32 station_error_check_w_count = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.station_error_check_w_count_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.station_error_check_w_count_)}},
    // optional .control.ControlCheckStatus speed_error_check_result = 10;
    {::_pbi::TcParser::FastEr0S1,
     {80, 9, 2, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.speed_error_check_result_)}},
    // optional uint32 speed_error_check_e_count = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.speed_error_check_e_count_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.speed_error_check_e_count_)}},
    // optional uint32 speed_error_check_w_count = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlCheckDebug, _impl_.speed_error_check_w_count_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.speed_error_check_w_count_)}},
    // optional double lateral_error_e = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 12, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_e_)}},
    // optional double lateral_error_w = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 13, 0, PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_w_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .control.ControlCheckStatus lateral_error_check_result = 1;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_check_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 lateral_error_check_e_count = 2;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_check_e_count_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 lateral_error_check_w_count = 3;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_check_w_count_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .control.ControlCheckStatus heading_error_check_result = 4;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.heading_error_check_result_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 heading_error_check_e_count = 5;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.heading_error_check_e_count_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 heading_error_check_w_count = 6;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.heading_error_check_w_count_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .control.ControlCheckStatus station_error_check_result = 7;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.station_error_check_result_), _Internal::kHasBitsOffset + 6, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 station_error_check_e_count = 8;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.station_error_check_e_count_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 station_error_check_w_count = 9;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.station_error_check_w_count_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .control.ControlCheckStatus speed_error_check_result = 10;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.speed_error_check_result_), _Internal::kHasBitsOffset + 9, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 speed_error_check_e_count = 11;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.speed_error_check_e_count_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 speed_error_check_w_count = 12;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.speed_error_check_w_count_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional double lateral_error_e = 13;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_e_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lateral_error_w = 14;
    {PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_w_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ControlCheckDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.ControlCheckDebug)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.lateral_error_check_result_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.station_error_check_e_count_) -
        reinterpret_cast<char*>(&_impl_.lateral_error_check_result_)) + sizeof(_impl_.station_error_check_e_count_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.station_error_check_w_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.lateral_error_w_) -
        reinterpret_cast<char*>(&_impl_.station_error_check_w_count_)) + sizeof(_impl_.lateral_error_w_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ControlCheckDebug::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.ControlCheckDebug)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.ControlCheckStatus lateral_error_check_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_lateral_error_check_result(), target);
  }

  // optional uint32 lateral_error_check_e_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_lateral_error_check_e_count(), target);
  }

  // optional uint32 lateral_error_check_w_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_lateral_error_check_w_count(), target);
  }

  // optional .control.ControlCheckStatus heading_error_check_result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_heading_error_check_result(), target);
  }

  // optional uint32 heading_error_check_e_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_heading_error_check_e_count(), target);
  }

  // optional uint32 heading_error_check_w_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_heading_error_check_w_count(), target);
  }

  // optional .control.ControlCheckStatus station_error_check_result = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_station_error_check_result(), target);
  }

  // optional uint32 station_error_check_e_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_station_error_check_e_count(), target);
  }

  // optional uint32 station_error_check_w_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_station_error_check_w_count(), target);
  }

  // optional .control.ControlCheckStatus speed_error_check_result = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_speed_error_check_result(), target);
  }

  // optional uint32 speed_error_check_e_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_speed_error_check_e_count(), target);
  }

  // optional uint32 speed_error_check_w_count = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_speed_error_check_w_count(), target);
  }

  // optional double lateral_error_e = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_lateral_error_e(), target);
  }

  // optional double lateral_error_w = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_lateral_error_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.ControlCheckDebug)
  return target;
}

::size_t ControlCheckDebug::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.ControlCheckDebug)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.ControlCheckStatus lateral_error_check_result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_lateral_error_check_result());
    }
    // optional uint32 lateral_error_check_e_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_lateral_error_check_e_count());
    }
    // optional uint32 lateral_error_check_w_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_lateral_error_check_w_count());
    }
    // optional .control.ControlCheckStatus heading_error_check_result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_heading_error_check_result());
    }
    // optional uint32 heading_error_check_e_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_heading_error_check_e_count());
    }
    // optional uint32 heading_error_check_w_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_heading_error_check_w_count());
    }
    // optional .control.ControlCheckStatus station_error_check_result = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_station_error_check_result());
    }
    // optional uint32 station_error_check_e_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_station_error_check_e_count());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 station_error_check_w_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_station_error_check_w_count());
    }
    // optional .control.ControlCheckStatus speed_error_check_result = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_speed_error_check_result());
    }
    // optional uint32 speed_error_check_e_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_speed_error_check_e_count());
    }
    // optional uint32 speed_error_check_w_count = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_speed_error_check_w_count());
    }
    // optional double lateral_error_e = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional double lateral_error_w = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void ControlCheckDebug::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ControlCheckDebug*>(&to_msg);
  auto& from = static_cast<const ControlCheckDebug&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.ControlCheckDebug)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lateral_error_check_result_ = from._impl_.lateral_error_check_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lateral_error_check_e_count_ = from._impl_.lateral_error_check_e_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lateral_error_check_w_count_ = from._impl_.lateral_error_check_w_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.heading_error_check_result_ = from._impl_.heading_error_check_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.heading_error_check_e_count_ = from._impl_.heading_error_check_e_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.heading_error_check_w_count_ = from._impl_.heading_error_check_w_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.station_error_check_result_ = from._impl_.station_error_check_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.station_error_check_e_count_ = from._impl_.station_error_check_e_count_;
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.station_error_check_w_count_ = from._impl_.station_error_check_w_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.speed_error_check_result_ = from._impl_.speed_error_check_result_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.speed_error_check_e_count_ = from._impl_.speed_error_check_e_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.speed_error_check_w_count_ = from._impl_.speed_error_check_w_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.lateral_error_e_ = from._impl_.lateral_error_e_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.lateral_error_w_ = from._impl_.lateral_error_w_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCheckDebug::CopyFrom(const ControlCheckDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.ControlCheckDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ControlCheckDebug::InternalSwap(ControlCheckDebug* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_w_)
      + sizeof(ControlCheckDebug::_impl_.lateral_error_w_)
      - PROTOBUF_FIELD_OFFSET(ControlCheckDebug, _impl_.lateral_error_check_result_)>(
          reinterpret_cast<char*>(&_impl_.lateral_error_check_result_),
          reinterpret_cast<char*>(&other->_impl_.lateral_error_check_result_));
}

::google::protobuf::Metadata ControlCheckDebug::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimpleAntiSlopeDebug::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimpleAntiSlopeDebug>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_._has_bits_);
};

SimpleAntiSlopeDebug::SimpleAntiSlopeDebug(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleAntiSlopeDebug)
}
SimpleAntiSlopeDebug::SimpleAntiSlopeDebug(
    ::google::protobuf::Arena* arena, const SimpleAntiSlopeDebug& from)
    : SimpleAntiSlopeDebug(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SimpleAntiSlopeDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SimpleAntiSlopeDebug::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hill_start_window_),
           0,
           offsetof(Impl_, erase_brk_in_end_) -
               offsetof(Impl_, hill_start_window_) +
               sizeof(Impl_::erase_brk_in_end_));
}
SimpleAntiSlopeDebug::~SimpleAntiSlopeDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleAntiSlopeDebug)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SimpleAntiSlopeDebug::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SimpleAntiSlopeDebug::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SimpleAntiSlopeDebug::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SimpleAntiSlopeDebug>(),
            ::google::protobuf::Message::GetNewImpl<SimpleAntiSlopeDebug>(),
            ::google::protobuf::Message::GetClearImpl<SimpleAntiSlopeDebug>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<SimpleAntiSlopeDebug>(),
                ::google::protobuf::Message::GetSerializeImpl<SimpleAntiSlopeDebug>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_._cached_size_),
            false,
        },
        &SimpleAntiSlopeDebug::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SimpleAntiSlopeDebug::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 0, 0, 2> SimpleAntiSlopeDebug::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SimpleAntiSlopeDebug_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::SimpleAntiSlopeDebug>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 hill_start_window = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SimpleAntiSlopeDebug, _impl_.hill_start_window_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.hill_start_window_)}},
    // optional int32 preview_length = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SimpleAntiSlopeDebug, _impl_.preview_length_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.preview_length_)}},
    // optional double quit_hill_start_speed = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.quit_hill_start_speed_)}},
    // optional double normal_start_tartget_acc = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.normal_start_tartget_acc_)}},
    // optional bool in_hill_start_condition = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SimpleAntiSlopeDebug, _impl_.in_hill_start_condition_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.in_hill_start_condition_)}},
    // optional bool in_normal_start_condition = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SimpleAntiSlopeDebug, _impl_.in_normal_start_condition_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.in_normal_start_condition_)}},
    // optional double hill_start_acc_gain_rate = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 4, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.hill_start_acc_gain_rate_)}},
    // optional double normal_start_acc_gain_rate = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 5, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.normal_start_acc_gain_rate_)}},
    // optional bool on_obstacle = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SimpleAntiSlopeDebug, _impl_.on_obstacle_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.on_obstacle_)}},
    // optional bool from_else_to_auto = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SimpleAntiSlopeDebug, _impl_.from_else_to_auto_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.from_else_to_auto_)}},
    // optional bool previous_is_auto = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SimpleAntiSlopeDebug, _impl_.previous_is_auto_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.previous_is_auto_)}},
    // optional double anti_cmd_brake = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 14, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.anti_cmd_brake_)}},
    // optional double anti_cmd_throttle = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 15, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.anti_cmd_throttle_)}},
    // optional bool uphill_too_fast = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SimpleAntiSlopeDebug, _impl_.uphill_too_fast_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.uphill_too_fast_)}},
    // optional bool only_use_brk_downhill = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SimpleAntiSlopeDebug, _impl_.only_use_brk_downhill_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.only_use_brk_downhill_)}},
    // optional bool erase_brk_in_go = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 13, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.erase_brk_in_go_)}},
    // optional bool erase_brk_in_end = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 16, 0, PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.erase_brk_in_end_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 hill_start_window = 1;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.hill_start_window_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 preview_length = 2;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.preview_length_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double quit_hill_start_speed = 3;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.quit_hill_start_speed_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double normal_start_tartget_acc = 4;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.normal_start_tartget_acc_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool in_hill_start_condition = 5;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.in_hill_start_condition_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool in_normal_start_condition = 6;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.in_normal_start_condition_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double hill_start_acc_gain_rate = 7;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.hill_start_acc_gain_rate_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double normal_start_acc_gain_rate = 8;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.normal_start_acc_gain_rate_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool on_obstacle = 9;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.on_obstacle_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool from_else_to_auto = 10;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.from_else_to_auto_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool previous_is_auto = 11;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.previous_is_auto_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double anti_cmd_brake = 12;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.anti_cmd_brake_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double anti_cmd_throttle = 13;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.anti_cmd_throttle_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool uphill_too_fast = 14;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.uphill_too_fast_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool only_use_brk_downhill = 15;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.only_use_brk_downhill_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool erase_brk_in_go = 16;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.erase_brk_in_go_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool erase_brk_in_end = 17;
    {PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.erase_brk_in_end_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SimpleAntiSlopeDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleAntiSlopeDebug)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hill_start_window_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.in_normal_start_condition_) -
        reinterpret_cast<char*>(&_impl_.hill_start_window_)) + sizeof(_impl_.in_normal_start_condition_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.on_obstacle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.anti_cmd_throttle_) -
        reinterpret_cast<char*>(&_impl_.on_obstacle_)) + sizeof(_impl_.anti_cmd_throttle_));
  }
  _impl_.erase_brk_in_end_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SimpleAntiSlopeDebug::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleAntiSlopeDebug)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 hill_start_window = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_hill_start_window(), target);
  }

  // optional int32 preview_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_preview_length(), target);
  }

  // optional double quit_hill_start_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_quit_hill_start_speed(), target);
  }

  // optional double normal_start_tartget_acc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_normal_start_tartget_acc(), target);
  }

  // optional bool in_hill_start_condition = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_in_hill_start_condition(), target);
  }

  // optional bool in_normal_start_condition = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_in_normal_start_condition(), target);
  }

  // optional double hill_start_acc_gain_rate = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_hill_start_acc_gain_rate(), target);
  }

  // optional double normal_start_acc_gain_rate = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_normal_start_acc_gain_rate(), target);
  }

  // optional bool on_obstacle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_on_obstacle(), target);
  }

  // optional bool from_else_to_auto = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_from_else_to_auto(), target);
  }

  // optional bool previous_is_auto = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_previous_is_auto(), target);
  }

  // optional double anti_cmd_brake = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_anti_cmd_brake(), target);
  }

  // optional double anti_cmd_throttle = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_anti_cmd_throttle(), target);
  }

  // optional bool uphill_too_fast = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_uphill_too_fast(), target);
  }

  // optional bool only_use_brk_downhill = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_only_use_brk_downhill(), target);
  }

  // optional bool erase_brk_in_go = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_erase_brk_in_go(), target);
  }

  // optional bool erase_brk_in_end = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_erase_brk_in_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleAntiSlopeDebug)
  return target;
}

::size_t SimpleAntiSlopeDebug::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.SimpleAntiSlopeDebug)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 hill_start_window = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_hill_start_window());
    }
    // optional int32 preview_length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_preview_length());
    }
    // optional double quit_hill_start_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }
    // optional double normal_start_tartget_acc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }
    // optional double hill_start_acc_gain_rate = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional double normal_start_acc_gain_rate = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional bool in_hill_start_condition = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }
    // optional bool in_normal_start_condition = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool on_obstacle = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }
    // optional bool from_else_to_auto = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }
    // optional bool previous_is_auto = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }
    // optional bool uphill_too_fast = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }
    // optional bool only_use_brk_downhill = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }
    // optional bool erase_brk_in_go = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3;
    }
    // optional double anti_cmd_brake = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional double anti_cmd_throttle = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 9;
    }
  }
   {
    // optional bool erase_brk_in_end = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void SimpleAntiSlopeDebug::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimpleAntiSlopeDebug*>(&to_msg);
  auto& from = static_cast<const SimpleAntiSlopeDebug&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleAntiSlopeDebug)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hill_start_window_ = from._impl_.hill_start_window_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.preview_length_ = from._impl_.preview_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.quit_hill_start_speed_ = from._impl_.quit_hill_start_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.normal_start_tartget_acc_ = from._impl_.normal_start_tartget_acc_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hill_start_acc_gain_rate_ = from._impl_.hill_start_acc_gain_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.normal_start_acc_gain_rate_ = from._impl_.normal_start_acc_gain_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.in_hill_start_condition_ = from._impl_.in_hill_start_condition_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.in_normal_start_condition_ = from._impl_.in_normal_start_condition_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.on_obstacle_ = from._impl_.on_obstacle_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.from_else_to_auto_ = from._impl_.from_else_to_auto_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.previous_is_auto_ = from._impl_.previous_is_auto_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.uphill_too_fast_ = from._impl_.uphill_too_fast_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.only_use_brk_downhill_ = from._impl_.only_use_brk_downhill_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.erase_brk_in_go_ = from._impl_.erase_brk_in_go_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.anti_cmd_brake_ = from._impl_.anti_cmd_brake_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.anti_cmd_throttle_ = from._impl_.anti_cmd_throttle_;
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_impl_.erase_brk_in_end_ = from._impl_.erase_brk_in_end_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleAntiSlopeDebug::CopyFrom(const SimpleAntiSlopeDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleAntiSlopeDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimpleAntiSlopeDebug::InternalSwap(SimpleAntiSlopeDebug* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.erase_brk_in_end_)
      + sizeof(SimpleAntiSlopeDebug::_impl_.erase_brk_in_end_)
      - PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, _impl_.hill_start_window_)>(
          reinterpret_cast<char*>(&_impl_.hill_start_window_),
          reinterpret_cast<char*>(&other->_impl_.hill_start_window_));
}

::google::protobuf::Metadata SimpleAntiSlopeDebug::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CleaningSafetyCheckDebug::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CleaningSafetyCheckDebug>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_._has_bits_);
};

void CleaningSafetyCheckDebug::clear_current_predicted_end_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_predicted_end_point_ != nullptr) _impl_.current_predicted_end_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CleaningSafetyCheckDebug::clear_predicted_trajectory_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.predicted_trajectory_point_.Clear();
}
CleaningSafetyCheckDebug::CleaningSafetyCheckDebug(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.CleaningSafetyCheckDebug)
}
inline PROTOBUF_NDEBUG_INLINE CleaningSafetyCheckDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::CleaningSafetyCheckDebug& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        predicted_trajectory_point_{visibility, arena, from.predicted_trajectory_point_},
        control_task_name_(arena, from.control_task_name_) {}

CleaningSafetyCheckDebug::CleaningSafetyCheckDebug(
    ::google::protobuf::Arena* arena,
    const CleaningSafetyCheckDebug& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CleaningSafetyCheckDebug* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cleaning_control_check_debug_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::ControlCheckDebug>(
                              arena, *from._impl_.cleaning_control_check_debug_)
                        : nullptr;
  _impl_.current_predicted_end_point_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(
                              arena, *from._impl_.current_predicted_end_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, post_process_throttle_cmd_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, post_process_throttle_cmd_),
           offsetof(Impl_, is_predicted_collsion_) -
               offsetof(Impl_, post_process_throttle_cmd_) +
               sizeof(Impl_::is_predicted_collsion_));

  // @@protoc_insertion_point(copy_constructor:control.CleaningSafetyCheckDebug)
}
inline PROTOBUF_NDEBUG_INLINE CleaningSafetyCheckDebug::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        predicted_trajectory_point_{visibility, arena},
        control_task_name_(arena) {}

inline void CleaningSafetyCheckDebug::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cleaning_control_check_debug_),
           0,
           offsetof(Impl_, is_predicted_collsion_) -
               offsetof(Impl_, cleaning_control_check_debug_) +
               sizeof(Impl_::is_predicted_collsion_));
}
CleaningSafetyCheckDebug::~CleaningSafetyCheckDebug() {
  // @@protoc_insertion_point(destructor:control.CleaningSafetyCheckDebug)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CleaningSafetyCheckDebug::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.control_task_name_.Destroy();
  delete _impl_.cleaning_control_check_debug_;
  delete _impl_.current_predicted_end_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CleaningSafetyCheckDebug::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CleaningSafetyCheckDebug::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CleaningSafetyCheckDebug>(),
            ::google::protobuf::Message::GetNewImpl<CleaningSafetyCheckDebug>(),
            ::google::protobuf::Message::GetClearImpl<CleaningSafetyCheckDebug>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<CleaningSafetyCheckDebug>(),
                ::google::protobuf::Message::GetSerializeImpl<CleaningSafetyCheckDebug>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_._cached_size_),
            false,
        },
        &CleaningSafetyCheckDebug::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CleaningSafetyCheckDebug::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 3, 66, 2> CleaningSafetyCheckDebug::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966848,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CleaningSafetyCheckDebug_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::CleaningSafetyCheckDebug>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string control_task_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.control_task_name_)}},
    // optional bool is_need_post_command = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CleaningSafetyCheckDebug, _impl_.is_need_post_command_), 5>(),
     {16, 5, 0, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.is_need_post_command_)}},
    // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.cleaning_control_check_debug_)}},
    // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 1, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.current_predicted_end_point_)}},
    // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.predicted_trajectory_point_)}},
    // optional bool is_predicted_collsion = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CleaningSafetyCheckDebug, _impl_.is_predicted_collsion_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.is_predicted_collsion_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional double post_process_throttle_cmd = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 3, 0, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.post_process_throttle_cmd_)}},
    // optional double post_process_brake_cmd = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 4, 0, PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.post_process_brake_cmd_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string control_task_name = 1;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.control_task_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool is_need_post_command = 2;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.is_need_post_command_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.cleaning_control_check_debug_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.current_predicted_end_point_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.predicted_trajectory_point_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool is_predicted_collsion = 6;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.is_predicted_collsion_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double post_process_throttle_cmd = 8;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.post_process_throttle_cmd_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double post_process_brake_cmd = 9;
    {PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.post_process_brake_cmd_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::ControlCheckDebug>()},
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
    {::_pbi::TcParser::GetTable<::control::common::TrajectoryPoint>()},
  }}, {{
    "\40\21\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "control.CleaningSafetyCheckDebug"
    "control_task_name"
  }},
};

PROTOBUF_NOINLINE void CleaningSafetyCheckDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.CleaningSafetyCheckDebug)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predicted_trajectory_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cleaning_control_check_debug_ != nullptr);
      _impl_.cleaning_control_check_debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.current_predicted_end_point_ != nullptr);
      _impl_.current_predicted_end_point_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.post_process_throttle_cmd_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_predicted_collsion_) -
        reinterpret_cast<char*>(&_impl_.post_process_throttle_cmd_)) + sizeof(_impl_.is_predicted_collsion_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CleaningSafetyCheckDebug::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.CleaningSafetyCheckDebug)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string control_task_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_control_task_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "control.CleaningSafetyCheckDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool is_need_post_command = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_need_post_command(), target);
  }

  // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.cleaning_control_check_debug_, _impl_.cleaning_control_check_debug_->GetCachedSize(), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.current_predicted_end_point_, _impl_.current_predicted_end_point_->GetCachedSize(), target, stream);
  }

  // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_predicted_trajectory_point_size());
       i < n; i++) {
    const auto& repfield = this->_internal_predicted_trajectory_point().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional bool is_predicted_collsion = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_predicted_collsion(), target);
  }

  // optional double post_process_throttle_cmd = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_post_process_throttle_cmd(), target);
  }

  // optional double post_process_brake_cmd = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_post_process_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.CleaningSafetyCheckDebug)
  return target;
}

::size_t CleaningSafetyCheckDebug::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.CleaningSafetyCheckDebug)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
     {
      total_size += 1UL * this->_internal_predicted_trajectory_point_size();
      for (const auto& msg : this->_internal_predicted_trajectory_point()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string control_task_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_control_task_name());
    }
    // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cleaning_control_check_debug_);
    }
    // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_predicted_end_point_);
    }
    // optional double post_process_throttle_cmd = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }
    // optional double post_process_brake_cmd = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional bool is_need_post_command = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }
    // optional bool is_predicted_collsion = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void CleaningSafetyCheckDebug::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CleaningSafetyCheckDebug*>(&to_msg);
  auto& from = static_cast<const CleaningSafetyCheckDebug&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.CleaningSafetyCheckDebug)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_predicted_trajectory_point()->MergeFrom(
      from._internal_predicted_trajectory_point());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.cleaning_control_check_debug_ != nullptr);
      if (_this->_impl_.cleaning_control_check_debug_ == nullptr) {
        _this->_impl_.cleaning_control_check_debug_ =
            ::google::protobuf::Message::CopyConstruct<::control::ControlCheckDebug>(arena, *from._impl_.cleaning_control_check_debug_);
      } else {
        _this->_impl_.cleaning_control_check_debug_->MergeFrom(*from._impl_.cleaning_control_check_debug_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.current_predicted_end_point_ != nullptr);
      if (_this->_impl_.current_predicted_end_point_ == nullptr) {
        _this->_impl_.current_predicted_end_point_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::TrajectoryPoint>(arena, *from._impl_.current_predicted_end_point_);
      } else {
        _this->_impl_.current_predicted_end_point_->MergeFrom(*from._impl_.current_predicted_end_point_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.post_process_throttle_cmd_ = from._impl_.post_process_throttle_cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.post_process_brake_cmd_ = from._impl_.post_process_brake_cmd_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_need_post_command_ = from._impl_.is_need_post_command_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_predicted_collsion_ = from._impl_.is_predicted_collsion_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CleaningSafetyCheckDebug::CopyFrom(const CleaningSafetyCheckDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.CleaningSafetyCheckDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CleaningSafetyCheckDebug::InternalSwap(CleaningSafetyCheckDebug* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.predicted_trajectory_point_.InternalSwap(&other->_impl_.predicted_trajectory_point_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.control_task_name_, &other->_impl_.control_task_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.is_predicted_collsion_)
      + sizeof(CleaningSafetyCheckDebug::_impl_.is_predicted_collsion_)
      - PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, _impl_.cleaning_control_check_debug_)>(
          reinterpret_cast<char*>(&_impl_.cleaning_control_check_debug_),
          reinterpret_cast<char*>(&other->_impl_.cleaning_control_check_debug_));
}

::google::protobuf::Metadata CleaningSafetyCheckDebug::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

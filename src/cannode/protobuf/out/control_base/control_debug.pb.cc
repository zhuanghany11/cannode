// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/control_debug.proto

#include "control_base/control_debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcontrol_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcontrol_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcontrol_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleAntiSlopeDebug_control_5fbase_2fcontrol_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcontrol_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcontrol_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcontrol_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
namespace control {
class ControlDebugInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlDebugInfo> _instance;
} _ControlDebugInfo_default_instance_;
class SimpleLongitudinalPlusDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleLongitudinalPlusDebug> _instance;
} _SimpleLongitudinalPlusDebug_default_instance_;
class SimpleLateralPlusDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleLateralPlusDebug> _instance;
} _SimpleLateralPlusDebug_default_instance_;
class SimpleMPCPlusDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleMPCPlusDebug> _instance;
} _SimpleMPCPlusDebug_default_instance_;
class ControlCheckDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlCheckDebug> _instance;
} _ControlCheckDebug_default_instance_;
class SimpleAntiSlopeDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleAntiSlopeDebug> _instance;
} _SimpleAntiSlopeDebug_default_instance_;
class CleaningSafetyCheckDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleaningSafetyCheckDebug> _instance;
} _CleaningSafetyCheckDebug_default_instance_;
}  // namespace control
static void InitDefaultsscc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_CleaningSafetyCheckDebug_default_instance_;
    new (ptr) ::control::CleaningSafetyCheckDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::CleaningSafetyCheckDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto}, {
      &scc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_ControlCheckDebug_default_instance_;
    new (ptr) ::control::ControlCheckDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::ControlCheckDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto}, {}};

static void InitDefaultsscc_info_ControlDebugInfo_control_5fbase_2fcontrol_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_ControlDebugInfo_default_instance_;
    new (ptr) ::control::ControlDebugInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::ControlDebugInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ControlDebugInfo_control_5fbase_2fcontrol_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ControlDebugInfo_control_5fbase_2fcontrol_5fdebug_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
      &scc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
      &scc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
      &scc_info_SimpleAntiSlopeDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
      &scc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_SimpleAntiSlopeDebug_control_5fbase_2fcontrol_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_SimpleAntiSlopeDebug_default_instance_;
    new (ptr) ::control::SimpleAntiSlopeDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::SimpleAntiSlopeDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleAntiSlopeDebug_control_5fbase_2fcontrol_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleAntiSlopeDebug_control_5fbase_2fcontrol_5fdebug_2eproto}, {}};

static void InitDefaultsscc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_SimpleLateralPlusDebug_default_instance_;
    new (ptr) ::control::SimpleLateralPlusDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::SimpleLateralPlusDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto}, {
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
      &scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
      &scc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_SimpleLongitudinalPlusDebug_default_instance_;
    new (ptr) ::control::SimpleLongitudinalPlusDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::SimpleLongitudinalPlusDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto}, {
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_SimpleMPCPlusDebug_default_instance_;
    new (ptr) ::control::SimpleMPCPlusDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::SimpleMPCPlusDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto}, {
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2fcontrol_5fdebug_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, header_),
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, simple_lon_debug_),
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, simple_lat_debug_),
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, simple_mpc_debug_),
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, simple_anti_slope_debug_),
  PROTOBUF_FIELD_OFFSET(::control::ControlDebugInfo, cleaning_safety_check_debug_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, station_error_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, preview_station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, speed_controller_input_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, preview_speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, preview_speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, preview_acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, slope_offset_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, current_station_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, path_remain_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, pid_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, leadlag_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, speed_offset_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, current_speed_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, current_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, current_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, jerk_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, current_matched_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, current_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, preview_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, acceleration_lookup_limit_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, vehicle_pitch_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, is_epb_brake_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, current_steer_interval_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, is_wait_steer_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, is_stop_reason_by_destination_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, is_stop_reason_by_prdestrian_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, is_full_stop_soft_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, control_task_name_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, path_remain_add_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, max_path_remain_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, form_go_to_full_stop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, begin_end_brake_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalPlusDebug, hillup_fullstop_brake_rate_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  37,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  1,
  2,
  3,
  34,
  35,
  38,
  36,
  39,
  40,
  41,
  42,
  0,
  45,
  46,
  43,
  44,
  47,
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, lateral_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, heading_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, current_target_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_angle_feedback_augment_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_mrac_debug_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, steer_mrac_enable_status_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, lateral_centripetal_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, control_task_name_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, lat_control_check_debug_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, efai_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralPlusDebug, ed_rate_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  1,
  33,
  2,
  37,
  34,
  0,
  3,
  35,
  36,
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, station_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, speed_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_unconstrained_control_diff_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_feedforward_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, matrix_q_updated_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, matrix_r_updated_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, jerk_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, jerk_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, lateral_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, heading_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, steer_angle_feedback_augment_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, current_matched_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, current_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, preview_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, preview_station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, preview_speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, preview_speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, preview_acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, vehicle_pitch_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, slope_offset_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, path_remain_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_lookup_offset_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, acceleration_vrf_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCPlusDebug, control_task_name_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  62,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  ~0u,
  ~0u,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  1,
  2,
  3,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  0,
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, lateral_error_check_result_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, lateral_error_check_e_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, lateral_error_check_w_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, heading_error_check_result_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, heading_error_check_e_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, heading_error_check_w_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, station_error_check_result_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, station_error_check_e_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, station_error_check_w_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, speed_error_check_result_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, speed_error_check_e_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, speed_error_check_w_count_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, lateral_error_e_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCheckDebug, lateral_error_w_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, hill_start_window_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, preview_length_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, quit_hill_start_speed_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, normal_start_tartget_acc_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, in_hill_start_condition_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, in_normal_start_condition_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, hill_start_acc_gain_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, normal_start_acc_gain_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, on_obstacle_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, from_else_to_auto_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, previous_is_auto_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, anti_cmd_brake_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, anti_cmd_throttle_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, uphill_too_fast_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, only_use_brk_downhill_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, erase_brk_in_go_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleAntiSlopeDebug, erase_brk_in_end_),
  0,
  1,
  2,
  3,
  6,
  7,
  4,
  5,
  8,
  9,
  10,
  14,
  15,
  11,
  12,
  13,
  16,
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, control_task_name_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, is_need_post_command_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, cleaning_control_check_debug_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, current_predicted_end_point_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, predicted_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, is_predicted_collsion_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, post_process_throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::CleaningSafetyCheckDebug, post_process_brake_cmd_),
  0,
  5,
  1,
  2,
  ~0u,
  6,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::control::ControlDebugInfo)},
  { 17, 70, sizeof(::control::SimpleLongitudinalPlusDebug)},
  { 118, 161, sizeof(::control::SimpleLateralPlusDebug)},
  { 199, 269, sizeof(::control::SimpleMPCPlusDebug)},
  { 334, 353, sizeof(::control::ControlCheckDebug)},
  { 367, 389, sizeof(::control::SimpleAntiSlopeDebug)},
  { 406, 419, sizeof(::control::CleaningSafetyCheckDebug)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_ControlDebugInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_SimpleLongitudinalPlusDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_SimpleLateralPlusDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_SimpleMPCPlusDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_ControlCheckDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_SimpleAntiSlopeDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_CleaningSafetyCheckDebug_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2fcontrol_5fdebug_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n control_base/control_debug.proto\022\007cont"
  "rol\032\036control_msgs/control_cmd.proto\032#com"
  "mon_msgs/basic_msgs/header.proto\032&common"
  "_msgs/basic_msgs/pnc_point.proto\032\037contro"
  "l_base/check_status.proto\"\364\002\n\020ControlDeb"
  "ugInfo\022&\n\006header\030\001 \001(\0132\026.control.common."
  "Header\022>\n\020simple_lon_debug\030\002 \001(\0132$.contr"
  "ol.SimpleLongitudinalPlusDebug\0229\n\020simple"
  "_lat_debug\030\003 \001(\0132\037.control.SimpleLateral"
  "PlusDebug\0225\n\020simple_mpc_debug\030\004 \001(\0132\033.co"
  "ntrol.SimpleMPCPlusDebug\022>\n\027simple_anti_"
  "slope_debug\030\005 \001(\0132\035.control.SimpleAntiSl"
  "opeDebug\022F\n\033cleaning_safety_check_debug\030"
  "\006 \001(\0132!.control.CleaningSafetyCheckDebug"
  "\"\330\013\n\033SimpleLongitudinalPlusDebug\022\031\n\021stat"
  "ion_reference\030\001 \001(\001\022\025\n\rstation_error\030\002 \001"
  "(\001\022\035\n\025station_error_limited\030\003 \001(\001\022\035\n\025pre"
  "view_station_error\030\004 \001(\001\022\027\n\017speed_refere"
  "nce\030\005 \001(\001\022\023\n\013speed_error\030\006 \001(\001\022&\n\036speed_"
  "controller_input_limited\030\007 \001(\001\022\037\n\027previe"
  "w_speed_reference\030\010 \001(\001\022\033\n\023preview_speed"
  "_error\030\t \001(\001\022&\n\036preview_acceleration_ref"
  "erence\030\n \001(\001\022\"\n\032acceleration_cmd_closelo"
  "op\030\013 \001(\001\022\030\n\020acceleration_cmd\030\014 \001(\001\022\033\n\023ac"
  "celeration_lookup\030\r \001(\001\022\024\n\014speed_lookup\030"
  "\016 \001(\001\022\031\n\021calibration_value\030\017 \001(\001\022\024\n\014thro"
  "ttle_cmd\030\020 \001(\001\022\021\n\tbrake_cmd\030\021 \001(\001\022\024\n\014is_"
  "full_stop\030\022 \001(\010\022!\n\031slope_offset_compensa"
  "tion\030\023 \001(\001\022\027\n\017current_station\030\024 \001(\001\022\023\n\013p"
  "ath_remain\030\025 \001(\001\022\035\n\025pid_saturation_statu"
  "s\030\026 \001(\005\022!\n\031leadlag_saturation_status\030\027 \001"
  "(\005\022\024\n\014speed_offset\030\030 \001(\001\022\025\n\rcurrent_spee"
  "d\030\031 \001(\001\022\036\n\026acceleration_reference\030\032 \001(\001\022"
  "\034\n\024current_acceleration\030\033 \001(\001\022\032\n\022acceler"
  "ation_error\030\034 \001(\001\022\026\n\016jerk_reference\030\035 \001("
  "\001\022\024\n\014current_jerk\030\036 \001(\001\022\022\n\njerk_error\030\037 "
  "\001(\001\022>\n\025current_matched_point\030  \001(\0132\037.con"
  "trol.common.TrajectoryPoint\022@\n\027current_r"
  "eference_point\030! \001(\0132\037.control.common.Tr"
  "ajectoryPoint\022@\n\027preview_reference_point"
  "\030\" \001(\0132\037.control.common.TrajectoryPoint\022"
  "!\n\031acceleration_lookup_limit\030# \001(\001\022\025\n\rve"
  "hicle_pitch\030$ \001(\001\022\024\n\014is_epb_brake\030% \001(\010\022"
  "\036\n\026current_steer_interval\030& \001(\001\022\025\n\ris_wa"
  "it_steer\030\' \001(\010\022%\n\035is_stop_reason_by_dest"
  "ination\030( \001(\010\022$\n\034is_stop_reason_by_prdes"
  "trian\030) \001(\010\022\031\n\021is_full_stop_soft\030* \001(\010\022\031"
  "\n\021control_task_name\030+ \001(\t\022\027\n\017path_remain"
  "_add\030, \001(\001\022$\n\034max_path_remain_when_stopp"
  "ed\030- \001(\001\022\034\n\024form_go_to_full_stop\030. \001(\010\022\027"
  "\n\017begin_end_brake\030/ \001(\010\022\"\n\032hillup_fullst"
  "op_brake_rate\0300 \001(\001\"\267\t\n\026SimpleLateralPlu"
  "sDebug\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_hea"
  "ding\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_e"
  "rror\030\004 \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032"
  "\n\022lateral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030"
  "\007 \001(\001\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angl"
  "e_feedforward\030\t \001(\001\022(\n steer_angle_later"
  "al_contribution\030\n \001(\001\022-\n%steer_angle_lat"
  "eral_rate_contribution\030\013 \001(\001\022(\n steer_an"
  "gle_heading_contribution\030\014 \001(\001\022-\n%steer_"
  "angle_heading_rate_contribution\030\r \001(\001\022\034\n"
  "\024steer_angle_feedback\030\016 \001(\001\022\031\n\021steering_"
  "position\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023ste"
  "er_angle_limited\030\021 \001(\001\022\034\n\024lateral_accele"
  "ration\030\022 \001(\001\022\024\n\014lateral_jerk\030\023 \001(\001\022\030\n\020re"
  "f_heading_rate\030\024 \001(\001\022\024\n\014heading_rate\030\025 \001"
  "(\001\022 \n\030ref_heading_acceleration\030\026 \001(\001\022\034\n\024"
  "heading_acceleration\030\027 \001(\001\022\"\n\032heading_er"
  "ror_acceleration\030\030 \001(\001\022\030\n\020ref_heading_je"
  "rk\030\031 \001(\001\022\024\n\014heading_jerk\030\032 \001(\001\022\032\n\022headin"
  "g_error_jerk\030\033 \001(\001\022\036\n\026lateral_error_feed"
  "back\030\034 \001(\001\022\036\n\026heading_error_feedback\030\035 \001"
  "(\001\022=\n\024current_target_point\030\036 \001(\0132\037.contr"
  "ol.common.TrajectoryPoint\022$\n\034steer_angle"
  "_feedback_augment\030\037 \001(\001\022,\n\020steer_mrac_de"
  "bug\030  \001(\0132\022.control.MracDebug\022 \n\030steer_m"
  "rac_enable_status\030! \001(\010\022(\n lateral_centr"
  "ipetal_acceleration\030\" \001(\001\022\031\n\021control_tas"
  "k_name\030# \001(\t\022;\n\027lat_control_check_debug\030"
  "$ \001(\0132\032.control.ControlCheckDebug\022\021\n\tefa"
  "i_rate\030% \001(\001\022\017\n\007ed_rate\030& \001(\001\"\315\017\n\022Simple"
  "MPCPlusDebug\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013r"
  "ef_heading\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rhea"
  "ding_error\030\004 \001(\001\022\032\n\022heading_error_rate\030\005"
  " \001(\001\022\032\n\022lateral_error_rate\030\006 \001(\001\022\021\n\tcurv"
  "ature\030\007 \001(\001\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027stee"
  "r_angle_feedforward\030\t \001(\001\022(\n steer_angle"
  "_lateral_contribution\030\n \001(\001\022-\n%steer_ang"
  "le_lateral_rate_contribution\030\013 \001(\001\022(\n st"
  "eer_angle_heading_contribution\030\014 \001(\001\022-\n%"
  "steer_angle_heading_rate_contribution\030\r "
  "\001(\001\022\034\n\024steer_angle_feedback\030\016 \001(\001\022\031\n\021ste"
  "ering_position\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022"
  "\033\n\023steer_angle_limited\030\021 \001(\001\022\031\n\021station_"
  "reference\030\022 \001(\001\022\025\n\rstation_error\030\023 \001(\001\022\027"
  "\n\017speed_reference\030\024 \001(\001\022\023\n\013speed_error\030\025"
  " \001(\001\022\036\n\026acceleration_reference\030\026 \001(\001\022\024\n\014"
  "is_full_stop\030\027 \001(\010\022\030\n\020station_feedback\030\030"
  " \001(\001\022\026\n\016speed_feedback\030\031 \001(\001\022\"\n\032accelera"
  "tion_cmd_closeloop\030\032 \001(\001\022\030\n\020acceleration"
  "_cmd\030\033 \001(\001\022\033\n\023acceleration_lookup\030\034 \001(\001\022"
  "\024\n\014speed_lookup\030\035 \001(\001\022\031\n\021calibration_val"
  "ue\030\036 \001(\001\022(\n steer_unconstrained_control_"
  "diff\030\037 \001(\001\022,\n$steer_angle_feedforward_co"
  "mpensation\030  \001(\001\022\030\n\020matrix_q_updated\030! \003"
  "(\001\022\030\n\020matrix_r_updated\030\" \003(\001\022\034\n\024lateral_"
  "acceleration\030# \001(\001\022\024\n\014lateral_jerk\030$ \001(\001"
  "\022\030\n\020ref_heading_rate\030% \001(\001\022\024\n\014heading_ra"
  "te\030& \001(\001\022 \n\030ref_heading_acceleration\030\' \001"
  "(\001\022\034\n\024heading_acceleration\030( \001(\001\022\"\n\032head"
  "ing_error_acceleration\030) \001(\001\022\030\n\020ref_head"
  "ing_jerk\030* \001(\001\022\024\n\014heading_jerk\030+ \001(\001\022\032\n\022"
  "heading_error_jerk\030, \001(\001\022\035\n\025acceleration"
  "_feedback\030- \001(\001\022\032\n\022acceleration_error\030. "
  "\001(\001\022\026\n\016jerk_reference\030/ \001(\001\022\025\n\rjerk_feed"
  "back\0300 \001(\001\022\022\n\njerk_error\0301 \001(\001\022\036\n\026latera"
  "l_error_feedback\0302 \001(\001\022\036\n\026heading_error_"
  "feedback\0303 \001(\001\022$\n\034steer_angle_feedback_a"
  "ugment\0304 \001(\001\022>\n\025current_matched_point\0305 "
  "\001(\0132\037.control.common.TrajectoryPoint\022@\n\027"
  "current_reference_point\0306 \001(\0132\037.control."
  "common.TrajectoryPoint\022@\n\027preview_refere"
  "nce_point\0307 \001(\0132\037.control.common.Traject"
  "oryPoint\022\035\n\025preview_station_error\0308 \001(\001\022"
  "\037\n\027preview_speed_reference\0309 \001(\001\022\033\n\023prev"
  "iew_speed_error\030: \001(\001\022&\n\036preview_acceler"
  "ation_reference\030; \001(\001\022\025\n\rvehicle_pitch\030<"
  " \001(\001\022!\n\031slope_offset_compensation\030= \001(\001\022"
  "\023\n\013path_remain\030> \001(\001\022\"\n\032acceleration_loo"
  "kup_offset\030\? \001(\001\022\030\n\020acceleration_vrf\030@ \001"
  "(\001\022\031\n\021control_task_name\030A \001(\t\"\353\004\n\021Contro"
  "lCheckDebug\022\?\n\032lateral_error_check_resul"
  "t\030\001 \001(\0162\033.control.ControlCheckStatus\022#\n\033"
  "lateral_error_check_e_count\030\002 \001(\r\022#\n\033lat"
  "eral_error_check_w_count\030\003 \001(\r\022\?\n\032headin"
  "g_error_check_result\030\004 \001(\0162\033.control.Con"
  "trolCheckStatus\022#\n\033heading_error_check_e"
  "_count\030\005 \001(\r\022#\n\033heading_error_check_w_co"
  "unt\030\006 \001(\r\022\?\n\032station_error_check_result\030"
  "\007 \001(\0162\033.control.ControlCheckStatus\022#\n\033st"
  "ation_error_check_e_count\030\010 \001(\r\022#\n\033stati"
  "on_error_check_w_count\030\t \001(\r\022=\n\030speed_er"
  "ror_check_result\030\n \001(\0162\033.control.Control"
  "CheckStatus\022!\n\031speed_error_check_e_count"
  "\030\013 \001(\r\022!\n\031speed_error_check_w_count\030\014 \001("
  "\r\022\027\n\017lateral_error_e\030\r \001(\001\022\027\n\017lateral_er"
  "ror_w\030\016 \001(\001\"\374\003\n\024SimpleAntiSlopeDebug\022\031\n\021"
  "hill_start_window\030\001 \001(\005\022\026\n\016preview_lengt"
  "h\030\002 \001(\005\022\035\n\025quit_hill_start_speed\030\003 \001(\001\022 "
  "\n\030normal_start_tartget_acc\030\004 \001(\001\022\037\n\027in_h"
  "ill_start_condition\030\005 \001(\010\022!\n\031in_normal_s"
  "tart_condition\030\006 \001(\010\022 \n\030hill_start_acc_g"
  "ain_rate\030\007 \001(\001\022\"\n\032normal_start_acc_gain_"
  "rate\030\010 \001(\001\022\023\n\013on_obstacle\030\t \001(\010\022\031\n\021from_"
  "else_to_auto\030\n \001(\010\022\030\n\020previous_is_auto\030\013"
  " \001(\010\022\026\n\016anti_cmd_brake\030\014 \001(\001\022\031\n\021anti_cmd"
  "_throttle\030\r \001(\001\022\027\n\017uphill_too_fast\030\016 \001(\010"
  "\022\035\n\025only_use_brk_downhill\030\017 \001(\010\022\027\n\017erase"
  "_brk_in_go\030\020 \001(\010\022\030\n\020erase_brk_in_end\030\021 \001"
  "(\010\"\202\003\n\030CleaningSafetyCheckDebug\022\031\n\021contr"
  "ol_task_name\030\001 \001(\t\022\034\n\024is_need_post_comma"
  "nd\030\002 \001(\010\022@\n\034cleaning_control_check_debug"
  "\030\003 \001(\0132\032.control.ControlCheckDebug\022D\n\033cu"
  "rrent_predicted_end_point\030\004 \001(\0132\037.contro"
  "l.common.TrajectoryPoint\022C\n\032predicted_tr"
  "ajectory_point\030\005 \003(\0132\037.control.common.Tr"
  "ajectoryPoint\022\035\n\025is_predicted_collsion\030\006"
  " \001(\010\022!\n\031post_process_throttle_cmd\030\010 \001(\001\022"
  "\036\n\026post_process_brake_cmd\030\t \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_deps[4] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto,
  &::descriptor_table_control_5fbase_2fcheck_5fstatus_2eproto,
  &::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_sccs[7] = {
  &scc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
  &scc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
  &scc_info_ControlDebugInfo_control_5fbase_2fcontrol_5fdebug_2eproto.base,
  &scc_info_SimpleAntiSlopeDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
  &scc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
  &scc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
  &scc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2fcontrol_5fdebug_2eproto, "control_base/control_debug.proto", 6791,
  &descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_once, descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_sccs, descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto_deps, 7, 4,
  schemas, file_default_instances, TableStruct_control_5fbase_2fcontrol_5fdebug_2eproto::offsets,
  file_level_metadata_control_5fbase_2fcontrol_5fdebug_2eproto, 7, file_level_enum_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto, file_level_service_descriptors_control_5fbase_2fcontrol_5fdebug_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2fcontrol_5fdebug_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2fcontrol_5fdebug_2eproto)), true);
namespace control {

// ===================================================================

void ControlDebugInfo::InitAsDefaultInstance() {
  ::control::_ControlDebugInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::_ControlDebugInfo_default_instance_._instance.get_mutable()->simple_lon_debug_ = const_cast< ::control::SimpleLongitudinalPlusDebug*>(
      ::control::SimpleLongitudinalPlusDebug::internal_default_instance());
  ::control::_ControlDebugInfo_default_instance_._instance.get_mutable()->simple_lat_debug_ = const_cast< ::control::SimpleLateralPlusDebug*>(
      ::control::SimpleLateralPlusDebug::internal_default_instance());
  ::control::_ControlDebugInfo_default_instance_._instance.get_mutable()->simple_mpc_debug_ = const_cast< ::control::SimpleMPCPlusDebug*>(
      ::control::SimpleMPCPlusDebug::internal_default_instance());
  ::control::_ControlDebugInfo_default_instance_._instance.get_mutable()->simple_anti_slope_debug_ = const_cast< ::control::SimpleAntiSlopeDebug*>(
      ::control::SimpleAntiSlopeDebug::internal_default_instance());
  ::control::_ControlDebugInfo_default_instance_._instance.get_mutable()->cleaning_safety_check_debug_ = const_cast< ::control::CleaningSafetyCheckDebug*>(
      ::control::CleaningSafetyCheckDebug::internal_default_instance());
}
class ControlDebugInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlDebugInfo>()._has_bits_);
  static const ::control::common::Header& header(const ControlDebugInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::SimpleLongitudinalPlusDebug& simple_lon_debug(const ControlDebugInfo* msg);
  static void set_has_simple_lon_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::SimpleLateralPlusDebug& simple_lat_debug(const ControlDebugInfo* msg);
  static void set_has_simple_lat_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::SimpleMPCPlusDebug& simple_mpc_debug(const ControlDebugInfo* msg);
  static void set_has_simple_mpc_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::control::SimpleAntiSlopeDebug& simple_anti_slope_debug(const ControlDebugInfo* msg);
  static void set_has_simple_anti_slope_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::CleaningSafetyCheckDebug& cleaning_safety_check_debug(const ControlDebugInfo* msg);
  static void set_has_cleaning_safety_check_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::control::common::Header&
ControlDebugInfo::_Internal::header(const ControlDebugInfo* msg) {
  return *msg->header_;
}
const ::control::SimpleLongitudinalPlusDebug&
ControlDebugInfo::_Internal::simple_lon_debug(const ControlDebugInfo* msg) {
  return *msg->simple_lon_debug_;
}
const ::control::SimpleLateralPlusDebug&
ControlDebugInfo::_Internal::simple_lat_debug(const ControlDebugInfo* msg) {
  return *msg->simple_lat_debug_;
}
const ::control::SimpleMPCPlusDebug&
ControlDebugInfo::_Internal::simple_mpc_debug(const ControlDebugInfo* msg) {
  return *msg->simple_mpc_debug_;
}
const ::control::SimpleAntiSlopeDebug&
ControlDebugInfo::_Internal::simple_anti_slope_debug(const ControlDebugInfo* msg) {
  return *msg->simple_anti_slope_debug_;
}
const ::control::CleaningSafetyCheckDebug&
ControlDebugInfo::_Internal::cleaning_safety_check_debug(const ControlDebugInfo* msg) {
  return *msg->cleaning_safety_check_debug_;
}
void ControlDebugInfo::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ControlDebugInfo::ControlDebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.ControlDebugInfo)
}
ControlDebugInfo::ControlDebugInfo(const ControlDebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_simple_lon_debug()) {
    simple_lon_debug_ = new ::control::SimpleLongitudinalPlusDebug(*from.simple_lon_debug_);
  } else {
    simple_lon_debug_ = nullptr;
  }
  if (from._internal_has_simple_lat_debug()) {
    simple_lat_debug_ = new ::control::SimpleLateralPlusDebug(*from.simple_lat_debug_);
  } else {
    simple_lat_debug_ = nullptr;
  }
  if (from._internal_has_simple_mpc_debug()) {
    simple_mpc_debug_ = new ::control::SimpleMPCPlusDebug(*from.simple_mpc_debug_);
  } else {
    simple_mpc_debug_ = nullptr;
  }
  if (from._internal_has_simple_anti_slope_debug()) {
    simple_anti_slope_debug_ = new ::control::SimpleAntiSlopeDebug(*from.simple_anti_slope_debug_);
  } else {
    simple_anti_slope_debug_ = nullptr;
  }
  if (from._internal_has_cleaning_safety_check_debug()) {
    cleaning_safety_check_debug_ = new ::control::CleaningSafetyCheckDebug(*from.cleaning_safety_check_debug_);
  } else {
    cleaning_safety_check_debug_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.ControlDebugInfo)
}

void ControlDebugInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlDebugInfo_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cleaning_safety_check_debug_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cleaning_safety_check_debug_));
}

ControlDebugInfo::~ControlDebugInfo() {
  // @@protoc_insertion_point(destructor:control.ControlDebugInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlDebugInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete simple_lon_debug_;
  if (this != internal_default_instance()) delete simple_lat_debug_;
  if (this != internal_default_instance()) delete simple_mpc_debug_;
  if (this != internal_default_instance()) delete simple_anti_slope_debug_;
  if (this != internal_default_instance()) delete cleaning_safety_check_debug_;
}

void ControlDebugInfo::ArenaDtor(void* object) {
  ControlDebugInfo* _this = reinterpret_cast< ControlDebugInfo* >(object);
  (void)_this;
}
void ControlDebugInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlDebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlDebugInfo& ControlDebugInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlDebugInfo_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void ControlDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:control.ControlDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(simple_lon_debug_ != nullptr);
      simple_lon_debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(simple_lat_debug_ != nullptr);
      simple_lat_debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(simple_mpc_debug_ != nullptr);
      simple_mpc_debug_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(simple_anti_slope_debug_ != nullptr);
      simple_anti_slope_debug_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cleaning_safety_check_debug_ != nullptr);
      cleaning_safety_check_debug_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlDebugInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lon_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lat_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_mpc_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_anti_slope_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleaning_safety_check_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlDebugInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.ControlDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::simple_lon_debug(this), target, stream);
  }

  // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::simple_lat_debug(this), target, stream);
  }

  // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::simple_mpc_debug(this), target, stream);
  }

  // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::simple_anti_slope_debug(this), target, stream);
  }

  // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cleaning_safety_check_debug(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.ControlDebugInfo)
  return target;
}

size_t ControlDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.ControlDebugInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .control.SimpleLongitudinalPlusDebug simple_lon_debug = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_lon_debug_);
    }

    // optional .control.SimpleLateralPlusDebug simple_lat_debug = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_lat_debug_);
    }

    // optional .control.SimpleMPCPlusDebug simple_mpc_debug = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_mpc_debug_);
    }

    // optional .control.SimpleAntiSlopeDebug simple_anti_slope_debug = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_anti_slope_debug_);
    }

    // optional .control.CleaningSafetyCheckDebug cleaning_safety_check_debug = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cleaning_safety_check_debug_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlDebugInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.ControlDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlDebugInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlDebugInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.ControlDebugInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.ControlDebugInfo)
    MergeFrom(*source);
  }
}

void ControlDebugInfo::MergeFrom(const ControlDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.ControlDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_simple_lon_debug()->::control::SimpleLongitudinalPlusDebug::MergeFrom(from._internal_simple_lon_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_simple_lat_debug()->::control::SimpleLateralPlusDebug::MergeFrom(from._internal_simple_lat_debug());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_simple_mpc_debug()->::control::SimpleMPCPlusDebug::MergeFrom(from._internal_simple_mpc_debug());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_simple_anti_slope_debug()->::control::SimpleAntiSlopeDebug::MergeFrom(from._internal_simple_anti_slope_debug());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cleaning_safety_check_debug()->::control::CleaningSafetyCheckDebug::MergeFrom(from._internal_cleaning_safety_check_debug());
    }
  }
}

void ControlDebugInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.ControlDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlDebugInfo::CopyFrom(const ControlDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.ControlDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlDebugInfo::IsInitialized() const {
  return true;
}

void ControlDebugInfo::InternalSwap(ControlDebugInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlDebugInfo, cleaning_safety_check_debug_)
      + sizeof(ControlDebugInfo::cleaning_safety_check_debug_)
      - PROTOBUF_FIELD_OFFSET(ControlDebugInfo, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlDebugInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleLongitudinalPlusDebug::InitAsDefaultInstance() {
  ::control::_SimpleLongitudinalPlusDebug_default_instance_._instance.get_mutable()->current_matched_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleLongitudinalPlusDebug_default_instance_._instance.get_mutable()->current_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleLongitudinalPlusDebug_default_instance_._instance.get_mutable()->preview_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
}
class SimpleLongitudinalPlusDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLongitudinalPlusDebug>()._has_bits_);
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_station_error_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preview_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speed_controller_input_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_preview_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_preview_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_preview_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_throttle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_slope_offset_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_current_station(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_path_remain(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_pid_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_leadlag_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_speed_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_current_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_current_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_acceleration_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_jerk_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_current_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_jerk_error(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::control::common::TrajectoryPoint& current_matched_point(const SimpleLongitudinalPlusDebug* msg);
  static void set_has_current_matched_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::TrajectoryPoint& current_reference_point(const SimpleLongitudinalPlusDebug* msg);
  static void set_has_current_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::common::TrajectoryPoint& preview_reference_point(const SimpleLongitudinalPlusDebug* msg);
  static void set_has_preview_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acceleration_lookup_limit(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_vehicle_pitch(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_is_epb_brake(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_current_steer_interval(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_is_wait_steer(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_is_stop_reason_by_destination(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_is_stop_reason_by_prdestrian(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_is_full_stop_soft(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_control_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_remain_add(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_max_path_remain_when_stopped(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_form_go_to_full_stop(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_begin_end_brake(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_hillup_fullstop_brake_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
};

const ::control::common::TrajectoryPoint&
SimpleLongitudinalPlusDebug::_Internal::current_matched_point(const SimpleLongitudinalPlusDebug* msg) {
  return *msg->current_matched_point_;
}
const ::control::common::TrajectoryPoint&
SimpleLongitudinalPlusDebug::_Internal::current_reference_point(const SimpleLongitudinalPlusDebug* msg) {
  return *msg->current_reference_point_;
}
const ::control::common::TrajectoryPoint&
SimpleLongitudinalPlusDebug::_Internal::preview_reference_point(const SimpleLongitudinalPlusDebug* msg) {
  return *msg->preview_reference_point_;
}
void SimpleLongitudinalPlusDebug::clear_current_matched_point() {
  if (current_matched_point_ != nullptr) current_matched_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleLongitudinalPlusDebug::clear_current_reference_point() {
  if (current_reference_point_ != nullptr) current_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleLongitudinalPlusDebug::clear_preview_reference_point() {
  if (preview_reference_point_ != nullptr) preview_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SimpleLongitudinalPlusDebug::SimpleLongitudinalPlusDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleLongitudinalPlusDebug)
}
SimpleLongitudinalPlusDebug::SimpleLongitudinalPlusDebug(const SimpleLongitudinalPlusDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_control_task_name()) {
    control_task_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_control_task_name(),
      GetArena());
  }
  if (from._internal_has_current_matched_point()) {
    current_matched_point_ = new ::control::common::TrajectoryPoint(*from.current_matched_point_);
  } else {
    current_matched_point_ = nullptr;
  }
  if (from._internal_has_current_reference_point()) {
    current_reference_point_ = new ::control::common::TrajectoryPoint(*from.current_reference_point_);
  } else {
    current_reference_point_ = nullptr;
  }
  if (from._internal_has_preview_reference_point()) {
    preview_reference_point_ = new ::control::common::TrajectoryPoint(*from.preview_reference_point_);
  } else {
    preview_reference_point_ = nullptr;
  }
  ::memcpy(&station_reference_, &from.station_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&hillup_fullstop_brake_rate_) -
    reinterpret_cast<char*>(&station_reference_)) + sizeof(hillup_fullstop_brake_rate_));
  // @@protoc_insertion_point(copy_constructor:control.SimpleLongitudinalPlusDebug)
}

void SimpleLongitudinalPlusDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_matched_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hillup_fullstop_brake_rate_) -
      reinterpret_cast<char*>(&current_matched_point_)) + sizeof(hillup_fullstop_brake_rate_));
}

SimpleLongitudinalPlusDebug::~SimpleLongitudinalPlusDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleLongitudinalPlusDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleLongitudinalPlusDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  control_task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_matched_point_;
  if (this != internal_default_instance()) delete current_reference_point_;
  if (this != internal_default_instance()) delete preview_reference_point_;
}

void SimpleLongitudinalPlusDebug::ArenaDtor(void* object) {
  SimpleLongitudinalPlusDebug* _this = reinterpret_cast< SimpleLongitudinalPlusDebug* >(object);
  (void)_this;
}
void SimpleLongitudinalPlusDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleLongitudinalPlusDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleLongitudinalPlusDebug& SimpleLongitudinalPlusDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleLongitudinalPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void SimpleLongitudinalPlusDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleLongitudinalPlusDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_matched_point_ != nullptr);
      current_matched_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(current_reference_point_ != nullptr);
      current_reference_point_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(preview_reference_point_ != nullptr);
      preview_reference_point_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&station_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_station_error_) -
        reinterpret_cast<char*>(&station_reference_)) + sizeof(preview_station_error_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&speed_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceleration_cmd_) -
        reinterpret_cast<char*>(&speed_reference_)) + sizeof(acceleration_cmd_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&acceleration_lookup_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_remain_) -
        reinterpret_cast<char*>(&acceleration_lookup_)) + sizeof(path_remain_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&pid_saturation_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jerk_reference_) -
        reinterpret_cast<char*>(&pid_saturation_status_)) + sizeof(jerk_reference_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&current_jerk_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_wait_steer_) -
        reinterpret_cast<char*>(&current_jerk_)) + sizeof(is_wait_steer_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_stop_reason_by_destination_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hillup_fullstop_brake_rate_) -
        reinterpret_cast<char*>(&is_stop_reason_by_destination_)) + sizeof(hillup_fullstop_brake_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLongitudinalPlusDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double station_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_station_reference(&_has_bits_);
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_station_error(&_has_bits_);
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error_limited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_station_error_limited(&_has_bits_);
          station_error_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_station_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_preview_station_error(&_has_bits_);
          preview_station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_speed_reference(&_has_bits_);
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_speed_error(&_has_bits_);
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_controller_input_limited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_speed_controller_input_limited(&_has_bits_);
          speed_controller_input_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_preview_speed_reference(&_has_bits_);
          preview_speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_preview_speed_error(&_has_bits_);
          preview_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_acceleration_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_preview_acceleration_reference(&_has_bits_);
          preview_acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_acceleration_cmd_closeloop(&_has_bits_);
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_acceleration_cmd(&_has_bits_);
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_acceleration_lookup(&_has_bits_);
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_lookup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_speed_lookup(&_has_bits_);
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double calibration_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_calibration_value(&_has_bits_);
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_cmd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_throttle_cmd(&_has_bits_);
          throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_cmd = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_brake_cmd(&_has_bits_);
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_full_stop(&_has_bits_);
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double slope_offset_compensation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_slope_offset_compensation(&_has_bits_);
          slope_offset_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_station = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_current_station(&_has_bits_);
          current_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_remain = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_path_remain(&_has_bits_);
          path_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 pid_saturation_status = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_pid_saturation_status(&_has_bits_);
          pid_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 leadlag_saturation_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_leadlag_saturation_status(&_has_bits_);
          leadlag_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_offset = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_speed_offset(&_has_bits_);
          speed_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_speed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_current_speed(&_has_bits_);
          current_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_reference = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_acceleration_reference(&_has_bits_);
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_acceleration = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_current_acceleration(&_has_bits_);
          current_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_error = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_acceleration_error(&_has_bits_);
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_reference = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_jerk_reference(&_has_bits_);
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_jerk = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_current_jerk(&_has_bits_);
          current_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_error = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_jerk_error(&_has_bits_);
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_matched_point = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_matched_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_reference_point = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint preview_reference_point = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup_limit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_acceleration_lookup_limit(&_has_bits_);
          acceleration_lookup_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_pitch = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_vehicle_pitch(&_has_bits_);
          vehicle_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_epb_brake = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_epb_brake(&_has_bits_);
          is_epb_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double current_steer_interval = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_current_steer_interval(&_has_bits_);
          current_steer_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wait_steer = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_wait_steer(&_has_bits_);
          is_wait_steer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stop_reason_by_destination = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_stop_reason_by_destination(&_has_bits_);
          is_stop_reason_by_destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stop_reason_by_prdestrian = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_stop_reason_by_prdestrian(&_has_bits_);
          is_stop_reason_by_prdestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop_soft = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_full_stop_soft(&_has_bits_);
          is_full_stop_soft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string control_task_name = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_control_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.SimpleLongitudinalPlusDebug.control_task_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double path_remain_add = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_path_remain_add(&_has_bits_);
          path_remain_add_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_path_remain_when_stopped = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_max_path_remain_when_stopped(&_has_bits_);
          max_path_remain_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool form_go_to_full_stop = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_form_go_to_full_stop(&_has_bits_);
          form_go_to_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool begin_end_brake = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_begin_end_brake(&_has_bits_);
          begin_end_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double hillup_fullstop_brake_rate = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_hillup_fullstop_brake_rate(&_has_bits_);
          hillup_fullstop_brake_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleLongitudinalPlusDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleLongitudinalPlusDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double station_reference = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_station_reference(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_station_error(), target);
  }

  // optional double station_error_limited = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_station_error_limited(), target);
  }

  // optional double preview_station_error = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_preview_station_error(), target);
  }

  // optional double speed_reference = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_error(), target);
  }

  // optional double speed_controller_input_limited = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed_controller_input_limited(), target);
  }

  // optional double preview_speed_reference = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_calibration_value(), target);
  }

  // optional double throttle_cmd = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_throttle_cmd(), target);
  }

  // optional double brake_cmd = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_brake_cmd(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_full_stop = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_full_stop(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double slope_offset_compensation = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_slope_offset_compensation(), target);
  }

  // optional double current_station = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_current_station(), target);
  }

  // optional double path_remain = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_path_remain(), target);
  }

  // optional int32 pid_saturation_status = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_pid_saturation_status(), target);
  }

  // optional int32 leadlag_saturation_status = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_leadlag_saturation_status(), target);
  }

  // optional double speed_offset = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_speed_offset(), target);
  }

  // optional double current_speed = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_current_speed(), target);
  }

  // optional double acceleration_reference = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_reference(), target);
  }

  // optional double current_acceleration = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_current_acceleration(), target);
  }

  // optional double acceleration_error = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_jerk_reference(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double current_jerk = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_current_jerk(), target);
  }

  // optional double jerk_error = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_jerk_error(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.common.TrajectoryPoint current_matched_point = 32;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::current_matched_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_reference_point = 33;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::current_reference_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint preview_reference_point = 34;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::preview_reference_point(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double acceleration_lookup_limit = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_acceleration_lookup_limit(), target);
  }

  // optional double vehicle_pitch = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_vehicle_pitch(), target);
  }

  // optional bool is_epb_brake = 37;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_is_epb_brake(), target);
  }

  // optional double current_steer_interval = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_current_steer_interval(), target);
  }

  // optional bool is_wait_steer = 39;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_is_wait_steer(), target);
  }

  // optional bool is_stop_reason_by_destination = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_is_stop_reason_by_destination(), target);
  }

  // optional bool is_stop_reason_by_prdestrian = 41;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_is_stop_reason_by_prdestrian(), target);
  }

  // optional bool is_full_stop_soft = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_is_full_stop_soft(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string control_task_name = 43;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_control_task_name().data(), static_cast<int>(this->_internal_control_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.SimpleLongitudinalPlusDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_control_task_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double path_remain_add = 44;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_path_remain_add(), target);
  }

  // optional double max_path_remain_when_stopped = 45;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_max_path_remain_when_stopped(), target);
  }

  // optional bool form_go_to_full_stop = 46;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_form_go_to_full_stop(), target);
  }

  // optional bool begin_end_brake = 47;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_begin_end_brake(), target);
  }

  // optional double hillup_fullstop_brake_rate = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->_internal_hillup_fullstop_brake_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleLongitudinalPlusDebug)
  return target;
}

size_t SimpleLongitudinalPlusDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.SimpleLongitudinalPlusDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string control_task_name = 43;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_control_task_name());
    }

    // optional .control.common.TrajectoryPoint current_matched_point = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_matched_point_);
    }

    // optional .control.common.TrajectoryPoint current_reference_point = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_reference_point_);
    }

    // optional .control.common.TrajectoryPoint preview_reference_point = 34;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_reference_point_);
    }

    // optional double station_reference = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double station_error_limited = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double preview_station_error = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double speed_reference = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double speed_error = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limited = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_reference = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_error = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double preview_acceleration_reference = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd_closeloop = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double acceleration_lookup = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double speed_lookup = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double calibration_value = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double brake_cmd = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double slope_offset_compensation = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double current_station = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double path_remain = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 pid_saturation_status = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pid_saturation_status());
    }

    // optional int32 leadlag_saturation_status = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_leadlag_saturation_status());
    }

    // optional double speed_offset = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double current_speed = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_reference = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double current_acceleration = 27;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_error = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_reference = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double current_jerk = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double jerk_error = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup_limit = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double vehicle_pitch = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double current_steer_interval = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool is_epb_brake = 37;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool is_wait_steer = 39;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_stop_reason_by_destination = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_stop_reason_by_prdestrian = 41;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_full_stop_soft = 42;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool form_go_to_full_stop = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool begin_end_brake = 47;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional double path_remain_add = 44;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double max_path_remain_when_stopped = 45;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double hillup_fullstop_brake_rate = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLongitudinalPlusDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.SimpleLongitudinalPlusDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLongitudinalPlusDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleLongitudinalPlusDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.SimpleLongitudinalPlusDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.SimpleLongitudinalPlusDebug)
    MergeFrom(*source);
  }
}

void SimpleLongitudinalPlusDebug::MergeFrom(const SimpleLongitudinalPlusDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleLongitudinalPlusDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_current_matched_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_matched_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_current_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_reference_point());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_preview_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_preview_reference_point());
    }
    if (cached_has_bits & 0x00000010u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00000020u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00000040u) {
      station_error_limited_ = from.station_error_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      preview_station_error_ = from.preview_station_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      speed_reference_ = from.speed_reference_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_error_ = from.speed_error_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_controller_input_limited_ = from.speed_controller_input_limited_;
    }
    if (cached_has_bits & 0x00000800u) {
      preview_speed_reference_ = from.preview_speed_reference_;
    }
    if (cached_has_bits & 0x00001000u) {
      preview_speed_error_ = from.preview_speed_error_;
    }
    if (cached_has_bits & 0x00002000u) {
      preview_acceleration_reference_ = from.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x00004000u) {
      acceleration_cmd_closeloop_ = from.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x00008000u) {
      acceleration_cmd_ = from.acceleration_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      acceleration_lookup_ = from.acceleration_lookup_;
    }
    if (cached_has_bits & 0x00020000u) {
      speed_lookup_ = from.speed_lookup_;
    }
    if (cached_has_bits & 0x00040000u) {
      calibration_value_ = from.calibration_value_;
    }
    if (cached_has_bits & 0x00080000u) {
      throttle_cmd_ = from.throttle_cmd_;
    }
    if (cached_has_bits & 0x00100000u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00200000u) {
      slope_offset_compensation_ = from.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x00400000u) {
      current_station_ = from.current_station_;
    }
    if (cached_has_bits & 0x00800000u) {
      path_remain_ = from.path_remain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      pid_saturation_status_ = from.pid_saturation_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      leadlag_saturation_status_ = from.leadlag_saturation_status_;
    }
    if (cached_has_bits & 0x04000000u) {
      speed_offset_ = from.speed_offset_;
    }
    if (cached_has_bits & 0x08000000u) {
      current_speed_ = from.current_speed_;
    }
    if (cached_has_bits & 0x10000000u) {
      acceleration_reference_ = from.acceleration_reference_;
    }
    if (cached_has_bits & 0x20000000u) {
      current_acceleration_ = from.current_acceleration_;
    }
    if (cached_has_bits & 0x40000000u) {
      acceleration_error_ = from.acceleration_error_;
    }
    if (cached_has_bits & 0x80000000u) {
      jerk_reference_ = from.jerk_reference_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      current_jerk_ = from.current_jerk_;
    }
    if (cached_has_bits & 0x00000002u) {
      jerk_error_ = from.jerk_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      acceleration_lookup_limit_ = from.acceleration_lookup_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      vehicle_pitch_ = from.vehicle_pitch_;
    }
    if (cached_has_bits & 0x00000010u) {
      current_steer_interval_ = from.current_steer_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_full_stop_ = from.is_full_stop_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_epb_brake_ = from.is_epb_brake_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_wait_steer_ = from.is_wait_steer_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_stop_reason_by_destination_ = from.is_stop_reason_by_destination_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_stop_reason_by_prdestrian_ = from.is_stop_reason_by_prdestrian_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_full_stop_soft_ = from.is_full_stop_soft_;
    }
    if (cached_has_bits & 0x00000800u) {
      form_go_to_full_stop_ = from.form_go_to_full_stop_;
    }
    if (cached_has_bits & 0x00001000u) {
      begin_end_brake_ = from.begin_end_brake_;
    }
    if (cached_has_bits & 0x00002000u) {
      path_remain_add_ = from.path_remain_add_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_path_remain_when_stopped_ = from.max_path_remain_when_stopped_;
    }
    if (cached_has_bits & 0x00008000u) {
      hillup_fullstop_brake_rate_ = from.hillup_fullstop_brake_rate_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SimpleLongitudinalPlusDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.SimpleLongitudinalPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLongitudinalPlusDebug::CopyFrom(const SimpleLongitudinalPlusDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleLongitudinalPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalPlusDebug::IsInitialized() const {
  return true;
}

void SimpleLongitudinalPlusDebug::InternalSwap(SimpleLongitudinalPlusDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  control_task_name_.Swap(&other->control_task_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, hillup_fullstop_brake_rate_)
      + sizeof(SimpleLongitudinalPlusDebug::hillup_fullstop_brake_rate_)
      - PROTOBUF_FIELD_OFFSET(SimpleLongitudinalPlusDebug, current_matched_point_)>(
          reinterpret_cast<char*>(&current_matched_point_),
          reinterpret_cast<char*>(&other->current_matched_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLongitudinalPlusDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleLateralPlusDebug::InitAsDefaultInstance() {
  ::control::_SimpleLateralPlusDebug_default_instance_._instance.get_mutable()->current_target_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleLateralPlusDebug_default_instance_._instance.get_mutable()->steer_mrac_debug_ = const_cast< ::control::MracDebug*>(
      ::control::MracDebug::internal_default_instance());
  ::control::_SimpleLateralPlusDebug_default_instance_._instance.get_mutable()->lat_control_check_debug_ = const_cast< ::control::ControlCheckDebug*>(
      ::control::ControlCheckDebug::internal_default_instance());
}
class SimpleLateralPlusDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLateralPlusDebug>()._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_lateral_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ref_heading_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_heading_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ref_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_heading_error_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ref_heading_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_heading_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_heading_error_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_lateral_error_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_heading_error_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::control::common::TrajectoryPoint& current_target_point(const SimpleLateralPlusDebug* msg);
  static void set_has_current_target_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steer_angle_feedback_augment(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::control::MracDebug& steer_mrac_debug(const SimpleLateralPlusDebug* msg);
  static void set_has_steer_mrac_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steer_mrac_enable_status(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_lateral_centripetal_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_control_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::ControlCheckDebug& lat_control_check_debug(const SimpleLateralPlusDebug* msg);
  static void set_has_lat_control_check_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_efai_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ed_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
};

const ::control::common::TrajectoryPoint&
SimpleLateralPlusDebug::_Internal::current_target_point(const SimpleLateralPlusDebug* msg) {
  return *msg->current_target_point_;
}
const ::control::MracDebug&
SimpleLateralPlusDebug::_Internal::steer_mrac_debug(const SimpleLateralPlusDebug* msg) {
  return *msg->steer_mrac_debug_;
}
const ::control::ControlCheckDebug&
SimpleLateralPlusDebug::_Internal::lat_control_check_debug(const SimpleLateralPlusDebug* msg) {
  return *msg->lat_control_check_debug_;
}
void SimpleLateralPlusDebug::clear_current_target_point() {
  if (current_target_point_ != nullptr) current_target_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleLateralPlusDebug::clear_steer_mrac_debug() {
  if (steer_mrac_debug_ != nullptr) steer_mrac_debug_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SimpleLateralPlusDebug::SimpleLateralPlusDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleLateralPlusDebug)
}
SimpleLateralPlusDebug::SimpleLateralPlusDebug(const SimpleLateralPlusDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_control_task_name()) {
    control_task_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_control_task_name(),
      GetArena());
  }
  if (from._internal_has_current_target_point()) {
    current_target_point_ = new ::control::common::TrajectoryPoint(*from.current_target_point_);
  } else {
    current_target_point_ = nullptr;
  }
  if (from._internal_has_steer_mrac_debug()) {
    steer_mrac_debug_ = new ::control::MracDebug(*from.steer_mrac_debug_);
  } else {
    steer_mrac_debug_ = nullptr;
  }
  if (from._internal_has_lat_control_check_debug()) {
    lat_control_check_debug_ = new ::control::ControlCheckDebug(*from.lat_control_check_debug_);
  } else {
    lat_control_check_debug_ = nullptr;
  }
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_mrac_enable_status_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(steer_mrac_enable_status_));
  // @@protoc_insertion_point(copy_constructor:control.SimpleLateralPlusDebug)
}

void SimpleLateralPlusDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_target_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_mrac_enable_status_) -
      reinterpret_cast<char*>(&current_target_point_)) + sizeof(steer_mrac_enable_status_));
}

SimpleLateralPlusDebug::~SimpleLateralPlusDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleLateralPlusDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleLateralPlusDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  control_task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_target_point_;
  if (this != internal_default_instance()) delete steer_mrac_debug_;
  if (this != internal_default_instance()) delete lat_control_check_debug_;
}

void SimpleLateralPlusDebug::ArenaDtor(void* object) {
  SimpleLateralPlusDebug* _this = reinterpret_cast< SimpleLateralPlusDebug* >(object);
  (void)_this;
}
void SimpleLateralPlusDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleLateralPlusDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleLateralPlusDebug& SimpleLateralPlusDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleLateralPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void SimpleLateralPlusDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleLateralPlusDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_target_point_ != nullptr);
      current_target_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(steer_mrac_debug_ != nullptr);
      steer_mrac_debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lat_control_check_debug_ != nullptr);
      lat_control_check_debug_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_error_) -
        reinterpret_cast<char*>(&lateral_error_)) + sizeof(heading_error_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&heading_error_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_heading_contribution_) -
        reinterpret_cast<char*>(&heading_error_rate_)) + sizeof(steer_angle_heading_contribution_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&steer_angle_heading_rate_contribution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ref_heading_rate_) -
        reinterpret_cast<char*>(&steer_angle_heading_rate_contribution_)) + sizeof(ref_heading_rate_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&heading_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lateral_error_feedback_) -
        reinterpret_cast<char*>(&heading_rate_)) + sizeof(lateral_error_feedback_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&heading_error_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_mrac_enable_status_) -
        reinterpret_cast<char*>(&heading_error_feedback_)) + sizeof(steer_mrac_enable_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLateralPlusDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lateral_error(&_has_bits_);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ref_heading(&_has_bits_);
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&_has_bits_);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading_error(&_has_bits_);
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&_has_bits_);
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&_has_bits_);
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_curvature(&_has_bits_);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steer_angle(&_has_bits_);
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&_has_bits_);
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&_has_bits_);
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&_has_bits_);
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&_has_bits_);
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&_has_bits_);
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&_has_bits_);
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_steering_position(&_has_bits_);
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_ref_speed(&_has_bits_);
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&_has_bits_);
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_acceleration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lateral_acceleration(&_has_bits_);
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_jerk = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_lateral_jerk(&_has_bits_);
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_rate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_ref_heading_rate(&_has_bits_);
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_rate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_heading_rate(&_has_bits_);
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_acceleration = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_ref_heading_acceleration(&_has_bits_);
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_acceleration = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_heading_acceleration(&_has_bits_);
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_acceleration = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_heading_error_acceleration(&_has_bits_);
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_jerk = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_ref_heading_jerk(&_has_bits_);
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_jerk = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_heading_jerk(&_has_bits_);
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_jerk = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_heading_error_jerk(&_has_bits_);
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_feedback = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_lateral_error_feedback(&_has_bits_);
          lateral_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_feedback = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_heading_error_feedback(&_has_bits_);
          heading_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_target_point = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_target_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback_augment = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_steer_angle_feedback_augment(&_has_bits_);
          steer_angle_feedback_augment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.MracDebug steer_mrac_debug = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_mrac_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steer_mrac_enable_status = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steer_mrac_enable_status(&_has_bits_);
          steer_mrac_enable_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lateral_centripetal_acceleration = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lateral_centripetal_acceleration(&_has_bits_);
          lateral_centripetal_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string control_task_name = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_control_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.SimpleLateralPlusDebug.control_task_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.ControlCheckDebug lat_control_check_debug = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_control_check_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double efai_rate = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_efai_rate(&_has_bits_);
          efai_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ed_rate = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ed_rate(&_has_bits_);
          ed_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleLateralPlusDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleLateralPlusDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // optional double lateral_acceleration = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lateral_acceleration(), target);
  }

  // optional double lateral_jerk = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 25;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 26;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 27;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_heading_error_jerk(), target);
  }

  // optional double lateral_error_feedback = 28;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_lateral_error_feedback(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double heading_error_feedback = 29;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_heading_error_feedback(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.common.TrajectoryPoint current_target_point = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::current_target_point(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double steer_angle_feedback_augment = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_angle_feedback_augment(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.MracDebug steer_mrac_debug = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::steer_mrac_debug(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool steer_mrac_enable_status = 33;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_steer_mrac_enable_status(), target);
  }

  // optional double lateral_centripetal_acceleration = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_lateral_centripetal_acceleration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string control_task_name = 35;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_control_task_name().data(), static_cast<int>(this->_internal_control_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.SimpleLateralPlusDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_control_task_name(), target);
  }

  // optional .control.ControlCheckDebug lat_control_check_debug = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::lat_control_check_debug(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double efai_rate = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_efai_rate(), target);
  }

  // optional double ed_rate = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_ed_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleLateralPlusDebug)
  return target;
}

size_t SimpleLateralPlusDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.SimpleLateralPlusDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string control_task_name = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_control_task_name());
    }

    // optional .control.common.TrajectoryPoint current_target_point = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_target_point_);
    }

    // optional .control.MracDebug steer_mrac_debug = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steer_mrac_debug_);
    }

    // optional .control.ControlCheckDebug lat_control_check_debug = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_control_check_debug_);
    }

    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_acceleration = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_jerk = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_rate = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double heading_rate = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_acceleration = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_acceleration = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_acceleration = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_jerk = 25;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_jerk = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_jerk = 27;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_error_feedback = 28;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional double heading_error_feedback = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedback_augment = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double lateral_centripetal_acceleration = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double efai_rate = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double ed_rate = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional bool steer_mrac_enable_status = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLateralPlusDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.SimpleLateralPlusDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLateralPlusDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleLateralPlusDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.SimpleLateralPlusDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.SimpleLateralPlusDebug)
    MergeFrom(*source);
  }
}

void SimpleLateralPlusDebug::MergeFrom(const SimpleLateralPlusDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleLateralPlusDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_current_target_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_target_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_steer_mrac_debug()->::control::MracDebug::MergeFrom(from._internal_steer_mrac_debug());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lat_control_check_debug()->::control::ControlCheckDebug::MergeFrom(from._internal_lat_control_check_debug());
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_error_ = from.heading_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_ = from.steer_angle_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00008000u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00020000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00040000u) {
      steering_position_ = from.steering_position_;
    }
    if (cached_has_bits & 0x00080000u) {
      ref_speed_ = from.ref_speed_;
    }
    if (cached_has_bits & 0x00100000u) {
      steer_angle_limited_ = from.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00200000u) {
      lateral_acceleration_ = from.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00400000u) {
      lateral_jerk_ = from.lateral_jerk_;
    }
    if (cached_has_bits & 0x00800000u) {
      ref_heading_rate_ = from.ref_heading_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      heading_rate_ = from.heading_rate_;
    }
    if (cached_has_bits & 0x02000000u) {
      ref_heading_acceleration_ = from.ref_heading_acceleration_;
    }
    if (cached_has_bits & 0x04000000u) {
      heading_acceleration_ = from.heading_acceleration_;
    }
    if (cached_has_bits & 0x08000000u) {
      heading_error_acceleration_ = from.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x10000000u) {
      ref_heading_jerk_ = from.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x20000000u) {
      heading_jerk_ = from.heading_jerk_;
    }
    if (cached_has_bits & 0x40000000u) {
      heading_error_jerk_ = from.heading_error_jerk_;
    }
    if (cached_has_bits & 0x80000000u) {
      lateral_error_feedback_ = from.lateral_error_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      heading_error_feedback_ = from.heading_error_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_angle_feedback_augment_ = from.steer_angle_feedback_augment_;
    }
    if (cached_has_bits & 0x00000004u) {
      lateral_centripetal_acceleration_ = from.lateral_centripetal_acceleration_;
    }
    if (cached_has_bits & 0x00000008u) {
      efai_rate_ = from.efai_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      ed_rate_ = from.ed_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      steer_mrac_enable_status_ = from.steer_mrac_enable_status_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SimpleLateralPlusDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.SimpleLateralPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLateralPlusDebug::CopyFrom(const SimpleLateralPlusDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleLateralPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralPlusDebug::IsInitialized() const {
  return true;
}

void SimpleLateralPlusDebug::InternalSwap(SimpleLateralPlusDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  control_task_name_.Swap(&other->control_task_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, steer_mrac_enable_status_)
      + sizeof(SimpleLateralPlusDebug::steer_mrac_enable_status_)
      - PROTOBUF_FIELD_OFFSET(SimpleLateralPlusDebug, current_target_point_)>(
          reinterpret_cast<char*>(&current_target_point_),
          reinterpret_cast<char*>(&other->current_target_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLateralPlusDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleMPCPlusDebug::InitAsDefaultInstance() {
  ::control::_SimpleMPCPlusDebug_default_instance_._instance.get_mutable()->current_matched_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleMPCPlusDebug_default_instance_._instance.get_mutable()->current_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleMPCPlusDebug_default_instance_._instance.get_mutable()->preview_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
}
class SimpleMPCPlusDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleMPCPlusDebug>()._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_station_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_speed_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_steer_unconstrained_control_diff(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_steer_angle_feedforward_compensation(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_lateral_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ref_heading_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_heading_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ref_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_heading_error_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_ref_heading_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_heading_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_heading_error_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_acceleration_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_acceleration_error(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_jerk_reference(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_jerk_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_jerk_error(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_lateral_error_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_heading_error_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_steer_angle_feedback_augment(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::control::common::TrajectoryPoint& current_matched_point(const SimpleMPCPlusDebug* msg);
  static void set_has_current_matched_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::TrajectoryPoint& current_reference_point(const SimpleMPCPlusDebug* msg);
  static void set_has_current_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::common::TrajectoryPoint& preview_reference_point(const SimpleMPCPlusDebug* msg);
  static void set_has_preview_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preview_station_error(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_preview_speed_reference(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_preview_speed_error(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_preview_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_vehicle_pitch(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_slope_offset_compensation(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_path_remain(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_acceleration_lookup_offset(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_acceleration_vrf(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_control_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::control::common::TrajectoryPoint&
SimpleMPCPlusDebug::_Internal::current_matched_point(const SimpleMPCPlusDebug* msg) {
  return *msg->current_matched_point_;
}
const ::control::common::TrajectoryPoint&
SimpleMPCPlusDebug::_Internal::current_reference_point(const SimpleMPCPlusDebug* msg) {
  return *msg->current_reference_point_;
}
const ::control::common::TrajectoryPoint&
SimpleMPCPlusDebug::_Internal::preview_reference_point(const SimpleMPCPlusDebug* msg) {
  return *msg->preview_reference_point_;
}
void SimpleMPCPlusDebug::clear_current_matched_point() {
  if (current_matched_point_ != nullptr) current_matched_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleMPCPlusDebug::clear_current_reference_point() {
  if (current_reference_point_ != nullptr) current_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleMPCPlusDebug::clear_preview_reference_point() {
  if (preview_reference_point_ != nullptr) preview_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SimpleMPCPlusDebug::SimpleMPCPlusDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_q_updated_(arena),
  matrix_r_updated_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleMPCPlusDebug)
}
SimpleMPCPlusDebug::SimpleMPCPlusDebug(const SimpleMPCPlusDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matrix_q_updated_(from.matrix_q_updated_),
      matrix_r_updated_(from.matrix_r_updated_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_control_task_name()) {
    control_task_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_control_task_name(),
      GetArena());
  }
  if (from._internal_has_current_matched_point()) {
    current_matched_point_ = new ::control::common::TrajectoryPoint(*from.current_matched_point_);
  } else {
    current_matched_point_ = nullptr;
  }
  if (from._internal_has_current_reference_point()) {
    current_reference_point_ = new ::control::common::TrajectoryPoint(*from.current_reference_point_);
  } else {
    current_reference_point_ = nullptr;
  }
  if (from._internal_has_preview_reference_point()) {
    preview_reference_point_ = new ::control::common::TrajectoryPoint(*from.preview_reference_point_);
  } else {
    preview_reference_point_ = nullptr;
  }
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:control.SimpleMPCPlusDebug)
}

void SimpleMPCPlusDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_matched_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&current_matched_point_)) + sizeof(is_full_stop_));
}

SimpleMPCPlusDebug::~SimpleMPCPlusDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleMPCPlusDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleMPCPlusDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  control_task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_matched_point_;
  if (this != internal_default_instance()) delete current_reference_point_;
  if (this != internal_default_instance()) delete preview_reference_point_;
}

void SimpleMPCPlusDebug::ArenaDtor(void* object) {
  SimpleMPCPlusDebug* _this = reinterpret_cast< SimpleMPCPlusDebug* >(object);
  (void)_this;
}
void SimpleMPCPlusDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleMPCPlusDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleMPCPlusDebug& SimpleMPCPlusDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleMPCPlusDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void SimpleMPCPlusDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleMPCPlusDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_updated_.Clear();
  matrix_r_updated_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_matched_point_ != nullptr);
      current_matched_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(current_reference_point_ != nullptr);
      current_reference_point_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(preview_reference_point_ != nullptr);
      preview_reference_point_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_error_) -
        reinterpret_cast<char*>(&lateral_error_)) + sizeof(heading_error_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&heading_error_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_heading_contribution_) -
        reinterpret_cast<char*>(&heading_error_rate_)) + sizeof(steer_angle_heading_contribution_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&steer_angle_heading_rate_contribution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_reference_) -
        reinterpret_cast<char*>(&steer_angle_heading_rate_contribution_)) + sizeof(speed_reference_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&speed_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_lookup_) -
        reinterpret_cast<char*>(&speed_error_)) + sizeof(speed_lookup_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&calibration_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ref_heading_acceleration_) -
        reinterpret_cast<char*>(&calibration_value_)) + sizeof(ref_heading_acceleration_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&heading_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jerk_reference_) -
        reinterpret_cast<char*>(&heading_acceleration_)) + sizeof(jerk_reference_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&jerk_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_speed_error_) -
        reinterpret_cast<char*>(&jerk_feedback_)) + sizeof(preview_speed_error_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&preview_acceleration_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_full_stop_) -
        reinterpret_cast<char*>(&preview_acceleration_reference_)) + sizeof(is_full_stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleMPCPlusDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lateral_error(&_has_bits_);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ref_heading(&_has_bits_);
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&_has_bits_);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading_error(&_has_bits_);
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&_has_bits_);
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&_has_bits_);
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_curvature(&_has_bits_);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steer_angle(&_has_bits_);
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&_has_bits_);
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&_has_bits_);
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&_has_bits_);
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&_has_bits_);
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&_has_bits_);
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&_has_bits_);
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_steering_position(&_has_bits_);
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_ref_speed(&_has_bits_);
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&_has_bits_);
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_reference = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_station_reference(&_has_bits_);
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_station_error(&_has_bits_);
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_reference = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_speed_reference(&_has_bits_);
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_error = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_speed_error(&_has_bits_);
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_reference = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_acceleration_reference(&_has_bits_);
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_full_stop(&_has_bits_);
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double station_feedback = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_station_feedback(&_has_bits_);
          station_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_feedback = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_speed_feedback(&_has_bits_);
          speed_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_acceleration_cmd_closeloop(&_has_bits_);
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_acceleration_cmd(&_has_bits_);
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_acceleration_lookup(&_has_bits_);
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_lookup = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_speed_lookup(&_has_bits_);
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double calibration_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_calibration_value(&_has_bits_);
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_unconstrained_control_diff = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_steer_unconstrained_control_diff(&_has_bits_);
          steer_unconstrained_control_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward_compensation = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_steer_angle_feedforward_compensation(&_has_bits_);
          steer_angle_feedforward_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_q_updated = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_q_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<265>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q_updated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_r_updated = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_r_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<273>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_r_updated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lateral_acceleration = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lateral_acceleration(&_has_bits_);
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_jerk = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lateral_jerk(&_has_bits_);
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_rate = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ref_heading_rate(&_has_bits_);
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_rate = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_heading_rate(&_has_bits_);
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_acceleration = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_ref_heading_acceleration(&_has_bits_);
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_acceleration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_heading_acceleration(&_has_bits_);
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_acceleration = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_heading_error_acceleration(&_has_bits_);
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_jerk = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_ref_heading_jerk(&_has_bits_);
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_jerk = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_heading_jerk(&_has_bits_);
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_jerk = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_heading_error_jerk(&_has_bits_);
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_feedback = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_acceleration_feedback(&_has_bits_);
          acceleration_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_error = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_acceleration_error(&_has_bits_);
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_reference = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_jerk_reference(&_has_bits_);
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_feedback = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_jerk_feedback(&_has_bits_);
          jerk_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_error = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_jerk_error(&_has_bits_);
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_feedback = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lateral_error_feedback(&_has_bits_);
          lateral_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_feedback = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_heading_error_feedback(&_has_bits_);
          heading_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback_augment = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_steer_angle_feedback_augment(&_has_bits_);
          steer_angle_feedback_augment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_matched_point = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_matched_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_reference_point = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint preview_reference_point = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double preview_station_error = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_preview_station_error(&_has_bits_);
          preview_station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_reference = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_preview_speed_reference(&_has_bits_);
          preview_speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_error = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_preview_speed_error(&_has_bits_);
          preview_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_acceleration_reference = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_preview_acceleration_reference(&_has_bits_);
          preview_acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_pitch = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_vehicle_pitch(&_has_bits_);
          vehicle_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double slope_offset_compensation = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_slope_offset_compensation(&_has_bits_);
          slope_offset_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_remain = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_path_remain(&_has_bits_);
          path_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup_offset = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_acceleration_lookup_offset(&_has_bits_);
          acceleration_lookup_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_vrf = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_acceleration_vrf(&_has_bits_);
          acceleration_vrf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string control_task_name = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_control_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.SimpleMPCPlusDebug.control_task_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleMPCPlusDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleMPCPlusDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // optional double station_reference = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_station_reference(), target);
  }

  // optional double station_error = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_station_error(), target);
  }

  // optional double speed_reference = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_speed_error(), target);
  }

  // optional double acceleration_reference = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_acceleration_reference(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_full_stop = 23;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_is_full_stop(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double station_feedback = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_station_feedback(), target);
  }

  // optional double speed_feedback = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_speed_feedback(), target);
  }

  // optional double acceleration_cmd_closeloop = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_speed_lookup(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double calibration_value = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_calibration_value(), target);
  }

  // optional double steer_unconstrained_control_diff = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_unconstrained_control_diff(), target);
  }

  // optional double steer_angle_feedforward_compensation = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_steer_angle_feedforward_compensation(), target);
  }

  // repeated double matrix_q_updated = 33;
  for (int i = 0, n = this->_internal_matrix_q_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_matrix_q_updated(i), target);
  }

  // repeated double matrix_r_updated = 34;
  for (int i = 0, n = this->_internal_matrix_r_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_matrix_r_updated(i), target);
  }

  // optional double lateral_acceleration = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_lateral_acceleration(), target);
  }

  // optional double lateral_jerk = 36;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 38;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 39;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 41;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 43;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 44;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_heading_error_jerk(), target);
  }

  // optional double acceleration_feedback = 45;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_acceleration_feedback(), target);
  }

  // optional double acceleration_error = 46;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 47;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_jerk_reference(), target);
  }

  // optional double jerk_feedback = 48;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->_internal_jerk_feedback(), target);
  }

  // optional double jerk_error = 49;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_jerk_error(), target);
  }

  // optional double lateral_error_feedback = 50;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_lateral_error_feedback(), target);
  }

  // optional double heading_error_feedback = 51;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_heading_error_feedback(), target);
  }

  // optional double steer_angle_feedback_augment = 52;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(52, this->_internal_steer_angle_feedback_augment(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.common.TrajectoryPoint current_matched_point = 53;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::current_matched_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_reference_point = 54;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::current_reference_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint preview_reference_point = 55;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::preview_reference_point(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double preview_station_error = 56;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(56, this->_internal_preview_station_error(), target);
  }

  // optional double preview_speed_reference = 57;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(57, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 58;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(58, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 59;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(59, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double vehicle_pitch = 60;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(60, this->_internal_vehicle_pitch(), target);
  }

  // optional double slope_offset_compensation = 61;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(61, this->_internal_slope_offset_compensation(), target);
  }

  // optional double path_remain = 62;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(62, this->_internal_path_remain(), target);
  }

  // optional double acceleration_lookup_offset = 63;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(63, this->_internal_acceleration_lookup_offset(), target);
  }

  // optional double acceleration_vrf = 64;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(64, this->_internal_acceleration_vrf(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string control_task_name = 65;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_control_task_name().data(), static_cast<int>(this->_internal_control_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.SimpleMPCPlusDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(
        65, this->_internal_control_task_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleMPCPlusDebug)
  return target;
}

size_t SimpleMPCPlusDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.SimpleMPCPlusDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q_updated = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_q_updated_size());
    total_size += data_size;
  }

  // repeated double matrix_r_updated = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_r_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_r_updated_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string control_task_name = 65;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_control_task_name());
    }

    // optional .control.common.TrajectoryPoint current_matched_point = 53;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_matched_point_);
    }

    // optional .control.common.TrajectoryPoint current_reference_point = 54;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_reference_point_);
    }

    // optional .control.common.TrajectoryPoint preview_reference_point = 55;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_reference_point_);
    }

    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double station_reference = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double station_error = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double speed_reference = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double speed_error = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_reference = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double station_feedback = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double speed_feedback = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd_closeloop = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd = 27;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double speed_lookup = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double calibration_value = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double steer_unconstrained_control_diff = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedforward_compensation = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double lateral_acceleration = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double lateral_jerk = 36;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_rate = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double heading_rate = 38;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_acceleration = 39;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading_acceleration = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_acceleration = 41;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_jerk = 42;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double heading_jerk = 43;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_jerk = 44;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_feedback = 45;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_error = 46;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_reference = 47;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double jerk_feedback = 48;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_error = 49;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_error_feedback = 50;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_feedback = 51;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedback_augment = 52;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double preview_station_error = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double preview_speed_reference = 57;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double preview_speed_error = 58;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional double preview_acceleration_reference = 59;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double vehicle_pitch = 60;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double slope_offset_compensation = 61;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double path_remain = 62;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup_offset = 63;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_vrf = 64;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 23;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleMPCPlusDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.SimpleMPCPlusDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleMPCPlusDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleMPCPlusDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.SimpleMPCPlusDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.SimpleMPCPlusDebug)
    MergeFrom(*source);
  }
}

void SimpleMPCPlusDebug::MergeFrom(const SimpleMPCPlusDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleMPCPlusDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_updated_.MergeFrom(from.matrix_q_updated_);
  matrix_r_updated_.MergeFrom(from.matrix_r_updated_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_current_matched_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_matched_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_current_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_reference_point());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_preview_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_preview_reference_point());
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_error_ = from.heading_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_ = from.steer_angle_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00008000u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00020000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00040000u) {
      steering_position_ = from.steering_position_;
    }
    if (cached_has_bits & 0x00080000u) {
      ref_speed_ = from.ref_speed_;
    }
    if (cached_has_bits & 0x00100000u) {
      steer_angle_limited_ = from.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00200000u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00400000u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00800000u) {
      speed_reference_ = from.speed_reference_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      speed_error_ = from.speed_error_;
    }
    if (cached_has_bits & 0x02000000u) {
      acceleration_reference_ = from.acceleration_reference_;
    }
    if (cached_has_bits & 0x04000000u) {
      station_feedback_ = from.station_feedback_;
    }
    if (cached_has_bits & 0x08000000u) {
      speed_feedback_ = from.speed_feedback_;
    }
    if (cached_has_bits & 0x10000000u) {
      acceleration_cmd_closeloop_ = from.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x20000000u) {
      acceleration_cmd_ = from.acceleration_cmd_;
    }
    if (cached_has_bits & 0x40000000u) {
      acceleration_lookup_ = from.acceleration_lookup_;
    }
    if (cached_has_bits & 0x80000000u) {
      speed_lookup_ = from.speed_lookup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      calibration_value_ = from.calibration_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_unconstrained_control_diff_ = from.steer_unconstrained_control_diff_;
    }
    if (cached_has_bits & 0x00000004u) {
      steer_angle_feedforward_compensation_ = from.steer_angle_feedforward_compensation_;
    }
    if (cached_has_bits & 0x00000008u) {
      lateral_acceleration_ = from.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_jerk_ = from.lateral_jerk_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_heading_rate_ = from.ref_heading_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_rate_ = from.heading_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      ref_heading_acceleration_ = from.ref_heading_acceleration_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      heading_acceleration_ = from.heading_acceleration_;
    }
    if (cached_has_bits & 0x00000200u) {
      heading_error_acceleration_ = from.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      ref_heading_jerk_ = from.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x00000800u) {
      heading_jerk_ = from.heading_jerk_;
    }
    if (cached_has_bits & 0x00001000u) {
      heading_error_jerk_ = from.heading_error_jerk_;
    }
    if (cached_has_bits & 0x00002000u) {
      acceleration_feedback_ = from.acceleration_feedback_;
    }
    if (cached_has_bits & 0x00004000u) {
      acceleration_error_ = from.acceleration_error_;
    }
    if (cached_has_bits & 0x00008000u) {
      jerk_reference_ = from.jerk_reference_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      jerk_feedback_ = from.jerk_feedback_;
    }
    if (cached_has_bits & 0x00020000u) {
      jerk_error_ = from.jerk_error_;
    }
    if (cached_has_bits & 0x00040000u) {
      lateral_error_feedback_ = from.lateral_error_feedback_;
    }
    if (cached_has_bits & 0x00080000u) {
      heading_error_feedback_ = from.heading_error_feedback_;
    }
    if (cached_has_bits & 0x00100000u) {
      steer_angle_feedback_augment_ = from.steer_angle_feedback_augment_;
    }
    if (cached_has_bits & 0x00200000u) {
      preview_station_error_ = from.preview_station_error_;
    }
    if (cached_has_bits & 0x00400000u) {
      preview_speed_reference_ = from.preview_speed_reference_;
    }
    if (cached_has_bits & 0x00800000u) {
      preview_speed_error_ = from.preview_speed_error_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      preview_acceleration_reference_ = from.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x02000000u) {
      vehicle_pitch_ = from.vehicle_pitch_;
    }
    if (cached_has_bits & 0x04000000u) {
      slope_offset_compensation_ = from.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x08000000u) {
      path_remain_ = from.path_remain_;
    }
    if (cached_has_bits & 0x10000000u) {
      acceleration_lookup_offset_ = from.acceleration_lookup_offset_;
    }
    if (cached_has_bits & 0x20000000u) {
      acceleration_vrf_ = from.acceleration_vrf_;
    }
    if (cached_has_bits & 0x40000000u) {
      is_full_stop_ = from.is_full_stop_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SimpleMPCPlusDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.SimpleMPCPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMPCPlusDebug::CopyFrom(const SimpleMPCPlusDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleMPCPlusDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCPlusDebug::IsInitialized() const {
  return true;
}

void SimpleMPCPlusDebug::InternalSwap(SimpleMPCPlusDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  matrix_q_updated_.InternalSwap(&other->matrix_q_updated_);
  matrix_r_updated_.InternalSwap(&other->matrix_r_updated_);
  control_task_name_.Swap(&other->control_task_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, is_full_stop_)
      + sizeof(SimpleMPCPlusDebug::is_full_stop_)
      - PROTOBUF_FIELD_OFFSET(SimpleMPCPlusDebug, current_matched_point_)>(
          reinterpret_cast<char*>(&current_matched_point_),
          reinterpret_cast<char*>(&other->current_matched_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMPCPlusDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlCheckDebug::InitAsDefaultInstance() {
}
class ControlCheckDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCheckDebug>()._has_bits_);
  static void set_has_lateral_error_check_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lateral_error_check_e_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lateral_error_check_w_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading_error_check_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_error_check_e_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_error_check_w_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_station_error_check_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_station_error_check_e_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_station_error_check_w_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed_error_check_result(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speed_error_check_e_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_speed_error_check_w_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lateral_error_e(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lateral_error_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

ControlCheckDebug::ControlCheckDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.ControlCheckDebug)
}
ControlCheckDebug::ControlCheckDebug(const ControlCheckDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lateral_error_check_result_, &from.lateral_error_check_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&lateral_error_w_) -
    reinterpret_cast<char*>(&lateral_error_check_result_)) + sizeof(lateral_error_w_));
  // @@protoc_insertion_point(copy_constructor:control.ControlCheckDebug)
}

void ControlCheckDebug::SharedCtor() {
  ::memset(&lateral_error_check_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lateral_error_w_) -
      reinterpret_cast<char*>(&lateral_error_check_result_)) + sizeof(lateral_error_w_));
}

ControlCheckDebug::~ControlCheckDebug() {
  // @@protoc_insertion_point(destructor:control.ControlCheckDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlCheckDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlCheckDebug::ArenaDtor(void* object) {
  ControlCheckDebug* _this = reinterpret_cast< ControlCheckDebug* >(object);
  (void)_this;
}
void ControlCheckDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCheckDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlCheckDebug& ControlCheckDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void ControlCheckDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.ControlCheckDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lateral_error_check_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&station_error_check_e_count_) -
        reinterpret_cast<char*>(&lateral_error_check_result_)) + sizeof(station_error_check_e_count_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&station_error_check_w_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lateral_error_w_) -
        reinterpret_cast<char*>(&station_error_check_w_count_)) + sizeof(lateral_error_w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCheckDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.ControlCheckStatus lateral_error_check_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::ControlCheckStatus_IsValid(val))) {
            _internal_set_lateral_error_check_result(static_cast<::control::ControlCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 lateral_error_check_e_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lateral_error_check_e_count(&has_bits);
          lateral_error_check_e_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lateral_error_check_w_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lateral_error_check_w_count(&has_bits);
          lateral_error_check_w_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.ControlCheckStatus heading_error_check_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::ControlCheckStatus_IsValid(val))) {
            _internal_set_heading_error_check_result(static_cast<::control::ControlCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 heading_error_check_e_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_heading_error_check_e_count(&has_bits);
          heading_error_check_e_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heading_error_check_w_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_heading_error_check_w_count(&has_bits);
          heading_error_check_w_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.ControlCheckStatus station_error_check_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::ControlCheckStatus_IsValid(val))) {
            _internal_set_station_error_check_result(static_cast<::control::ControlCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 station_error_check_e_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_station_error_check_e_count(&has_bits);
          station_error_check_e_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 station_error_check_w_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_station_error_check_w_count(&has_bits);
          station_error_check_w_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.ControlCheckStatus speed_error_check_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::ControlCheckStatus_IsValid(val))) {
            _internal_set_speed_error_check_result(static_cast<::control::ControlCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 speed_error_check_e_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_speed_error_check_e_count(&has_bits);
          speed_error_check_e_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 speed_error_check_w_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_speed_error_check_w_count(&has_bits);
          speed_error_check_w_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_e = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_lateral_error_e(&has_bits);
          lateral_error_e_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_w = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_lateral_error_w(&has_bits);
          lateral_error_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlCheckDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.ControlCheckDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.ControlCheckStatus lateral_error_check_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lateral_error_check_result(), target);
  }

  // optional uint32 lateral_error_check_e_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lateral_error_check_e_count(), target);
  }

  // optional uint32 lateral_error_check_w_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lateral_error_check_w_count(), target);
  }

  // optional .control.ControlCheckStatus heading_error_check_result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_heading_error_check_result(), target);
  }

  // optional uint32 heading_error_check_e_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heading_error_check_e_count(), target);
  }

  // optional uint32 heading_error_check_w_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_heading_error_check_w_count(), target);
  }

  // optional .control.ControlCheckStatus station_error_check_result = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_station_error_check_result(), target);
  }

  // optional uint32 station_error_check_e_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_station_error_check_e_count(), target);
  }

  // optional uint32 station_error_check_w_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_station_error_check_w_count(), target);
  }

  // optional .control.ControlCheckStatus speed_error_check_result = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_speed_error_check_result(), target);
  }

  // optional uint32 speed_error_check_e_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_speed_error_check_e_count(), target);
  }

  // optional uint32 speed_error_check_w_count = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_speed_error_check_w_count(), target);
  }

  // optional double lateral_error_e = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_lateral_error_e(), target);
  }

  // optional double lateral_error_w = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_lateral_error_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.ControlCheckDebug)
  return target;
}

size_t ControlCheckDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.ControlCheckDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.ControlCheckStatus lateral_error_check_result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lateral_error_check_result());
    }

    // optional uint32 lateral_error_check_e_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lateral_error_check_e_count());
    }

    // optional uint32 lateral_error_check_w_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lateral_error_check_w_count());
    }

    // optional .control.ControlCheckStatus heading_error_check_result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_heading_error_check_result());
    }

    // optional uint32 heading_error_check_e_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heading_error_check_e_count());
    }

    // optional uint32 heading_error_check_w_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heading_error_check_w_count());
    }

    // optional .control.ControlCheckStatus station_error_check_result = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_station_error_check_result());
    }

    // optional uint32 station_error_check_e_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_station_error_check_e_count());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 station_error_check_w_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_station_error_check_w_count());
    }

    // optional .control.ControlCheckStatus speed_error_check_result = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_speed_error_check_result());
    }

    // optional uint32 speed_error_check_e_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_speed_error_check_e_count());
    }

    // optional uint32 speed_error_check_w_count = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_speed_error_check_w_count());
    }

    // optional double lateral_error_e = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_w = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlCheckDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.ControlCheckDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCheckDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlCheckDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.ControlCheckDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.ControlCheckDebug)
    MergeFrom(*source);
  }
}

void ControlCheckDebug::MergeFrom(const ControlCheckDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.ControlCheckDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lateral_error_check_result_ = from.lateral_error_check_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      lateral_error_check_e_count_ = from.lateral_error_check_e_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      lateral_error_check_w_count_ = from.lateral_error_check_w_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_error_check_result_ = from.heading_error_check_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_error_check_e_count_ = from.heading_error_check_e_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_error_check_w_count_ = from.heading_error_check_w_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      station_error_check_result_ = from.station_error_check_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      station_error_check_e_count_ = from.station_error_check_e_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      station_error_check_w_count_ = from.station_error_check_w_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_error_check_result_ = from.speed_error_check_result_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_error_check_e_count_ = from.speed_error_check_e_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      speed_error_check_w_count_ = from.speed_error_check_w_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      lateral_error_e_ = from.lateral_error_e_;
    }
    if (cached_has_bits & 0x00002000u) {
      lateral_error_w_ = from.lateral_error_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlCheckDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.ControlCheckDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCheckDebug::CopyFrom(const ControlCheckDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.ControlCheckDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCheckDebug::IsInitialized() const {
  return true;
}

void ControlCheckDebug::InternalSwap(ControlCheckDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCheckDebug, lateral_error_w_)
      + sizeof(ControlCheckDebug::lateral_error_w_)
      - PROTOBUF_FIELD_OFFSET(ControlCheckDebug, lateral_error_check_result_)>(
          reinterpret_cast<char*>(&lateral_error_check_result_),
          reinterpret_cast<char*>(&other->lateral_error_check_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCheckDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleAntiSlopeDebug::InitAsDefaultInstance() {
}
class SimpleAntiSlopeDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleAntiSlopeDebug>()._has_bits_);
  static void set_has_hill_start_window(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preview_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quit_hill_start_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_normal_start_tartget_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_hill_start_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_in_normal_start_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hill_start_acc_gain_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_normal_start_acc_gain_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_on_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_from_else_to_auto(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_previous_is_auto(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_anti_cmd_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_anti_cmd_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_uphill_too_fast(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_only_use_brk_downhill(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_erase_brk_in_go(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_erase_brk_in_end(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

SimpleAntiSlopeDebug::SimpleAntiSlopeDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleAntiSlopeDebug)
}
SimpleAntiSlopeDebug::SimpleAntiSlopeDebug(const SimpleAntiSlopeDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hill_start_window_, &from.hill_start_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&erase_brk_in_end_) -
    reinterpret_cast<char*>(&hill_start_window_)) + sizeof(erase_brk_in_end_));
  // @@protoc_insertion_point(copy_constructor:control.SimpleAntiSlopeDebug)
}

void SimpleAntiSlopeDebug::SharedCtor() {
  ::memset(&hill_start_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&erase_brk_in_end_) -
      reinterpret_cast<char*>(&hill_start_window_)) + sizeof(erase_brk_in_end_));
}

SimpleAntiSlopeDebug::~SimpleAntiSlopeDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleAntiSlopeDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleAntiSlopeDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimpleAntiSlopeDebug::ArenaDtor(void* object) {
  SimpleAntiSlopeDebug* _this = reinterpret_cast< SimpleAntiSlopeDebug* >(object);
  (void)_this;
}
void SimpleAntiSlopeDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleAntiSlopeDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleAntiSlopeDebug& SimpleAntiSlopeDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleAntiSlopeDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void SimpleAntiSlopeDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleAntiSlopeDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hill_start_window_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_normal_start_condition_) -
        reinterpret_cast<char*>(&hill_start_window_)) + sizeof(in_normal_start_condition_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&on_obstacle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&anti_cmd_throttle_) -
        reinterpret_cast<char*>(&on_obstacle_)) + sizeof(anti_cmd_throttle_));
  }
  erase_brk_in_end_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleAntiSlopeDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 hill_start_window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hill_start_window(&has_bits);
          hill_start_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 preview_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preview_length(&has_bits);
          preview_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double quit_hill_start_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_quit_hill_start_speed(&has_bits);
          quit_hill_start_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double normal_start_tartget_acc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_normal_start_tartget_acc(&has_bits);
          normal_start_tartget_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool in_hill_start_condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_in_hill_start_condition(&has_bits);
          in_hill_start_condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_normal_start_condition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_in_normal_start_condition(&has_bits);
          in_normal_start_condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double hill_start_acc_gain_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_hill_start_acc_gain_rate(&has_bits);
          hill_start_acc_gain_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double normal_start_acc_gain_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_normal_start_acc_gain_rate(&has_bits);
          normal_start_acc_gain_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool on_obstacle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_on_obstacle(&has_bits);
          on_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool from_else_to_auto = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_from_else_to_auto(&has_bits);
          from_else_to_auto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool previous_is_auto = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_previous_is_auto(&has_bits);
          previous_is_auto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double anti_cmd_brake = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_anti_cmd_brake(&has_bits);
          anti_cmd_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double anti_cmd_throttle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_anti_cmd_throttle(&has_bits);
          anti_cmd_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool uphill_too_fast = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_uphill_too_fast(&has_bits);
          uphill_too_fast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool only_use_brk_downhill = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_only_use_brk_downhill(&has_bits);
          only_use_brk_downhill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool erase_brk_in_go = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_erase_brk_in_go(&has_bits);
          erase_brk_in_go_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool erase_brk_in_end = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_erase_brk_in_end(&has_bits);
          erase_brk_in_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleAntiSlopeDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleAntiSlopeDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hill_start_window = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hill_start_window(), target);
  }

  // optional int32 preview_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_preview_length(), target);
  }

  // optional double quit_hill_start_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_quit_hill_start_speed(), target);
  }

  // optional double normal_start_tartget_acc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_normal_start_tartget_acc(), target);
  }

  // optional bool in_hill_start_condition = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_in_hill_start_condition(), target);
  }

  // optional bool in_normal_start_condition = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_in_normal_start_condition(), target);
  }

  // optional double hill_start_acc_gain_rate = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_hill_start_acc_gain_rate(), target);
  }

  // optional double normal_start_acc_gain_rate = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_normal_start_acc_gain_rate(), target);
  }

  // optional bool on_obstacle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_on_obstacle(), target);
  }

  // optional bool from_else_to_auto = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_from_else_to_auto(), target);
  }

  // optional bool previous_is_auto = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_previous_is_auto(), target);
  }

  // optional double anti_cmd_brake = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_anti_cmd_brake(), target);
  }

  // optional double anti_cmd_throttle = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_anti_cmd_throttle(), target);
  }

  // optional bool uphill_too_fast = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_uphill_too_fast(), target);
  }

  // optional bool only_use_brk_downhill = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_only_use_brk_downhill(), target);
  }

  // optional bool erase_brk_in_go = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_erase_brk_in_go(), target);
  }

  // optional bool erase_brk_in_end = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_erase_brk_in_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleAntiSlopeDebug)
  return target;
}

size_t SimpleAntiSlopeDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.SimpleAntiSlopeDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 hill_start_window = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hill_start_window());
    }

    // optional int32 preview_length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_preview_length());
    }

    // optional double quit_hill_start_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double normal_start_tartget_acc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double hill_start_acc_gain_rate = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double normal_start_acc_gain_rate = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool in_hill_start_condition = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool in_normal_start_condition = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool on_obstacle = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool from_else_to_auto = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool previous_is_auto = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool uphill_too_fast = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool only_use_brk_downhill = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool erase_brk_in_go = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional double anti_cmd_brake = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double anti_cmd_throttle = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  // optional bool erase_brk_in_end = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleAntiSlopeDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.SimpleAntiSlopeDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleAntiSlopeDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleAntiSlopeDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.SimpleAntiSlopeDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.SimpleAntiSlopeDebug)
    MergeFrom(*source);
  }
}

void SimpleAntiSlopeDebug::MergeFrom(const SimpleAntiSlopeDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleAntiSlopeDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hill_start_window_ = from.hill_start_window_;
    }
    if (cached_has_bits & 0x00000002u) {
      preview_length_ = from.preview_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      quit_hill_start_speed_ = from.quit_hill_start_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      normal_start_tartget_acc_ = from.normal_start_tartget_acc_;
    }
    if (cached_has_bits & 0x00000010u) {
      hill_start_acc_gain_rate_ = from.hill_start_acc_gain_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      normal_start_acc_gain_rate_ = from.normal_start_acc_gain_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      in_hill_start_condition_ = from.in_hill_start_condition_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_normal_start_condition_ = from.in_normal_start_condition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      on_obstacle_ = from.on_obstacle_;
    }
    if (cached_has_bits & 0x00000200u) {
      from_else_to_auto_ = from.from_else_to_auto_;
    }
    if (cached_has_bits & 0x00000400u) {
      previous_is_auto_ = from.previous_is_auto_;
    }
    if (cached_has_bits & 0x00000800u) {
      uphill_too_fast_ = from.uphill_too_fast_;
    }
    if (cached_has_bits & 0x00001000u) {
      only_use_brk_downhill_ = from.only_use_brk_downhill_;
    }
    if (cached_has_bits & 0x00002000u) {
      erase_brk_in_go_ = from.erase_brk_in_go_;
    }
    if (cached_has_bits & 0x00004000u) {
      anti_cmd_brake_ = from.anti_cmd_brake_;
    }
    if (cached_has_bits & 0x00008000u) {
      anti_cmd_throttle_ = from.anti_cmd_throttle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_erase_brk_in_end(from._internal_erase_brk_in_end());
  }
}

void SimpleAntiSlopeDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.SimpleAntiSlopeDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleAntiSlopeDebug::CopyFrom(const SimpleAntiSlopeDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleAntiSlopeDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAntiSlopeDebug::IsInitialized() const {
  return true;
}

void SimpleAntiSlopeDebug::InternalSwap(SimpleAntiSlopeDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, erase_brk_in_end_)
      + sizeof(SimpleAntiSlopeDebug::erase_brk_in_end_)
      - PROTOBUF_FIELD_OFFSET(SimpleAntiSlopeDebug, hill_start_window_)>(
          reinterpret_cast<char*>(&hill_start_window_),
          reinterpret_cast<char*>(&other->hill_start_window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleAntiSlopeDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleaningSafetyCheckDebug::InitAsDefaultInstance() {
  ::control::_CleaningSafetyCheckDebug_default_instance_._instance.get_mutable()->cleaning_control_check_debug_ = const_cast< ::control::ControlCheckDebug*>(
      ::control::ControlCheckDebug::internal_default_instance());
  ::control::_CleaningSafetyCheckDebug_default_instance_._instance.get_mutable()->current_predicted_end_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
}
class CleaningSafetyCheckDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<CleaningSafetyCheckDebug>()._has_bits_);
  static void set_has_control_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_need_post_command(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::ControlCheckDebug& cleaning_control_check_debug(const CleaningSafetyCheckDebug* msg);
  static void set_has_cleaning_control_check_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::TrajectoryPoint& current_predicted_end_point(const CleaningSafetyCheckDebug* msg);
  static void set_has_current_predicted_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_predicted_collsion(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_post_process_throttle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_post_process_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::control::ControlCheckDebug&
CleaningSafetyCheckDebug::_Internal::cleaning_control_check_debug(const CleaningSafetyCheckDebug* msg) {
  return *msg->cleaning_control_check_debug_;
}
const ::control::common::TrajectoryPoint&
CleaningSafetyCheckDebug::_Internal::current_predicted_end_point(const CleaningSafetyCheckDebug* msg) {
  return *msg->current_predicted_end_point_;
}
void CleaningSafetyCheckDebug::clear_current_predicted_end_point() {
  if (current_predicted_end_point_ != nullptr) current_predicted_end_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CleaningSafetyCheckDebug::clear_predicted_trajectory_point() {
  predicted_trajectory_point_.Clear();
}
CleaningSafetyCheckDebug::CleaningSafetyCheckDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predicted_trajectory_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.CleaningSafetyCheckDebug)
}
CleaningSafetyCheckDebug::CleaningSafetyCheckDebug(const CleaningSafetyCheckDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      predicted_trajectory_point_(from.predicted_trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_control_task_name()) {
    control_task_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_control_task_name(),
      GetArena());
  }
  if (from._internal_has_cleaning_control_check_debug()) {
    cleaning_control_check_debug_ = new ::control::ControlCheckDebug(*from.cleaning_control_check_debug_);
  } else {
    cleaning_control_check_debug_ = nullptr;
  }
  if (from._internal_has_current_predicted_end_point()) {
    current_predicted_end_point_ = new ::control::common::TrajectoryPoint(*from.current_predicted_end_point_);
  } else {
    current_predicted_end_point_ = nullptr;
  }
  ::memcpy(&post_process_throttle_cmd_, &from.post_process_throttle_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_predicted_collsion_) -
    reinterpret_cast<char*>(&post_process_throttle_cmd_)) + sizeof(is_predicted_collsion_));
  // @@protoc_insertion_point(copy_constructor:control.CleaningSafetyCheckDebug)
}

void CleaningSafetyCheckDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  control_task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cleaning_control_check_debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_predicted_collsion_) -
      reinterpret_cast<char*>(&cleaning_control_check_debug_)) + sizeof(is_predicted_collsion_));
}

CleaningSafetyCheckDebug::~CleaningSafetyCheckDebug() {
  // @@protoc_insertion_point(destructor:control.CleaningSafetyCheckDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CleaningSafetyCheckDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  control_task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cleaning_control_check_debug_;
  if (this != internal_default_instance()) delete current_predicted_end_point_;
}

void CleaningSafetyCheckDebug::ArenaDtor(void* object) {
  CleaningSafetyCheckDebug* _this = reinterpret_cast< CleaningSafetyCheckDebug* >(object);
  (void)_this;
}
void CleaningSafetyCheckDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleaningSafetyCheckDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleaningSafetyCheckDebug& CleaningSafetyCheckDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleaningSafetyCheckDebug_control_5fbase_2fcontrol_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void CleaningSafetyCheckDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.CleaningSafetyCheckDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicted_trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      control_task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cleaning_control_check_debug_ != nullptr);
      cleaning_control_check_debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(current_predicted_end_point_ != nullptr);
      current_predicted_end_point_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&post_process_throttle_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_predicted_collsion_) -
        reinterpret_cast<char*>(&post_process_throttle_cmd_)) + sizeof(is_predicted_collsion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleaningSafetyCheckDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string control_task_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_control_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.CleaningSafetyCheckDebug.control_task_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_need_post_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_need_post_command(&has_bits);
          is_need_post_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleaning_control_check_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_predicted_end_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predicted_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_predicted_collsion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_predicted_collsion(&has_bits);
          is_predicted_collsion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double post_process_throttle_cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_post_process_throttle_cmd(&has_bits);
          post_process_throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double post_process_brake_cmd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_post_process_brake_cmd(&has_bits);
          post_process_brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CleaningSafetyCheckDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.CleaningSafetyCheckDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string control_task_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_control_task_name().data(), static_cast<int>(this->_internal_control_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.CleaningSafetyCheckDebug.control_task_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_control_task_name(), target);
  }

  // optional bool is_need_post_command = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_need_post_command(), target);
  }

  // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cleaning_control_check_debug(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::current_predicted_end_point(this), target, stream);
  }

  // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predicted_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_predicted_trajectory_point(i), target, stream);
  }

  // optional bool is_predicted_collsion = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_predicted_collsion(), target);
  }

  // optional double post_process_throttle_cmd = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_post_process_throttle_cmd(), target);
  }

  // optional double post_process_brake_cmd = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_post_process_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.CleaningSafetyCheckDebug)
  return target;
}

size_t CleaningSafetyCheckDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.CleaningSafetyCheckDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.common.TrajectoryPoint predicted_trajectory_point = 5;
  total_size += 1UL * this->_internal_predicted_trajectory_point_size();
  for (const auto& msg : this->predicted_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string control_task_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_control_task_name());
    }

    // optional .control.ControlCheckDebug cleaning_control_check_debug = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cleaning_control_check_debug_);
    }

    // optional .control.common.TrajectoryPoint current_predicted_end_point = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_predicted_end_point_);
    }

    // optional double post_process_throttle_cmd = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double post_process_brake_cmd = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool is_need_post_command = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_predicted_collsion = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleaningSafetyCheckDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.CleaningSafetyCheckDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const CleaningSafetyCheckDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleaningSafetyCheckDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.CleaningSafetyCheckDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.CleaningSafetyCheckDebug)
    MergeFrom(*source);
  }
}

void CleaningSafetyCheckDebug::MergeFrom(const CleaningSafetyCheckDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.CleaningSafetyCheckDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predicted_trajectory_point_.MergeFrom(from.predicted_trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_control_task_name(from._internal_control_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cleaning_control_check_debug()->::control::ControlCheckDebug::MergeFrom(from._internal_cleaning_control_check_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_current_predicted_end_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_predicted_end_point());
    }
    if (cached_has_bits & 0x00000008u) {
      post_process_throttle_cmd_ = from.post_process_throttle_cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      post_process_brake_cmd_ = from.post_process_brake_cmd_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_need_post_command_ = from.is_need_post_command_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_predicted_collsion_ = from.is_predicted_collsion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleaningSafetyCheckDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.CleaningSafetyCheckDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleaningSafetyCheckDebug::CopyFrom(const CleaningSafetyCheckDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.CleaningSafetyCheckDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleaningSafetyCheckDebug::IsInitialized() const {
  return true;
}

void CleaningSafetyCheckDebug::InternalSwap(CleaningSafetyCheckDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predicted_trajectory_point_.InternalSwap(&other->predicted_trajectory_point_);
  control_task_name_.Swap(&other->control_task_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, is_predicted_collsion_)
      + sizeof(CleaningSafetyCheckDebug::is_predicted_collsion_)
      - PROTOBUF_FIELD_OFFSET(CleaningSafetyCheckDebug, cleaning_control_check_debug_)>(
          reinterpret_cast<char*>(&cleaning_control_check_debug_),
          reinterpret_cast<char*>(&other->cleaning_control_check_debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CleaningSafetyCheckDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::ControlDebugInfo* Arena::CreateMaybeMessage< ::control::ControlDebugInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::ControlDebugInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::control::SimpleLongitudinalPlusDebug* Arena::CreateMaybeMessage< ::control::SimpleLongitudinalPlusDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::SimpleLongitudinalPlusDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::SimpleLateralPlusDebug* Arena::CreateMaybeMessage< ::control::SimpleLateralPlusDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::SimpleLateralPlusDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::SimpleMPCPlusDebug* Arena::CreateMaybeMessage< ::control::SimpleMPCPlusDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::SimpleMPCPlusDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::ControlCheckDebug* Arena::CreateMaybeMessage< ::control::ControlCheckDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::ControlCheckDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::SimpleAntiSlopeDebug* Arena::CreateMaybeMessage< ::control::SimpleAntiSlopeDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::SimpleAntiSlopeDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::CleaningSafetyCheckDebug* Arena::CreateMaybeMessage< ::control::CleaningSafetyCheckDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::CleaningSafetyCheckDebug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

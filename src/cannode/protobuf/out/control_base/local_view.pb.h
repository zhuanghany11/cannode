// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/local_view.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flocal_5fview_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flocal_5fview_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs/chassis_msgs/chassis.pb.h"
#include "common_msgs/basic_msgs/header.pb.h"
#include "control_msgs/pad_msg.pb.h"
#include "localization_msgs/localization.pb.h"
#include "planning_msgs/planning.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flocal_5fview_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2flocal_5fview_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flocal_5fview_2eproto;
namespace control {
class LocalView;
class LocalViewDefaultTypeInternal;
extern LocalViewDefaultTypeInternal _LocalView_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::LocalView* Arena::CreateMaybeMessage<::control::LocalView>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class LocalView PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.LocalView) */ {
 public:
  inline LocalView() : LocalView(nullptr) {};
  virtual ~LocalView();

  LocalView(const LocalView& from);
  LocalView(LocalView&& from) noexcept
    : LocalView() {
    *this = ::std::move(from);
  }

  inline LocalView& operator=(const LocalView& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalView& operator=(LocalView&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalView* internal_default_instance() {
    return reinterpret_cast<const LocalView*>(
               &_LocalView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalView& a, LocalView& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalView* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalView* New() const final {
    return CreateMaybeMessage<LocalView>(nullptr);
  }

  LocalView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalView& from);
  void MergeFrom(const LocalView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.LocalView";
  }
  protected:
  explicit LocalView(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flocal_5fview_2eproto);
    return ::descriptor_table_control_5fbase_2flocal_5fview_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChassisFieldNumber = 2,
    kTrajectoryFieldNumber = 3,
    kLocalizationFieldNumber = 4,
    kPadMsgFieldNumber = 5,
  };
  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // optional .control.canbus.Chassis chassis = 2;
  bool has_chassis() const;
  private:
  bool _internal_has_chassis() const;
  public:
  void clear_chassis();
  const ::control::canbus::Chassis& chassis() const;
  ::control::canbus::Chassis* release_chassis();
  ::control::canbus::Chassis* mutable_chassis();
  void set_allocated_chassis(::control::canbus::Chassis* chassis);
  private:
  const ::control::canbus::Chassis& _internal_chassis() const;
  ::control::canbus::Chassis* _internal_mutable_chassis();
  public:
  void unsafe_arena_set_allocated_chassis(
      ::control::canbus::Chassis* chassis);
  ::control::canbus::Chassis* unsafe_arena_release_chassis();

  // optional .control.planning.ADCTrajectory trajectory = 3;
  bool has_trajectory() const;
  private:
  bool _internal_has_trajectory() const;
  public:
  void clear_trajectory();
  const ::control::planning::ADCTrajectory& trajectory() const;
  ::control::planning::ADCTrajectory* release_trajectory();
  ::control::planning::ADCTrajectory* mutable_trajectory();
  void set_allocated_trajectory(::control::planning::ADCTrajectory* trajectory);
  private:
  const ::control::planning::ADCTrajectory& _internal_trajectory() const;
  ::control::planning::ADCTrajectory* _internal_mutable_trajectory();
  public:
  void unsafe_arena_set_allocated_trajectory(
      ::control::planning::ADCTrajectory* trajectory);
  ::control::planning::ADCTrajectory* unsafe_arena_release_trajectory();

  // optional .control.localization.LocalizationEstimate localization = 4;
  bool has_localization() const;
  private:
  bool _internal_has_localization() const;
  public:
  void clear_localization();
  const ::control::localization::LocalizationEstimate& localization() const;
  ::control::localization::LocalizationEstimate* release_localization();
  ::control::localization::LocalizationEstimate* mutable_localization();
  void set_allocated_localization(::control::localization::LocalizationEstimate* localization);
  private:
  const ::control::localization::LocalizationEstimate& _internal_localization() const;
  ::control::localization::LocalizationEstimate* _internal_mutable_localization();
  public:
  void unsafe_arena_set_allocated_localization(
      ::control::localization::LocalizationEstimate* localization);
  ::control::localization::LocalizationEstimate* unsafe_arena_release_localization();

  // optional .control.PadMessage pad_msg = 5;
  bool has_pad_msg() const;
  private:
  bool _internal_has_pad_msg() const;
  public:
  void clear_pad_msg();
  const ::control::PadMessage& pad_msg() const;
  ::control::PadMessage* release_pad_msg();
  ::control::PadMessage* mutable_pad_msg();
  void set_allocated_pad_msg(::control::PadMessage* pad_msg);
  private:
  const ::control::PadMessage& _internal_pad_msg() const;
  ::control::PadMessage* _internal_mutable_pad_msg();
  public:
  void unsafe_arena_set_allocated_pad_msg(
      ::control::PadMessage* pad_msg);
  ::control::PadMessage* unsafe_arena_release_pad_msg();

  // @@protoc_insertion_point(class_scope:control.LocalView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::Header* header_;
  ::control::canbus::Chassis* chassis_;
  ::control::planning::ADCTrajectory* trajectory_;
  ::control::localization::LocalizationEstimate* localization_;
  ::control::PadMessage* pad_msg_;
  friend struct ::TableStruct_control_5fbase_2flocal_5fview_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalView

// optional .control.common.Header header = 1;
inline bool LocalView::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LocalView::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& LocalView::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& LocalView::header() const {
  // @@protoc_insertion_point(field_get:control.LocalView.header)
  return _internal_header();
}
inline void LocalView::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LocalView.header)
}
inline ::control::common::Header* LocalView::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* LocalView::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.LocalView.header)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* LocalView::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* LocalView::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.LocalView.header)
  return _internal_mutable_header();
}
inline void LocalView::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.LocalView.header)
}

// optional .control.canbus.Chassis chassis = 2;
inline bool LocalView::_internal_has_chassis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chassis_ != nullptr);
  return value;
}
inline bool LocalView::has_chassis() const {
  return _internal_has_chassis();
}
inline const ::control::canbus::Chassis& LocalView::_internal_chassis() const {
  const ::control::canbus::Chassis* p = chassis_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::canbus::Chassis*>(
      &::control::canbus::_Chassis_default_instance_);
}
inline const ::control::canbus::Chassis& LocalView::chassis() const {
  // @@protoc_insertion_point(field_get:control.LocalView.chassis)
  return _internal_chassis();
}
inline void LocalView::unsafe_arena_set_allocated_chassis(
    ::control::canbus::Chassis* chassis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chassis_);
  }
  chassis_ = chassis;
  if (chassis) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LocalView.chassis)
}
inline ::control::canbus::Chassis* LocalView::release_chassis() {
  auto temp = unsafe_arena_release_chassis();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::canbus::Chassis* LocalView::unsafe_arena_release_chassis() {
  // @@protoc_insertion_point(field_release:control.LocalView.chassis)
  _has_bits_[0] &= ~0x00000002u;
  ::control::canbus::Chassis* temp = chassis_;
  chassis_ = nullptr;
  return temp;
}
inline ::control::canbus::Chassis* LocalView::_internal_mutable_chassis() {
  _has_bits_[0] |= 0x00000002u;
  if (chassis_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::canbus::Chassis>(GetArena());
    chassis_ = p;
  }
  return chassis_;
}
inline ::control::canbus::Chassis* LocalView::mutable_chassis() {
  // @@protoc_insertion_point(field_mutable:control.LocalView.chassis)
  return _internal_mutable_chassis();
}
inline void LocalView::set_allocated_chassis(::control::canbus::Chassis* chassis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chassis_);
  }
  if (chassis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chassis)->GetArena();
    if (message_arena != submessage_arena) {
      chassis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chassis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chassis_ = chassis;
  // @@protoc_insertion_point(field_set_allocated:control.LocalView.chassis)
}

// optional .control.planning.ADCTrajectory trajectory = 3;
inline bool LocalView::_internal_has_trajectory() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || trajectory_ != nullptr);
  return value;
}
inline bool LocalView::has_trajectory() const {
  return _internal_has_trajectory();
}
inline const ::control::planning::ADCTrajectory& LocalView::_internal_trajectory() const {
  const ::control::planning::ADCTrajectory* p = trajectory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::planning::ADCTrajectory*>(
      &::control::planning::_ADCTrajectory_default_instance_);
}
inline const ::control::planning::ADCTrajectory& LocalView::trajectory() const {
  // @@protoc_insertion_point(field_get:control.LocalView.trajectory)
  return _internal_trajectory();
}
inline void LocalView::unsafe_arena_set_allocated_trajectory(
    ::control::planning::ADCTrajectory* trajectory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_);
  }
  trajectory_ = trajectory;
  if (trajectory) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LocalView.trajectory)
}
inline ::control::planning::ADCTrajectory* LocalView::release_trajectory() {
  auto temp = unsafe_arena_release_trajectory();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::planning::ADCTrajectory* LocalView::unsafe_arena_release_trajectory() {
  // @@protoc_insertion_point(field_release:control.LocalView.trajectory)
  _has_bits_[0] &= ~0x00000004u;
  ::control::planning::ADCTrajectory* temp = trajectory_;
  trajectory_ = nullptr;
  return temp;
}
inline ::control::planning::ADCTrajectory* LocalView::_internal_mutable_trajectory() {
  _has_bits_[0] |= 0x00000004u;
  if (trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::planning::ADCTrajectory>(GetArena());
    trajectory_ = p;
  }
  return trajectory_;
}
inline ::control::planning::ADCTrajectory* LocalView::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable:control.LocalView.trajectory)
  return _internal_mutable_trajectory();
}
inline void LocalView::set_allocated_trajectory(::control::planning::ADCTrajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_);
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory)->GetArena();
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:control.LocalView.trajectory)
}

// optional .control.localization.LocalizationEstimate localization = 4;
inline bool LocalView::_internal_has_localization() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || localization_ != nullptr);
  return value;
}
inline bool LocalView::has_localization() const {
  return _internal_has_localization();
}
inline const ::control::localization::LocalizationEstimate& LocalView::_internal_localization() const {
  const ::control::localization::LocalizationEstimate* p = localization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::localization::LocalizationEstimate*>(
      &::control::localization::_LocalizationEstimate_default_instance_);
}
inline const ::control::localization::LocalizationEstimate& LocalView::localization() const {
  // @@protoc_insertion_point(field_get:control.LocalView.localization)
  return _internal_localization();
}
inline void LocalView::unsafe_arena_set_allocated_localization(
    ::control::localization::LocalizationEstimate* localization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_);
  }
  localization_ = localization;
  if (localization) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LocalView.localization)
}
inline ::control::localization::LocalizationEstimate* LocalView::release_localization() {
  auto temp = unsafe_arena_release_localization();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::localization::LocalizationEstimate* LocalView::unsafe_arena_release_localization() {
  // @@protoc_insertion_point(field_release:control.LocalView.localization)
  _has_bits_[0] &= ~0x00000008u;
  ::control::localization::LocalizationEstimate* temp = localization_;
  localization_ = nullptr;
  return temp;
}
inline ::control::localization::LocalizationEstimate* LocalView::_internal_mutable_localization() {
  _has_bits_[0] |= 0x00000008u;
  if (localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::localization::LocalizationEstimate>(GetArena());
    localization_ = p;
  }
  return localization_;
}
inline ::control::localization::LocalizationEstimate* LocalView::mutable_localization() {
  // @@protoc_insertion_point(field_mutable:control.LocalView.localization)
  return _internal_mutable_localization();
}
inline void LocalView::set_allocated_localization(::control::localization::LocalizationEstimate* localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_);
  }
  if (localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization)->GetArena();
    if (message_arena != submessage_arena) {
      localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  localization_ = localization;
  // @@protoc_insertion_point(field_set_allocated:control.LocalView.localization)
}

// optional .control.PadMessage pad_msg = 5;
inline bool LocalView::_internal_has_pad_msg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || pad_msg_ != nullptr);
  return value;
}
inline bool LocalView::has_pad_msg() const {
  return _internal_has_pad_msg();
}
inline const ::control::PadMessage& LocalView::_internal_pad_msg() const {
  const ::control::PadMessage* p = pad_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PadMessage*>(
      &::control::_PadMessage_default_instance_);
}
inline const ::control::PadMessage& LocalView::pad_msg() const {
  // @@protoc_insertion_point(field_get:control.LocalView.pad_msg)
  return _internal_pad_msg();
}
inline void LocalView::unsafe_arena_set_allocated_pad_msg(
    ::control::PadMessage* pad_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_msg_);
  }
  pad_msg_ = pad_msg;
  if (pad_msg) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.LocalView.pad_msg)
}
inline ::control::PadMessage* LocalView::release_pad_msg() {
  auto temp = unsafe_arena_release_pad_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PadMessage* LocalView::unsafe_arena_release_pad_msg() {
  // @@protoc_insertion_point(field_release:control.LocalView.pad_msg)
  _has_bits_[0] &= ~0x00000010u;
  ::control::PadMessage* temp = pad_msg_;
  pad_msg_ = nullptr;
  return temp;
}
inline ::control::PadMessage* LocalView::_internal_mutable_pad_msg() {
  _has_bits_[0] |= 0x00000010u;
  if (pad_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PadMessage>(GetArena());
    pad_msg_ = p;
  }
  return pad_msg_;
}
inline ::control::PadMessage* LocalView::mutable_pad_msg() {
  // @@protoc_insertion_point(field_mutable:control.LocalView.pad_msg)
  return _internal_mutable_pad_msg();
}
inline void LocalView::set_allocated_pad_msg(::control::PadMessage* pad_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_msg_);
  }
  if (pad_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_msg)->GetArena();
    if (message_arena != submessage_arena) {
      pad_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pad_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pad_msg_ = pad_msg;
  // @@protoc_insertion_point(field_set_allocated:control.LocalView.pad_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flocal_5fview_2eproto

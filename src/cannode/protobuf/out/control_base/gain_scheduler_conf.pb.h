// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/gain_scheduler_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fgain_5fscheduler_5fconf_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fgain_5fscheduler_5fconf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fgain_5fscheduler_5fconf_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
namespace control {
class GainScheduler;
struct GainSchedulerDefaultTypeInternal;
extern GainSchedulerDefaultTypeInternal _GainScheduler_default_instance_;
class GainSchedulerInfo;
struct GainSchedulerInfoDefaultTypeInternal;
extern GainSchedulerInfoDefaultTypeInternal _GainSchedulerInfo_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {

// ===================================================================


// -------------------------------------------------------------------

class GainSchedulerInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.GainSchedulerInfo) */ {
 public:
  inline GainSchedulerInfo() : GainSchedulerInfo(nullptr) {}
  ~GainSchedulerInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GainSchedulerInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GainSchedulerInfo(const GainSchedulerInfo& from) : GainSchedulerInfo(nullptr, from) {}
  inline GainSchedulerInfo(GainSchedulerInfo&& from) noexcept
      : GainSchedulerInfo(nullptr, std::move(from)) {}
  inline GainSchedulerInfo& operator=(const GainSchedulerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GainSchedulerInfo& operator=(GainSchedulerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GainSchedulerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GainSchedulerInfo* internal_default_instance() {
    return reinterpret_cast<const GainSchedulerInfo*>(
        &_GainSchedulerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GainSchedulerInfo& a, GainSchedulerInfo& b) { a.Swap(&b); }
  inline void Swap(GainSchedulerInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GainSchedulerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GainSchedulerInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GainSchedulerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GainSchedulerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GainSchedulerInfo& from) { GainSchedulerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GainSchedulerInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.GainSchedulerInfo"; }

 protected:
  explicit GainSchedulerInfo(::google::protobuf::Arena* arena);
  GainSchedulerInfo(::google::protobuf::Arena* arena, const GainSchedulerInfo& from);
  GainSchedulerInfo(::google::protobuf::Arena* arena, GainSchedulerInfo&& from) noexcept
      : GainSchedulerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBpFieldNumber = 1,
    kRatioFieldNumber = 2,
  };
  // optional double bp = 1;
  bool has_bp() const;
  void clear_bp() ;
  double bp() const;
  void set_bp(double value);

  private:
  double _internal_bp() const;
  void _internal_set_bp(double value);

  public:
  // optional double ratio = 2;
  bool has_ratio() const;
  void clear_ratio() ;
  double ratio() const;
  void set_ratio(double value);

  private:
  double _internal_ratio() const;
  void _internal_set_ratio(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.GainSchedulerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GainSchedulerInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GainSchedulerInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double bp_;
    double ratio_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
};
// -------------------------------------------------------------------

class GainScheduler final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.GainScheduler) */ {
 public:
  inline GainScheduler() : GainScheduler(nullptr) {}
  ~GainScheduler() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GainScheduler(
      ::google::protobuf::internal::ConstantInitialized);

  inline GainScheduler(const GainScheduler& from) : GainScheduler(nullptr, from) {}
  inline GainScheduler(GainScheduler&& from) noexcept
      : GainScheduler(nullptr, std::move(from)) {}
  inline GainScheduler& operator=(const GainScheduler& from) {
    CopyFrom(from);
    return *this;
  }
  inline GainScheduler& operator=(GainScheduler&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GainScheduler& default_instance() {
    return *internal_default_instance();
  }
  static inline const GainScheduler* internal_default_instance() {
    return reinterpret_cast<const GainScheduler*>(
        &_GainScheduler_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GainScheduler& a, GainScheduler& b) { a.Swap(&b); }
  inline void Swap(GainScheduler* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GainScheduler* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GainScheduler* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GainScheduler>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GainScheduler& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GainScheduler& from) { GainScheduler::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GainScheduler* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.GainScheduler"; }

 protected:
  explicit GainScheduler(::google::protobuf::Arena* arena);
  GainScheduler(::google::protobuf::Arena* arena, const GainScheduler& from);
  GainScheduler(::google::protobuf::Arena* arena, GainScheduler&& from) noexcept
      : GainScheduler(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSchedulerFieldNumber = 1,
  };
  // repeated .control.GainSchedulerInfo scheduler = 1;
  int scheduler_size() const;
  private:
  int _internal_scheduler_size() const;

  public:
  void clear_scheduler() ;
  ::control::GainSchedulerInfo* mutable_scheduler(int index);
  ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>* mutable_scheduler();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>& _internal_scheduler() const;
  ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>* _internal_mutable_scheduler();
  public:
  const ::control::GainSchedulerInfo& scheduler(int index) const;
  ::control::GainSchedulerInfo* add_scheduler();
  const ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>& scheduler() const;
  // @@protoc_insertion_point(class_scope:control.GainScheduler)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GainScheduler_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GainScheduler& from_msg);
    ::google::protobuf::RepeatedPtrField< ::control::GainSchedulerInfo > scheduler_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GainScheduler

// repeated .control.GainSchedulerInfo scheduler = 1;
inline int GainScheduler::_internal_scheduler_size() const {
  return _internal_scheduler().size();
}
inline int GainScheduler::scheduler_size() const {
  return _internal_scheduler_size();
}
inline void GainScheduler::clear_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scheduler_.Clear();
}
inline ::control::GainSchedulerInfo* GainScheduler::mutable_scheduler(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.GainScheduler.scheduler)
  return _internal_mutable_scheduler()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>* GainScheduler::mutable_scheduler()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.GainScheduler.scheduler)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_scheduler();
}
inline const ::control::GainSchedulerInfo& GainScheduler::scheduler(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.GainScheduler.scheduler)
  return _internal_scheduler().Get(index);
}
inline ::control::GainSchedulerInfo* GainScheduler::add_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::GainSchedulerInfo* _add = _internal_mutable_scheduler()->Add();
  // @@protoc_insertion_point(field_add:control.GainScheduler.scheduler)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>& GainScheduler::scheduler() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.GainScheduler.scheduler)
  return _internal_scheduler();
}
inline const ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>&
GainScheduler::_internal_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scheduler_;
}
inline ::google::protobuf::RepeatedPtrField<::control::GainSchedulerInfo>*
GainScheduler::_internal_mutable_scheduler() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.scheduler_;
}

// -------------------------------------------------------------------

// GainSchedulerInfo

// optional double bp = 1;
inline bool GainSchedulerInfo::has_bp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GainSchedulerInfo::clear_bp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double GainSchedulerInfo::bp() const {
  // @@protoc_insertion_point(field_get:control.GainSchedulerInfo.bp)
  return _internal_bp();
}
inline void GainSchedulerInfo::set_bp(double value) {
  _internal_set_bp(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.GainSchedulerInfo.bp)
}
inline double GainSchedulerInfo::_internal_bp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bp_;
}
inline void GainSchedulerInfo::_internal_set_bp(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bp_ = value;
}

// optional double ratio = 2;
inline bool GainSchedulerInfo::has_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GainSchedulerInfo::clear_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double GainSchedulerInfo::ratio() const {
  // @@protoc_insertion_point(field_get:control.GainSchedulerInfo.ratio)
  return _internal_ratio();
}
inline void GainSchedulerInfo::set_ratio(double value) {
  _internal_set_ratio(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.GainSchedulerInfo.ratio)
}
inline double GainSchedulerInfo::_internal_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ratio_;
}
inline void GainSchedulerInfo::_internal_set_ratio(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ratio_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fgain_5fscheduler_5fconf_2eproto_2epb_2eh

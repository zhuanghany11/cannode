// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/gain_scheduler_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fgain_5fscheduler_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fgain_5fscheduler_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fgain_5fscheduler_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
namespace control {
class GainScheduler;
class GainSchedulerDefaultTypeInternal;
extern GainSchedulerDefaultTypeInternal _GainScheduler_default_instance_;
class GainSchedulerInfo;
class GainSchedulerInfoDefaultTypeInternal;
extern GainSchedulerInfoDefaultTypeInternal _GainSchedulerInfo_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::GainScheduler* Arena::CreateMaybeMessage<::control::GainScheduler>(Arena*);
template<> ::control::GainSchedulerInfo* Arena::CreateMaybeMessage<::control::GainSchedulerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class GainScheduler PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.GainScheduler) */ {
 public:
  inline GainScheduler() : GainScheduler(nullptr) {};
  virtual ~GainScheduler();

  GainScheduler(const GainScheduler& from);
  GainScheduler(GainScheduler&& from) noexcept
    : GainScheduler() {
    *this = ::std::move(from);
  }

  inline GainScheduler& operator=(const GainScheduler& from) {
    CopyFrom(from);
    return *this;
  }
  inline GainScheduler& operator=(GainScheduler&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GainScheduler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GainScheduler* internal_default_instance() {
    return reinterpret_cast<const GainScheduler*>(
               &_GainScheduler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GainScheduler& a, GainScheduler& b) {
    a.Swap(&b);
  }
  inline void Swap(GainScheduler* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GainScheduler* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GainScheduler* New() const final {
    return CreateMaybeMessage<GainScheduler>(nullptr);
  }

  GainScheduler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GainScheduler>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GainScheduler& from);
  void MergeFrom(const GainScheduler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GainScheduler* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.GainScheduler";
  }
  protected:
  explicit GainScheduler(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto);
    return ::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchedulerFieldNumber = 1,
  };
  // repeated .control.GainSchedulerInfo scheduler = 1;
  int scheduler_size() const;
  private:
  int _internal_scheduler_size() const;
  public:
  void clear_scheduler();
  ::control::GainSchedulerInfo* mutable_scheduler(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::GainSchedulerInfo >*
      mutable_scheduler();
  private:
  const ::control::GainSchedulerInfo& _internal_scheduler(int index) const;
  ::control::GainSchedulerInfo* _internal_add_scheduler();
  public:
  const ::control::GainSchedulerInfo& scheduler(int index) const;
  ::control::GainSchedulerInfo* add_scheduler();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::GainSchedulerInfo >&
      scheduler() const;

  // @@protoc_insertion_point(class_scope:control.GainScheduler)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::GainSchedulerInfo > scheduler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
};
// -------------------------------------------------------------------

class GainSchedulerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.GainSchedulerInfo) */ {
 public:
  inline GainSchedulerInfo() : GainSchedulerInfo(nullptr) {};
  virtual ~GainSchedulerInfo();

  GainSchedulerInfo(const GainSchedulerInfo& from);
  GainSchedulerInfo(GainSchedulerInfo&& from) noexcept
    : GainSchedulerInfo() {
    *this = ::std::move(from);
  }

  inline GainSchedulerInfo& operator=(const GainSchedulerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GainSchedulerInfo& operator=(GainSchedulerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GainSchedulerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GainSchedulerInfo* internal_default_instance() {
    return reinterpret_cast<const GainSchedulerInfo*>(
               &_GainSchedulerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GainSchedulerInfo& a, GainSchedulerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GainSchedulerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GainSchedulerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GainSchedulerInfo* New() const final {
    return CreateMaybeMessage<GainSchedulerInfo>(nullptr);
  }

  GainSchedulerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GainSchedulerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GainSchedulerInfo& from);
  void MergeFrom(const GainSchedulerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GainSchedulerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.GainSchedulerInfo";
  }
  protected:
  explicit GainSchedulerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto);
    return ::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpFieldNumber = 1,
    kRatioFieldNumber = 2,
  };
  // optional double bp = 1;
  bool has_bp() const;
  private:
  bool _internal_has_bp() const;
  public:
  void clear_bp();
  double bp() const;
  void set_bp(double value);
  private:
  double _internal_bp() const;
  void _internal_set_bp(double value);
  public:

  // optional double ratio = 2;
  bool has_ratio() const;
  private:
  bool _internal_has_ratio() const;
  public:
  void clear_ratio();
  double ratio() const;
  void set_ratio(double value);
  private:
  double _internal_ratio() const;
  void _internal_set_ratio(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.GainSchedulerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double bp_;
  double ratio_;
  friend struct ::TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GainScheduler

// repeated .control.GainSchedulerInfo scheduler = 1;
inline int GainScheduler::_internal_scheduler_size() const {
  return scheduler_.size();
}
inline int GainScheduler::scheduler_size() const {
  return _internal_scheduler_size();
}
inline void GainScheduler::clear_scheduler() {
  scheduler_.Clear();
}
inline ::control::GainSchedulerInfo* GainScheduler::mutable_scheduler(int index) {
  // @@protoc_insertion_point(field_mutable:control.GainScheduler.scheduler)
  return scheduler_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::GainSchedulerInfo >*
GainScheduler::mutable_scheduler() {
  // @@protoc_insertion_point(field_mutable_list:control.GainScheduler.scheduler)
  return &scheduler_;
}
inline const ::control::GainSchedulerInfo& GainScheduler::_internal_scheduler(int index) const {
  return scheduler_.Get(index);
}
inline const ::control::GainSchedulerInfo& GainScheduler::scheduler(int index) const {
  // @@protoc_insertion_point(field_get:control.GainScheduler.scheduler)
  return _internal_scheduler(index);
}
inline ::control::GainSchedulerInfo* GainScheduler::_internal_add_scheduler() {
  return scheduler_.Add();
}
inline ::control::GainSchedulerInfo* GainScheduler::add_scheduler() {
  // @@protoc_insertion_point(field_add:control.GainScheduler.scheduler)
  return _internal_add_scheduler();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::GainSchedulerInfo >&
GainScheduler::scheduler() const {
  // @@protoc_insertion_point(field_list:control.GainScheduler.scheduler)
  return scheduler_;
}

// -------------------------------------------------------------------

// GainSchedulerInfo

// optional double bp = 1;
inline bool GainSchedulerInfo::_internal_has_bp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GainSchedulerInfo::has_bp() const {
  return _internal_has_bp();
}
inline void GainSchedulerInfo::clear_bp() {
  bp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GainSchedulerInfo::_internal_bp() const {
  return bp_;
}
inline double GainSchedulerInfo::bp() const {
  // @@protoc_insertion_point(field_get:control.GainSchedulerInfo.bp)
  return _internal_bp();
}
inline void GainSchedulerInfo::_internal_set_bp(double value) {
  _has_bits_[0] |= 0x00000001u;
  bp_ = value;
}
inline void GainSchedulerInfo::set_bp(double value) {
  _internal_set_bp(value);
  // @@protoc_insertion_point(field_set:control.GainSchedulerInfo.bp)
}

// optional double ratio = 2;
inline bool GainSchedulerInfo::_internal_has_ratio() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GainSchedulerInfo::has_ratio() const {
  return _internal_has_ratio();
}
inline void GainSchedulerInfo::clear_ratio() {
  ratio_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GainSchedulerInfo::_internal_ratio() const {
  return ratio_;
}
inline double GainSchedulerInfo::ratio() const {
  // @@protoc_insertion_point(field_get:control.GainSchedulerInfo.ratio)
  return _internal_ratio();
}
inline void GainSchedulerInfo::_internal_set_ratio(double value) {
  _has_bits_[0] |= 0x00000002u;
  ratio_ = value;
}
inline void GainSchedulerInfo::set_ratio(double value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:control.GainSchedulerInfo.ratio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fgain_5fscheduler_5fconf_2eproto

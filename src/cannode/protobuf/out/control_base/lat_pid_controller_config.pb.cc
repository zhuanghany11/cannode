// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/lat_pid_controller_config.proto

#include "control_base/lat_pid_controller_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffCCSteeringFakeDeadZoneConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffCoeffientGainConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffCommonParametersConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffControllerContentRateConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffDTInputFrameLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffDTInputMaxLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffLinearModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffMeanFilterSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffMeanFilterWindowSize_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPPActivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPPDectivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPPSteeringAngleLimit_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPercentageModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffProtectIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffTrackingDifferentiatorStateParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffTrackingDifferentiatorSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto;
namespace control {
class PiffParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffParameters> _instance;
} _PiffParameters_default_instance_;
class PiffMeanFilterSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffMeanFilterSwitch> _instance;
} _PiffMeanFilterSwitch_default_instance_;
class PiffMeanFilterWindowSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffMeanFilterWindowSize> _instance;
} _PiffMeanFilterWindowSize_default_instance_;
class PiffMeanFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffMeanFilterConfig> _instance;
} _PiffMeanFilterConfig_default_instance_;
class PiffControllerContentRateConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffControllerContentRateConfig> _instance;
} _PiffControllerContentRateConfig_default_instance_;
class PiffLinearModeIntegratorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffLinearModeIntegratorConfig> _instance;
} _PiffLinearModeIntegratorConfig_default_instance_;
class PiffPercentageModeIntegratorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffPercentageModeIntegratorConfig> _instance;
} _PiffPercentageModeIntegratorConfig_default_instance_;
class PiffProtectIntegratorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffProtectIntegratorConfig> _instance;
} _PiffProtectIntegratorConfig_default_instance_;
class PiffIntegratorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffIntegratorConfig> _instance;
} _PiffIntegratorConfig_default_instance_;
class PiffCCSteeringFakeDeadZoneConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffCCSteeringFakeDeadZoneConfig> _instance;
} _PiffCCSteeringFakeDeadZoneConfig_default_instance_;
class PiffControllerContentConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffControllerContentConfig> _instance;
} _PiffControllerContentConfig_default_instance_;
class PiffTrackingDifferentiatorSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffTrackingDifferentiatorSwitch> _instance;
} _PiffTrackingDifferentiatorSwitch_default_instance_;
class PiffTrackingDifferentiatorStateParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffTrackingDifferentiatorStateParameters> _instance;
} _PiffTrackingDifferentiatorStateParameters_default_instance_;
class PiffTrackingDifferentiatorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffTrackingDifferentiatorConfig> _instance;
} _PiffTrackingDifferentiatorConfig_default_instance_;
class PiffDTInputMaxLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffDTInputMaxLimitConfig> _instance;
} _PiffDTInputMaxLimitConfig_default_instance_;
class PiffDTInputFrameLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffDTInputFrameLimitConfig> _instance;
} _PiffDTInputFrameLimitConfig_default_instance_;
class PiffDataTransformConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffDataTransformConfig> _instance;
} _PiffDataTransformConfig_default_instance_;
class PiffPPSteeringAngleLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffPPSteeringAngleLimit> _instance;
} _PiffPPSteeringAngleLimit_default_instance_;
class PiffPPActivateControlContentConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffPPActivateControlContentConfig> _instance;
} _PiffPPActivateControlContentConfig_default_instance_;
class PiffPPDectivateControlContentConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffPPDectivateControlContentConfig> _instance;
} _PiffPPDectivateControlContentConfig_default_instance_;
class PiffPPActivateControlConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffPPActivateControlConfig> _instance;
} _PiffPPActivateControlConfig_default_instance_;
class PiffPPDeactivateControlConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffPPDeactivateControlConfig> _instance;
} _PiffPPDeactivateControlConfig_default_instance_;
class PiffPostProcessConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffPostProcessConfig> _instance;
} _PiffPostProcessConfig_default_instance_;
class PiffCoeffientGainConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffCoeffientGainConfig> _instance;
} _PiffCoeffientGainConfig_default_instance_;
class PiffCommonParametersConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiffCommonParametersConfig> _instance;
} _PiffCommonParametersConfig_default_instance_;
class LatPidConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatPidConfig> _instance;
} _LatPidConfig_default_instance_;
}  // namespace control
static void InitDefaultsscc_info_LatPidConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_LatPidConfig_default_instance_;
    new (ptr) ::control::LatPidConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::LatPidConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_LatPidConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_LatPidConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffCommonParametersConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffCoeffientGainConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffCCSteeringFakeDeadZoneConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffCCSteeringFakeDeadZoneConfig_default_instance_;
    new (ptr) ::control::PiffCCSteeringFakeDeadZoneConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffCCSteeringFakeDeadZoneConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffCCSteeringFakeDeadZoneConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffCCSteeringFakeDeadZoneConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffCoeffientGainConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffCoeffientGainConfig_default_instance_;
    new (ptr) ::control::PiffCoeffientGainConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffCoeffientGainConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffCoeffientGainConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffCoeffientGainConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffCommonParametersConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffCommonParametersConfig_default_instance_;
    new (ptr) ::control::PiffCommonParametersConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffCommonParametersConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffCommonParametersConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffCommonParametersConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffControllerContentConfig_default_instance_;
    new (ptr) ::control::PiffControllerContentConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffControllerContentConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffControllerContentRateConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffCCSteeringFakeDeadZoneConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffControllerContentRateConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffControllerContentRateConfig_default_instance_;
    new (ptr) ::control::PiffControllerContentRateConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffControllerContentRateConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffControllerContentRateConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffControllerContentRateConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffDTInputFrameLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffDTInputFrameLimitConfig_default_instance_;
    new (ptr) ::control::PiffDTInputFrameLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffDTInputFrameLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffDTInputFrameLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffDTInputFrameLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffDTInputMaxLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffDTInputMaxLimitConfig_default_instance_;
    new (ptr) ::control::PiffDTInputMaxLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffDTInputMaxLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffDTInputMaxLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffDTInputMaxLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffDataTransformConfig_default_instance_;
    new (ptr) ::control::PiffDataTransformConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffDataTransformConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffDTInputMaxLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffDTInputFrameLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffIntegratorConfig_default_instance_;
    new (ptr) ::control::PiffIntegratorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffIntegratorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffLinearModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffPercentageModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffProtectIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffLinearModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffLinearModeIntegratorConfig_default_instance_;
    new (ptr) ::control::PiffLinearModeIntegratorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffLinearModeIntegratorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffLinearModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffLinearModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffMeanFilterConfig_default_instance_;
    new (ptr) ::control::PiffMeanFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffMeanFilterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffMeanFilterSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffMeanFilterWindowSize_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffMeanFilterSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffMeanFilterSwitch_default_instance_;
    new (ptr) ::control::PiffMeanFilterSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffMeanFilterSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffMeanFilterSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffMeanFilterSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffMeanFilterWindowSize_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffMeanFilterWindowSize_default_instance_;
    new (ptr) ::control::PiffMeanFilterWindowSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffMeanFilterWindowSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffMeanFilterWindowSize_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffMeanFilterWindowSize_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffPPActivateControlConfig_default_instance_;
    new (ptr) ::control::PiffPPActivateControlConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffPPActivateControlConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffPPActivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffPPActivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffPPActivateControlContentConfig_default_instance_;
    new (ptr) ::control::PiffPPActivateControlContentConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffPPActivateControlContentConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPPActivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffPPActivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffPPDeactivateControlConfig_default_instance_;
    new (ptr) ::control::PiffPPDeactivateControlConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffPPDeactivateControlConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffPPDectivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffPPDectivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffPPDectivateControlContentConfig_default_instance_;
    new (ptr) ::control::PiffPPDectivateControlContentConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffPPDectivateControlContentConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPPDectivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffPPDectivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffPPSteeringAngleLimit_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffPPSteeringAngleLimit_default_instance_;
    new (ptr) ::control::PiffPPSteeringAngleLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffPPSteeringAngleLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPPSteeringAngleLimit_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffPPSteeringAngleLimit_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffParameters_default_instance_;
    new (ptr) ::control::PiffParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffPercentageModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffPercentageModeIntegratorConfig_default_instance_;
    new (ptr) ::control::PiffPercentageModeIntegratorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffPercentageModeIntegratorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffPercentageModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffPercentageModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffPostProcessConfig_default_instance_;
    new (ptr) ::control::PiffPostProcessConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffPostProcessConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffPPSteeringAngleLimit_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffProtectIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffProtectIntegratorConfig_default_instance_;
    new (ptr) ::control::PiffProtectIntegratorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffProtectIntegratorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffProtectIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffProtectIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffTrackingDifferentiatorConfig_default_instance_;
    new (ptr) ::control::PiffTrackingDifferentiatorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffTrackingDifferentiatorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {
      &scc_info_PiffTrackingDifferentiatorSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
      &scc_info_PiffTrackingDifferentiatorStateParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PiffTrackingDifferentiatorStateParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffTrackingDifferentiatorStateParameters_default_instance_;
    new (ptr) ::control::PiffTrackingDifferentiatorStateParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffTrackingDifferentiatorStateParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffTrackingDifferentiatorStateParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffTrackingDifferentiatorStateParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PiffTrackingDifferentiatorSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_PiffTrackingDifferentiatorSwitch_default_instance_;
    new (ptr) ::control::PiffTrackingDifferentiatorSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::PiffTrackingDifferentiatorSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiffTrackingDifferentiatorSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiffTrackingDifferentiatorSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::PiffParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffParameters, curvature_),
  PROTOBUF_FIELD_OFFSET(::control::PiffParameters, speed_kph_),
  PROTOBUF_FIELD_OFFSET(::control::PiffParameters, matrix_k_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterSwitch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterSwitch, enable_center_line_c0_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterSwitch, enable_center_line_c1_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterSwitch, enable_center_line_c2_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterSwitch, enable_speed_mps_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterSwitch, enable_yaw_rate_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterWindowSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterWindowSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterWindowSize, center_line_c0_mfws_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterWindowSize, center_line_c1_mfws_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterWindowSize, center_line_c2_mfws_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterWindowSize, speed_mps_mfws_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterWindowSize, yaw_rate_mfws_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterConfig, filter_switch_),
  PROTOBUF_FIELD_OFFSET(::control::PiffMeanFilterConfig, window_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentRateConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentRateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentRateConfig, curvature_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentRateConfig, speed_kph_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentRateConfig, ff_rate_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentRateConfig, fb_rate_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::control::PiffLinearModeIntegratorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffLinearModeIntegratorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffLinearModeIntegratorConfig, ki_mode_),
  PROTOBUF_FIELD_OFFSET(::control::PiffLinearModeIntegratorConfig, ki_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::control::PiffPercentageModeIntegratorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPercentageModeIntegratorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffPercentageModeIntegratorConfig, track_percentage_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPercentageModeIntegratorConfig, enable_lateral_err_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPercentageModeIntegratorConfig, enable_lateral_err_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPercentageModeIntegratorConfig, enable_heading_err_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPercentageModeIntegratorConfig, enable_heading_err_rate_contribution_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::control::PiffProtectIntegratorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffProtectIntegratorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffProtectIntegratorConfig, flag_protection_),
  PROTOBUF_FIELD_OFFSET(::control::PiffProtectIntegratorConfig, frames_protection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, enable_integrator_),
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, steering_saturation_level_deg_),
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, mode_integrator_),
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, linear_mode_integrator_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, percentage_mode_integrator_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffIntegratorConfig, protect_integrator_conf_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, enable_fake_dead_zone_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, lateral_error_m_fake_zone_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, heading_error_rad_fake_zone_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, enable_fake_transition_zone_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, lateral_error_m_transition_zone_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, heading_error_rad_transition_zone_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCCSteeringFakeDeadZoneConfig, mode_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, preview_mode_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, preview_time_ms_c01_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, preview_time_ms_c2_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, curvature_min_start_ff_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, rate_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, integrator_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, steering_bias_deg_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, steering_fake_dead_zone_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffControllerContentConfig, curvaturn_transition_ff_),
  2,
  3,
  4,
  5,
  ~0u,
  0,
  6,
  1,
  7,
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorSwitch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorSwitch, enable_center_line_c2_),
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorSwitch, enable_yaw_rate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorStateParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorStateParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorStateParameters, tracking_rate_),
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorStateParameters, smooth_frame_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorConfig, td_switch_),
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorConfig, center_line_c2_paras_),
  PROTOBUF_FIELD_OFFSET(::control::PiffTrackingDifferentiatorConfig, yaw_rate_paras_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputMaxLimitConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputMaxLimitConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputMaxLimitConfig, speed_kph_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputMaxLimitConfig, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputMaxLimitConfig, heading_error_deg_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, speed_kph_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c0_jump_max_m_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c0_transit_rate_mps_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c0_track_percentage_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c1_jump_max_rad_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c1_transit_rate_radps_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c1_track_percentage_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c2_jump_max_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c2_transit_rate_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDTInputFrameLimitConfig, c2_track_percentage_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::control::PiffDataTransformConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDataTransformConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffDataTransformConfig, enable_input_max_limit_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDataTransformConfig, input_max_limit_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDataTransformConfig, enable_input_frame_limit_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDataTransformConfig, input_frame_limit_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffDataTransformConfig, frame_ramp_mode_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::control::PiffPPSteeringAngleLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPSteeringAngleLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffPPSteeringAngleLimit, speed_kph_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPSteeringAngleLimit, steering_range_deg_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPSteeringAngleLimit, steering_rate_range_degps_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlContentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlContentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlContentConfig, speed_kph_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlContentConfig, steering_rate_degps_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlContentConfig, steering_dead_zone_deg_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlContentConfig, steering_frame_track_percentage_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDectivateControlContentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDectivateControlContentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDectivateControlContentConfig, speed_kph_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDectivateControlContentConfig, steering_rate_degps_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDectivateControlContentConfig, steering_frame_track_percentage_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlConfig, enable_post_activate_control_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlConfig, activate_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPActivateControlConfig, ramp_mode_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDeactivateControlConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDeactivateControlConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDeactivateControlConfig, enable_post_deactivate_control_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDeactivateControlConfig, deactivate_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPPDeactivateControlConfig, ramp_mode_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, enable_steering_limit_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, steering_range_factor_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, steering_rate_range_factor_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, steering_angle_limit_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, post_activate_control_conf_),
  PROTOBUF_FIELD_OFFSET(::control::PiffPostProcessConfig, post_deactivate_control_conf_),
  2,
  3,
  4,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::PiffCoeffientGainConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCoeffientGainConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffCoeffientGainConfig, c0_threshold_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCoeffientGainConfig, c1_coef_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCoeffientGainConfig, c2_coef_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::control::PiffCommonParametersConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCommonParametersConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::PiffCommonParametersConfig, control_period_),
  PROTOBUF_FIELD_OFFSET(::control::PiffCommonParametersConfig, standstill_speed_mps_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, common_para_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, controller_content_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, piff_paras_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, mean_filter_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, tracking_differentiator_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, data_transform_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, post_process_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatPidConfig, coeffient_gain_conf_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::control::PiffParameters)},
  { 11, 21, sizeof(::control::PiffMeanFilterSwitch)},
  { 26, 36, sizeof(::control::PiffMeanFilterWindowSize)},
  { 41, 48, sizeof(::control::PiffMeanFilterConfig)},
  { 50, 59, sizeof(::control::PiffControllerContentRateConfig)},
  { 63, 70, sizeof(::control::PiffLinearModeIntegratorConfig)},
  { 72, 82, sizeof(::control::PiffPercentageModeIntegratorConfig)},
  { 87, 94, sizeof(::control::PiffProtectIntegratorConfig)},
  { 96, 107, sizeof(::control::PiffIntegratorConfig)},
  { 113, 125, sizeof(::control::PiffCCSteeringFakeDeadZoneConfig)},
  { 132, 146, sizeof(::control::PiffControllerContentConfig)},
  { 155, 162, sizeof(::control::PiffTrackingDifferentiatorSwitch)},
  { 164, 171, sizeof(::control::PiffTrackingDifferentiatorStateParameters)},
  { 173, 181, sizeof(::control::PiffTrackingDifferentiatorConfig)},
  { 184, 192, sizeof(::control::PiffDTInputMaxLimitConfig)},
  { 195, 210, sizeof(::control::PiffDTInputFrameLimitConfig)},
  { 220, 230, sizeof(::control::PiffDataTransformConfig)},
  { 235, 243, sizeof(::control::PiffPPSteeringAngleLimit)},
  { 246, 255, sizeof(::control::PiffPPActivateControlContentConfig)},
  { 259, 267, sizeof(::control::PiffPPDectivateControlContentConfig)},
  { 270, 278, sizeof(::control::PiffPPActivateControlConfig)},
  { 281, 289, sizeof(::control::PiffPPDeactivateControlConfig)},
  { 292, 303, sizeof(::control::PiffPostProcessConfig)},
  { 309, 317, sizeof(::control::PiffCoeffientGainConfig)},
  { 320, 327, sizeof(::control::PiffCommonParametersConfig)},
  { 329, 342, sizeof(::control::LatPidConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffMeanFilterSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffMeanFilterWindowSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffMeanFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffControllerContentRateConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffLinearModeIntegratorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffPercentageModeIntegratorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffProtectIntegratorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffIntegratorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffCCSteeringFakeDeadZoneConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffControllerContentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffTrackingDifferentiatorSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffTrackingDifferentiatorStateParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffTrackingDifferentiatorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffDTInputMaxLimitConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffDTInputFrameLimitConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffDataTransformConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffPPSteeringAngleLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffPPActivateControlContentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffPPDectivateControlContentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffPPActivateControlConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffPPDeactivateControlConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffPostProcessConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffCoeffientGainConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_PiffCommonParametersConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_LatPidConfig_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,control_base/lat_pid_controller_config"
  ".proto\022\007control\"H\n\016PiffParameters\022\021\n\tcur"
  "vature\030\001 \002(\002\022\021\n\tspeed_kph\030\002 \002(\002\022\020\n\010matri"
  "x_k\030\003 \003(\002\"\246\001\n\024PiffMeanFilterSwitch\022\035\n\025en"
  "able_center_line_c0\030\001 \002(\010\022\035\n\025enable_cent"
  "er_line_c1\030\002 \002(\010\022\035\n\025enable_center_line_c"
  "2\030\003 \002(\010\022\030\n\020enable_speed_mps\030\004 \002(\010\022\027\n\017ena"
  "ble_yaw_rate\030\005 \002(\010\"\240\001\n\030PiffMeanFilterWin"
  "dowSize\022\033\n\023center_line_c0_mfws\030\001 \002(\005\022\033\n\023"
  "center_line_c1_mfws\030\002 \002(\005\022\033\n\023center_line"
  "_c2_mfws\030\003 \002(\005\022\026\n\016speed_mps_mfws\030\004 \002(\005\022\025"
  "\n\ryaw_rate_mfws\030\005 \002(\005\"\204\001\n\024PiffMeanFilter"
  "Config\0224\n\rfilter_switch\030\001 \002(\0132\035.control."
  "PiffMeanFilterSwitch\0226\n\013window_size\030\002 \002("
  "\0132!.control.PiffMeanFilterWindowSize\"i\n\037"
  "PiffControllerContentRateConfig\022\021\n\tcurva"
  "ture\030\001 \002(\002\022\021\n\tspeed_kph\030\002 \002(\002\022\017\n\007ff_rate"
  "\030\003 \002(\002\022\017\n\007fb_rate\030\004 \002(\002\"=\n\036PiffLinearMod"
  "eIntegratorConfig\022\017\n\007ki_mode\030\001 \002(\005\022\n\n\002ki"
  "\030\002 \003(\002\"\354\001\n\"PiffPercentageModeIntegratorC"
  "onfig\022\030\n\020track_percentage\030\001 \002(\002\022\'\n\037enabl"
  "e_lateral_err_contribution\030\002 \002(\010\022,\n$enab"
  "le_lateral_err_rate_contribution\030\003 \002(\010\022\'"
  "\n\037enable_heading_err_contribution\030\004 \002(\010\022"
  ",\n$enable_heading_err_rate_contribution\030"
  "\005 \002(\010\"Q\n\033PiffProtectIntegratorConfig\022\027\n\017"
  "flag_protection\030\001 \002(\010\022\031\n\021frames_protecti"
  "on\030\002 \002(\005\"\334\002\n\024PiffIntegratorConfig\022\031\n\021ena"
  "ble_integrator\030\001 \002(\010\022%\n\035steering_saturat"
  "ion_level_deg\030\002 \002(\002\022\027\n\017mode_integrator\030\003"
  " \002(\005\022L\n\033linear_mode_integrator_conf\030\004 \002("
  "\0132\'.control.PiffLinearModeIntegratorConf"
  "ig\022T\n\037percentage_mode_integrator_conf\030\005 "
  "\002(\0132+.control.PiffPercentageModeIntegrat"
  "orConfig\022E\n\027protect_integrator_conf\030\006 \002("
  "\0132$.control.PiffProtectIntegratorConfig\""
  "\220\002\n PiffCCSteeringFakeDeadZoneConfig\022\035\n\025"
  "enable_fake_dead_zone\030\001 \002(\010\022!\n\031lateral_e"
  "rror_m_fake_zone\030\002 \002(\002\022#\n\033heading_error_"
  "rad_fake_zone\030\003 \002(\002\022#\n\033enable_fake_trans"
  "ition_zone\030\004 \002(\010\022\'\n\037lateral_error_m_tran"
  "sition_zone\030\005 \002(\002\022)\n!heading_error_rad_t"
  "ransition_zone\030\006 \002(\002\022\014\n\004mode\030\007 \002(\005\"\216\003\n\033P"
  "iffControllerContentConfig\022\024\n\014preview_mo"
  "de\030\001 \002(\005\022\033\n\023preview_time_ms_c01\030\002 \002(\002\022\032\n"
  "\022preview_time_ms_c2\030\003 \002(\002\022\036\n\026curvature_m"
  "in_start_ff\030\004 \002(\002\022;\n\trate_conf\030\005 \003(\0132(.c"
  "ontrol.PiffControllerContentRateConfig\0226"
  "\n\017integrator_conf\030\006 \002(\0132\035.control.PiffIn"
  "tegratorConfig\022\031\n\021steering_bias_deg\030\007 \002("
  "\002\022O\n\034steering_fake_dead_zone_conf\030\010 \002(\0132"
  ").control.PiffCCSteeringFakeDeadZoneConf"
  "ig\022\037\n\027curvaturn_transition_ff\030\t \002(\002\"Z\n P"
  "iffTrackingDifferentiatorSwitch\022\035\n\025enabl"
  "e_center_line_c2\030\001 \002(\010\022\027\n\017enable_yaw_rat"
  "e\030\002 \002(\010\"X\n)PiffTrackingDifferentiatorSta"
  "teParameters\022\025\n\rtracking_rate\030\001 \002(\002\022\024\n\014s"
  "mooth_frame\030\002 \002(\005\"\376\001\n PiffTrackingDiffer"
  "entiatorConfig\022<\n\ttd_switch\030\001 \002(\0132).cont"
  "rol.PiffTrackingDifferentiatorSwitch\022P\n\024"
  "center_line_c2_paras\030\002 \002(\01322.control.Pif"
  "fTrackingDifferentiatorStateParameters\022J"
  "\n\016yaw_rate_paras\030\003 \002(\01322.control.PiffTra"
  "ckingDifferentiatorStateParameters\"`\n\031Pi"
  "ffDTInputMaxLimitConfig\022\021\n\tspeed_kph\030\001 \002"
  "(\002\022\025\n\rlateral_error\030\002 \002(\002\022\031\n\021heading_err"
  "or_deg\030\003 \002(\002\"\241\002\n\033PiffDTInputFrameLimitCo"
  "nfig\022\021\n\tspeed_kph\030\001 \002(\002\022\025\n\rc0_jump_max_m"
  "\030\002 \002(\002\022\033\n\023c0_transit_rate_mps\030\003 \002(\002\022\033\n\023c"
  "0_track_percentage\030\004 \002(\002\022\027\n\017c1_jump_max_"
  "rad\030\005 \002(\002\022\035\n\025c1_transit_rate_radps\030\006 \002(\002"
  "\022\033\n\023c1_track_percentage\030\007 \002(\002\022\023\n\013c2_jump"
  "_max\030\010 \002(\002\022\027\n\017c2_transit_rate\030\t \002(\002\022\033\n\023c"
  "2_track_percentage\030\n \002(\002\"\374\001\n\027PiffDataTra"
  "nsformConfig\022\036\n\026enable_input_max_limit\030\001"
  " \002(\010\022@\n\024input_max_limit_conf\030\002 \003(\0132\".con"
  "trol.PiffDTInputMaxLimitConfig\022 \n\030enable"
  "_input_frame_limit\030\003 \002(\010\022D\n\026input_frame_"
  "limit_conf\030\004 \003(\0132$.control.PiffDTInputFr"
  "ameLimitConfig\022\027\n\017frame_ramp_mode\030\005 \002(\005\""
  "l\n\030PiffPPSteeringAngleLimit\022\021\n\tspeed_kph"
  "\030\001 \002(\002\022\032\n\022steering_range_deg\030\002 \002(\002\022!\n\031st"
  "eering_rate_range_degps\030\003 \002(\002\"\235\001\n\"PiffPP"
  "ActivateControlContentConfig\022\021\n\tspeed_kp"
  "h\030\001 \002(\002\022\033\n\023steering_rate_degps\030\002 \002(\002\022\036\n\026"
  "steering_dead_zone_deg\030\003 \002(\002\022\'\n\037steering"
  "_frame_track_percentage\030\004 \002(\002\"~\n#PiffPPD"
  "ectivateControlContentConfig\022\021\n\tspeed_kp"
  "h\030\001 \002(\002\022\033\n\023steering_rate_degps\030\002 \002(\002\022\'\n\037"
  "steering_frame_track_percentage\030\003 \002(\002\"\232\001"
  "\n\033PiffPPActivateControlConfig\022$\n\034enable_"
  "post_activate_control\030\001 \002(\010\022B\n\ractivate_"
  "conf\030\002 \003(\0132+.control.PiffPPActivateContr"
  "olContentConfig\022\021\n\tramp_mode\030\003 \002(\005\"\241\001\n\035P"
  "iffPPDeactivateControlConfig\022&\n\036enable_p"
  "ost_deactivate_control\030\001 \002(\010\022E\n\017deactiva"
  "te_conf\030\002 \003(\0132,.control.PiffPPDectivateC"
  "ontrolContentConfig\022\021\n\tramp_mode\030\003 \002(\005\"\322"
  "\002\n\025PiffPostProcessConfig\022\035\n\025enable_steer"
  "ing_limit\030\001 \002(\010\022\035\n\025steering_range_factor"
  "\030\002 \002(\002\022\"\n\032steering_rate_range_factor\030\003 \002"
  "(\002\022\?\n\024steering_angle_limit\030\004 \003(\0132!.contr"
  "ol.PiffPPSteeringAngleLimit\022H\n\032post_acti"
  "vate_control_conf\030\005 \002(\0132$.control.PiffPP"
  "ActivateControlConfig\022L\n\034post_deactivate"
  "_control_conf\030\006 \002(\0132&.control.PiffPPDeac"
  "tivateControlConfig\"Q\n\027PiffCoeffientGain"
  "Config\022\024\n\014c0_threshold\030\001 \002(\002\022\017\n\007c1_coef\030"
  "\002 \002(\002\022\017\n\007c2_coef\030\003 \002(\002\"R\n\032PiffCommonPara"
  "metersConfig\022\026\n\016control_period\030\001 \002(\002\022\034\n\024"
  "standstill_speed_mps\030\003 \002(\002\"\204\004\n\014LatPidCon"
  "fig\022=\n\020common_para_conf\030\001 \002(\0132#.control."
  "PiffCommonParametersConfig\022E\n\027controller"
  "_content_conf\030\002 \002(\0132$.control.PiffContro"
  "llerContentConfig\022+\n\npiff_paras\030\003 \003(\0132\027."
  "control.PiffParameters\0227\n\020mean_filter_co"
  "nf\030\004 \002(\0132\035.control.PiffMeanFilterConfig\022"
  "O\n\034tracking_differentiator_conf\030\005 \002(\0132)."
  "control.PiffTrackingDifferentiatorConfig"
  "\022=\n\023data_transform_conf\030\006 \002(\0132 .control."
  "PiffDataTransformConfig\0229\n\021post_process_"
  "conf\030\007 \002(\0132\036.control.PiffPostProcessConf"
  "ig\022=\n\023coeffient_gain_conf\030\010 \002(\0132 .contro"
  "l.PiffCoeffientGainConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto_sccs[26] = {
  &scc_info_LatPidConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffCCSteeringFakeDeadZoneConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffCoeffientGainConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffCommonParametersConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffControllerContentRateConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffDTInputFrameLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffDTInputMaxLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffLinearModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffMeanFilterSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffMeanFilterWindowSize_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffPPActivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffPPDectivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffPPSteeringAngleLimit_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffPercentageModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffProtectIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffTrackingDifferentiatorStateParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
  &scc_info_PiffTrackingDifferentiatorSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto, "control_base/lat_pid_controller_config.proto", 4945,
  &descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto_once, descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto_sccs, descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto::offsets,
  file_level_metadata_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto, 26, file_level_enum_descriptors_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto, file_level_service_descriptors_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto)), true);
namespace control {

// ===================================================================

void PiffParameters::InitAsDefaultInstance() {
}
class PiffParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffParameters>()._has_bits_);
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_kph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PiffParameters::PiffParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_k_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffParameters)
}
PiffParameters::PiffParameters(const PiffParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matrix_k_(from.matrix_k_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&curvature_, &from.curvature_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_kph_) -
    reinterpret_cast<char*>(&curvature_)) + sizeof(speed_kph_));
  // @@protoc_insertion_point(copy_constructor:control.PiffParameters)
}

void PiffParameters::SharedCtor() {
  ::memset(&curvature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_kph_) -
      reinterpret_cast<char*>(&curvature_)) + sizeof(speed_kph_));
}

PiffParameters::~PiffParameters() {
  // @@protoc_insertion_point(destructor:control.PiffParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffParameters::ArenaDtor(void* object) {
  PiffParameters* _this = reinterpret_cast< PiffParameters* >(object);
  (void)_this;
}
void PiffParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffParameters& PiffParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_k_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&curvature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_kph_) -
        reinterpret_cast<char*>(&curvature_)) + sizeof(speed_kph_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float curvature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_curvature(&has_bits);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float speed_kph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_speed_kph(&has_bits);
          speed_kph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float matrix_k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matrix_k(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_matrix_k(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float curvature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_curvature(), target);
  }

  // required float speed_kph = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_kph(), target);
  }

  // repeated float matrix_k = 3;
  for (int i = 0, n = this->_internal_matrix_k_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_matrix_k(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffParameters)
  return target;
}

size_t PiffParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffParameters)
  size_t total_size = 0;

  if (_internal_has_curvature()) {
    // required float curvature = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_speed_kph()) {
    // required float speed_kph = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffParameters)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float curvature = 1;
    total_size += 1 + 4;

    // required float speed_kph = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float matrix_k = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_k_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_k_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffParameters)
    MergeFrom(*source);
  }
}

void PiffParameters::MergeFrom(const PiffParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_k_.MergeFrom(from.matrix_k_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_kph_ = from.speed_kph_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffParameters::CopyFrom(const PiffParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffParameters::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffParameters::InternalSwap(PiffParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matrix_k_.InternalSwap(&other->matrix_k_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffParameters, speed_kph_)
      + sizeof(PiffParameters::speed_kph_)
      - PROTOBUF_FIELD_OFFSET(PiffParameters, curvature_)>(
          reinterpret_cast<char*>(&curvature_),
          reinterpret_cast<char*>(&other->curvature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffMeanFilterSwitch::InitAsDefaultInstance() {
}
class PiffMeanFilterSwitch::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffMeanFilterSwitch>()._has_bits_);
  static void set_has_enable_center_line_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_center_line_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_center_line_c2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_speed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PiffMeanFilterSwitch::PiffMeanFilterSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffMeanFilterSwitch)
}
PiffMeanFilterSwitch::PiffMeanFilterSwitch(const PiffMeanFilterSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_center_line_c0_, &from.enable_center_line_c0_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_yaw_rate_) -
    reinterpret_cast<char*>(&enable_center_line_c0_)) + sizeof(enable_yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:control.PiffMeanFilterSwitch)
}

void PiffMeanFilterSwitch::SharedCtor() {
  ::memset(&enable_center_line_c0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_yaw_rate_) -
      reinterpret_cast<char*>(&enable_center_line_c0_)) + sizeof(enable_yaw_rate_));
}

PiffMeanFilterSwitch::~PiffMeanFilterSwitch() {
  // @@protoc_insertion_point(destructor:control.PiffMeanFilterSwitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffMeanFilterSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffMeanFilterSwitch::ArenaDtor(void* object) {
  PiffMeanFilterSwitch* _this = reinterpret_cast< PiffMeanFilterSwitch* >(object);
  (void)_this;
}
void PiffMeanFilterSwitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffMeanFilterSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffMeanFilterSwitch& PiffMeanFilterSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffMeanFilterSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffMeanFilterSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffMeanFilterSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&enable_center_line_c0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_yaw_rate_) -
        reinterpret_cast<char*>(&enable_center_line_c0_)) + sizeof(enable_yaw_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffMeanFilterSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_center_line_c0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_center_line_c0(&has_bits);
          enable_center_line_c0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_center_line_c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_center_line_c1(&has_bits);
          enable_center_line_c1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_center_line_c2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_center_line_c2(&has_bits);
          enable_center_line_c2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_speed_mps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_speed_mps(&has_bits);
          enable_speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_yaw_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_yaw_rate(&has_bits);
          enable_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffMeanFilterSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffMeanFilterSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_center_line_c0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_center_line_c0(), target);
  }

  // required bool enable_center_line_c1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_center_line_c1(), target);
  }

  // required bool enable_center_line_c2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_center_line_c2(), target);
  }

  // required bool enable_speed_mps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_speed_mps(), target);
  }

  // required bool enable_yaw_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_yaw_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffMeanFilterSwitch)
  return target;
}

size_t PiffMeanFilterSwitch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffMeanFilterSwitch)
  size_t total_size = 0;

  if (_internal_has_enable_center_line_c0()) {
    // required bool enable_center_line_c0 = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_center_line_c1()) {
    // required bool enable_center_line_c1 = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_center_line_c2()) {
    // required bool enable_center_line_c2 = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_speed_mps()) {
    // required bool enable_speed_mps = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_yaw_rate()) {
    // required bool enable_yaw_rate = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PiffMeanFilterSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffMeanFilterSwitch)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bool enable_center_line_c0 = 1;
    total_size += 1 + 1;

    // required bool enable_center_line_c1 = 2;
    total_size += 1 + 1;

    // required bool enable_center_line_c2 = 3;
    total_size += 1 + 1;

    // required bool enable_speed_mps = 4;
    total_size += 1 + 1;

    // required bool enable_yaw_rate = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffMeanFilterSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffMeanFilterSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffMeanFilterSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffMeanFilterSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffMeanFilterSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffMeanFilterSwitch)
    MergeFrom(*source);
  }
}

void PiffMeanFilterSwitch::MergeFrom(const PiffMeanFilterSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffMeanFilterSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_center_line_c0_ = from.enable_center_line_c0_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_center_line_c1_ = from.enable_center_line_c1_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_center_line_c2_ = from.enable_center_line_c2_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_speed_mps_ = from.enable_speed_mps_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_yaw_rate_ = from.enable_yaw_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffMeanFilterSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffMeanFilterSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffMeanFilterSwitch::CopyFrom(const PiffMeanFilterSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffMeanFilterSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffMeanFilterSwitch::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffMeanFilterSwitch::InternalSwap(PiffMeanFilterSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffMeanFilterSwitch, enable_yaw_rate_)
      + sizeof(PiffMeanFilterSwitch::enable_yaw_rate_)
      - PROTOBUF_FIELD_OFFSET(PiffMeanFilterSwitch, enable_center_line_c0_)>(
          reinterpret_cast<char*>(&enable_center_line_c0_),
          reinterpret_cast<char*>(&other->enable_center_line_c0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffMeanFilterSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffMeanFilterWindowSize::InitAsDefaultInstance() {
}
class PiffMeanFilterWindowSize::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffMeanFilterWindowSize>()._has_bits_);
  static void set_has_center_line_c0_mfws(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_center_line_c1_mfws(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_center_line_c2_mfws(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed_mps_mfws(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_yaw_rate_mfws(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PiffMeanFilterWindowSize::PiffMeanFilterWindowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffMeanFilterWindowSize)
}
PiffMeanFilterWindowSize::PiffMeanFilterWindowSize(const PiffMeanFilterWindowSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_line_c0_mfws_, &from.center_line_c0_mfws_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_mfws_) -
    reinterpret_cast<char*>(&center_line_c0_mfws_)) + sizeof(yaw_rate_mfws_));
  // @@protoc_insertion_point(copy_constructor:control.PiffMeanFilterWindowSize)
}

void PiffMeanFilterWindowSize::SharedCtor() {
  ::memset(&center_line_c0_mfws_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_mfws_) -
      reinterpret_cast<char*>(&center_line_c0_mfws_)) + sizeof(yaw_rate_mfws_));
}

PiffMeanFilterWindowSize::~PiffMeanFilterWindowSize() {
  // @@protoc_insertion_point(destructor:control.PiffMeanFilterWindowSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffMeanFilterWindowSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffMeanFilterWindowSize::ArenaDtor(void* object) {
  PiffMeanFilterWindowSize* _this = reinterpret_cast< PiffMeanFilterWindowSize* >(object);
  (void)_this;
}
void PiffMeanFilterWindowSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffMeanFilterWindowSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffMeanFilterWindowSize& PiffMeanFilterWindowSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffMeanFilterWindowSize_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffMeanFilterWindowSize::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffMeanFilterWindowSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&center_line_c0_mfws_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_rate_mfws_) -
        reinterpret_cast<char*>(&center_line_c0_mfws_)) + sizeof(yaw_rate_mfws_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffMeanFilterWindowSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 center_line_c0_mfws = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_center_line_c0_mfws(&has_bits);
          center_line_c0_mfws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 center_line_c1_mfws = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_center_line_c1_mfws(&has_bits);
          center_line_c1_mfws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 center_line_c2_mfws = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_center_line_c2_mfws(&has_bits);
          center_line_c2_mfws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 speed_mps_mfws = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_speed_mps_mfws(&has_bits);
          speed_mps_mfws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 yaw_rate_mfws = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_yaw_rate_mfws(&has_bits);
          yaw_rate_mfws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffMeanFilterWindowSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffMeanFilterWindowSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 center_line_c0_mfws = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_center_line_c0_mfws(), target);
  }

  // required int32 center_line_c1_mfws = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_center_line_c1_mfws(), target);
  }

  // required int32 center_line_c2_mfws = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_center_line_c2_mfws(), target);
  }

  // required int32 speed_mps_mfws = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_speed_mps_mfws(), target);
  }

  // required int32 yaw_rate_mfws = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_yaw_rate_mfws(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffMeanFilterWindowSize)
  return target;
}

size_t PiffMeanFilterWindowSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffMeanFilterWindowSize)
  size_t total_size = 0;

  if (_internal_has_center_line_c0_mfws()) {
    // required int32 center_line_c0_mfws = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_line_c0_mfws());
  }

  if (_internal_has_center_line_c1_mfws()) {
    // required int32 center_line_c1_mfws = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_line_c1_mfws());
  }

  if (_internal_has_center_line_c2_mfws()) {
    // required int32 center_line_c2_mfws = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_line_c2_mfws());
  }

  if (_internal_has_speed_mps_mfws()) {
    // required int32 speed_mps_mfws = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed_mps_mfws());
  }

  if (_internal_has_yaw_rate_mfws()) {
    // required int32 yaw_rate_mfws = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yaw_rate_mfws());
  }

  return total_size;
}
size_t PiffMeanFilterWindowSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffMeanFilterWindowSize)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 center_line_c0_mfws = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_line_c0_mfws());

    // required int32 center_line_c1_mfws = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_line_c1_mfws());

    // required int32 center_line_c2_mfws = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_line_c2_mfws());

    // required int32 speed_mps_mfws = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed_mps_mfws());

    // required int32 yaw_rate_mfws = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yaw_rate_mfws());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffMeanFilterWindowSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffMeanFilterWindowSize)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffMeanFilterWindowSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffMeanFilterWindowSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffMeanFilterWindowSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffMeanFilterWindowSize)
    MergeFrom(*source);
  }
}

void PiffMeanFilterWindowSize::MergeFrom(const PiffMeanFilterWindowSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffMeanFilterWindowSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      center_line_c0_mfws_ = from.center_line_c0_mfws_;
    }
    if (cached_has_bits & 0x00000002u) {
      center_line_c1_mfws_ = from.center_line_c1_mfws_;
    }
    if (cached_has_bits & 0x00000004u) {
      center_line_c2_mfws_ = from.center_line_c2_mfws_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_mps_mfws_ = from.speed_mps_mfws_;
    }
    if (cached_has_bits & 0x00000010u) {
      yaw_rate_mfws_ = from.yaw_rate_mfws_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffMeanFilterWindowSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffMeanFilterWindowSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffMeanFilterWindowSize::CopyFrom(const PiffMeanFilterWindowSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffMeanFilterWindowSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffMeanFilterWindowSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffMeanFilterWindowSize::InternalSwap(PiffMeanFilterWindowSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffMeanFilterWindowSize, yaw_rate_mfws_)
      + sizeof(PiffMeanFilterWindowSize::yaw_rate_mfws_)
      - PROTOBUF_FIELD_OFFSET(PiffMeanFilterWindowSize, center_line_c0_mfws_)>(
          reinterpret_cast<char*>(&center_line_c0_mfws_),
          reinterpret_cast<char*>(&other->center_line_c0_mfws_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffMeanFilterWindowSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffMeanFilterConfig::InitAsDefaultInstance() {
  ::control::_PiffMeanFilterConfig_default_instance_._instance.get_mutable()->filter_switch_ = const_cast< ::control::PiffMeanFilterSwitch*>(
      ::control::PiffMeanFilterSwitch::internal_default_instance());
  ::control::_PiffMeanFilterConfig_default_instance_._instance.get_mutable()->window_size_ = const_cast< ::control::PiffMeanFilterWindowSize*>(
      ::control::PiffMeanFilterWindowSize::internal_default_instance());
}
class PiffMeanFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffMeanFilterConfig>()._has_bits_);
  static const ::control::PiffMeanFilterSwitch& filter_switch(const PiffMeanFilterConfig* msg);
  static void set_has_filter_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::PiffMeanFilterWindowSize& window_size(const PiffMeanFilterConfig* msg);
  static void set_has_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::control::PiffMeanFilterSwitch&
PiffMeanFilterConfig::_Internal::filter_switch(const PiffMeanFilterConfig* msg) {
  return *msg->filter_switch_;
}
const ::control::PiffMeanFilterWindowSize&
PiffMeanFilterConfig::_Internal::window_size(const PiffMeanFilterConfig* msg) {
  return *msg->window_size_;
}
PiffMeanFilterConfig::PiffMeanFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffMeanFilterConfig)
}
PiffMeanFilterConfig::PiffMeanFilterConfig(const PiffMeanFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter_switch()) {
    filter_switch_ = new ::control::PiffMeanFilterSwitch(*from.filter_switch_);
  } else {
    filter_switch_ = nullptr;
  }
  if (from._internal_has_window_size()) {
    window_size_ = new ::control::PiffMeanFilterWindowSize(*from.window_size_);
  } else {
    window_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.PiffMeanFilterConfig)
}

void PiffMeanFilterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&filter_switch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_size_) -
      reinterpret_cast<char*>(&filter_switch_)) + sizeof(window_size_));
}

PiffMeanFilterConfig::~PiffMeanFilterConfig() {
  // @@protoc_insertion_point(destructor:control.PiffMeanFilterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffMeanFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_switch_;
  if (this != internal_default_instance()) delete window_size_;
}

void PiffMeanFilterConfig::ArenaDtor(void* object) {
  PiffMeanFilterConfig* _this = reinterpret_cast< PiffMeanFilterConfig* >(object);
  (void)_this;
}
void PiffMeanFilterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffMeanFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffMeanFilterConfig& PiffMeanFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffMeanFilterConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffMeanFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffMeanFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filter_switch_ != nullptr);
      filter_switch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(window_size_ != nullptr);
      window_size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffMeanFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .control.PiffMeanFilterSwitch filter_switch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_switch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffMeanFilterWindowSize window_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffMeanFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffMeanFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .control.PiffMeanFilterSwitch filter_switch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter_switch(this), target, stream);
  }

  // required .control.PiffMeanFilterWindowSize window_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::window_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffMeanFilterConfig)
  return target;
}

size_t PiffMeanFilterConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffMeanFilterConfig)
  size_t total_size = 0;

  if (_internal_has_filter_switch()) {
    // required .control.PiffMeanFilterSwitch filter_switch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_switch_);
  }

  if (_internal_has_window_size()) {
    // required .control.PiffMeanFilterWindowSize window_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_size_);
  }

  return total_size;
}
size_t PiffMeanFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffMeanFilterConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .control.PiffMeanFilterSwitch filter_switch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_switch_);

    // required .control.PiffMeanFilterWindowSize window_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffMeanFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffMeanFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffMeanFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffMeanFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffMeanFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffMeanFilterConfig)
    MergeFrom(*source);
  }
}

void PiffMeanFilterConfig::MergeFrom(const PiffMeanFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffMeanFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filter_switch()->::control::PiffMeanFilterSwitch::MergeFrom(from._internal_filter_switch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_window_size()->::control::PiffMeanFilterWindowSize::MergeFrom(from._internal_window_size());
    }
  }
}

void PiffMeanFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffMeanFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffMeanFilterConfig::CopyFrom(const PiffMeanFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffMeanFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffMeanFilterConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_filter_switch()) {
    if (!filter_switch_->IsInitialized()) return false;
  }
  if (_internal_has_window_size()) {
    if (!window_size_->IsInitialized()) return false;
  }
  return true;
}

void PiffMeanFilterConfig::InternalSwap(PiffMeanFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffMeanFilterConfig, window_size_)
      + sizeof(PiffMeanFilterConfig::window_size_)
      - PROTOBUF_FIELD_OFFSET(PiffMeanFilterConfig, filter_switch_)>(
          reinterpret_cast<char*>(&filter_switch_),
          reinterpret_cast<char*>(&other->filter_switch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffMeanFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffControllerContentRateConfig::InitAsDefaultInstance() {
}
class PiffControllerContentRateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffControllerContentRateConfig>()._has_bits_);
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_kph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ff_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fb_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PiffControllerContentRateConfig::PiffControllerContentRateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffControllerContentRateConfig)
}
PiffControllerContentRateConfig::PiffControllerContentRateConfig(const PiffControllerContentRateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&curvature_, &from.curvature_,
    static_cast<size_t>(reinterpret_cast<char*>(&fb_rate_) -
    reinterpret_cast<char*>(&curvature_)) + sizeof(fb_rate_));
  // @@protoc_insertion_point(copy_constructor:control.PiffControllerContentRateConfig)
}

void PiffControllerContentRateConfig::SharedCtor() {
  ::memset(&curvature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fb_rate_) -
      reinterpret_cast<char*>(&curvature_)) + sizeof(fb_rate_));
}

PiffControllerContentRateConfig::~PiffControllerContentRateConfig() {
  // @@protoc_insertion_point(destructor:control.PiffControllerContentRateConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffControllerContentRateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffControllerContentRateConfig::ArenaDtor(void* object) {
  PiffControllerContentRateConfig* _this = reinterpret_cast< PiffControllerContentRateConfig* >(object);
  (void)_this;
}
void PiffControllerContentRateConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffControllerContentRateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffControllerContentRateConfig& PiffControllerContentRateConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffControllerContentRateConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffControllerContentRateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffControllerContentRateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&curvature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fb_rate_) -
        reinterpret_cast<char*>(&curvature_)) + sizeof(fb_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffControllerContentRateConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float curvature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_curvature(&has_bits);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float speed_kph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_speed_kph(&has_bits);
          speed_kph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float ff_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ff_rate(&has_bits);
          ff_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float fb_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_fb_rate(&has_bits);
          fb_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffControllerContentRateConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffControllerContentRateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float curvature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_curvature(), target);
  }

  // required float speed_kph = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_kph(), target);
  }

  // required float ff_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ff_rate(), target);
  }

  // required float fb_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fb_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffControllerContentRateConfig)
  return target;
}

size_t PiffControllerContentRateConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffControllerContentRateConfig)
  size_t total_size = 0;

  if (_internal_has_curvature()) {
    // required float curvature = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_speed_kph()) {
    // required float speed_kph = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_ff_rate()) {
    // required float ff_rate = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_fb_rate()) {
    // required float fb_rate = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffControllerContentRateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffControllerContentRateConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float curvature = 1;
    total_size += 1 + 4;

    // required float speed_kph = 2;
    total_size += 1 + 4;

    // required float ff_rate = 3;
    total_size += 1 + 4;

    // required float fb_rate = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffControllerContentRateConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffControllerContentRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffControllerContentRateConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffControllerContentRateConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffControllerContentRateConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffControllerContentRateConfig)
    MergeFrom(*source);
  }
}

void PiffControllerContentRateConfig::MergeFrom(const PiffControllerContentRateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffControllerContentRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_kph_ = from.speed_kph_;
    }
    if (cached_has_bits & 0x00000004u) {
      ff_rate_ = from.ff_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      fb_rate_ = from.fb_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffControllerContentRateConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffControllerContentRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffControllerContentRateConfig::CopyFrom(const PiffControllerContentRateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffControllerContentRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffControllerContentRateConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffControllerContentRateConfig::InternalSwap(PiffControllerContentRateConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffControllerContentRateConfig, fb_rate_)
      + sizeof(PiffControllerContentRateConfig::fb_rate_)
      - PROTOBUF_FIELD_OFFSET(PiffControllerContentRateConfig, curvature_)>(
          reinterpret_cast<char*>(&curvature_),
          reinterpret_cast<char*>(&other->curvature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffControllerContentRateConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffLinearModeIntegratorConfig::InitAsDefaultInstance() {
}
class PiffLinearModeIntegratorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffLinearModeIntegratorConfig>()._has_bits_);
  static void set_has_ki_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PiffLinearModeIntegratorConfig::PiffLinearModeIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ki_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffLinearModeIntegratorConfig)
}
PiffLinearModeIntegratorConfig::PiffLinearModeIntegratorConfig(const PiffLinearModeIntegratorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ki_(from.ki_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ki_mode_ = from.ki_mode_;
  // @@protoc_insertion_point(copy_constructor:control.PiffLinearModeIntegratorConfig)
}

void PiffLinearModeIntegratorConfig::SharedCtor() {
  ki_mode_ = 0;
}

PiffLinearModeIntegratorConfig::~PiffLinearModeIntegratorConfig() {
  // @@protoc_insertion_point(destructor:control.PiffLinearModeIntegratorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffLinearModeIntegratorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffLinearModeIntegratorConfig::ArenaDtor(void* object) {
  PiffLinearModeIntegratorConfig* _this = reinterpret_cast< PiffLinearModeIntegratorConfig* >(object);
  (void)_this;
}
void PiffLinearModeIntegratorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffLinearModeIntegratorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffLinearModeIntegratorConfig& PiffLinearModeIntegratorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffLinearModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffLinearModeIntegratorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffLinearModeIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ki_.Clear();
  ki_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffLinearModeIntegratorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 ki_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ki_mode(&has_bits);
          ki_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float ki = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ki(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ki(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffLinearModeIntegratorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffLinearModeIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ki_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ki_mode(), target);
  }

  // repeated float ki = 2;
  for (int i = 0, n = this->_internal_ki_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ki(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffLinearModeIntegratorConfig)
  return target;
}

size_t PiffLinearModeIntegratorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffLinearModeIntegratorConfig)
  size_t total_size = 0;

  // required int32 ki_mode = 1;
  if (_internal_has_ki_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ki_mode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ki = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ki_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ki_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffLinearModeIntegratorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffLinearModeIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffLinearModeIntegratorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffLinearModeIntegratorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffLinearModeIntegratorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffLinearModeIntegratorConfig)
    MergeFrom(*source);
  }
}

void PiffLinearModeIntegratorConfig::MergeFrom(const PiffLinearModeIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffLinearModeIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ki_.MergeFrom(from.ki_);
  if (from._internal_has_ki_mode()) {
    _internal_set_ki_mode(from._internal_ki_mode());
  }
}

void PiffLinearModeIntegratorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffLinearModeIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffLinearModeIntegratorConfig::CopyFrom(const PiffLinearModeIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffLinearModeIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffLinearModeIntegratorConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffLinearModeIntegratorConfig::InternalSwap(PiffLinearModeIntegratorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ki_.InternalSwap(&other->ki_);
  swap(ki_mode_, other->ki_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffLinearModeIntegratorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffPercentageModeIntegratorConfig::InitAsDefaultInstance() {
}
class PiffPercentageModeIntegratorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffPercentageModeIntegratorConfig>()._has_bits_);
  static void set_has_track_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_lateral_err_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_lateral_err_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_heading_err_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_heading_err_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PiffPercentageModeIntegratorConfig::PiffPercentageModeIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffPercentageModeIntegratorConfig)
}
PiffPercentageModeIntegratorConfig::PiffPercentageModeIntegratorConfig(const PiffPercentageModeIntegratorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&track_percentage_, &from.track_percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_heading_err_rate_contribution_) -
    reinterpret_cast<char*>(&track_percentage_)) + sizeof(enable_heading_err_rate_contribution_));
  // @@protoc_insertion_point(copy_constructor:control.PiffPercentageModeIntegratorConfig)
}

void PiffPercentageModeIntegratorConfig::SharedCtor() {
  ::memset(&track_percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_heading_err_rate_contribution_) -
      reinterpret_cast<char*>(&track_percentage_)) + sizeof(enable_heading_err_rate_contribution_));
}

PiffPercentageModeIntegratorConfig::~PiffPercentageModeIntegratorConfig() {
  // @@protoc_insertion_point(destructor:control.PiffPercentageModeIntegratorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffPercentageModeIntegratorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffPercentageModeIntegratorConfig::ArenaDtor(void* object) {
  PiffPercentageModeIntegratorConfig* _this = reinterpret_cast< PiffPercentageModeIntegratorConfig* >(object);
  (void)_this;
}
void PiffPercentageModeIntegratorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffPercentageModeIntegratorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffPercentageModeIntegratorConfig& PiffPercentageModeIntegratorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffPercentageModeIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffPercentageModeIntegratorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffPercentageModeIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&track_percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_heading_err_rate_contribution_) -
        reinterpret_cast<char*>(&track_percentage_)) + sizeof(enable_heading_err_rate_contribution_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffPercentageModeIntegratorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float track_percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_track_percentage(&has_bits);
          track_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool enable_lateral_err_contribution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_lateral_err_contribution(&has_bits);
          enable_lateral_err_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_lateral_err_rate_contribution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_lateral_err_rate_contribution(&has_bits);
          enable_lateral_err_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_heading_err_contribution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_heading_err_contribution(&has_bits);
          enable_heading_err_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_heading_err_rate_contribution = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_heading_err_rate_contribution(&has_bits);
          enable_heading_err_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffPercentageModeIntegratorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffPercentageModeIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float track_percentage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_track_percentage(), target);
  }

  // required bool enable_lateral_err_contribution = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_lateral_err_contribution(), target);
  }

  // required bool enable_lateral_err_rate_contribution = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_lateral_err_rate_contribution(), target);
  }

  // required bool enable_heading_err_contribution = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_heading_err_contribution(), target);
  }

  // required bool enable_heading_err_rate_contribution = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_heading_err_rate_contribution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffPercentageModeIntegratorConfig)
  return target;
}

size_t PiffPercentageModeIntegratorConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffPercentageModeIntegratorConfig)
  size_t total_size = 0;

  if (_internal_has_track_percentage()) {
    // required float track_percentage = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_enable_lateral_err_contribution()) {
    // required bool enable_lateral_err_contribution = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_lateral_err_rate_contribution()) {
    // required bool enable_lateral_err_rate_contribution = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_heading_err_contribution()) {
    // required bool enable_heading_err_contribution = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_heading_err_rate_contribution()) {
    // required bool enable_heading_err_rate_contribution = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PiffPercentageModeIntegratorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffPercentageModeIntegratorConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float track_percentage = 1;
    total_size += 1 + 4;

    // required bool enable_lateral_err_contribution = 2;
    total_size += 1 + 1;

    // required bool enable_lateral_err_rate_contribution = 3;
    total_size += 1 + 1;

    // required bool enable_heading_err_contribution = 4;
    total_size += 1 + 1;

    // required bool enable_heading_err_rate_contribution = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffPercentageModeIntegratorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffPercentageModeIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffPercentageModeIntegratorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffPercentageModeIntegratorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffPercentageModeIntegratorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffPercentageModeIntegratorConfig)
    MergeFrom(*source);
  }
}

void PiffPercentageModeIntegratorConfig::MergeFrom(const PiffPercentageModeIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffPercentageModeIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      track_percentage_ = from.track_percentage_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_lateral_err_contribution_ = from.enable_lateral_err_contribution_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_lateral_err_rate_contribution_ = from.enable_lateral_err_rate_contribution_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_heading_err_contribution_ = from.enable_heading_err_contribution_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_heading_err_rate_contribution_ = from.enable_heading_err_rate_contribution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffPercentageModeIntegratorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffPercentageModeIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffPercentageModeIntegratorConfig::CopyFrom(const PiffPercentageModeIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffPercentageModeIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffPercentageModeIntegratorConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffPercentageModeIntegratorConfig::InternalSwap(PiffPercentageModeIntegratorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffPercentageModeIntegratorConfig, enable_heading_err_rate_contribution_)
      + sizeof(PiffPercentageModeIntegratorConfig::enable_heading_err_rate_contribution_)
      - PROTOBUF_FIELD_OFFSET(PiffPercentageModeIntegratorConfig, track_percentage_)>(
          reinterpret_cast<char*>(&track_percentage_),
          reinterpret_cast<char*>(&other->track_percentage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffPercentageModeIntegratorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffProtectIntegratorConfig::InitAsDefaultInstance() {
}
class PiffProtectIntegratorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffProtectIntegratorConfig>()._has_bits_);
  static void set_has_flag_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frames_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PiffProtectIntegratorConfig::PiffProtectIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffProtectIntegratorConfig)
}
PiffProtectIntegratorConfig::PiffProtectIntegratorConfig(const PiffProtectIntegratorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flag_protection_, &from.flag_protection_,
    static_cast<size_t>(reinterpret_cast<char*>(&frames_protection_) -
    reinterpret_cast<char*>(&flag_protection_)) + sizeof(frames_protection_));
  // @@protoc_insertion_point(copy_constructor:control.PiffProtectIntegratorConfig)
}

void PiffProtectIntegratorConfig::SharedCtor() {
  ::memset(&flag_protection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frames_protection_) -
      reinterpret_cast<char*>(&flag_protection_)) + sizeof(frames_protection_));
}

PiffProtectIntegratorConfig::~PiffProtectIntegratorConfig() {
  // @@protoc_insertion_point(destructor:control.PiffProtectIntegratorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffProtectIntegratorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffProtectIntegratorConfig::ArenaDtor(void* object) {
  PiffProtectIntegratorConfig* _this = reinterpret_cast< PiffProtectIntegratorConfig* >(object);
  (void)_this;
}
void PiffProtectIntegratorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffProtectIntegratorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffProtectIntegratorConfig& PiffProtectIntegratorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffProtectIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffProtectIntegratorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffProtectIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&flag_protection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frames_protection_) -
        reinterpret_cast<char*>(&flag_protection_)) + sizeof(frames_protection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffProtectIntegratorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool flag_protection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag_protection(&has_bits);
          flag_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 frames_protection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frames_protection(&has_bits);
          frames_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffProtectIntegratorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffProtectIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool flag_protection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag_protection(), target);
  }

  // required int32 frames_protection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frames_protection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffProtectIntegratorConfig)
  return target;
}

size_t PiffProtectIntegratorConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffProtectIntegratorConfig)
  size_t total_size = 0;

  if (_internal_has_flag_protection()) {
    // required bool flag_protection = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_frames_protection()) {
    // required int32 frames_protection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frames_protection());
  }

  return total_size;
}
size_t PiffProtectIntegratorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffProtectIntegratorConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool flag_protection = 1;
    total_size += 1 + 1;

    // required int32 frames_protection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frames_protection());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffProtectIntegratorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffProtectIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffProtectIntegratorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffProtectIntegratorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffProtectIntegratorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffProtectIntegratorConfig)
    MergeFrom(*source);
  }
}

void PiffProtectIntegratorConfig::MergeFrom(const PiffProtectIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffProtectIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      flag_protection_ = from.flag_protection_;
    }
    if (cached_has_bits & 0x00000002u) {
      frames_protection_ = from.frames_protection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffProtectIntegratorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffProtectIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffProtectIntegratorConfig::CopyFrom(const PiffProtectIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffProtectIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffProtectIntegratorConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffProtectIntegratorConfig::InternalSwap(PiffProtectIntegratorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffProtectIntegratorConfig, frames_protection_)
      + sizeof(PiffProtectIntegratorConfig::frames_protection_)
      - PROTOBUF_FIELD_OFFSET(PiffProtectIntegratorConfig, flag_protection_)>(
          reinterpret_cast<char*>(&flag_protection_),
          reinterpret_cast<char*>(&other->flag_protection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffProtectIntegratorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffIntegratorConfig::InitAsDefaultInstance() {
  ::control::_PiffIntegratorConfig_default_instance_._instance.get_mutable()->linear_mode_integrator_conf_ = const_cast< ::control::PiffLinearModeIntegratorConfig*>(
      ::control::PiffLinearModeIntegratorConfig::internal_default_instance());
  ::control::_PiffIntegratorConfig_default_instance_._instance.get_mutable()->percentage_mode_integrator_conf_ = const_cast< ::control::PiffPercentageModeIntegratorConfig*>(
      ::control::PiffPercentageModeIntegratorConfig::internal_default_instance());
  ::control::_PiffIntegratorConfig_default_instance_._instance.get_mutable()->protect_integrator_conf_ = const_cast< ::control::PiffProtectIntegratorConfig*>(
      ::control::PiffProtectIntegratorConfig::internal_default_instance());
}
class PiffIntegratorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffIntegratorConfig>()._has_bits_);
  static void set_has_enable_integrator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steering_saturation_level_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mode_integrator(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::PiffLinearModeIntegratorConfig& linear_mode_integrator_conf(const PiffIntegratorConfig* msg);
  static void set_has_linear_mode_integrator_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::PiffPercentageModeIntegratorConfig& percentage_mode_integrator_conf(const PiffIntegratorConfig* msg);
  static void set_has_percentage_mode_integrator_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::PiffProtectIntegratorConfig& protect_integrator_conf(const PiffIntegratorConfig* msg);
  static void set_has_protect_integrator_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::control::PiffLinearModeIntegratorConfig&
PiffIntegratorConfig::_Internal::linear_mode_integrator_conf(const PiffIntegratorConfig* msg) {
  return *msg->linear_mode_integrator_conf_;
}
const ::control::PiffPercentageModeIntegratorConfig&
PiffIntegratorConfig::_Internal::percentage_mode_integrator_conf(const PiffIntegratorConfig* msg) {
  return *msg->percentage_mode_integrator_conf_;
}
const ::control::PiffProtectIntegratorConfig&
PiffIntegratorConfig::_Internal::protect_integrator_conf(const PiffIntegratorConfig* msg) {
  return *msg->protect_integrator_conf_;
}
PiffIntegratorConfig::PiffIntegratorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffIntegratorConfig)
}
PiffIntegratorConfig::PiffIntegratorConfig(const PiffIntegratorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_mode_integrator_conf()) {
    linear_mode_integrator_conf_ = new ::control::PiffLinearModeIntegratorConfig(*from.linear_mode_integrator_conf_);
  } else {
    linear_mode_integrator_conf_ = nullptr;
  }
  if (from._internal_has_percentage_mode_integrator_conf()) {
    percentage_mode_integrator_conf_ = new ::control::PiffPercentageModeIntegratorConfig(*from.percentage_mode_integrator_conf_);
  } else {
    percentage_mode_integrator_conf_ = nullptr;
  }
  if (from._internal_has_protect_integrator_conf()) {
    protect_integrator_conf_ = new ::control::PiffProtectIntegratorConfig(*from.protect_integrator_conf_);
  } else {
    protect_integrator_conf_ = nullptr;
  }
  ::memcpy(&enable_integrator_, &from.enable_integrator_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_integrator_) -
    reinterpret_cast<char*>(&enable_integrator_)) + sizeof(mode_integrator_));
  // @@protoc_insertion_point(copy_constructor:control.PiffIntegratorConfig)
}

void PiffIntegratorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&linear_mode_integrator_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_integrator_) -
      reinterpret_cast<char*>(&linear_mode_integrator_conf_)) + sizeof(mode_integrator_));
}

PiffIntegratorConfig::~PiffIntegratorConfig() {
  // @@protoc_insertion_point(destructor:control.PiffIntegratorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffIntegratorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_mode_integrator_conf_;
  if (this != internal_default_instance()) delete percentage_mode_integrator_conf_;
  if (this != internal_default_instance()) delete protect_integrator_conf_;
}

void PiffIntegratorConfig::ArenaDtor(void* object) {
  PiffIntegratorConfig* _this = reinterpret_cast< PiffIntegratorConfig* >(object);
  (void)_this;
}
void PiffIntegratorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffIntegratorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffIntegratorConfig& PiffIntegratorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffIntegratorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffIntegratorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linear_mode_integrator_conf_ != nullptr);
      linear_mode_integrator_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(percentage_mode_integrator_conf_ != nullptr);
      percentage_mode_integrator_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(protect_integrator_conf_ != nullptr);
      protect_integrator_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&enable_integrator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_integrator_) -
        reinterpret_cast<char*>(&enable_integrator_)) + sizeof(mode_integrator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffIntegratorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_integrator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_integrator(&has_bits);
          enable_integrator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float steering_saturation_level_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_steering_saturation_level_deg(&has_bits);
          steering_saturation_level_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 mode_integrator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mode_integrator(&has_bits);
          mode_integrator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffLinearModeIntegratorConfig linear_mode_integrator_conf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_mode_integrator_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffPercentageModeIntegratorConfig percentage_mode_integrator_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_percentage_mode_integrator_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffProtectIntegratorConfig protect_integrator_conf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_protect_integrator_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffIntegratorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffIntegratorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_integrator = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_integrator(), target);
  }

  // required float steering_saturation_level_deg = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_steering_saturation_level_deg(), target);
  }

  // required int32 mode_integrator = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode_integrator(), target);
  }

  // required .control.PiffLinearModeIntegratorConfig linear_mode_integrator_conf = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linear_mode_integrator_conf(this), target, stream);
  }

  // required .control.PiffPercentageModeIntegratorConfig percentage_mode_integrator_conf = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::percentage_mode_integrator_conf(this), target, stream);
  }

  // required .control.PiffProtectIntegratorConfig protect_integrator_conf = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::protect_integrator_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffIntegratorConfig)
  return target;
}

size_t PiffIntegratorConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffIntegratorConfig)
  size_t total_size = 0;

  if (_internal_has_linear_mode_integrator_conf()) {
    // required .control.PiffLinearModeIntegratorConfig linear_mode_integrator_conf = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_mode_integrator_conf_);
  }

  if (_internal_has_percentage_mode_integrator_conf()) {
    // required .control.PiffPercentageModeIntegratorConfig percentage_mode_integrator_conf = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *percentage_mode_integrator_conf_);
  }

  if (_internal_has_protect_integrator_conf()) {
    // required .control.PiffProtectIntegratorConfig protect_integrator_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protect_integrator_conf_);
  }

  if (_internal_has_enable_integrator()) {
    // required bool enable_integrator = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_steering_saturation_level_deg()) {
    // required float steering_saturation_level_deg = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_mode_integrator()) {
    // required int32 mode_integrator = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode_integrator());
  }

  return total_size;
}
size_t PiffIntegratorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffIntegratorConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .control.PiffLinearModeIntegratorConfig linear_mode_integrator_conf = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_mode_integrator_conf_);

    // required .control.PiffPercentageModeIntegratorConfig percentage_mode_integrator_conf = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *percentage_mode_integrator_conf_);

    // required .control.PiffProtectIntegratorConfig protect_integrator_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protect_integrator_conf_);

    // required bool enable_integrator = 1;
    total_size += 1 + 1;

    // required float steering_saturation_level_deg = 2;
    total_size += 1 + 4;

    // required int32 mode_integrator = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode_integrator());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffIntegratorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffIntegratorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffIntegratorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffIntegratorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffIntegratorConfig)
    MergeFrom(*source);
  }
}

void PiffIntegratorConfig::MergeFrom(const PiffIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffIntegratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear_mode_integrator_conf()->::control::PiffLinearModeIntegratorConfig::MergeFrom(from._internal_linear_mode_integrator_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_percentage_mode_integrator_conf()->::control::PiffPercentageModeIntegratorConfig::MergeFrom(from._internal_percentage_mode_integrator_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_protect_integrator_conf()->::control::PiffProtectIntegratorConfig::MergeFrom(from._internal_protect_integrator_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      enable_integrator_ = from.enable_integrator_;
    }
    if (cached_has_bits & 0x00000010u) {
      steering_saturation_level_deg_ = from.steering_saturation_level_deg_;
    }
    if (cached_has_bits & 0x00000020u) {
      mode_integrator_ = from.mode_integrator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffIntegratorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffIntegratorConfig::CopyFrom(const PiffIntegratorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffIntegratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffIntegratorConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_linear_mode_integrator_conf()) {
    if (!linear_mode_integrator_conf_->IsInitialized()) return false;
  }
  if (_internal_has_percentage_mode_integrator_conf()) {
    if (!percentage_mode_integrator_conf_->IsInitialized()) return false;
  }
  if (_internal_has_protect_integrator_conf()) {
    if (!protect_integrator_conf_->IsInitialized()) return false;
  }
  return true;
}

void PiffIntegratorConfig::InternalSwap(PiffIntegratorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffIntegratorConfig, mode_integrator_)
      + sizeof(PiffIntegratorConfig::mode_integrator_)
      - PROTOBUF_FIELD_OFFSET(PiffIntegratorConfig, linear_mode_integrator_conf_)>(
          reinterpret_cast<char*>(&linear_mode_integrator_conf_),
          reinterpret_cast<char*>(&other->linear_mode_integrator_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffIntegratorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffCCSteeringFakeDeadZoneConfig::InitAsDefaultInstance() {
}
class PiffCCSteeringFakeDeadZoneConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffCCSteeringFakeDeadZoneConfig>()._has_bits_);
  static void set_has_enable_fake_dead_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lateral_error_m_fake_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading_error_rad_fake_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_fake_transition_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lateral_error_m_transition_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_error_rad_transition_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

PiffCCSteeringFakeDeadZoneConfig::PiffCCSteeringFakeDeadZoneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffCCSteeringFakeDeadZoneConfig)
}
PiffCCSteeringFakeDeadZoneConfig::PiffCCSteeringFakeDeadZoneConfig(const PiffCCSteeringFakeDeadZoneConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lateral_error_m_fake_zone_, &from.lateral_error_m_fake_zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&lateral_error_m_fake_zone_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:control.PiffCCSteeringFakeDeadZoneConfig)
}

void PiffCCSteeringFakeDeadZoneConfig::SharedCtor() {
  ::memset(&lateral_error_m_fake_zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&lateral_error_m_fake_zone_)) + sizeof(mode_));
}

PiffCCSteeringFakeDeadZoneConfig::~PiffCCSteeringFakeDeadZoneConfig() {
  // @@protoc_insertion_point(destructor:control.PiffCCSteeringFakeDeadZoneConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffCCSteeringFakeDeadZoneConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffCCSteeringFakeDeadZoneConfig::ArenaDtor(void* object) {
  PiffCCSteeringFakeDeadZoneConfig* _this = reinterpret_cast< PiffCCSteeringFakeDeadZoneConfig* >(object);
  (void)_this;
}
void PiffCCSteeringFakeDeadZoneConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffCCSteeringFakeDeadZoneConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffCCSteeringFakeDeadZoneConfig& PiffCCSteeringFakeDeadZoneConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffCCSteeringFakeDeadZoneConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffCCSteeringFakeDeadZoneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffCCSteeringFakeDeadZoneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&lateral_error_m_fake_zone_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&lateral_error_m_fake_zone_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffCCSteeringFakeDeadZoneConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_fake_dead_zone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_fake_dead_zone(&has_bits);
          enable_fake_dead_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float lateral_error_m_fake_zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lateral_error_m_fake_zone(&has_bits);
          lateral_error_m_fake_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading_error_rad_fake_zone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_heading_error_rad_fake_zone(&has_bits);
          heading_error_rad_fake_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool enable_fake_transition_zone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_fake_transition_zone(&has_bits);
          enable_fake_transition_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float lateral_error_m_transition_zone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_lateral_error_m_transition_zone(&has_bits);
          lateral_error_m_transition_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading_error_rad_transition_zone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_heading_error_rad_transition_zone(&has_bits);
          heading_error_rad_transition_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffCCSteeringFakeDeadZoneConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffCCSteeringFakeDeadZoneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_fake_dead_zone = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_fake_dead_zone(), target);
  }

  // required float lateral_error_m_fake_zone = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lateral_error_m_fake_zone(), target);
  }

  // required float heading_error_rad_fake_zone = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_heading_error_rad_fake_zone(), target);
  }

  // required bool enable_fake_transition_zone = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_fake_transition_zone(), target);
  }

  // required float lateral_error_m_transition_zone = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lateral_error_m_transition_zone(), target);
  }

  // required float heading_error_rad_transition_zone = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading_error_rad_transition_zone(), target);
  }

  // required int32 mode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffCCSteeringFakeDeadZoneConfig)
  return target;
}

size_t PiffCCSteeringFakeDeadZoneConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffCCSteeringFakeDeadZoneConfig)
  size_t total_size = 0;

  if (_internal_has_lateral_error_m_fake_zone()) {
    // required float lateral_error_m_fake_zone = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_enable_fake_dead_zone()) {
    // required bool enable_fake_dead_zone = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_fake_transition_zone()) {
    // required bool enable_fake_transition_zone = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_heading_error_rad_fake_zone()) {
    // required float heading_error_rad_fake_zone = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_lateral_error_m_transition_zone()) {
    // required float lateral_error_m_transition_zone = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_heading_error_rad_transition_zone()) {
    // required float heading_error_rad_transition_zone = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_mode()) {
    // required int32 mode = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  return total_size;
}
size_t PiffCCSteeringFakeDeadZoneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffCCSteeringFakeDeadZoneConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required float lateral_error_m_fake_zone = 2;
    total_size += 1 + 4;

    // required bool enable_fake_dead_zone = 1;
    total_size += 1 + 1;

    // required bool enable_fake_transition_zone = 4;
    total_size += 1 + 1;

    // required float heading_error_rad_fake_zone = 3;
    total_size += 1 + 4;

    // required float lateral_error_m_transition_zone = 5;
    total_size += 1 + 4;

    // required float heading_error_rad_transition_zone = 6;
    total_size += 1 + 4;

    // required int32 mode = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffCCSteeringFakeDeadZoneConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffCCSteeringFakeDeadZoneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffCCSteeringFakeDeadZoneConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffCCSteeringFakeDeadZoneConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffCCSteeringFakeDeadZoneConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffCCSteeringFakeDeadZoneConfig)
    MergeFrom(*source);
  }
}

void PiffCCSteeringFakeDeadZoneConfig::MergeFrom(const PiffCCSteeringFakeDeadZoneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffCCSteeringFakeDeadZoneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lateral_error_m_fake_zone_ = from.lateral_error_m_fake_zone_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_fake_dead_zone_ = from.enable_fake_dead_zone_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_fake_transition_zone_ = from.enable_fake_transition_zone_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_error_rad_fake_zone_ = from.heading_error_rad_fake_zone_;
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_error_m_transition_zone_ = from.lateral_error_m_transition_zone_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_error_rad_transition_zone_ = from.heading_error_rad_transition_zone_;
    }
    if (cached_has_bits & 0x00000040u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffCCSteeringFakeDeadZoneConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffCCSteeringFakeDeadZoneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffCCSteeringFakeDeadZoneConfig::CopyFrom(const PiffCCSteeringFakeDeadZoneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffCCSteeringFakeDeadZoneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffCCSteeringFakeDeadZoneConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffCCSteeringFakeDeadZoneConfig::InternalSwap(PiffCCSteeringFakeDeadZoneConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffCCSteeringFakeDeadZoneConfig, mode_)
      + sizeof(PiffCCSteeringFakeDeadZoneConfig::mode_)
      - PROTOBUF_FIELD_OFFSET(PiffCCSteeringFakeDeadZoneConfig, lateral_error_m_fake_zone_)>(
          reinterpret_cast<char*>(&lateral_error_m_fake_zone_),
          reinterpret_cast<char*>(&other->lateral_error_m_fake_zone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffCCSteeringFakeDeadZoneConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffControllerContentConfig::InitAsDefaultInstance() {
  ::control::_PiffControllerContentConfig_default_instance_._instance.get_mutable()->integrator_conf_ = const_cast< ::control::PiffIntegratorConfig*>(
      ::control::PiffIntegratorConfig::internal_default_instance());
  ::control::_PiffControllerContentConfig_default_instance_._instance.get_mutable()->steering_fake_dead_zone_conf_ = const_cast< ::control::PiffCCSteeringFakeDeadZoneConfig*>(
      ::control::PiffCCSteeringFakeDeadZoneConfig::internal_default_instance());
}
class PiffControllerContentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffControllerContentConfig>()._has_bits_);
  static void set_has_preview_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preview_time_ms_c01(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preview_time_ms_c2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_curvature_min_start_ff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::PiffIntegratorConfig& integrator_conf(const PiffControllerContentConfig* msg);
  static void set_has_integrator_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_bias_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::control::PiffCCSteeringFakeDeadZoneConfig& steering_fake_dead_zone_conf(const PiffControllerContentConfig* msg);
  static void set_has_steering_fake_dead_zone_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curvaturn_transition_ff(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::control::PiffIntegratorConfig&
PiffControllerContentConfig::_Internal::integrator_conf(const PiffControllerContentConfig* msg) {
  return *msg->integrator_conf_;
}
const ::control::PiffCCSteeringFakeDeadZoneConfig&
PiffControllerContentConfig::_Internal::steering_fake_dead_zone_conf(const PiffControllerContentConfig* msg) {
  return *msg->steering_fake_dead_zone_conf_;
}
PiffControllerContentConfig::PiffControllerContentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rate_conf_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffControllerContentConfig)
}
PiffControllerContentConfig::PiffControllerContentConfig(const PiffControllerContentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rate_conf_(from.rate_conf_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_integrator_conf()) {
    integrator_conf_ = new ::control::PiffIntegratorConfig(*from.integrator_conf_);
  } else {
    integrator_conf_ = nullptr;
  }
  if (from._internal_has_steering_fake_dead_zone_conf()) {
    steering_fake_dead_zone_conf_ = new ::control::PiffCCSteeringFakeDeadZoneConfig(*from.steering_fake_dead_zone_conf_);
  } else {
    steering_fake_dead_zone_conf_ = nullptr;
  }
  ::memcpy(&preview_mode_, &from.preview_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&curvaturn_transition_ff_) -
    reinterpret_cast<char*>(&preview_mode_)) + sizeof(curvaturn_transition_ff_));
  // @@protoc_insertion_point(copy_constructor:control.PiffControllerContentConfig)
}

void PiffControllerContentConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&integrator_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvaturn_transition_ff_) -
      reinterpret_cast<char*>(&integrator_conf_)) + sizeof(curvaturn_transition_ff_));
}

PiffControllerContentConfig::~PiffControllerContentConfig() {
  // @@protoc_insertion_point(destructor:control.PiffControllerContentConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffControllerContentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete integrator_conf_;
  if (this != internal_default_instance()) delete steering_fake_dead_zone_conf_;
}

void PiffControllerContentConfig::ArenaDtor(void* object) {
  PiffControllerContentConfig* _this = reinterpret_cast< PiffControllerContentConfig* >(object);
  (void)_this;
}
void PiffControllerContentConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffControllerContentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffControllerContentConfig& PiffControllerContentConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffControllerContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffControllerContentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffControllerContentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_conf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(integrator_conf_ != nullptr);
      integrator_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(steering_fake_dead_zone_conf_ != nullptr);
      steering_fake_dead_zone_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&preview_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curvaturn_transition_ff_) -
        reinterpret_cast<char*>(&preview_mode_)) + sizeof(curvaturn_transition_ff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffControllerContentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 preview_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_preview_mode(&has_bits);
          preview_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float preview_time_ms_c01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_preview_time_ms_c01(&has_bits);
          preview_time_ms_c01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float preview_time_ms_c2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_preview_time_ms_c2(&has_bits);
          preview_time_ms_c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float curvature_min_start_ff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_curvature_min_start_ff(&has_bits);
          curvature_min_start_ff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .control.PiffControllerContentRateConfig rate_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rate_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required .control.PiffIntegratorConfig integrator_conf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_integrator_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float steering_bias_deg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_steering_bias_deg(&has_bits);
          steering_bias_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .control.PiffCCSteeringFakeDeadZoneConfig steering_fake_dead_zone_conf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_fake_dead_zone_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float curvaturn_transition_ff = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_curvaturn_transition_ff(&has_bits);
          curvaturn_transition_ff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffControllerContentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffControllerContentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 preview_mode = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_preview_mode(), target);
  }

  // required float preview_time_ms_c01 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_preview_time_ms_c01(), target);
  }

  // required float preview_time_ms_c2 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_preview_time_ms_c2(), target);
  }

  // required float curvature_min_start_ff = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_curvature_min_start_ff(), target);
  }

  // repeated .control.PiffControllerContentRateConfig rate_conf = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rate_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rate_conf(i), target, stream);
  }

  // required .control.PiffIntegratorConfig integrator_conf = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::integrator_conf(this), target, stream);
  }

  // required float steering_bias_deg = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_steering_bias_deg(), target);
  }

  // required .control.PiffCCSteeringFakeDeadZoneConfig steering_fake_dead_zone_conf = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::steering_fake_dead_zone_conf(this), target, stream);
  }

  // required float curvaturn_transition_ff = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_curvaturn_transition_ff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffControllerContentConfig)
  return target;
}

size_t PiffControllerContentConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffControllerContentConfig)
  size_t total_size = 0;

  if (_internal_has_integrator_conf()) {
    // required .control.PiffIntegratorConfig integrator_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *integrator_conf_);
  }

  if (_internal_has_steering_fake_dead_zone_conf()) {
    // required .control.PiffCCSteeringFakeDeadZoneConfig steering_fake_dead_zone_conf = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steering_fake_dead_zone_conf_);
  }

  if (_internal_has_preview_mode()) {
    // required int32 preview_mode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preview_mode());
  }

  if (_internal_has_preview_time_ms_c01()) {
    // required float preview_time_ms_c01 = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_preview_time_ms_c2()) {
    // required float preview_time_ms_c2 = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_curvature_min_start_ff()) {
    // required float curvature_min_start_ff = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_bias_deg()) {
    // required float steering_bias_deg = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_curvaturn_transition_ff()) {
    // required float curvaturn_transition_ff = 9;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffControllerContentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffControllerContentConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .control.PiffIntegratorConfig integrator_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *integrator_conf_);

    // required .control.PiffCCSteeringFakeDeadZoneConfig steering_fake_dead_zone_conf = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steering_fake_dead_zone_conf_);

    // required int32 preview_mode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preview_mode());

    // required float preview_time_ms_c01 = 2;
    total_size += 1 + 4;

    // required float preview_time_ms_c2 = 3;
    total_size += 1 + 4;

    // required float curvature_min_start_ff = 4;
    total_size += 1 + 4;

    // required float steering_bias_deg = 7;
    total_size += 1 + 4;

    // required float curvaturn_transition_ff = 9;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.PiffControllerContentRateConfig rate_conf = 5;
  total_size += 1UL * this->_internal_rate_conf_size();
  for (const auto& msg : this->rate_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffControllerContentConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffControllerContentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffControllerContentConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffControllerContentConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffControllerContentConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffControllerContentConfig)
    MergeFrom(*source);
  }
}

void PiffControllerContentConfig::MergeFrom(const PiffControllerContentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffControllerContentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rate_conf_.MergeFrom(from.rate_conf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_integrator_conf()->::control::PiffIntegratorConfig::MergeFrom(from._internal_integrator_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_steering_fake_dead_zone_conf()->::control::PiffCCSteeringFakeDeadZoneConfig::MergeFrom(from._internal_steering_fake_dead_zone_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      preview_mode_ = from.preview_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      preview_time_ms_c01_ = from.preview_time_ms_c01_;
    }
    if (cached_has_bits & 0x00000010u) {
      preview_time_ms_c2_ = from.preview_time_ms_c2_;
    }
    if (cached_has_bits & 0x00000020u) {
      curvature_min_start_ff_ = from.curvature_min_start_ff_;
    }
    if (cached_has_bits & 0x00000040u) {
      steering_bias_deg_ = from.steering_bias_deg_;
    }
    if (cached_has_bits & 0x00000080u) {
      curvaturn_transition_ff_ = from.curvaturn_transition_ff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffControllerContentConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffControllerContentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffControllerContentConfig::CopyFrom(const PiffControllerContentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffControllerContentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffControllerContentConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rate_conf_)) return false;
  if (_internal_has_integrator_conf()) {
    if (!integrator_conf_->IsInitialized()) return false;
  }
  if (_internal_has_steering_fake_dead_zone_conf()) {
    if (!steering_fake_dead_zone_conf_->IsInitialized()) return false;
  }
  return true;
}

void PiffControllerContentConfig::InternalSwap(PiffControllerContentConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rate_conf_.InternalSwap(&other->rate_conf_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffControllerContentConfig, curvaturn_transition_ff_)
      + sizeof(PiffControllerContentConfig::curvaturn_transition_ff_)
      - PROTOBUF_FIELD_OFFSET(PiffControllerContentConfig, integrator_conf_)>(
          reinterpret_cast<char*>(&integrator_conf_),
          reinterpret_cast<char*>(&other->integrator_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffControllerContentConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffTrackingDifferentiatorSwitch::InitAsDefaultInstance() {
}
class PiffTrackingDifferentiatorSwitch::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffTrackingDifferentiatorSwitch>()._has_bits_);
  static void set_has_enable_center_line_c2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PiffTrackingDifferentiatorSwitch::PiffTrackingDifferentiatorSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffTrackingDifferentiatorSwitch)
}
PiffTrackingDifferentiatorSwitch::PiffTrackingDifferentiatorSwitch(const PiffTrackingDifferentiatorSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_center_line_c2_, &from.enable_center_line_c2_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_yaw_rate_) -
    reinterpret_cast<char*>(&enable_center_line_c2_)) + sizeof(enable_yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:control.PiffTrackingDifferentiatorSwitch)
}

void PiffTrackingDifferentiatorSwitch::SharedCtor() {
  ::memset(&enable_center_line_c2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_yaw_rate_) -
      reinterpret_cast<char*>(&enable_center_line_c2_)) + sizeof(enable_yaw_rate_));
}

PiffTrackingDifferentiatorSwitch::~PiffTrackingDifferentiatorSwitch() {
  // @@protoc_insertion_point(destructor:control.PiffTrackingDifferentiatorSwitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffTrackingDifferentiatorSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffTrackingDifferentiatorSwitch::ArenaDtor(void* object) {
  PiffTrackingDifferentiatorSwitch* _this = reinterpret_cast< PiffTrackingDifferentiatorSwitch* >(object);
  (void)_this;
}
void PiffTrackingDifferentiatorSwitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffTrackingDifferentiatorSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffTrackingDifferentiatorSwitch& PiffTrackingDifferentiatorSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffTrackingDifferentiatorSwitch_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffTrackingDifferentiatorSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffTrackingDifferentiatorSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_center_line_c2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_yaw_rate_) -
      reinterpret_cast<char*>(&enable_center_line_c2_)) + sizeof(enable_yaw_rate_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffTrackingDifferentiatorSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_center_line_c2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_center_line_c2(&has_bits);
          enable_center_line_c2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_yaw_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_yaw_rate(&has_bits);
          enable_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffTrackingDifferentiatorSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffTrackingDifferentiatorSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_center_line_c2 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_center_line_c2(), target);
  }

  // required bool enable_yaw_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_yaw_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffTrackingDifferentiatorSwitch)
  return target;
}

size_t PiffTrackingDifferentiatorSwitch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffTrackingDifferentiatorSwitch)
  size_t total_size = 0;

  if (_internal_has_enable_center_line_c2()) {
    // required bool enable_center_line_c2 = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_yaw_rate()) {
    // required bool enable_yaw_rate = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PiffTrackingDifferentiatorSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffTrackingDifferentiatorSwitch)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool enable_center_line_c2 = 1;
    total_size += 1 + 1;

    // required bool enable_yaw_rate = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffTrackingDifferentiatorSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffTrackingDifferentiatorSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffTrackingDifferentiatorSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffTrackingDifferentiatorSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffTrackingDifferentiatorSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffTrackingDifferentiatorSwitch)
    MergeFrom(*source);
  }
}

void PiffTrackingDifferentiatorSwitch::MergeFrom(const PiffTrackingDifferentiatorSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffTrackingDifferentiatorSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enable_center_line_c2_ = from.enable_center_line_c2_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_yaw_rate_ = from.enable_yaw_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffTrackingDifferentiatorSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffTrackingDifferentiatorSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffTrackingDifferentiatorSwitch::CopyFrom(const PiffTrackingDifferentiatorSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffTrackingDifferentiatorSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffTrackingDifferentiatorSwitch::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffTrackingDifferentiatorSwitch::InternalSwap(PiffTrackingDifferentiatorSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffTrackingDifferentiatorSwitch, enable_yaw_rate_)
      + sizeof(PiffTrackingDifferentiatorSwitch::enable_yaw_rate_)
      - PROTOBUF_FIELD_OFFSET(PiffTrackingDifferentiatorSwitch, enable_center_line_c2_)>(
          reinterpret_cast<char*>(&enable_center_line_c2_),
          reinterpret_cast<char*>(&other->enable_center_line_c2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffTrackingDifferentiatorSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffTrackingDifferentiatorStateParameters::InitAsDefaultInstance() {
}
class PiffTrackingDifferentiatorStateParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffTrackingDifferentiatorStateParameters>()._has_bits_);
  static void set_has_tracking_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_smooth_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PiffTrackingDifferentiatorStateParameters::PiffTrackingDifferentiatorStateParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffTrackingDifferentiatorStateParameters)
}
PiffTrackingDifferentiatorStateParameters::PiffTrackingDifferentiatorStateParameters(const PiffTrackingDifferentiatorStateParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tracking_rate_, &from.tracking_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&smooth_frame_) -
    reinterpret_cast<char*>(&tracking_rate_)) + sizeof(smooth_frame_));
  // @@protoc_insertion_point(copy_constructor:control.PiffTrackingDifferentiatorStateParameters)
}

void PiffTrackingDifferentiatorStateParameters::SharedCtor() {
  ::memset(&tracking_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smooth_frame_) -
      reinterpret_cast<char*>(&tracking_rate_)) + sizeof(smooth_frame_));
}

PiffTrackingDifferentiatorStateParameters::~PiffTrackingDifferentiatorStateParameters() {
  // @@protoc_insertion_point(destructor:control.PiffTrackingDifferentiatorStateParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffTrackingDifferentiatorStateParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffTrackingDifferentiatorStateParameters::ArenaDtor(void* object) {
  PiffTrackingDifferentiatorStateParameters* _this = reinterpret_cast< PiffTrackingDifferentiatorStateParameters* >(object);
  (void)_this;
}
void PiffTrackingDifferentiatorStateParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffTrackingDifferentiatorStateParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffTrackingDifferentiatorStateParameters& PiffTrackingDifferentiatorStateParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffTrackingDifferentiatorStateParameters_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffTrackingDifferentiatorStateParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffTrackingDifferentiatorStateParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tracking_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&smooth_frame_) -
        reinterpret_cast<char*>(&tracking_rate_)) + sizeof(smooth_frame_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffTrackingDifferentiatorStateParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float tracking_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tracking_rate(&has_bits);
          tracking_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 smooth_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_smooth_frame(&has_bits);
          smooth_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffTrackingDifferentiatorStateParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffTrackingDifferentiatorStateParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float tracking_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_tracking_rate(), target);
  }

  // required int32 smooth_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_smooth_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffTrackingDifferentiatorStateParameters)
  return target;
}

size_t PiffTrackingDifferentiatorStateParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffTrackingDifferentiatorStateParameters)
  size_t total_size = 0;

  if (_internal_has_tracking_rate()) {
    // required float tracking_rate = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_smooth_frame()) {
    // required int32 smooth_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_smooth_frame());
  }

  return total_size;
}
size_t PiffTrackingDifferentiatorStateParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffTrackingDifferentiatorStateParameters)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float tracking_rate = 1;
    total_size += 1 + 4;

    // required int32 smooth_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_smooth_frame());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffTrackingDifferentiatorStateParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffTrackingDifferentiatorStateParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffTrackingDifferentiatorStateParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffTrackingDifferentiatorStateParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffTrackingDifferentiatorStateParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffTrackingDifferentiatorStateParameters)
    MergeFrom(*source);
  }
}

void PiffTrackingDifferentiatorStateParameters::MergeFrom(const PiffTrackingDifferentiatorStateParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffTrackingDifferentiatorStateParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tracking_rate_ = from.tracking_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      smooth_frame_ = from.smooth_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffTrackingDifferentiatorStateParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffTrackingDifferentiatorStateParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffTrackingDifferentiatorStateParameters::CopyFrom(const PiffTrackingDifferentiatorStateParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffTrackingDifferentiatorStateParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffTrackingDifferentiatorStateParameters::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffTrackingDifferentiatorStateParameters::InternalSwap(PiffTrackingDifferentiatorStateParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffTrackingDifferentiatorStateParameters, smooth_frame_)
      + sizeof(PiffTrackingDifferentiatorStateParameters::smooth_frame_)
      - PROTOBUF_FIELD_OFFSET(PiffTrackingDifferentiatorStateParameters, tracking_rate_)>(
          reinterpret_cast<char*>(&tracking_rate_),
          reinterpret_cast<char*>(&other->tracking_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffTrackingDifferentiatorStateParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffTrackingDifferentiatorConfig::InitAsDefaultInstance() {
  ::control::_PiffTrackingDifferentiatorConfig_default_instance_._instance.get_mutable()->td_switch_ = const_cast< ::control::PiffTrackingDifferentiatorSwitch*>(
      ::control::PiffTrackingDifferentiatorSwitch::internal_default_instance());
  ::control::_PiffTrackingDifferentiatorConfig_default_instance_._instance.get_mutable()->center_line_c2_paras_ = const_cast< ::control::PiffTrackingDifferentiatorStateParameters*>(
      ::control::PiffTrackingDifferentiatorStateParameters::internal_default_instance());
  ::control::_PiffTrackingDifferentiatorConfig_default_instance_._instance.get_mutable()->yaw_rate_paras_ = const_cast< ::control::PiffTrackingDifferentiatorStateParameters*>(
      ::control::PiffTrackingDifferentiatorStateParameters::internal_default_instance());
}
class PiffTrackingDifferentiatorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffTrackingDifferentiatorConfig>()._has_bits_);
  static const ::control::PiffTrackingDifferentiatorSwitch& td_switch(const PiffTrackingDifferentiatorConfig* msg);
  static void set_has_td_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::PiffTrackingDifferentiatorStateParameters& center_line_c2_paras(const PiffTrackingDifferentiatorConfig* msg);
  static void set_has_center_line_c2_paras(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::PiffTrackingDifferentiatorStateParameters& yaw_rate_paras(const PiffTrackingDifferentiatorConfig* msg);
  static void set_has_yaw_rate_paras(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::control::PiffTrackingDifferentiatorSwitch&
PiffTrackingDifferentiatorConfig::_Internal::td_switch(const PiffTrackingDifferentiatorConfig* msg) {
  return *msg->td_switch_;
}
const ::control::PiffTrackingDifferentiatorStateParameters&
PiffTrackingDifferentiatorConfig::_Internal::center_line_c2_paras(const PiffTrackingDifferentiatorConfig* msg) {
  return *msg->center_line_c2_paras_;
}
const ::control::PiffTrackingDifferentiatorStateParameters&
PiffTrackingDifferentiatorConfig::_Internal::yaw_rate_paras(const PiffTrackingDifferentiatorConfig* msg) {
  return *msg->yaw_rate_paras_;
}
PiffTrackingDifferentiatorConfig::PiffTrackingDifferentiatorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffTrackingDifferentiatorConfig)
}
PiffTrackingDifferentiatorConfig::PiffTrackingDifferentiatorConfig(const PiffTrackingDifferentiatorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_td_switch()) {
    td_switch_ = new ::control::PiffTrackingDifferentiatorSwitch(*from.td_switch_);
  } else {
    td_switch_ = nullptr;
  }
  if (from._internal_has_center_line_c2_paras()) {
    center_line_c2_paras_ = new ::control::PiffTrackingDifferentiatorStateParameters(*from.center_line_c2_paras_);
  } else {
    center_line_c2_paras_ = nullptr;
  }
  if (from._internal_has_yaw_rate_paras()) {
    yaw_rate_paras_ = new ::control::PiffTrackingDifferentiatorStateParameters(*from.yaw_rate_paras_);
  } else {
    yaw_rate_paras_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.PiffTrackingDifferentiatorConfig)
}

void PiffTrackingDifferentiatorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&td_switch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_paras_) -
      reinterpret_cast<char*>(&td_switch_)) + sizeof(yaw_rate_paras_));
}

PiffTrackingDifferentiatorConfig::~PiffTrackingDifferentiatorConfig() {
  // @@protoc_insertion_point(destructor:control.PiffTrackingDifferentiatorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffTrackingDifferentiatorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete td_switch_;
  if (this != internal_default_instance()) delete center_line_c2_paras_;
  if (this != internal_default_instance()) delete yaw_rate_paras_;
}

void PiffTrackingDifferentiatorConfig::ArenaDtor(void* object) {
  PiffTrackingDifferentiatorConfig* _this = reinterpret_cast< PiffTrackingDifferentiatorConfig* >(object);
  (void)_this;
}
void PiffTrackingDifferentiatorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffTrackingDifferentiatorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffTrackingDifferentiatorConfig& PiffTrackingDifferentiatorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffTrackingDifferentiatorConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffTrackingDifferentiatorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffTrackingDifferentiatorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(td_switch_ != nullptr);
      td_switch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(center_line_c2_paras_ != nullptr);
      center_line_c2_paras_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(yaw_rate_paras_ != nullptr);
      yaw_rate_paras_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffTrackingDifferentiatorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .control.PiffTrackingDifferentiatorSwitch td_switch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_td_switch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffTrackingDifferentiatorStateParameters center_line_c2_paras = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_line_c2_paras(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffTrackingDifferentiatorStateParameters yaw_rate_paras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_yaw_rate_paras(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffTrackingDifferentiatorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffTrackingDifferentiatorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .control.PiffTrackingDifferentiatorSwitch td_switch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::td_switch(this), target, stream);
  }

  // required .control.PiffTrackingDifferentiatorStateParameters center_line_c2_paras = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::center_line_c2_paras(this), target, stream);
  }

  // required .control.PiffTrackingDifferentiatorStateParameters yaw_rate_paras = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::yaw_rate_paras(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffTrackingDifferentiatorConfig)
  return target;
}

size_t PiffTrackingDifferentiatorConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffTrackingDifferentiatorConfig)
  size_t total_size = 0;

  if (_internal_has_td_switch()) {
    // required .control.PiffTrackingDifferentiatorSwitch td_switch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *td_switch_);
  }

  if (_internal_has_center_line_c2_paras()) {
    // required .control.PiffTrackingDifferentiatorStateParameters center_line_c2_paras = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_line_c2_paras_);
  }

  if (_internal_has_yaw_rate_paras()) {
    // required .control.PiffTrackingDifferentiatorStateParameters yaw_rate_paras = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yaw_rate_paras_);
  }

  return total_size;
}
size_t PiffTrackingDifferentiatorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffTrackingDifferentiatorConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .control.PiffTrackingDifferentiatorSwitch td_switch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *td_switch_);

    // required .control.PiffTrackingDifferentiatorStateParameters center_line_c2_paras = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_line_c2_paras_);

    // required .control.PiffTrackingDifferentiatorStateParameters yaw_rate_paras = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yaw_rate_paras_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffTrackingDifferentiatorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffTrackingDifferentiatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffTrackingDifferentiatorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffTrackingDifferentiatorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffTrackingDifferentiatorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffTrackingDifferentiatorConfig)
    MergeFrom(*source);
  }
}

void PiffTrackingDifferentiatorConfig::MergeFrom(const PiffTrackingDifferentiatorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffTrackingDifferentiatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_td_switch()->::control::PiffTrackingDifferentiatorSwitch::MergeFrom(from._internal_td_switch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_center_line_c2_paras()->::control::PiffTrackingDifferentiatorStateParameters::MergeFrom(from._internal_center_line_c2_paras());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_yaw_rate_paras()->::control::PiffTrackingDifferentiatorStateParameters::MergeFrom(from._internal_yaw_rate_paras());
    }
  }
}

void PiffTrackingDifferentiatorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffTrackingDifferentiatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffTrackingDifferentiatorConfig::CopyFrom(const PiffTrackingDifferentiatorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffTrackingDifferentiatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffTrackingDifferentiatorConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_td_switch()) {
    if (!td_switch_->IsInitialized()) return false;
  }
  if (_internal_has_center_line_c2_paras()) {
    if (!center_line_c2_paras_->IsInitialized()) return false;
  }
  if (_internal_has_yaw_rate_paras()) {
    if (!yaw_rate_paras_->IsInitialized()) return false;
  }
  return true;
}

void PiffTrackingDifferentiatorConfig::InternalSwap(PiffTrackingDifferentiatorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffTrackingDifferentiatorConfig, yaw_rate_paras_)
      + sizeof(PiffTrackingDifferentiatorConfig::yaw_rate_paras_)
      - PROTOBUF_FIELD_OFFSET(PiffTrackingDifferentiatorConfig, td_switch_)>(
          reinterpret_cast<char*>(&td_switch_),
          reinterpret_cast<char*>(&other->td_switch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffTrackingDifferentiatorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffDTInputMaxLimitConfig::InitAsDefaultInstance() {
}
class PiffDTInputMaxLimitConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffDTInputMaxLimitConfig>()._has_bits_);
  static void set_has_speed_kph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading_error_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PiffDTInputMaxLimitConfig::PiffDTInputMaxLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffDTInputMaxLimitConfig)
}
PiffDTInputMaxLimitConfig::PiffDTInputMaxLimitConfig(const PiffDTInputMaxLimitConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_kph_, &from.speed_kph_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_error_deg_) -
    reinterpret_cast<char*>(&speed_kph_)) + sizeof(heading_error_deg_));
  // @@protoc_insertion_point(copy_constructor:control.PiffDTInputMaxLimitConfig)
}

void PiffDTInputMaxLimitConfig::SharedCtor() {
  ::memset(&speed_kph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_error_deg_) -
      reinterpret_cast<char*>(&speed_kph_)) + sizeof(heading_error_deg_));
}

PiffDTInputMaxLimitConfig::~PiffDTInputMaxLimitConfig() {
  // @@protoc_insertion_point(destructor:control.PiffDTInputMaxLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffDTInputMaxLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffDTInputMaxLimitConfig::ArenaDtor(void* object) {
  PiffDTInputMaxLimitConfig* _this = reinterpret_cast< PiffDTInputMaxLimitConfig* >(object);
  (void)_this;
}
void PiffDTInputMaxLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffDTInputMaxLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffDTInputMaxLimitConfig& PiffDTInputMaxLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffDTInputMaxLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffDTInputMaxLimitConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffDTInputMaxLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&speed_kph_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_error_deg_) -
        reinterpret_cast<char*>(&speed_kph_)) + sizeof(heading_error_deg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffDTInputMaxLimitConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed_kph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed_kph(&has_bits);
          speed_kph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float lateral_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lateral_error(&has_bits);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading_error_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_heading_error_deg(&has_bits);
          heading_error_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffDTInputMaxLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffDTInputMaxLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed_kph = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_kph(), target);
  }

  // required float lateral_error = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lateral_error(), target);
  }

  // required float heading_error_deg = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_heading_error_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffDTInputMaxLimitConfig)
  return target;
}

size_t PiffDTInputMaxLimitConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffDTInputMaxLimitConfig)
  size_t total_size = 0;

  if (_internal_has_speed_kph()) {
    // required float speed_kph = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_lateral_error()) {
    // required float lateral_error = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_heading_error_deg()) {
    // required float heading_error_deg = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffDTInputMaxLimitConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffDTInputMaxLimitConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float speed_kph = 1;
    total_size += 1 + 4;

    // required float lateral_error = 2;
    total_size += 1 + 4;

    // required float heading_error_deg = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffDTInputMaxLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffDTInputMaxLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffDTInputMaxLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffDTInputMaxLimitConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffDTInputMaxLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffDTInputMaxLimitConfig)
    MergeFrom(*source);
  }
}

void PiffDTInputMaxLimitConfig::MergeFrom(const PiffDTInputMaxLimitConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffDTInputMaxLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      speed_kph_ = from.speed_kph_;
    }
    if (cached_has_bits & 0x00000002u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_error_deg_ = from.heading_error_deg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffDTInputMaxLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffDTInputMaxLimitConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffDTInputMaxLimitConfig::CopyFrom(const PiffDTInputMaxLimitConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffDTInputMaxLimitConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffDTInputMaxLimitConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffDTInputMaxLimitConfig::InternalSwap(PiffDTInputMaxLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffDTInputMaxLimitConfig, heading_error_deg_)
      + sizeof(PiffDTInputMaxLimitConfig::heading_error_deg_)
      - PROTOBUF_FIELD_OFFSET(PiffDTInputMaxLimitConfig, speed_kph_)>(
          reinterpret_cast<char*>(&speed_kph_),
          reinterpret_cast<char*>(&other->speed_kph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffDTInputMaxLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffDTInputFrameLimitConfig::InitAsDefaultInstance() {
}
class PiffDTInputFrameLimitConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffDTInputFrameLimitConfig>()._has_bits_);
  static void set_has_speed_kph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c0_jump_max_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c0_transit_rate_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c0_track_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c1_jump_max_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_c1_transit_rate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_c1_track_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_c2_jump_max(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_c2_transit_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_c2_track_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

PiffDTInputFrameLimitConfig::PiffDTInputFrameLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffDTInputFrameLimitConfig)
}
PiffDTInputFrameLimitConfig::PiffDTInputFrameLimitConfig(const PiffDTInputFrameLimitConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_kph_, &from.speed_kph_,
    static_cast<size_t>(reinterpret_cast<char*>(&c2_track_percentage_) -
    reinterpret_cast<char*>(&speed_kph_)) + sizeof(c2_track_percentage_));
  // @@protoc_insertion_point(copy_constructor:control.PiffDTInputFrameLimitConfig)
}

void PiffDTInputFrameLimitConfig::SharedCtor() {
  ::memset(&speed_kph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c2_track_percentage_) -
      reinterpret_cast<char*>(&speed_kph_)) + sizeof(c2_track_percentage_));
}

PiffDTInputFrameLimitConfig::~PiffDTInputFrameLimitConfig() {
  // @@protoc_insertion_point(destructor:control.PiffDTInputFrameLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffDTInputFrameLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffDTInputFrameLimitConfig::ArenaDtor(void* object) {
  PiffDTInputFrameLimitConfig* _this = reinterpret_cast< PiffDTInputFrameLimitConfig* >(object);
  (void)_this;
}
void PiffDTInputFrameLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffDTInputFrameLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffDTInputFrameLimitConfig& PiffDTInputFrameLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffDTInputFrameLimitConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffDTInputFrameLimitConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffDTInputFrameLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&speed_kph_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c2_jump_max_) -
        reinterpret_cast<char*>(&speed_kph_)) + sizeof(c2_jump_max_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&c2_transit_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c2_track_percentage_) -
        reinterpret_cast<char*>(&c2_transit_rate_)) + sizeof(c2_track_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffDTInputFrameLimitConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed_kph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed_kph(&has_bits);
          speed_kph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c0_jump_max_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_c0_jump_max_m(&has_bits);
          c0_jump_max_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c0_transit_rate_mps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_c0_transit_rate_mps(&has_bits);
          c0_transit_rate_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c0_track_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_c0_track_percentage(&has_bits);
          c0_track_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c1_jump_max_rad = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_c1_jump_max_rad(&has_bits);
          c1_jump_max_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c1_transit_rate_radps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_c1_transit_rate_radps(&has_bits);
          c1_transit_rate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c1_track_percentage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_c1_track_percentage(&has_bits);
          c1_track_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c2_jump_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_c2_jump_max(&has_bits);
          c2_jump_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c2_transit_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_c2_transit_rate(&has_bits);
          c2_transit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c2_track_percentage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_c2_track_percentage(&has_bits);
          c2_track_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffDTInputFrameLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffDTInputFrameLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed_kph = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_kph(), target);
  }

  // required float c0_jump_max_m = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c0_jump_max_m(), target);
  }

  // required float c0_transit_rate_mps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_c0_transit_rate_mps(), target);
  }

  // required float c0_track_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_c0_track_percentage(), target);
  }

  // required float c1_jump_max_rad = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_c1_jump_max_rad(), target);
  }

  // required float c1_transit_rate_radps = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_c1_transit_rate_radps(), target);
  }

  // required float c1_track_percentage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_c1_track_percentage(), target);
  }

  // required float c2_jump_max = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_c2_jump_max(), target);
  }

  // required float c2_transit_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_c2_transit_rate(), target);
  }

  // required float c2_track_percentage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_c2_track_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffDTInputFrameLimitConfig)
  return target;
}

size_t PiffDTInputFrameLimitConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffDTInputFrameLimitConfig)
  size_t total_size = 0;

  if (_internal_has_speed_kph()) {
    // required float speed_kph = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_c0_jump_max_m()) {
    // required float c0_jump_max_m = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_c0_transit_rate_mps()) {
    // required float c0_transit_rate_mps = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_c0_track_percentage()) {
    // required float c0_track_percentage = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_c1_jump_max_rad()) {
    // required float c1_jump_max_rad = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_c1_transit_rate_radps()) {
    // required float c1_transit_rate_radps = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_c1_track_percentage()) {
    // required float c1_track_percentage = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_c2_jump_max()) {
    // required float c2_jump_max = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_c2_transit_rate()) {
    // required float c2_transit_rate = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_c2_track_percentage()) {
    // required float c2_track_percentage = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffDTInputFrameLimitConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffDTInputFrameLimitConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required float speed_kph = 1;
    total_size += 1 + 4;

    // required float c0_jump_max_m = 2;
    total_size += 1 + 4;

    // required float c0_transit_rate_mps = 3;
    total_size += 1 + 4;

    // required float c0_track_percentage = 4;
    total_size += 1 + 4;

    // required float c1_jump_max_rad = 5;
    total_size += 1 + 4;

    // required float c1_transit_rate_radps = 6;
    total_size += 1 + 4;

    // required float c1_track_percentage = 7;
    total_size += 1 + 4;

    // required float c2_jump_max = 8;
    total_size += 1 + 4;

    // required float c2_transit_rate = 9;
    total_size += 1 + 4;

    // required float c2_track_percentage = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffDTInputFrameLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffDTInputFrameLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffDTInputFrameLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffDTInputFrameLimitConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffDTInputFrameLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffDTInputFrameLimitConfig)
    MergeFrom(*source);
  }
}

void PiffDTInputFrameLimitConfig::MergeFrom(const PiffDTInputFrameLimitConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffDTInputFrameLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      speed_kph_ = from.speed_kph_;
    }
    if (cached_has_bits & 0x00000002u) {
      c0_jump_max_m_ = from.c0_jump_max_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      c0_transit_rate_mps_ = from.c0_transit_rate_mps_;
    }
    if (cached_has_bits & 0x00000008u) {
      c0_track_percentage_ = from.c0_track_percentage_;
    }
    if (cached_has_bits & 0x00000010u) {
      c1_jump_max_rad_ = from.c1_jump_max_rad_;
    }
    if (cached_has_bits & 0x00000020u) {
      c1_transit_rate_radps_ = from.c1_transit_rate_radps_;
    }
    if (cached_has_bits & 0x00000040u) {
      c1_track_percentage_ = from.c1_track_percentage_;
    }
    if (cached_has_bits & 0x00000080u) {
      c2_jump_max_ = from.c2_jump_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      c2_transit_rate_ = from.c2_transit_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      c2_track_percentage_ = from.c2_track_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffDTInputFrameLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffDTInputFrameLimitConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffDTInputFrameLimitConfig::CopyFrom(const PiffDTInputFrameLimitConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffDTInputFrameLimitConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffDTInputFrameLimitConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffDTInputFrameLimitConfig::InternalSwap(PiffDTInputFrameLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffDTInputFrameLimitConfig, c2_track_percentage_)
      + sizeof(PiffDTInputFrameLimitConfig::c2_track_percentage_)
      - PROTOBUF_FIELD_OFFSET(PiffDTInputFrameLimitConfig, speed_kph_)>(
          reinterpret_cast<char*>(&speed_kph_),
          reinterpret_cast<char*>(&other->speed_kph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffDTInputFrameLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffDataTransformConfig::InitAsDefaultInstance() {
}
class PiffDataTransformConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffDataTransformConfig>()._has_bits_);
  static void set_has_enable_input_max_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_input_frame_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_ramp_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PiffDataTransformConfig::PiffDataTransformConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_max_limit_conf_(arena),
  input_frame_limit_conf_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffDataTransformConfig)
}
PiffDataTransformConfig::PiffDataTransformConfig(const PiffDataTransformConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_max_limit_conf_(from.input_max_limit_conf_),
      input_frame_limit_conf_(from.input_frame_limit_conf_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_input_max_limit_, &from.enable_input_max_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_ramp_mode_) -
    reinterpret_cast<char*>(&enable_input_max_limit_)) + sizeof(frame_ramp_mode_));
  // @@protoc_insertion_point(copy_constructor:control.PiffDataTransformConfig)
}

void PiffDataTransformConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&enable_input_max_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_ramp_mode_) -
      reinterpret_cast<char*>(&enable_input_max_limit_)) + sizeof(frame_ramp_mode_));
}

PiffDataTransformConfig::~PiffDataTransformConfig() {
  // @@protoc_insertion_point(destructor:control.PiffDataTransformConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffDataTransformConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffDataTransformConfig::ArenaDtor(void* object) {
  PiffDataTransformConfig* _this = reinterpret_cast< PiffDataTransformConfig* >(object);
  (void)_this;
}
void PiffDataTransformConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffDataTransformConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffDataTransformConfig& PiffDataTransformConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffDataTransformConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffDataTransformConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffDataTransformConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_max_limit_conf_.Clear();
  input_frame_limit_conf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&enable_input_max_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_ramp_mode_) -
        reinterpret_cast<char*>(&enable_input_max_limit_)) + sizeof(frame_ramp_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffDataTransformConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_input_max_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_input_max_limit(&has_bits);
          enable_input_max_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.PiffDTInputMaxLimitConfig input_max_limit_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_max_limit_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool enable_input_frame_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_input_frame_limit(&has_bits);
          enable_input_frame_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.PiffDTInputFrameLimitConfig input_frame_limit_conf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_frame_limit_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 frame_ramp_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_frame_ramp_mode(&has_bits);
          frame_ramp_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffDataTransformConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffDataTransformConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_input_max_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_input_max_limit(), target);
  }

  // repeated .control.PiffDTInputMaxLimitConfig input_max_limit_conf = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_max_limit_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_input_max_limit_conf(i), target, stream);
  }

  // required bool enable_input_frame_limit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_input_frame_limit(), target);
  }

  // repeated .control.PiffDTInputFrameLimitConfig input_frame_limit_conf = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_frame_limit_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_input_frame_limit_conf(i), target, stream);
  }

  // required int32 frame_ramp_mode = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_frame_ramp_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffDataTransformConfig)
  return target;
}

size_t PiffDataTransformConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffDataTransformConfig)
  size_t total_size = 0;

  if (_internal_has_enable_input_max_limit()) {
    // required bool enable_input_max_limit = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_input_frame_limit()) {
    // required bool enable_input_frame_limit = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_frame_ramp_mode()) {
    // required int32 frame_ramp_mode = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_ramp_mode());
  }

  return total_size;
}
size_t PiffDataTransformConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffDataTransformConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool enable_input_max_limit = 1;
    total_size += 1 + 1;

    // required bool enable_input_frame_limit = 3;
    total_size += 1 + 1;

    // required int32 frame_ramp_mode = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_ramp_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.PiffDTInputMaxLimitConfig input_max_limit_conf = 2;
  total_size += 1UL * this->_internal_input_max_limit_conf_size();
  for (const auto& msg : this->input_max_limit_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .control.PiffDTInputFrameLimitConfig input_frame_limit_conf = 4;
  total_size += 1UL * this->_internal_input_frame_limit_conf_size();
  for (const auto& msg : this->input_frame_limit_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffDataTransformConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffDataTransformConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffDataTransformConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffDataTransformConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffDataTransformConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffDataTransformConfig)
    MergeFrom(*source);
  }
}

void PiffDataTransformConfig::MergeFrom(const PiffDataTransformConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffDataTransformConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_max_limit_conf_.MergeFrom(from.input_max_limit_conf_);
  input_frame_limit_conf_.MergeFrom(from.input_frame_limit_conf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      enable_input_max_limit_ = from.enable_input_max_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_input_frame_limit_ = from.enable_input_frame_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_ramp_mode_ = from.frame_ramp_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffDataTransformConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffDataTransformConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffDataTransformConfig::CopyFrom(const PiffDataTransformConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffDataTransformConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffDataTransformConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(input_max_limit_conf_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(input_frame_limit_conf_)) return false;
  return true;
}

void PiffDataTransformConfig::InternalSwap(PiffDataTransformConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_max_limit_conf_.InternalSwap(&other->input_max_limit_conf_);
  input_frame_limit_conf_.InternalSwap(&other->input_frame_limit_conf_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffDataTransformConfig, frame_ramp_mode_)
      + sizeof(PiffDataTransformConfig::frame_ramp_mode_)
      - PROTOBUF_FIELD_OFFSET(PiffDataTransformConfig, enable_input_max_limit_)>(
          reinterpret_cast<char*>(&enable_input_max_limit_),
          reinterpret_cast<char*>(&other->enable_input_max_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffDataTransformConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffPPSteeringAngleLimit::InitAsDefaultInstance() {
}
class PiffPPSteeringAngleLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffPPSteeringAngleLimit>()._has_bits_);
  static void set_has_speed_kph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_range_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steering_rate_range_degps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PiffPPSteeringAngleLimit::PiffPPSteeringAngleLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffPPSteeringAngleLimit)
}
PiffPPSteeringAngleLimit::PiffPPSteeringAngleLimit(const PiffPPSteeringAngleLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_kph_, &from.speed_kph_,
    static_cast<size_t>(reinterpret_cast<char*>(&steering_rate_range_degps_) -
    reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_rate_range_degps_));
  // @@protoc_insertion_point(copy_constructor:control.PiffPPSteeringAngleLimit)
}

void PiffPPSteeringAngleLimit::SharedCtor() {
  ::memset(&speed_kph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steering_rate_range_degps_) -
      reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_rate_range_degps_));
}

PiffPPSteeringAngleLimit::~PiffPPSteeringAngleLimit() {
  // @@protoc_insertion_point(destructor:control.PiffPPSteeringAngleLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffPPSteeringAngleLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffPPSteeringAngleLimit::ArenaDtor(void* object) {
  PiffPPSteeringAngleLimit* _this = reinterpret_cast< PiffPPSteeringAngleLimit* >(object);
  (void)_this;
}
void PiffPPSteeringAngleLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffPPSteeringAngleLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffPPSteeringAngleLimit& PiffPPSteeringAngleLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffPPSteeringAngleLimit_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffPPSteeringAngleLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffPPSteeringAngleLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&speed_kph_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_rate_range_degps_) -
        reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_rate_range_degps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffPPSteeringAngleLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed_kph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed_kph(&has_bits);
          speed_kph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_range_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_steering_range_deg(&has_bits);
          steering_range_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_rate_range_degps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_steering_rate_range_degps(&has_bits);
          steering_rate_range_degps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffPPSteeringAngleLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffPPSteeringAngleLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed_kph = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_kph(), target);
  }

  // required float steering_range_deg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_steering_range_deg(), target);
  }

  // required float steering_rate_range_degps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_steering_rate_range_degps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffPPSteeringAngleLimit)
  return target;
}

size_t PiffPPSteeringAngleLimit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffPPSteeringAngleLimit)
  size_t total_size = 0;

  if (_internal_has_speed_kph()) {
    // required float speed_kph = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_range_deg()) {
    // required float steering_range_deg = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_rate_range_degps()) {
    // required float steering_rate_range_degps = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffPPSteeringAngleLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffPPSteeringAngleLimit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float speed_kph = 1;
    total_size += 1 + 4;

    // required float steering_range_deg = 2;
    total_size += 1 + 4;

    // required float steering_rate_range_degps = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffPPSteeringAngleLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffPPSteeringAngleLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffPPSteeringAngleLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffPPSteeringAngleLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffPPSteeringAngleLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffPPSteeringAngleLimit)
    MergeFrom(*source);
  }
}

void PiffPPSteeringAngleLimit::MergeFrom(const PiffPPSteeringAngleLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffPPSteeringAngleLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      speed_kph_ = from.speed_kph_;
    }
    if (cached_has_bits & 0x00000002u) {
      steering_range_deg_ = from.steering_range_deg_;
    }
    if (cached_has_bits & 0x00000004u) {
      steering_rate_range_degps_ = from.steering_rate_range_degps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffPPSteeringAngleLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffPPSteeringAngleLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffPPSteeringAngleLimit::CopyFrom(const PiffPPSteeringAngleLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffPPSteeringAngleLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffPPSteeringAngleLimit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffPPSteeringAngleLimit::InternalSwap(PiffPPSteeringAngleLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffPPSteeringAngleLimit, steering_rate_range_degps_)
      + sizeof(PiffPPSteeringAngleLimit::steering_rate_range_degps_)
      - PROTOBUF_FIELD_OFFSET(PiffPPSteeringAngleLimit, speed_kph_)>(
          reinterpret_cast<char*>(&speed_kph_),
          reinterpret_cast<char*>(&other->speed_kph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffPPSteeringAngleLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffPPActivateControlContentConfig::InitAsDefaultInstance() {
}
class PiffPPActivateControlContentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffPPActivateControlContentConfig>()._has_bits_);
  static void set_has_speed_kph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_rate_degps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steering_dead_zone_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steering_frame_track_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PiffPPActivateControlContentConfig::PiffPPActivateControlContentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffPPActivateControlContentConfig)
}
PiffPPActivateControlContentConfig::PiffPPActivateControlContentConfig(const PiffPPActivateControlContentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_kph_, &from.speed_kph_,
    static_cast<size_t>(reinterpret_cast<char*>(&steering_frame_track_percentage_) -
    reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_frame_track_percentage_));
  // @@protoc_insertion_point(copy_constructor:control.PiffPPActivateControlContentConfig)
}

void PiffPPActivateControlContentConfig::SharedCtor() {
  ::memset(&speed_kph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steering_frame_track_percentage_) -
      reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_frame_track_percentage_));
}

PiffPPActivateControlContentConfig::~PiffPPActivateControlContentConfig() {
  // @@protoc_insertion_point(destructor:control.PiffPPActivateControlContentConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffPPActivateControlContentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffPPActivateControlContentConfig::ArenaDtor(void* object) {
  PiffPPActivateControlContentConfig* _this = reinterpret_cast< PiffPPActivateControlContentConfig* >(object);
  (void)_this;
}
void PiffPPActivateControlContentConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffPPActivateControlContentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffPPActivateControlContentConfig& PiffPPActivateControlContentConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffPPActivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffPPActivateControlContentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffPPActivateControlContentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&speed_kph_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_frame_track_percentage_) -
        reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_frame_track_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffPPActivateControlContentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed_kph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed_kph(&has_bits);
          speed_kph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_rate_degps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_steering_rate_degps(&has_bits);
          steering_rate_degps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_dead_zone_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_steering_dead_zone_deg(&has_bits);
          steering_dead_zone_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_frame_track_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_steering_frame_track_percentage(&has_bits);
          steering_frame_track_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffPPActivateControlContentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffPPActivateControlContentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed_kph = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_kph(), target);
  }

  // required float steering_rate_degps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_steering_rate_degps(), target);
  }

  // required float steering_dead_zone_deg = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_steering_dead_zone_deg(), target);
  }

  // required float steering_frame_track_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_steering_frame_track_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffPPActivateControlContentConfig)
  return target;
}

size_t PiffPPActivateControlContentConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffPPActivateControlContentConfig)
  size_t total_size = 0;

  if (_internal_has_speed_kph()) {
    // required float speed_kph = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_rate_degps()) {
    // required float steering_rate_degps = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_dead_zone_deg()) {
    // required float steering_dead_zone_deg = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_frame_track_percentage()) {
    // required float steering_frame_track_percentage = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffPPActivateControlContentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffPPActivateControlContentConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float speed_kph = 1;
    total_size += 1 + 4;

    // required float steering_rate_degps = 2;
    total_size += 1 + 4;

    // required float steering_dead_zone_deg = 3;
    total_size += 1 + 4;

    // required float steering_frame_track_percentage = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffPPActivateControlContentConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffPPActivateControlContentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffPPActivateControlContentConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffPPActivateControlContentConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffPPActivateControlContentConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffPPActivateControlContentConfig)
    MergeFrom(*source);
  }
}

void PiffPPActivateControlContentConfig::MergeFrom(const PiffPPActivateControlContentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffPPActivateControlContentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      speed_kph_ = from.speed_kph_;
    }
    if (cached_has_bits & 0x00000002u) {
      steering_rate_degps_ = from.steering_rate_degps_;
    }
    if (cached_has_bits & 0x00000004u) {
      steering_dead_zone_deg_ = from.steering_dead_zone_deg_;
    }
    if (cached_has_bits & 0x00000008u) {
      steering_frame_track_percentage_ = from.steering_frame_track_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffPPActivateControlContentConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffPPActivateControlContentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffPPActivateControlContentConfig::CopyFrom(const PiffPPActivateControlContentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffPPActivateControlContentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffPPActivateControlContentConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffPPActivateControlContentConfig::InternalSwap(PiffPPActivateControlContentConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffPPActivateControlContentConfig, steering_frame_track_percentage_)
      + sizeof(PiffPPActivateControlContentConfig::steering_frame_track_percentage_)
      - PROTOBUF_FIELD_OFFSET(PiffPPActivateControlContentConfig, speed_kph_)>(
          reinterpret_cast<char*>(&speed_kph_),
          reinterpret_cast<char*>(&other->speed_kph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffPPActivateControlContentConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffPPDectivateControlContentConfig::InitAsDefaultInstance() {
}
class PiffPPDectivateControlContentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffPPDectivateControlContentConfig>()._has_bits_);
  static void set_has_speed_kph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_rate_degps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steering_frame_track_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PiffPPDectivateControlContentConfig::PiffPPDectivateControlContentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffPPDectivateControlContentConfig)
}
PiffPPDectivateControlContentConfig::PiffPPDectivateControlContentConfig(const PiffPPDectivateControlContentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_kph_, &from.speed_kph_,
    static_cast<size_t>(reinterpret_cast<char*>(&steering_frame_track_percentage_) -
    reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_frame_track_percentage_));
  // @@protoc_insertion_point(copy_constructor:control.PiffPPDectivateControlContentConfig)
}

void PiffPPDectivateControlContentConfig::SharedCtor() {
  ::memset(&speed_kph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steering_frame_track_percentage_) -
      reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_frame_track_percentage_));
}

PiffPPDectivateControlContentConfig::~PiffPPDectivateControlContentConfig() {
  // @@protoc_insertion_point(destructor:control.PiffPPDectivateControlContentConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffPPDectivateControlContentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffPPDectivateControlContentConfig::ArenaDtor(void* object) {
  PiffPPDectivateControlContentConfig* _this = reinterpret_cast< PiffPPDectivateControlContentConfig* >(object);
  (void)_this;
}
void PiffPPDectivateControlContentConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffPPDectivateControlContentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffPPDectivateControlContentConfig& PiffPPDectivateControlContentConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffPPDectivateControlContentConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffPPDectivateControlContentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffPPDectivateControlContentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&speed_kph_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_frame_track_percentage_) -
        reinterpret_cast<char*>(&speed_kph_)) + sizeof(steering_frame_track_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffPPDectivateControlContentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed_kph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed_kph(&has_bits);
          speed_kph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_rate_degps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_steering_rate_degps(&has_bits);
          steering_rate_degps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_frame_track_percentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_steering_frame_track_percentage(&has_bits);
          steering_frame_track_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffPPDectivateControlContentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffPPDectivateControlContentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed_kph = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_kph(), target);
  }

  // required float steering_rate_degps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_steering_rate_degps(), target);
  }

  // required float steering_frame_track_percentage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_steering_frame_track_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffPPDectivateControlContentConfig)
  return target;
}

size_t PiffPPDectivateControlContentConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffPPDectivateControlContentConfig)
  size_t total_size = 0;

  if (_internal_has_speed_kph()) {
    // required float speed_kph = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_rate_degps()) {
    // required float steering_rate_degps = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_frame_track_percentage()) {
    // required float steering_frame_track_percentage = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffPPDectivateControlContentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffPPDectivateControlContentConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float speed_kph = 1;
    total_size += 1 + 4;

    // required float steering_rate_degps = 2;
    total_size += 1 + 4;

    // required float steering_frame_track_percentage = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffPPDectivateControlContentConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffPPDectivateControlContentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffPPDectivateControlContentConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffPPDectivateControlContentConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffPPDectivateControlContentConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffPPDectivateControlContentConfig)
    MergeFrom(*source);
  }
}

void PiffPPDectivateControlContentConfig::MergeFrom(const PiffPPDectivateControlContentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffPPDectivateControlContentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      speed_kph_ = from.speed_kph_;
    }
    if (cached_has_bits & 0x00000002u) {
      steering_rate_degps_ = from.steering_rate_degps_;
    }
    if (cached_has_bits & 0x00000004u) {
      steering_frame_track_percentage_ = from.steering_frame_track_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffPPDectivateControlContentConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffPPDectivateControlContentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffPPDectivateControlContentConfig::CopyFrom(const PiffPPDectivateControlContentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffPPDectivateControlContentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffPPDectivateControlContentConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffPPDectivateControlContentConfig::InternalSwap(PiffPPDectivateControlContentConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffPPDectivateControlContentConfig, steering_frame_track_percentage_)
      + sizeof(PiffPPDectivateControlContentConfig::steering_frame_track_percentage_)
      - PROTOBUF_FIELD_OFFSET(PiffPPDectivateControlContentConfig, speed_kph_)>(
          reinterpret_cast<char*>(&speed_kph_),
          reinterpret_cast<char*>(&other->speed_kph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffPPDectivateControlContentConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffPPActivateControlConfig::InitAsDefaultInstance() {
}
class PiffPPActivateControlConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffPPActivateControlConfig>()._has_bits_);
  static void set_has_enable_post_activate_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ramp_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PiffPPActivateControlConfig::PiffPPActivateControlConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  activate_conf_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffPPActivateControlConfig)
}
PiffPPActivateControlConfig::PiffPPActivateControlConfig(const PiffPPActivateControlConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      activate_conf_(from.activate_conf_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_post_activate_control_, &from.enable_post_activate_control_,
    static_cast<size_t>(reinterpret_cast<char*>(&ramp_mode_) -
    reinterpret_cast<char*>(&enable_post_activate_control_)) + sizeof(ramp_mode_));
  // @@protoc_insertion_point(copy_constructor:control.PiffPPActivateControlConfig)
}

void PiffPPActivateControlConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&enable_post_activate_control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramp_mode_) -
      reinterpret_cast<char*>(&enable_post_activate_control_)) + sizeof(ramp_mode_));
}

PiffPPActivateControlConfig::~PiffPPActivateControlConfig() {
  // @@protoc_insertion_point(destructor:control.PiffPPActivateControlConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffPPActivateControlConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffPPActivateControlConfig::ArenaDtor(void* object) {
  PiffPPActivateControlConfig* _this = reinterpret_cast< PiffPPActivateControlConfig* >(object);
  (void)_this;
}
void PiffPPActivateControlConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffPPActivateControlConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffPPActivateControlConfig& PiffPPActivateControlConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffPPActivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffPPActivateControlConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffPPActivateControlConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activate_conf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&enable_post_activate_control_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ramp_mode_) -
        reinterpret_cast<char*>(&enable_post_activate_control_)) + sizeof(ramp_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffPPActivateControlConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_post_activate_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_post_activate_control(&has_bits);
          enable_post_activate_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.PiffPPActivateControlContentConfig activate_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activate_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 ramp_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ramp_mode(&has_bits);
          ramp_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffPPActivateControlConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffPPActivateControlConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_post_activate_control = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_post_activate_control(), target);
  }

  // repeated .control.PiffPPActivateControlContentConfig activate_conf = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activate_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_activate_conf(i), target, stream);
  }

  // required int32 ramp_mode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ramp_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffPPActivateControlConfig)
  return target;
}

size_t PiffPPActivateControlConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffPPActivateControlConfig)
  size_t total_size = 0;

  if (_internal_has_enable_post_activate_control()) {
    // required bool enable_post_activate_control = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_ramp_mode()) {
    // required int32 ramp_mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ramp_mode());
  }

  return total_size;
}
size_t PiffPPActivateControlConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffPPActivateControlConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool enable_post_activate_control = 1;
    total_size += 1 + 1;

    // required int32 ramp_mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ramp_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.PiffPPActivateControlContentConfig activate_conf = 2;
  total_size += 1UL * this->_internal_activate_conf_size();
  for (const auto& msg : this->activate_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffPPActivateControlConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffPPActivateControlConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffPPActivateControlConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffPPActivateControlConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffPPActivateControlConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffPPActivateControlConfig)
    MergeFrom(*source);
  }
}

void PiffPPActivateControlConfig::MergeFrom(const PiffPPActivateControlConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffPPActivateControlConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activate_conf_.MergeFrom(from.activate_conf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enable_post_activate_control_ = from.enable_post_activate_control_;
    }
    if (cached_has_bits & 0x00000002u) {
      ramp_mode_ = from.ramp_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffPPActivateControlConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffPPActivateControlConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffPPActivateControlConfig::CopyFrom(const PiffPPActivateControlConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffPPActivateControlConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffPPActivateControlConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(activate_conf_)) return false;
  return true;
}

void PiffPPActivateControlConfig::InternalSwap(PiffPPActivateControlConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activate_conf_.InternalSwap(&other->activate_conf_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffPPActivateControlConfig, ramp_mode_)
      + sizeof(PiffPPActivateControlConfig::ramp_mode_)
      - PROTOBUF_FIELD_OFFSET(PiffPPActivateControlConfig, enable_post_activate_control_)>(
          reinterpret_cast<char*>(&enable_post_activate_control_),
          reinterpret_cast<char*>(&other->enable_post_activate_control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffPPActivateControlConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffPPDeactivateControlConfig::InitAsDefaultInstance() {
}
class PiffPPDeactivateControlConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffPPDeactivateControlConfig>()._has_bits_);
  static void set_has_enable_post_deactivate_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ramp_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PiffPPDeactivateControlConfig::PiffPPDeactivateControlConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deactivate_conf_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffPPDeactivateControlConfig)
}
PiffPPDeactivateControlConfig::PiffPPDeactivateControlConfig(const PiffPPDeactivateControlConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      deactivate_conf_(from.deactivate_conf_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_post_deactivate_control_, &from.enable_post_deactivate_control_,
    static_cast<size_t>(reinterpret_cast<char*>(&ramp_mode_) -
    reinterpret_cast<char*>(&enable_post_deactivate_control_)) + sizeof(ramp_mode_));
  // @@protoc_insertion_point(copy_constructor:control.PiffPPDeactivateControlConfig)
}

void PiffPPDeactivateControlConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&enable_post_deactivate_control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramp_mode_) -
      reinterpret_cast<char*>(&enable_post_deactivate_control_)) + sizeof(ramp_mode_));
}

PiffPPDeactivateControlConfig::~PiffPPDeactivateControlConfig() {
  // @@protoc_insertion_point(destructor:control.PiffPPDeactivateControlConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffPPDeactivateControlConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffPPDeactivateControlConfig::ArenaDtor(void* object) {
  PiffPPDeactivateControlConfig* _this = reinterpret_cast< PiffPPDeactivateControlConfig* >(object);
  (void)_this;
}
void PiffPPDeactivateControlConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffPPDeactivateControlConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffPPDeactivateControlConfig& PiffPPDeactivateControlConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffPPDeactivateControlConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffPPDeactivateControlConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffPPDeactivateControlConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deactivate_conf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&enable_post_deactivate_control_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ramp_mode_) -
        reinterpret_cast<char*>(&enable_post_deactivate_control_)) + sizeof(ramp_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffPPDeactivateControlConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_post_deactivate_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_post_deactivate_control(&has_bits);
          enable_post_deactivate_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.PiffPPDectivateControlContentConfig deactivate_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deactivate_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 ramp_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ramp_mode(&has_bits);
          ramp_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffPPDeactivateControlConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffPPDeactivateControlConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_post_deactivate_control = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_post_deactivate_control(), target);
  }

  // repeated .control.PiffPPDectivateControlContentConfig deactivate_conf = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deactivate_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_deactivate_conf(i), target, stream);
  }

  // required int32 ramp_mode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ramp_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffPPDeactivateControlConfig)
  return target;
}

size_t PiffPPDeactivateControlConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffPPDeactivateControlConfig)
  size_t total_size = 0;

  if (_internal_has_enable_post_deactivate_control()) {
    // required bool enable_post_deactivate_control = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_ramp_mode()) {
    // required int32 ramp_mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ramp_mode());
  }

  return total_size;
}
size_t PiffPPDeactivateControlConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffPPDeactivateControlConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool enable_post_deactivate_control = 1;
    total_size += 1 + 1;

    // required int32 ramp_mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ramp_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.PiffPPDectivateControlContentConfig deactivate_conf = 2;
  total_size += 1UL * this->_internal_deactivate_conf_size();
  for (const auto& msg : this->deactivate_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffPPDeactivateControlConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffPPDeactivateControlConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffPPDeactivateControlConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffPPDeactivateControlConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffPPDeactivateControlConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffPPDeactivateControlConfig)
    MergeFrom(*source);
  }
}

void PiffPPDeactivateControlConfig::MergeFrom(const PiffPPDeactivateControlConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffPPDeactivateControlConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deactivate_conf_.MergeFrom(from.deactivate_conf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enable_post_deactivate_control_ = from.enable_post_deactivate_control_;
    }
    if (cached_has_bits & 0x00000002u) {
      ramp_mode_ = from.ramp_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffPPDeactivateControlConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffPPDeactivateControlConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffPPDeactivateControlConfig::CopyFrom(const PiffPPDeactivateControlConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffPPDeactivateControlConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffPPDeactivateControlConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(deactivate_conf_)) return false;
  return true;
}

void PiffPPDeactivateControlConfig::InternalSwap(PiffPPDeactivateControlConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deactivate_conf_.InternalSwap(&other->deactivate_conf_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffPPDeactivateControlConfig, ramp_mode_)
      + sizeof(PiffPPDeactivateControlConfig::ramp_mode_)
      - PROTOBUF_FIELD_OFFSET(PiffPPDeactivateControlConfig, enable_post_deactivate_control_)>(
          reinterpret_cast<char*>(&enable_post_deactivate_control_),
          reinterpret_cast<char*>(&other->enable_post_deactivate_control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffPPDeactivateControlConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffPostProcessConfig::InitAsDefaultInstance() {
  ::control::_PiffPostProcessConfig_default_instance_._instance.get_mutable()->post_activate_control_conf_ = const_cast< ::control::PiffPPActivateControlConfig*>(
      ::control::PiffPPActivateControlConfig::internal_default_instance());
  ::control::_PiffPostProcessConfig_default_instance_._instance.get_mutable()->post_deactivate_control_conf_ = const_cast< ::control::PiffPPDeactivateControlConfig*>(
      ::control::PiffPPDeactivateControlConfig::internal_default_instance());
}
class PiffPostProcessConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffPostProcessConfig>()._has_bits_);
  static void set_has_enable_steering_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steering_range_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steering_rate_range_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::PiffPPActivateControlConfig& post_activate_control_conf(const PiffPostProcessConfig* msg);
  static void set_has_post_activate_control_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::PiffPPDeactivateControlConfig& post_deactivate_control_conf(const PiffPostProcessConfig* msg);
  static void set_has_post_deactivate_control_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::control::PiffPPActivateControlConfig&
PiffPostProcessConfig::_Internal::post_activate_control_conf(const PiffPostProcessConfig* msg) {
  return *msg->post_activate_control_conf_;
}
const ::control::PiffPPDeactivateControlConfig&
PiffPostProcessConfig::_Internal::post_deactivate_control_conf(const PiffPostProcessConfig* msg) {
  return *msg->post_deactivate_control_conf_;
}
PiffPostProcessConfig::PiffPostProcessConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steering_angle_limit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffPostProcessConfig)
}
PiffPostProcessConfig::PiffPostProcessConfig(const PiffPostProcessConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steering_angle_limit_(from.steering_angle_limit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_post_activate_control_conf()) {
    post_activate_control_conf_ = new ::control::PiffPPActivateControlConfig(*from.post_activate_control_conf_);
  } else {
    post_activate_control_conf_ = nullptr;
  }
  if (from._internal_has_post_deactivate_control_conf()) {
    post_deactivate_control_conf_ = new ::control::PiffPPDeactivateControlConfig(*from.post_deactivate_control_conf_);
  } else {
    post_deactivate_control_conf_ = nullptr;
  }
  ::memcpy(&enable_steering_limit_, &from.enable_steering_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&steering_rate_range_factor_) -
    reinterpret_cast<char*>(&enable_steering_limit_)) + sizeof(steering_rate_range_factor_));
  // @@protoc_insertion_point(copy_constructor:control.PiffPostProcessConfig)
}

void PiffPostProcessConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&post_activate_control_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steering_rate_range_factor_) -
      reinterpret_cast<char*>(&post_activate_control_conf_)) + sizeof(steering_rate_range_factor_));
}

PiffPostProcessConfig::~PiffPostProcessConfig() {
  // @@protoc_insertion_point(destructor:control.PiffPostProcessConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffPostProcessConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete post_activate_control_conf_;
  if (this != internal_default_instance()) delete post_deactivate_control_conf_;
}

void PiffPostProcessConfig::ArenaDtor(void* object) {
  PiffPostProcessConfig* _this = reinterpret_cast< PiffPostProcessConfig* >(object);
  (void)_this;
}
void PiffPostProcessConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffPostProcessConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffPostProcessConfig& PiffPostProcessConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffPostProcessConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffPostProcessConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffPostProcessConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steering_angle_limit_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(post_activate_control_conf_ != nullptr);
      post_activate_control_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(post_deactivate_control_conf_ != nullptr);
      post_deactivate_control_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&enable_steering_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_rate_range_factor_) -
        reinterpret_cast<char*>(&enable_steering_limit_)) + sizeof(steering_rate_range_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffPostProcessConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_steering_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_steering_limit(&has_bits);
          enable_steering_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float steering_range_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_steering_range_factor(&has_bits);
          steering_range_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float steering_rate_range_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_steering_rate_range_factor(&has_bits);
          steering_rate_range_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .control.PiffPPSteeringAngleLimit steering_angle_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steering_angle_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required .control.PiffPPActivateControlConfig post_activate_control_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_activate_control_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffPPDeactivateControlConfig post_deactivate_control_conf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_deactivate_control_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffPostProcessConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffPostProcessConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_steering_limit = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_steering_limit(), target);
  }

  // required float steering_range_factor = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_steering_range_factor(), target);
  }

  // required float steering_rate_range_factor = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_steering_rate_range_factor(), target);
  }

  // repeated .control.PiffPPSteeringAngleLimit steering_angle_limit = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steering_angle_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_steering_angle_limit(i), target, stream);
  }

  // required .control.PiffPPActivateControlConfig post_activate_control_conf = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::post_activate_control_conf(this), target, stream);
  }

  // required .control.PiffPPDeactivateControlConfig post_deactivate_control_conf = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::post_deactivate_control_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffPostProcessConfig)
  return target;
}

size_t PiffPostProcessConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffPostProcessConfig)
  size_t total_size = 0;

  if (_internal_has_post_activate_control_conf()) {
    // required .control.PiffPPActivateControlConfig post_activate_control_conf = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_activate_control_conf_);
  }

  if (_internal_has_post_deactivate_control_conf()) {
    // required .control.PiffPPDeactivateControlConfig post_deactivate_control_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_deactivate_control_conf_);
  }

  if (_internal_has_enable_steering_limit()) {
    // required bool enable_steering_limit = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_steering_range_factor()) {
    // required float steering_range_factor = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_steering_rate_range_factor()) {
    // required float steering_rate_range_factor = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffPostProcessConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffPostProcessConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .control.PiffPPActivateControlConfig post_activate_control_conf = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_activate_control_conf_);

    // required .control.PiffPPDeactivateControlConfig post_deactivate_control_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_deactivate_control_conf_);

    // required bool enable_steering_limit = 1;
    total_size += 1 + 1;

    // required float steering_range_factor = 2;
    total_size += 1 + 4;

    // required float steering_rate_range_factor = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.PiffPPSteeringAngleLimit steering_angle_limit = 4;
  total_size += 1UL * this->_internal_steering_angle_limit_size();
  for (const auto& msg : this->steering_angle_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffPostProcessConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffPostProcessConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffPostProcessConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffPostProcessConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffPostProcessConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffPostProcessConfig)
    MergeFrom(*source);
  }
}

void PiffPostProcessConfig::MergeFrom(const PiffPostProcessConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffPostProcessConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steering_angle_limit_.MergeFrom(from.steering_angle_limit_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_post_activate_control_conf()->::control::PiffPPActivateControlConfig::MergeFrom(from._internal_post_activate_control_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_post_deactivate_control_conf()->::control::PiffPPDeactivateControlConfig::MergeFrom(from._internal_post_deactivate_control_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      enable_steering_limit_ = from.enable_steering_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      steering_range_factor_ = from.steering_range_factor_;
    }
    if (cached_has_bits & 0x00000010u) {
      steering_rate_range_factor_ = from.steering_rate_range_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffPostProcessConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffPostProcessConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffPostProcessConfig::CopyFrom(const PiffPostProcessConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffPostProcessConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffPostProcessConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(steering_angle_limit_)) return false;
  if (_internal_has_post_activate_control_conf()) {
    if (!post_activate_control_conf_->IsInitialized()) return false;
  }
  if (_internal_has_post_deactivate_control_conf()) {
    if (!post_deactivate_control_conf_->IsInitialized()) return false;
  }
  return true;
}

void PiffPostProcessConfig::InternalSwap(PiffPostProcessConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steering_angle_limit_.InternalSwap(&other->steering_angle_limit_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffPostProcessConfig, steering_rate_range_factor_)
      + sizeof(PiffPostProcessConfig::steering_rate_range_factor_)
      - PROTOBUF_FIELD_OFFSET(PiffPostProcessConfig, post_activate_control_conf_)>(
          reinterpret_cast<char*>(&post_activate_control_conf_),
          reinterpret_cast<char*>(&other->post_activate_control_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffPostProcessConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffCoeffientGainConfig::InitAsDefaultInstance() {
}
class PiffCoeffientGainConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffCoeffientGainConfig>()._has_bits_);
  static void set_has_c0_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c1_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c2_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PiffCoeffientGainConfig::PiffCoeffientGainConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffCoeffientGainConfig)
}
PiffCoeffientGainConfig::PiffCoeffientGainConfig(const PiffCoeffientGainConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&c0_threshold_, &from.c0_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&c2_coef_) -
    reinterpret_cast<char*>(&c0_threshold_)) + sizeof(c2_coef_));
  // @@protoc_insertion_point(copy_constructor:control.PiffCoeffientGainConfig)
}

void PiffCoeffientGainConfig::SharedCtor() {
  ::memset(&c0_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c2_coef_) -
      reinterpret_cast<char*>(&c0_threshold_)) + sizeof(c2_coef_));
}

PiffCoeffientGainConfig::~PiffCoeffientGainConfig() {
  // @@protoc_insertion_point(destructor:control.PiffCoeffientGainConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffCoeffientGainConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffCoeffientGainConfig::ArenaDtor(void* object) {
  PiffCoeffientGainConfig* _this = reinterpret_cast< PiffCoeffientGainConfig* >(object);
  (void)_this;
}
void PiffCoeffientGainConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffCoeffientGainConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffCoeffientGainConfig& PiffCoeffientGainConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffCoeffientGainConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffCoeffientGainConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffCoeffientGainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&c0_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c2_coef_) -
        reinterpret_cast<char*>(&c0_threshold_)) + sizeof(c2_coef_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffCoeffientGainConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float c0_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_c0_threshold(&has_bits);
          c0_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c1_coef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_c1_coef(&has_bits);
          c1_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float c2_coef = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_c2_coef(&has_bits);
          c2_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffCoeffientGainConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffCoeffientGainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float c0_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_c0_threshold(), target);
  }

  // required float c1_coef = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c1_coef(), target);
  }

  // required float c2_coef = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_c2_coef(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffCoeffientGainConfig)
  return target;
}

size_t PiffCoeffientGainConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffCoeffientGainConfig)
  size_t total_size = 0;

  if (_internal_has_c0_threshold()) {
    // required float c0_threshold = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_c1_coef()) {
    // required float c1_coef = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_c2_coef()) {
    // required float c2_coef = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffCoeffientGainConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffCoeffientGainConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float c0_threshold = 1;
    total_size += 1 + 4;

    // required float c1_coef = 2;
    total_size += 1 + 4;

    // required float c2_coef = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffCoeffientGainConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffCoeffientGainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffCoeffientGainConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffCoeffientGainConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffCoeffientGainConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffCoeffientGainConfig)
    MergeFrom(*source);
  }
}

void PiffCoeffientGainConfig::MergeFrom(const PiffCoeffientGainConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffCoeffientGainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      c0_threshold_ = from.c0_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      c1_coef_ = from.c1_coef_;
    }
    if (cached_has_bits & 0x00000004u) {
      c2_coef_ = from.c2_coef_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffCoeffientGainConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffCoeffientGainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffCoeffientGainConfig::CopyFrom(const PiffCoeffientGainConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffCoeffientGainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffCoeffientGainConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffCoeffientGainConfig::InternalSwap(PiffCoeffientGainConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffCoeffientGainConfig, c2_coef_)
      + sizeof(PiffCoeffientGainConfig::c2_coef_)
      - PROTOBUF_FIELD_OFFSET(PiffCoeffientGainConfig, c0_threshold_)>(
          reinterpret_cast<char*>(&c0_threshold_),
          reinterpret_cast<char*>(&other->c0_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffCoeffientGainConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PiffCommonParametersConfig::InitAsDefaultInstance() {
}
class PiffCommonParametersConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiffCommonParametersConfig>()._has_bits_);
  static void set_has_control_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_standstill_speed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PiffCommonParametersConfig::PiffCommonParametersConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.PiffCommonParametersConfig)
}
PiffCommonParametersConfig::PiffCommonParametersConfig(const PiffCommonParametersConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&control_period_, &from.control_period_,
    static_cast<size_t>(reinterpret_cast<char*>(&standstill_speed_mps_) -
    reinterpret_cast<char*>(&control_period_)) + sizeof(standstill_speed_mps_));
  // @@protoc_insertion_point(copy_constructor:control.PiffCommonParametersConfig)
}

void PiffCommonParametersConfig::SharedCtor() {
  ::memset(&control_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&standstill_speed_mps_) -
      reinterpret_cast<char*>(&control_period_)) + sizeof(standstill_speed_mps_));
}

PiffCommonParametersConfig::~PiffCommonParametersConfig() {
  // @@protoc_insertion_point(destructor:control.PiffCommonParametersConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiffCommonParametersConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiffCommonParametersConfig::ArenaDtor(void* object) {
  PiffCommonParametersConfig* _this = reinterpret_cast< PiffCommonParametersConfig* >(object);
  (void)_this;
}
void PiffCommonParametersConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiffCommonParametersConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiffCommonParametersConfig& PiffCommonParametersConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiffCommonParametersConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiffCommonParametersConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.PiffCommonParametersConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&control_period_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&standstill_speed_mps_) -
        reinterpret_cast<char*>(&control_period_)) + sizeof(standstill_speed_mps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiffCommonParametersConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float control_period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_control_period(&has_bits);
          control_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float standstill_speed_mps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_standstill_speed_mps(&has_bits);
          standstill_speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiffCommonParametersConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.PiffCommonParametersConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float control_period = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_control_period(), target);
  }

  // required float standstill_speed_mps = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_standstill_speed_mps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.PiffCommonParametersConfig)
  return target;
}

size_t PiffCommonParametersConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.PiffCommonParametersConfig)
  size_t total_size = 0;

  if (_internal_has_control_period()) {
    // required float control_period = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_standstill_speed_mps()) {
    // required float standstill_speed_mps = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PiffCommonParametersConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.PiffCommonParametersConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float control_period = 1;
    total_size += 1 + 4;

    // required float standstill_speed_mps = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiffCommonParametersConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.PiffCommonParametersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiffCommonParametersConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiffCommonParametersConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.PiffCommonParametersConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.PiffCommonParametersConfig)
    MergeFrom(*source);
  }
}

void PiffCommonParametersConfig::MergeFrom(const PiffCommonParametersConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.PiffCommonParametersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      control_period_ = from.control_period_;
    }
    if (cached_has_bits & 0x00000002u) {
      standstill_speed_mps_ = from.standstill_speed_mps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiffCommonParametersConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.PiffCommonParametersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiffCommonParametersConfig::CopyFrom(const PiffCommonParametersConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.PiffCommonParametersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiffCommonParametersConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PiffCommonParametersConfig::InternalSwap(PiffCommonParametersConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiffCommonParametersConfig, standstill_speed_mps_)
      + sizeof(PiffCommonParametersConfig::standstill_speed_mps_)
      - PROTOBUF_FIELD_OFFSET(PiffCommonParametersConfig, control_period_)>(
          reinterpret_cast<char*>(&control_period_),
          reinterpret_cast<char*>(&other->control_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiffCommonParametersConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatPidConfig::InitAsDefaultInstance() {
  ::control::_LatPidConfig_default_instance_._instance.get_mutable()->common_para_conf_ = const_cast< ::control::PiffCommonParametersConfig*>(
      ::control::PiffCommonParametersConfig::internal_default_instance());
  ::control::_LatPidConfig_default_instance_._instance.get_mutable()->controller_content_conf_ = const_cast< ::control::PiffControllerContentConfig*>(
      ::control::PiffControllerContentConfig::internal_default_instance());
  ::control::_LatPidConfig_default_instance_._instance.get_mutable()->mean_filter_conf_ = const_cast< ::control::PiffMeanFilterConfig*>(
      ::control::PiffMeanFilterConfig::internal_default_instance());
  ::control::_LatPidConfig_default_instance_._instance.get_mutable()->tracking_differentiator_conf_ = const_cast< ::control::PiffTrackingDifferentiatorConfig*>(
      ::control::PiffTrackingDifferentiatorConfig::internal_default_instance());
  ::control::_LatPidConfig_default_instance_._instance.get_mutable()->data_transform_conf_ = const_cast< ::control::PiffDataTransformConfig*>(
      ::control::PiffDataTransformConfig::internal_default_instance());
  ::control::_LatPidConfig_default_instance_._instance.get_mutable()->post_process_conf_ = const_cast< ::control::PiffPostProcessConfig*>(
      ::control::PiffPostProcessConfig::internal_default_instance());
  ::control::_LatPidConfig_default_instance_._instance.get_mutable()->coeffient_gain_conf_ = const_cast< ::control::PiffCoeffientGainConfig*>(
      ::control::PiffCoeffientGainConfig::internal_default_instance());
}
class LatPidConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LatPidConfig>()._has_bits_);
  static const ::control::PiffCommonParametersConfig& common_para_conf(const LatPidConfig* msg);
  static void set_has_common_para_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::PiffControllerContentConfig& controller_content_conf(const LatPidConfig* msg);
  static void set_has_controller_content_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::PiffMeanFilterConfig& mean_filter_conf(const LatPidConfig* msg);
  static void set_has_mean_filter_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::PiffTrackingDifferentiatorConfig& tracking_differentiator_conf(const LatPidConfig* msg);
  static void set_has_tracking_differentiator_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::control::PiffDataTransformConfig& data_transform_conf(const LatPidConfig* msg);
  static void set_has_data_transform_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::PiffPostProcessConfig& post_process_conf(const LatPidConfig* msg);
  static void set_has_post_process_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::PiffCoeffientGainConfig& coeffient_gain_conf(const LatPidConfig* msg);
  static void set_has_coeffient_gain_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::control::PiffCommonParametersConfig&
LatPidConfig::_Internal::common_para_conf(const LatPidConfig* msg) {
  return *msg->common_para_conf_;
}
const ::control::PiffControllerContentConfig&
LatPidConfig::_Internal::controller_content_conf(const LatPidConfig* msg) {
  return *msg->controller_content_conf_;
}
const ::control::PiffMeanFilterConfig&
LatPidConfig::_Internal::mean_filter_conf(const LatPidConfig* msg) {
  return *msg->mean_filter_conf_;
}
const ::control::PiffTrackingDifferentiatorConfig&
LatPidConfig::_Internal::tracking_differentiator_conf(const LatPidConfig* msg) {
  return *msg->tracking_differentiator_conf_;
}
const ::control::PiffDataTransformConfig&
LatPidConfig::_Internal::data_transform_conf(const LatPidConfig* msg) {
  return *msg->data_transform_conf_;
}
const ::control::PiffPostProcessConfig&
LatPidConfig::_Internal::post_process_conf(const LatPidConfig* msg) {
  return *msg->post_process_conf_;
}
const ::control::PiffCoeffientGainConfig&
LatPidConfig::_Internal::coeffient_gain_conf(const LatPidConfig* msg) {
  return *msg->coeffient_gain_conf_;
}
LatPidConfig::LatPidConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  piff_paras_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.LatPidConfig)
}
LatPidConfig::LatPidConfig(const LatPidConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      piff_paras_(from.piff_paras_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common_para_conf()) {
    common_para_conf_ = new ::control::PiffCommonParametersConfig(*from.common_para_conf_);
  } else {
    common_para_conf_ = nullptr;
  }
  if (from._internal_has_controller_content_conf()) {
    controller_content_conf_ = new ::control::PiffControllerContentConfig(*from.controller_content_conf_);
  } else {
    controller_content_conf_ = nullptr;
  }
  if (from._internal_has_mean_filter_conf()) {
    mean_filter_conf_ = new ::control::PiffMeanFilterConfig(*from.mean_filter_conf_);
  } else {
    mean_filter_conf_ = nullptr;
  }
  if (from._internal_has_tracking_differentiator_conf()) {
    tracking_differentiator_conf_ = new ::control::PiffTrackingDifferentiatorConfig(*from.tracking_differentiator_conf_);
  } else {
    tracking_differentiator_conf_ = nullptr;
  }
  if (from._internal_has_data_transform_conf()) {
    data_transform_conf_ = new ::control::PiffDataTransformConfig(*from.data_transform_conf_);
  } else {
    data_transform_conf_ = nullptr;
  }
  if (from._internal_has_post_process_conf()) {
    post_process_conf_ = new ::control::PiffPostProcessConfig(*from.post_process_conf_);
  } else {
    post_process_conf_ = nullptr;
  }
  if (from._internal_has_coeffient_gain_conf()) {
    coeffient_gain_conf_ = new ::control::PiffCoeffientGainConfig(*from.coeffient_gain_conf_);
  } else {
    coeffient_gain_conf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.LatPidConfig)
}

void LatPidConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatPidConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  ::memset(&common_para_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coeffient_gain_conf_) -
      reinterpret_cast<char*>(&common_para_conf_)) + sizeof(coeffient_gain_conf_));
}

LatPidConfig::~LatPidConfig() {
  // @@protoc_insertion_point(destructor:control.LatPidConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatPidConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_para_conf_;
  if (this != internal_default_instance()) delete controller_content_conf_;
  if (this != internal_default_instance()) delete mean_filter_conf_;
  if (this != internal_default_instance()) delete tracking_differentiator_conf_;
  if (this != internal_default_instance()) delete data_transform_conf_;
  if (this != internal_default_instance()) delete post_process_conf_;
  if (this != internal_default_instance()) delete coeffient_gain_conf_;
}

void LatPidConfig::ArenaDtor(void* object) {
  LatPidConfig* _this = reinterpret_cast< LatPidConfig* >(object);
  (void)_this;
}
void LatPidConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatPidConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatPidConfig& LatPidConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatPidConfig_control_5fbase_2flat_5fpid_5fcontroller_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LatPidConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.LatPidConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  piff_paras_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(common_para_conf_ != nullptr);
      common_para_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(controller_content_conf_ != nullptr);
      controller_content_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mean_filter_conf_ != nullptr);
      mean_filter_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tracking_differentiator_conf_ != nullptr);
      tracking_differentiator_conf_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(data_transform_conf_ != nullptr);
      data_transform_conf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(post_process_conf_ != nullptr);
      post_process_conf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(coeffient_gain_conf_ != nullptr);
      coeffient_gain_conf_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatPidConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .control.PiffCommonParametersConfig common_para_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_para_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffControllerContentConfig controller_content_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_content_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.PiffParameters piff_paras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_piff_paras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required .control.PiffMeanFilterConfig mean_filter_conf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mean_filter_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffTrackingDifferentiatorConfig tracking_differentiator_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracking_differentiator_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffDataTransformConfig data_transform_conf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_transform_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffPostProcessConfig post_process_conf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_process_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .control.PiffCoeffientGainConfig coeffient_gain_conf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_coeffient_gain_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatPidConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.LatPidConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .control.PiffCommonParametersConfig common_para_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common_para_conf(this), target, stream);
  }

  // required .control.PiffControllerContentConfig controller_content_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::controller_content_conf(this), target, stream);
  }

  // repeated .control.PiffParameters piff_paras = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_piff_paras_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_piff_paras(i), target, stream);
  }

  // required .control.PiffMeanFilterConfig mean_filter_conf = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mean_filter_conf(this), target, stream);
  }

  // required .control.PiffTrackingDifferentiatorConfig tracking_differentiator_conf = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tracking_differentiator_conf(this), target, stream);
  }

  // required .control.PiffDataTransformConfig data_transform_conf = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::data_transform_conf(this), target, stream);
  }

  // required .control.PiffPostProcessConfig post_process_conf = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::post_process_conf(this), target, stream);
  }

  // required .control.PiffCoeffientGainConfig coeffient_gain_conf = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::coeffient_gain_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.LatPidConfig)
  return target;
}

size_t LatPidConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:control.LatPidConfig)
  size_t total_size = 0;

  if (_internal_has_common_para_conf()) {
    // required .control.PiffCommonParametersConfig common_para_conf = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_para_conf_);
  }

  if (_internal_has_controller_content_conf()) {
    // required .control.PiffControllerContentConfig controller_content_conf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_content_conf_);
  }

  if (_internal_has_mean_filter_conf()) {
    // required .control.PiffMeanFilterConfig mean_filter_conf = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mean_filter_conf_);
  }

  if (_internal_has_tracking_differentiator_conf()) {
    // required .control.PiffTrackingDifferentiatorConfig tracking_differentiator_conf = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tracking_differentiator_conf_);
  }

  if (_internal_has_data_transform_conf()) {
    // required .control.PiffDataTransformConfig data_transform_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_transform_conf_);
  }

  if (_internal_has_post_process_conf()) {
    // required .control.PiffPostProcessConfig post_process_conf = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_process_conf_);
  }

  if (_internal_has_coeffient_gain_conf()) {
    // required .control.PiffCoeffientGainConfig coeffient_gain_conf = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coeffient_gain_conf_);
  }

  return total_size;
}
size_t LatPidConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.LatPidConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .control.PiffCommonParametersConfig common_para_conf = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_para_conf_);

    // required .control.PiffControllerContentConfig controller_content_conf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_content_conf_);

    // required .control.PiffMeanFilterConfig mean_filter_conf = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mean_filter_conf_);

    // required .control.PiffTrackingDifferentiatorConfig tracking_differentiator_conf = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tracking_differentiator_conf_);

    // required .control.PiffDataTransformConfig data_transform_conf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_transform_conf_);

    // required .control.PiffPostProcessConfig post_process_conf = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_process_conf_);

    // required .control.PiffCoeffientGainConfig coeffient_gain_conf = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coeffient_gain_conf_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.PiffParameters piff_paras = 3;
  total_size += 1UL * this->_internal_piff_paras_size();
  for (const auto& msg : this->piff_paras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatPidConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.LatPidConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LatPidConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatPidConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.LatPidConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.LatPidConfig)
    MergeFrom(*source);
  }
}

void LatPidConfig::MergeFrom(const LatPidConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.LatPidConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  piff_paras_.MergeFrom(from.piff_paras_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_common_para_conf()->::control::PiffCommonParametersConfig::MergeFrom(from._internal_common_para_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_controller_content_conf()->::control::PiffControllerContentConfig::MergeFrom(from._internal_controller_content_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mean_filter_conf()->::control::PiffMeanFilterConfig::MergeFrom(from._internal_mean_filter_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tracking_differentiator_conf()->::control::PiffTrackingDifferentiatorConfig::MergeFrom(from._internal_tracking_differentiator_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_data_transform_conf()->::control::PiffDataTransformConfig::MergeFrom(from._internal_data_transform_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_post_process_conf()->::control::PiffPostProcessConfig::MergeFrom(from._internal_post_process_conf());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_coeffient_gain_conf()->::control::PiffCoeffientGainConfig::MergeFrom(from._internal_coeffient_gain_conf());
    }
  }
}

void LatPidConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.LatPidConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatPidConfig::CopyFrom(const LatPidConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.LatPidConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatPidConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(piff_paras_)) return false;
  if (_internal_has_common_para_conf()) {
    if (!common_para_conf_->IsInitialized()) return false;
  }
  if (_internal_has_controller_content_conf()) {
    if (!controller_content_conf_->IsInitialized()) return false;
  }
  if (_internal_has_mean_filter_conf()) {
    if (!mean_filter_conf_->IsInitialized()) return false;
  }
  if (_internal_has_tracking_differentiator_conf()) {
    if (!tracking_differentiator_conf_->IsInitialized()) return false;
  }
  if (_internal_has_data_transform_conf()) {
    if (!data_transform_conf_->IsInitialized()) return false;
  }
  if (_internal_has_post_process_conf()) {
    if (!post_process_conf_->IsInitialized()) return false;
  }
  if (_internal_has_coeffient_gain_conf()) {
    if (!coeffient_gain_conf_->IsInitialized()) return false;
  }
  return true;
}

void LatPidConfig::InternalSwap(LatPidConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  piff_paras_.InternalSwap(&other->piff_paras_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatPidConfig, coeffient_gain_conf_)
      + sizeof(LatPidConfig::coeffient_gain_conf_)
      - PROTOBUF_FIELD_OFFSET(LatPidConfig, common_para_conf_)>(
          reinterpret_cast<char*>(&common_para_conf_),
          reinterpret_cast<char*>(&other->common_para_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatPidConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::PiffParameters* Arena::CreateMaybeMessage< ::control::PiffParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffMeanFilterSwitch* Arena::CreateMaybeMessage< ::control::PiffMeanFilterSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffMeanFilterSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffMeanFilterWindowSize* Arena::CreateMaybeMessage< ::control::PiffMeanFilterWindowSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffMeanFilterWindowSize >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffMeanFilterConfig* Arena::CreateMaybeMessage< ::control::PiffMeanFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffMeanFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffControllerContentRateConfig* Arena::CreateMaybeMessage< ::control::PiffControllerContentRateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffControllerContentRateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffLinearModeIntegratorConfig* Arena::CreateMaybeMessage< ::control::PiffLinearModeIntegratorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffLinearModeIntegratorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffPercentageModeIntegratorConfig* Arena::CreateMaybeMessage< ::control::PiffPercentageModeIntegratorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffPercentageModeIntegratorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffProtectIntegratorConfig* Arena::CreateMaybeMessage< ::control::PiffProtectIntegratorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffProtectIntegratorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffIntegratorConfig* Arena::CreateMaybeMessage< ::control::PiffIntegratorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffIntegratorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffCCSteeringFakeDeadZoneConfig* Arena::CreateMaybeMessage< ::control::PiffCCSteeringFakeDeadZoneConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffCCSteeringFakeDeadZoneConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffControllerContentConfig* Arena::CreateMaybeMessage< ::control::PiffControllerContentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffControllerContentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffTrackingDifferentiatorSwitch* Arena::CreateMaybeMessage< ::control::PiffTrackingDifferentiatorSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffTrackingDifferentiatorSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffTrackingDifferentiatorStateParameters* Arena::CreateMaybeMessage< ::control::PiffTrackingDifferentiatorStateParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffTrackingDifferentiatorStateParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffTrackingDifferentiatorConfig* Arena::CreateMaybeMessage< ::control::PiffTrackingDifferentiatorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffTrackingDifferentiatorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffDTInputMaxLimitConfig* Arena::CreateMaybeMessage< ::control::PiffDTInputMaxLimitConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffDTInputMaxLimitConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffDTInputFrameLimitConfig* Arena::CreateMaybeMessage< ::control::PiffDTInputFrameLimitConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffDTInputFrameLimitConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffDataTransformConfig* Arena::CreateMaybeMessage< ::control::PiffDataTransformConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffDataTransformConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffPPSteeringAngleLimit* Arena::CreateMaybeMessage< ::control::PiffPPSteeringAngleLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffPPSteeringAngleLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffPPActivateControlContentConfig* Arena::CreateMaybeMessage< ::control::PiffPPActivateControlContentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffPPActivateControlContentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffPPDectivateControlContentConfig* Arena::CreateMaybeMessage< ::control::PiffPPDectivateControlContentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffPPDectivateControlContentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffPPActivateControlConfig* Arena::CreateMaybeMessage< ::control::PiffPPActivateControlConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffPPActivateControlConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffPPDeactivateControlConfig* Arena::CreateMaybeMessage< ::control::PiffPPDeactivateControlConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffPPDeactivateControlConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffPostProcessConfig* Arena::CreateMaybeMessage< ::control::PiffPostProcessConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffPostProcessConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffCoeffientGainConfig* Arena::CreateMaybeMessage< ::control::PiffCoeffientGainConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffCoeffientGainConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::PiffCommonParametersConfig* Arena::CreateMaybeMessage< ::control::PiffCommonParametersConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::PiffCommonParametersConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::control::LatPidConfig* Arena::CreateMaybeMessage< ::control::LatPidConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::LatPidConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

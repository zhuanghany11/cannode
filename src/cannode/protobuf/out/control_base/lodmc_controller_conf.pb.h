// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/lodmc_controller_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "control_base/pid_conf.pb.h"
#include "control_base/gain_scheduler_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto;
namespace control {
namespace lodmcctrl {
class LoDmcControllerConf;
class LoDmcControllerConfDefaultTypeInternal;
extern LoDmcControllerConfDefaultTypeInternal _LoDmcControllerConf_default_instance_;
}  // namespace lodmcctrl
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::lodmcctrl::LoDmcControllerConf* Arena::CreateMaybeMessage<::control::lodmcctrl::LoDmcControllerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {
namespace lodmcctrl {

// ===================================================================

class LoDmcControllerConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.lodmcctrl.LoDmcControllerConf) */ {
 public:
  inline LoDmcControllerConf() : LoDmcControllerConf(nullptr) {};
  virtual ~LoDmcControllerConf();

  LoDmcControllerConf(const LoDmcControllerConf& from);
  LoDmcControllerConf(LoDmcControllerConf&& from) noexcept
    : LoDmcControllerConf() {
    *this = ::std::move(from);
  }

  inline LoDmcControllerConf& operator=(const LoDmcControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoDmcControllerConf& operator=(LoDmcControllerConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoDmcControllerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoDmcControllerConf* internal_default_instance() {
    return reinterpret_cast<const LoDmcControllerConf*>(
               &_LoDmcControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoDmcControllerConf& a, LoDmcControllerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(LoDmcControllerConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoDmcControllerConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoDmcControllerConf* New() const final {
    return CreateMaybeMessage<LoDmcControllerConf>(nullptr);
  }

  LoDmcControllerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoDmcControllerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoDmcControllerConf& from);
  void MergeFrom(const LoDmcControllerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoDmcControllerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.lodmcctrl.LoDmcControllerConf";
  }
  protected:
  explicit LoDmcControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto);
    return ::descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLodmcPidConfFieldNumber = 7,
    kSlopeDmcFGainSchedulerFieldNumber = 10,
    kRollDmcFGainSchedulerFieldNumber = 11,
    kKpDmcGainSchedulerFieldNumber = 12,
    kFbDmcGainSchedulerFieldNumber = 13,
    kDmcFRollGainSchedulerFieldNumber = 14,
    kDmcFAirGainSchedulerFieldNumber = 15,
    kDmcFAccGainSchedulerFieldNumber = 16,
    kSlopeDmcFAccGainSchedulerFieldNumber = 21,
    kSlopeDmcFDecelMassGainSchedulerFieldNumber = 22,
    kGAccFieldNumber = 1,
    kFCoefFieldNumber = 2,
    kMassFieldNumber = 3,
    kCdFieldNumber = 4,
    kAreaFieldNumber = 5,
    kRollFieldNumber = 6,
    kF2TCoefFieldNumber = 8,
    kTsFieldNumber = 9,
    kLodmcTorqLimitUpFieldNumber = 17,
    kLodmcTorqLimitLowFieldNumber = 18,
    kControlFreqFieldNumber = 19,
    kAccErrLowpassfilterCutoffFreqFieldNumber = 20,
    kTargetAccLowpassfilterCutoffFreqFieldNumber = 23,
  };
  // optional .control.PidConf lodmc_pid_conf = 7;
  bool has_lodmc_pid_conf() const;
  private:
  bool _internal_has_lodmc_pid_conf() const;
  public:
  void clear_lodmc_pid_conf();
  const ::control::PidConf& lodmc_pid_conf() const;
  ::control::PidConf* release_lodmc_pid_conf();
  ::control::PidConf* mutable_lodmc_pid_conf();
  void set_allocated_lodmc_pid_conf(::control::PidConf* lodmc_pid_conf);
  private:
  const ::control::PidConf& _internal_lodmc_pid_conf() const;
  ::control::PidConf* _internal_mutable_lodmc_pid_conf();
  public:
  void unsafe_arena_set_allocated_lodmc_pid_conf(
      ::control::PidConf* lodmc_pid_conf);
  ::control::PidConf* unsafe_arena_release_lodmc_pid_conf();

  // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
  bool has_slope_dmc_f_gain_scheduler() const;
  private:
  bool _internal_has_slope_dmc_f_gain_scheduler() const;
  public:
  void clear_slope_dmc_f_gain_scheduler();
  const ::control::GainScheduler& slope_dmc_f_gain_scheduler() const;
  ::control::GainScheduler* release_slope_dmc_f_gain_scheduler();
  ::control::GainScheduler* mutable_slope_dmc_f_gain_scheduler();
  void set_allocated_slope_dmc_f_gain_scheduler(::control::GainScheduler* slope_dmc_f_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_slope_dmc_f_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_dmc_f_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_slope_dmc_f_gain_scheduler(
      ::control::GainScheduler* slope_dmc_f_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_slope_dmc_f_gain_scheduler();

  // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
  bool has_roll_dmc_f_gain_scheduler() const;
  private:
  bool _internal_has_roll_dmc_f_gain_scheduler() const;
  public:
  void clear_roll_dmc_f_gain_scheduler();
  const ::control::GainScheduler& roll_dmc_f_gain_scheduler() const;
  ::control::GainScheduler* release_roll_dmc_f_gain_scheduler();
  ::control::GainScheduler* mutable_roll_dmc_f_gain_scheduler();
  void set_allocated_roll_dmc_f_gain_scheduler(::control::GainScheduler* roll_dmc_f_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_roll_dmc_f_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_roll_dmc_f_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_roll_dmc_f_gain_scheduler(
      ::control::GainScheduler* roll_dmc_f_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_roll_dmc_f_gain_scheduler();

  // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
  bool has_kp_dmc_gain_scheduler() const;
  private:
  bool _internal_has_kp_dmc_gain_scheduler() const;
  public:
  void clear_kp_dmc_gain_scheduler();
  const ::control::GainScheduler& kp_dmc_gain_scheduler() const;
  ::control::GainScheduler* release_kp_dmc_gain_scheduler();
  ::control::GainScheduler* mutable_kp_dmc_gain_scheduler();
  void set_allocated_kp_dmc_gain_scheduler(::control::GainScheduler* kp_dmc_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_kp_dmc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_kp_dmc_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_kp_dmc_gain_scheduler(
      ::control::GainScheduler* kp_dmc_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_kp_dmc_gain_scheduler();

  // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
  bool has_fb_dmc_gain_scheduler() const;
  private:
  bool _internal_has_fb_dmc_gain_scheduler() const;
  public:
  void clear_fb_dmc_gain_scheduler();
  const ::control::GainScheduler& fb_dmc_gain_scheduler() const;
  ::control::GainScheduler* release_fb_dmc_gain_scheduler();
  ::control::GainScheduler* mutable_fb_dmc_gain_scheduler();
  void set_allocated_fb_dmc_gain_scheduler(::control::GainScheduler* fb_dmc_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_fb_dmc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_fb_dmc_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_fb_dmc_gain_scheduler(
      ::control::GainScheduler* fb_dmc_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_fb_dmc_gain_scheduler();

  // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
  bool has_dmc_f_roll_gain_scheduler() const;
  private:
  bool _internal_has_dmc_f_roll_gain_scheduler() const;
  public:
  void clear_dmc_f_roll_gain_scheduler();
  const ::control::GainScheduler& dmc_f_roll_gain_scheduler() const;
  ::control::GainScheduler* release_dmc_f_roll_gain_scheduler();
  ::control::GainScheduler* mutable_dmc_f_roll_gain_scheduler();
  void set_allocated_dmc_f_roll_gain_scheduler(::control::GainScheduler* dmc_f_roll_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_dmc_f_roll_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_dmc_f_roll_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_dmc_f_roll_gain_scheduler(
      ::control::GainScheduler* dmc_f_roll_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_dmc_f_roll_gain_scheduler();

  // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
  bool has_dmc_f_air_gain_scheduler() const;
  private:
  bool _internal_has_dmc_f_air_gain_scheduler() const;
  public:
  void clear_dmc_f_air_gain_scheduler();
  const ::control::GainScheduler& dmc_f_air_gain_scheduler() const;
  ::control::GainScheduler* release_dmc_f_air_gain_scheduler();
  ::control::GainScheduler* mutable_dmc_f_air_gain_scheduler();
  void set_allocated_dmc_f_air_gain_scheduler(::control::GainScheduler* dmc_f_air_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_dmc_f_air_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_dmc_f_air_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_dmc_f_air_gain_scheduler(
      ::control::GainScheduler* dmc_f_air_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_dmc_f_air_gain_scheduler();

  // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
  bool has_dmc_f_acc_gain_scheduler() const;
  private:
  bool _internal_has_dmc_f_acc_gain_scheduler() const;
  public:
  void clear_dmc_f_acc_gain_scheduler();
  const ::control::GainScheduler& dmc_f_acc_gain_scheduler() const;
  ::control::GainScheduler* release_dmc_f_acc_gain_scheduler();
  ::control::GainScheduler* mutable_dmc_f_acc_gain_scheduler();
  void set_allocated_dmc_f_acc_gain_scheduler(::control::GainScheduler* dmc_f_acc_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_dmc_f_acc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_dmc_f_acc_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_dmc_f_acc_gain_scheduler(
      ::control::GainScheduler* dmc_f_acc_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_dmc_f_acc_gain_scheduler();

  // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
  bool has_slope_dmc_f_acc_gain_scheduler() const;
  private:
  bool _internal_has_slope_dmc_f_acc_gain_scheduler() const;
  public:
  void clear_slope_dmc_f_acc_gain_scheduler();
  const ::control::GainScheduler& slope_dmc_f_acc_gain_scheduler() const;
  ::control::GainScheduler* release_slope_dmc_f_acc_gain_scheduler();
  ::control::GainScheduler* mutable_slope_dmc_f_acc_gain_scheduler();
  void set_allocated_slope_dmc_f_acc_gain_scheduler(::control::GainScheduler* slope_dmc_f_acc_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_slope_dmc_f_acc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_dmc_f_acc_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_slope_dmc_f_acc_gain_scheduler(
      ::control::GainScheduler* slope_dmc_f_acc_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_slope_dmc_f_acc_gain_scheduler();

  // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
  bool has_slope_dmc_f_decel_mass_gain_scheduler() const;
  private:
  bool _internal_has_slope_dmc_f_decel_mass_gain_scheduler() const;
  public:
  void clear_slope_dmc_f_decel_mass_gain_scheduler();
  const ::control::GainScheduler& slope_dmc_f_decel_mass_gain_scheduler() const;
  ::control::GainScheduler* release_slope_dmc_f_decel_mass_gain_scheduler();
  ::control::GainScheduler* mutable_slope_dmc_f_decel_mass_gain_scheduler();
  void set_allocated_slope_dmc_f_decel_mass_gain_scheduler(::control::GainScheduler* slope_dmc_f_decel_mass_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_slope_dmc_f_decel_mass_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_dmc_f_decel_mass_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_slope_dmc_f_decel_mass_gain_scheduler(
      ::control::GainScheduler* slope_dmc_f_decel_mass_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_slope_dmc_f_decel_mass_gain_scheduler();

  // optional double g_acc = 1;
  bool has_g_acc() const;
  private:
  bool _internal_has_g_acc() const;
  public:
  void clear_g_acc();
  double g_acc() const;
  void set_g_acc(double value);
  private:
  double _internal_g_acc() const;
  void _internal_set_g_acc(double value);
  public:

  // optional double f_coef = 2;
  bool has_f_coef() const;
  private:
  bool _internal_has_f_coef() const;
  public:
  void clear_f_coef();
  double f_coef() const;
  void set_f_coef(double value);
  private:
  double _internal_f_coef() const;
  void _internal_set_f_coef(double value);
  public:

  // optional double mass = 3;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  double mass() const;
  void set_mass(double value);
  private:
  double _internal_mass() const;
  void _internal_set_mass(double value);
  public:

  // optional double cd = 4;
  bool has_cd() const;
  private:
  bool _internal_has_cd() const;
  public:
  void clear_cd();
  double cd() const;
  void set_cd(double value);
  private:
  double _internal_cd() const;
  void _internal_set_cd(double value);
  public:

  // optional double area = 5;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // optional double roll = 6;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // optional double f2t_coef = 8;
  bool has_f2t_coef() const;
  private:
  bool _internal_has_f2t_coef() const;
  public:
  void clear_f2t_coef();
  double f2t_coef() const;
  void set_f2t_coef(double value);
  private:
  double _internal_f2t_coef() const;
  void _internal_set_f2t_coef(double value);
  public:

  // optional double ts = 9;
  bool has_ts() const;
  private:
  bool _internal_has_ts() const;
  public:
  void clear_ts();
  double ts() const;
  void set_ts(double value);
  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);
  public:

  // optional double lodmc_torq_limit_up = 17;
  bool has_lodmc_torq_limit_up() const;
  private:
  bool _internal_has_lodmc_torq_limit_up() const;
  public:
  void clear_lodmc_torq_limit_up();
  double lodmc_torq_limit_up() const;
  void set_lodmc_torq_limit_up(double value);
  private:
  double _internal_lodmc_torq_limit_up() const;
  void _internal_set_lodmc_torq_limit_up(double value);
  public:

  // optional double lodmc_torq_limit_low = 18;
  bool has_lodmc_torq_limit_low() const;
  private:
  bool _internal_has_lodmc_torq_limit_low() const;
  public:
  void clear_lodmc_torq_limit_low();
  double lodmc_torq_limit_low() const;
  void set_lodmc_torq_limit_low(double value);
  private:
  double _internal_lodmc_torq_limit_low() const;
  void _internal_set_lodmc_torq_limit_low(double value);
  public:

  // optional double control_freq = 19;
  bool has_control_freq() const;
  private:
  bool _internal_has_control_freq() const;
  public:
  void clear_control_freq();
  double control_freq() const;
  void set_control_freq(double value);
  private:
  double _internal_control_freq() const;
  void _internal_set_control_freq(double value);
  public:

  // optional double acc_err_lowpassfilter_cutoff_freq = 20;
  bool has_acc_err_lowpassfilter_cutoff_freq() const;
  private:
  bool _internal_has_acc_err_lowpassfilter_cutoff_freq() const;
  public:
  void clear_acc_err_lowpassfilter_cutoff_freq();
  double acc_err_lowpassfilter_cutoff_freq() const;
  void set_acc_err_lowpassfilter_cutoff_freq(double value);
  private:
  double _internal_acc_err_lowpassfilter_cutoff_freq() const;
  void _internal_set_acc_err_lowpassfilter_cutoff_freq(double value);
  public:

  // optional double target_acc_lowpassfilter_cutoff_freq = 23;
  bool has_target_acc_lowpassfilter_cutoff_freq() const;
  private:
  bool _internal_has_target_acc_lowpassfilter_cutoff_freq() const;
  public:
  void clear_target_acc_lowpassfilter_cutoff_freq();
  double target_acc_lowpassfilter_cutoff_freq() const;
  void set_target_acc_lowpassfilter_cutoff_freq(double value);
  private:
  double _internal_target_acc_lowpassfilter_cutoff_freq() const;
  void _internal_set_target_acc_lowpassfilter_cutoff_freq(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.lodmcctrl.LoDmcControllerConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::PidConf* lodmc_pid_conf_;
  ::control::GainScheduler* slope_dmc_f_gain_scheduler_;
  ::control::GainScheduler* roll_dmc_f_gain_scheduler_;
  ::control::GainScheduler* kp_dmc_gain_scheduler_;
  ::control::GainScheduler* fb_dmc_gain_scheduler_;
  ::control::GainScheduler* dmc_f_roll_gain_scheduler_;
  ::control::GainScheduler* dmc_f_air_gain_scheduler_;
  ::control::GainScheduler* dmc_f_acc_gain_scheduler_;
  ::control::GainScheduler* slope_dmc_f_acc_gain_scheduler_;
  ::control::GainScheduler* slope_dmc_f_decel_mass_gain_scheduler_;
  double g_acc_;
  double f_coef_;
  double mass_;
  double cd_;
  double area_;
  double roll_;
  double f2t_coef_;
  double ts_;
  double lodmc_torq_limit_up_;
  double lodmc_torq_limit_low_;
  double control_freq_;
  double acc_err_lowpassfilter_cutoff_freq_;
  double target_acc_lowpassfilter_cutoff_freq_;
  friend struct ::TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoDmcControllerConf

// optional double g_acc = 1;
inline bool LoDmcControllerConf::_internal_has_g_acc() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_g_acc() const {
  return _internal_has_g_acc();
}
inline void LoDmcControllerConf::clear_g_acc() {
  g_acc_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double LoDmcControllerConf::_internal_g_acc() const {
  return g_acc_;
}
inline double LoDmcControllerConf::g_acc() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.g_acc)
  return _internal_g_acc();
}
inline void LoDmcControllerConf::_internal_set_g_acc(double value) {
  _has_bits_[0] |= 0x00000400u;
  g_acc_ = value;
}
inline void LoDmcControllerConf::set_g_acc(double value) {
  _internal_set_g_acc(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.g_acc)
}

// optional double f_coef = 2;
inline bool LoDmcControllerConf::_internal_has_f_coef() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_f_coef() const {
  return _internal_has_f_coef();
}
inline void LoDmcControllerConf::clear_f_coef() {
  f_coef_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double LoDmcControllerConf::_internal_f_coef() const {
  return f_coef_;
}
inline double LoDmcControllerConf::f_coef() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.f_coef)
  return _internal_f_coef();
}
inline void LoDmcControllerConf::_internal_set_f_coef(double value) {
  _has_bits_[0] |= 0x00000800u;
  f_coef_ = value;
}
inline void LoDmcControllerConf::set_f_coef(double value) {
  _internal_set_f_coef(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.f_coef)
}

// optional double mass = 3;
inline bool LoDmcControllerConf::_internal_has_mass() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_mass() const {
  return _internal_has_mass();
}
inline void LoDmcControllerConf::clear_mass() {
  mass_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double LoDmcControllerConf::_internal_mass() const {
  return mass_;
}
inline double LoDmcControllerConf::mass() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.mass)
  return _internal_mass();
}
inline void LoDmcControllerConf::_internal_set_mass(double value) {
  _has_bits_[0] |= 0x00001000u;
  mass_ = value;
}
inline void LoDmcControllerConf::set_mass(double value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.mass)
}

// optional double cd = 4;
inline bool LoDmcControllerConf::_internal_has_cd() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_cd() const {
  return _internal_has_cd();
}
inline void LoDmcControllerConf::clear_cd() {
  cd_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double LoDmcControllerConf::_internal_cd() const {
  return cd_;
}
inline double LoDmcControllerConf::cd() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.cd)
  return _internal_cd();
}
inline void LoDmcControllerConf::_internal_set_cd(double value) {
  _has_bits_[0] |= 0x00002000u;
  cd_ = value;
}
inline void LoDmcControllerConf::set_cd(double value) {
  _internal_set_cd(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.cd)
}

// optional double area = 5;
inline bool LoDmcControllerConf::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_area() const {
  return _internal_has_area();
}
inline void LoDmcControllerConf::clear_area() {
  area_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double LoDmcControllerConf::_internal_area() const {
  return area_;
}
inline double LoDmcControllerConf::area() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.area)
  return _internal_area();
}
inline void LoDmcControllerConf::_internal_set_area(double value) {
  _has_bits_[0] |= 0x00004000u;
  area_ = value;
}
inline void LoDmcControllerConf::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.area)
}

// optional double roll = 6;
inline bool LoDmcControllerConf::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_roll() const {
  return _internal_has_roll();
}
inline void LoDmcControllerConf::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double LoDmcControllerConf::_internal_roll() const {
  return roll_;
}
inline double LoDmcControllerConf::roll() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.roll)
  return _internal_roll();
}
inline void LoDmcControllerConf::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00008000u;
  roll_ = value;
}
inline void LoDmcControllerConf::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.roll)
}

// optional .control.PidConf lodmc_pid_conf = 7;
inline bool LoDmcControllerConf::_internal_has_lodmc_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lodmc_pid_conf_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_lodmc_pid_conf() const {
  return _internal_has_lodmc_pid_conf();
}
inline const ::control::PidConf& LoDmcControllerConf::_internal_lodmc_pid_conf() const {
  const ::control::PidConf* p = lodmc_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LoDmcControllerConf::lodmc_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
  return _internal_lodmc_pid_conf();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_lodmc_pid_conf(
    ::control::PidConf* lodmc_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lodmc_pid_conf_);
  }
  lodmc_pid_conf_ = lodmc_pid_conf;
  if (lodmc_pid_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
}
inline ::control::PidConf* LoDmcControllerConf::release_lodmc_pid_conf() {
  auto temp = unsafe_arena_release_lodmc_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LoDmcControllerConf::unsafe_arena_release_lodmc_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PidConf* temp = lodmc_pid_conf_;
  lodmc_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LoDmcControllerConf::_internal_mutable_lodmc_pid_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (lodmc_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    lodmc_pid_conf_ = p;
  }
  return lodmc_pid_conf_;
}
inline ::control::PidConf* LoDmcControllerConf::mutable_lodmc_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
  return _internal_mutable_lodmc_pid_conf();
}
inline void LoDmcControllerConf::set_allocated_lodmc_pid_conf(::control::PidConf* lodmc_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lodmc_pid_conf_);
  }
  if (lodmc_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lodmc_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      lodmc_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lodmc_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lodmc_pid_conf_ = lodmc_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
}

// optional double f2t_coef = 8;
inline bool LoDmcControllerConf::_internal_has_f2t_coef() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_f2t_coef() const {
  return _internal_has_f2t_coef();
}
inline void LoDmcControllerConf::clear_f2t_coef() {
  f2t_coef_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double LoDmcControllerConf::_internal_f2t_coef() const {
  return f2t_coef_;
}
inline double LoDmcControllerConf::f2t_coef() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.f2t_coef)
  return _internal_f2t_coef();
}
inline void LoDmcControllerConf::_internal_set_f2t_coef(double value) {
  _has_bits_[0] |= 0x00010000u;
  f2t_coef_ = value;
}
inline void LoDmcControllerConf::set_f2t_coef(double value) {
  _internal_set_f2t_coef(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.f2t_coef)
}

// optional double ts = 9;
inline bool LoDmcControllerConf::_internal_has_ts() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_ts() const {
  return _internal_has_ts();
}
inline void LoDmcControllerConf::clear_ts() {
  ts_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double LoDmcControllerConf::_internal_ts() const {
  return ts_;
}
inline double LoDmcControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.ts)
  return _internal_ts();
}
inline void LoDmcControllerConf::_internal_set_ts(double value) {
  _has_bits_[0] |= 0x00020000u;
  ts_ = value;
}
inline void LoDmcControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.ts)
}

// optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
inline bool LoDmcControllerConf::_internal_has_slope_dmc_f_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slope_dmc_f_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_slope_dmc_f_gain_scheduler() const {
  return _internal_has_slope_dmc_f_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_slope_dmc_f_gain_scheduler() const {
  const ::control::GainScheduler* p = slope_dmc_f_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::slope_dmc_f_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
  return _internal_slope_dmc_f_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_slope_dmc_f_gain_scheduler(
    ::control::GainScheduler* slope_dmc_f_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_gain_scheduler_);
  }
  slope_dmc_f_gain_scheduler_ = slope_dmc_f_gain_scheduler;
  if (slope_dmc_f_gain_scheduler) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_slope_dmc_f_gain_scheduler() {
  auto temp = unsafe_arena_release_slope_dmc_f_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_slope_dmc_f_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
  _has_bits_[0] &= ~0x00000002u;
  ::control::GainScheduler* temp = slope_dmc_f_gain_scheduler_;
  slope_dmc_f_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_slope_dmc_f_gain_scheduler() {
  _has_bits_[0] |= 0x00000002u;
  if (slope_dmc_f_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    slope_dmc_f_gain_scheduler_ = p;
  }
  return slope_dmc_f_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_slope_dmc_f_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
  return _internal_mutable_slope_dmc_f_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_slope_dmc_f_gain_scheduler(::control::GainScheduler* slope_dmc_f_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_gain_scheduler_);
  }
  if (slope_dmc_f_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      slope_dmc_f_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slope_dmc_f_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slope_dmc_f_gain_scheduler_ = slope_dmc_f_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
}

// optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
inline bool LoDmcControllerConf::_internal_has_roll_dmc_f_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || roll_dmc_f_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_roll_dmc_f_gain_scheduler() const {
  return _internal_has_roll_dmc_f_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_roll_dmc_f_gain_scheduler() const {
  const ::control::GainScheduler* p = roll_dmc_f_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::roll_dmc_f_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
  return _internal_roll_dmc_f_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_roll_dmc_f_gain_scheduler(
    ::control::GainScheduler* roll_dmc_f_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roll_dmc_f_gain_scheduler_);
  }
  roll_dmc_f_gain_scheduler_ = roll_dmc_f_gain_scheduler;
  if (roll_dmc_f_gain_scheduler) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_roll_dmc_f_gain_scheduler() {
  auto temp = unsafe_arena_release_roll_dmc_f_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_roll_dmc_f_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
  _has_bits_[0] &= ~0x00000004u;
  ::control::GainScheduler* temp = roll_dmc_f_gain_scheduler_;
  roll_dmc_f_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_roll_dmc_f_gain_scheduler() {
  _has_bits_[0] |= 0x00000004u;
  if (roll_dmc_f_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    roll_dmc_f_gain_scheduler_ = p;
  }
  return roll_dmc_f_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_roll_dmc_f_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
  return _internal_mutable_roll_dmc_f_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_roll_dmc_f_gain_scheduler(::control::GainScheduler* roll_dmc_f_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roll_dmc_f_gain_scheduler_);
  }
  if (roll_dmc_f_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roll_dmc_f_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      roll_dmc_f_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roll_dmc_f_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  roll_dmc_f_gain_scheduler_ = roll_dmc_f_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
}

// optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
inline bool LoDmcControllerConf::_internal_has_kp_dmc_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || kp_dmc_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_kp_dmc_gain_scheduler() const {
  return _internal_has_kp_dmc_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_kp_dmc_gain_scheduler() const {
  const ::control::GainScheduler* p = kp_dmc_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::kp_dmc_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
  return _internal_kp_dmc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_kp_dmc_gain_scheduler(
    ::control::GainScheduler* kp_dmc_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kp_dmc_gain_scheduler_);
  }
  kp_dmc_gain_scheduler_ = kp_dmc_gain_scheduler;
  if (kp_dmc_gain_scheduler) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_kp_dmc_gain_scheduler() {
  auto temp = unsafe_arena_release_kp_dmc_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_kp_dmc_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
  _has_bits_[0] &= ~0x00000008u;
  ::control::GainScheduler* temp = kp_dmc_gain_scheduler_;
  kp_dmc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_kp_dmc_gain_scheduler() {
  _has_bits_[0] |= 0x00000008u;
  if (kp_dmc_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    kp_dmc_gain_scheduler_ = p;
  }
  return kp_dmc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_kp_dmc_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
  return _internal_mutable_kp_dmc_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_kp_dmc_gain_scheduler(::control::GainScheduler* kp_dmc_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(kp_dmc_gain_scheduler_);
  }
  if (kp_dmc_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kp_dmc_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      kp_dmc_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kp_dmc_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  kp_dmc_gain_scheduler_ = kp_dmc_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
}

// optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
inline bool LoDmcControllerConf::_internal_has_fb_dmc_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || fb_dmc_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_fb_dmc_gain_scheduler() const {
  return _internal_has_fb_dmc_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_fb_dmc_gain_scheduler() const {
  const ::control::GainScheduler* p = fb_dmc_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::fb_dmc_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
  return _internal_fb_dmc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_fb_dmc_gain_scheduler(
    ::control::GainScheduler* fb_dmc_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fb_dmc_gain_scheduler_);
  }
  fb_dmc_gain_scheduler_ = fb_dmc_gain_scheduler;
  if (fb_dmc_gain_scheduler) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_fb_dmc_gain_scheduler() {
  auto temp = unsafe_arena_release_fb_dmc_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_fb_dmc_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
  _has_bits_[0] &= ~0x00000010u;
  ::control::GainScheduler* temp = fb_dmc_gain_scheduler_;
  fb_dmc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_fb_dmc_gain_scheduler() {
  _has_bits_[0] |= 0x00000010u;
  if (fb_dmc_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    fb_dmc_gain_scheduler_ = p;
  }
  return fb_dmc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_fb_dmc_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
  return _internal_mutable_fb_dmc_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_fb_dmc_gain_scheduler(::control::GainScheduler* fb_dmc_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fb_dmc_gain_scheduler_);
  }
  if (fb_dmc_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fb_dmc_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      fb_dmc_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fb_dmc_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  fb_dmc_gain_scheduler_ = fb_dmc_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
}

// optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
inline bool LoDmcControllerConf::_internal_has_dmc_f_roll_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || dmc_f_roll_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_dmc_f_roll_gain_scheduler() const {
  return _internal_has_dmc_f_roll_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_dmc_f_roll_gain_scheduler() const {
  const ::control::GainScheduler* p = dmc_f_roll_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::dmc_f_roll_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
  return _internal_dmc_f_roll_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_dmc_f_roll_gain_scheduler(
    ::control::GainScheduler* dmc_f_roll_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_roll_gain_scheduler_);
  }
  dmc_f_roll_gain_scheduler_ = dmc_f_roll_gain_scheduler;
  if (dmc_f_roll_gain_scheduler) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_dmc_f_roll_gain_scheduler() {
  auto temp = unsafe_arena_release_dmc_f_roll_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_dmc_f_roll_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
  _has_bits_[0] &= ~0x00000020u;
  ::control::GainScheduler* temp = dmc_f_roll_gain_scheduler_;
  dmc_f_roll_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_dmc_f_roll_gain_scheduler() {
  _has_bits_[0] |= 0x00000020u;
  if (dmc_f_roll_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    dmc_f_roll_gain_scheduler_ = p;
  }
  return dmc_f_roll_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_dmc_f_roll_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
  return _internal_mutable_dmc_f_roll_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_dmc_f_roll_gain_scheduler(::control::GainScheduler* dmc_f_roll_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_roll_gain_scheduler_);
  }
  if (dmc_f_roll_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_roll_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      dmc_f_roll_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmc_f_roll_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dmc_f_roll_gain_scheduler_ = dmc_f_roll_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
}

// optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
inline bool LoDmcControllerConf::_internal_has_dmc_f_air_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || dmc_f_air_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_dmc_f_air_gain_scheduler() const {
  return _internal_has_dmc_f_air_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_dmc_f_air_gain_scheduler() const {
  const ::control::GainScheduler* p = dmc_f_air_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::dmc_f_air_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
  return _internal_dmc_f_air_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_dmc_f_air_gain_scheduler(
    ::control::GainScheduler* dmc_f_air_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_air_gain_scheduler_);
  }
  dmc_f_air_gain_scheduler_ = dmc_f_air_gain_scheduler;
  if (dmc_f_air_gain_scheduler) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_dmc_f_air_gain_scheduler() {
  auto temp = unsafe_arena_release_dmc_f_air_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_dmc_f_air_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
  _has_bits_[0] &= ~0x00000040u;
  ::control::GainScheduler* temp = dmc_f_air_gain_scheduler_;
  dmc_f_air_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_dmc_f_air_gain_scheduler() {
  _has_bits_[0] |= 0x00000040u;
  if (dmc_f_air_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    dmc_f_air_gain_scheduler_ = p;
  }
  return dmc_f_air_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_dmc_f_air_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
  return _internal_mutable_dmc_f_air_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_dmc_f_air_gain_scheduler(::control::GainScheduler* dmc_f_air_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_air_gain_scheduler_);
  }
  if (dmc_f_air_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_air_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      dmc_f_air_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmc_f_air_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dmc_f_air_gain_scheduler_ = dmc_f_air_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
}

// optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
inline bool LoDmcControllerConf::_internal_has_dmc_f_acc_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || dmc_f_acc_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_dmc_f_acc_gain_scheduler() const {
  return _internal_has_dmc_f_acc_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_dmc_f_acc_gain_scheduler() const {
  const ::control::GainScheduler* p = dmc_f_acc_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::dmc_f_acc_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
  return _internal_dmc_f_acc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_dmc_f_acc_gain_scheduler(
    ::control::GainScheduler* dmc_f_acc_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_acc_gain_scheduler_);
  }
  dmc_f_acc_gain_scheduler_ = dmc_f_acc_gain_scheduler;
  if (dmc_f_acc_gain_scheduler) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_dmc_f_acc_gain_scheduler() {
  auto temp = unsafe_arena_release_dmc_f_acc_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_dmc_f_acc_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
  _has_bits_[0] &= ~0x00000080u;
  ::control::GainScheduler* temp = dmc_f_acc_gain_scheduler_;
  dmc_f_acc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_dmc_f_acc_gain_scheduler() {
  _has_bits_[0] |= 0x00000080u;
  if (dmc_f_acc_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    dmc_f_acc_gain_scheduler_ = p;
  }
  return dmc_f_acc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_dmc_f_acc_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
  return _internal_mutable_dmc_f_acc_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_dmc_f_acc_gain_scheduler(::control::GainScheduler* dmc_f_acc_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_acc_gain_scheduler_);
  }
  if (dmc_f_acc_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmc_f_acc_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      dmc_f_acc_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmc_f_acc_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  dmc_f_acc_gain_scheduler_ = dmc_f_acc_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
}

// optional double lodmc_torq_limit_up = 17;
inline bool LoDmcControllerConf::_internal_has_lodmc_torq_limit_up() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_lodmc_torq_limit_up() const {
  return _internal_has_lodmc_torq_limit_up();
}
inline void LoDmcControllerConf::clear_lodmc_torq_limit_up() {
  lodmc_torq_limit_up_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double LoDmcControllerConf::_internal_lodmc_torq_limit_up() const {
  return lodmc_torq_limit_up_;
}
inline double LoDmcControllerConf::lodmc_torq_limit_up() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_up)
  return _internal_lodmc_torq_limit_up();
}
inline void LoDmcControllerConf::_internal_set_lodmc_torq_limit_up(double value) {
  _has_bits_[0] |= 0x00040000u;
  lodmc_torq_limit_up_ = value;
}
inline void LoDmcControllerConf::set_lodmc_torq_limit_up(double value) {
  _internal_set_lodmc_torq_limit_up(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_up)
}

// optional double lodmc_torq_limit_low = 18;
inline bool LoDmcControllerConf::_internal_has_lodmc_torq_limit_low() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_lodmc_torq_limit_low() const {
  return _internal_has_lodmc_torq_limit_low();
}
inline void LoDmcControllerConf::clear_lodmc_torq_limit_low() {
  lodmc_torq_limit_low_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double LoDmcControllerConf::_internal_lodmc_torq_limit_low() const {
  return lodmc_torq_limit_low_;
}
inline double LoDmcControllerConf::lodmc_torq_limit_low() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_low)
  return _internal_lodmc_torq_limit_low();
}
inline void LoDmcControllerConf::_internal_set_lodmc_torq_limit_low(double value) {
  _has_bits_[0] |= 0x00080000u;
  lodmc_torq_limit_low_ = value;
}
inline void LoDmcControllerConf::set_lodmc_torq_limit_low(double value) {
  _internal_set_lodmc_torq_limit_low(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_low)
}

// optional double control_freq = 19;
inline bool LoDmcControllerConf::_internal_has_control_freq() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_control_freq() const {
  return _internal_has_control_freq();
}
inline void LoDmcControllerConf::clear_control_freq() {
  control_freq_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double LoDmcControllerConf::_internal_control_freq() const {
  return control_freq_;
}
inline double LoDmcControllerConf::control_freq() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.control_freq)
  return _internal_control_freq();
}
inline void LoDmcControllerConf::_internal_set_control_freq(double value) {
  _has_bits_[0] |= 0x00100000u;
  control_freq_ = value;
}
inline void LoDmcControllerConf::set_control_freq(double value) {
  _internal_set_control_freq(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.control_freq)
}

// optional double acc_err_lowpassfilter_cutoff_freq = 20;
inline bool LoDmcControllerConf::_internal_has_acc_err_lowpassfilter_cutoff_freq() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_acc_err_lowpassfilter_cutoff_freq() const {
  return _internal_has_acc_err_lowpassfilter_cutoff_freq();
}
inline void LoDmcControllerConf::clear_acc_err_lowpassfilter_cutoff_freq() {
  acc_err_lowpassfilter_cutoff_freq_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double LoDmcControllerConf::_internal_acc_err_lowpassfilter_cutoff_freq() const {
  return acc_err_lowpassfilter_cutoff_freq_;
}
inline double LoDmcControllerConf::acc_err_lowpassfilter_cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.acc_err_lowpassfilter_cutoff_freq)
  return _internal_acc_err_lowpassfilter_cutoff_freq();
}
inline void LoDmcControllerConf::_internal_set_acc_err_lowpassfilter_cutoff_freq(double value) {
  _has_bits_[0] |= 0x00200000u;
  acc_err_lowpassfilter_cutoff_freq_ = value;
}
inline void LoDmcControllerConf::set_acc_err_lowpassfilter_cutoff_freq(double value) {
  _internal_set_acc_err_lowpassfilter_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.acc_err_lowpassfilter_cutoff_freq)
}

// optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
inline bool LoDmcControllerConf::_internal_has_slope_dmc_f_acc_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || slope_dmc_f_acc_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_slope_dmc_f_acc_gain_scheduler() const {
  return _internal_has_slope_dmc_f_acc_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_slope_dmc_f_acc_gain_scheduler() const {
  const ::control::GainScheduler* p = slope_dmc_f_acc_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::slope_dmc_f_acc_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
  return _internal_slope_dmc_f_acc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_slope_dmc_f_acc_gain_scheduler(
    ::control::GainScheduler* slope_dmc_f_acc_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_acc_gain_scheduler_);
  }
  slope_dmc_f_acc_gain_scheduler_ = slope_dmc_f_acc_gain_scheduler;
  if (slope_dmc_f_acc_gain_scheduler) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_slope_dmc_f_acc_gain_scheduler() {
  auto temp = unsafe_arena_release_slope_dmc_f_acc_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_slope_dmc_f_acc_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
  _has_bits_[0] &= ~0x00000100u;
  ::control::GainScheduler* temp = slope_dmc_f_acc_gain_scheduler_;
  slope_dmc_f_acc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_slope_dmc_f_acc_gain_scheduler() {
  _has_bits_[0] |= 0x00000100u;
  if (slope_dmc_f_acc_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    slope_dmc_f_acc_gain_scheduler_ = p;
  }
  return slope_dmc_f_acc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_slope_dmc_f_acc_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
  return _internal_mutable_slope_dmc_f_acc_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_slope_dmc_f_acc_gain_scheduler(::control::GainScheduler* slope_dmc_f_acc_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_acc_gain_scheduler_);
  }
  if (slope_dmc_f_acc_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_acc_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      slope_dmc_f_acc_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slope_dmc_f_acc_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  slope_dmc_f_acc_gain_scheduler_ = slope_dmc_f_acc_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
}

// optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
inline bool LoDmcControllerConf::_internal_has_slope_dmc_f_decel_mass_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || slope_dmc_f_decel_mass_gain_scheduler_ != nullptr);
  return value;
}
inline bool LoDmcControllerConf::has_slope_dmc_f_decel_mass_gain_scheduler() const {
  return _internal_has_slope_dmc_f_decel_mass_gain_scheduler();
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_slope_dmc_f_decel_mass_gain_scheduler() const {
  const ::control::GainScheduler* p = slope_dmc_f_decel_mass_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::slope_dmc_f_decel_mass_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
  return _internal_slope_dmc_f_decel_mass_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_slope_dmc_f_decel_mass_gain_scheduler(
    ::control::GainScheduler* slope_dmc_f_decel_mass_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_decel_mass_gain_scheduler_);
  }
  slope_dmc_f_decel_mass_gain_scheduler_ = slope_dmc_f_decel_mass_gain_scheduler;
  if (slope_dmc_f_decel_mass_gain_scheduler) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_slope_dmc_f_decel_mass_gain_scheduler() {
  auto temp = unsafe_arena_release_slope_dmc_f_decel_mass_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_slope_dmc_f_decel_mass_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
  _has_bits_[0] &= ~0x00000200u;
  ::control::GainScheduler* temp = slope_dmc_f_decel_mass_gain_scheduler_;
  slope_dmc_f_decel_mass_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_slope_dmc_f_decel_mass_gain_scheduler() {
  _has_bits_[0] |= 0x00000200u;
  if (slope_dmc_f_decel_mass_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    slope_dmc_f_decel_mass_gain_scheduler_ = p;
  }
  return slope_dmc_f_decel_mass_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_slope_dmc_f_decel_mass_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
  return _internal_mutable_slope_dmc_f_decel_mass_gain_scheduler();
}
inline void LoDmcControllerConf::set_allocated_slope_dmc_f_decel_mass_gain_scheduler(::control::GainScheduler* slope_dmc_f_decel_mass_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_decel_mass_gain_scheduler_);
  }
  if (slope_dmc_f_decel_mass_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_dmc_f_decel_mass_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      slope_dmc_f_decel_mass_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slope_dmc_f_decel_mass_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  slope_dmc_f_decel_mass_gain_scheduler_ = slope_dmc_f_decel_mass_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
}

// optional double target_acc_lowpassfilter_cutoff_freq = 23;
inline bool LoDmcControllerConf::_internal_has_target_acc_lowpassfilter_cutoff_freq() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool LoDmcControllerConf::has_target_acc_lowpassfilter_cutoff_freq() const {
  return _internal_has_target_acc_lowpassfilter_cutoff_freq();
}
inline void LoDmcControllerConf::clear_target_acc_lowpassfilter_cutoff_freq() {
  target_acc_lowpassfilter_cutoff_freq_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double LoDmcControllerConf::_internal_target_acc_lowpassfilter_cutoff_freq() const {
  return target_acc_lowpassfilter_cutoff_freq_;
}
inline double LoDmcControllerConf::target_acc_lowpassfilter_cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.target_acc_lowpassfilter_cutoff_freq)
  return _internal_target_acc_lowpassfilter_cutoff_freq();
}
inline void LoDmcControllerConf::_internal_set_target_acc_lowpassfilter_cutoff_freq(double value) {
  _has_bits_[0] |= 0x00400000u;
  target_acc_lowpassfilter_cutoff_freq_ = value;
}
inline void LoDmcControllerConf::set_target_acc_lowpassfilter_cutoff_freq(double value) {
  _internal_set_target_acc_lowpassfilter_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.target_acc_lowpassfilter_cutoff_freq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lodmcctrl
}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/lodmc_controller_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "control_base/pid_conf.pb.h"
#include "control_base/gain_scheduler_conf.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto;
namespace control {
namespace lodmcctrl {
class LoDmcControllerConf;
struct LoDmcControllerConfDefaultTypeInternal;
extern LoDmcControllerConfDefaultTypeInternal _LoDmcControllerConf_default_instance_;
}  // namespace lodmcctrl
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace lodmcctrl {

// ===================================================================


// -------------------------------------------------------------------

class LoDmcControllerConf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.lodmcctrl.LoDmcControllerConf) */ {
 public:
  inline LoDmcControllerConf() : LoDmcControllerConf(nullptr) {}
  ~LoDmcControllerConf() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoDmcControllerConf(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoDmcControllerConf(const LoDmcControllerConf& from) : LoDmcControllerConf(nullptr, from) {}
  inline LoDmcControllerConf(LoDmcControllerConf&& from) noexcept
      : LoDmcControllerConf(nullptr, std::move(from)) {}
  inline LoDmcControllerConf& operator=(const LoDmcControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoDmcControllerConf& operator=(LoDmcControllerConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoDmcControllerConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoDmcControllerConf* internal_default_instance() {
    return reinterpret_cast<const LoDmcControllerConf*>(
        &_LoDmcControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LoDmcControllerConf& a, LoDmcControllerConf& b) { a.Swap(&b); }
  inline void Swap(LoDmcControllerConf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoDmcControllerConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoDmcControllerConf* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LoDmcControllerConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoDmcControllerConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoDmcControllerConf& from) { LoDmcControllerConf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoDmcControllerConf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.lodmcctrl.LoDmcControllerConf"; }

 protected:
  explicit LoDmcControllerConf(::google::protobuf::Arena* arena);
  LoDmcControllerConf(::google::protobuf::Arena* arena, const LoDmcControllerConf& from);
  LoDmcControllerConf(::google::protobuf::Arena* arena, LoDmcControllerConf&& from) noexcept
      : LoDmcControllerConf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLodmcPidConfFieldNumber = 7,
    kSlopeDmcFGainSchedulerFieldNumber = 10,
    kRollDmcFGainSchedulerFieldNumber = 11,
    kKpDmcGainSchedulerFieldNumber = 12,
    kFbDmcGainSchedulerFieldNumber = 13,
    kDmcFRollGainSchedulerFieldNumber = 14,
    kDmcFAirGainSchedulerFieldNumber = 15,
    kDmcFAccGainSchedulerFieldNumber = 16,
    kSlopeDmcFAccGainSchedulerFieldNumber = 21,
    kSlopeDmcFDecelMassGainSchedulerFieldNumber = 22,
    kGAccFieldNumber = 1,
    kFCoefFieldNumber = 2,
    kMassFieldNumber = 3,
    kCdFieldNumber = 4,
    kAreaFieldNumber = 5,
    kRollFieldNumber = 6,
    kF2TCoefFieldNumber = 8,
    kTsFieldNumber = 9,
    kLodmcTorqLimitUpFieldNumber = 17,
    kLodmcTorqLimitLowFieldNumber = 18,
    kControlFreqFieldNumber = 19,
    kAccErrLowpassfilterCutoffFreqFieldNumber = 20,
    kTargetAccLowpassfilterCutoffFreqFieldNumber = 23,
  };
  // optional .control.PidConf lodmc_pid_conf = 7;
  bool has_lodmc_pid_conf() const;
  void clear_lodmc_pid_conf() ;
  const ::control::PidConf& lodmc_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_lodmc_pid_conf();
  ::control::PidConf* mutable_lodmc_pid_conf();
  void set_allocated_lodmc_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_lodmc_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_lodmc_pid_conf();

  private:
  const ::control::PidConf& _internal_lodmc_pid_conf() const;
  ::control::PidConf* _internal_mutable_lodmc_pid_conf();

  public:
  // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
  bool has_slope_dmc_f_gain_scheduler() const;
  void clear_slope_dmc_f_gain_scheduler() ;
  const ::control::GainScheduler& slope_dmc_f_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_slope_dmc_f_gain_scheduler();
  ::control::GainScheduler* mutable_slope_dmc_f_gain_scheduler();
  void set_allocated_slope_dmc_f_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_slope_dmc_f_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_slope_dmc_f_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_slope_dmc_f_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_dmc_f_gain_scheduler();

  public:
  // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
  bool has_roll_dmc_f_gain_scheduler() const;
  void clear_roll_dmc_f_gain_scheduler() ;
  const ::control::GainScheduler& roll_dmc_f_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_roll_dmc_f_gain_scheduler();
  ::control::GainScheduler* mutable_roll_dmc_f_gain_scheduler();
  void set_allocated_roll_dmc_f_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_roll_dmc_f_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_roll_dmc_f_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_roll_dmc_f_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_roll_dmc_f_gain_scheduler();

  public:
  // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
  bool has_kp_dmc_gain_scheduler() const;
  void clear_kp_dmc_gain_scheduler() ;
  const ::control::GainScheduler& kp_dmc_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_kp_dmc_gain_scheduler();
  ::control::GainScheduler* mutable_kp_dmc_gain_scheduler();
  void set_allocated_kp_dmc_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_kp_dmc_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_kp_dmc_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_kp_dmc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_kp_dmc_gain_scheduler();

  public:
  // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
  bool has_fb_dmc_gain_scheduler() const;
  void clear_fb_dmc_gain_scheduler() ;
  const ::control::GainScheduler& fb_dmc_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_fb_dmc_gain_scheduler();
  ::control::GainScheduler* mutable_fb_dmc_gain_scheduler();
  void set_allocated_fb_dmc_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_fb_dmc_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_fb_dmc_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_fb_dmc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_fb_dmc_gain_scheduler();

  public:
  // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
  bool has_dmc_f_roll_gain_scheduler() const;
  void clear_dmc_f_roll_gain_scheduler() ;
  const ::control::GainScheduler& dmc_f_roll_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_dmc_f_roll_gain_scheduler();
  ::control::GainScheduler* mutable_dmc_f_roll_gain_scheduler();
  void set_allocated_dmc_f_roll_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_dmc_f_roll_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_dmc_f_roll_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_dmc_f_roll_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_dmc_f_roll_gain_scheduler();

  public:
  // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
  bool has_dmc_f_air_gain_scheduler() const;
  void clear_dmc_f_air_gain_scheduler() ;
  const ::control::GainScheduler& dmc_f_air_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_dmc_f_air_gain_scheduler();
  ::control::GainScheduler* mutable_dmc_f_air_gain_scheduler();
  void set_allocated_dmc_f_air_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_dmc_f_air_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_dmc_f_air_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_dmc_f_air_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_dmc_f_air_gain_scheduler();

  public:
  // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
  bool has_dmc_f_acc_gain_scheduler() const;
  void clear_dmc_f_acc_gain_scheduler() ;
  const ::control::GainScheduler& dmc_f_acc_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_dmc_f_acc_gain_scheduler();
  ::control::GainScheduler* mutable_dmc_f_acc_gain_scheduler();
  void set_allocated_dmc_f_acc_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_dmc_f_acc_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_dmc_f_acc_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_dmc_f_acc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_dmc_f_acc_gain_scheduler();

  public:
  // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
  bool has_slope_dmc_f_acc_gain_scheduler() const;
  void clear_slope_dmc_f_acc_gain_scheduler() ;
  const ::control::GainScheduler& slope_dmc_f_acc_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_slope_dmc_f_acc_gain_scheduler();
  ::control::GainScheduler* mutable_slope_dmc_f_acc_gain_scheduler();
  void set_allocated_slope_dmc_f_acc_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_slope_dmc_f_acc_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_slope_dmc_f_acc_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_slope_dmc_f_acc_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_dmc_f_acc_gain_scheduler();

  public:
  // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
  bool has_slope_dmc_f_decel_mass_gain_scheduler() const;
  void clear_slope_dmc_f_decel_mass_gain_scheduler() ;
  const ::control::GainScheduler& slope_dmc_f_decel_mass_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_slope_dmc_f_decel_mass_gain_scheduler();
  ::control::GainScheduler* mutable_slope_dmc_f_decel_mass_gain_scheduler();
  void set_allocated_slope_dmc_f_decel_mass_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_slope_dmc_f_decel_mass_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_slope_dmc_f_decel_mass_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_slope_dmc_f_decel_mass_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_dmc_f_decel_mass_gain_scheduler();

  public:
  // optional double g_acc = 1;
  bool has_g_acc() const;
  void clear_g_acc() ;
  double g_acc() const;
  void set_g_acc(double value);

  private:
  double _internal_g_acc() const;
  void _internal_set_g_acc(double value);

  public:
  // optional double f_coef = 2;
  bool has_f_coef() const;
  void clear_f_coef() ;
  double f_coef() const;
  void set_f_coef(double value);

  private:
  double _internal_f_coef() const;
  void _internal_set_f_coef(double value);

  public:
  // optional double mass = 3;
  bool has_mass() const;
  void clear_mass() ;
  double mass() const;
  void set_mass(double value);

  private:
  double _internal_mass() const;
  void _internal_set_mass(double value);

  public:
  // optional double cd = 4;
  bool has_cd() const;
  void clear_cd() ;
  double cd() const;
  void set_cd(double value);

  private:
  double _internal_cd() const;
  void _internal_set_cd(double value);

  public:
  // optional double area = 5;
  bool has_area() const;
  void clear_area() ;
  double area() const;
  void set_area(double value);

  private:
  double _internal_area() const;
  void _internal_set_area(double value);

  public:
  // optional double roll = 6;
  bool has_roll() const;
  void clear_roll() ;
  double roll() const;
  void set_roll(double value);

  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);

  public:
  // optional double f2t_coef = 8;
  bool has_f2t_coef() const;
  void clear_f2t_coef() ;
  double f2t_coef() const;
  void set_f2t_coef(double value);

  private:
  double _internal_f2t_coef() const;
  void _internal_set_f2t_coef(double value);

  public:
  // optional double ts = 9;
  bool has_ts() const;
  void clear_ts() ;
  double ts() const;
  void set_ts(double value);

  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);

  public:
  // optional double lodmc_torq_limit_up = 17;
  bool has_lodmc_torq_limit_up() const;
  void clear_lodmc_torq_limit_up() ;
  double lodmc_torq_limit_up() const;
  void set_lodmc_torq_limit_up(double value);

  private:
  double _internal_lodmc_torq_limit_up() const;
  void _internal_set_lodmc_torq_limit_up(double value);

  public:
  // optional double lodmc_torq_limit_low = 18;
  bool has_lodmc_torq_limit_low() const;
  void clear_lodmc_torq_limit_low() ;
  double lodmc_torq_limit_low() const;
  void set_lodmc_torq_limit_low(double value);

  private:
  double _internal_lodmc_torq_limit_low() const;
  void _internal_set_lodmc_torq_limit_low(double value);

  public:
  // optional double control_freq = 19;
  bool has_control_freq() const;
  void clear_control_freq() ;
  double control_freq() const;
  void set_control_freq(double value);

  private:
  double _internal_control_freq() const;
  void _internal_set_control_freq(double value);

  public:
  // optional double acc_err_lowpassfilter_cutoff_freq = 20;
  bool has_acc_err_lowpassfilter_cutoff_freq() const;
  void clear_acc_err_lowpassfilter_cutoff_freq() ;
  double acc_err_lowpassfilter_cutoff_freq() const;
  void set_acc_err_lowpassfilter_cutoff_freq(double value);

  private:
  double _internal_acc_err_lowpassfilter_cutoff_freq() const;
  void _internal_set_acc_err_lowpassfilter_cutoff_freq(double value);

  public:
  // optional double target_acc_lowpassfilter_cutoff_freq = 23;
  bool has_target_acc_lowpassfilter_cutoff_freq() const;
  void clear_target_acc_lowpassfilter_cutoff_freq() ;
  double target_acc_lowpassfilter_cutoff_freq() const;
  void set_target_acc_lowpassfilter_cutoff_freq(double value);

  private:
  double _internal_target_acc_lowpassfilter_cutoff_freq() const;
  void _internal_set_target_acc_lowpassfilter_cutoff_freq(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.lodmcctrl.LoDmcControllerConf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 23, 10,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LoDmcControllerConf_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoDmcControllerConf& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::PidConf* lodmc_pid_conf_;
    ::control::GainScheduler* slope_dmc_f_gain_scheduler_;
    ::control::GainScheduler* roll_dmc_f_gain_scheduler_;
    ::control::GainScheduler* kp_dmc_gain_scheduler_;
    ::control::GainScheduler* fb_dmc_gain_scheduler_;
    ::control::GainScheduler* dmc_f_roll_gain_scheduler_;
    ::control::GainScheduler* dmc_f_air_gain_scheduler_;
    ::control::GainScheduler* dmc_f_acc_gain_scheduler_;
    ::control::GainScheduler* slope_dmc_f_acc_gain_scheduler_;
    ::control::GainScheduler* slope_dmc_f_decel_mass_gain_scheduler_;
    double g_acc_;
    double f_coef_;
    double mass_;
    double cd_;
    double area_;
    double roll_;
    double f2t_coef_;
    double ts_;
    double lodmc_torq_limit_up_;
    double lodmc_torq_limit_low_;
    double control_freq_;
    double acc_err_lowpassfilter_cutoff_freq_;
    double target_acc_lowpassfilter_cutoff_freq_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LoDmcControllerConf

// optional double g_acc = 1;
inline bool LoDmcControllerConf::has_g_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_g_acc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.g_acc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double LoDmcControllerConf::g_acc() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.g_acc)
  return _internal_g_acc();
}
inline void LoDmcControllerConf::set_g_acc(double value) {
  _internal_set_g_acc(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.g_acc)
}
inline double LoDmcControllerConf::_internal_g_acc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.g_acc_;
}
inline void LoDmcControllerConf::_internal_set_g_acc(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.g_acc_ = value;
}

// optional double f_coef = 2;
inline bool LoDmcControllerConf::has_f_coef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_f_coef() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_coef_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double LoDmcControllerConf::f_coef() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.f_coef)
  return _internal_f_coef();
}
inline void LoDmcControllerConf::set_f_coef(double value) {
  _internal_set_f_coef(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.f_coef)
}
inline double LoDmcControllerConf::_internal_f_coef() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_coef_;
}
inline void LoDmcControllerConf::_internal_set_f_coef(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_coef_ = value;
}

// optional double mass = 3;
inline bool LoDmcControllerConf::has_mass() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_mass() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double LoDmcControllerConf::mass() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.mass)
  return _internal_mass();
}
inline void LoDmcControllerConf::set_mass(double value) {
  _internal_set_mass(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.mass)
}
inline double LoDmcControllerConf::_internal_mass() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mass_;
}
inline void LoDmcControllerConf::_internal_set_mass(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mass_ = value;
}

// optional double cd = 4;
inline bool LoDmcControllerConf::has_cd() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_cd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cd_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double LoDmcControllerConf::cd() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.cd)
  return _internal_cd();
}
inline void LoDmcControllerConf::set_cd(double value) {
  _internal_set_cd(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.cd)
}
inline double LoDmcControllerConf::_internal_cd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cd_;
}
inline void LoDmcControllerConf::_internal_set_cd(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cd_ = value;
}

// optional double area = 5;
inline bool LoDmcControllerConf::has_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_area() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.area_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double LoDmcControllerConf::area() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.area)
  return _internal_area();
}
inline void LoDmcControllerConf::set_area(double value) {
  _internal_set_area(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.area)
}
inline double LoDmcControllerConf::_internal_area() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.area_;
}
inline void LoDmcControllerConf::_internal_set_area(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.area_ = value;
}

// optional double roll = 6;
inline bool LoDmcControllerConf::has_roll() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_roll() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double LoDmcControllerConf::roll() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.roll)
  return _internal_roll();
}
inline void LoDmcControllerConf::set_roll(double value) {
  _internal_set_roll(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.roll)
}
inline double LoDmcControllerConf::_internal_roll() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_;
}
inline void LoDmcControllerConf::_internal_set_roll(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = value;
}

// optional .control.PidConf lodmc_pid_conf = 7;
inline bool LoDmcControllerConf::has_lodmc_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lodmc_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LoDmcControllerConf::_internal_lodmc_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.lodmc_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LoDmcControllerConf::lodmc_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
  return _internal_lodmc_pid_conf();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_lodmc_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lodmc_pid_conf_);
  }
  _impl_.lodmc_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
}
inline ::control::PidConf* LoDmcControllerConf::release_lodmc_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::PidConf* released = _impl_.lodmc_pid_conf_;
  _impl_.lodmc_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LoDmcControllerConf::unsafe_arena_release_lodmc_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::PidConf* temp = _impl_.lodmc_pid_conf_;
  _impl_.lodmc_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LoDmcControllerConf::_internal_mutable_lodmc_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lodmc_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.lodmc_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.lodmc_pid_conf_;
}
inline ::control::PidConf* LoDmcControllerConf::mutable_lodmc_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::PidConf* _msg = _internal_mutable_lodmc_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_lodmc_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lodmc_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.lodmc_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.lodmc_pid_conf)
}

// optional double f2t_coef = 8;
inline bool LoDmcControllerConf::has_f2t_coef() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_f2t_coef() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f2t_coef_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double LoDmcControllerConf::f2t_coef() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.f2t_coef)
  return _internal_f2t_coef();
}
inline void LoDmcControllerConf::set_f2t_coef(double value) {
  _internal_set_f2t_coef(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.f2t_coef)
}
inline double LoDmcControllerConf::_internal_f2t_coef() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f2t_coef_;
}
inline void LoDmcControllerConf::_internal_set_f2t_coef(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f2t_coef_ = value;
}

// optional double ts = 9;
inline bool LoDmcControllerConf::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double LoDmcControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.ts)
  return _internal_ts();
}
inline void LoDmcControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.ts)
}
inline double LoDmcControllerConf::_internal_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ts_;
}
inline void LoDmcControllerConf::_internal_set_ts(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = value;
}

// optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
inline bool LoDmcControllerConf::has_slope_dmc_f_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slope_dmc_f_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_slope_dmc_f_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.slope_dmc_f_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::slope_dmc_f_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
  return _internal_slope_dmc_f_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_slope_dmc_f_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_dmc_f_gain_scheduler_);
  }
  _impl_.slope_dmc_f_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_slope_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::GainScheduler* released = _impl_.slope_dmc_f_gain_scheduler_;
  _impl_.slope_dmc_f_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_slope_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::GainScheduler* temp = _impl_.slope_dmc_f_gain_scheduler_;
  _impl_.slope_dmc_f_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_slope_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_dmc_f_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.slope_dmc_f_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.slope_dmc_f_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_slope_dmc_f_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::GainScheduler* _msg = _internal_mutable_slope_dmc_f_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_slope_dmc_f_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_dmc_f_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.slope_dmc_f_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_gain_scheduler)
}

// optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
inline bool LoDmcControllerConf::has_roll_dmc_f_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roll_dmc_f_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_roll_dmc_f_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.roll_dmc_f_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::roll_dmc_f_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
  return _internal_roll_dmc_f_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_roll_dmc_f_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.roll_dmc_f_gain_scheduler_);
  }
  _impl_.roll_dmc_f_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_roll_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::GainScheduler* released = _impl_.roll_dmc_f_gain_scheduler_;
  _impl_.roll_dmc_f_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_roll_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::GainScheduler* temp = _impl_.roll_dmc_f_gain_scheduler_;
  _impl_.roll_dmc_f_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_roll_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.roll_dmc_f_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.roll_dmc_f_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.roll_dmc_f_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_roll_dmc_f_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::GainScheduler* _msg = _internal_mutable_roll_dmc_f_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_roll_dmc_f_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.roll_dmc_f_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.roll_dmc_f_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.roll_dmc_f_gain_scheduler)
}

// optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
inline bool LoDmcControllerConf::has_kp_dmc_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kp_dmc_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_kp_dmc_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.kp_dmc_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::kp_dmc_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
  return _internal_kp_dmc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_kp_dmc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kp_dmc_gain_scheduler_);
  }
  _impl_.kp_dmc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_kp_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::GainScheduler* released = _impl_.kp_dmc_gain_scheduler_;
  _impl_.kp_dmc_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_kp_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::GainScheduler* temp = _impl_.kp_dmc_gain_scheduler_;
  _impl_.kp_dmc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_kp_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kp_dmc_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.kp_dmc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.kp_dmc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_kp_dmc_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::GainScheduler* _msg = _internal_mutable_kp_dmc_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_kp_dmc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kp_dmc_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.kp_dmc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.kp_dmc_gain_scheduler)
}

// optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
inline bool LoDmcControllerConf::has_fb_dmc_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fb_dmc_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_fb_dmc_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.fb_dmc_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::fb_dmc_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
  return _internal_fb_dmc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_fb_dmc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fb_dmc_gain_scheduler_);
  }
  _impl_.fb_dmc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_fb_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::GainScheduler* released = _impl_.fb_dmc_gain_scheduler_;
  _impl_.fb_dmc_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_fb_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::GainScheduler* temp = _impl_.fb_dmc_gain_scheduler_;
  _impl_.fb_dmc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_fb_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fb_dmc_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.fb_dmc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.fb_dmc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_fb_dmc_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::GainScheduler* _msg = _internal_mutable_fb_dmc_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_fb_dmc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fb_dmc_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.fb_dmc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.fb_dmc_gain_scheduler)
}

// optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
inline bool LoDmcControllerConf::has_dmc_f_roll_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dmc_f_roll_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_dmc_f_roll_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.dmc_f_roll_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::dmc_f_roll_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
  return _internal_dmc_f_roll_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_dmc_f_roll_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dmc_f_roll_gain_scheduler_);
  }
  _impl_.dmc_f_roll_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_dmc_f_roll_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::GainScheduler* released = _impl_.dmc_f_roll_gain_scheduler_;
  _impl_.dmc_f_roll_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_dmc_f_roll_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::GainScheduler* temp = _impl_.dmc_f_roll_gain_scheduler_;
  _impl_.dmc_f_roll_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_dmc_f_roll_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dmc_f_roll_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.dmc_f_roll_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.dmc_f_roll_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_dmc_f_roll_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::control::GainScheduler* _msg = _internal_mutable_dmc_f_roll_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_dmc_f_roll_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dmc_f_roll_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dmc_f_roll_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_roll_gain_scheduler)
}

// optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
inline bool LoDmcControllerConf::has_dmc_f_air_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dmc_f_air_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_dmc_f_air_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.dmc_f_air_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::dmc_f_air_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
  return _internal_dmc_f_air_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_dmc_f_air_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dmc_f_air_gain_scheduler_);
  }
  _impl_.dmc_f_air_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_dmc_f_air_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::GainScheduler* released = _impl_.dmc_f_air_gain_scheduler_;
  _impl_.dmc_f_air_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_dmc_f_air_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::GainScheduler* temp = _impl_.dmc_f_air_gain_scheduler_;
  _impl_.dmc_f_air_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_dmc_f_air_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dmc_f_air_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.dmc_f_air_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.dmc_f_air_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_dmc_f_air_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::control::GainScheduler* _msg = _internal_mutable_dmc_f_air_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_dmc_f_air_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dmc_f_air_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.dmc_f_air_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_air_gain_scheduler)
}

// optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
inline bool LoDmcControllerConf::has_dmc_f_acc_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dmc_f_acc_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_dmc_f_acc_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.dmc_f_acc_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::dmc_f_acc_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
  return _internal_dmc_f_acc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_dmc_f_acc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dmc_f_acc_gain_scheduler_);
  }
  _impl_.dmc_f_acc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::GainScheduler* released = _impl_.dmc_f_acc_gain_scheduler_;
  _impl_.dmc_f_acc_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::GainScheduler* temp = _impl_.dmc_f_acc_gain_scheduler_;
  _impl_.dmc_f_acc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dmc_f_acc_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.dmc_f_acc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.dmc_f_acc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_dmc_f_acc_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::control::GainScheduler* _msg = _internal_mutable_dmc_f_acc_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_dmc_f_acc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dmc_f_acc_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.dmc_f_acc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.dmc_f_acc_gain_scheduler)
}

// optional double lodmc_torq_limit_up = 17;
inline bool LoDmcControllerConf::has_lodmc_torq_limit_up() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_lodmc_torq_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lodmc_torq_limit_up_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double LoDmcControllerConf::lodmc_torq_limit_up() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_up)
  return _internal_lodmc_torq_limit_up();
}
inline void LoDmcControllerConf::set_lodmc_torq_limit_up(double value) {
  _internal_set_lodmc_torq_limit_up(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_up)
}
inline double LoDmcControllerConf::_internal_lodmc_torq_limit_up() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lodmc_torq_limit_up_;
}
inline void LoDmcControllerConf::_internal_set_lodmc_torq_limit_up(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lodmc_torq_limit_up_ = value;
}

// optional double lodmc_torq_limit_low = 18;
inline bool LoDmcControllerConf::has_lodmc_torq_limit_low() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_lodmc_torq_limit_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lodmc_torq_limit_low_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double LoDmcControllerConf::lodmc_torq_limit_low() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_low)
  return _internal_lodmc_torq_limit_low();
}
inline void LoDmcControllerConf::set_lodmc_torq_limit_low(double value) {
  _internal_set_lodmc_torq_limit_low(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.lodmc_torq_limit_low)
}
inline double LoDmcControllerConf::_internal_lodmc_torq_limit_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lodmc_torq_limit_low_;
}
inline void LoDmcControllerConf::_internal_set_lodmc_torq_limit_low(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lodmc_torq_limit_low_ = value;
}

// optional double control_freq = 19;
inline bool LoDmcControllerConf::has_control_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_control_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_freq_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double LoDmcControllerConf::control_freq() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.control_freq)
  return _internal_control_freq();
}
inline void LoDmcControllerConf::set_control_freq(double value) {
  _internal_set_control_freq(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.control_freq)
}
inline double LoDmcControllerConf::_internal_control_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.control_freq_;
}
inline void LoDmcControllerConf::_internal_set_control_freq(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_freq_ = value;
}

// optional double acc_err_lowpassfilter_cutoff_freq = 20;
inline bool LoDmcControllerConf::has_acc_err_lowpassfilter_cutoff_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_acc_err_lowpassfilter_cutoff_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_err_lowpassfilter_cutoff_freq_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double LoDmcControllerConf::acc_err_lowpassfilter_cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.acc_err_lowpassfilter_cutoff_freq)
  return _internal_acc_err_lowpassfilter_cutoff_freq();
}
inline void LoDmcControllerConf::set_acc_err_lowpassfilter_cutoff_freq(double value) {
  _internal_set_acc_err_lowpassfilter_cutoff_freq(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.acc_err_lowpassfilter_cutoff_freq)
}
inline double LoDmcControllerConf::_internal_acc_err_lowpassfilter_cutoff_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_err_lowpassfilter_cutoff_freq_;
}
inline void LoDmcControllerConf::_internal_set_acc_err_lowpassfilter_cutoff_freq(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_err_lowpassfilter_cutoff_freq_ = value;
}

// optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
inline bool LoDmcControllerConf::has_slope_dmc_f_acc_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slope_dmc_f_acc_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_slope_dmc_f_acc_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.slope_dmc_f_acc_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::slope_dmc_f_acc_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
  return _internal_slope_dmc_f_acc_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_slope_dmc_f_acc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_dmc_f_acc_gain_scheduler_);
  }
  _impl_.slope_dmc_f_acc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_slope_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::GainScheduler* released = _impl_.slope_dmc_f_acc_gain_scheduler_;
  _impl_.slope_dmc_f_acc_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_slope_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::GainScheduler* temp = _impl_.slope_dmc_f_acc_gain_scheduler_;
  _impl_.slope_dmc_f_acc_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_slope_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_dmc_f_acc_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.slope_dmc_f_acc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.slope_dmc_f_acc_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_slope_dmc_f_acc_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::control::GainScheduler* _msg = _internal_mutable_slope_dmc_f_acc_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_slope_dmc_f_acc_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_dmc_f_acc_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.slope_dmc_f_acc_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_acc_gain_scheduler)
}

// optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
inline bool LoDmcControllerConf::has_slope_dmc_f_decel_mass_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slope_dmc_f_decel_mass_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LoDmcControllerConf::_internal_slope_dmc_f_decel_mass_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.slope_dmc_f_decel_mass_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LoDmcControllerConf::slope_dmc_f_decel_mass_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
  return _internal_slope_dmc_f_decel_mass_gain_scheduler();
}
inline void LoDmcControllerConf::unsafe_arena_set_allocated_slope_dmc_f_decel_mass_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_dmc_f_decel_mass_gain_scheduler_);
  }
  _impl_.slope_dmc_f_decel_mass_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
}
inline ::control::GainScheduler* LoDmcControllerConf::release_slope_dmc_f_decel_mass_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::control::GainScheduler* released = _impl_.slope_dmc_f_decel_mass_gain_scheduler_;
  _impl_.slope_dmc_f_decel_mass_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LoDmcControllerConf::unsafe_arena_release_slope_dmc_f_decel_mass_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::control::GainScheduler* temp = _impl_.slope_dmc_f_decel_mass_gain_scheduler_;
  _impl_.slope_dmc_f_decel_mass_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LoDmcControllerConf::_internal_mutable_slope_dmc_f_decel_mass_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_dmc_f_decel_mass_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.slope_dmc_f_decel_mass_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.slope_dmc_f_decel_mass_gain_scheduler_;
}
inline ::control::GainScheduler* LoDmcControllerConf::mutable_slope_dmc_f_decel_mass_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::control::GainScheduler* _msg = _internal_mutable_slope_dmc_f_decel_mass_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
  return _msg;
}
inline void LoDmcControllerConf::set_allocated_slope_dmc_f_decel_mass_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_dmc_f_decel_mass_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.slope_dmc_f_decel_mass_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lodmcctrl.LoDmcControllerConf.slope_dmc_f_decel_mass_gain_scheduler)
}

// optional double target_acc_lowpassfilter_cutoff_freq = 23;
inline bool LoDmcControllerConf::has_target_acc_lowpassfilter_cutoff_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void LoDmcControllerConf::clear_target_acc_lowpassfilter_cutoff_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_acc_lowpassfilter_cutoff_freq_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double LoDmcControllerConf::target_acc_lowpassfilter_cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.lodmcctrl.LoDmcControllerConf.target_acc_lowpassfilter_cutoff_freq)
  return _internal_target_acc_lowpassfilter_cutoff_freq();
}
inline void LoDmcControllerConf::set_target_acc_lowpassfilter_cutoff_freq(double value) {
  _internal_set_target_acc_lowpassfilter_cutoff_freq(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.lodmcctrl.LoDmcControllerConf.target_acc_lowpassfilter_cutoff_freq)
}
inline double LoDmcControllerConf::_internal_target_acc_lowpassfilter_cutoff_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_acc_lowpassfilter_cutoff_freq_;
}
inline void LoDmcControllerConf::_internal_set_target_acc_lowpassfilter_cutoff_freq(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_acc_lowpassfilter_cutoff_freq_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace lodmcctrl
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_2epb_2eh

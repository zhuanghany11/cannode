// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/lat_based_lqr_controller_conf.proto

#include "control_base/lat_based_lqr_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fgain_5fscheduler_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fleadlag_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeadlagConf_control_5fbase_2fleadlag_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmrac_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MracConf_control_5fbase_2fmrac_5fconf_2eproto;
namespace control {
class LatBaseLqrControllerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatBaseLqrControllerConf> _instance;
} _LatBaseLqrControllerConf_default_instance_;
}  // namespace control
static void InitDefaultsscc_info_LatBaseLqrControllerConf_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_LatBaseLqrControllerConf_default_instance_;
    new (ptr) ::control::LatBaseLqrControllerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::LatBaseLqrControllerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LatBaseLqrControllerConf_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LatBaseLqrControllerConf_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto}, {
      &scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto.base,
      &scc_info_LeadlagConf_control_5fbase_2fleadlag_5fconf_2eproto.base,
      &scc_info_MracConf_control_5fbase_2fmrac_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, cf_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, cr_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, mass_fl_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, mass_fr_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, mass_rl_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, mass_rr_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, eps_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, matrix_q_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, reverse_matrix_q_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, max_lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, lat_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, heading_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, reverse_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, enable_reverse_leadlag_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, enable_look_ahead_back_control_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, lookahead_station_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, lookback_station_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, steer_mrac_conf_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, enable_steer_mrac_control_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, lookahead_station_high_speed_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, lookback_station_high_speed_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, lock_steer_speed_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, enable_navigation_mode_error_filter_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, enable_navigation_mode_position_update_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, query_relative_time_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, trajectory_transform_to_com_reverse_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, trajectory_transform_to_com_drive_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, enable_feedback_augment_on_high_speed_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, enable_maximum_steer_rate_limit_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, query_time_nearest_point_only_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, switch_speed_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, switch_speed_window_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, reverse_feedforward_ratio_),
  PROTOBUF_FIELD_OFFSET(::control::LatBaseLqrControllerConf, reverse_use_dynamic_model_),
  4,
  6,
  5,
  8,
  7,
  9,
  10,
  12,
  11,
  ~0u,
  ~0u,
  13,
  14,
  15,
  16,
  0,
  1,
  2,
  21,
  22,
  17,
  18,
  3,
  23,
  19,
  20,
  34,
  24,
  33,
  35,
  25,
  26,
  27,
  28,
  31,
  29,
  30,
  36,
  32,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 44, sizeof(::control::LatBaseLqrControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_LatBaseLqrControllerConf_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0control_base/lat_based_lqr_controller_"
  "conf.proto\022\007control\032&control_base/gain_s"
  "cheduler_conf.proto\032\037control_base/leadla"
  "g_conf.proto\032\034control_base/mrac_conf.pro"
  "to\"\334\n\n\030LatBaseLqrControllerConf\022\n\n\002ts\030\001 "
  "\001(\001\022\026\n\016preview_window\030\002 \001(\005\022\n\n\002cf\030\003 \001(\001\022"
  "\n\n\002cr\030\004 \001(\001\022\017\n\007mass_fl\030\005 \001(\005\022\017\n\007mass_fr\030"
  "\006 \001(\005\022\017\n\007mass_rl\030\007 \001(\005\022\017\n\007mass_rr\030\010 \001(\005\022"
  "\013\n\003eps\030\t \001(\001\022\020\n\010matrix_q\030\n \003(\001\022\030\n\020revers"
  "e_matrix_q\030\013 \003(\001\022\023\n\013cutoff_freq\030\014 \001(\005\022\037\n"
  "\027mean_filter_window_size\030\r \001(\005\022\025\n\rmax_it"
  "eration\030\016 \001(\005\022 \n\030max_lateral_acceleratio"
  "n\030\017 \001(\001\0226\n\026lat_err_gain_scheduler\030\020 \001(\0132"
  "\026.control.GainScheduler\022:\n\032heading_err_g"
  "ain_scheduler\030\021 \001(\0132\026.control.GainSchedu"
  "ler\0222\n\024reverse_leadlag_conf\030\022 \001(\0132\024.cont"
  "rol.LeadlagConf\0222\n#enable_reverse_leadla"
  "g_compensation\030\023 \001(\010:\005false\022-\n\036enable_lo"
  "ok_ahead_back_control\030\024 \001(\010:\005false\022\034\n\021lo"
  "okahead_station\030\025 \001(\001:\0010\022\033\n\020lookback_sta"
  "tion\030\026 \001(\001:\0010\022*\n\017steer_mrac_conf\030\027 \001(\0132\021"
  ".control.MracConf\022(\n\031enable_steer_mrac_c"
  "ontrol\030\030 \001(\010:\005false\022\'\n\034lookahead_station"
  "_high_speed\030\031 \001(\001:\0010\022&\n\033lookback_station"
  "_high_speed\030\032 \001(\001:\0010\022\037\n\020lock_steer_speed"
  "\030\033 \001(\001:\0050.081\0222\n#enable_navigation_mode_"
  "error_filter\030\034 \001(\010:\005false\0224\n&enable_navi"
  "gation_mode_position_update\030\035 \001(\010:\004true\022"
  " \n\023query_relative_time\030\036 \001(\001:\0030.8\0222\n#tra"
  "jectory_transform_to_com_reverse\030\037 \001(\010:\005"
  "false\0220\n!trajectory_transform_to_com_dri"
  "ve\030  \001(\010:\005false\0224\n%enable_feedback_augme"
  "nt_on_high_speed\030! \001(\010:\005false\022.\n\037enable_"
  "maximum_steer_rate_limit\030\" \001(\010:\005false\022,\n"
  "\035query_time_nearest_point_only\030# \001(\010:\005fa"
  "lse\022\024\n\014switch_speed\030$ \001(\001\022\036\n\023switch_spee"
  "d_window\030% \001(\001:\0010\022$\n\031reverse_feedforward"
  "_ratio\030& \001(\001:\0011\022(\n\031reverse_use_dynamic_m"
  "odel\030\' \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto_deps[3] = {
  &::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
  &::descriptor_table_control_5fbase_2fleadlag_5fconf_2eproto,
  &::descriptor_table_control_5fbase_2fmrac_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto_sccs[1] = {
  &scc_info_LatBaseLqrControllerConf_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto, "control_base/lat_based_lqr_controller_conf.proto", 1537,
  &descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto_once, descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto_sccs, descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto, 1, file_level_enum_descriptors_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto, file_level_service_descriptors_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto)), true);
namespace control {

// ===================================================================

void LatBaseLqrControllerConf::InitAsDefaultInstance() {
  ::control::_LatBaseLqrControllerConf_default_instance_._instance.get_mutable()->lat_err_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::_LatBaseLqrControllerConf_default_instance_._instance.get_mutable()->heading_err_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::_LatBaseLqrControllerConf_default_instance_._instance.get_mutable()->reverse_leadlag_conf_ = const_cast< ::control::LeadlagConf*>(
      ::control::LeadlagConf::internal_default_instance());
  ::control::_LatBaseLqrControllerConf_default_instance_._instance.get_mutable()->steer_mrac_conf_ = const_cast< ::control::MracConf*>(
      ::control::MracConf::internal_default_instance());
}
class LatBaseLqrControllerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<LatBaseLqrControllerConf>()._has_bits_);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preview_window(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mass_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mass_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mass_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mass_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mean_filter_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::control::GainScheduler& lat_err_gain_scheduler(const LatBaseLqrControllerConf* msg);
  static void set_has_lat_err_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::GainScheduler& heading_err_gain_scheduler(const LatBaseLqrControllerConf* msg);
  static void set_has_heading_err_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::LeadlagConf& reverse_leadlag_conf(const LatBaseLqrControllerConf* msg);
  static void set_has_reverse_leadlag_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_reverse_leadlag_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_enable_look_ahead_back_control(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_lookahead_station(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lookback_station(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::control::MracConf& steer_mrac_conf(const LatBaseLqrControllerConf* msg);
  static void set_has_steer_mrac_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_steer_mrac_control(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_lookahead_station_high_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lookback_station_high_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lock_steer_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_enable_navigation_mode_error_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_enable_navigation_mode_position_update(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_query_relative_time(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_trajectory_transform_to_com_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_trajectory_transform_to_com_drive(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_enable_feedback_augment_on_high_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_enable_maximum_steer_rate_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_query_time_nearest_point_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_switch_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_switch_speed_window(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_reverse_feedforward_ratio(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_reverse_use_dynamic_model(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

const ::control::GainScheduler&
LatBaseLqrControllerConf::_Internal::lat_err_gain_scheduler(const LatBaseLqrControllerConf* msg) {
  return *msg->lat_err_gain_scheduler_;
}
const ::control::GainScheduler&
LatBaseLqrControllerConf::_Internal::heading_err_gain_scheduler(const LatBaseLqrControllerConf* msg) {
  return *msg->heading_err_gain_scheduler_;
}
const ::control::LeadlagConf&
LatBaseLqrControllerConf::_Internal::reverse_leadlag_conf(const LatBaseLqrControllerConf* msg) {
  return *msg->reverse_leadlag_conf_;
}
const ::control::MracConf&
LatBaseLqrControllerConf::_Internal::steer_mrac_conf(const LatBaseLqrControllerConf* msg) {
  return *msg->steer_mrac_conf_;
}
void LatBaseLqrControllerConf::clear_lat_err_gain_scheduler() {
  if (lat_err_gain_scheduler_ != nullptr) lat_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LatBaseLqrControllerConf::clear_heading_err_gain_scheduler() {
  if (heading_err_gain_scheduler_ != nullptr) heading_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LatBaseLqrControllerConf::clear_reverse_leadlag_conf() {
  if (reverse_leadlag_conf_ != nullptr) reverse_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LatBaseLqrControllerConf::clear_steer_mrac_conf() {
  if (steer_mrac_conf_ != nullptr) steer_mrac_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
LatBaseLqrControllerConf::LatBaseLqrControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_q_(arena),
  reverse_matrix_q_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.LatBaseLqrControllerConf)
}
LatBaseLqrControllerConf::LatBaseLqrControllerConf(const LatBaseLqrControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matrix_q_(from.matrix_q_),
      reverse_matrix_q_(from.reverse_matrix_q_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::control::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::control::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_reverse_leadlag_conf()) {
    reverse_leadlag_conf_ = new ::control::LeadlagConf(*from.reverse_leadlag_conf_);
  } else {
    reverse_leadlag_conf_ = nullptr;
  }
  if (from._internal_has_steer_mrac_conf()) {
    steer_mrac_conf_ = new ::control::MracConf(*from.steer_mrac_conf_);
  } else {
    steer_mrac_conf_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_feedforward_ratio_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(reverse_feedforward_ratio_));
  // @@protoc_insertion_point(copy_constructor:control.LatBaseLqrControllerConf)
}

void LatBaseLqrControllerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatBaseLqrControllerConf_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto.base);
  ::memset(&lat_err_gain_scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_use_dynamic_model_) -
      reinterpret_cast<char*>(&lat_err_gain_scheduler_)) + sizeof(reverse_use_dynamic_model_));
  enable_navigation_mode_position_update_ = true;
  lock_steer_speed_ = 0.081;
  query_relative_time_ = 0.8;
  reverse_feedforward_ratio_ = 1;
}

LatBaseLqrControllerConf::~LatBaseLqrControllerConf() {
  // @@protoc_insertion_point(destructor:control.LatBaseLqrControllerConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatBaseLqrControllerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lat_err_gain_scheduler_;
  if (this != internal_default_instance()) delete heading_err_gain_scheduler_;
  if (this != internal_default_instance()) delete reverse_leadlag_conf_;
  if (this != internal_default_instance()) delete steer_mrac_conf_;
}

void LatBaseLqrControllerConf::ArenaDtor(void* object) {
  LatBaseLqrControllerConf* _this = reinterpret_cast< LatBaseLqrControllerConf* >(object);
  (void)_this;
}
void LatBaseLqrControllerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatBaseLqrControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatBaseLqrControllerConf& LatBaseLqrControllerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatBaseLqrControllerConf_control_5fbase_2flat_5fbased_5flqr_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LatBaseLqrControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.LatBaseLqrControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  reverse_matrix_q_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_err_gain_scheduler_ != nullptr);
      lat_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(heading_err_gain_scheduler_ != nullptr);
      heading_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reverse_leadlag_conf_ != nullptr);
      reverse_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(steer_mrac_conf_ != nullptr);
      steer_mrac_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mass_fl_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(mass_fl_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_iteration_) -
        reinterpret_cast<char*>(&cr_)) + sizeof(max_iteration_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&max_lateral_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_steer_mrac_control_) -
        reinterpret_cast<char*>(&max_lateral_acceleration_)) + sizeof(enable_steer_mrac_control_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&enable_navigation_mode_error_filter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_time_nearest_point_only_) -
        reinterpret_cast<char*>(&enable_navigation_mode_error_filter_)) + sizeof(query_time_nearest_point_only_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    reverse_use_dynamic_model_ = false;
    enable_navigation_mode_position_update_ = true;
    lock_steer_speed_ = 0.081;
    query_relative_time_ = 0.8;
    reverse_feedforward_ratio_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatBaseLqrControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ts(&_has_bits_);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 preview_window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preview_window(&_has_bits_);
          preview_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cf(&_has_bits_);
          cf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_cr(&_has_bits_);
          cr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_fl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mass_fl(&_has_bits_);
          mass_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_fr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mass_fr(&_has_bits_);
          mass_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_rl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mass_rl(&_has_bits_);
          mass_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_rr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mass_rr(&_has_bits_);
          mass_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double eps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_eps(&_has_bits_);
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_q = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double reverse_matrix_q = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reverse_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<89>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_reverse_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cutoff_freq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cutoff_freq(&_has_bits_);
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mean_filter_window_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_mean_filter_window_size(&_has_bits_);
          mean_filter_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_iteration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_iteration(&_has_bits_);
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_lateral_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_max_lateral_acceleration(&_has_bits_);
          max_lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler lat_err_gain_scheduler = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler heading_err_gain_scheduler = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_heading_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.LeadlagConf reverse_leadlag_conf = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_leadlag_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_enable_reverse_leadlag_compensation(&_has_bits_);
          enable_reverse_leadlag_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_look_ahead_back_control = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_enable_look_ahead_back_control(&_has_bits_);
          enable_look_ahead_back_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lookahead_station = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_lookahead_station(&_has_bits_);
          lookahead_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lookback_station = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_lookback_station(&_has_bits_);
          lookback_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.MracConf steer_mrac_conf = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_mrac_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_steer_mrac_control = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_enable_steer_mrac_control(&_has_bits_);
          enable_steer_mrac_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lookahead_station_high_speed = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_lookahead_station_high_speed(&_has_bits_);
          lookahead_station_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lookback_station_high_speed = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_lookback_station_high_speed(&_has_bits_);
          lookback_station_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lock_steer_speed = 27 [default = 0.081];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_lock_steer_speed(&_has_bits_);
          lock_steer_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_navigation_mode_error_filter = 28 [default = false];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_enable_navigation_mode_error_filter(&_has_bits_);
          enable_navigation_mode_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_navigation_mode_position_update = 29 [default = true];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_enable_navigation_mode_position_update(&_has_bits_);
          enable_navigation_mode_position_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double query_relative_time = 30 [default = 0.8];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_query_relative_time(&_has_bits_);
          query_relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool trajectory_transform_to_com_reverse = 31 [default = false];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_trajectory_transform_to_com_reverse(&_has_bits_);
          trajectory_transform_to_com_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trajectory_transform_to_com_drive = 32 [default = false];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_trajectory_transform_to_com_drive(&_has_bits_);
          trajectory_transform_to_com_drive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_feedback_augment_on_high_speed = 33 [default = false];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_feedback_augment_on_high_speed(&_has_bits_);
          enable_feedback_augment_on_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_maximum_steer_rate_limit = 34 [default = false];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_maximum_steer_rate_limit(&_has_bits_);
          enable_maximum_steer_rate_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool query_time_nearest_point_only = 35 [default = false];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_query_time_nearest_point_only(&_has_bits_);
          query_time_nearest_point_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double switch_speed = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_switch_speed(&_has_bits_);
          switch_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double switch_speed_window = 37 [default = 0];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_switch_speed_window(&_has_bits_);
          switch_speed_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reverse_feedforward_ratio = 38 [default = 1];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_reverse_feedforward_ratio(&_has_bits_);
          reverse_feedforward_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool reverse_use_dynamic_model = 39 [default = false];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_reverse_use_dynamic_model(&_has_bits_);
          reverse_use_dynamic_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatBaseLqrControllerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.LatBaseLqrControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ts(), target);
  }

  // optional int32 preview_window = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_preview_window(), target);
  }

  // optional double cf = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cf(), target);
  }

  // optional double cr = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cr(), target);
  }

  // optional int32 mass_fl = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mass_fl(), target);
  }

  // optional int32 mass_fr = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mass_fr(), target);
  }

  // optional int32 mass_rl = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mass_rl(), target);
  }

  // optional int32 mass_rr = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mass_rr(), target);
  }

  // optional double eps = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_eps(), target);
  }

  // repeated double matrix_q = 10;
  for (int i = 0, n = this->_internal_matrix_q_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_matrix_q(i), target);
  }

  // repeated double reverse_matrix_q = 11;
  for (int i = 0, n = this->_internal_reverse_matrix_q_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_reverse_matrix_q(i), target);
  }

  // optional int32 cutoff_freq = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_mean_filter_window_size(), target);
  }

  // optional int32 max_iteration = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_iteration(), target);
  }

  // optional double max_lateral_acceleration = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_lateral_acceleration(), target);
  }

  // optional .control.GainScheduler lat_err_gain_scheduler = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::lat_err_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler heading_err_gain_scheduler = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::heading_err_gain_scheduler(this), target, stream);
  }

  // optional .control.LeadlagConf reverse_leadlag_conf = 18;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::reverse_leadlag_conf(this), target, stream);
  }

  // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  // optional bool enable_look_ahead_back_control = 20 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_enable_look_ahead_back_control(), target);
  }

  // optional double lookahead_station = 21 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_lookahead_station(), target);
  }

  // optional double lookback_station = 22 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_lookback_station(), target);
  }

  // optional .control.MracConf steer_mrac_conf = 23;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::steer_mrac_conf(this), target, stream);
  }

  // optional bool enable_steer_mrac_control = 24 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_steer_mrac_control(), target);
  }

  // optional double lookahead_station_high_speed = 25 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_lookahead_station_high_speed(), target);
  }

  // optional double lookback_station_high_speed = 26 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_lookback_station_high_speed(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double lock_steer_speed = 27 [default = 0.081];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_lock_steer_speed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool enable_navigation_mode_error_filter = 28 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_enable_navigation_mode_error_filter(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool enable_navigation_mode_position_update = 29 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_enable_navigation_mode_position_update(), target);
  }

  // optional double query_relative_time = 30 [default = 0.8];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_query_relative_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool trajectory_transform_to_com_reverse = 31 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_trajectory_transform_to_com_reverse(), target);
  }

  // optional bool trajectory_transform_to_com_drive = 32 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_trajectory_transform_to_com_drive(), target);
  }

  // optional bool enable_feedback_augment_on_high_speed = 33 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_enable_feedback_augment_on_high_speed(), target);
  }

  // optional bool enable_maximum_steer_rate_limit = 34 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_enable_maximum_steer_rate_limit(), target);
  }

  // optional bool query_time_nearest_point_only = 35 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_query_time_nearest_point_only(), target);
  }

  // optional double switch_speed = 36;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_switch_speed(), target);
  }

  // optional double switch_speed_window = 37 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_switch_speed_window(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double reverse_feedforward_ratio = 38 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_reverse_feedforward_ratio(), target);
  }

  // optional bool reverse_use_dynamic_model = 39 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_reverse_use_dynamic_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.LatBaseLqrControllerConf)
  return target;
}

size_t LatBaseLqrControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.LatBaseLqrControllerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_q_size());
    total_size += data_size;
  }

  // repeated double reverse_matrix_q = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_reverse_matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reverse_matrix_q_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.GainScheduler lat_err_gain_scheduler = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_err_gain_scheduler_);
    }

    // optional .control.GainScheduler heading_err_gain_scheduler = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heading_err_gain_scheduler_);
    }

    // optional .control.LeadlagConf reverse_leadlag_conf = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_leadlag_conf_);
    }

    // optional .control.MracConf steer_mrac_conf = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steer_mrac_conf_);
    }

    // optional double ts = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double cf = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 preview_window = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_preview_window());
    }

    // optional int32 mass_fl = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_fl());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double cr = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int32 mass_fr = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_fr());
    }

    // optional int32 mass_rl = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_rl());
    }

    // optional double eps = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 mass_rr = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_rr());
    }

    // optional int32 cutoff_freq = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cutoff_freq());
    }

    // optional int32 mean_filter_window_size = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mean_filter_window_size());
    }

    // optional int32 max_iteration = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_iteration());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double max_lateral_acceleration = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double lookahead_station = 21 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double lookback_station = 22 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double lookahead_station_high_speed = 25 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double lookback_station_high_speed = 26 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_look_ahead_back_control = 20 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_steer_mrac_control = 24 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool enable_navigation_mode_error_filter = 28 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool trajectory_transform_to_com_reverse = 31 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool trajectory_transform_to_com_drive = 32 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_feedback_augment_on_high_speed = 33 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_maximum_steer_rate_limit = 34 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional double switch_speed = 36;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double switch_speed_window = 37 [default = 0];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional bool query_time_nearest_point_only = 35 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool reverse_use_dynamic_model = 39 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool enable_navigation_mode_position_update = 29 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional double lock_steer_speed = 27 [default = 0.081];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double query_relative_time = 30 [default = 0.8];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double reverse_feedforward_ratio = 38 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatBaseLqrControllerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.LatBaseLqrControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LatBaseLqrControllerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatBaseLqrControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.LatBaseLqrControllerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.LatBaseLqrControllerConf)
    MergeFrom(*source);
  }
}

void LatBaseLqrControllerConf::MergeFrom(const LatBaseLqrControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.LatBaseLqrControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  reverse_matrix_q_.MergeFrom(from.reverse_matrix_q_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lat_err_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_lat_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_heading_err_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_heading_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reverse_leadlag_conf()->::control::LeadlagConf::MergeFrom(from._internal_reverse_leadlag_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_steer_mrac_conf()->::control::MracConf::MergeFrom(from._internal_steer_mrac_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000020u) {
      cf_ = from.cf_;
    }
    if (cached_has_bits & 0x00000040u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x00000080u) {
      mass_fl_ = from.mass_fl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cr_ = from.cr_;
    }
    if (cached_has_bits & 0x00000200u) {
      mass_fr_ = from.mass_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      mass_rl_ = from.mass_rl_;
    }
    if (cached_has_bits & 0x00000800u) {
      eps_ = from.eps_;
    }
    if (cached_has_bits & 0x00001000u) {
      mass_rr_ = from.mass_rr_;
    }
    if (cached_has_bits & 0x00002000u) {
      cutoff_freq_ = from.cutoff_freq_;
    }
    if (cached_has_bits & 0x00004000u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_iteration_ = from.max_iteration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_lateral_acceleration_ = from.max_lateral_acceleration_;
    }
    if (cached_has_bits & 0x00020000u) {
      lookahead_station_ = from.lookahead_station_;
    }
    if (cached_has_bits & 0x00040000u) {
      lookback_station_ = from.lookback_station_;
    }
    if (cached_has_bits & 0x00080000u) {
      lookahead_station_high_speed_ = from.lookahead_station_high_speed_;
    }
    if (cached_has_bits & 0x00100000u) {
      lookback_station_high_speed_ = from.lookback_station_high_speed_;
    }
    if (cached_has_bits & 0x00200000u) {
      enable_reverse_leadlag_compensation_ = from.enable_reverse_leadlag_compensation_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_look_ahead_back_control_ = from.enable_look_ahead_back_control_;
    }
    if (cached_has_bits & 0x00800000u) {
      enable_steer_mrac_control_ = from.enable_steer_mrac_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      enable_navigation_mode_error_filter_ = from.enable_navigation_mode_error_filter_;
    }
    if (cached_has_bits & 0x02000000u) {
      trajectory_transform_to_com_reverse_ = from.trajectory_transform_to_com_reverse_;
    }
    if (cached_has_bits & 0x04000000u) {
      trajectory_transform_to_com_drive_ = from.trajectory_transform_to_com_drive_;
    }
    if (cached_has_bits & 0x08000000u) {
      enable_feedback_augment_on_high_speed_ = from.enable_feedback_augment_on_high_speed_;
    }
    if (cached_has_bits & 0x10000000u) {
      enable_maximum_steer_rate_limit_ = from.enable_maximum_steer_rate_limit_;
    }
    if (cached_has_bits & 0x20000000u) {
      switch_speed_ = from.switch_speed_;
    }
    if (cached_has_bits & 0x40000000u) {
      switch_speed_window_ = from.switch_speed_window_;
    }
    if (cached_has_bits & 0x80000000u) {
      query_time_nearest_point_only_ = from.query_time_nearest_point_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      reverse_use_dynamic_model_ = from.reverse_use_dynamic_model_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_navigation_mode_position_update_ = from.enable_navigation_mode_position_update_;
    }
    if (cached_has_bits & 0x00000004u) {
      lock_steer_speed_ = from.lock_steer_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      query_relative_time_ = from.query_relative_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      reverse_feedforward_ratio_ = from.reverse_feedforward_ratio_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void LatBaseLqrControllerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.LatBaseLqrControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatBaseLqrControllerConf::CopyFrom(const LatBaseLqrControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.LatBaseLqrControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatBaseLqrControllerConf::IsInitialized() const {
  return true;
}

void LatBaseLqrControllerConf::InternalSwap(LatBaseLqrControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  matrix_q_.InternalSwap(&other->matrix_q_);
  reverse_matrix_q_.InternalSwap(&other->reverse_matrix_q_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatBaseLqrControllerConf, reverse_use_dynamic_model_)
      + sizeof(LatBaseLqrControllerConf::reverse_use_dynamic_model_)
      - PROTOBUF_FIELD_OFFSET(LatBaseLqrControllerConf, lat_err_gain_scheduler_)>(
          reinterpret_cast<char*>(&lat_err_gain_scheduler_),
          reinterpret_cast<char*>(&other->lat_err_gain_scheduler_));
  swap(enable_navigation_mode_position_update_, other->enable_navigation_mode_position_update_);
  swap(lock_steer_speed_, other->lock_steer_speed_);
  swap(query_relative_time_, other->query_relative_time_);
  swap(reverse_feedforward_ratio_, other->reverse_feedforward_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatBaseLqrControllerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::LatBaseLqrControllerConf* Arena::CreateMaybeMessage< ::control::LatBaseLqrControllerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::LatBaseLqrControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/gain_scheduler_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/gain_scheduler_conf.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {

inline constexpr GainSchedulerInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bp_{0},
        ratio_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GainSchedulerInfo::GainSchedulerInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GainSchedulerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GainSchedulerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GainSchedulerInfoDefaultTypeInternal() {}
  union {
    GainSchedulerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GainSchedulerInfoDefaultTypeInternal _GainSchedulerInfo_default_instance_;

inline constexpr GainScheduler::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : scheduler_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GainScheduler::GainScheduler(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GainSchedulerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GainSchedulerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GainSchedulerDefaultTypeInternal() {}
  union {
    GainScheduler _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GainSchedulerDefaultTypeInternal _GainScheduler_default_instance_;
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2fgain_5fscheduler_5fconf_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2fgain_5fscheduler_5fconf_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::control::GainScheduler, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::GainScheduler, _impl_.scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::GainSchedulerInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::GainSchedulerInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::GainSchedulerInfo, _impl_.bp_),
        PROTOBUF_FIELD_OFFSET(::control::GainSchedulerInfo, _impl_.ratio_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::control::GainScheduler)},
        {9, 19, -1, sizeof(::control::GainSchedulerInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::_GainScheduler_default_instance_._instance,
    &::control::_GainSchedulerInfo_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2fgain_5fscheduler_5fconf_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&control_base/gain_scheduler_conf.proto"
    "\022\007control\">\n\rGainScheduler\022-\n\tscheduler\030"
    "\001 \003(\0132\032.control.GainSchedulerInfo\".\n\021Gai"
    "nSchedulerInfo\022\n\n\002bp\030\001 \001(\001\022\r\n\005ratio\030\002 \001("
    "\001"
};
static ::absl::once_flag descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto = {
    false,
    false,
    161,
    descriptor_table_protodef_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
    "control_base/gain_scheduler_conf.proto",
    &descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2fgain_5fscheduler_5fconf_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
    file_level_service_descriptors_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
};
namespace control {
// ===================================================================

class GainScheduler::_Internal {
 public:
};

GainScheduler::GainScheduler(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.GainScheduler)
}
inline PROTOBUF_NDEBUG_INLINE GainScheduler::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::GainScheduler& from_msg)
      : scheduler_{visibility, arena, from.scheduler_},
        _cached_size_{0} {}

GainScheduler::GainScheduler(
    ::google::protobuf::Arena* arena,
    const GainScheduler& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GainScheduler* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:control.GainScheduler)
}
inline PROTOBUF_NDEBUG_INLINE GainScheduler::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : scheduler_{visibility, arena},
        _cached_size_{0} {}

inline void GainScheduler::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GainScheduler::~GainScheduler() {
  // @@protoc_insertion_point(destructor:control.GainScheduler)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GainScheduler::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GainScheduler::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &GainScheduler::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GainScheduler>(),
            ::google::protobuf::Message::GetNewImpl<GainScheduler>(),
            ::google::protobuf::Message::GetClearImpl<GainScheduler>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<GainScheduler>(),
                ::google::protobuf::Message::GetSerializeImpl<GainScheduler>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GainScheduler, _impl_._cached_size_),
            false,
        },
        &GainScheduler::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GainScheduler::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GainScheduler::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GainScheduler_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::GainScheduler>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .control.GainSchedulerInfo scheduler = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GainScheduler, _impl_.scheduler_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .control.GainSchedulerInfo scheduler = 1;
    {PROTOBUF_FIELD_OFFSET(GainScheduler, _impl_.scheduler_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::GainSchedulerInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GainScheduler::Clear() {
// @@protoc_insertion_point(message_clear_start:control.GainScheduler)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scheduler_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* GainScheduler::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.GainScheduler)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .control.GainSchedulerInfo scheduler = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_scheduler_size());
       i < n; i++) {
    const auto& repfield = this->_internal_scheduler().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.GainScheduler)
  return target;
}

::size_t GainScheduler::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.GainScheduler)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated .control.GainSchedulerInfo scheduler = 1;
     {
      total_size += 1UL * this->_internal_scheduler_size();
      for (const auto& msg : this->_internal_scheduler()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void GainScheduler::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GainScheduler*>(&to_msg);
  auto& from = static_cast<const GainScheduler&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.GainScheduler)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scheduler()->MergeFrom(
      from._internal_scheduler());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GainScheduler::CopyFrom(const GainScheduler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.GainScheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GainScheduler::InternalSwap(GainScheduler* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scheduler_.InternalSwap(&other->_impl_.scheduler_);
}

::google::protobuf::Metadata GainScheduler::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GainSchedulerInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GainSchedulerInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_._has_bits_);
};

GainSchedulerInfo::GainSchedulerInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.GainSchedulerInfo)
}
GainSchedulerInfo::GainSchedulerInfo(
    ::google::protobuf::Arena* arena, const GainSchedulerInfo& from)
    : GainSchedulerInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GainSchedulerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GainSchedulerInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bp_),
           0,
           offsetof(Impl_, ratio_) -
               offsetof(Impl_, bp_) +
               sizeof(Impl_::ratio_));
}
GainSchedulerInfo::~GainSchedulerInfo() {
  // @@protoc_insertion_point(destructor:control.GainSchedulerInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GainSchedulerInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GainSchedulerInfo::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &GainSchedulerInfo::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GainSchedulerInfo>(),
            ::google::protobuf::Message::GetNewImpl<GainSchedulerInfo>(),
            ::google::protobuf::Message::GetClearImpl<GainSchedulerInfo>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<GainSchedulerInfo>(),
                ::google::protobuf::Message::GetSerializeImpl<GainSchedulerInfo>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_._cached_size_),
            false,
        },
        &GainSchedulerInfo::kDescriptorMethods,
        &descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GainSchedulerInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> GainSchedulerInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GainSchedulerInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::GainSchedulerInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional double ratio = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_.ratio_)}},
    // optional double bp = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_.bp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double bp = 1;
    {PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_.bp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ratio = 2;
    {PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_.ratio_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GainSchedulerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:control.GainSchedulerInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.bp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ratio_) -
        reinterpret_cast<char*>(&_impl_.bp_)) + sizeof(_impl_.ratio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* GainSchedulerInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.GainSchedulerInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double bp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_bp(), target);
  }

  // optional double ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.GainSchedulerInfo)
  return target;
}

::size_t GainSchedulerInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.GainSchedulerInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double bp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }
    // optional double ratio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void GainSchedulerInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GainSchedulerInfo*>(&to_msg);
  auto& from = static_cast<const GainSchedulerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.GainSchedulerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bp_ = from._impl_.bp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ratio_ = from._impl_.ratio_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GainSchedulerInfo::CopyFrom(const GainSchedulerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.GainSchedulerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GainSchedulerInfo::InternalSwap(GainSchedulerInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_.ratio_)
      + sizeof(GainSchedulerInfo::_impl_.ratio_)
      - PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, _impl_.bp_)>(
          reinterpret_cast<char*>(&_impl_.bp_),
          reinterpret_cast<char*>(&other->_impl_.bp_));
}

::google::protobuf::Metadata GainSchedulerInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

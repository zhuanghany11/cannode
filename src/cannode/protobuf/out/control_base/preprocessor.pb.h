// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/preprocessor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fpreprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fpreprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/drive_state.pb.h"
#include "control_msgs/input_debug.pb.h"
#include "control_base/local_view.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fpreprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fpreprocessor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fpreprocessor_2eproto;
namespace control {
class Preprocessor;
class PreprocessorDefaultTypeInternal;
extern PreprocessorDefaultTypeInternal _Preprocessor_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::Preprocessor* Arena::CreateMaybeMessage<::control::Preprocessor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class Preprocessor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.Preprocessor) */ {
 public:
  inline Preprocessor() : Preprocessor(nullptr) {};
  virtual ~Preprocessor();

  Preprocessor(const Preprocessor& from);
  Preprocessor(Preprocessor&& from) noexcept
    : Preprocessor() {
    *this = ::std::move(from);
  }

  inline Preprocessor& operator=(const Preprocessor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Preprocessor& operator=(Preprocessor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Preprocessor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Preprocessor* internal_default_instance() {
    return reinterpret_cast<const Preprocessor*>(
               &_Preprocessor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Preprocessor& a, Preprocessor& b) {
    a.Swap(&b);
  }
  inline void Swap(Preprocessor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Preprocessor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Preprocessor* New() const final {
    return CreateMaybeMessage<Preprocessor>(nullptr);
  }

  Preprocessor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Preprocessor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Preprocessor& from);
  void MergeFrom(const Preprocessor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Preprocessor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.Preprocessor";
  }
  protected:
  explicit Preprocessor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fpreprocessor_2eproto);
    return ::descriptor_table_control_5fbase_2fpreprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstopReasonFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kLocalViewFieldNumber = 2,
    kEngageAdviceFieldNumber = 4,
    kInputDebugFieldNumber = 5,
    kReceivedPadMsgFieldNumber = 6,
    kEstopFieldNumber = 7,
  };
  // optional string estop_reason = 8;
  bool has_estop_reason() const;
  private:
  bool _internal_has_estop_reason() const;
  public:
  void clear_estop_reason();
  const std::string& estop_reason() const;
  void set_estop_reason(const std::string& value);
  void set_estop_reason(std::string&& value);
  void set_estop_reason(const char* value);
  void set_estop_reason(const char* value, size_t size);
  std::string* mutable_estop_reason();
  std::string* release_estop_reason();
  void set_allocated_estop_reason(std::string* estop_reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_estop_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_estop_reason(
      std::string* estop_reason);
  private:
  const std::string& _internal_estop_reason() const;
  void _internal_set_estop_reason(const std::string& value);
  std::string* _internal_mutable_estop_reason();
  public:

  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // optional .control.LocalView local_view = 2;
  bool has_local_view() const;
  private:
  bool _internal_has_local_view() const;
  public:
  void clear_local_view();
  const ::control::LocalView& local_view() const;
  ::control::LocalView* release_local_view();
  ::control::LocalView* mutable_local_view();
  void set_allocated_local_view(::control::LocalView* local_view);
  private:
  const ::control::LocalView& _internal_local_view() const;
  ::control::LocalView* _internal_mutable_local_view();
  public:
  void unsafe_arena_set_allocated_local_view(
      ::control::LocalView* local_view);
  ::control::LocalView* unsafe_arena_release_local_view();

  // optional .control.common.EngageAdvice engage_advice = 4;
  bool has_engage_advice() const;
  private:
  bool _internal_has_engage_advice() const;
  public:
  void clear_engage_advice();
  const ::control::common::EngageAdvice& engage_advice() const;
  ::control::common::EngageAdvice* release_engage_advice();
  ::control::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::control::common::EngageAdvice* engage_advice);
  private:
  const ::control::common::EngageAdvice& _internal_engage_advice() const;
  ::control::common::EngageAdvice* _internal_mutable_engage_advice();
  public:
  void unsafe_arena_set_allocated_engage_advice(
      ::control::common::EngageAdvice* engage_advice);
  ::control::common::EngageAdvice* unsafe_arena_release_engage_advice();

  // optional .control.InputDebug input_debug = 5;
  bool has_input_debug() const;
  private:
  bool _internal_has_input_debug() const;
  public:
  void clear_input_debug();
  const ::control::InputDebug& input_debug() const;
  ::control::InputDebug* release_input_debug();
  ::control::InputDebug* mutable_input_debug();
  void set_allocated_input_debug(::control::InputDebug* input_debug);
  private:
  const ::control::InputDebug& _internal_input_debug() const;
  ::control::InputDebug* _internal_mutable_input_debug();
  public:
  void unsafe_arena_set_allocated_input_debug(
      ::control::InputDebug* input_debug);
  ::control::InputDebug* unsafe_arena_release_input_debug();

  // optional bool received_pad_msg = 6 [default = false];
  bool has_received_pad_msg() const;
  private:
  bool _internal_has_received_pad_msg() const;
  public:
  void clear_received_pad_msg();
  bool received_pad_msg() const;
  void set_received_pad_msg(bool value);
  private:
  bool _internal_received_pad_msg() const;
  void _internal_set_received_pad_msg(bool value);
  public:

  // optional bool estop = 7 [default = false];
  bool has_estop() const;
  private:
  bool _internal_has_estop() const;
  public:
  void clear_estop();
  bool estop() const;
  void set_estop(bool value);
  private:
  bool _internal_estop() const;
  void _internal_set_estop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:control.Preprocessor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr estop_reason_;
  ::control::common::Header* header_;
  ::control::LocalView* local_view_;
  ::control::common::EngageAdvice* engage_advice_;
  ::control::InputDebug* input_debug_;
  bool received_pad_msg_;
  bool estop_;
  friend struct ::TableStruct_control_5fbase_2fpreprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Preprocessor

// optional .control.common.Header header = 1;
inline bool Preprocessor::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Preprocessor::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& Preprocessor::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& Preprocessor::header() const {
  // @@protoc_insertion_point(field_get:control.Preprocessor.header)
  return _internal_header();
}
inline void Preprocessor::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Preprocessor.header)
}
inline ::control::common::Header* Preprocessor::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* Preprocessor::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.Preprocessor.header)
  _has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* Preprocessor::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* Preprocessor::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.Preprocessor.header)
  return _internal_mutable_header();
}
inline void Preprocessor::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.Preprocessor.header)
}

// optional .control.LocalView local_view = 2;
inline bool Preprocessor::_internal_has_local_view() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || local_view_ != nullptr);
  return value;
}
inline bool Preprocessor::has_local_view() const {
  return _internal_has_local_view();
}
inline const ::control::LocalView& Preprocessor::_internal_local_view() const {
  const ::control::LocalView* p = local_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::LocalView*>(
      &::control::_LocalView_default_instance_);
}
inline const ::control::LocalView& Preprocessor::local_view() const {
  // @@protoc_insertion_point(field_get:control.Preprocessor.local_view)
  return _internal_local_view();
}
inline void Preprocessor::unsafe_arena_set_allocated_local_view(
    ::control::LocalView* local_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_view_);
  }
  local_view_ = local_view;
  if (local_view) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Preprocessor.local_view)
}
inline ::control::LocalView* Preprocessor::release_local_view() {
  auto temp = unsafe_arena_release_local_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::LocalView* Preprocessor::unsafe_arena_release_local_view() {
  // @@protoc_insertion_point(field_release:control.Preprocessor.local_view)
  _has_bits_[0] &= ~0x00000004u;
  ::control::LocalView* temp = local_view_;
  local_view_ = nullptr;
  return temp;
}
inline ::control::LocalView* Preprocessor::_internal_mutable_local_view() {
  _has_bits_[0] |= 0x00000004u;
  if (local_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::LocalView>(GetArena());
    local_view_ = p;
  }
  return local_view_;
}
inline ::control::LocalView* Preprocessor::mutable_local_view() {
  // @@protoc_insertion_point(field_mutable:control.Preprocessor.local_view)
  return _internal_mutable_local_view();
}
inline void Preprocessor::set_allocated_local_view(::control::LocalView* local_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_view_);
  }
  if (local_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_view)->GetArena();
    if (message_arena != submessage_arena) {
      local_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_view, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  local_view_ = local_view;
  // @@protoc_insertion_point(field_set_allocated:control.Preprocessor.local_view)
}

// optional .control.common.EngageAdvice engage_advice = 4;
inline bool Preprocessor::_internal_has_engage_advice() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || engage_advice_ != nullptr);
  return value;
}
inline bool Preprocessor::has_engage_advice() const {
  return _internal_has_engage_advice();
}
inline const ::control::common::EngageAdvice& Preprocessor::_internal_engage_advice() const {
  const ::control::common::EngageAdvice* p = engage_advice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::EngageAdvice*>(
      &::control::common::_EngageAdvice_default_instance_);
}
inline const ::control::common::EngageAdvice& Preprocessor::engage_advice() const {
  // @@protoc_insertion_point(field_get:control.Preprocessor.engage_advice)
  return _internal_engage_advice();
}
inline void Preprocessor::unsafe_arena_set_allocated_engage_advice(
    ::control::common::EngageAdvice* engage_advice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice_);
  }
  engage_advice_ = engage_advice;
  if (engage_advice) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Preprocessor.engage_advice)
}
inline ::control::common::EngageAdvice* Preprocessor::release_engage_advice() {
  auto temp = unsafe_arena_release_engage_advice();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::EngageAdvice* Preprocessor::unsafe_arena_release_engage_advice() {
  // @@protoc_insertion_point(field_release:control.Preprocessor.engage_advice)
  _has_bits_[0] &= ~0x00000008u;
  ::control::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = nullptr;
  return temp;
}
inline ::control::common::EngageAdvice* Preprocessor::_internal_mutable_engage_advice() {
  _has_bits_[0] |= 0x00000008u;
  if (engage_advice_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::EngageAdvice>(GetArena());
    engage_advice_ = p;
  }
  return engage_advice_;
}
inline ::control::common::EngageAdvice* Preprocessor::mutable_engage_advice() {
  // @@protoc_insertion_point(field_mutable:control.Preprocessor.engage_advice)
  return _internal_mutable_engage_advice();
}
inline void Preprocessor::set_allocated_engage_advice(::control::common::EngageAdvice* engage_advice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice_);
  }
  if (engage_advice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice)->GetArena();
    if (message_arena != submessage_arena) {
      engage_advice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engage_advice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  engage_advice_ = engage_advice;
  // @@protoc_insertion_point(field_set_allocated:control.Preprocessor.engage_advice)
}

// optional .control.InputDebug input_debug = 5;
inline bool Preprocessor::_internal_has_input_debug() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || input_debug_ != nullptr);
  return value;
}
inline bool Preprocessor::has_input_debug() const {
  return _internal_has_input_debug();
}
inline const ::control::InputDebug& Preprocessor::_internal_input_debug() const {
  const ::control::InputDebug* p = input_debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::InputDebug*>(
      &::control::_InputDebug_default_instance_);
}
inline const ::control::InputDebug& Preprocessor::input_debug() const {
  // @@protoc_insertion_point(field_get:control.Preprocessor.input_debug)
  return _internal_input_debug();
}
inline void Preprocessor::unsafe_arena_set_allocated_input_debug(
    ::control::InputDebug* input_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_debug_);
  }
  input_debug_ = input_debug;
  if (input_debug) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Preprocessor.input_debug)
}
inline ::control::InputDebug* Preprocessor::release_input_debug() {
  auto temp = unsafe_arena_release_input_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::InputDebug* Preprocessor::unsafe_arena_release_input_debug() {
  // @@protoc_insertion_point(field_release:control.Preprocessor.input_debug)
  _has_bits_[0] &= ~0x00000010u;
  ::control::InputDebug* temp = input_debug_;
  input_debug_ = nullptr;
  return temp;
}
inline ::control::InputDebug* Preprocessor::_internal_mutable_input_debug() {
  _has_bits_[0] |= 0x00000010u;
  if (input_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::InputDebug>(GetArena());
    input_debug_ = p;
  }
  return input_debug_;
}
inline ::control::InputDebug* Preprocessor::mutable_input_debug() {
  // @@protoc_insertion_point(field_mutable:control.Preprocessor.input_debug)
  return _internal_mutable_input_debug();
}
inline void Preprocessor::set_allocated_input_debug(::control::InputDebug* input_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_debug_);
  }
  if (input_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_debug)->GetArena();
    if (message_arena != submessage_arena) {
      input_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  input_debug_ = input_debug;
  // @@protoc_insertion_point(field_set_allocated:control.Preprocessor.input_debug)
}

// optional bool received_pad_msg = 6 [default = false];
inline bool Preprocessor::_internal_has_received_pad_msg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Preprocessor::has_received_pad_msg() const {
  return _internal_has_received_pad_msg();
}
inline void Preprocessor::clear_received_pad_msg() {
  received_pad_msg_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Preprocessor::_internal_received_pad_msg() const {
  return received_pad_msg_;
}
inline bool Preprocessor::received_pad_msg() const {
  // @@protoc_insertion_point(field_get:control.Preprocessor.received_pad_msg)
  return _internal_received_pad_msg();
}
inline void Preprocessor::_internal_set_received_pad_msg(bool value) {
  _has_bits_[0] |= 0x00000020u;
  received_pad_msg_ = value;
}
inline void Preprocessor::set_received_pad_msg(bool value) {
  _internal_set_received_pad_msg(value);
  // @@protoc_insertion_point(field_set:control.Preprocessor.received_pad_msg)
}

// optional bool estop = 7 [default = false];
inline bool Preprocessor::_internal_has_estop() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Preprocessor::has_estop() const {
  return _internal_has_estop();
}
inline void Preprocessor::clear_estop() {
  estop_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Preprocessor::_internal_estop() const {
  return estop_;
}
inline bool Preprocessor::estop() const {
  // @@protoc_insertion_point(field_get:control.Preprocessor.estop)
  return _internal_estop();
}
inline void Preprocessor::_internal_set_estop(bool value) {
  _has_bits_[0] |= 0x00000040u;
  estop_ = value;
}
inline void Preprocessor::set_estop(bool value) {
  _internal_set_estop(value);
  // @@protoc_insertion_point(field_set:control.Preprocessor.estop)
}

// optional string estop_reason = 8;
inline bool Preprocessor::_internal_has_estop_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Preprocessor::has_estop_reason() const {
  return _internal_has_estop_reason();
}
inline void Preprocessor::clear_estop_reason() {
  estop_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Preprocessor::estop_reason() const {
  // @@protoc_insertion_point(field_get:control.Preprocessor.estop_reason)
  return _internal_estop_reason();
}
inline void Preprocessor::set_estop_reason(const std::string& value) {
  _internal_set_estop_reason(value);
  // @@protoc_insertion_point(field_set:control.Preprocessor.estop_reason)
}
inline std::string* Preprocessor::mutable_estop_reason() {
  // @@protoc_insertion_point(field_mutable:control.Preprocessor.estop_reason)
  return _internal_mutable_estop_reason();
}
inline const std::string& Preprocessor::_internal_estop_reason() const {
  return estop_reason_.Get();
}
inline void Preprocessor::_internal_set_estop_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  estop_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Preprocessor::set_estop_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  estop_reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:control.Preprocessor.estop_reason)
}
inline void Preprocessor::set_estop_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  estop_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:control.Preprocessor.estop_reason)
}
inline void Preprocessor::set_estop_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  estop_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:control.Preprocessor.estop_reason)
}
inline std::string* Preprocessor::_internal_mutable_estop_reason() {
  _has_bits_[0] |= 0x00000001u;
  return estop_reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Preprocessor::release_estop_reason() {
  // @@protoc_insertion_point(field_release:control.Preprocessor.estop_reason)
  if (!_internal_has_estop_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return estop_reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Preprocessor::set_allocated_estop_reason(std::string* estop_reason) {
  if (estop_reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  estop_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), estop_reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:control.Preprocessor.estop_reason)
}
inline std::string* Preprocessor::unsafe_arena_release_estop_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:control.Preprocessor.estop_reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return estop_reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Preprocessor::unsafe_arena_set_allocated_estop_reason(
    std::string* estop_reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (estop_reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  estop_reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      estop_reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Preprocessor.estop_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fpreprocessor_2eproto

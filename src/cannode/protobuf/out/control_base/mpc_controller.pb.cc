// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/mpc_controller.proto

#include "control_base/mpc_controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fgain_5fscheduler_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fleadlag_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeadlagConf_control_5fbase_2fleadlag_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fpid_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PidConf_control_5fbase_2fpid_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fmpc_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConf_control_5fbase_2fmpc_5fcontroller_2eproto;
namespace control {
namespace latmpc {
class FilterConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterConf> _instance;
} _FilterConf_default_instance_;
class MPCControllerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPCControllerConf> _instance;
} _MPCControllerConf_default_instance_;
}  // namespace latmpc
}  // namespace control
static void InitDefaultsscc_info_FilterConf_control_5fbase_2fmpc_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::latmpc::_FilterConf_default_instance_;
    new (ptr) ::control::latmpc::FilterConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::latmpc::FilterConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConf_control_5fbase_2fmpc_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterConf_control_5fbase_2fmpc_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_MPCControllerConf_control_5fbase_2fmpc_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::latmpc::_MPCControllerConf_default_instance_;
    new (ptr) ::control::latmpc::MPCControllerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::latmpc::MPCControllerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MPCControllerConf_control_5fbase_2fmpc_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MPCControllerConf_control_5fbase_2fmpc_5fcontroller_2eproto}, {
      &scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto.base,
      &scc_info_PidConf_control_5fbase_2fpid_5fconf_2eproto.base,
      &scc_info_LeadlagConf_control_5fbase_2fleadlag_5fconf_2eproto.base,
      &scc_info_FilterConf_control_5fbase_2fmpc_5fcontroller_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2fmpc_5fcontroller_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2fmpc_5fcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::latmpc::FilterConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::FilterConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::latmpc::FilterConf, cutoff_freq_),
  0,
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, cf_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, cr_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, mass_fl_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, mass_fr_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, mass_rl_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, mass_rr_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, eps_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, matrix_q_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, matrix_r_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, max_lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, standstill_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, brake_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, throttle_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, lat_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, heading_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, steer_weight_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, feedforwardterm_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, enable_mpc_feedforward_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, unconstrained_control_diff_limit_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, use_lqr_curvature_feedforward_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, use_preview_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, acc_lookup_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, use_lookup_acc_pid_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, use_pitch_angle_filter_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, enable_look_ahead_back_control_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, switch_speed_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, reverse_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, switch_speed_window_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, lookahead_station_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, lookback_station_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, lookahead_station_high_speed_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, lookback_station_high_speed_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, enable_reverse_leadlag_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, pitch_angle_filter_conf_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, enable_feedback_augment_on_high_speed_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, trajectory_transform_to_com_reverse_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, trajectory_transform_to_com_drive_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, enable_slope_offset_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, use_preview_reference_check_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, use_kinematic_model_),
  PROTOBUF_FIELD_OFFSET(::control::latmpc::MPCControllerConf, enable_navigation_mode_error_filter_),
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  ~0u,
  ~0u,
  15,
  16,
  21,
  17,
  18,
  19,
  20,
  0,
  1,
  2,
  3,
  22,
  26,
  23,
  24,
  4,
  25,
  30,
  31,
  27,
  5,
  28,
  29,
  34,
  35,
  36,
  37,
  32,
  6,
  33,
  38,
  39,
  40,
  41,
  42,
  43,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::control::latmpc::FilterConf)},
  { 7, 58, sizeof(::control::latmpc::MPCControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::latmpc::_FilterConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::latmpc::_MPCControllerConf_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2fmpc_5fcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!control_base/mpc_controller.proto\022\016con"
  "trol.latmpc\032&control_base/gain_scheduler"
  "_conf.proto\032\037control_base/leadlag_conf.p"
  "roto\032\033control_base/pid_conf.proto\"!\n\nFil"
  "terConf\022\023\n\013cutoff_freq\030\001 \001(\005\"\334\014\n\021MPCCont"
  "rollerConf\022\n\n\002ts\030\001 \001(\001\022\n\n\002cf\030\002 \001(\001\022\n\n\002cr"
  "\030\003 \001(\001\022\017\n\007mass_fl\030\004 \001(\005\022\017\n\007mass_fr\030\005 \001(\005"
  "\022\017\n\007mass_rl\030\006 \001(\005\022\017\n\007mass_rr\030\007 \001(\005\022\013\n\003ep"
  "s\030\010 \001(\001\022\020\n\010matrix_q\030\t \003(\001\022\020\n\010matrix_r\030\n "
  "\003(\001\022\023\n\013cutoff_freq\030\013 \001(\005\022\037\n\027mean_filter_"
  "window_size\030\014 \001(\005\022\025\n\rmax_iteration\030\r \001(\005"
  "\022 \n\030max_lateral_acceleration\030\016 \001(\001\022\037\n\027st"
  "andstill_acceleration\030\017 \001(\001\022\034\n\024brake_min"
  "imum_action\030\020 \001(\001\022\037\n\027throttle_minimum_ac"
  "tion\030\021 \001(\001\0226\n\026lat_err_gain_scheduler\030\022 \001"
  "(\0132\026.control.GainScheduler\022:\n\032heading_er"
  "r_gain_scheduler\030\023 \001(\0132\026.control.GainSch"
  "eduler\022;\n\033steer_weight_gain_scheduler\030\024 "
  "\001(\0132\026.control.GainScheduler\022>\n\036feedforwa"
  "rdterm_gain_scheduler\030\025 \001(\0132\026.control.Ga"
  "inScheduler\0222\n#enable_mpc_feedforward_co"
  "mpensation\030\027 \001(\010:\005false\022(\n unconstrained"
  "_control_diff_limit\030\030 \001(\001\022%\n\035use_lqr_cur"
  "vature_feedforward\030\031 \001(\010\022\023\n\013use_preview\030"
  "\032 \001(\010\022-\n\023acc_lookup_pid_conf\030\033 \001(\0132\020.con"
  "trol.PidConf\022\032\n\022use_lookup_acc_pid\030\034 \001(\010"
  "\022\036\n\026use_pitch_angle_filter\030\035 \001(\010\022-\n\036enab"
  "le_look_ahead_back_control\030\036 \001(\010:\005false\022"
  "\024\n\014switch_speed\030\037 \001(\001\0222\n\024reverse_leadlag"
  "_conf\030  \001(\0132\024.control.LeadlagConf\022\036\n\023swi"
  "tch_speed_window\030! \001(\001:\0010\022\026\n\016preview_win"
  "dow\030\" \001(\005\022\034\n\021lookahead_station\030# \001(\001:\0010\022"
  "\033\n\020lookback_station\030$ \001(\001:\0010\022\'\n\034lookahea"
  "d_station_high_speed\030% \001(\001:\0010\022&\n\033lookbac"
  "k_station_high_speed\030& \001(\001:\0010\0222\n#enable_"
  "reverse_leadlag_compensation\030\' \001(\010:\005fals"
  "e\022;\n\027pitch_angle_filter_conf\030( \001(\0132\032.con"
  "trol.latmpc.FilterConf\0224\n%enable_feedbac"
  "k_augment_on_high_speed\030) \001(\010:\005false\0222\n#"
  "trajectory_transform_to_com_reverse\030* \001("
  "\010:\005false\0220\n!trajectory_transform_to_com_"
  "drive\030+ \001(\010:\005false\022\"\n\023enable_slope_offse"
  "t\030, \001(\010:\005false\022*\n\033use_preview_reference_"
  "check\030- \001(\010:\005false\022\033\n\023use_kinematic_mode"
  "l\030. \001(\010\0222\n#enable_navigation_mode_error_"
  "filter\030/ \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_deps[3] = {
  &::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
  &::descriptor_table_control_5fbase_2fleadlag_5fconf_2eproto,
  &::descriptor_table_control_5fbase_2fpid_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_sccs[2] = {
  &scc_info_FilterConf_control_5fbase_2fmpc_5fcontroller_2eproto.base,
  &scc_info_MPCControllerConf_control_5fbase_2fmpc_5fcontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2fmpc_5fcontroller_2eproto, "control_base/mpc_controller.proto", 1819,
  &descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_once, descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_sccs, descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_control_5fbase_2fmpc_5fcontroller_2eproto::offsets,
  file_level_metadata_control_5fbase_2fmpc_5fcontroller_2eproto, 2, file_level_enum_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto, file_level_service_descriptors_control_5fbase_2fmpc_5fcontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2fmpc_5fcontroller_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2fmpc_5fcontroller_2eproto)), true);
namespace control {
namespace latmpc {

// ===================================================================

void FilterConf::InitAsDefaultInstance() {
}
class FilterConf::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterConf>()._has_bits_);
  static void set_has_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FilterConf::FilterConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.latmpc.FilterConf)
}
FilterConf::FilterConf(const FilterConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cutoff_freq_ = from.cutoff_freq_;
  // @@protoc_insertion_point(copy_constructor:control.latmpc.FilterConf)
}

void FilterConf::SharedCtor() {
  cutoff_freq_ = 0;
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:control.latmpc.FilterConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilterConf::ArenaDtor(void* object) {
  FilterConf* _this = reinterpret_cast< FilterConf* >(object);
  (void)_this;
}
void FilterConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterConf& FilterConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterConf_control_5fbase_2fmpc_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.latmpc.FilterConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cutoff_freq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cutoff_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cutoff_freq(&has_bits);
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.latmpc.FilterConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cutoff_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.latmpc.FilterConf)
  return target;
}

size_t FilterConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.latmpc.FilterConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 cutoff_freq = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cutoff_freq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.latmpc.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.latmpc.FilterConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.latmpc.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.latmpc.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cutoff_freq()) {
    _internal_set_cutoff_freq(from._internal_cutoff_freq());
  }
}

void FilterConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.latmpc.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.latmpc.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {
  return true;
}

void FilterConf::InternalSwap(FilterConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cutoff_freq_, other->cutoff_freq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPCControllerConf::InitAsDefaultInstance() {
  ::control::latmpc::_MPCControllerConf_default_instance_._instance.get_mutable()->lat_err_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::latmpc::_MPCControllerConf_default_instance_._instance.get_mutable()->heading_err_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::latmpc::_MPCControllerConf_default_instance_._instance.get_mutable()->steer_weight_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::latmpc::_MPCControllerConf_default_instance_._instance.get_mutable()->feedforwardterm_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::latmpc::_MPCControllerConf_default_instance_._instance.get_mutable()->acc_lookup_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::latmpc::_MPCControllerConf_default_instance_._instance.get_mutable()->reverse_leadlag_conf_ = const_cast< ::control::LeadlagConf*>(
      ::control::LeadlagConf::internal_default_instance());
  ::control::latmpc::_MPCControllerConf_default_instance_._instance.get_mutable()->pitch_angle_filter_conf_ = const_cast< ::control::latmpc::FilterConf*>(
      ::control::latmpc::FilterConf::internal_default_instance());
}
class MPCControllerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<MPCControllerConf>()._has_bits_);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cf(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mass_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mass_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mass_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mass_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_mean_filter_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_standstill_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_brake_minimum_action(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_throttle_minimum_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::control::GainScheduler& lat_err_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_lat_err_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::GainScheduler& heading_err_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_heading_err_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::GainScheduler& steer_weight_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_steer_weight_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::GainScheduler& feedforwardterm_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_feedforwardterm_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_mpc_feedforward_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_unconstrained_control_diff_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_use_lqr_curvature_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_use_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::control::PidConf& acc_lookup_pid_conf(const MPCControllerConf* msg);
  static void set_has_acc_lookup_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_lookup_acc_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_use_pitch_angle_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_enable_look_ahead_back_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_switch_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::control::LeadlagConf& reverse_leadlag_conf(const MPCControllerConf* msg);
  static void set_has_reverse_leadlag_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_switch_speed_window(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_preview_window(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_lookahead_station(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_lookback_station(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_lookahead_station_high_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_lookback_station_high_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_enable_reverse_leadlag_compensation(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::control::latmpc::FilterConf& pitch_angle_filter_conf(const MPCControllerConf* msg);
  static void set_has_pitch_angle_filter_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_feedback_augment_on_high_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_trajectory_transform_to_com_reverse(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_trajectory_transform_to_com_drive(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_enable_slope_offset(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_use_preview_reference_check(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_use_kinematic_model(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_enable_navigation_mode_error_filter(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
};

const ::control::GainScheduler&
MPCControllerConf::_Internal::lat_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->lat_err_gain_scheduler_;
}
const ::control::GainScheduler&
MPCControllerConf::_Internal::heading_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->heading_err_gain_scheduler_;
}
const ::control::GainScheduler&
MPCControllerConf::_Internal::steer_weight_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->steer_weight_gain_scheduler_;
}
const ::control::GainScheduler&
MPCControllerConf::_Internal::feedforwardterm_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->feedforwardterm_gain_scheduler_;
}
const ::control::PidConf&
MPCControllerConf::_Internal::acc_lookup_pid_conf(const MPCControllerConf* msg) {
  return *msg->acc_lookup_pid_conf_;
}
const ::control::LeadlagConf&
MPCControllerConf::_Internal::reverse_leadlag_conf(const MPCControllerConf* msg) {
  return *msg->reverse_leadlag_conf_;
}
const ::control::latmpc::FilterConf&
MPCControllerConf::_Internal::pitch_angle_filter_conf(const MPCControllerConf* msg) {
  return *msg->pitch_angle_filter_conf_;
}
void MPCControllerConf::clear_lat_err_gain_scheduler() {
  if (lat_err_gain_scheduler_ != nullptr) lat_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MPCControllerConf::clear_heading_err_gain_scheduler() {
  if (heading_err_gain_scheduler_ != nullptr) heading_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MPCControllerConf::clear_steer_weight_gain_scheduler() {
  if (steer_weight_gain_scheduler_ != nullptr) steer_weight_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MPCControllerConf::clear_feedforwardterm_gain_scheduler() {
  if (feedforwardterm_gain_scheduler_ != nullptr) feedforwardterm_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void MPCControllerConf::clear_acc_lookup_pid_conf() {
  if (acc_lookup_pid_conf_ != nullptr) acc_lookup_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void MPCControllerConf::clear_reverse_leadlag_conf() {
  if (reverse_leadlag_conf_ != nullptr) reverse_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
MPCControllerConf::MPCControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_q_(arena),
  matrix_r_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.latmpc.MPCControllerConf)
}
MPCControllerConf::MPCControllerConf(const MPCControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matrix_q_(from.matrix_q_),
      matrix_r_(from.matrix_r_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::control::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::control::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_steer_weight_gain_scheduler()) {
    steer_weight_gain_scheduler_ = new ::control::GainScheduler(*from.steer_weight_gain_scheduler_);
  } else {
    steer_weight_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_feedforwardterm_gain_scheduler()) {
    feedforwardterm_gain_scheduler_ = new ::control::GainScheduler(*from.feedforwardterm_gain_scheduler_);
  } else {
    feedforwardterm_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_acc_lookup_pid_conf()) {
    acc_lookup_pid_conf_ = new ::control::PidConf(*from.acc_lookup_pid_conf_);
  } else {
    acc_lookup_pid_conf_ = nullptr;
  }
  if (from._internal_has_reverse_leadlag_conf()) {
    reverse_leadlag_conf_ = new ::control::LeadlagConf(*from.reverse_leadlag_conf_);
  } else {
    reverse_leadlag_conf_ = nullptr;
  }
  if (from._internal_has_pitch_angle_filter_conf()) {
    pitch_angle_filter_conf_ = new ::control::latmpc::FilterConf(*from.pitch_angle_filter_conf_);
  } else {
    pitch_angle_filter_conf_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_navigation_mode_error_filter_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(enable_navigation_mode_error_filter_));
  // @@protoc_insertion_point(copy_constructor:control.latmpc.MPCControllerConf)
}

void MPCControllerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPCControllerConf_control_5fbase_2fmpc_5fcontroller_2eproto.base);
  ::memset(&lat_err_gain_scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_navigation_mode_error_filter_) -
      reinterpret_cast<char*>(&lat_err_gain_scheduler_)) + sizeof(enable_navigation_mode_error_filter_));
}

MPCControllerConf::~MPCControllerConf() {
  // @@protoc_insertion_point(destructor:control.latmpc.MPCControllerConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MPCControllerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lat_err_gain_scheduler_;
  if (this != internal_default_instance()) delete heading_err_gain_scheduler_;
  if (this != internal_default_instance()) delete steer_weight_gain_scheduler_;
  if (this != internal_default_instance()) delete feedforwardterm_gain_scheduler_;
  if (this != internal_default_instance()) delete acc_lookup_pid_conf_;
  if (this != internal_default_instance()) delete reverse_leadlag_conf_;
  if (this != internal_default_instance()) delete pitch_angle_filter_conf_;
}

void MPCControllerConf::ArenaDtor(void* object) {
  MPCControllerConf* _this = reinterpret_cast< MPCControllerConf* >(object);
  (void)_this;
}
void MPCControllerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MPCControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPCControllerConf& MPCControllerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPCControllerConf_control_5fbase_2fmpc_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void MPCControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.latmpc.MPCControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  matrix_r_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_err_gain_scheduler_ != nullptr);
      lat_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(heading_err_gain_scheduler_ != nullptr);
      heading_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(steer_weight_gain_scheduler_ != nullptr);
      steer_weight_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(feedforwardterm_gain_scheduler_ != nullptr);
      feedforwardterm_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(acc_lookup_pid_conf_ != nullptr);
      acc_lookup_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(reverse_leadlag_conf_ != nullptr);
      reverse_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(pitch_angle_filter_conf_ != nullptr);
      pitch_angle_filter_conf_->Clear();
    }
  }
  ts_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cutoff_freq_) -
        reinterpret_cast<char*>(&cf_)) + sizeof(cutoff_freq_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&mean_filter_window_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_lqr_curvature_feedforward_) -
        reinterpret_cast<char*>(&mean_filter_window_size_)) + sizeof(use_lqr_curvature_feedforward_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&use_preview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_look_ahead_back_control_) -
        reinterpret_cast<char*>(&use_preview_)) + sizeof(enable_look_ahead_back_control_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&enable_reverse_leadlag_compensation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trajectory_transform_to_com_drive_) -
        reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_)) + sizeof(trajectory_transform_to_com_drive_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&enable_slope_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_navigation_mode_error_filter_) -
        reinterpret_cast<char*>(&enable_slope_offset_)) + sizeof(enable_navigation_mode_error_filter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPCControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ts(&_has_bits_);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cf(&_has_bits_);
          cf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cr(&_has_bits_);
          cr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_fl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mass_fl(&_has_bits_);
          mass_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_fr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mass_fr(&_has_bits_);
          mass_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_rl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mass_rl(&_has_bits_);
          mass_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_rr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mass_rr(&_has_bits_);
          mass_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double eps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_eps(&_has_bits_);
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_q = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<73>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_r = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matrix_r(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_r(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cutoff_freq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cutoff_freq(&_has_bits_);
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mean_filter_window_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_mean_filter_window_size(&_has_bits_);
          mean_filter_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_iteration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_iteration(&_has_bits_);
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_lateral_acceleration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_max_lateral_acceleration(&_has_bits_);
          max_lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double standstill_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_standstill_acceleration(&_has_bits_);
          standstill_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_minimum_action = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_brake_minimum_action(&_has_bits_);
          brake_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_minimum_action = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_throttle_minimum_action(&_has_bits_);
          throttle_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler lat_err_gain_scheduler = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler heading_err_gain_scheduler = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_heading_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_weight_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_feedforwardterm_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enable_mpc_feedforward_compensation(&_has_bits_);
          enable_mpc_feedforward_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double unconstrained_control_diff_limit = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_unconstrained_control_diff_limit(&_has_bits_);
          unconstrained_control_diff_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_lqr_curvature_feedforward = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_use_lqr_curvature_feedforward(&_has_bits_);
          use_lqr_curvature_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_preview = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_use_preview(&_has_bits_);
          use_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf acc_lookup_pid_conf = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_lookup_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_lookup_acc_pid = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_use_lookup_acc_pid(&_has_bits_);
          use_lookup_acc_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_pitch_angle_filter = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_use_pitch_angle_filter(&_has_bits_);
          use_pitch_angle_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_look_ahead_back_control = 30 [default = false];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_enable_look_ahead_back_control(&_has_bits_);
          enable_look_ahead_back_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double switch_speed = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_switch_speed(&_has_bits_);
          switch_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.LeadlagConf reverse_leadlag_conf = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_leadlag_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double switch_speed_window = 33 [default = 0];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_switch_speed_window(&_has_bits_);
          switch_speed_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 preview_window = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preview_window(&_has_bits_);
          preview_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lookahead_station = 35 [default = 0];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lookahead_station(&_has_bits_);
          lookahead_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lookback_station = 36 [default = 0];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lookback_station(&_has_bits_);
          lookback_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lookahead_station_high_speed = 37 [default = 0];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_lookahead_station_high_speed(&_has_bits_);
          lookahead_station_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lookback_station_high_speed = 38 [default = 0];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lookback_station_high_speed(&_has_bits_);
          lookback_station_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_reverse_leadlag_compensation = 39 [default = false];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enable_reverse_leadlag_compensation(&_has_bits_);
          enable_reverse_leadlag_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pitch_angle_filter_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enable_feedback_augment_on_high_speed(&_has_bits_);
          enable_feedback_augment_on_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trajectory_transform_to_com_reverse = 42 [default = false];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_trajectory_transform_to_com_reverse(&_has_bits_);
          trajectory_transform_to_com_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trajectory_transform_to_com_drive = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_trajectory_transform_to_com_drive(&_has_bits_);
          trajectory_transform_to_com_drive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_slope_offset = 44 [default = false];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_enable_slope_offset(&_has_bits_);
          enable_slope_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_preview_reference_check = 45 [default = false];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_use_preview_reference_check(&_has_bits_);
          use_preview_reference_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_kinematic_model = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_use_kinematic_model(&_has_bits_);
          use_kinematic_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_navigation_mode_error_filter = 47 [default = false];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_enable_navigation_mode_error_filter(&_has_bits_);
          enable_navigation_mode_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPCControllerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.latmpc.MPCControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ts(), target);
  }

  // optional double cf = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cf(), target);
  }

  // optional double cr = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cr(), target);
  }

  // optional int32 mass_fl = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mass_fl(), target);
  }

  // optional int32 mass_fr = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mass_fr(), target);
  }

  // optional int32 mass_rl = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mass_rl(), target);
  }

  // optional int32 mass_rr = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mass_rr(), target);
  }

  // optional double eps = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_eps(), target);
  }

  // repeated double matrix_q = 9;
  for (int i = 0, n = this->_internal_matrix_q_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_matrix_q(i), target);
  }

  // repeated double matrix_r = 10;
  for (int i = 0, n = this->_internal_matrix_r_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_matrix_r(i), target);
  }

  // optional int32 cutoff_freq = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_mean_filter_window_size(), target);
  }

  // optional int32 max_iteration = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_iteration(), target);
  }

  // optional double max_lateral_acceleration = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_lateral_acceleration(), target);
  }

  // optional double standstill_acceleration = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_standstill_acceleration(), target);
  }

  // optional double brake_minimum_action = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_brake_minimum_action(), target);
  }

  // optional double throttle_minimum_action = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_throttle_minimum_action(), target);
  }

  // optional .control.GainScheduler lat_err_gain_scheduler = 18;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::lat_err_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler heading_err_gain_scheduler = 19;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::heading_err_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::steer_weight_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::feedforwardterm_gain_scheduler(this), target, stream);
  }

  // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_enable_mpc_feedforward_compensation(), target);
  }

  // optional double unconstrained_control_diff_limit = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_unconstrained_control_diff_limit(), target);
  }

  // optional bool use_lqr_curvature_feedforward = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_use_lqr_curvature_feedforward(), target);
  }

  // optional bool use_preview = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_use_preview(), target);
  }

  // optional .control.PidConf acc_lookup_pid_conf = 27;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::acc_lookup_pid_conf(this), target, stream);
  }

  // optional bool use_lookup_acc_pid = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_use_lookup_acc_pid(), target);
  }

  // optional bool use_pitch_angle_filter = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_use_pitch_angle_filter(), target);
  }

  // optional bool enable_look_ahead_back_control = 30 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_enable_look_ahead_back_control(), target);
  }

  // optional double switch_speed = 31;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_switch_speed(), target);
  }

  // optional .control.LeadlagConf reverse_leadlag_conf = 32;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::reverse_leadlag_conf(this), target, stream);
  }

  // optional double switch_speed_window = 33 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_switch_speed_window(), target);
  }

  // optional int32 preview_window = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_preview_window(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double lookahead_station = 35 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_lookahead_station(), target);
  }

  // optional double lookback_station = 36 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_lookback_station(), target);
  }

  // optional double lookahead_station_high_speed = 37 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_lookahead_station_high_speed(), target);
  }

  // optional double lookback_station_high_speed = 38 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_lookback_station_high_speed(), target);
  }

  // optional bool enable_reverse_leadlag_compensation = 39 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::pitch_angle_filter_conf(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_enable_feedback_augment_on_high_speed(), target);
  }

  // optional bool trajectory_transform_to_com_reverse = 42 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_trajectory_transform_to_com_reverse(), target);
  }

  // optional bool trajectory_transform_to_com_drive = 43 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_trajectory_transform_to_com_drive(), target);
  }

  // optional bool enable_slope_offset = 44 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_enable_slope_offset(), target);
  }

  // optional bool use_preview_reference_check = 45 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_use_preview_reference_check(), target);
  }

  // optional bool use_kinematic_model = 46;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_use_kinematic_model(), target);
  }

  // optional bool enable_navigation_mode_error_filter = 47 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_enable_navigation_mode_error_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.latmpc.MPCControllerConf)
  return target;
}

size_t MPCControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.latmpc.MPCControllerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_q_size());
    total_size += data_size;
  }

  // repeated double matrix_r = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_r_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_r_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.GainScheduler lat_err_gain_scheduler = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_err_gain_scheduler_);
    }

    // optional .control.GainScheduler heading_err_gain_scheduler = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heading_err_gain_scheduler_);
    }

    // optional .control.GainScheduler steer_weight_gain_scheduler = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steer_weight_gain_scheduler_);
    }

    // optional .control.GainScheduler feedforwardterm_gain_scheduler = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feedforwardterm_gain_scheduler_);
    }

    // optional .control.PidConf acc_lookup_pid_conf = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acc_lookup_pid_conf_);
    }

    // optional .control.LeadlagConf reverse_leadlag_conf = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_leadlag_conf_);
    }

    // optional .control.latmpc.FilterConf pitch_angle_filter_conf = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pitch_angle_filter_conf_);
    }

    // optional double ts = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double cf = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double cr = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 mass_fl = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_fl());
    }

    // optional int32 mass_fr = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_fr());
    }

    // optional int32 mass_rl = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_rl());
    }

    // optional int32 mass_rr = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_rr());
    }

    // optional double eps = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int32 cutoff_freq = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cutoff_freq());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 mean_filter_window_size = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mean_filter_window_size());
    }

    // optional double max_lateral_acceleration = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double standstill_acceleration = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double brake_minimum_action = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double throttle_minimum_action = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_iteration = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_iteration());
    }

    // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool use_lqr_curvature_feedforward = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool use_preview = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_lookup_acc_pid = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional double unconstrained_control_diff_limit = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double switch_speed = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double switch_speed_window = 33 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional int32 preview_window = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_preview_window());
    }

    // optional bool use_pitch_angle_filter = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_look_ahead_back_control = 30 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_reverse_leadlag_compensation = 39 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool enable_feedback_augment_on_high_speed = 41 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional double lookahead_station = 35 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double lookback_station = 36 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double lookahead_station_high_speed = 37 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double lookback_station_high_speed = 38 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional bool trajectory_transform_to_com_reverse = 42 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool trajectory_transform_to_com_drive = 43 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool enable_slope_offset = 44 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool use_preview_reference_check = 45 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool use_kinematic_model = 46;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool enable_navigation_mode_error_filter = 47 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPCControllerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.latmpc.MPCControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const MPCControllerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPCControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.latmpc.MPCControllerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.latmpc.MPCControllerConf)
    MergeFrom(*source);
  }
}

void MPCControllerConf::MergeFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.latmpc.MPCControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  matrix_r_.MergeFrom(from.matrix_r_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lat_err_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_lat_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_heading_err_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_heading_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_steer_weight_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_steer_weight_gain_scheduler());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_feedforwardterm_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_feedforwardterm_gain_scheduler());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_acc_lookup_pid_conf()->::control::PidConf::MergeFrom(from._internal_acc_lookup_pid_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_reverse_leadlag_conf()->::control::LeadlagConf::MergeFrom(from._internal_reverse_leadlag_conf());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_pitch_angle_filter_conf()->::control::latmpc::FilterConf::MergeFrom(from._internal_pitch_angle_filter_conf());
    }
    if (cached_has_bits & 0x00000080u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cf_ = from.cf_;
    }
    if (cached_has_bits & 0x00000200u) {
      cr_ = from.cr_;
    }
    if (cached_has_bits & 0x00000400u) {
      mass_fl_ = from.mass_fl_;
    }
    if (cached_has_bits & 0x00000800u) {
      mass_fr_ = from.mass_fr_;
    }
    if (cached_has_bits & 0x00001000u) {
      mass_rl_ = from.mass_rl_;
    }
    if (cached_has_bits & 0x00002000u) {
      mass_rr_ = from.mass_rr_;
    }
    if (cached_has_bits & 0x00004000u) {
      eps_ = from.eps_;
    }
    if (cached_has_bits & 0x00008000u) {
      cutoff_freq_ = from.cutoff_freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_lateral_acceleration_ = from.max_lateral_acceleration_;
    }
    if (cached_has_bits & 0x00040000u) {
      standstill_acceleration_ = from.standstill_acceleration_;
    }
    if (cached_has_bits & 0x00080000u) {
      brake_minimum_action_ = from.brake_minimum_action_;
    }
    if (cached_has_bits & 0x00100000u) {
      throttle_minimum_action_ = from.throttle_minimum_action_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_iteration_ = from.max_iteration_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_mpc_feedforward_compensation_ = from.enable_mpc_feedforward_compensation_;
    }
    if (cached_has_bits & 0x00800000u) {
      use_lqr_curvature_feedforward_ = from.use_lqr_curvature_feedforward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      use_preview_ = from.use_preview_;
    }
    if (cached_has_bits & 0x02000000u) {
      use_lookup_acc_pid_ = from.use_lookup_acc_pid_;
    }
    if (cached_has_bits & 0x04000000u) {
      unconstrained_control_diff_limit_ = from.unconstrained_control_diff_limit_;
    }
    if (cached_has_bits & 0x08000000u) {
      switch_speed_ = from.switch_speed_;
    }
    if (cached_has_bits & 0x10000000u) {
      switch_speed_window_ = from.switch_speed_window_;
    }
    if (cached_has_bits & 0x20000000u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x40000000u) {
      use_pitch_angle_filter_ = from.use_pitch_angle_filter_;
    }
    if (cached_has_bits & 0x80000000u) {
      enable_look_ahead_back_control_ = from.enable_look_ahead_back_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_reverse_leadlag_compensation_ = from.enable_reverse_leadlag_compensation_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_feedback_augment_on_high_speed_ = from.enable_feedback_augment_on_high_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      lookahead_station_ = from.lookahead_station_;
    }
    if (cached_has_bits & 0x00000008u) {
      lookback_station_ = from.lookback_station_;
    }
    if (cached_has_bits & 0x00000010u) {
      lookahead_station_high_speed_ = from.lookahead_station_high_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      lookback_station_high_speed_ = from.lookback_station_high_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      trajectory_transform_to_com_reverse_ = from.trajectory_transform_to_com_reverse_;
    }
    if (cached_has_bits & 0x00000080u) {
      trajectory_transform_to_com_drive_ = from.trajectory_transform_to_com_drive_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      enable_slope_offset_ = from.enable_slope_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_preview_reference_check_ = from.use_preview_reference_check_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_kinematic_model_ = from.use_kinematic_model_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_navigation_mode_error_filter_ = from.enable_navigation_mode_error_filter_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void MPCControllerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.latmpc.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPCControllerConf::CopyFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.latmpc.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPCControllerConf::IsInitialized() const {
  return true;
}

void MPCControllerConf::InternalSwap(MPCControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  matrix_q_.InternalSwap(&other->matrix_q_);
  matrix_r_.InternalSwap(&other->matrix_r_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPCControllerConf, enable_navigation_mode_error_filter_)
      + sizeof(MPCControllerConf::enable_navigation_mode_error_filter_)
      - PROTOBUF_FIELD_OFFSET(MPCControllerConf, lat_err_gain_scheduler_)>(
          reinterpret_cast<char*>(&lat_err_gain_scheduler_),
          reinterpret_cast<char*>(&other->lat_err_gain_scheduler_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPCControllerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace latmpc
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::latmpc::FilterConf* Arena::CreateMaybeMessage< ::control::latmpc::FilterConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::latmpc::FilterConf >(arena);
}
template<> PROTOBUF_NOINLINE ::control::latmpc::MPCControllerConf* Arena::CreateMaybeMessage< ::control::latmpc::MPCControllerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::latmpc::MPCControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/calibration_table.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcalibration_5ftable_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcalibration_5ftable_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcalibration_5ftable_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fcalibration_5ftable_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2fcalibration_5ftable_2eproto;
namespace control {
class ControlCalibrationInfo;
struct ControlCalibrationInfoDefaultTypeInternal;
extern ControlCalibrationInfoDefaultTypeInternal _ControlCalibrationInfo_default_instance_;
class calibration_table;
struct calibration_tableDefaultTypeInternal;
extern calibration_tableDefaultTypeInternal _calibration_table_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {

// ===================================================================


// -------------------------------------------------------------------

class ControlCalibrationInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.ControlCalibrationInfo) */ {
 public:
  inline ControlCalibrationInfo() : ControlCalibrationInfo(nullptr) {}
  ~ControlCalibrationInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControlCalibrationInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControlCalibrationInfo(const ControlCalibrationInfo& from) : ControlCalibrationInfo(nullptr, from) {}
  inline ControlCalibrationInfo(ControlCalibrationInfo&& from) noexcept
      : ControlCalibrationInfo(nullptr, std::move(from)) {}
  inline ControlCalibrationInfo& operator=(const ControlCalibrationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCalibrationInfo& operator=(ControlCalibrationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCalibrationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCalibrationInfo* internal_default_instance() {
    return reinterpret_cast<const ControlCalibrationInfo*>(
        &_ControlCalibrationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ControlCalibrationInfo& a, ControlCalibrationInfo& b) { a.Swap(&b); }
  inline void Swap(ControlCalibrationInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCalibrationInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlCalibrationInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ControlCalibrationInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlCalibrationInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControlCalibrationInfo& from) { ControlCalibrationInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControlCalibrationInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.ControlCalibrationInfo"; }

 protected:
  explicit ControlCalibrationInfo(::google::protobuf::Arena* arena);
  ControlCalibrationInfo(::google::protobuf::Arena* arena, const ControlCalibrationInfo& from);
  ControlCalibrationInfo(::google::protobuf::Arena* arena, ControlCalibrationInfo&& from) noexcept
      : ControlCalibrationInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpeedFieldNumber = 1,
    kAccelerationFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // optional double speed = 1;
  bool has_speed() const;
  void clear_speed() ;
  double speed() const;
  void set_speed(double value);

  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);

  public:
  // optional double acceleration = 2;
  bool has_acceleration() const;
  void clear_acceleration() ;
  double acceleration() const;
  void set_acceleration(double value);

  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);

  public:
  // optional double command = 3;
  bool has_command() const;
  void clear_command() ;
  double command() const;
  void set_command(double value);

  private:
  double _internal_command() const;
  void _internal_set_command(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.ControlCalibrationInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ControlCalibrationInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControlCalibrationInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double speed_;
    double acceleration_;
    double command_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcalibration_5ftable_2eproto;
};
// -------------------------------------------------------------------

class calibration_table final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.calibration_table) */ {
 public:
  inline calibration_table() : calibration_table(nullptr) {}
  ~calibration_table() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR calibration_table(
      ::google::protobuf::internal::ConstantInitialized);

  inline calibration_table(const calibration_table& from) : calibration_table(nullptr, from) {}
  inline calibration_table(calibration_table&& from) noexcept
      : calibration_table(nullptr, std::move(from)) {}
  inline calibration_table& operator=(const calibration_table& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibration_table& operator=(calibration_table&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const calibration_table& default_instance() {
    return *internal_default_instance();
  }
  static inline const calibration_table* internal_default_instance() {
    return reinterpret_cast<const calibration_table*>(
        &_calibration_table_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(calibration_table& a, calibration_table& b) { a.Swap(&b); }
  inline void Swap(calibration_table* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibration_table* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  calibration_table* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<calibration_table>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const calibration_table& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const calibration_table& from) { calibration_table::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(calibration_table* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.calibration_table"; }

 protected:
  explicit calibration_table(::google::protobuf::Arena* arena);
  calibration_table(::google::protobuf::Arena* arena, const calibration_table& from);
  calibration_table(::google::protobuf::Arena* arena, calibration_table&& from) noexcept
      : calibration_table(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationFieldNumber = 1,
  };
  // repeated .control.ControlCalibrationInfo calibration = 1;
  int calibration_size() const;
  private:
  int _internal_calibration_size() const;

  public:
  void clear_calibration() ;
  ::control::ControlCalibrationInfo* mutable_calibration(int index);
  ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>* mutable_calibration();

  private:
  const ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>& _internal_calibration() const;
  ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>* _internal_mutable_calibration();
  public:
  const ::control::ControlCalibrationInfo& calibration(int index) const;
  ::control::ControlCalibrationInfo* add_calibration();
  const ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>& calibration() const;
  // @@protoc_insertion_point(class_scope:control.calibration_table)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_calibration_table_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const calibration_table& from_msg);
    ::google::protobuf::RepeatedPtrField< ::control::ControlCalibrationInfo > calibration_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2fcalibration_5ftable_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// calibration_table

// repeated .control.ControlCalibrationInfo calibration = 1;
inline int calibration_table::_internal_calibration_size() const {
  return _internal_calibration().size();
}
inline int calibration_table::calibration_size() const {
  return _internal_calibration_size();
}
inline void calibration_table::clear_calibration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibration_.Clear();
}
inline ::control::ControlCalibrationInfo* calibration_table::mutable_calibration(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:control.calibration_table.calibration)
  return _internal_mutable_calibration()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>* calibration_table::mutable_calibration()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:control.calibration_table.calibration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_calibration();
}
inline const ::control::ControlCalibrationInfo& calibration_table::calibration(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.calibration_table.calibration)
  return _internal_calibration().Get(index);
}
inline ::control::ControlCalibrationInfo* calibration_table::add_calibration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::control::ControlCalibrationInfo* _add = _internal_mutable_calibration()->Add();
  // @@protoc_insertion_point(field_add:control.calibration_table.calibration)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>& calibration_table::calibration() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:control.calibration_table.calibration)
  return _internal_calibration();
}
inline const ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>&
calibration_table::_internal_calibration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.calibration_;
}
inline ::google::protobuf::RepeatedPtrField<::control::ControlCalibrationInfo>*
calibration_table::_internal_mutable_calibration() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.calibration_;
}

// -------------------------------------------------------------------

// ControlCalibrationInfo

// optional double speed = 1;
inline bool ControlCalibrationInfo::has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ControlCalibrationInfo::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ControlCalibrationInfo::speed() const {
  // @@protoc_insertion_point(field_get:control.ControlCalibrationInfo.speed)
  return _internal_speed();
}
inline void ControlCalibrationInfo::set_speed(double value) {
  _internal_set_speed(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.ControlCalibrationInfo.speed)
}
inline double ControlCalibrationInfo::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_;
}
inline void ControlCalibrationInfo::_internal_set_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = value;
}

// optional double acceleration = 2;
inline bool ControlCalibrationInfo::has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ControlCalibrationInfo::clear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ControlCalibrationInfo::acceleration() const {
  // @@protoc_insertion_point(field_get:control.ControlCalibrationInfo.acceleration)
  return _internal_acceleration();
}
inline void ControlCalibrationInfo::set_acceleration(double value) {
  _internal_set_acceleration(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.ControlCalibrationInfo.acceleration)
}
inline double ControlCalibrationInfo::_internal_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_;
}
inline void ControlCalibrationInfo::_internal_set_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_ = value;
}

// optional double command = 3;
inline bool ControlCalibrationInfo::has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ControlCalibrationInfo::clear_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ControlCalibrationInfo::command() const {
  // @@protoc_insertion_point(field_get:control.ControlCalibrationInfo.command)
  return _internal_command();
}
inline void ControlCalibrationInfo::set_command(double value) {
  _internal_set_command(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.ControlCalibrationInfo.command)
}
inline double ControlCalibrationInfo::_internal_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_;
}
inline void ControlCalibrationInfo::_internal_set_command(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcalibration_5ftable_2eproto_2epb_2eh

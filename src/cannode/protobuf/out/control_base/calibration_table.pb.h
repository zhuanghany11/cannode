// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/calibration_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcalibration_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcalibration_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fcalibration_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2fcalibration_5ftable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2fcalibration_5ftable_2eproto;
namespace control {
class ControlCalibrationInfo;
class ControlCalibrationInfoDefaultTypeInternal;
extern ControlCalibrationInfoDefaultTypeInternal _ControlCalibrationInfo_default_instance_;
class calibration_table;
class calibration_tableDefaultTypeInternal;
extern calibration_tableDefaultTypeInternal _calibration_table_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::ControlCalibrationInfo* Arena::CreateMaybeMessage<::control::ControlCalibrationInfo>(Arena*);
template<> ::control::calibration_table* Arena::CreateMaybeMessage<::control::calibration_table>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class calibration_table PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.calibration_table) */ {
 public:
  inline calibration_table() : calibration_table(nullptr) {};
  virtual ~calibration_table();

  calibration_table(const calibration_table& from);
  calibration_table(calibration_table&& from) noexcept
    : calibration_table() {
    *this = ::std::move(from);
  }

  inline calibration_table& operator=(const calibration_table& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibration_table& operator=(calibration_table&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const calibration_table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const calibration_table* internal_default_instance() {
    return reinterpret_cast<const calibration_table*>(
               &_calibration_table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(calibration_table& a, calibration_table& b) {
    a.Swap(&b);
  }
  inline void Swap(calibration_table* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibration_table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline calibration_table* New() const final {
    return CreateMaybeMessage<calibration_table>(nullptr);
  }

  calibration_table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<calibration_table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const calibration_table& from);
  void MergeFrom(const calibration_table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(calibration_table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.calibration_table";
  }
  protected:
  explicit calibration_table(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fcalibration_5ftable_2eproto);
    return ::descriptor_table_control_5fbase_2fcalibration_5ftable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationFieldNumber = 1,
  };
  // repeated .control.ControlCalibrationInfo calibration = 1;
  int calibration_size() const;
  private:
  int _internal_calibration_size() const;
  public:
  void clear_calibration();
  ::control::ControlCalibrationInfo* mutable_calibration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::ControlCalibrationInfo >*
      mutable_calibration();
  private:
  const ::control::ControlCalibrationInfo& _internal_calibration(int index) const;
  ::control::ControlCalibrationInfo* _internal_add_calibration();
  public:
  const ::control::ControlCalibrationInfo& calibration(int index) const;
  ::control::ControlCalibrationInfo* add_calibration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::ControlCalibrationInfo >&
      calibration() const;

  // @@protoc_insertion_point(class_scope:control.calibration_table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::ControlCalibrationInfo > calibration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fbase_2fcalibration_5ftable_2eproto;
};
// -------------------------------------------------------------------

class ControlCalibrationInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.ControlCalibrationInfo) */ {
 public:
  inline ControlCalibrationInfo() : ControlCalibrationInfo(nullptr) {};
  virtual ~ControlCalibrationInfo();

  ControlCalibrationInfo(const ControlCalibrationInfo& from);
  ControlCalibrationInfo(ControlCalibrationInfo&& from) noexcept
    : ControlCalibrationInfo() {
    *this = ::std::move(from);
  }

  inline ControlCalibrationInfo& operator=(const ControlCalibrationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCalibrationInfo& operator=(ControlCalibrationInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlCalibrationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCalibrationInfo* internal_default_instance() {
    return reinterpret_cast<const ControlCalibrationInfo*>(
               &_ControlCalibrationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlCalibrationInfo& a, ControlCalibrationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCalibrationInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCalibrationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlCalibrationInfo* New() const final {
    return CreateMaybeMessage<ControlCalibrationInfo>(nullptr);
  }

  ControlCalibrationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlCalibrationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlCalibrationInfo& from);
  void MergeFrom(const ControlCalibrationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCalibrationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.ControlCalibrationInfo";
  }
  protected:
  explicit ControlCalibrationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2fcalibration_5ftable_2eproto);
    return ::descriptor_table_control_5fbase_2fcalibration_5ftable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kAccelerationFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // optional double speed = 1;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acceleration = 2;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // optional double command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  double command() const;
  void set_command(double value);
  private:
  double _internal_command() const;
  void _internal_set_command(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.ControlCalibrationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double speed_;
  double acceleration_;
  double command_;
  friend struct ::TableStruct_control_5fbase_2fcalibration_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// calibration_table

// repeated .control.ControlCalibrationInfo calibration = 1;
inline int calibration_table::_internal_calibration_size() const {
  return calibration_.size();
}
inline int calibration_table::calibration_size() const {
  return _internal_calibration_size();
}
inline void calibration_table::clear_calibration() {
  calibration_.Clear();
}
inline ::control::ControlCalibrationInfo* calibration_table::mutable_calibration(int index) {
  // @@protoc_insertion_point(field_mutable:control.calibration_table.calibration)
  return calibration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::ControlCalibrationInfo >*
calibration_table::mutable_calibration() {
  // @@protoc_insertion_point(field_mutable_list:control.calibration_table.calibration)
  return &calibration_;
}
inline const ::control::ControlCalibrationInfo& calibration_table::_internal_calibration(int index) const {
  return calibration_.Get(index);
}
inline const ::control::ControlCalibrationInfo& calibration_table::calibration(int index) const {
  // @@protoc_insertion_point(field_get:control.calibration_table.calibration)
  return _internal_calibration(index);
}
inline ::control::ControlCalibrationInfo* calibration_table::_internal_add_calibration() {
  return calibration_.Add();
}
inline ::control::ControlCalibrationInfo* calibration_table::add_calibration() {
  // @@protoc_insertion_point(field_add:control.calibration_table.calibration)
  return _internal_add_calibration();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::control::ControlCalibrationInfo >&
calibration_table::calibration() const {
  // @@protoc_insertion_point(field_list:control.calibration_table.calibration)
  return calibration_;
}

// -------------------------------------------------------------------

// ControlCalibrationInfo

// optional double speed = 1;
inline bool ControlCalibrationInfo::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlCalibrationInfo::has_speed() const {
  return _internal_has_speed();
}
inline void ControlCalibrationInfo::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ControlCalibrationInfo::_internal_speed() const {
  return speed_;
}
inline double ControlCalibrationInfo::speed() const {
  // @@protoc_insertion_point(field_get:control.ControlCalibrationInfo.speed)
  return _internal_speed();
}
inline void ControlCalibrationInfo::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  speed_ = value;
}
inline void ControlCalibrationInfo::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:control.ControlCalibrationInfo.speed)
}

// optional double acceleration = 2;
inline bool ControlCalibrationInfo::_internal_has_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlCalibrationInfo::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void ControlCalibrationInfo::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ControlCalibrationInfo::_internal_acceleration() const {
  return acceleration_;
}
inline double ControlCalibrationInfo::acceleration() const {
  // @@protoc_insertion_point(field_get:control.ControlCalibrationInfo.acceleration)
  return _internal_acceleration();
}
inline void ControlCalibrationInfo::_internal_set_acceleration(double value) {
  _has_bits_[0] |= 0x00000002u;
  acceleration_ = value;
}
inline void ControlCalibrationInfo::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:control.ControlCalibrationInfo.acceleration)
}

// optional double command = 3;
inline bool ControlCalibrationInfo::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlCalibrationInfo::has_command() const {
  return _internal_has_command();
}
inline void ControlCalibrationInfo::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ControlCalibrationInfo::_internal_command() const {
  return command_;
}
inline double ControlCalibrationInfo::command() const {
  // @@protoc_insertion_point(field_get:control.ControlCalibrationInfo.command)
  return _internal_command();
}
inline void ControlCalibrationInfo::_internal_set_command(double value) {
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void ControlCalibrationInfo::set_command(double value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:control.ControlCalibrationInfo.command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2fcalibration_5ftable_2eproto

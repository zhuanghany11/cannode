// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/lodmc_controller_conf.proto

#include "control_base/lodmc_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fgain_5fscheduler_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fpid_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PidConf_control_5fbase_2fpid_5fconf_2eproto;
namespace control {
namespace lodmcctrl {
class LoDmcControllerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoDmcControllerConf> _instance;
} _LoDmcControllerConf_default_instance_;
}  // namespace lodmcctrl
}  // namespace control
static void InitDefaultsscc_info_LoDmcControllerConf_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::lodmcctrl::_LoDmcControllerConf_default_instance_;
    new (ptr) ::control::lodmcctrl::LoDmcControllerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::lodmcctrl::LoDmcControllerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoDmcControllerConf_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoDmcControllerConf_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto}, {
      &scc_info_PidConf_control_5fbase_2fpid_5fconf_2eproto.base,
      &scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, g_acc_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, f_coef_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, mass_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, cd_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, area_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, roll_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, lodmc_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, f2t_coef_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, slope_dmc_f_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, roll_dmc_f_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, kp_dmc_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, fb_dmc_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, dmc_f_roll_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, dmc_f_air_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, dmc_f_acc_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, lodmc_torq_limit_up_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, lodmc_torq_limit_low_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, control_freq_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, acc_err_lowpassfilter_cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, slope_dmc_f_acc_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, slope_dmc_f_decel_mass_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, target_acc_lowpassfilter_cutoff_freq_),
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  16,
  17,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  18,
  19,
  20,
  21,
  8,
  9,
  22,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::control::lodmcctrl::LoDmcControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::lodmcctrl::_LoDmcControllerConf_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(control_base/lodmc_controller_conf.pro"
  "to\022\021control.lodmcctrl\032\033control_base/pid_"
  "conf.proto\032&control_base/gain_scheduler_"
  "conf.proto\"\367\006\n\023LoDmcControllerConf\022\r\n\005g_"
  "acc\030\001 \001(\001\022\016\n\006f_coef\030\002 \001(\001\022\014\n\004mass\030\003 \001(\001\022"
  "\n\n\002cd\030\004 \001(\001\022\014\n\004area\030\005 \001(\001\022\014\n\004roll\030\006 \001(\001\022"
  "(\n\016lodmc_pid_conf\030\007 \001(\0132\020.control.PidCon"
  "f\022\020\n\010f2t_coef\030\010 \001(\001\022\n\n\002ts\030\t \001(\001\022:\n\032slope"
  "_dmc_f_gain_scheduler\030\n \001(\0132\026.control.Ga"
  "inScheduler\0229\n\031roll_dmc_f_gain_scheduler"
  "\030\013 \001(\0132\026.control.GainScheduler\0225\n\025kp_dmc"
  "_gain_scheduler\030\014 \001(\0132\026.control.GainSche"
  "duler\0225\n\025fb_dmc_gain_scheduler\030\r \001(\0132\026.c"
  "ontrol.GainScheduler\0229\n\031dmc_f_roll_gain_"
  "scheduler\030\016 \001(\0132\026.control.GainScheduler\022"
  "8\n\030dmc_f_air_gain_scheduler\030\017 \001(\0132\026.cont"
  "rol.GainScheduler\0228\n\030dmc_f_acc_gain_sche"
  "duler\030\020 \001(\0132\026.control.GainScheduler\022\033\n\023l"
  "odmc_torq_limit_up\030\021 \001(\001\022\034\n\024lodmc_torq_l"
  "imit_low\030\022 \001(\001\022\024\n\014control_freq\030\023 \001(\001\022)\n!"
  "acc_err_lowpassfilter_cutoff_freq\030\024 \001(\001\022"
  ">\n\036slope_dmc_f_acc_gain_scheduler\030\025 \001(\0132"
  "\026.control.GainScheduler\022E\n%slope_dmc_f_d"
  "ecel_mass_gain_scheduler\030\026 \001(\0132\026.control"
  ".GainScheduler\022,\n$target_acc_lowpassfilt"
  "er_cutoff_freq\030\027 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_deps[2] = {
  &::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
  &::descriptor_table_control_5fbase_2fpid_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_sccs[1] = {
  &scc_info_LoDmcControllerConf_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto, "control_base/lodmc_controller_conf.proto", 1020,
  &descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_once, descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_sccs, descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto, 1, file_level_enum_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto, file_level_service_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto)), true);
namespace control {
namespace lodmcctrl {

// ===================================================================

void LoDmcControllerConf::InitAsDefaultInstance() {
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->lodmc_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->slope_dmc_f_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->roll_dmc_f_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->kp_dmc_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->fb_dmc_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->dmc_f_roll_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->dmc_f_air_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->dmc_f_acc_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->slope_dmc_f_acc_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance.get_mutable()->slope_dmc_f_decel_mass_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
}
class LoDmcControllerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<LoDmcControllerConf>()._has_bits_);
  static void set_has_g_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mass(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cd(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::control::PidConf& lodmc_pid_conf(const LoDmcControllerConf* msg);
  static void set_has_lodmc_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_f2t_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::control::GainScheduler& slope_dmc_f_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_slope_dmc_f_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::GainScheduler& roll_dmc_f_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_roll_dmc_f_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::GainScheduler& kp_dmc_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_kp_dmc_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::control::GainScheduler& fb_dmc_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_fb_dmc_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::GainScheduler& dmc_f_roll_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_dmc_f_roll_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::GainScheduler& dmc_f_air_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_dmc_f_air_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::control::GainScheduler& dmc_f_acc_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_dmc_f_acc_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lodmc_torq_limit_up(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lodmc_torq_limit_low(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_control_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_acc_err_lowpassfilter_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::control::GainScheduler& slope_dmc_f_acc_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_slope_dmc_f_acc_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::control::GainScheduler& slope_dmc_f_decel_mass_gain_scheduler(const LoDmcControllerConf* msg);
  static void set_has_slope_dmc_f_decel_mass_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_target_acc_lowpassfilter_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::control::PidConf&
LoDmcControllerConf::_Internal::lodmc_pid_conf(const LoDmcControllerConf* msg) {
  return *msg->lodmc_pid_conf_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::slope_dmc_f_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->slope_dmc_f_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::roll_dmc_f_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->roll_dmc_f_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::kp_dmc_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->kp_dmc_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::fb_dmc_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->fb_dmc_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::dmc_f_roll_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->dmc_f_roll_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::dmc_f_air_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->dmc_f_air_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::dmc_f_acc_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->dmc_f_acc_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::slope_dmc_f_acc_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->slope_dmc_f_acc_gain_scheduler_;
}
const ::control::GainScheduler&
LoDmcControllerConf::_Internal::slope_dmc_f_decel_mass_gain_scheduler(const LoDmcControllerConf* msg) {
  return *msg->slope_dmc_f_decel_mass_gain_scheduler_;
}
void LoDmcControllerConf::clear_lodmc_pid_conf() {
  if (lodmc_pid_conf_ != nullptr) lodmc_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LoDmcControllerConf::clear_slope_dmc_f_gain_scheduler() {
  if (slope_dmc_f_gain_scheduler_ != nullptr) slope_dmc_f_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LoDmcControllerConf::clear_roll_dmc_f_gain_scheduler() {
  if (roll_dmc_f_gain_scheduler_ != nullptr) roll_dmc_f_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LoDmcControllerConf::clear_kp_dmc_gain_scheduler() {
  if (kp_dmc_gain_scheduler_ != nullptr) kp_dmc_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LoDmcControllerConf::clear_fb_dmc_gain_scheduler() {
  if (fb_dmc_gain_scheduler_ != nullptr) fb_dmc_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LoDmcControllerConf::clear_dmc_f_roll_gain_scheduler() {
  if (dmc_f_roll_gain_scheduler_ != nullptr) dmc_f_roll_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void LoDmcControllerConf::clear_dmc_f_air_gain_scheduler() {
  if (dmc_f_air_gain_scheduler_ != nullptr) dmc_f_air_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void LoDmcControllerConf::clear_dmc_f_acc_gain_scheduler() {
  if (dmc_f_acc_gain_scheduler_ != nullptr) dmc_f_acc_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void LoDmcControllerConf::clear_slope_dmc_f_acc_gain_scheduler() {
  if (slope_dmc_f_acc_gain_scheduler_ != nullptr) slope_dmc_f_acc_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void LoDmcControllerConf::clear_slope_dmc_f_decel_mass_gain_scheduler() {
  if (slope_dmc_f_decel_mass_gain_scheduler_ != nullptr) slope_dmc_f_decel_mass_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
LoDmcControllerConf::LoDmcControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.lodmcctrl.LoDmcControllerConf)
}
LoDmcControllerConf::LoDmcControllerConf(const LoDmcControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lodmc_pid_conf()) {
    lodmc_pid_conf_ = new ::control::PidConf(*from.lodmc_pid_conf_);
  } else {
    lodmc_pid_conf_ = nullptr;
  }
  if (from._internal_has_slope_dmc_f_gain_scheduler()) {
    slope_dmc_f_gain_scheduler_ = new ::control::GainScheduler(*from.slope_dmc_f_gain_scheduler_);
  } else {
    slope_dmc_f_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_roll_dmc_f_gain_scheduler()) {
    roll_dmc_f_gain_scheduler_ = new ::control::GainScheduler(*from.roll_dmc_f_gain_scheduler_);
  } else {
    roll_dmc_f_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_kp_dmc_gain_scheduler()) {
    kp_dmc_gain_scheduler_ = new ::control::GainScheduler(*from.kp_dmc_gain_scheduler_);
  } else {
    kp_dmc_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_fb_dmc_gain_scheduler()) {
    fb_dmc_gain_scheduler_ = new ::control::GainScheduler(*from.fb_dmc_gain_scheduler_);
  } else {
    fb_dmc_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_dmc_f_roll_gain_scheduler()) {
    dmc_f_roll_gain_scheduler_ = new ::control::GainScheduler(*from.dmc_f_roll_gain_scheduler_);
  } else {
    dmc_f_roll_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_dmc_f_air_gain_scheduler()) {
    dmc_f_air_gain_scheduler_ = new ::control::GainScheduler(*from.dmc_f_air_gain_scheduler_);
  } else {
    dmc_f_air_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_dmc_f_acc_gain_scheduler()) {
    dmc_f_acc_gain_scheduler_ = new ::control::GainScheduler(*from.dmc_f_acc_gain_scheduler_);
  } else {
    dmc_f_acc_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_slope_dmc_f_acc_gain_scheduler()) {
    slope_dmc_f_acc_gain_scheduler_ = new ::control::GainScheduler(*from.slope_dmc_f_acc_gain_scheduler_);
  } else {
    slope_dmc_f_acc_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_slope_dmc_f_decel_mass_gain_scheduler()) {
    slope_dmc_f_decel_mass_gain_scheduler_ = new ::control::GainScheduler(*from.slope_dmc_f_decel_mass_gain_scheduler_);
  } else {
    slope_dmc_f_decel_mass_gain_scheduler_ = nullptr;
  }
  ::memcpy(&g_acc_, &from.g_acc_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_acc_lowpassfilter_cutoff_freq_) -
    reinterpret_cast<char*>(&g_acc_)) + sizeof(target_acc_lowpassfilter_cutoff_freq_));
  // @@protoc_insertion_point(copy_constructor:control.lodmcctrl.LoDmcControllerConf)
}

void LoDmcControllerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoDmcControllerConf_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto.base);
  ::memset(&lodmc_pid_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_acc_lowpassfilter_cutoff_freq_) -
      reinterpret_cast<char*>(&lodmc_pid_conf_)) + sizeof(target_acc_lowpassfilter_cutoff_freq_));
}

LoDmcControllerConf::~LoDmcControllerConf() {
  // @@protoc_insertion_point(destructor:control.lodmcctrl.LoDmcControllerConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoDmcControllerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lodmc_pid_conf_;
  if (this != internal_default_instance()) delete slope_dmc_f_gain_scheduler_;
  if (this != internal_default_instance()) delete roll_dmc_f_gain_scheduler_;
  if (this != internal_default_instance()) delete kp_dmc_gain_scheduler_;
  if (this != internal_default_instance()) delete fb_dmc_gain_scheduler_;
  if (this != internal_default_instance()) delete dmc_f_roll_gain_scheduler_;
  if (this != internal_default_instance()) delete dmc_f_air_gain_scheduler_;
  if (this != internal_default_instance()) delete dmc_f_acc_gain_scheduler_;
  if (this != internal_default_instance()) delete slope_dmc_f_acc_gain_scheduler_;
  if (this != internal_default_instance()) delete slope_dmc_f_decel_mass_gain_scheduler_;
}

void LoDmcControllerConf::ArenaDtor(void* object) {
  LoDmcControllerConf* _this = reinterpret_cast< LoDmcControllerConf* >(object);
  (void)_this;
}
void LoDmcControllerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoDmcControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoDmcControllerConf& LoDmcControllerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoDmcControllerConf_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LoDmcControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.lodmcctrl.LoDmcControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lodmc_pid_conf_ != nullptr);
      lodmc_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slope_dmc_f_gain_scheduler_ != nullptr);
      slope_dmc_f_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(roll_dmc_f_gain_scheduler_ != nullptr);
      roll_dmc_f_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(kp_dmc_gain_scheduler_ != nullptr);
      kp_dmc_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(fb_dmc_gain_scheduler_ != nullptr);
      fb_dmc_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dmc_f_roll_gain_scheduler_ != nullptr);
      dmc_f_roll_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dmc_f_air_gain_scheduler_ != nullptr);
      dmc_f_air_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dmc_f_acc_gain_scheduler_ != nullptr);
      dmc_f_acc_gain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(slope_dmc_f_acc_gain_scheduler_ != nullptr);
      slope_dmc_f_acc_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(slope_dmc_f_decel_mass_gain_scheduler_ != nullptr);
      slope_dmc_f_decel_mass_gain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&g_acc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&g_acc_)) + sizeof(roll_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&f2t_coef_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_acc_lowpassfilter_cutoff_freq_) -
        reinterpret_cast<char*>(&f2t_coef_)) + sizeof(target_acc_lowpassfilter_cutoff_freq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoDmcControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double g_acc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_g_acc(&has_bits);
          g_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double f_coef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_f_coef(&has_bits);
          f_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_mass(&has_bits);
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_cd(&has_bits);
          cd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_area(&has_bits);
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf lodmc_pid_conf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lodmc_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2t_coef = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_f2t_coef(&has_bits);
          f2t_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_ts(&has_bits);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_slope_dmc_f_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_roll_dmc_f_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_kp_dmc_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_fb_dmc_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmc_f_roll_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmc_f_air_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmc_f_acc_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lodmc_torq_limit_up = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_lodmc_torq_limit_up(&has_bits);
          lodmc_torq_limit_up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lodmc_torq_limit_low = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lodmc_torq_limit_low(&has_bits);
          lodmc_torq_limit_low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double control_freq = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_control_freq(&has_bits);
          control_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_err_lowpassfilter_cutoff_freq = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_acc_err_lowpassfilter_cutoff_freq(&has_bits);
          acc_err_lowpassfilter_cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_slope_dmc_f_acc_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_slope_dmc_f_decel_mass_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double target_acc_lowpassfilter_cutoff_freq = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_target_acc_lowpassfilter_cutoff_freq(&has_bits);
          target_acc_lowpassfilter_cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoDmcControllerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.lodmcctrl.LoDmcControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double g_acc = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_g_acc(), target);
  }

  // optional double f_coef = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f_coef(), target);
  }

  // optional double mass = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mass(), target);
  }

  // optional double cd = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cd(), target);
  }

  // optional double area = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_area(), target);
  }

  // optional double roll = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_roll(), target);
  }

  // optional .control.PidConf lodmc_pid_conf = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lodmc_pid_conf(this), target, stream);
  }

  // optional double f2t_coef = 8;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_f2t_coef(), target);
  }

  // optional double ts = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_ts(), target);
  }

  // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::slope_dmc_f_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::roll_dmc_f_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::kp_dmc_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::fb_dmc_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::dmc_f_roll_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::dmc_f_air_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::dmc_f_acc_gain_scheduler(this), target, stream);
  }

  // optional double lodmc_torq_limit_up = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_lodmc_torq_limit_up(), target);
  }

  // optional double lodmc_torq_limit_low = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lodmc_torq_limit_low(), target);
  }

  // optional double control_freq = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_control_freq(), target);
  }

  // optional double acc_err_lowpassfilter_cutoff_freq = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_acc_err_lowpassfilter_cutoff_freq(), target);
  }

  // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::slope_dmc_f_acc_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::slope_dmc_f_decel_mass_gain_scheduler(this), target, stream);
  }

  // optional double target_acc_lowpassfilter_cutoff_freq = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_target_acc_lowpassfilter_cutoff_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.lodmcctrl.LoDmcControllerConf)
  return target;
}

size_t LoDmcControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.lodmcctrl.LoDmcControllerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.PidConf lodmc_pid_conf = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lodmc_pid_conf_);
    }

    // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slope_dmc_f_gain_scheduler_);
    }

    // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roll_dmc_f_gain_scheduler_);
    }

    // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kp_dmc_gain_scheduler_);
    }

    // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fb_dmc_gain_scheduler_);
    }

    // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dmc_f_roll_gain_scheduler_);
    }

    // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dmc_f_air_gain_scheduler_);
    }

    // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dmc_f_acc_gain_scheduler_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slope_dmc_f_acc_gain_scheduler_);
    }

    // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slope_dmc_f_decel_mass_gain_scheduler_);
    }

    // optional double g_acc = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double f_coef = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double mass = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double cd = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double area = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double roll = 6;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional double f2t_coef = 8;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double ts = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double lodmc_torq_limit_up = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double lodmc_torq_limit_low = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double control_freq = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double acc_err_lowpassfilter_cutoff_freq = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double target_acc_lowpassfilter_cutoff_freq = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoDmcControllerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.lodmcctrl.LoDmcControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LoDmcControllerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoDmcControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.lodmcctrl.LoDmcControllerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.lodmcctrl.LoDmcControllerConf)
    MergeFrom(*source);
  }
}

void LoDmcControllerConf::MergeFrom(const LoDmcControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.lodmcctrl.LoDmcControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lodmc_pid_conf()->::control::PidConf::MergeFrom(from._internal_lodmc_pid_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slope_dmc_f_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_slope_dmc_f_gain_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_roll_dmc_f_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_roll_dmc_f_gain_scheduler());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_kp_dmc_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_kp_dmc_gain_scheduler());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_fb_dmc_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_fb_dmc_gain_scheduler());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dmc_f_roll_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_dmc_f_roll_gain_scheduler());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dmc_f_air_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_dmc_f_air_gain_scheduler());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_dmc_f_acc_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_dmc_f_acc_gain_scheduler());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_slope_dmc_f_acc_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_slope_dmc_f_acc_gain_scheduler());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_slope_dmc_f_decel_mass_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_slope_dmc_f_decel_mass_gain_scheduler());
    }
    if (cached_has_bits & 0x00000400u) {
      g_acc_ = from.g_acc_;
    }
    if (cached_has_bits & 0x00000800u) {
      f_coef_ = from.f_coef_;
    }
    if (cached_has_bits & 0x00001000u) {
      mass_ = from.mass_;
    }
    if (cached_has_bits & 0x00002000u) {
      cd_ = from.cd_;
    }
    if (cached_has_bits & 0x00004000u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00008000u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      f2t_coef_ = from.f2t_coef_;
    }
    if (cached_has_bits & 0x00020000u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00040000u) {
      lodmc_torq_limit_up_ = from.lodmc_torq_limit_up_;
    }
    if (cached_has_bits & 0x00080000u) {
      lodmc_torq_limit_low_ = from.lodmc_torq_limit_low_;
    }
    if (cached_has_bits & 0x00100000u) {
      control_freq_ = from.control_freq_;
    }
    if (cached_has_bits & 0x00200000u) {
      acc_err_lowpassfilter_cutoff_freq_ = from.acc_err_lowpassfilter_cutoff_freq_;
    }
    if (cached_has_bits & 0x00400000u) {
      target_acc_lowpassfilter_cutoff_freq_ = from.target_acc_lowpassfilter_cutoff_freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoDmcControllerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.lodmcctrl.LoDmcControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoDmcControllerConf::CopyFrom(const LoDmcControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.lodmcctrl.LoDmcControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoDmcControllerConf::IsInitialized() const {
  return true;
}

void LoDmcControllerConf::InternalSwap(LoDmcControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, target_acc_lowpassfilter_cutoff_freq_)
      + sizeof(LoDmcControllerConf::target_acc_lowpassfilter_cutoff_freq_)
      - PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, lodmc_pid_conf_)>(
          reinterpret_cast<char*>(&lodmc_pid_conf_),
          reinterpret_cast<char*>(&other->lodmc_pid_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoDmcControllerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lodmcctrl
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::lodmcctrl::LoDmcControllerConf* Arena::CreateMaybeMessage< ::control::lodmcctrl::LoDmcControllerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::lodmcctrl::LoDmcControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/lodmc_controller_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/lodmc_controller_conf.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace lodmcctrl {

inline constexpr LoDmcControllerConf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lodmc_pid_conf_{nullptr},
        slope_dmc_f_gain_scheduler_{nullptr},
        roll_dmc_f_gain_scheduler_{nullptr},
        kp_dmc_gain_scheduler_{nullptr},
        fb_dmc_gain_scheduler_{nullptr},
        dmc_f_roll_gain_scheduler_{nullptr},
        dmc_f_air_gain_scheduler_{nullptr},
        dmc_f_acc_gain_scheduler_{nullptr},
        slope_dmc_f_acc_gain_scheduler_{nullptr},
        slope_dmc_f_decel_mass_gain_scheduler_{nullptr},
        g_acc_{0},
        f_coef_{0},
        mass_{0},
        cd_{0},
        area_{0},
        roll_{0},
        f2t_coef_{0},
        ts_{0},
        lodmc_torq_limit_up_{0},
        lodmc_torq_limit_low_{0},
        control_freq_{0},
        acc_err_lowpassfilter_cutoff_freq_{0},
        target_acc_lowpassfilter_cutoff_freq_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LoDmcControllerConf::LoDmcControllerConf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LoDmcControllerConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoDmcControllerConfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoDmcControllerConfDefaultTypeInternal() {}
  union {
    LoDmcControllerConf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoDmcControllerConfDefaultTypeInternal _LoDmcControllerConf_default_instance_;
}  // namespace lodmcctrl
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.g_acc_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.f_coef_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.mass_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.cd_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.area_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.roll_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.lodmc_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.f2t_coef_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.ts_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.slope_dmc_f_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.roll_dmc_f_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.kp_dmc_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.fb_dmc_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.dmc_f_roll_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.dmc_f_air_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.dmc_f_acc_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.lodmc_torq_limit_up_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.lodmc_torq_limit_low_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.control_freq_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.acc_err_lowpassfilter_cutoff_freq_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.slope_dmc_f_acc_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.slope_dmc_f_decel_mass_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lodmcctrl::LoDmcControllerConf, _impl_.target_acc_lowpassfilter_cutoff_freq_),
        10,
        11,
        12,
        13,
        14,
        15,
        0,
        16,
        17,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        18,
        19,
        20,
        21,
        8,
        9,
        22,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 31, -1, sizeof(::control::lodmcctrl::LoDmcControllerConf)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::lodmcctrl::_LoDmcControllerConf_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n(control_base/lodmc_controller_conf.pro"
    "to\022\021control.lodmcctrl\032\033control_base/pid_"
    "conf.proto\032&control_base/gain_scheduler_"
    "conf.proto\"\367\006\n\023LoDmcControllerConf\022\r\n\005g_"
    "acc\030\001 \001(\001\022\016\n\006f_coef\030\002 \001(\001\022\014\n\004mass\030\003 \001(\001\022"
    "\n\n\002cd\030\004 \001(\001\022\014\n\004area\030\005 \001(\001\022\014\n\004roll\030\006 \001(\001\022"
    "(\n\016lodmc_pid_conf\030\007 \001(\0132\020.control.PidCon"
    "f\022\020\n\010f2t_coef\030\010 \001(\001\022\n\n\002ts\030\t \001(\001\022:\n\032slope"
    "_dmc_f_gain_scheduler\030\n \001(\0132\026.control.Ga"
    "inScheduler\0229\n\031roll_dmc_f_gain_scheduler"
    "\030\013 \001(\0132\026.control.GainScheduler\0225\n\025kp_dmc"
    "_gain_scheduler\030\014 \001(\0132\026.control.GainSche"
    "duler\0225\n\025fb_dmc_gain_scheduler\030\r \001(\0132\026.c"
    "ontrol.GainScheduler\0229\n\031dmc_f_roll_gain_"
    "scheduler\030\016 \001(\0132\026.control.GainScheduler\022"
    "8\n\030dmc_f_air_gain_scheduler\030\017 \001(\0132\026.cont"
    "rol.GainScheduler\0228\n\030dmc_f_acc_gain_sche"
    "duler\030\020 \001(\0132\026.control.GainScheduler\022\033\n\023l"
    "odmc_torq_limit_up\030\021 \001(\001\022\034\n\024lodmc_torq_l"
    "imit_low\030\022 \001(\001\022\024\n\014control_freq\030\023 \001(\001\022)\n!"
    "acc_err_lowpassfilter_cutoff_freq\030\024 \001(\001\022"
    ">\n\036slope_dmc_f_acc_gain_scheduler\030\025 \001(\0132"
    "\026.control.GainScheduler\022E\n%slope_dmc_f_d"
    "ecel_mass_gain_scheduler\030\026 \001(\0132\026.control"
    ".GainScheduler\022,\n$target_acc_lowpassfilt"
    "er_cutoff_freq\030\027 \001(\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_deps[2] =
    {
        &::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
        &::descriptor_table_control_5fbase_2fpid_5fconf_2eproto,
};
static ::absl::once_flag descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto = {
    false,
    false,
    1020,
    descriptor_table_protodef_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto,
    "control_base/lodmc_controller_conf.proto",
    &descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_once,
    descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto,
    file_level_service_descriptors_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto,
};
namespace control {
namespace lodmcctrl {
// ===================================================================

class LoDmcControllerConf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LoDmcControllerConf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_._has_bits_);
};

void LoDmcControllerConf::clear_lodmc_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lodmc_pid_conf_ != nullptr) _impl_.lodmc_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LoDmcControllerConf::clear_slope_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_dmc_f_gain_scheduler_ != nullptr) _impl_.slope_dmc_f_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LoDmcControllerConf::clear_roll_dmc_f_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.roll_dmc_f_gain_scheduler_ != nullptr) _impl_.roll_dmc_f_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LoDmcControllerConf::clear_kp_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kp_dmc_gain_scheduler_ != nullptr) _impl_.kp_dmc_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void LoDmcControllerConf::clear_fb_dmc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fb_dmc_gain_scheduler_ != nullptr) _impl_.fb_dmc_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void LoDmcControllerConf::clear_dmc_f_roll_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dmc_f_roll_gain_scheduler_ != nullptr) _impl_.dmc_f_roll_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void LoDmcControllerConf::clear_dmc_f_air_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dmc_f_air_gain_scheduler_ != nullptr) _impl_.dmc_f_air_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void LoDmcControllerConf::clear_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dmc_f_acc_gain_scheduler_ != nullptr) _impl_.dmc_f_acc_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void LoDmcControllerConf::clear_slope_dmc_f_acc_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_dmc_f_acc_gain_scheduler_ != nullptr) _impl_.slope_dmc_f_acc_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void LoDmcControllerConf::clear_slope_dmc_f_decel_mass_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_dmc_f_decel_mass_gain_scheduler_ != nullptr) _impl_.slope_dmc_f_decel_mass_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
LoDmcControllerConf::LoDmcControllerConf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.lodmcctrl.LoDmcControllerConf)
}
inline PROTOBUF_NDEBUG_INLINE LoDmcControllerConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::lodmcctrl::LoDmcControllerConf& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LoDmcControllerConf::LoDmcControllerConf(
    ::google::protobuf::Arena* arena,
    const LoDmcControllerConf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LoDmcControllerConf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.lodmc_pid_conf_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.lodmc_pid_conf_)
                        : nullptr;
  _impl_.slope_dmc_f_gain_scheduler_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.slope_dmc_f_gain_scheduler_)
                        : nullptr;
  _impl_.roll_dmc_f_gain_scheduler_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.roll_dmc_f_gain_scheduler_)
                        : nullptr;
  _impl_.kp_dmc_gain_scheduler_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.kp_dmc_gain_scheduler_)
                        : nullptr;
  _impl_.fb_dmc_gain_scheduler_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.fb_dmc_gain_scheduler_)
                        : nullptr;
  _impl_.dmc_f_roll_gain_scheduler_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.dmc_f_roll_gain_scheduler_)
                        : nullptr;
  _impl_.dmc_f_air_gain_scheduler_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.dmc_f_air_gain_scheduler_)
                        : nullptr;
  _impl_.dmc_f_acc_gain_scheduler_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.dmc_f_acc_gain_scheduler_)
                        : nullptr;
  _impl_.slope_dmc_f_acc_gain_scheduler_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.slope_dmc_f_acc_gain_scheduler_)
                        : nullptr;
  _impl_.slope_dmc_f_decel_mass_gain_scheduler_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.slope_dmc_f_decel_mass_gain_scheduler_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, g_acc_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, g_acc_),
           offsetof(Impl_, target_acc_lowpassfilter_cutoff_freq_) -
               offsetof(Impl_, g_acc_) +
               sizeof(Impl_::target_acc_lowpassfilter_cutoff_freq_));

  // @@protoc_insertion_point(copy_constructor:control.lodmcctrl.LoDmcControllerConf)
}
inline PROTOBUF_NDEBUG_INLINE LoDmcControllerConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LoDmcControllerConf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lodmc_pid_conf_),
           0,
           offsetof(Impl_, target_acc_lowpassfilter_cutoff_freq_) -
               offsetof(Impl_, lodmc_pid_conf_) +
               sizeof(Impl_::target_acc_lowpassfilter_cutoff_freq_));
}
LoDmcControllerConf::~LoDmcControllerConf() {
  // @@protoc_insertion_point(destructor:control.lodmcctrl.LoDmcControllerConf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LoDmcControllerConf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.lodmc_pid_conf_;
  delete _impl_.slope_dmc_f_gain_scheduler_;
  delete _impl_.roll_dmc_f_gain_scheduler_;
  delete _impl_.kp_dmc_gain_scheduler_;
  delete _impl_.fb_dmc_gain_scheduler_;
  delete _impl_.dmc_f_roll_gain_scheduler_;
  delete _impl_.dmc_f_air_gain_scheduler_;
  delete _impl_.dmc_f_acc_gain_scheduler_;
  delete _impl_.slope_dmc_f_acc_gain_scheduler_;
  delete _impl_.slope_dmc_f_decel_mass_gain_scheduler_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    LoDmcControllerConf::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &LoDmcControllerConf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<LoDmcControllerConf>(),
            ::google::protobuf::Message::GetNewImpl<LoDmcControllerConf>(),
            ::google::protobuf::Message::GetClearImpl<LoDmcControllerConf>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<LoDmcControllerConf>(),
                ::google::protobuf::Message::GetSerializeImpl<LoDmcControllerConf>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_._cached_size_),
            false,
        },
        &LoDmcControllerConf::kDescriptorMethods,
        &descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* LoDmcControllerConf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 23, 10, 0, 2> LoDmcControllerConf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_._has_bits_),
    0, // no _extensions_
    23, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286578688,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LoDmcControllerConf_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::lodmcctrl::LoDmcControllerConf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double g_acc = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 10, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.g_acc_)}},
    // optional double f_coef = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 11, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.f_coef_)}},
    // optional double mass = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 12, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.mass_)}},
    // optional double cd = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 13, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.cd_)}},
    // optional double area = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 14, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.area_)}},
    // optional double roll = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 15, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.roll_)}},
    // optional .control.PidConf lodmc_pid_conf = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.lodmc_pid_conf_)}},
    // optional double f2t_coef = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 16, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.f2t_coef_)}},
    // optional double ts = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 17, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.ts_)}},
    // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 1, 1, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.slope_dmc_f_gain_scheduler_)}},
    // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 2, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.roll_dmc_f_gain_scheduler_)}},
    // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 3, 3, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.kp_dmc_gain_scheduler_)}},
    // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 4, 4, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.fb_dmc_gain_scheduler_)}},
    // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 5, 5, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.dmc_f_roll_gain_scheduler_)}},
    // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 6, 6, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.dmc_f_air_gain_scheduler_)}},
    // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 7, 7, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.dmc_f_acc_gain_scheduler_)}},
    // optional double lodmc_torq_limit_up = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 18, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.lodmc_torq_limit_up_)}},
    // optional double lodmc_torq_limit_low = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 19, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.lodmc_torq_limit_low_)}},
    // optional double control_freq = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 20, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.control_freq_)}},
    // optional double acc_err_lowpassfilter_cutoff_freq = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 21, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.acc_err_lowpassfilter_cutoff_freq_)}},
    // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 8, 8, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.slope_dmc_f_acc_gain_scheduler_)}},
    // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 9, 9, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.slope_dmc_f_decel_mass_gain_scheduler_)}},
    // optional double target_acc_lowpassfilter_cutoff_freq = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 22, 0, PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.target_acc_lowpassfilter_cutoff_freq_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double g_acc = 1;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.g_acc_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double f_coef = 2;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.f_coef_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double mass = 3;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.mass_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double cd = 4;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.cd_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double area = 5;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.area_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double roll = 6;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.roll_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.PidConf lodmc_pid_conf = 7;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.lodmc_pid_conf_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double f2t_coef = 8;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.f2t_coef_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double ts = 9;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.ts_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.slope_dmc_f_gain_scheduler_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.roll_dmc_f_gain_scheduler_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.kp_dmc_gain_scheduler_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.fb_dmc_gain_scheduler_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.dmc_f_roll_gain_scheduler_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.dmc_f_air_gain_scheduler_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.dmc_f_acc_gain_scheduler_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double lodmc_torq_limit_up = 17;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.lodmc_torq_limit_up_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lodmc_torq_limit_low = 18;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.lodmc_torq_limit_low_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double control_freq = 19;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.control_freq_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acc_err_lowpassfilter_cutoff_freq = 20;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.acc_err_lowpassfilter_cutoff_freq_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.slope_dmc_f_acc_gain_scheduler_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.slope_dmc_f_decel_mass_gain_scheduler_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double target_acc_lowpassfilter_cutoff_freq = 23;
    {PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.target_acc_lowpassfilter_cutoff_freq_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LoDmcControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.lodmcctrl.LoDmcControllerConf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.lodmc_pid_conf_ != nullptr);
      _impl_.lodmc_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.slope_dmc_f_gain_scheduler_ != nullptr);
      _impl_.slope_dmc_f_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.roll_dmc_f_gain_scheduler_ != nullptr);
      _impl_.roll_dmc_f_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.kp_dmc_gain_scheduler_ != nullptr);
      _impl_.kp_dmc_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.fb_dmc_gain_scheduler_ != nullptr);
      _impl_.fb_dmc_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dmc_f_roll_gain_scheduler_ != nullptr);
      _impl_.dmc_f_roll_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.dmc_f_air_gain_scheduler_ != nullptr);
      _impl_.dmc_f_air_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.dmc_f_acc_gain_scheduler_ != nullptr);
      _impl_.dmc_f_acc_gain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.slope_dmc_f_acc_gain_scheduler_ != nullptr);
      _impl_.slope_dmc_f_acc_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.slope_dmc_f_decel_mass_gain_scheduler_ != nullptr);
      _impl_.slope_dmc_f_decel_mass_gain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.g_acc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.roll_) -
        reinterpret_cast<char*>(&_impl_.g_acc_)) + sizeof(_impl_.roll_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.f2t_coef_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.target_acc_lowpassfilter_cutoff_freq_) -
        reinterpret_cast<char*>(&_impl_.f2t_coef_)) + sizeof(_impl_.target_acc_lowpassfilter_cutoff_freq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* LoDmcControllerConf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.lodmcctrl.LoDmcControllerConf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double g_acc = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_g_acc(), target);
  }

  // optional double f_coef = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_f_coef(), target);
  }

  // optional double mass = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_mass(), target);
  }

  // optional double cd = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_cd(), target);
  }

  // optional double area = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_area(), target);
  }

  // optional double roll = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_roll(), target);
  }

  // optional .control.PidConf lodmc_pid_conf = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.lodmc_pid_conf_, _impl_.lodmc_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional double f2t_coef = 8;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_f2t_coef(), target);
  }

  // optional double ts = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_ts(), target);
  }

  // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *_impl_.slope_dmc_f_gain_scheduler_, _impl_.slope_dmc_f_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *_impl_.roll_dmc_f_gain_scheduler_, _impl_.roll_dmc_f_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *_impl_.kp_dmc_gain_scheduler_, _impl_.kp_dmc_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *_impl_.fb_dmc_gain_scheduler_, _impl_.fb_dmc_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *_impl_.dmc_f_roll_gain_scheduler_, _impl_.dmc_f_roll_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *_impl_.dmc_f_air_gain_scheduler_, _impl_.dmc_f_air_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *_impl_.dmc_f_acc_gain_scheduler_, _impl_.dmc_f_acc_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional double lodmc_torq_limit_up = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this->_internal_lodmc_torq_limit_up(), target);
  }

  // optional double lodmc_torq_limit_low = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        18, this->_internal_lodmc_torq_limit_low(), target);
  }

  // optional double control_freq = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        19, this->_internal_control_freq(), target);
  }

  // optional double acc_err_lowpassfilter_cutoff_freq = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this->_internal_acc_err_lowpassfilter_cutoff_freq(), target);
  }

  // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *_impl_.slope_dmc_f_acc_gain_scheduler_, _impl_.slope_dmc_f_acc_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        22, *_impl_.slope_dmc_f_decel_mass_gain_scheduler_, _impl_.slope_dmc_f_decel_mass_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional double target_acc_lowpassfilter_cutoff_freq = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        23, this->_internal_target_acc_lowpassfilter_cutoff_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.lodmcctrl.LoDmcControllerConf)
  return target;
}

::size_t LoDmcControllerConf::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.lodmcctrl.LoDmcControllerConf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.PidConf lodmc_pid_conf = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lodmc_pid_conf_);
    }
    // optional .control.GainScheduler slope_dmc_f_gain_scheduler = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.slope_dmc_f_gain_scheduler_);
    }
    // optional .control.GainScheduler roll_dmc_f_gain_scheduler = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.roll_dmc_f_gain_scheduler_);
    }
    // optional .control.GainScheduler kp_dmc_gain_scheduler = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kp_dmc_gain_scheduler_);
    }
    // optional .control.GainScheduler fb_dmc_gain_scheduler = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fb_dmc_gain_scheduler_);
    }
    // optional .control.GainScheduler dmc_f_roll_gain_scheduler = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dmc_f_roll_gain_scheduler_);
    }
    // optional .control.GainScheduler dmc_f_air_gain_scheduler = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dmc_f_air_gain_scheduler_);
    }
    // optional .control.GainScheduler dmc_f_acc_gain_scheduler = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dmc_f_acc_gain_scheduler_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.GainScheduler slope_dmc_f_acc_gain_scheduler = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.slope_dmc_f_acc_gain_scheduler_);
    }
    // optional .control.GainScheduler slope_dmc_f_decel_mass_gain_scheduler = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.slope_dmc_f_decel_mass_gain_scheduler_);
    }
    // optional double g_acc = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }
    // optional double f_coef = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 9;
    }
    // optional double mass = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional double cd = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
    // optional double area = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional double roll = 6;
    if (cached_has_bits & 0x00008000u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    // optional double f2t_coef = 8;
    if (cached_has_bits & 0x00010000u) {
      total_size += 9;
    }
    // optional double ts = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 9;
    }
    // optional double lodmc_torq_limit_up = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 10;
    }
    // optional double lodmc_torq_limit_low = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 10;
    }
    // optional double control_freq = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional double acc_err_lowpassfilter_cutoff_freq = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 10;
    }
    // optional double target_acc_lowpassfilter_cutoff_freq = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 10;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void LoDmcControllerConf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LoDmcControllerConf*>(&to_msg);
  auto& from = static_cast<const LoDmcControllerConf&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.lodmcctrl.LoDmcControllerConf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.lodmc_pid_conf_ != nullptr);
      if (_this->_impl_.lodmc_pid_conf_ == nullptr) {
        _this->_impl_.lodmc_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.lodmc_pid_conf_);
      } else {
        _this->_impl_.lodmc_pid_conf_->MergeFrom(*from._impl_.lodmc_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.slope_dmc_f_gain_scheduler_ != nullptr);
      if (_this->_impl_.slope_dmc_f_gain_scheduler_ == nullptr) {
        _this->_impl_.slope_dmc_f_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.slope_dmc_f_gain_scheduler_);
      } else {
        _this->_impl_.slope_dmc_f_gain_scheduler_->MergeFrom(*from._impl_.slope_dmc_f_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.roll_dmc_f_gain_scheduler_ != nullptr);
      if (_this->_impl_.roll_dmc_f_gain_scheduler_ == nullptr) {
        _this->_impl_.roll_dmc_f_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.roll_dmc_f_gain_scheduler_);
      } else {
        _this->_impl_.roll_dmc_f_gain_scheduler_->MergeFrom(*from._impl_.roll_dmc_f_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.kp_dmc_gain_scheduler_ != nullptr);
      if (_this->_impl_.kp_dmc_gain_scheduler_ == nullptr) {
        _this->_impl_.kp_dmc_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.kp_dmc_gain_scheduler_);
      } else {
        _this->_impl_.kp_dmc_gain_scheduler_->MergeFrom(*from._impl_.kp_dmc_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.fb_dmc_gain_scheduler_ != nullptr);
      if (_this->_impl_.fb_dmc_gain_scheduler_ == nullptr) {
        _this->_impl_.fb_dmc_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.fb_dmc_gain_scheduler_);
      } else {
        _this->_impl_.fb_dmc_gain_scheduler_->MergeFrom(*from._impl_.fb_dmc_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dmc_f_roll_gain_scheduler_ != nullptr);
      if (_this->_impl_.dmc_f_roll_gain_scheduler_ == nullptr) {
        _this->_impl_.dmc_f_roll_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.dmc_f_roll_gain_scheduler_);
      } else {
        _this->_impl_.dmc_f_roll_gain_scheduler_->MergeFrom(*from._impl_.dmc_f_roll_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.dmc_f_air_gain_scheduler_ != nullptr);
      if (_this->_impl_.dmc_f_air_gain_scheduler_ == nullptr) {
        _this->_impl_.dmc_f_air_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.dmc_f_air_gain_scheduler_);
      } else {
        _this->_impl_.dmc_f_air_gain_scheduler_->MergeFrom(*from._impl_.dmc_f_air_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.dmc_f_acc_gain_scheduler_ != nullptr);
      if (_this->_impl_.dmc_f_acc_gain_scheduler_ == nullptr) {
        _this->_impl_.dmc_f_acc_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.dmc_f_acc_gain_scheduler_);
      } else {
        _this->_impl_.dmc_f_acc_gain_scheduler_->MergeFrom(*from._impl_.dmc_f_acc_gain_scheduler_);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.slope_dmc_f_acc_gain_scheduler_ != nullptr);
      if (_this->_impl_.slope_dmc_f_acc_gain_scheduler_ == nullptr) {
        _this->_impl_.slope_dmc_f_acc_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.slope_dmc_f_acc_gain_scheduler_);
      } else {
        _this->_impl_.slope_dmc_f_acc_gain_scheduler_->MergeFrom(*from._impl_.slope_dmc_f_acc_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.slope_dmc_f_decel_mass_gain_scheduler_ != nullptr);
      if (_this->_impl_.slope_dmc_f_decel_mass_gain_scheduler_ == nullptr) {
        _this->_impl_.slope_dmc_f_decel_mass_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.slope_dmc_f_decel_mass_gain_scheduler_);
      } else {
        _this->_impl_.slope_dmc_f_decel_mass_gain_scheduler_->MergeFrom(*from._impl_.slope_dmc_f_decel_mass_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.g_acc_ = from._impl_.g_acc_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.f_coef_ = from._impl_.f_coef_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.mass_ = from._impl_.mass_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.cd_ = from._impl_.cd_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.area_ = from._impl_.area_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.roll_ = from._impl_.roll_;
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.f2t_coef_ = from._impl_.f2t_coef_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.ts_ = from._impl_.ts_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.lodmc_torq_limit_up_ = from._impl_.lodmc_torq_limit_up_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.lodmc_torq_limit_low_ = from._impl_.lodmc_torq_limit_low_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.control_freq_ = from._impl_.control_freq_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.acc_err_lowpassfilter_cutoff_freq_ = from._impl_.acc_err_lowpassfilter_cutoff_freq_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.target_acc_lowpassfilter_cutoff_freq_ = from._impl_.target_acc_lowpassfilter_cutoff_freq_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LoDmcControllerConf::CopyFrom(const LoDmcControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.lodmcctrl.LoDmcControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LoDmcControllerConf::InternalSwap(LoDmcControllerConf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.target_acc_lowpassfilter_cutoff_freq_)
      + sizeof(LoDmcControllerConf::_impl_.target_acc_lowpassfilter_cutoff_freq_)
      - PROTOBUF_FIELD_OFFSET(LoDmcControllerConf, _impl_.lodmc_pid_conf_)>(
          reinterpret_cast<char*>(&_impl_.lodmc_pid_conf_),
          reinterpret_cast<char*>(&other->_impl_.lodmc_pid_conf_));
}

::google::protobuf::Metadata LoDmcControllerConf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace lodmcctrl
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2flodmc_5fcontroller_5fconf_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/lon_based_pid_controller_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "control_base/leadlag_conf.pb.h"
#include "control_base/pid_conf.pb.h"
#include "control_base/gain_scheduler_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto;
namespace control {
namespace lonpid {
class FilterConf;
class FilterConfDefaultTypeInternal;
extern FilterConfDefaultTypeInternal _FilterConf_default_instance_;
class LonBasedPidControllerConf;
class LonBasedPidControllerConfDefaultTypeInternal;
extern LonBasedPidControllerConfDefaultTypeInternal _LonBasedPidControllerConf_default_instance_;
}  // namespace lonpid
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::lonpid::FilterConf* Arena::CreateMaybeMessage<::control::lonpid::FilterConf>(Arena*);
template<> ::control::lonpid::LonBasedPidControllerConf* Arena::CreateMaybeMessage<::control::lonpid::LonBasedPidControllerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {
namespace lonpid {

// ===================================================================

class FilterConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.lonpid.FilterConf) */ {
 public:
  inline FilterConf() : FilterConf(nullptr) {};
  virtual ~FilterConf();

  FilterConf(const FilterConf& from);
  FilterConf(FilterConf&& from) noexcept
    : FilterConf() {
    *this = ::std::move(from);
  }

  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterConf& operator=(FilterConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterConf* internal_default_instance() {
    return reinterpret_cast<const FilterConf*>(
               &_FilterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilterConf& a, FilterConf& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterConf* New() const final {
    return CreateMaybeMessage<FilterConf>(nullptr);
  }

  FilterConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterConf& from);
  void MergeFrom(const FilterConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.lonpid.FilterConf";
  }
  protected:
  explicit FilterConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto);
    return ::descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCutoffFreqFieldNumber = 1,
  };
  // optional int32 cutoff_freq = 1;
  bool has_cutoff_freq() const;
  private:
  bool _internal_has_cutoff_freq() const;
  public:
  void clear_cutoff_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 cutoff_freq() const;
  void set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.lonpid.FilterConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cutoff_freq_;
  friend struct ::TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto;
};
// -------------------------------------------------------------------

class LonBasedPidControllerConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.lonpid.LonBasedPidControllerConf) */ {
 public:
  inline LonBasedPidControllerConf() : LonBasedPidControllerConf(nullptr) {};
  virtual ~LonBasedPidControllerConf();

  LonBasedPidControllerConf(const LonBasedPidControllerConf& from);
  LonBasedPidControllerConf(LonBasedPidControllerConf&& from) noexcept
    : LonBasedPidControllerConf() {
    *this = ::std::move(from);
  }

  inline LonBasedPidControllerConf& operator=(const LonBasedPidControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LonBasedPidControllerConf& operator=(LonBasedPidControllerConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LonBasedPidControllerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LonBasedPidControllerConf* internal_default_instance() {
    return reinterpret_cast<const LonBasedPidControllerConf*>(
               &_LonBasedPidControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LonBasedPidControllerConf& a, LonBasedPidControllerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(LonBasedPidControllerConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LonBasedPidControllerConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LonBasedPidControllerConf* New() const final {
    return CreateMaybeMessage<LonBasedPidControllerConf>(nullptr);
  }

  LonBasedPidControllerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LonBasedPidControllerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LonBasedPidControllerConf& from);
  void MergeFrom(const LonBasedPidControllerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LonBasedPidControllerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.lonpid.LonBasedPidControllerConf";
  }
  protected:
  explicit LonBasedPidControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto);
    return ::descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationPidConfFieldNumber = 8,
    kLowSpeedPidConfFieldNumber = 9,
    kHighSpeedPidConfFieldNumber = 10,
    kReverseStationPidConfFieldNumber = 12,
    kReverseSpeedPidConfFieldNumber = 13,
    kPitchAngleFilterConfFieldNumber = 14,
    kReverseStationLeadlagConfFieldNumber = 15,
    kReverseSpeedLeadlagConfFieldNumber = 16,
    kPitStationPidConfFieldNumber = 30,
    kPitSpeedPidConfFieldNumber = 31,
    kStationErrorGainSchedulerFieldNumber = 39,
    kSpeedErrorAccelPgainSchedulerFieldNumber = 40,
    kSpeedErrorAccelIgainSchedulerFieldNumber = 41,
    kSpeedErrorAccelDgainSchedulerFieldNumber = 42,
    kSpeedErrorSmallPgainSchedulerFieldNumber = 43,
    kSpeedErrorSmallIgainSchedulerFieldNumber = 44,
    kSpeedErrorSmallDgainSchedulerFieldNumber = 45,
    kSpeedErrorDecelPgainSchedulerFieldNumber = 46,
    kSpeedErrorDecelIgainSchedulerFieldNumber = 47,
    kSpeedErrorDecelDgainSchedulerFieldNumber = 48,
    kSpeedPidConfFieldNumber = 50,
    kSlopeOffsetCompensationGainSchedulerFieldNumber = 53,
    kTsFieldNumber = 1,
    kBrakeMinimumActionFieldNumber = 2,
    kThrottleMinimumActionFieldNumber = 3,
    kSpeedControllerInputLimitFieldNumber = 4,
    kStationErrorLimitFieldNumber = 5,
    kPreviewWindowFieldNumber = 6,
    kStandstillAccelerationFieldNumber = 7,
    kSwitchSpeedFieldNumber = 11,
    kSwitchSpeedWindowFieldNumber = 19,
    kEnableReverseLeadlagCompensationFieldNumber = 18,
    kEnableSpeedStationPreviewFieldNumber = 20,
    kEnableSlopeOffsetFieldNumber = 21,
    kUseAccelerationLookupLimitFieldNumber = 23,
    kUsePreviewReferenceCheckFieldNumber = 24,
    kUseSteeringCheckFieldNumber = 26,
    kUseVehicleEpbFieldNumber = 36,
    kSteerCmdIntervalFieldNumber = 25,
    kStandstillNarmalAccelerationFieldNumber = 28,
    kFullStopLongTimeFieldNumber = 29,
    kStopGainAccelerationFieldNumber = 35,
    kFullStopPathRemainGainFieldNumber = 37,
    kSpeedErrorGateFieldNumber = 49,
    kAccelerationJerkLimitUpFieldNumber = 51,
    kAccelerationJerkLimitLowFieldNumber = 52,
    kBrakeCmdSlopeFieldNumber = 54,
    kBrakeCmdBiasFieldNumber = 55,
    kThrottleCmdSlopeFieldNumber = 56,
    kThrottleCmdBiasFieldNumber = 57,
    kUseOppositeSlopeCompensationFieldNumber = 38,
    kMaxPathRemainWhenStoppedFieldNumber = 22,
    kPedestrianStopTimeFieldNumber = 27,
    kPitReplanCheckTimeFieldNumber = 32,
    kPitReplanCheckCountFieldNumber = 33,
    kEpbChangeCountFieldNumber = 34,
  };
  // optional .control.PidConf station_pid_conf = 8;
  bool has_station_pid_conf() const;
  private:
  bool _internal_has_station_pid_conf() const;
  public:
  void clear_station_pid_conf();
  const ::control::PidConf& station_pid_conf() const;
  ::control::PidConf* release_station_pid_conf();
  ::control::PidConf* mutable_station_pid_conf();
  void set_allocated_station_pid_conf(::control::PidConf* station_pid_conf);
  private:
  const ::control::PidConf& _internal_station_pid_conf() const;
  ::control::PidConf* _internal_mutable_station_pid_conf();
  public:
  void unsafe_arena_set_allocated_station_pid_conf(
      ::control::PidConf* station_pid_conf);
  ::control::PidConf* unsafe_arena_release_station_pid_conf();

  // optional .control.PidConf low_speed_pid_conf = 9;
  bool has_low_speed_pid_conf() const;
  private:
  bool _internal_has_low_speed_pid_conf() const;
  public:
  void clear_low_speed_pid_conf();
  const ::control::PidConf& low_speed_pid_conf() const;
  ::control::PidConf* release_low_speed_pid_conf();
  ::control::PidConf* mutable_low_speed_pid_conf();
  void set_allocated_low_speed_pid_conf(::control::PidConf* low_speed_pid_conf);
  private:
  const ::control::PidConf& _internal_low_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_low_speed_pid_conf();
  public:
  void unsafe_arena_set_allocated_low_speed_pid_conf(
      ::control::PidConf* low_speed_pid_conf);
  ::control::PidConf* unsafe_arena_release_low_speed_pid_conf();

  // optional .control.PidConf high_speed_pid_conf = 10;
  bool has_high_speed_pid_conf() const;
  private:
  bool _internal_has_high_speed_pid_conf() const;
  public:
  void clear_high_speed_pid_conf();
  const ::control::PidConf& high_speed_pid_conf() const;
  ::control::PidConf* release_high_speed_pid_conf();
  ::control::PidConf* mutable_high_speed_pid_conf();
  void set_allocated_high_speed_pid_conf(::control::PidConf* high_speed_pid_conf);
  private:
  const ::control::PidConf& _internal_high_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_high_speed_pid_conf();
  public:
  void unsafe_arena_set_allocated_high_speed_pid_conf(
      ::control::PidConf* high_speed_pid_conf);
  ::control::PidConf* unsafe_arena_release_high_speed_pid_conf();

  // optional .control.PidConf reverse_station_pid_conf = 12;
  bool has_reverse_station_pid_conf() const;
  private:
  bool _internal_has_reverse_station_pid_conf() const;
  public:
  void clear_reverse_station_pid_conf();
  const ::control::PidConf& reverse_station_pid_conf() const;
  ::control::PidConf* release_reverse_station_pid_conf();
  ::control::PidConf* mutable_reverse_station_pid_conf();
  void set_allocated_reverse_station_pid_conf(::control::PidConf* reverse_station_pid_conf);
  private:
  const ::control::PidConf& _internal_reverse_station_pid_conf() const;
  ::control::PidConf* _internal_mutable_reverse_station_pid_conf();
  public:
  void unsafe_arena_set_allocated_reverse_station_pid_conf(
      ::control::PidConf* reverse_station_pid_conf);
  ::control::PidConf* unsafe_arena_release_reverse_station_pid_conf();

  // optional .control.PidConf reverse_speed_pid_conf = 13;
  bool has_reverse_speed_pid_conf() const;
  private:
  bool _internal_has_reverse_speed_pid_conf() const;
  public:
  void clear_reverse_speed_pid_conf();
  const ::control::PidConf& reverse_speed_pid_conf() const;
  ::control::PidConf* release_reverse_speed_pid_conf();
  ::control::PidConf* mutable_reverse_speed_pid_conf();
  void set_allocated_reverse_speed_pid_conf(::control::PidConf* reverse_speed_pid_conf);
  private:
  const ::control::PidConf& _internal_reverse_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_reverse_speed_pid_conf();
  public:
  void unsafe_arena_set_allocated_reverse_speed_pid_conf(
      ::control::PidConf* reverse_speed_pid_conf);
  ::control::PidConf* unsafe_arena_release_reverse_speed_pid_conf();

  // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
  bool has_pitch_angle_filter_conf() const;
  private:
  bool _internal_has_pitch_angle_filter_conf() const;
  public:
  void clear_pitch_angle_filter_conf();
  const ::control::lonpid::FilterConf& pitch_angle_filter_conf() const;
  ::control::lonpid::FilterConf* release_pitch_angle_filter_conf();
  ::control::lonpid::FilterConf* mutable_pitch_angle_filter_conf();
  void set_allocated_pitch_angle_filter_conf(::control::lonpid::FilterConf* pitch_angle_filter_conf);
  private:
  const ::control::lonpid::FilterConf& _internal_pitch_angle_filter_conf() const;
  ::control::lonpid::FilterConf* _internal_mutable_pitch_angle_filter_conf();
  public:
  void unsafe_arena_set_allocated_pitch_angle_filter_conf(
      ::control::lonpid::FilterConf* pitch_angle_filter_conf);
  ::control::lonpid::FilterConf* unsafe_arena_release_pitch_angle_filter_conf();

  // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
  bool has_reverse_station_leadlag_conf() const;
  private:
  bool _internal_has_reverse_station_leadlag_conf() const;
  public:
  void clear_reverse_station_leadlag_conf();
  const ::control::LeadlagConf& reverse_station_leadlag_conf() const;
  ::control::LeadlagConf* release_reverse_station_leadlag_conf();
  ::control::LeadlagConf* mutable_reverse_station_leadlag_conf();
  void set_allocated_reverse_station_leadlag_conf(::control::LeadlagConf* reverse_station_leadlag_conf);
  private:
  const ::control::LeadlagConf& _internal_reverse_station_leadlag_conf() const;
  ::control::LeadlagConf* _internal_mutable_reverse_station_leadlag_conf();
  public:
  void unsafe_arena_set_allocated_reverse_station_leadlag_conf(
      ::control::LeadlagConf* reverse_station_leadlag_conf);
  ::control::LeadlagConf* unsafe_arena_release_reverse_station_leadlag_conf();

  // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
  bool has_reverse_speed_leadlag_conf() const;
  private:
  bool _internal_has_reverse_speed_leadlag_conf() const;
  public:
  void clear_reverse_speed_leadlag_conf();
  const ::control::LeadlagConf& reverse_speed_leadlag_conf() const;
  ::control::LeadlagConf* release_reverse_speed_leadlag_conf();
  ::control::LeadlagConf* mutable_reverse_speed_leadlag_conf();
  void set_allocated_reverse_speed_leadlag_conf(::control::LeadlagConf* reverse_speed_leadlag_conf);
  private:
  const ::control::LeadlagConf& _internal_reverse_speed_leadlag_conf() const;
  ::control::LeadlagConf* _internal_mutable_reverse_speed_leadlag_conf();
  public:
  void unsafe_arena_set_allocated_reverse_speed_leadlag_conf(
      ::control::LeadlagConf* reverse_speed_leadlag_conf);
  ::control::LeadlagConf* unsafe_arena_release_reverse_speed_leadlag_conf();

  // optional .control.PidConf pit_station_pid_conf = 30;
  bool has_pit_station_pid_conf() const;
  private:
  bool _internal_has_pit_station_pid_conf() const;
  public:
  void clear_pit_station_pid_conf();
  const ::control::PidConf& pit_station_pid_conf() const;
  ::control::PidConf* release_pit_station_pid_conf();
  ::control::PidConf* mutable_pit_station_pid_conf();
  void set_allocated_pit_station_pid_conf(::control::PidConf* pit_station_pid_conf);
  private:
  const ::control::PidConf& _internal_pit_station_pid_conf() const;
  ::control::PidConf* _internal_mutable_pit_station_pid_conf();
  public:
  void unsafe_arena_set_allocated_pit_station_pid_conf(
      ::control::PidConf* pit_station_pid_conf);
  ::control::PidConf* unsafe_arena_release_pit_station_pid_conf();

  // optional .control.PidConf pit_speed_pid_conf = 31;
  bool has_pit_speed_pid_conf() const;
  private:
  bool _internal_has_pit_speed_pid_conf() const;
  public:
  void clear_pit_speed_pid_conf();
  const ::control::PidConf& pit_speed_pid_conf() const;
  ::control::PidConf* release_pit_speed_pid_conf();
  ::control::PidConf* mutable_pit_speed_pid_conf();
  void set_allocated_pit_speed_pid_conf(::control::PidConf* pit_speed_pid_conf);
  private:
  const ::control::PidConf& _internal_pit_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_pit_speed_pid_conf();
  public:
  void unsafe_arena_set_allocated_pit_speed_pid_conf(
      ::control::PidConf* pit_speed_pid_conf);
  ::control::PidConf* unsafe_arena_release_pit_speed_pid_conf();

  // optional .control.GainScheduler station_error_gain_scheduler = 39;
  bool has_station_error_gain_scheduler() const;
  private:
  bool _internal_has_station_error_gain_scheduler() const;
  public:
  void clear_station_error_gain_scheduler();
  const ::control::GainScheduler& station_error_gain_scheduler() const;
  ::control::GainScheduler* release_station_error_gain_scheduler();
  ::control::GainScheduler* mutable_station_error_gain_scheduler();
  void set_allocated_station_error_gain_scheduler(::control::GainScheduler* station_error_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_station_error_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_station_error_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_station_error_gain_scheduler(
      ::control::GainScheduler* station_error_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_station_error_gain_scheduler();

  // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
  bool has_speed_error_accel_pgain_scheduler() const;
  private:
  bool _internal_has_speed_error_accel_pgain_scheduler() const;
  public:
  void clear_speed_error_accel_pgain_scheduler();
  const ::control::GainScheduler& speed_error_accel_pgain_scheduler() const;
  ::control::GainScheduler* release_speed_error_accel_pgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_accel_pgain_scheduler();
  void set_allocated_speed_error_accel_pgain_scheduler(::control::GainScheduler* speed_error_accel_pgain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_accel_pgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_accel_pgain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_accel_pgain_scheduler(
      ::control::GainScheduler* speed_error_accel_pgain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_accel_pgain_scheduler();

  // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
  bool has_speed_error_accel_igain_scheduler() const;
  private:
  bool _internal_has_speed_error_accel_igain_scheduler() const;
  public:
  void clear_speed_error_accel_igain_scheduler();
  const ::control::GainScheduler& speed_error_accel_igain_scheduler() const;
  ::control::GainScheduler* release_speed_error_accel_igain_scheduler();
  ::control::GainScheduler* mutable_speed_error_accel_igain_scheduler();
  void set_allocated_speed_error_accel_igain_scheduler(::control::GainScheduler* speed_error_accel_igain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_accel_igain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_accel_igain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_accel_igain_scheduler(
      ::control::GainScheduler* speed_error_accel_igain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_accel_igain_scheduler();

  // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
  bool has_speed_error_accel_dgain_scheduler() const;
  private:
  bool _internal_has_speed_error_accel_dgain_scheduler() const;
  public:
  void clear_speed_error_accel_dgain_scheduler();
  const ::control::GainScheduler& speed_error_accel_dgain_scheduler() const;
  ::control::GainScheduler* release_speed_error_accel_dgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_accel_dgain_scheduler();
  void set_allocated_speed_error_accel_dgain_scheduler(::control::GainScheduler* speed_error_accel_dgain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_accel_dgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_accel_dgain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_accel_dgain_scheduler(
      ::control::GainScheduler* speed_error_accel_dgain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_accel_dgain_scheduler();

  // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
  bool has_speed_error_small_pgain_scheduler() const;
  private:
  bool _internal_has_speed_error_small_pgain_scheduler() const;
  public:
  void clear_speed_error_small_pgain_scheduler();
  const ::control::GainScheduler& speed_error_small_pgain_scheduler() const;
  ::control::GainScheduler* release_speed_error_small_pgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_small_pgain_scheduler();
  void set_allocated_speed_error_small_pgain_scheduler(::control::GainScheduler* speed_error_small_pgain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_small_pgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_small_pgain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_small_pgain_scheduler(
      ::control::GainScheduler* speed_error_small_pgain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_small_pgain_scheduler();

  // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
  bool has_speed_error_small_igain_scheduler() const;
  private:
  bool _internal_has_speed_error_small_igain_scheduler() const;
  public:
  void clear_speed_error_small_igain_scheduler();
  const ::control::GainScheduler& speed_error_small_igain_scheduler() const;
  ::control::GainScheduler* release_speed_error_small_igain_scheduler();
  ::control::GainScheduler* mutable_speed_error_small_igain_scheduler();
  void set_allocated_speed_error_small_igain_scheduler(::control::GainScheduler* speed_error_small_igain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_small_igain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_small_igain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_small_igain_scheduler(
      ::control::GainScheduler* speed_error_small_igain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_small_igain_scheduler();

  // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
  bool has_speed_error_small_dgain_scheduler() const;
  private:
  bool _internal_has_speed_error_small_dgain_scheduler() const;
  public:
  void clear_speed_error_small_dgain_scheduler();
  const ::control::GainScheduler& speed_error_small_dgain_scheduler() const;
  ::control::GainScheduler* release_speed_error_small_dgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_small_dgain_scheduler();
  void set_allocated_speed_error_small_dgain_scheduler(::control::GainScheduler* speed_error_small_dgain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_small_dgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_small_dgain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_small_dgain_scheduler(
      ::control::GainScheduler* speed_error_small_dgain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_small_dgain_scheduler();

  // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
  bool has_speed_error_decel_pgain_scheduler() const;
  private:
  bool _internal_has_speed_error_decel_pgain_scheduler() const;
  public:
  void clear_speed_error_decel_pgain_scheduler();
  const ::control::GainScheduler& speed_error_decel_pgain_scheduler() const;
  ::control::GainScheduler* release_speed_error_decel_pgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_decel_pgain_scheduler();
  void set_allocated_speed_error_decel_pgain_scheduler(::control::GainScheduler* speed_error_decel_pgain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_decel_pgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_decel_pgain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_decel_pgain_scheduler(
      ::control::GainScheduler* speed_error_decel_pgain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_decel_pgain_scheduler();

  // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
  bool has_speed_error_decel_igain_scheduler() const;
  private:
  bool _internal_has_speed_error_decel_igain_scheduler() const;
  public:
  void clear_speed_error_decel_igain_scheduler();
  const ::control::GainScheduler& speed_error_decel_igain_scheduler() const;
  ::control::GainScheduler* release_speed_error_decel_igain_scheduler();
  ::control::GainScheduler* mutable_speed_error_decel_igain_scheduler();
  void set_allocated_speed_error_decel_igain_scheduler(::control::GainScheduler* speed_error_decel_igain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_decel_igain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_decel_igain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_decel_igain_scheduler(
      ::control::GainScheduler* speed_error_decel_igain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_decel_igain_scheduler();

  // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
  bool has_speed_error_decel_dgain_scheduler() const;
  private:
  bool _internal_has_speed_error_decel_dgain_scheduler() const;
  public:
  void clear_speed_error_decel_dgain_scheduler();
  const ::control::GainScheduler& speed_error_decel_dgain_scheduler() const;
  ::control::GainScheduler* release_speed_error_decel_dgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_decel_dgain_scheduler();
  void set_allocated_speed_error_decel_dgain_scheduler(::control::GainScheduler* speed_error_decel_dgain_scheduler);
  private:
  const ::control::GainScheduler& _internal_speed_error_decel_dgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_decel_dgain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_error_decel_dgain_scheduler(
      ::control::GainScheduler* speed_error_decel_dgain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_speed_error_decel_dgain_scheduler();

  // optional .control.PidConf speed_pid_conf = 50;
  bool has_speed_pid_conf() const;
  private:
  bool _internal_has_speed_pid_conf() const;
  public:
  void clear_speed_pid_conf();
  const ::control::PidConf& speed_pid_conf() const;
  ::control::PidConf* release_speed_pid_conf();
  ::control::PidConf* mutable_speed_pid_conf();
  void set_allocated_speed_pid_conf(::control::PidConf* speed_pid_conf);
  private:
  const ::control::PidConf& _internal_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_speed_pid_conf();
  public:
  void unsafe_arena_set_allocated_speed_pid_conf(
      ::control::PidConf* speed_pid_conf);
  ::control::PidConf* unsafe_arena_release_speed_pid_conf();

  // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
  bool has_slope_offset_compensation_gain_scheduler() const;
  private:
  bool _internal_has_slope_offset_compensation_gain_scheduler() const;
  public:
  void clear_slope_offset_compensation_gain_scheduler();
  const ::control::GainScheduler& slope_offset_compensation_gain_scheduler() const;
  ::control::GainScheduler* release_slope_offset_compensation_gain_scheduler();
  ::control::GainScheduler* mutable_slope_offset_compensation_gain_scheduler();
  void set_allocated_slope_offset_compensation_gain_scheduler(::control::GainScheduler* slope_offset_compensation_gain_scheduler);
  private:
  const ::control::GainScheduler& _internal_slope_offset_compensation_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_offset_compensation_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_slope_offset_compensation_gain_scheduler(
      ::control::GainScheduler* slope_offset_compensation_gain_scheduler);
  ::control::GainScheduler* unsafe_arena_release_slope_offset_compensation_gain_scheduler();

  // optional double ts = 1;
  bool has_ts() const;
  private:
  bool _internal_has_ts() const;
  public:
  void clear_ts();
  double ts() const;
  void set_ts(double value);
  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);
  public:

  // optional double brake_minimum_action = 2;
  bool has_brake_minimum_action() const;
  private:
  bool _internal_has_brake_minimum_action() const;
  public:
  void clear_brake_minimum_action();
  double brake_minimum_action() const;
  void set_brake_minimum_action(double value);
  private:
  double _internal_brake_minimum_action() const;
  void _internal_set_brake_minimum_action(double value);
  public:

  // optional double throttle_minimum_action = 3;
  bool has_throttle_minimum_action() const;
  private:
  bool _internal_has_throttle_minimum_action() const;
  public:
  void clear_throttle_minimum_action();
  double throttle_minimum_action() const;
  void set_throttle_minimum_action(double value);
  private:
  double _internal_throttle_minimum_action() const;
  void _internal_set_throttle_minimum_action(double value);
  public:

  // optional double speed_controller_input_limit = 4;
  bool has_speed_controller_input_limit() const;
  private:
  bool _internal_has_speed_controller_input_limit() const;
  public:
  void clear_speed_controller_input_limit();
  double speed_controller_input_limit() const;
  void set_speed_controller_input_limit(double value);
  private:
  double _internal_speed_controller_input_limit() const;
  void _internal_set_speed_controller_input_limit(double value);
  public:

  // optional double station_error_limit = 5;
  bool has_station_error_limit() const;
  private:
  bool _internal_has_station_error_limit() const;
  public:
  void clear_station_error_limit();
  double station_error_limit() const;
  void set_station_error_limit(double value);
  private:
  double _internal_station_error_limit() const;
  void _internal_set_station_error_limit(double value);
  public:

  // optional double preview_window = 6;
  bool has_preview_window() const;
  private:
  bool _internal_has_preview_window() const;
  public:
  void clear_preview_window();
  double preview_window() const;
  void set_preview_window(double value);
  private:
  double _internal_preview_window() const;
  void _internal_set_preview_window(double value);
  public:

  // optional double standstill_acceleration = 7;
  bool has_standstill_acceleration() const;
  private:
  bool _internal_has_standstill_acceleration() const;
  public:
  void clear_standstill_acceleration();
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);
  private:
  double _internal_standstill_acceleration() const;
  void _internal_set_standstill_acceleration(double value);
  public:

  // optional double switch_speed = 11;
  bool has_switch_speed() const;
  private:
  bool _internal_has_switch_speed() const;
  public:
  void clear_switch_speed();
  double switch_speed() const;
  void set_switch_speed(double value);
  private:
  double _internal_switch_speed() const;
  void _internal_set_switch_speed(double value);
  public:

  // optional double switch_speed_window = 19 [default = 0];
  bool has_switch_speed_window() const;
  private:
  bool _internal_has_switch_speed_window() const;
  public:
  void clear_switch_speed_window();
  double switch_speed_window() const;
  void set_switch_speed_window(double value);
  private:
  double _internal_switch_speed_window() const;
  void _internal_set_switch_speed_window(double value);
  public:

  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  bool has_enable_reverse_leadlag_compensation() const;
  private:
  bool _internal_has_enable_reverse_leadlag_compensation() const;
  public:
  void clear_enable_reverse_leadlag_compensation();
  bool enable_reverse_leadlag_compensation() const;
  void set_enable_reverse_leadlag_compensation(bool value);
  private:
  bool _internal_enable_reverse_leadlag_compensation() const;
  void _internal_set_enable_reverse_leadlag_compensation(bool value);
  public:

  // optional bool enable_speed_station_preview = 20 [default = false];
  bool has_enable_speed_station_preview() const;
  private:
  bool _internal_has_enable_speed_station_preview() const;
  public:
  void clear_enable_speed_station_preview();
  bool enable_speed_station_preview() const;
  void set_enable_speed_station_preview(bool value);
  private:
  bool _internal_enable_speed_station_preview() const;
  void _internal_set_enable_speed_station_preview(bool value);
  public:

  // optional bool enable_slope_offset = 21 [default = false];
  bool has_enable_slope_offset() const;
  private:
  bool _internal_has_enable_slope_offset() const;
  public:
  void clear_enable_slope_offset();
  bool enable_slope_offset() const;
  void set_enable_slope_offset(bool value);
  private:
  bool _internal_enable_slope_offset() const;
  void _internal_set_enable_slope_offset(bool value);
  public:

  // optional bool use_acceleration_lookup_limit = 23 [default = false];
  bool has_use_acceleration_lookup_limit() const;
  private:
  bool _internal_has_use_acceleration_lookup_limit() const;
  public:
  void clear_use_acceleration_lookup_limit();
  bool use_acceleration_lookup_limit() const;
  void set_use_acceleration_lookup_limit(bool value);
  private:
  bool _internal_use_acceleration_lookup_limit() const;
  void _internal_set_use_acceleration_lookup_limit(bool value);
  public:

  // optional bool use_preview_reference_check = 24 [default = false];
  bool has_use_preview_reference_check() const;
  private:
  bool _internal_has_use_preview_reference_check() const;
  public:
  void clear_use_preview_reference_check();
  bool use_preview_reference_check() const;
  void set_use_preview_reference_check(bool value);
  private:
  bool _internal_use_preview_reference_check() const;
  void _internal_set_use_preview_reference_check(bool value);
  public:

  // optional bool use_steering_check = 26 [default = false];
  bool has_use_steering_check() const;
  private:
  bool _internal_has_use_steering_check() const;
  public:
  void clear_use_steering_check();
  bool use_steering_check() const;
  void set_use_steering_check(bool value);
  private:
  bool _internal_use_steering_check() const;
  void _internal_set_use_steering_check(bool value);
  public:

  // optional bool use_vehicle_epb = 36 [default = false];
  bool has_use_vehicle_epb() const;
  private:
  bool _internal_has_use_vehicle_epb() const;
  public:
  void clear_use_vehicle_epb();
  bool use_vehicle_epb() const;
  void set_use_vehicle_epb(bool value);
  private:
  bool _internal_use_vehicle_epb() const;
  void _internal_set_use_vehicle_epb(bool value);
  public:

  // optional double steer_cmd_interval = 25 [default = 0];
  bool has_steer_cmd_interval() const;
  private:
  bool _internal_has_steer_cmd_interval() const;
  public:
  void clear_steer_cmd_interval();
  double steer_cmd_interval() const;
  void set_steer_cmd_interval(double value);
  private:
  double _internal_steer_cmd_interval() const;
  void _internal_set_steer_cmd_interval(double value);
  public:

  // optional double standstill_narmal_acceleration = 28 [default = 0];
  bool has_standstill_narmal_acceleration() const;
  private:
  bool _internal_has_standstill_narmal_acceleration() const;
  public:
  void clear_standstill_narmal_acceleration();
  double standstill_narmal_acceleration() const;
  void set_standstill_narmal_acceleration(double value);
  private:
  double _internal_standstill_narmal_acceleration() const;
  void _internal_set_standstill_narmal_acceleration(double value);
  public:

  // optional double full_stop_long_time = 29 [default = 0];
  bool has_full_stop_long_time() const;
  private:
  bool _internal_has_full_stop_long_time() const;
  public:
  void clear_full_stop_long_time();
  double full_stop_long_time() const;
  void set_full_stop_long_time(double value);
  private:
  double _internal_full_stop_long_time() const;
  void _internal_set_full_stop_long_time(double value);
  public:

  // optional double stop_gain_acceleration = 35;
  bool has_stop_gain_acceleration() const;
  private:
  bool _internal_has_stop_gain_acceleration() const;
  public:
  void clear_stop_gain_acceleration();
  double stop_gain_acceleration() const;
  void set_stop_gain_acceleration(double value);
  private:
  double _internal_stop_gain_acceleration() const;
  void _internal_set_stop_gain_acceleration(double value);
  public:

  // optional double full_stop_path_remain_gain = 37;
  bool has_full_stop_path_remain_gain() const;
  private:
  bool _internal_has_full_stop_path_remain_gain() const;
  public:
  void clear_full_stop_path_remain_gain();
  double full_stop_path_remain_gain() const;
  void set_full_stop_path_remain_gain(double value);
  private:
  double _internal_full_stop_path_remain_gain() const;
  void _internal_set_full_stop_path_remain_gain(double value);
  public:

  // optional double speed_error_gate = 49;
  bool has_speed_error_gate() const;
  private:
  bool _internal_has_speed_error_gate() const;
  public:
  void clear_speed_error_gate();
  double speed_error_gate() const;
  void set_speed_error_gate(double value);
  private:
  double _internal_speed_error_gate() const;
  void _internal_set_speed_error_gate(double value);
  public:

  // optional double acceleration_jerk_limit_up = 51;
  bool has_acceleration_jerk_limit_up() const;
  private:
  bool _internal_has_acceleration_jerk_limit_up() const;
  public:
  void clear_acceleration_jerk_limit_up();
  double acceleration_jerk_limit_up() const;
  void set_acceleration_jerk_limit_up(double value);
  private:
  double _internal_acceleration_jerk_limit_up() const;
  void _internal_set_acceleration_jerk_limit_up(double value);
  public:

  // optional double acceleration_jerk_limit_low = 52;
  bool has_acceleration_jerk_limit_low() const;
  private:
  bool _internal_has_acceleration_jerk_limit_low() const;
  public:
  void clear_acceleration_jerk_limit_low();
  double acceleration_jerk_limit_low() const;
  void set_acceleration_jerk_limit_low(double value);
  private:
  double _internal_acceleration_jerk_limit_low() const;
  void _internal_set_acceleration_jerk_limit_low(double value);
  public:

  // optional double brake_cmd_slope = 54;
  bool has_brake_cmd_slope() const;
  private:
  bool _internal_has_brake_cmd_slope() const;
  public:
  void clear_brake_cmd_slope();
  double brake_cmd_slope() const;
  void set_brake_cmd_slope(double value);
  private:
  double _internal_brake_cmd_slope() const;
  void _internal_set_brake_cmd_slope(double value);
  public:

  // optional double brake_cmd_bias = 55;
  bool has_brake_cmd_bias() const;
  private:
  bool _internal_has_brake_cmd_bias() const;
  public:
  void clear_brake_cmd_bias();
  double brake_cmd_bias() const;
  void set_brake_cmd_bias(double value);
  private:
  double _internal_brake_cmd_bias() const;
  void _internal_set_brake_cmd_bias(double value);
  public:

  // optional double throttle_cmd_slope = 56;
  bool has_throttle_cmd_slope() const;
  private:
  bool _internal_has_throttle_cmd_slope() const;
  public:
  void clear_throttle_cmd_slope();
  double throttle_cmd_slope() const;
  void set_throttle_cmd_slope(double value);
  private:
  double _internal_throttle_cmd_slope() const;
  void _internal_set_throttle_cmd_slope(double value);
  public:

  // optional double throttle_cmd_bias = 57;
  bool has_throttle_cmd_bias() const;
  private:
  bool _internal_has_throttle_cmd_bias() const;
  public:
  void clear_throttle_cmd_bias();
  double throttle_cmd_bias() const;
  void set_throttle_cmd_bias(double value);
  private:
  double _internal_throttle_cmd_bias() const;
  void _internal_set_throttle_cmd_bias(double value);
  public:

  // optional int32 use_opposite_slope_compensation = 38 [default = 1];
  bool has_use_opposite_slope_compensation() const;
  private:
  bool _internal_has_use_opposite_slope_compensation() const;
  public:
  void clear_use_opposite_slope_compensation();
  ::PROTOBUF_NAMESPACE_ID::int32 use_opposite_slope_compensation() const;
  void set_use_opposite_slope_compensation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_opposite_slope_compensation() const;
  void _internal_set_use_opposite_slope_compensation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double max_path_remain_when_stopped = 22 [default = 0.3];
  bool has_max_path_remain_when_stopped() const;
  private:
  bool _internal_has_max_path_remain_when_stopped() const;
  public:
  void clear_max_path_remain_when_stopped();
  double max_path_remain_when_stopped() const;
  void set_max_path_remain_when_stopped(double value);
  private:
  double _internal_max_path_remain_when_stopped() const;
  void _internal_set_max_path_remain_when_stopped(double value);
  public:

  // optional double pedestrian_stop_time = 27 [default = 10];
  bool has_pedestrian_stop_time() const;
  private:
  bool _internal_has_pedestrian_stop_time() const;
  public:
  void clear_pedestrian_stop_time();
  double pedestrian_stop_time() const;
  void set_pedestrian_stop_time(double value);
  private:
  double _internal_pedestrian_stop_time() const;
  void _internal_set_pedestrian_stop_time(double value);
  public:

  // optional double pit_replan_check_time = 32 [default = 14];
  bool has_pit_replan_check_time() const;
  private:
  bool _internal_has_pit_replan_check_time() const;
  public:
  void clear_pit_replan_check_time();
  double pit_replan_check_time() const;
  void set_pit_replan_check_time(double value);
  private:
  double _internal_pit_replan_check_time() const;
  void _internal_set_pit_replan_check_time(double value);
  public:

  // optional int32 pit_replan_check_count = 33 [default = 3];
  bool has_pit_replan_check_count() const;
  private:
  bool _internal_has_pit_replan_check_count() const;
  public:
  void clear_pit_replan_check_count();
  ::PROTOBUF_NAMESPACE_ID::int32 pit_replan_check_count() const;
  void set_pit_replan_check_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pit_replan_check_count() const;
  void _internal_set_pit_replan_check_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 epb_change_count = 34 [default = 2];
  bool has_epb_change_count() const;
  private:
  bool _internal_has_epb_change_count() const;
  public:
  void clear_epb_change_count();
  ::PROTOBUF_NAMESPACE_ID::int32 epb_change_count() const;
  void set_epb_change_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epb_change_count() const;
  void _internal_set_epb_change_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.lonpid.LonBasedPidControllerConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::PidConf* station_pid_conf_;
  ::control::PidConf* low_speed_pid_conf_;
  ::control::PidConf* high_speed_pid_conf_;
  ::control::PidConf* reverse_station_pid_conf_;
  ::control::PidConf* reverse_speed_pid_conf_;
  ::control::lonpid::FilterConf* pitch_angle_filter_conf_;
  ::control::LeadlagConf* reverse_station_leadlag_conf_;
  ::control::LeadlagConf* reverse_speed_leadlag_conf_;
  ::control::PidConf* pit_station_pid_conf_;
  ::control::PidConf* pit_speed_pid_conf_;
  ::control::GainScheduler* station_error_gain_scheduler_;
  ::control::GainScheduler* speed_error_accel_pgain_scheduler_;
  ::control::GainScheduler* speed_error_accel_igain_scheduler_;
  ::control::GainScheduler* speed_error_accel_dgain_scheduler_;
  ::control::GainScheduler* speed_error_small_pgain_scheduler_;
  ::control::GainScheduler* speed_error_small_igain_scheduler_;
  ::control::GainScheduler* speed_error_small_dgain_scheduler_;
  ::control::GainScheduler* speed_error_decel_pgain_scheduler_;
  ::control::GainScheduler* speed_error_decel_igain_scheduler_;
  ::control::GainScheduler* speed_error_decel_dgain_scheduler_;
  ::control::PidConf* speed_pid_conf_;
  ::control::GainScheduler* slope_offset_compensation_gain_scheduler_;
  double ts_;
  double brake_minimum_action_;
  double throttle_minimum_action_;
  double speed_controller_input_limit_;
  double station_error_limit_;
  double preview_window_;
  double standstill_acceleration_;
  double switch_speed_;
  double switch_speed_window_;
  bool enable_reverse_leadlag_compensation_;
  bool enable_speed_station_preview_;
  bool enable_slope_offset_;
  bool use_acceleration_lookup_limit_;
  bool use_preview_reference_check_;
  bool use_steering_check_;
  bool use_vehicle_epb_;
  double steer_cmd_interval_;
  double standstill_narmal_acceleration_;
  double full_stop_long_time_;
  double stop_gain_acceleration_;
  double full_stop_path_remain_gain_;
  double speed_error_gate_;
  double acceleration_jerk_limit_up_;
  double acceleration_jerk_limit_low_;
  double brake_cmd_slope_;
  double brake_cmd_bias_;
  double throttle_cmd_slope_;
  double throttle_cmd_bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_opposite_slope_compensation_;
  double max_path_remain_when_stopped_;
  double pedestrian_stop_time_;
  double pit_replan_check_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 pit_replan_check_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 epb_change_count_;
  friend struct ::TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilterConf

// optional int32 cutoff_freq = 1;
inline bool FilterConf::_internal_has_cutoff_freq() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilterConf::has_cutoff_freq() const {
  return _internal_has_cutoff_freq();
}
inline void FilterConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterConf::_internal_cutoff_freq() const {
  return cutoff_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.lonpid.FilterConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void FilterConf::_internal_set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cutoff_freq_ = value;
}
inline void FilterConf::set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:control.lonpid.FilterConf.cutoff_freq)
}

// -------------------------------------------------------------------

// LonBasedPidControllerConf

// optional double ts = 1;
inline bool LonBasedPidControllerConf::_internal_has_ts() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_ts() const {
  return _internal_has_ts();
}
inline void LonBasedPidControllerConf::clear_ts() {
  ts_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double LonBasedPidControllerConf::_internal_ts() const {
  return ts_;
}
inline double LonBasedPidControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.ts)
  return _internal_ts();
}
inline void LonBasedPidControllerConf::_internal_set_ts(double value) {
  _has_bits_[0] |= 0x00400000u;
  ts_ = value;
}
inline void LonBasedPidControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.ts)
}

// optional double brake_minimum_action = 2;
inline bool LonBasedPidControllerConf::_internal_has_brake_minimum_action() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_brake_minimum_action() const {
  return _internal_has_brake_minimum_action();
}
inline void LonBasedPidControllerConf::clear_brake_minimum_action() {
  brake_minimum_action_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double LonBasedPidControllerConf::_internal_brake_minimum_action() const {
  return brake_minimum_action_;
}
inline double LonBasedPidControllerConf::brake_minimum_action() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.brake_minimum_action)
  return _internal_brake_minimum_action();
}
inline void LonBasedPidControllerConf::_internal_set_brake_minimum_action(double value) {
  _has_bits_[0] |= 0x00800000u;
  brake_minimum_action_ = value;
}
inline void LonBasedPidControllerConf::set_brake_minimum_action(double value) {
  _internal_set_brake_minimum_action(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.brake_minimum_action)
}

// optional double throttle_minimum_action = 3;
inline bool LonBasedPidControllerConf::_internal_has_throttle_minimum_action() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_throttle_minimum_action() const {
  return _internal_has_throttle_minimum_action();
}
inline void LonBasedPidControllerConf::clear_throttle_minimum_action() {
  throttle_minimum_action_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double LonBasedPidControllerConf::_internal_throttle_minimum_action() const {
  return throttle_minimum_action_;
}
inline double LonBasedPidControllerConf::throttle_minimum_action() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.throttle_minimum_action)
  return _internal_throttle_minimum_action();
}
inline void LonBasedPidControllerConf::_internal_set_throttle_minimum_action(double value) {
  _has_bits_[0] |= 0x01000000u;
  throttle_minimum_action_ = value;
}
inline void LonBasedPidControllerConf::set_throttle_minimum_action(double value) {
  _internal_set_throttle_minimum_action(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.throttle_minimum_action)
}

// optional double speed_controller_input_limit = 4;
inline bool LonBasedPidControllerConf::_internal_has_speed_controller_input_limit() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_controller_input_limit() const {
  return _internal_has_speed_controller_input_limit();
}
inline void LonBasedPidControllerConf::clear_speed_controller_input_limit() {
  speed_controller_input_limit_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double LonBasedPidControllerConf::_internal_speed_controller_input_limit() const {
  return speed_controller_input_limit_;
}
inline double LonBasedPidControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_controller_input_limit)
  return _internal_speed_controller_input_limit();
}
inline void LonBasedPidControllerConf::_internal_set_speed_controller_input_limit(double value) {
  _has_bits_[0] |= 0x02000000u;
  speed_controller_input_limit_ = value;
}
inline void LonBasedPidControllerConf::set_speed_controller_input_limit(double value) {
  _internal_set_speed_controller_input_limit(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.speed_controller_input_limit)
}

// optional double station_error_limit = 5;
inline bool LonBasedPidControllerConf::_internal_has_station_error_limit() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_station_error_limit() const {
  return _internal_has_station_error_limit();
}
inline void LonBasedPidControllerConf::clear_station_error_limit() {
  station_error_limit_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double LonBasedPidControllerConf::_internal_station_error_limit() const {
  return station_error_limit_;
}
inline double LonBasedPidControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.station_error_limit)
  return _internal_station_error_limit();
}
inline void LonBasedPidControllerConf::_internal_set_station_error_limit(double value) {
  _has_bits_[0] |= 0x04000000u;
  station_error_limit_ = value;
}
inline void LonBasedPidControllerConf::set_station_error_limit(double value) {
  _internal_set_station_error_limit(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.station_error_limit)
}

// optional double preview_window = 6;
inline bool LonBasedPidControllerConf::_internal_has_preview_window() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_preview_window() const {
  return _internal_has_preview_window();
}
inline void LonBasedPidControllerConf::clear_preview_window() {
  preview_window_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double LonBasedPidControllerConf::_internal_preview_window() const {
  return preview_window_;
}
inline double LonBasedPidControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.preview_window)
  return _internal_preview_window();
}
inline void LonBasedPidControllerConf::_internal_set_preview_window(double value) {
  _has_bits_[0] |= 0x08000000u;
  preview_window_ = value;
}
inline void LonBasedPidControllerConf::set_preview_window(double value) {
  _internal_set_preview_window(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.preview_window)
}

// optional double standstill_acceleration = 7;
inline bool LonBasedPidControllerConf::_internal_has_standstill_acceleration() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_standstill_acceleration() const {
  return _internal_has_standstill_acceleration();
}
inline void LonBasedPidControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double LonBasedPidControllerConf::_internal_standstill_acceleration() const {
  return standstill_acceleration_;
}
inline double LonBasedPidControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.standstill_acceleration)
  return _internal_standstill_acceleration();
}
inline void LonBasedPidControllerConf::_internal_set_standstill_acceleration(double value) {
  _has_bits_[0] |= 0x10000000u;
  standstill_acceleration_ = value;
}
inline void LonBasedPidControllerConf::set_standstill_acceleration(double value) {
  _internal_set_standstill_acceleration(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.standstill_acceleration)
}

// optional .control.PidConf station_pid_conf = 8;
inline bool LonBasedPidControllerConf::_internal_has_station_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || station_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_station_pid_conf() const {
  return _internal_has_station_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_station_pid_conf() const {
  const ::control::PidConf* p = station_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::station_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
  return _internal_station_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_station_pid_conf(
    ::control::PidConf* station_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_pid_conf_);
  }
  station_pid_conf_ = station_pid_conf;
  if (station_pid_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_station_pid_conf() {
  auto temp = unsafe_arena_release_station_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::control::PidConf* temp = station_pid_conf_;
  station_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_station_pid_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (station_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    station_pid_conf_ = p;
  }
  return station_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_station_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
  return _internal_mutable_station_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_station_pid_conf(::control::PidConf* station_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_pid_conf_);
  }
  if (station_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      station_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, station_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  station_pid_conf_ = station_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
}

// optional .control.PidConf low_speed_pid_conf = 9;
inline bool LonBasedPidControllerConf::_internal_has_low_speed_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || low_speed_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_low_speed_pid_conf() const {
  return _internal_has_low_speed_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_low_speed_pid_conf() const {
  const ::control::PidConf* p = low_speed_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::low_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
  return _internal_low_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_low_speed_pid_conf(
    ::control::PidConf* low_speed_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_speed_pid_conf_);
  }
  low_speed_pid_conf_ = low_speed_pid_conf;
  if (low_speed_pid_conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_low_speed_pid_conf() {
  auto temp = unsafe_arena_release_low_speed_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::control::PidConf* temp = low_speed_pid_conf_;
  low_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_low_speed_pid_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (low_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    low_speed_pid_conf_ = p;
  }
  return low_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
  return _internal_mutable_low_speed_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_low_speed_pid_conf(::control::PidConf* low_speed_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_speed_pid_conf_);
  }
  if (low_speed_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_speed_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      low_speed_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  low_speed_pid_conf_ = low_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
}

// optional .control.PidConf high_speed_pid_conf = 10;
inline bool LonBasedPidControllerConf::_internal_has_high_speed_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || high_speed_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_high_speed_pid_conf() const {
  return _internal_has_high_speed_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_high_speed_pid_conf() const {
  const ::control::PidConf* p = high_speed_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::high_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
  return _internal_high_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_high_speed_pid_conf(
    ::control::PidConf* high_speed_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_speed_pid_conf_);
  }
  high_speed_pid_conf_ = high_speed_pid_conf;
  if (high_speed_pid_conf) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_high_speed_pid_conf() {
  auto temp = unsafe_arena_release_high_speed_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::control::PidConf* temp = high_speed_pid_conf_;
  high_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_high_speed_pid_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (high_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    high_speed_pid_conf_ = p;
  }
  return high_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
  return _internal_mutable_high_speed_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_high_speed_pid_conf(::control::PidConf* high_speed_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_speed_pid_conf_);
  }
  if (high_speed_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_speed_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      high_speed_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  high_speed_pid_conf_ = high_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
inline bool LonBasedPidControllerConf::_internal_has_switch_speed() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_switch_speed() const {
  return _internal_has_switch_speed();
}
inline void LonBasedPidControllerConf::clear_switch_speed() {
  switch_speed_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double LonBasedPidControllerConf::_internal_switch_speed() const {
  return switch_speed_;
}
inline double LonBasedPidControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.switch_speed)
  return _internal_switch_speed();
}
inline void LonBasedPidControllerConf::_internal_set_switch_speed(double value) {
  _has_bits_[0] |= 0x20000000u;
  switch_speed_ = value;
}
inline void LonBasedPidControllerConf::set_switch_speed(double value) {
  _internal_set_switch_speed(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.switch_speed)
}

// optional .control.PidConf reverse_station_pid_conf = 12;
inline bool LonBasedPidControllerConf::_internal_has_reverse_station_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reverse_station_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_reverse_station_pid_conf() const {
  return _internal_has_reverse_station_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_reverse_station_pid_conf() const {
  const ::control::PidConf* p = reverse_station_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::reverse_station_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
  return _internal_reverse_station_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_station_pid_conf(
    ::control::PidConf* reverse_station_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_station_pid_conf_);
  }
  reverse_station_pid_conf_ = reverse_station_pid_conf;
  if (reverse_station_pid_conf) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_reverse_station_pid_conf() {
  auto temp = unsafe_arena_release_reverse_station_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_station_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::control::PidConf* temp = reverse_station_pid_conf_;
  reverse_station_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_reverse_station_pid_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (reverse_station_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    reverse_station_pid_conf_ = p;
  }
  return reverse_station_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_reverse_station_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
  return _internal_mutable_reverse_station_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_reverse_station_pid_conf(::control::PidConf* reverse_station_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_station_pid_conf_);
  }
  if (reverse_station_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_station_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      reverse_station_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_station_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reverse_station_pid_conf_ = reverse_station_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
}

// optional .control.PidConf reverse_speed_pid_conf = 13;
inline bool LonBasedPidControllerConf::_internal_has_reverse_speed_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || reverse_speed_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_reverse_speed_pid_conf() const {
  return _internal_has_reverse_speed_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_reverse_speed_pid_conf() const {
  const ::control::PidConf* p = reverse_speed_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::reverse_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
  return _internal_reverse_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_speed_pid_conf(
    ::control::PidConf* reverse_speed_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_speed_pid_conf_);
  }
  reverse_speed_pid_conf_ = reverse_speed_pid_conf;
  if (reverse_speed_pid_conf) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_reverse_speed_pid_conf() {
  auto temp = unsafe_arena_release_reverse_speed_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
  _has_bits_[0] &= ~0x00000010u;
  ::control::PidConf* temp = reverse_speed_pid_conf_;
  reverse_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_reverse_speed_pid_conf() {
  _has_bits_[0] |= 0x00000010u;
  if (reverse_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    reverse_speed_pid_conf_ = p;
  }
  return reverse_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_reverse_speed_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
  return _internal_mutable_reverse_speed_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_reverse_speed_pid_conf(::control::PidConf* reverse_speed_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_speed_pid_conf_);
  }
  if (reverse_speed_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_speed_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      reverse_speed_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  reverse_speed_pid_conf_ = reverse_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
}

// optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
inline bool LonBasedPidControllerConf::_internal_has_pitch_angle_filter_conf() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || pitch_angle_filter_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_pitch_angle_filter_conf() const {
  return _internal_has_pitch_angle_filter_conf();
}
inline void LonBasedPidControllerConf::clear_pitch_angle_filter_conf() {
  if (pitch_angle_filter_conf_ != nullptr) pitch_angle_filter_conf_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::control::lonpid::FilterConf& LonBasedPidControllerConf::_internal_pitch_angle_filter_conf() const {
  const ::control::lonpid::FilterConf* p = pitch_angle_filter_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::lonpid::FilterConf*>(
      &::control::lonpid::_FilterConf_default_instance_);
}
inline const ::control::lonpid::FilterConf& LonBasedPidControllerConf::pitch_angle_filter_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
  return _internal_pitch_angle_filter_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_pitch_angle_filter_conf(
    ::control::lonpid::FilterConf* pitch_angle_filter_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_angle_filter_conf_);
  }
  pitch_angle_filter_conf_ = pitch_angle_filter_conf;
  if (pitch_angle_filter_conf) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::release_pitch_angle_filter_conf() {
  auto temp = unsafe_arena_release_pitch_angle_filter_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::unsafe_arena_release_pitch_angle_filter_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
  _has_bits_[0] &= ~0x00000020u;
  ::control::lonpid::FilterConf* temp = pitch_angle_filter_conf_;
  pitch_angle_filter_conf_ = nullptr;
  return temp;
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::_internal_mutable_pitch_angle_filter_conf() {
  _has_bits_[0] |= 0x00000020u;
  if (pitch_angle_filter_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::lonpid::FilterConf>(GetArena());
    pitch_angle_filter_conf_ = p;
  }
  return pitch_angle_filter_conf_;
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::mutable_pitch_angle_filter_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
  return _internal_mutable_pitch_angle_filter_conf();
}
inline void LonBasedPidControllerConf::set_allocated_pitch_angle_filter_conf(::control::lonpid::FilterConf* pitch_angle_filter_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pitch_angle_filter_conf_;
  }
  if (pitch_angle_filter_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pitch_angle_filter_conf);
    if (message_arena != submessage_arena) {
      pitch_angle_filter_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch_angle_filter_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pitch_angle_filter_conf_ = pitch_angle_filter_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
}

// optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
inline bool LonBasedPidControllerConf::_internal_has_reverse_station_leadlag_conf() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || reverse_station_leadlag_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_reverse_station_leadlag_conf() const {
  return _internal_has_reverse_station_leadlag_conf();
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::_internal_reverse_station_leadlag_conf() const {
  const ::control::LeadlagConf* p = reverse_station_leadlag_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::LeadlagConf*>(
      &::control::_LeadlagConf_default_instance_);
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::reverse_station_leadlag_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
  return _internal_reverse_station_leadlag_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_station_leadlag_conf(
    ::control::LeadlagConf* reverse_station_leadlag_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_station_leadlag_conf_);
  }
  reverse_station_leadlag_conf_ = reverse_station_leadlag_conf;
  if (reverse_station_leadlag_conf) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::release_reverse_station_leadlag_conf() {
  auto temp = unsafe_arena_release_reverse_station_leadlag_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_station_leadlag_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
  _has_bits_[0] &= ~0x00000040u;
  ::control::LeadlagConf* temp = reverse_station_leadlag_conf_;
  reverse_station_leadlag_conf_ = nullptr;
  return temp;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::_internal_mutable_reverse_station_leadlag_conf() {
  _has_bits_[0] |= 0x00000040u;
  if (reverse_station_leadlag_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::LeadlagConf>(GetArena());
    reverse_station_leadlag_conf_ = p;
  }
  return reverse_station_leadlag_conf_;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::mutable_reverse_station_leadlag_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
  return _internal_mutable_reverse_station_leadlag_conf();
}
inline void LonBasedPidControllerConf::set_allocated_reverse_station_leadlag_conf(::control::LeadlagConf* reverse_station_leadlag_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_station_leadlag_conf_);
  }
  if (reverse_station_leadlag_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_station_leadlag_conf)->GetArena();
    if (message_arena != submessage_arena) {
      reverse_station_leadlag_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_station_leadlag_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  reverse_station_leadlag_conf_ = reverse_station_leadlag_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
}

// optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
inline bool LonBasedPidControllerConf::_internal_has_reverse_speed_leadlag_conf() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || reverse_speed_leadlag_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_reverse_speed_leadlag_conf() const {
  return _internal_has_reverse_speed_leadlag_conf();
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::_internal_reverse_speed_leadlag_conf() const {
  const ::control::LeadlagConf* p = reverse_speed_leadlag_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::LeadlagConf*>(
      &::control::_LeadlagConf_default_instance_);
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::reverse_speed_leadlag_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
  return _internal_reverse_speed_leadlag_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_speed_leadlag_conf(
    ::control::LeadlagConf* reverse_speed_leadlag_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_speed_leadlag_conf_);
  }
  reverse_speed_leadlag_conf_ = reverse_speed_leadlag_conf;
  if (reverse_speed_leadlag_conf) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::release_reverse_speed_leadlag_conf() {
  auto temp = unsafe_arena_release_reverse_speed_leadlag_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_speed_leadlag_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
  _has_bits_[0] &= ~0x00000080u;
  ::control::LeadlagConf* temp = reverse_speed_leadlag_conf_;
  reverse_speed_leadlag_conf_ = nullptr;
  return temp;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::_internal_mutable_reverse_speed_leadlag_conf() {
  _has_bits_[0] |= 0x00000080u;
  if (reverse_speed_leadlag_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::LeadlagConf>(GetArena());
    reverse_speed_leadlag_conf_ = p;
  }
  return reverse_speed_leadlag_conf_;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::mutable_reverse_speed_leadlag_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
  return _internal_mutable_reverse_speed_leadlag_conf();
}
inline void LonBasedPidControllerConf::set_allocated_reverse_speed_leadlag_conf(::control::LeadlagConf* reverse_speed_leadlag_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_speed_leadlag_conf_);
  }
  if (reverse_speed_leadlag_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_speed_leadlag_conf)->GetArena();
    if (message_arena != submessage_arena) {
      reverse_speed_leadlag_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_speed_leadlag_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  reverse_speed_leadlag_conf_ = reverse_speed_leadlag_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
}

// optional bool enable_reverse_leadlag_compensation = 18 [default = false];
inline bool LonBasedPidControllerConf::_internal_has_enable_reverse_leadlag_compensation() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_enable_reverse_leadlag_compensation() const {
  return _internal_has_enable_reverse_leadlag_compensation();
}
inline void LonBasedPidControllerConf::clear_enable_reverse_leadlag_compensation() {
  enable_reverse_leadlag_compensation_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool LonBasedPidControllerConf::_internal_enable_reverse_leadlag_compensation() const {
  return enable_reverse_leadlag_compensation_;
}
inline bool LonBasedPidControllerConf::enable_reverse_leadlag_compensation() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.enable_reverse_leadlag_compensation)
  return _internal_enable_reverse_leadlag_compensation();
}
inline void LonBasedPidControllerConf::_internal_set_enable_reverse_leadlag_compensation(bool value) {
  _has_bits_[0] |= 0x80000000u;
  enable_reverse_leadlag_compensation_ = value;
}
inline void LonBasedPidControllerConf::set_enable_reverse_leadlag_compensation(bool value) {
  _internal_set_enable_reverse_leadlag_compensation(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.enable_reverse_leadlag_compensation)
}

// optional double switch_speed_window = 19 [default = 0];
inline bool LonBasedPidControllerConf::_internal_has_switch_speed_window() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_switch_speed_window() const {
  return _internal_has_switch_speed_window();
}
inline void LonBasedPidControllerConf::clear_switch_speed_window() {
  switch_speed_window_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double LonBasedPidControllerConf::_internal_switch_speed_window() const {
  return switch_speed_window_;
}
inline double LonBasedPidControllerConf::switch_speed_window() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.switch_speed_window)
  return _internal_switch_speed_window();
}
inline void LonBasedPidControllerConf::_internal_set_switch_speed_window(double value) {
  _has_bits_[0] |= 0x40000000u;
  switch_speed_window_ = value;
}
inline void LonBasedPidControllerConf::set_switch_speed_window(double value) {
  _internal_set_switch_speed_window(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.switch_speed_window)
}

// optional bool enable_speed_station_preview = 20 [default = false];
inline bool LonBasedPidControllerConf::_internal_has_enable_speed_station_preview() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_enable_speed_station_preview() const {
  return _internal_has_enable_speed_station_preview();
}
inline void LonBasedPidControllerConf::clear_enable_speed_station_preview() {
  enable_speed_station_preview_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool LonBasedPidControllerConf::_internal_enable_speed_station_preview() const {
  return enable_speed_station_preview_;
}
inline bool LonBasedPidControllerConf::enable_speed_station_preview() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.enable_speed_station_preview)
  return _internal_enable_speed_station_preview();
}
inline void LonBasedPidControllerConf::_internal_set_enable_speed_station_preview(bool value) {
  _has_bits_[1] |= 0x00000001u;
  enable_speed_station_preview_ = value;
}
inline void LonBasedPidControllerConf::set_enable_speed_station_preview(bool value) {
  _internal_set_enable_speed_station_preview(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.enable_speed_station_preview)
}

// optional bool enable_slope_offset = 21 [default = false];
inline bool LonBasedPidControllerConf::_internal_has_enable_slope_offset() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_enable_slope_offset() const {
  return _internal_has_enable_slope_offset();
}
inline void LonBasedPidControllerConf::clear_enable_slope_offset() {
  enable_slope_offset_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool LonBasedPidControllerConf::_internal_enable_slope_offset() const {
  return enable_slope_offset_;
}
inline bool LonBasedPidControllerConf::enable_slope_offset() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.enable_slope_offset)
  return _internal_enable_slope_offset();
}
inline void LonBasedPidControllerConf::_internal_set_enable_slope_offset(bool value) {
  _has_bits_[1] |= 0x00000002u;
  enable_slope_offset_ = value;
}
inline void LonBasedPidControllerConf::set_enable_slope_offset(bool value) {
  _internal_set_enable_slope_offset(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.enable_slope_offset)
}

// optional double max_path_remain_when_stopped = 22 [default = 0.3];
inline bool LonBasedPidControllerConf::_internal_has_max_path_remain_when_stopped() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_max_path_remain_when_stopped() const {
  return _internal_has_max_path_remain_when_stopped();
}
inline void LonBasedPidControllerConf::clear_max_path_remain_when_stopped() {
  max_path_remain_when_stopped_ = 0.3;
  _has_bits_[1] &= ~0x00080000u;
}
inline double LonBasedPidControllerConf::_internal_max_path_remain_when_stopped() const {
  return max_path_remain_when_stopped_;
}
inline double LonBasedPidControllerConf::max_path_remain_when_stopped() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.max_path_remain_when_stopped)
  return _internal_max_path_remain_when_stopped();
}
inline void LonBasedPidControllerConf::_internal_set_max_path_remain_when_stopped(double value) {
  _has_bits_[1] |= 0x00080000u;
  max_path_remain_when_stopped_ = value;
}
inline void LonBasedPidControllerConf::set_max_path_remain_when_stopped(double value) {
  _internal_set_max_path_remain_when_stopped(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.max_path_remain_when_stopped)
}

// optional bool use_acceleration_lookup_limit = 23 [default = false];
inline bool LonBasedPidControllerConf::_internal_has_use_acceleration_lookup_limit() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_use_acceleration_lookup_limit() const {
  return _internal_has_use_acceleration_lookup_limit();
}
inline void LonBasedPidControllerConf::clear_use_acceleration_lookup_limit() {
  use_acceleration_lookup_limit_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool LonBasedPidControllerConf::_internal_use_acceleration_lookup_limit() const {
  return use_acceleration_lookup_limit_;
}
inline bool LonBasedPidControllerConf::use_acceleration_lookup_limit() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_acceleration_lookup_limit)
  return _internal_use_acceleration_lookup_limit();
}
inline void LonBasedPidControllerConf::_internal_set_use_acceleration_lookup_limit(bool value) {
  _has_bits_[1] |= 0x00000004u;
  use_acceleration_lookup_limit_ = value;
}
inline void LonBasedPidControllerConf::set_use_acceleration_lookup_limit(bool value) {
  _internal_set_use_acceleration_lookup_limit(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_acceleration_lookup_limit)
}

// optional bool use_preview_reference_check = 24 [default = false];
inline bool LonBasedPidControllerConf::_internal_has_use_preview_reference_check() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_use_preview_reference_check() const {
  return _internal_has_use_preview_reference_check();
}
inline void LonBasedPidControllerConf::clear_use_preview_reference_check() {
  use_preview_reference_check_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool LonBasedPidControllerConf::_internal_use_preview_reference_check() const {
  return use_preview_reference_check_;
}
inline bool LonBasedPidControllerConf::use_preview_reference_check() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_preview_reference_check)
  return _internal_use_preview_reference_check();
}
inline void LonBasedPidControllerConf::_internal_set_use_preview_reference_check(bool value) {
  _has_bits_[1] |= 0x00000008u;
  use_preview_reference_check_ = value;
}
inline void LonBasedPidControllerConf::set_use_preview_reference_check(bool value) {
  _internal_set_use_preview_reference_check(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_preview_reference_check)
}

// optional double steer_cmd_interval = 25 [default = 0];
inline bool LonBasedPidControllerConf::_internal_has_steer_cmd_interval() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_steer_cmd_interval() const {
  return _internal_has_steer_cmd_interval();
}
inline void LonBasedPidControllerConf::clear_steer_cmd_interval() {
  steer_cmd_interval_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline double LonBasedPidControllerConf::_internal_steer_cmd_interval() const {
  return steer_cmd_interval_;
}
inline double LonBasedPidControllerConf::steer_cmd_interval() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.steer_cmd_interval)
  return _internal_steer_cmd_interval();
}
inline void LonBasedPidControllerConf::_internal_set_steer_cmd_interval(double value) {
  _has_bits_[1] |= 0x00000040u;
  steer_cmd_interval_ = value;
}
inline void LonBasedPidControllerConf::set_steer_cmd_interval(double value) {
  _internal_set_steer_cmd_interval(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.steer_cmd_interval)
}

// optional bool use_steering_check = 26 [default = false];
inline bool LonBasedPidControllerConf::_internal_has_use_steering_check() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_use_steering_check() const {
  return _internal_has_use_steering_check();
}
inline void LonBasedPidControllerConf::clear_use_steering_check() {
  use_steering_check_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool LonBasedPidControllerConf::_internal_use_steering_check() const {
  return use_steering_check_;
}
inline bool LonBasedPidControllerConf::use_steering_check() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_steering_check)
  return _internal_use_steering_check();
}
inline void LonBasedPidControllerConf::_internal_set_use_steering_check(bool value) {
  _has_bits_[1] |= 0x00000010u;
  use_steering_check_ = value;
}
inline void LonBasedPidControllerConf::set_use_steering_check(bool value) {
  _internal_set_use_steering_check(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_steering_check)
}

// optional double pedestrian_stop_time = 27 [default = 10];
inline bool LonBasedPidControllerConf::_internal_has_pedestrian_stop_time() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_pedestrian_stop_time() const {
  return _internal_has_pedestrian_stop_time();
}
inline void LonBasedPidControllerConf::clear_pedestrian_stop_time() {
  pedestrian_stop_time_ = 10;
  _has_bits_[1] &= ~0x00100000u;
}
inline double LonBasedPidControllerConf::_internal_pedestrian_stop_time() const {
  return pedestrian_stop_time_;
}
inline double LonBasedPidControllerConf::pedestrian_stop_time() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pedestrian_stop_time)
  return _internal_pedestrian_stop_time();
}
inline void LonBasedPidControllerConf::_internal_set_pedestrian_stop_time(double value) {
  _has_bits_[1] |= 0x00100000u;
  pedestrian_stop_time_ = value;
}
inline void LonBasedPidControllerConf::set_pedestrian_stop_time(double value) {
  _internal_set_pedestrian_stop_time(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.pedestrian_stop_time)
}

// optional double standstill_narmal_acceleration = 28 [default = 0];
inline bool LonBasedPidControllerConf::_internal_has_standstill_narmal_acceleration() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_standstill_narmal_acceleration() const {
  return _internal_has_standstill_narmal_acceleration();
}
inline void LonBasedPidControllerConf::clear_standstill_narmal_acceleration() {
  standstill_narmal_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline double LonBasedPidControllerConf::_internal_standstill_narmal_acceleration() const {
  return standstill_narmal_acceleration_;
}
inline double LonBasedPidControllerConf::standstill_narmal_acceleration() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.standstill_narmal_acceleration)
  return _internal_standstill_narmal_acceleration();
}
inline void LonBasedPidControllerConf::_internal_set_standstill_narmal_acceleration(double value) {
  _has_bits_[1] |= 0x00000080u;
  standstill_narmal_acceleration_ = value;
}
inline void LonBasedPidControllerConf::set_standstill_narmal_acceleration(double value) {
  _internal_set_standstill_narmal_acceleration(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.standstill_narmal_acceleration)
}

// optional double full_stop_long_time = 29 [default = 0];
inline bool LonBasedPidControllerConf::_internal_has_full_stop_long_time() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_full_stop_long_time() const {
  return _internal_has_full_stop_long_time();
}
inline void LonBasedPidControllerConf::clear_full_stop_long_time() {
  full_stop_long_time_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline double LonBasedPidControllerConf::_internal_full_stop_long_time() const {
  return full_stop_long_time_;
}
inline double LonBasedPidControllerConf::full_stop_long_time() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.full_stop_long_time)
  return _internal_full_stop_long_time();
}
inline void LonBasedPidControllerConf::_internal_set_full_stop_long_time(double value) {
  _has_bits_[1] |= 0x00000100u;
  full_stop_long_time_ = value;
}
inline void LonBasedPidControllerConf::set_full_stop_long_time(double value) {
  _internal_set_full_stop_long_time(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.full_stop_long_time)
}

// optional .control.PidConf pit_station_pid_conf = 30;
inline bool LonBasedPidControllerConf::_internal_has_pit_station_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || pit_station_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_pit_station_pid_conf() const {
  return _internal_has_pit_station_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_pit_station_pid_conf() const {
  const ::control::PidConf* p = pit_station_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::pit_station_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
  return _internal_pit_station_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_pit_station_pid_conf(
    ::control::PidConf* pit_station_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pit_station_pid_conf_);
  }
  pit_station_pid_conf_ = pit_station_pid_conf;
  if (pit_station_pid_conf) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_pit_station_pid_conf() {
  auto temp = unsafe_arena_release_pit_station_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_pit_station_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
  _has_bits_[0] &= ~0x00000100u;
  ::control::PidConf* temp = pit_station_pid_conf_;
  pit_station_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_pit_station_pid_conf() {
  _has_bits_[0] |= 0x00000100u;
  if (pit_station_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    pit_station_pid_conf_ = p;
  }
  return pit_station_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_pit_station_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
  return _internal_mutable_pit_station_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_pit_station_pid_conf(::control::PidConf* pit_station_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pit_station_pid_conf_);
  }
  if (pit_station_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pit_station_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      pit_station_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pit_station_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  pit_station_pid_conf_ = pit_station_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
}

// optional .control.PidConf pit_speed_pid_conf = 31;
inline bool LonBasedPidControllerConf::_internal_has_pit_speed_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || pit_speed_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_pit_speed_pid_conf() const {
  return _internal_has_pit_speed_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_pit_speed_pid_conf() const {
  const ::control::PidConf* p = pit_speed_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::pit_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
  return _internal_pit_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_pit_speed_pid_conf(
    ::control::PidConf* pit_speed_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pit_speed_pid_conf_);
  }
  pit_speed_pid_conf_ = pit_speed_pid_conf;
  if (pit_speed_pid_conf) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_pit_speed_pid_conf() {
  auto temp = unsafe_arena_release_pit_speed_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_pit_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
  _has_bits_[0] &= ~0x00000200u;
  ::control::PidConf* temp = pit_speed_pid_conf_;
  pit_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_pit_speed_pid_conf() {
  _has_bits_[0] |= 0x00000200u;
  if (pit_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    pit_speed_pid_conf_ = p;
  }
  return pit_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_pit_speed_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
  return _internal_mutable_pit_speed_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_pit_speed_pid_conf(::control::PidConf* pit_speed_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pit_speed_pid_conf_);
  }
  if (pit_speed_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pit_speed_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      pit_speed_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pit_speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  pit_speed_pid_conf_ = pit_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
}

// optional double pit_replan_check_time = 32 [default = 14];
inline bool LonBasedPidControllerConf::_internal_has_pit_replan_check_time() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_pit_replan_check_time() const {
  return _internal_has_pit_replan_check_time();
}
inline void LonBasedPidControllerConf::clear_pit_replan_check_time() {
  pit_replan_check_time_ = 14;
  _has_bits_[1] &= ~0x00200000u;
}
inline double LonBasedPidControllerConf::_internal_pit_replan_check_time() const {
  return pit_replan_check_time_;
}
inline double LonBasedPidControllerConf::pit_replan_check_time() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_replan_check_time)
  return _internal_pit_replan_check_time();
}
inline void LonBasedPidControllerConf::_internal_set_pit_replan_check_time(double value) {
  _has_bits_[1] |= 0x00200000u;
  pit_replan_check_time_ = value;
}
inline void LonBasedPidControllerConf::set_pit_replan_check_time(double value) {
  _internal_set_pit_replan_check_time(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.pit_replan_check_time)
}

// optional int32 pit_replan_check_count = 33 [default = 3];
inline bool LonBasedPidControllerConf::_internal_has_pit_replan_check_count() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_pit_replan_check_count() const {
  return _internal_has_pit_replan_check_count();
}
inline void LonBasedPidControllerConf::clear_pit_replan_check_count() {
  pit_replan_check_count_ = 3;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LonBasedPidControllerConf::_internal_pit_replan_check_count() const {
  return pit_replan_check_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LonBasedPidControllerConf::pit_replan_check_count() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_replan_check_count)
  return _internal_pit_replan_check_count();
}
inline void LonBasedPidControllerConf::_internal_set_pit_replan_check_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00400000u;
  pit_replan_check_count_ = value;
}
inline void LonBasedPidControllerConf::set_pit_replan_check_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pit_replan_check_count(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.pit_replan_check_count)
}

// optional int32 epb_change_count = 34 [default = 2];
inline bool LonBasedPidControllerConf::_internal_has_epb_change_count() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_epb_change_count() const {
  return _internal_has_epb_change_count();
}
inline void LonBasedPidControllerConf::clear_epb_change_count() {
  epb_change_count_ = 2;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LonBasedPidControllerConf::_internal_epb_change_count() const {
  return epb_change_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LonBasedPidControllerConf::epb_change_count() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.epb_change_count)
  return _internal_epb_change_count();
}
inline void LonBasedPidControllerConf::_internal_set_epb_change_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00800000u;
  epb_change_count_ = value;
}
inline void LonBasedPidControllerConf::set_epb_change_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epb_change_count(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.epb_change_count)
}

// optional double stop_gain_acceleration = 35;
inline bool LonBasedPidControllerConf::_internal_has_stop_gain_acceleration() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_stop_gain_acceleration() const {
  return _internal_has_stop_gain_acceleration();
}
inline void LonBasedPidControllerConf::clear_stop_gain_acceleration() {
  stop_gain_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline double LonBasedPidControllerConf::_internal_stop_gain_acceleration() const {
  return stop_gain_acceleration_;
}
inline double LonBasedPidControllerConf::stop_gain_acceleration() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.stop_gain_acceleration)
  return _internal_stop_gain_acceleration();
}
inline void LonBasedPidControllerConf::_internal_set_stop_gain_acceleration(double value) {
  _has_bits_[1] |= 0x00000200u;
  stop_gain_acceleration_ = value;
}
inline void LonBasedPidControllerConf::set_stop_gain_acceleration(double value) {
  _internal_set_stop_gain_acceleration(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.stop_gain_acceleration)
}

// optional bool use_vehicle_epb = 36 [default = false];
inline bool LonBasedPidControllerConf::_internal_has_use_vehicle_epb() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_use_vehicle_epb() const {
  return _internal_has_use_vehicle_epb();
}
inline void LonBasedPidControllerConf::clear_use_vehicle_epb() {
  use_vehicle_epb_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool LonBasedPidControllerConf::_internal_use_vehicle_epb() const {
  return use_vehicle_epb_;
}
inline bool LonBasedPidControllerConf::use_vehicle_epb() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_vehicle_epb)
  return _internal_use_vehicle_epb();
}
inline void LonBasedPidControllerConf::_internal_set_use_vehicle_epb(bool value) {
  _has_bits_[1] |= 0x00000020u;
  use_vehicle_epb_ = value;
}
inline void LonBasedPidControllerConf::set_use_vehicle_epb(bool value) {
  _internal_set_use_vehicle_epb(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_vehicle_epb)
}

// optional double full_stop_path_remain_gain = 37;
inline bool LonBasedPidControllerConf::_internal_has_full_stop_path_remain_gain() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_full_stop_path_remain_gain() const {
  return _internal_has_full_stop_path_remain_gain();
}
inline void LonBasedPidControllerConf::clear_full_stop_path_remain_gain() {
  full_stop_path_remain_gain_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline double LonBasedPidControllerConf::_internal_full_stop_path_remain_gain() const {
  return full_stop_path_remain_gain_;
}
inline double LonBasedPidControllerConf::full_stop_path_remain_gain() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.full_stop_path_remain_gain)
  return _internal_full_stop_path_remain_gain();
}
inline void LonBasedPidControllerConf::_internal_set_full_stop_path_remain_gain(double value) {
  _has_bits_[1] |= 0x00000400u;
  full_stop_path_remain_gain_ = value;
}
inline void LonBasedPidControllerConf::set_full_stop_path_remain_gain(double value) {
  _internal_set_full_stop_path_remain_gain(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.full_stop_path_remain_gain)
}

// optional int32 use_opposite_slope_compensation = 38 [default = 1];
inline bool LonBasedPidControllerConf::_internal_has_use_opposite_slope_compensation() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_use_opposite_slope_compensation() const {
  return _internal_has_use_opposite_slope_compensation();
}
inline void LonBasedPidControllerConf::clear_use_opposite_slope_compensation() {
  use_opposite_slope_compensation_ = 1;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LonBasedPidControllerConf::_internal_use_opposite_slope_compensation() const {
  return use_opposite_slope_compensation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LonBasedPidControllerConf::use_opposite_slope_compensation() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_opposite_slope_compensation)
  return _internal_use_opposite_slope_compensation();
}
inline void LonBasedPidControllerConf::_internal_set_use_opposite_slope_compensation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00040000u;
  use_opposite_slope_compensation_ = value;
}
inline void LonBasedPidControllerConf::set_use_opposite_slope_compensation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_opposite_slope_compensation(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_opposite_slope_compensation)
}

// optional .control.GainScheduler station_error_gain_scheduler = 39;
inline bool LonBasedPidControllerConf::_internal_has_station_error_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || station_error_gain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_station_error_gain_scheduler() const {
  return _internal_has_station_error_gain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_station_error_gain_scheduler() const {
  const ::control::GainScheduler* p = station_error_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::station_error_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
  return _internal_station_error_gain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_station_error_gain_scheduler(
    ::control::GainScheduler* station_error_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_error_gain_scheduler_);
  }
  station_error_gain_scheduler_ = station_error_gain_scheduler;
  if (station_error_gain_scheduler) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_station_error_gain_scheduler() {
  auto temp = unsafe_arena_release_station_error_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_station_error_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
  _has_bits_[0] &= ~0x00000400u;
  ::control::GainScheduler* temp = station_error_gain_scheduler_;
  station_error_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_station_error_gain_scheduler() {
  _has_bits_[0] |= 0x00000400u;
  if (station_error_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    station_error_gain_scheduler_ = p;
  }
  return station_error_gain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_station_error_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
  return _internal_mutable_station_error_gain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_station_error_gain_scheduler(::control::GainScheduler* station_error_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_error_gain_scheduler_);
  }
  if (station_error_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_error_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      station_error_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, station_error_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  station_error_gain_scheduler_ = station_error_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
}

// optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_accel_pgain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_accel_pgain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_accel_pgain_scheduler() const {
  return _internal_has_speed_error_accel_pgain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_accel_pgain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_accel_pgain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_accel_pgain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
  return _internal_speed_error_accel_pgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_accel_pgain_scheduler(
    ::control::GainScheduler* speed_error_accel_pgain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_pgain_scheduler_);
  }
  speed_error_accel_pgain_scheduler_ = speed_error_accel_pgain_scheduler;
  if (speed_error_accel_pgain_scheduler) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_accel_pgain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_accel_pgain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_accel_pgain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
  _has_bits_[0] &= ~0x00000800u;
  ::control::GainScheduler* temp = speed_error_accel_pgain_scheduler_;
  speed_error_accel_pgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_accel_pgain_scheduler() {
  _has_bits_[0] |= 0x00000800u;
  if (speed_error_accel_pgain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_accel_pgain_scheduler_ = p;
  }
  return speed_error_accel_pgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_accel_pgain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
  return _internal_mutable_speed_error_accel_pgain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_accel_pgain_scheduler(::control::GainScheduler* speed_error_accel_pgain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_pgain_scheduler_);
  }
  if (speed_error_accel_pgain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_pgain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_accel_pgain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_accel_pgain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  speed_error_accel_pgain_scheduler_ = speed_error_accel_pgain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
}

// optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_accel_igain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_accel_igain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_accel_igain_scheduler() const {
  return _internal_has_speed_error_accel_igain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_accel_igain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_accel_igain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_accel_igain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
  return _internal_speed_error_accel_igain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_accel_igain_scheduler(
    ::control::GainScheduler* speed_error_accel_igain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_igain_scheduler_);
  }
  speed_error_accel_igain_scheduler_ = speed_error_accel_igain_scheduler;
  if (speed_error_accel_igain_scheduler) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_accel_igain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_accel_igain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_accel_igain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
  _has_bits_[0] &= ~0x00001000u;
  ::control::GainScheduler* temp = speed_error_accel_igain_scheduler_;
  speed_error_accel_igain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_accel_igain_scheduler() {
  _has_bits_[0] |= 0x00001000u;
  if (speed_error_accel_igain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_accel_igain_scheduler_ = p;
  }
  return speed_error_accel_igain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_accel_igain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
  return _internal_mutable_speed_error_accel_igain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_accel_igain_scheduler(::control::GainScheduler* speed_error_accel_igain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_igain_scheduler_);
  }
  if (speed_error_accel_igain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_igain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_accel_igain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_accel_igain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  speed_error_accel_igain_scheduler_ = speed_error_accel_igain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
}

// optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_accel_dgain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_accel_dgain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_accel_dgain_scheduler() const {
  return _internal_has_speed_error_accel_dgain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_accel_dgain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_accel_dgain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_accel_dgain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
  return _internal_speed_error_accel_dgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_accel_dgain_scheduler(
    ::control::GainScheduler* speed_error_accel_dgain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_dgain_scheduler_);
  }
  speed_error_accel_dgain_scheduler_ = speed_error_accel_dgain_scheduler;
  if (speed_error_accel_dgain_scheduler) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_accel_dgain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_accel_dgain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_accel_dgain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
  _has_bits_[0] &= ~0x00002000u;
  ::control::GainScheduler* temp = speed_error_accel_dgain_scheduler_;
  speed_error_accel_dgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_accel_dgain_scheduler() {
  _has_bits_[0] |= 0x00002000u;
  if (speed_error_accel_dgain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_accel_dgain_scheduler_ = p;
  }
  return speed_error_accel_dgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_accel_dgain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
  return _internal_mutable_speed_error_accel_dgain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_accel_dgain_scheduler(::control::GainScheduler* speed_error_accel_dgain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_dgain_scheduler_);
  }
  if (speed_error_accel_dgain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_accel_dgain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_accel_dgain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_accel_dgain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  speed_error_accel_dgain_scheduler_ = speed_error_accel_dgain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
}

// optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_small_pgain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_small_pgain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_small_pgain_scheduler() const {
  return _internal_has_speed_error_small_pgain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_small_pgain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_small_pgain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_small_pgain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
  return _internal_speed_error_small_pgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_small_pgain_scheduler(
    ::control::GainScheduler* speed_error_small_pgain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_pgain_scheduler_);
  }
  speed_error_small_pgain_scheduler_ = speed_error_small_pgain_scheduler;
  if (speed_error_small_pgain_scheduler) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_small_pgain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_small_pgain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_small_pgain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
  _has_bits_[0] &= ~0x00004000u;
  ::control::GainScheduler* temp = speed_error_small_pgain_scheduler_;
  speed_error_small_pgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_small_pgain_scheduler() {
  _has_bits_[0] |= 0x00004000u;
  if (speed_error_small_pgain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_small_pgain_scheduler_ = p;
  }
  return speed_error_small_pgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_small_pgain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
  return _internal_mutable_speed_error_small_pgain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_small_pgain_scheduler(::control::GainScheduler* speed_error_small_pgain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_pgain_scheduler_);
  }
  if (speed_error_small_pgain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_pgain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_small_pgain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_small_pgain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  speed_error_small_pgain_scheduler_ = speed_error_small_pgain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
}

// optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_small_igain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_small_igain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_small_igain_scheduler() const {
  return _internal_has_speed_error_small_igain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_small_igain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_small_igain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_small_igain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
  return _internal_speed_error_small_igain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_small_igain_scheduler(
    ::control::GainScheduler* speed_error_small_igain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_igain_scheduler_);
  }
  speed_error_small_igain_scheduler_ = speed_error_small_igain_scheduler;
  if (speed_error_small_igain_scheduler) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_small_igain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_small_igain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_small_igain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
  _has_bits_[0] &= ~0x00008000u;
  ::control::GainScheduler* temp = speed_error_small_igain_scheduler_;
  speed_error_small_igain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_small_igain_scheduler() {
  _has_bits_[0] |= 0x00008000u;
  if (speed_error_small_igain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_small_igain_scheduler_ = p;
  }
  return speed_error_small_igain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_small_igain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
  return _internal_mutable_speed_error_small_igain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_small_igain_scheduler(::control::GainScheduler* speed_error_small_igain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_igain_scheduler_);
  }
  if (speed_error_small_igain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_igain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_small_igain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_small_igain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  speed_error_small_igain_scheduler_ = speed_error_small_igain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
}

// optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_small_dgain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_small_dgain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_small_dgain_scheduler() const {
  return _internal_has_speed_error_small_dgain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_small_dgain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_small_dgain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_small_dgain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
  return _internal_speed_error_small_dgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_small_dgain_scheduler(
    ::control::GainScheduler* speed_error_small_dgain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_dgain_scheduler_);
  }
  speed_error_small_dgain_scheduler_ = speed_error_small_dgain_scheduler;
  if (speed_error_small_dgain_scheduler) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_small_dgain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_small_dgain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_small_dgain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
  _has_bits_[0] &= ~0x00010000u;
  ::control::GainScheduler* temp = speed_error_small_dgain_scheduler_;
  speed_error_small_dgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_small_dgain_scheduler() {
  _has_bits_[0] |= 0x00010000u;
  if (speed_error_small_dgain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_small_dgain_scheduler_ = p;
  }
  return speed_error_small_dgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_small_dgain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
  return _internal_mutable_speed_error_small_dgain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_small_dgain_scheduler(::control::GainScheduler* speed_error_small_dgain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_dgain_scheduler_);
  }
  if (speed_error_small_dgain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_small_dgain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_small_dgain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_small_dgain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  speed_error_small_dgain_scheduler_ = speed_error_small_dgain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
}

// optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_decel_pgain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_decel_pgain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_decel_pgain_scheduler() const {
  return _internal_has_speed_error_decel_pgain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_decel_pgain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_decel_pgain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_decel_pgain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
  return _internal_speed_error_decel_pgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_decel_pgain_scheduler(
    ::control::GainScheduler* speed_error_decel_pgain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_pgain_scheduler_);
  }
  speed_error_decel_pgain_scheduler_ = speed_error_decel_pgain_scheduler;
  if (speed_error_decel_pgain_scheduler) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_decel_pgain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_decel_pgain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_decel_pgain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
  _has_bits_[0] &= ~0x00020000u;
  ::control::GainScheduler* temp = speed_error_decel_pgain_scheduler_;
  speed_error_decel_pgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_decel_pgain_scheduler() {
  _has_bits_[0] |= 0x00020000u;
  if (speed_error_decel_pgain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_decel_pgain_scheduler_ = p;
  }
  return speed_error_decel_pgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_decel_pgain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
  return _internal_mutable_speed_error_decel_pgain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_decel_pgain_scheduler(::control::GainScheduler* speed_error_decel_pgain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_pgain_scheduler_);
  }
  if (speed_error_decel_pgain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_pgain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_decel_pgain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_decel_pgain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  speed_error_decel_pgain_scheduler_ = speed_error_decel_pgain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
}

// optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_decel_igain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_decel_igain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_decel_igain_scheduler() const {
  return _internal_has_speed_error_decel_igain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_decel_igain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_decel_igain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_decel_igain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
  return _internal_speed_error_decel_igain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_decel_igain_scheduler(
    ::control::GainScheduler* speed_error_decel_igain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_igain_scheduler_);
  }
  speed_error_decel_igain_scheduler_ = speed_error_decel_igain_scheduler;
  if (speed_error_decel_igain_scheduler) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_decel_igain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_decel_igain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_decel_igain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
  _has_bits_[0] &= ~0x00040000u;
  ::control::GainScheduler* temp = speed_error_decel_igain_scheduler_;
  speed_error_decel_igain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_decel_igain_scheduler() {
  _has_bits_[0] |= 0x00040000u;
  if (speed_error_decel_igain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_decel_igain_scheduler_ = p;
  }
  return speed_error_decel_igain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_decel_igain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
  return _internal_mutable_speed_error_decel_igain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_decel_igain_scheduler(::control::GainScheduler* speed_error_decel_igain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_igain_scheduler_);
  }
  if (speed_error_decel_igain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_igain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_decel_igain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_decel_igain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  speed_error_decel_igain_scheduler_ = speed_error_decel_igain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
}

// optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_decel_dgain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || speed_error_decel_dgain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_decel_dgain_scheduler() const {
  return _internal_has_speed_error_decel_dgain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_decel_dgain_scheduler() const {
  const ::control::GainScheduler* p = speed_error_decel_dgain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_decel_dgain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
  return _internal_speed_error_decel_dgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_decel_dgain_scheduler(
    ::control::GainScheduler* speed_error_decel_dgain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_dgain_scheduler_);
  }
  speed_error_decel_dgain_scheduler_ = speed_error_decel_dgain_scheduler;
  if (speed_error_decel_dgain_scheduler) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_decel_dgain_scheduler() {
  auto temp = unsafe_arena_release_speed_error_decel_dgain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_decel_dgain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
  _has_bits_[0] &= ~0x00080000u;
  ::control::GainScheduler* temp = speed_error_decel_dgain_scheduler_;
  speed_error_decel_dgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_decel_dgain_scheduler() {
  _has_bits_[0] |= 0x00080000u;
  if (speed_error_decel_dgain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    speed_error_decel_dgain_scheduler_ = p;
  }
  return speed_error_decel_dgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_decel_dgain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
  return _internal_mutable_speed_error_decel_dgain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_decel_dgain_scheduler(::control::GainScheduler* speed_error_decel_dgain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_dgain_scheduler_);
  }
  if (speed_error_decel_dgain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_error_decel_dgain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      speed_error_decel_dgain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_error_decel_dgain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  speed_error_decel_dgain_scheduler_ = speed_error_decel_dgain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
}

// optional double speed_error_gate = 49;
inline bool LonBasedPidControllerConf::_internal_has_speed_error_gate() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_error_gate() const {
  return _internal_has_speed_error_gate();
}
inline void LonBasedPidControllerConf::clear_speed_error_gate() {
  speed_error_gate_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline double LonBasedPidControllerConf::_internal_speed_error_gate() const {
  return speed_error_gate_;
}
inline double LonBasedPidControllerConf::speed_error_gate() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_gate)
  return _internal_speed_error_gate();
}
inline void LonBasedPidControllerConf::_internal_set_speed_error_gate(double value) {
  _has_bits_[1] |= 0x00000800u;
  speed_error_gate_ = value;
}
inline void LonBasedPidControllerConf::set_speed_error_gate(double value) {
  _internal_set_speed_error_gate(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.speed_error_gate)
}

// optional .control.PidConf speed_pid_conf = 50;
inline bool LonBasedPidControllerConf::_internal_has_speed_pid_conf() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || speed_pid_conf_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_speed_pid_conf() const {
  return _internal_has_speed_pid_conf();
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_speed_pid_conf() const {
  const ::control::PidConf* p = speed_pid_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PidConf*>(
      &::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
  return _internal_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_pid_conf(
    ::control::PidConf* speed_pid_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_pid_conf_);
  }
  speed_pid_conf_ = speed_pid_conf;
  if (speed_pid_conf) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_speed_pid_conf() {
  auto temp = unsafe_arena_release_speed_pid_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
  _has_bits_[0] &= ~0x00100000u;
  ::control::PidConf* temp = speed_pid_conf_;
  speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_speed_pid_conf() {
  _has_bits_[0] |= 0x00100000u;
  if (speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PidConf>(GetArena());
    speed_pid_conf_ = p;
  }
  return speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_speed_pid_conf() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
  return _internal_mutable_speed_pid_conf();
}
inline void LonBasedPidControllerConf::set_allocated_speed_pid_conf(::control::PidConf* speed_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_pid_conf_);
  }
  if (speed_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_pid_conf)->GetArena();
    if (message_arena != submessage_arena) {
      speed_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  speed_pid_conf_ = speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
}

// optional double acceleration_jerk_limit_up = 51;
inline bool LonBasedPidControllerConf::_internal_has_acceleration_jerk_limit_up() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_acceleration_jerk_limit_up() const {
  return _internal_has_acceleration_jerk_limit_up();
}
inline void LonBasedPidControllerConf::clear_acceleration_jerk_limit_up() {
  acceleration_jerk_limit_up_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline double LonBasedPidControllerConf::_internal_acceleration_jerk_limit_up() const {
  return acceleration_jerk_limit_up_;
}
inline double LonBasedPidControllerConf::acceleration_jerk_limit_up() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_up)
  return _internal_acceleration_jerk_limit_up();
}
inline void LonBasedPidControllerConf::_internal_set_acceleration_jerk_limit_up(double value) {
  _has_bits_[1] |= 0x00001000u;
  acceleration_jerk_limit_up_ = value;
}
inline void LonBasedPidControllerConf::set_acceleration_jerk_limit_up(double value) {
  _internal_set_acceleration_jerk_limit_up(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_up)
}

// optional double acceleration_jerk_limit_low = 52;
inline bool LonBasedPidControllerConf::_internal_has_acceleration_jerk_limit_low() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_acceleration_jerk_limit_low() const {
  return _internal_has_acceleration_jerk_limit_low();
}
inline void LonBasedPidControllerConf::clear_acceleration_jerk_limit_low() {
  acceleration_jerk_limit_low_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline double LonBasedPidControllerConf::_internal_acceleration_jerk_limit_low() const {
  return acceleration_jerk_limit_low_;
}
inline double LonBasedPidControllerConf::acceleration_jerk_limit_low() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_low)
  return _internal_acceleration_jerk_limit_low();
}
inline void LonBasedPidControllerConf::_internal_set_acceleration_jerk_limit_low(double value) {
  _has_bits_[1] |= 0x00002000u;
  acceleration_jerk_limit_low_ = value;
}
inline void LonBasedPidControllerConf::set_acceleration_jerk_limit_low(double value) {
  _internal_set_acceleration_jerk_limit_low(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_low)
}

// optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
inline bool LonBasedPidControllerConf::_internal_has_slope_offset_compensation_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || slope_offset_compensation_gain_scheduler_ != nullptr);
  return value;
}
inline bool LonBasedPidControllerConf::has_slope_offset_compensation_gain_scheduler() const {
  return _internal_has_slope_offset_compensation_gain_scheduler();
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_slope_offset_compensation_gain_scheduler() const {
  const ::control::GainScheduler* p = slope_offset_compensation_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::GainScheduler*>(
      &::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::slope_offset_compensation_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
  return _internal_slope_offset_compensation_gain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_slope_offset_compensation_gain_scheduler(
    ::control::GainScheduler* slope_offset_compensation_gain_scheduler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_offset_compensation_gain_scheduler_);
  }
  slope_offset_compensation_gain_scheduler_ = slope_offset_compensation_gain_scheduler;
  if (slope_offset_compensation_gain_scheduler) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_slope_offset_compensation_gain_scheduler() {
  auto temp = unsafe_arena_release_slope_offset_compensation_gain_scheduler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_slope_offset_compensation_gain_scheduler() {
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
  _has_bits_[0] &= ~0x00200000u;
  ::control::GainScheduler* temp = slope_offset_compensation_gain_scheduler_;
  slope_offset_compensation_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_slope_offset_compensation_gain_scheduler() {
  _has_bits_[0] |= 0x00200000u;
  if (slope_offset_compensation_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::GainScheduler>(GetArena());
    slope_offset_compensation_gain_scheduler_ = p;
  }
  return slope_offset_compensation_gain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_slope_offset_compensation_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
  return _internal_mutable_slope_offset_compensation_gain_scheduler();
}
inline void LonBasedPidControllerConf::set_allocated_slope_offset_compensation_gain_scheduler(::control::GainScheduler* slope_offset_compensation_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_offset_compensation_gain_scheduler_);
  }
  if (slope_offset_compensation_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slope_offset_compensation_gain_scheduler)->GetArena();
    if (message_arena != submessage_arena) {
      slope_offset_compensation_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slope_offset_compensation_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  slope_offset_compensation_gain_scheduler_ = slope_offset_compensation_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
}

// optional double brake_cmd_slope = 54;
inline bool LonBasedPidControllerConf::_internal_has_brake_cmd_slope() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_brake_cmd_slope() const {
  return _internal_has_brake_cmd_slope();
}
inline void LonBasedPidControllerConf::clear_brake_cmd_slope() {
  brake_cmd_slope_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline double LonBasedPidControllerConf::_internal_brake_cmd_slope() const {
  return brake_cmd_slope_;
}
inline double LonBasedPidControllerConf::brake_cmd_slope() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.brake_cmd_slope)
  return _internal_brake_cmd_slope();
}
inline void LonBasedPidControllerConf::_internal_set_brake_cmd_slope(double value) {
  _has_bits_[1] |= 0x00004000u;
  brake_cmd_slope_ = value;
}
inline void LonBasedPidControllerConf::set_brake_cmd_slope(double value) {
  _internal_set_brake_cmd_slope(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.brake_cmd_slope)
}

// optional double brake_cmd_bias = 55;
inline bool LonBasedPidControllerConf::_internal_has_brake_cmd_bias() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_brake_cmd_bias() const {
  return _internal_has_brake_cmd_bias();
}
inline void LonBasedPidControllerConf::clear_brake_cmd_bias() {
  brake_cmd_bias_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline double LonBasedPidControllerConf::_internal_brake_cmd_bias() const {
  return brake_cmd_bias_;
}
inline double LonBasedPidControllerConf::brake_cmd_bias() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.brake_cmd_bias)
  return _internal_brake_cmd_bias();
}
inline void LonBasedPidControllerConf::_internal_set_brake_cmd_bias(double value) {
  _has_bits_[1] |= 0x00008000u;
  brake_cmd_bias_ = value;
}
inline void LonBasedPidControllerConf::set_brake_cmd_bias(double value) {
  _internal_set_brake_cmd_bias(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.brake_cmd_bias)
}

// optional double throttle_cmd_slope = 56;
inline bool LonBasedPidControllerConf::_internal_has_throttle_cmd_slope() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_throttle_cmd_slope() const {
  return _internal_has_throttle_cmd_slope();
}
inline void LonBasedPidControllerConf::clear_throttle_cmd_slope() {
  throttle_cmd_slope_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline double LonBasedPidControllerConf::_internal_throttle_cmd_slope() const {
  return throttle_cmd_slope_;
}
inline double LonBasedPidControllerConf::throttle_cmd_slope() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.throttle_cmd_slope)
  return _internal_throttle_cmd_slope();
}
inline void LonBasedPidControllerConf::_internal_set_throttle_cmd_slope(double value) {
  _has_bits_[1] |= 0x00010000u;
  throttle_cmd_slope_ = value;
}
inline void LonBasedPidControllerConf::set_throttle_cmd_slope(double value) {
  _internal_set_throttle_cmd_slope(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.throttle_cmd_slope)
}

// optional double throttle_cmd_bias = 57;
inline bool LonBasedPidControllerConf::_internal_has_throttle_cmd_bias() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool LonBasedPidControllerConf::has_throttle_cmd_bias() const {
  return _internal_has_throttle_cmd_bias();
}
inline void LonBasedPidControllerConf::clear_throttle_cmd_bias() {
  throttle_cmd_bias_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline double LonBasedPidControllerConf::_internal_throttle_cmd_bias() const {
  return throttle_cmd_bias_;
}
inline double LonBasedPidControllerConf::throttle_cmd_bias() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.throttle_cmd_bias)
  return _internal_throttle_cmd_bias();
}
inline void LonBasedPidControllerConf::_internal_set_throttle_cmd_bias(double value) {
  _has_bits_[1] |= 0x00020000u;
  throttle_cmd_bias_ = value;
}
inline void LonBasedPidControllerConf::set_throttle_cmd_bias(double value) {
  _internal_set_throttle_cmd_bias(value);
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.throttle_cmd_bias)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lonpid
}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto

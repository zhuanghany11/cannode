// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/lon_based_pid_controller_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "control_base/leadlag_conf.pb.h"
#include "control_base/pid_conf.pb.h"
#include "control_base/gain_scheduler_conf.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto;
namespace control {
namespace lonpid {
class FilterConf;
struct FilterConfDefaultTypeInternal;
extern FilterConfDefaultTypeInternal _FilterConf_default_instance_;
class LonBasedPidControllerConf;
struct LonBasedPidControllerConfDefaultTypeInternal;
extern LonBasedPidControllerConfDefaultTypeInternal _LonBasedPidControllerConf_default_instance_;
}  // namespace lonpid
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace lonpid {

// ===================================================================


// -------------------------------------------------------------------

class FilterConf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.lonpid.FilterConf) */ {
 public:
  inline FilterConf() : FilterConf(nullptr) {}
  ~FilterConf() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FilterConf(
      ::google::protobuf::internal::ConstantInitialized);

  inline FilterConf(const FilterConf& from) : FilterConf(nullptr, from) {}
  inline FilterConf(FilterConf&& from) noexcept
      : FilterConf(nullptr, std::move(from)) {}
  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterConf& operator=(FilterConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterConf* internal_default_instance() {
    return reinterpret_cast<const FilterConf*>(
        &_FilterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FilterConf& a, FilterConf& b) { a.Swap(&b); }
  inline void Swap(FilterConf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterConf* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<FilterConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FilterConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FilterConf& from) { FilterConf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FilterConf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.lonpid.FilterConf"; }

 protected:
  explicit FilterConf(::google::protobuf::Arena* arena);
  FilterConf(::google::protobuf::Arena* arena, const FilterConf& from);
  FilterConf(::google::protobuf::Arena* arena, FilterConf&& from) noexcept
      : FilterConf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCutoffFreqFieldNumber = 1,
  };
  // optional int32 cutoff_freq = 1;
  bool has_cutoff_freq() const;
  void clear_cutoff_freq() ;
  ::int32_t cutoff_freq() const;
  void set_cutoff_freq(::int32_t value);

  private:
  ::int32_t _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:control.lonpid.FilterConf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FilterConf_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FilterConf& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t cutoff_freq_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto;
};
// -------------------------------------------------------------------

class LonBasedPidControllerConf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.lonpid.LonBasedPidControllerConf) */ {
 public:
  inline LonBasedPidControllerConf() : LonBasedPidControllerConf(nullptr) {}
  ~LonBasedPidControllerConf() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LonBasedPidControllerConf(
      ::google::protobuf::internal::ConstantInitialized);

  inline LonBasedPidControllerConf(const LonBasedPidControllerConf& from) : LonBasedPidControllerConf(nullptr, from) {}
  inline LonBasedPidControllerConf(LonBasedPidControllerConf&& from) noexcept
      : LonBasedPidControllerConf(nullptr, std::move(from)) {}
  inline LonBasedPidControllerConf& operator=(const LonBasedPidControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LonBasedPidControllerConf& operator=(LonBasedPidControllerConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LonBasedPidControllerConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const LonBasedPidControllerConf* internal_default_instance() {
    return reinterpret_cast<const LonBasedPidControllerConf*>(
        &_LonBasedPidControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LonBasedPidControllerConf& a, LonBasedPidControllerConf& b) { a.Swap(&b); }
  inline void Swap(LonBasedPidControllerConf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LonBasedPidControllerConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LonBasedPidControllerConf* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LonBasedPidControllerConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LonBasedPidControllerConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LonBasedPidControllerConf& from) { LonBasedPidControllerConf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LonBasedPidControllerConf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.lonpid.LonBasedPidControllerConf"; }

 protected:
  explicit LonBasedPidControllerConf(::google::protobuf::Arena* arena);
  LonBasedPidControllerConf(::google::protobuf::Arena* arena, const LonBasedPidControllerConf& from);
  LonBasedPidControllerConf(::google::protobuf::Arena* arena, LonBasedPidControllerConf&& from) noexcept
      : LonBasedPidControllerConf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStationPidConfFieldNumber = 8,
    kLowSpeedPidConfFieldNumber = 9,
    kHighSpeedPidConfFieldNumber = 10,
    kReverseStationPidConfFieldNumber = 12,
    kReverseSpeedPidConfFieldNumber = 13,
    kPitchAngleFilterConfFieldNumber = 14,
    kReverseStationLeadlagConfFieldNumber = 15,
    kReverseSpeedLeadlagConfFieldNumber = 16,
    kPitStationPidConfFieldNumber = 30,
    kPitSpeedPidConfFieldNumber = 31,
    kStationErrorGainSchedulerFieldNumber = 39,
    kSpeedErrorAccelPgainSchedulerFieldNumber = 40,
    kSpeedErrorAccelIgainSchedulerFieldNumber = 41,
    kSpeedErrorAccelDgainSchedulerFieldNumber = 42,
    kSpeedErrorSmallPgainSchedulerFieldNumber = 43,
    kSpeedErrorSmallIgainSchedulerFieldNumber = 44,
    kSpeedErrorSmallDgainSchedulerFieldNumber = 45,
    kSpeedErrorDecelPgainSchedulerFieldNumber = 46,
    kSpeedErrorDecelIgainSchedulerFieldNumber = 47,
    kSpeedErrorDecelDgainSchedulerFieldNumber = 48,
    kSpeedPidConfFieldNumber = 50,
    kSlopeOffsetCompensationGainSchedulerFieldNumber = 53,
    kTsFieldNumber = 1,
    kBrakeMinimumActionFieldNumber = 2,
    kThrottleMinimumActionFieldNumber = 3,
    kSpeedControllerInputLimitFieldNumber = 4,
    kStationErrorLimitFieldNumber = 5,
    kPreviewWindowFieldNumber = 6,
    kStandstillAccelerationFieldNumber = 7,
    kSwitchSpeedFieldNumber = 11,
    kSwitchSpeedWindowFieldNumber = 19,
    kEnableReverseLeadlagCompensationFieldNumber = 18,
    kEnableSpeedStationPreviewFieldNumber = 20,
    kEnableSlopeOffsetFieldNumber = 21,
    kUseAccelerationLookupLimitFieldNumber = 23,
    kUsePreviewReferenceCheckFieldNumber = 24,
    kUseSteeringCheckFieldNumber = 26,
    kUseVehicleEpbFieldNumber = 36,
    kSteerCmdIntervalFieldNumber = 25,
    kStandstillNarmalAccelerationFieldNumber = 28,
    kFullStopLongTimeFieldNumber = 29,
    kStopGainAccelerationFieldNumber = 35,
    kFullStopPathRemainGainFieldNumber = 37,
    kSpeedErrorGateFieldNumber = 49,
    kAccelerationJerkLimitUpFieldNumber = 51,
    kAccelerationJerkLimitLowFieldNumber = 52,
    kBrakeCmdSlopeFieldNumber = 54,
    kBrakeCmdBiasFieldNumber = 55,
    kThrottleCmdSlopeFieldNumber = 56,
    kThrottleCmdBiasFieldNumber = 57,
    kUseOppositeSlopeCompensationFieldNumber = 38,
    kMaxPathRemainWhenStoppedFieldNumber = 22,
    kPedestrianStopTimeFieldNumber = 27,
    kPitReplanCheckTimeFieldNumber = 32,
    kPitReplanCheckCountFieldNumber = 33,
    kEpbChangeCountFieldNumber = 34,
  };
  // optional .control.PidConf station_pid_conf = 8;
  bool has_station_pid_conf() const;
  void clear_station_pid_conf() ;
  const ::control::PidConf& station_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_station_pid_conf();
  ::control::PidConf* mutable_station_pid_conf();
  void set_allocated_station_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_station_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_station_pid_conf();

  private:
  const ::control::PidConf& _internal_station_pid_conf() const;
  ::control::PidConf* _internal_mutable_station_pid_conf();

  public:
  // optional .control.PidConf low_speed_pid_conf = 9;
  bool has_low_speed_pid_conf() const;
  void clear_low_speed_pid_conf() ;
  const ::control::PidConf& low_speed_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_low_speed_pid_conf();
  ::control::PidConf* mutable_low_speed_pid_conf();
  void set_allocated_low_speed_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_low_speed_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_low_speed_pid_conf();

  private:
  const ::control::PidConf& _internal_low_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_low_speed_pid_conf();

  public:
  // optional .control.PidConf high_speed_pid_conf = 10;
  bool has_high_speed_pid_conf() const;
  void clear_high_speed_pid_conf() ;
  const ::control::PidConf& high_speed_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_high_speed_pid_conf();
  ::control::PidConf* mutable_high_speed_pid_conf();
  void set_allocated_high_speed_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_high_speed_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_high_speed_pid_conf();

  private:
  const ::control::PidConf& _internal_high_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_high_speed_pid_conf();

  public:
  // optional .control.PidConf reverse_station_pid_conf = 12;
  bool has_reverse_station_pid_conf() const;
  void clear_reverse_station_pid_conf() ;
  const ::control::PidConf& reverse_station_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_reverse_station_pid_conf();
  ::control::PidConf* mutable_reverse_station_pid_conf();
  void set_allocated_reverse_station_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_reverse_station_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_reverse_station_pid_conf();

  private:
  const ::control::PidConf& _internal_reverse_station_pid_conf() const;
  ::control::PidConf* _internal_mutable_reverse_station_pid_conf();

  public:
  // optional .control.PidConf reverse_speed_pid_conf = 13;
  bool has_reverse_speed_pid_conf() const;
  void clear_reverse_speed_pid_conf() ;
  const ::control::PidConf& reverse_speed_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_reverse_speed_pid_conf();
  ::control::PidConf* mutable_reverse_speed_pid_conf();
  void set_allocated_reverse_speed_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_reverse_speed_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_reverse_speed_pid_conf();

  private:
  const ::control::PidConf& _internal_reverse_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_reverse_speed_pid_conf();

  public:
  // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
  bool has_pitch_angle_filter_conf() const;
  void clear_pitch_angle_filter_conf() ;
  const ::control::lonpid::FilterConf& pitch_angle_filter_conf() const;
  PROTOBUF_NODISCARD ::control::lonpid::FilterConf* release_pitch_angle_filter_conf();
  ::control::lonpid::FilterConf* mutable_pitch_angle_filter_conf();
  void set_allocated_pitch_angle_filter_conf(::control::lonpid::FilterConf* value);
  void unsafe_arena_set_allocated_pitch_angle_filter_conf(::control::lonpid::FilterConf* value);
  ::control::lonpid::FilterConf* unsafe_arena_release_pitch_angle_filter_conf();

  private:
  const ::control::lonpid::FilterConf& _internal_pitch_angle_filter_conf() const;
  ::control::lonpid::FilterConf* _internal_mutable_pitch_angle_filter_conf();

  public:
  // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
  bool has_reverse_station_leadlag_conf() const;
  void clear_reverse_station_leadlag_conf() ;
  const ::control::LeadlagConf& reverse_station_leadlag_conf() const;
  PROTOBUF_NODISCARD ::control::LeadlagConf* release_reverse_station_leadlag_conf();
  ::control::LeadlagConf* mutable_reverse_station_leadlag_conf();
  void set_allocated_reverse_station_leadlag_conf(::control::LeadlagConf* value);
  void unsafe_arena_set_allocated_reverse_station_leadlag_conf(::control::LeadlagConf* value);
  ::control::LeadlagConf* unsafe_arena_release_reverse_station_leadlag_conf();

  private:
  const ::control::LeadlagConf& _internal_reverse_station_leadlag_conf() const;
  ::control::LeadlagConf* _internal_mutable_reverse_station_leadlag_conf();

  public:
  // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
  bool has_reverse_speed_leadlag_conf() const;
  void clear_reverse_speed_leadlag_conf() ;
  const ::control::LeadlagConf& reverse_speed_leadlag_conf() const;
  PROTOBUF_NODISCARD ::control::LeadlagConf* release_reverse_speed_leadlag_conf();
  ::control::LeadlagConf* mutable_reverse_speed_leadlag_conf();
  void set_allocated_reverse_speed_leadlag_conf(::control::LeadlagConf* value);
  void unsafe_arena_set_allocated_reverse_speed_leadlag_conf(::control::LeadlagConf* value);
  ::control::LeadlagConf* unsafe_arena_release_reverse_speed_leadlag_conf();

  private:
  const ::control::LeadlagConf& _internal_reverse_speed_leadlag_conf() const;
  ::control::LeadlagConf* _internal_mutable_reverse_speed_leadlag_conf();

  public:
  // optional .control.PidConf pit_station_pid_conf = 30;
  bool has_pit_station_pid_conf() const;
  void clear_pit_station_pid_conf() ;
  const ::control::PidConf& pit_station_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_pit_station_pid_conf();
  ::control::PidConf* mutable_pit_station_pid_conf();
  void set_allocated_pit_station_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_pit_station_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_pit_station_pid_conf();

  private:
  const ::control::PidConf& _internal_pit_station_pid_conf() const;
  ::control::PidConf* _internal_mutable_pit_station_pid_conf();

  public:
  // optional .control.PidConf pit_speed_pid_conf = 31;
  bool has_pit_speed_pid_conf() const;
  void clear_pit_speed_pid_conf() ;
  const ::control::PidConf& pit_speed_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_pit_speed_pid_conf();
  ::control::PidConf* mutable_pit_speed_pid_conf();
  void set_allocated_pit_speed_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_pit_speed_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_pit_speed_pid_conf();

  private:
  const ::control::PidConf& _internal_pit_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_pit_speed_pid_conf();

  public:
  // optional .control.GainScheduler station_error_gain_scheduler = 39;
  bool has_station_error_gain_scheduler() const;
  void clear_station_error_gain_scheduler() ;
  const ::control::GainScheduler& station_error_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_station_error_gain_scheduler();
  ::control::GainScheduler* mutable_station_error_gain_scheduler();
  void set_allocated_station_error_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_station_error_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_station_error_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_station_error_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_station_error_gain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
  bool has_speed_error_accel_pgain_scheduler() const;
  void clear_speed_error_accel_pgain_scheduler() ;
  const ::control::GainScheduler& speed_error_accel_pgain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_accel_pgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_accel_pgain_scheduler();
  void set_allocated_speed_error_accel_pgain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_accel_pgain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_accel_pgain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_accel_pgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_accel_pgain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
  bool has_speed_error_accel_igain_scheduler() const;
  void clear_speed_error_accel_igain_scheduler() ;
  const ::control::GainScheduler& speed_error_accel_igain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_accel_igain_scheduler();
  ::control::GainScheduler* mutable_speed_error_accel_igain_scheduler();
  void set_allocated_speed_error_accel_igain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_accel_igain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_accel_igain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_accel_igain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_accel_igain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
  bool has_speed_error_accel_dgain_scheduler() const;
  void clear_speed_error_accel_dgain_scheduler() ;
  const ::control::GainScheduler& speed_error_accel_dgain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_accel_dgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_accel_dgain_scheduler();
  void set_allocated_speed_error_accel_dgain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_accel_dgain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_accel_dgain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_accel_dgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_accel_dgain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
  bool has_speed_error_small_pgain_scheduler() const;
  void clear_speed_error_small_pgain_scheduler() ;
  const ::control::GainScheduler& speed_error_small_pgain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_small_pgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_small_pgain_scheduler();
  void set_allocated_speed_error_small_pgain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_small_pgain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_small_pgain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_small_pgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_small_pgain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
  bool has_speed_error_small_igain_scheduler() const;
  void clear_speed_error_small_igain_scheduler() ;
  const ::control::GainScheduler& speed_error_small_igain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_small_igain_scheduler();
  ::control::GainScheduler* mutable_speed_error_small_igain_scheduler();
  void set_allocated_speed_error_small_igain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_small_igain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_small_igain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_small_igain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_small_igain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
  bool has_speed_error_small_dgain_scheduler() const;
  void clear_speed_error_small_dgain_scheduler() ;
  const ::control::GainScheduler& speed_error_small_dgain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_small_dgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_small_dgain_scheduler();
  void set_allocated_speed_error_small_dgain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_small_dgain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_small_dgain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_small_dgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_small_dgain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
  bool has_speed_error_decel_pgain_scheduler() const;
  void clear_speed_error_decel_pgain_scheduler() ;
  const ::control::GainScheduler& speed_error_decel_pgain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_decel_pgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_decel_pgain_scheduler();
  void set_allocated_speed_error_decel_pgain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_decel_pgain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_decel_pgain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_decel_pgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_decel_pgain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
  bool has_speed_error_decel_igain_scheduler() const;
  void clear_speed_error_decel_igain_scheduler() ;
  const ::control::GainScheduler& speed_error_decel_igain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_decel_igain_scheduler();
  ::control::GainScheduler* mutable_speed_error_decel_igain_scheduler();
  void set_allocated_speed_error_decel_igain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_decel_igain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_decel_igain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_decel_igain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_decel_igain_scheduler();

  public:
  // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
  bool has_speed_error_decel_dgain_scheduler() const;
  void clear_speed_error_decel_dgain_scheduler() ;
  const ::control::GainScheduler& speed_error_decel_dgain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_speed_error_decel_dgain_scheduler();
  ::control::GainScheduler* mutable_speed_error_decel_dgain_scheduler();
  void set_allocated_speed_error_decel_dgain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_speed_error_decel_dgain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_speed_error_decel_dgain_scheduler();

  private:
  const ::control::GainScheduler& _internal_speed_error_decel_dgain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_speed_error_decel_dgain_scheduler();

  public:
  // optional .control.PidConf speed_pid_conf = 50;
  bool has_speed_pid_conf() const;
  void clear_speed_pid_conf() ;
  const ::control::PidConf& speed_pid_conf() const;
  PROTOBUF_NODISCARD ::control::PidConf* release_speed_pid_conf();
  ::control::PidConf* mutable_speed_pid_conf();
  void set_allocated_speed_pid_conf(::control::PidConf* value);
  void unsafe_arena_set_allocated_speed_pid_conf(::control::PidConf* value);
  ::control::PidConf* unsafe_arena_release_speed_pid_conf();

  private:
  const ::control::PidConf& _internal_speed_pid_conf() const;
  ::control::PidConf* _internal_mutable_speed_pid_conf();

  public:
  // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
  bool has_slope_offset_compensation_gain_scheduler() const;
  void clear_slope_offset_compensation_gain_scheduler() ;
  const ::control::GainScheduler& slope_offset_compensation_gain_scheduler() const;
  PROTOBUF_NODISCARD ::control::GainScheduler* release_slope_offset_compensation_gain_scheduler();
  ::control::GainScheduler* mutable_slope_offset_compensation_gain_scheduler();
  void set_allocated_slope_offset_compensation_gain_scheduler(::control::GainScheduler* value);
  void unsafe_arena_set_allocated_slope_offset_compensation_gain_scheduler(::control::GainScheduler* value);
  ::control::GainScheduler* unsafe_arena_release_slope_offset_compensation_gain_scheduler();

  private:
  const ::control::GainScheduler& _internal_slope_offset_compensation_gain_scheduler() const;
  ::control::GainScheduler* _internal_mutable_slope_offset_compensation_gain_scheduler();

  public:
  // optional double ts = 1;
  bool has_ts() const;
  void clear_ts() ;
  double ts() const;
  void set_ts(double value);

  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);

  public:
  // optional double brake_minimum_action = 2;
  bool has_brake_minimum_action() const;
  void clear_brake_minimum_action() ;
  double brake_minimum_action() const;
  void set_brake_minimum_action(double value);

  private:
  double _internal_brake_minimum_action() const;
  void _internal_set_brake_minimum_action(double value);

  public:
  // optional double throttle_minimum_action = 3;
  bool has_throttle_minimum_action() const;
  void clear_throttle_minimum_action() ;
  double throttle_minimum_action() const;
  void set_throttle_minimum_action(double value);

  private:
  double _internal_throttle_minimum_action() const;
  void _internal_set_throttle_minimum_action(double value);

  public:
  // optional double speed_controller_input_limit = 4;
  bool has_speed_controller_input_limit() const;
  void clear_speed_controller_input_limit() ;
  double speed_controller_input_limit() const;
  void set_speed_controller_input_limit(double value);

  private:
  double _internal_speed_controller_input_limit() const;
  void _internal_set_speed_controller_input_limit(double value);

  public:
  // optional double station_error_limit = 5;
  bool has_station_error_limit() const;
  void clear_station_error_limit() ;
  double station_error_limit() const;
  void set_station_error_limit(double value);

  private:
  double _internal_station_error_limit() const;
  void _internal_set_station_error_limit(double value);

  public:
  // optional double preview_window = 6;
  bool has_preview_window() const;
  void clear_preview_window() ;
  double preview_window() const;
  void set_preview_window(double value);

  private:
  double _internal_preview_window() const;
  void _internal_set_preview_window(double value);

  public:
  // optional double standstill_acceleration = 7;
  bool has_standstill_acceleration() const;
  void clear_standstill_acceleration() ;
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);

  private:
  double _internal_standstill_acceleration() const;
  void _internal_set_standstill_acceleration(double value);

  public:
  // optional double switch_speed = 11;
  bool has_switch_speed() const;
  void clear_switch_speed() ;
  double switch_speed() const;
  void set_switch_speed(double value);

  private:
  double _internal_switch_speed() const;
  void _internal_set_switch_speed(double value);

  public:
  // optional double switch_speed_window = 19 [default = 0];
  bool has_switch_speed_window() const;
  void clear_switch_speed_window() ;
  double switch_speed_window() const;
  void set_switch_speed_window(double value);

  private:
  double _internal_switch_speed_window() const;
  void _internal_set_switch_speed_window(double value);

  public:
  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  bool has_enable_reverse_leadlag_compensation() const;
  void clear_enable_reverse_leadlag_compensation() ;
  bool enable_reverse_leadlag_compensation() const;
  void set_enable_reverse_leadlag_compensation(bool value);

  private:
  bool _internal_enable_reverse_leadlag_compensation() const;
  void _internal_set_enable_reverse_leadlag_compensation(bool value);

  public:
  // optional bool enable_speed_station_preview = 20 [default = false];
  bool has_enable_speed_station_preview() const;
  void clear_enable_speed_station_preview() ;
  bool enable_speed_station_preview() const;
  void set_enable_speed_station_preview(bool value);

  private:
  bool _internal_enable_speed_station_preview() const;
  void _internal_set_enable_speed_station_preview(bool value);

  public:
  // optional bool enable_slope_offset = 21 [default = false];
  bool has_enable_slope_offset() const;
  void clear_enable_slope_offset() ;
  bool enable_slope_offset() const;
  void set_enable_slope_offset(bool value);

  private:
  bool _internal_enable_slope_offset() const;
  void _internal_set_enable_slope_offset(bool value);

  public:
  // optional bool use_acceleration_lookup_limit = 23 [default = false];
  bool has_use_acceleration_lookup_limit() const;
  void clear_use_acceleration_lookup_limit() ;
  bool use_acceleration_lookup_limit() const;
  void set_use_acceleration_lookup_limit(bool value);

  private:
  bool _internal_use_acceleration_lookup_limit() const;
  void _internal_set_use_acceleration_lookup_limit(bool value);

  public:
  // optional bool use_preview_reference_check = 24 [default = false];
  bool has_use_preview_reference_check() const;
  void clear_use_preview_reference_check() ;
  bool use_preview_reference_check() const;
  void set_use_preview_reference_check(bool value);

  private:
  bool _internal_use_preview_reference_check() const;
  void _internal_set_use_preview_reference_check(bool value);

  public:
  // optional bool use_steering_check = 26 [default = false];
  bool has_use_steering_check() const;
  void clear_use_steering_check() ;
  bool use_steering_check() const;
  void set_use_steering_check(bool value);

  private:
  bool _internal_use_steering_check() const;
  void _internal_set_use_steering_check(bool value);

  public:
  // optional bool use_vehicle_epb = 36 [default = false];
  bool has_use_vehicle_epb() const;
  void clear_use_vehicle_epb() ;
  bool use_vehicle_epb() const;
  void set_use_vehicle_epb(bool value);

  private:
  bool _internal_use_vehicle_epb() const;
  void _internal_set_use_vehicle_epb(bool value);

  public:
  // optional double steer_cmd_interval = 25 [default = 0];
  bool has_steer_cmd_interval() const;
  void clear_steer_cmd_interval() ;
  double steer_cmd_interval() const;
  void set_steer_cmd_interval(double value);

  private:
  double _internal_steer_cmd_interval() const;
  void _internal_set_steer_cmd_interval(double value);

  public:
  // optional double standstill_narmal_acceleration = 28 [default = 0];
  bool has_standstill_narmal_acceleration() const;
  void clear_standstill_narmal_acceleration() ;
  double standstill_narmal_acceleration() const;
  void set_standstill_narmal_acceleration(double value);

  private:
  double _internal_standstill_narmal_acceleration() const;
  void _internal_set_standstill_narmal_acceleration(double value);

  public:
  // optional double full_stop_long_time = 29 [default = 0];
  bool has_full_stop_long_time() const;
  void clear_full_stop_long_time() ;
  double full_stop_long_time() const;
  void set_full_stop_long_time(double value);

  private:
  double _internal_full_stop_long_time() const;
  void _internal_set_full_stop_long_time(double value);

  public:
  // optional double stop_gain_acceleration = 35;
  bool has_stop_gain_acceleration() const;
  void clear_stop_gain_acceleration() ;
  double stop_gain_acceleration() const;
  void set_stop_gain_acceleration(double value);

  private:
  double _internal_stop_gain_acceleration() const;
  void _internal_set_stop_gain_acceleration(double value);

  public:
  // optional double full_stop_path_remain_gain = 37;
  bool has_full_stop_path_remain_gain() const;
  void clear_full_stop_path_remain_gain() ;
  double full_stop_path_remain_gain() const;
  void set_full_stop_path_remain_gain(double value);

  private:
  double _internal_full_stop_path_remain_gain() const;
  void _internal_set_full_stop_path_remain_gain(double value);

  public:
  // optional double speed_error_gate = 49;
  bool has_speed_error_gate() const;
  void clear_speed_error_gate() ;
  double speed_error_gate() const;
  void set_speed_error_gate(double value);

  private:
  double _internal_speed_error_gate() const;
  void _internal_set_speed_error_gate(double value);

  public:
  // optional double acceleration_jerk_limit_up = 51;
  bool has_acceleration_jerk_limit_up() const;
  void clear_acceleration_jerk_limit_up() ;
  double acceleration_jerk_limit_up() const;
  void set_acceleration_jerk_limit_up(double value);

  private:
  double _internal_acceleration_jerk_limit_up() const;
  void _internal_set_acceleration_jerk_limit_up(double value);

  public:
  // optional double acceleration_jerk_limit_low = 52;
  bool has_acceleration_jerk_limit_low() const;
  void clear_acceleration_jerk_limit_low() ;
  double acceleration_jerk_limit_low() const;
  void set_acceleration_jerk_limit_low(double value);

  private:
  double _internal_acceleration_jerk_limit_low() const;
  void _internal_set_acceleration_jerk_limit_low(double value);

  public:
  // optional double brake_cmd_slope = 54;
  bool has_brake_cmd_slope() const;
  void clear_brake_cmd_slope() ;
  double brake_cmd_slope() const;
  void set_brake_cmd_slope(double value);

  private:
  double _internal_brake_cmd_slope() const;
  void _internal_set_brake_cmd_slope(double value);

  public:
  // optional double brake_cmd_bias = 55;
  bool has_brake_cmd_bias() const;
  void clear_brake_cmd_bias() ;
  double brake_cmd_bias() const;
  void set_brake_cmd_bias(double value);

  private:
  double _internal_brake_cmd_bias() const;
  void _internal_set_brake_cmd_bias(double value);

  public:
  // optional double throttle_cmd_slope = 56;
  bool has_throttle_cmd_slope() const;
  void clear_throttle_cmd_slope() ;
  double throttle_cmd_slope() const;
  void set_throttle_cmd_slope(double value);

  private:
  double _internal_throttle_cmd_slope() const;
  void _internal_set_throttle_cmd_slope(double value);

  public:
  // optional double throttle_cmd_bias = 57;
  bool has_throttle_cmd_bias() const;
  void clear_throttle_cmd_bias() ;
  double throttle_cmd_bias() const;
  void set_throttle_cmd_bias(double value);

  private:
  double _internal_throttle_cmd_bias() const;
  void _internal_set_throttle_cmd_bias(double value);

  public:
  // optional int32 use_opposite_slope_compensation = 38 [default = 1];
  bool has_use_opposite_slope_compensation() const;
  void clear_use_opposite_slope_compensation() ;
  ::int32_t use_opposite_slope_compensation() const;
  void set_use_opposite_slope_compensation(::int32_t value);

  private:
  ::int32_t _internal_use_opposite_slope_compensation() const;
  void _internal_set_use_opposite_slope_compensation(::int32_t value);

  public:
  // optional double max_path_remain_when_stopped = 22 [default = 0.3];
  bool has_max_path_remain_when_stopped() const;
  void clear_max_path_remain_when_stopped() ;
  double max_path_remain_when_stopped() const;
  void set_max_path_remain_when_stopped(double value);

  private:
  double _internal_max_path_remain_when_stopped() const;
  void _internal_set_max_path_remain_when_stopped(double value);

  public:
  // optional double pedestrian_stop_time = 27 [default = 10];
  bool has_pedestrian_stop_time() const;
  void clear_pedestrian_stop_time() ;
  double pedestrian_stop_time() const;
  void set_pedestrian_stop_time(double value);

  private:
  double _internal_pedestrian_stop_time() const;
  void _internal_set_pedestrian_stop_time(double value);

  public:
  // optional double pit_replan_check_time = 32 [default = 14];
  bool has_pit_replan_check_time() const;
  void clear_pit_replan_check_time() ;
  double pit_replan_check_time() const;
  void set_pit_replan_check_time(double value);

  private:
  double _internal_pit_replan_check_time() const;
  void _internal_set_pit_replan_check_time(double value);

  public:
  // optional int32 pit_replan_check_count = 33 [default = 3];
  bool has_pit_replan_check_count() const;
  void clear_pit_replan_check_count() ;
  ::int32_t pit_replan_check_count() const;
  void set_pit_replan_check_count(::int32_t value);

  private:
  ::int32_t _internal_pit_replan_check_count() const;
  void _internal_set_pit_replan_check_count(::int32_t value);

  public:
  // optional int32 epb_change_count = 34 [default = 2];
  bool has_epb_change_count() const;
  void clear_epb_change_count() ;
  ::int32_t epb_change_count() const;
  void set_epb_change_count(::int32_t value);

  private:
  ::int32_t _internal_epb_change_count() const;
  void _internal_set_epb_change_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:control.lonpid.LonBasedPidControllerConf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 56, 22,
      0, 9>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LonBasedPidControllerConf_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LonBasedPidControllerConf& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::PidConf* station_pid_conf_;
    ::control::PidConf* low_speed_pid_conf_;
    ::control::PidConf* high_speed_pid_conf_;
    ::control::PidConf* reverse_station_pid_conf_;
    ::control::PidConf* reverse_speed_pid_conf_;
    ::control::lonpid::FilterConf* pitch_angle_filter_conf_;
    ::control::LeadlagConf* reverse_station_leadlag_conf_;
    ::control::LeadlagConf* reverse_speed_leadlag_conf_;
    ::control::PidConf* pit_station_pid_conf_;
    ::control::PidConf* pit_speed_pid_conf_;
    ::control::GainScheduler* station_error_gain_scheduler_;
    ::control::GainScheduler* speed_error_accel_pgain_scheduler_;
    ::control::GainScheduler* speed_error_accel_igain_scheduler_;
    ::control::GainScheduler* speed_error_accel_dgain_scheduler_;
    ::control::GainScheduler* speed_error_small_pgain_scheduler_;
    ::control::GainScheduler* speed_error_small_igain_scheduler_;
    ::control::GainScheduler* speed_error_small_dgain_scheduler_;
    ::control::GainScheduler* speed_error_decel_pgain_scheduler_;
    ::control::GainScheduler* speed_error_decel_igain_scheduler_;
    ::control::GainScheduler* speed_error_decel_dgain_scheduler_;
    ::control::PidConf* speed_pid_conf_;
    ::control::GainScheduler* slope_offset_compensation_gain_scheduler_;
    double ts_;
    double brake_minimum_action_;
    double throttle_minimum_action_;
    double speed_controller_input_limit_;
    double station_error_limit_;
    double preview_window_;
    double standstill_acceleration_;
    double switch_speed_;
    double switch_speed_window_;
    bool enable_reverse_leadlag_compensation_;
    bool enable_speed_station_preview_;
    bool enable_slope_offset_;
    bool use_acceleration_lookup_limit_;
    bool use_preview_reference_check_;
    bool use_steering_check_;
    bool use_vehicle_epb_;
    double steer_cmd_interval_;
    double standstill_narmal_acceleration_;
    double full_stop_long_time_;
    double stop_gain_acceleration_;
    double full_stop_path_remain_gain_;
    double speed_error_gate_;
    double acceleration_jerk_limit_up_;
    double acceleration_jerk_limit_low_;
    double brake_cmd_slope_;
    double brake_cmd_bias_;
    double throttle_cmd_slope_;
    double throttle_cmd_bias_;
    ::int32_t use_opposite_slope_compensation_;
    double max_path_remain_when_stopped_;
    double pedestrian_stop_time_;
    double pit_replan_check_time_;
    ::int32_t pit_replan_check_count_;
    ::int32_t epb_change_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FilterConf

// optional int32 cutoff_freq = 1;
inline bool FilterConf::has_cutoff_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FilterConf::clear_cutoff_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cutoff_freq_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:control.lonpid.FilterConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void FilterConf::set_cutoff_freq(::int32_t value) {
  _internal_set_cutoff_freq(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.lonpid.FilterConf.cutoff_freq)
}
inline ::int32_t FilterConf::_internal_cutoff_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cutoff_freq_;
}
inline void FilterConf::_internal_set_cutoff_freq(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cutoff_freq_ = value;
}

// -------------------------------------------------------------------

// LonBasedPidControllerConf

// optional double ts = 1;
inline bool LonBasedPidControllerConf::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double LonBasedPidControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.ts)
  return _internal_ts();
}
inline void LonBasedPidControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.ts)
}
inline double LonBasedPidControllerConf::_internal_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ts_;
}
inline void LonBasedPidControllerConf::_internal_set_ts(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = value;
}

// optional double brake_minimum_action = 2;
inline bool LonBasedPidControllerConf::has_brake_minimum_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_brake_minimum_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_minimum_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double LonBasedPidControllerConf::brake_minimum_action() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.brake_minimum_action)
  return _internal_brake_minimum_action();
}
inline void LonBasedPidControllerConf::set_brake_minimum_action(double value) {
  _internal_set_brake_minimum_action(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.brake_minimum_action)
}
inline double LonBasedPidControllerConf::_internal_brake_minimum_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_minimum_action_;
}
inline void LonBasedPidControllerConf::_internal_set_brake_minimum_action(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_minimum_action_ = value;
}

// optional double throttle_minimum_action = 3;
inline bool LonBasedPidControllerConf::has_throttle_minimum_action() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_throttle_minimum_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_minimum_action_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double LonBasedPidControllerConf::throttle_minimum_action() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.throttle_minimum_action)
  return _internal_throttle_minimum_action();
}
inline void LonBasedPidControllerConf::set_throttle_minimum_action(double value) {
  _internal_set_throttle_minimum_action(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.throttle_minimum_action)
}
inline double LonBasedPidControllerConf::_internal_throttle_minimum_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_minimum_action_;
}
inline void LonBasedPidControllerConf::_internal_set_throttle_minimum_action(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_minimum_action_ = value;
}

// optional double speed_controller_input_limit = 4;
inline bool LonBasedPidControllerConf::has_speed_controller_input_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_speed_controller_input_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_controller_input_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double LonBasedPidControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_controller_input_limit)
  return _internal_speed_controller_input_limit();
}
inline void LonBasedPidControllerConf::set_speed_controller_input_limit(double value) {
  _internal_set_speed_controller_input_limit(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.speed_controller_input_limit)
}
inline double LonBasedPidControllerConf::_internal_speed_controller_input_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_controller_input_limit_;
}
inline void LonBasedPidControllerConf::_internal_set_speed_controller_input_limit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_controller_input_limit_ = value;
}

// optional double station_error_limit = 5;
inline bool LonBasedPidControllerConf::has_station_error_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_station_error_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double LonBasedPidControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.station_error_limit)
  return _internal_station_error_limit();
}
inline void LonBasedPidControllerConf::set_station_error_limit(double value) {
  _internal_set_station_error_limit(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.station_error_limit)
}
inline double LonBasedPidControllerConf::_internal_station_error_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.station_error_limit_;
}
inline void LonBasedPidControllerConf::_internal_set_station_error_limit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.station_error_limit_ = value;
}

// optional double preview_window = 6;
inline bool LonBasedPidControllerConf::has_preview_window() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_preview_window() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_window_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double LonBasedPidControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.preview_window)
  return _internal_preview_window();
}
inline void LonBasedPidControllerConf::set_preview_window(double value) {
  _internal_set_preview_window(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.preview_window)
}
inline double LonBasedPidControllerConf::_internal_preview_window() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preview_window_;
}
inline void LonBasedPidControllerConf::_internal_set_preview_window(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preview_window_ = value;
}

// optional double standstill_acceleration = 7;
inline bool LonBasedPidControllerConf::has_standstill_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_standstill_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standstill_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double LonBasedPidControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.standstill_acceleration)
  return _internal_standstill_acceleration();
}
inline void LonBasedPidControllerConf::set_standstill_acceleration(double value) {
  _internal_set_standstill_acceleration(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.standstill_acceleration)
}
inline double LonBasedPidControllerConf::_internal_standstill_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.standstill_acceleration_;
}
inline void LonBasedPidControllerConf::_internal_set_standstill_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standstill_acceleration_ = value;
}

// optional .control.PidConf station_pid_conf = 8;
inline bool LonBasedPidControllerConf::has_station_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.station_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_station_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.station_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::station_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
  return _internal_station_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_station_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.station_pid_conf_);
  }
  _impl_.station_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::PidConf* released = _impl_.station_pid_conf_;
  _impl_.station_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.station_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::PidConf* temp = _impl_.station_pid_conf_;
  _impl_.station_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.station_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.station_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.station_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_station_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::PidConf* _msg = _internal_mutable_station_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_station_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.station_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.station_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.station_pid_conf)
}

// optional .control.PidConf low_speed_pid_conf = 9;
inline bool LonBasedPidControllerConf::has_low_speed_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.low_speed_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_low_speed_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.low_speed_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::low_speed_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
  return _internal_low_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_low_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.low_speed_pid_conf_);
  }
  _impl_.low_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_low_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::PidConf* released = _impl_.low_speed_pid_conf_;
  _impl_.low_speed_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_low_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::control::PidConf* temp = _impl_.low_speed_pid_conf_;
  _impl_.low_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_low_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_speed_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.low_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.low_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_low_speed_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::control::PidConf* _msg = _internal_mutable_low_speed_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_low_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.low_speed_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.low_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.low_speed_pid_conf)
}

// optional .control.PidConf high_speed_pid_conf = 10;
inline bool LonBasedPidControllerConf::has_high_speed_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.high_speed_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_high_speed_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.high_speed_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::high_speed_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
  return _internal_high_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_high_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.high_speed_pid_conf_);
  }
  _impl_.high_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_high_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::PidConf* released = _impl_.high_speed_pid_conf_;
  _impl_.high_speed_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_high_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::PidConf* temp = _impl_.high_speed_pid_conf_;
  _impl_.high_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_high_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_speed_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.high_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.high_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_high_speed_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::PidConf* _msg = _internal_mutable_high_speed_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_high_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.high_speed_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.high_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
inline bool LonBasedPidControllerConf::has_switch_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_switch_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline double LonBasedPidControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.switch_speed)
  return _internal_switch_speed();
}
inline void LonBasedPidControllerConf::set_switch_speed(double value) {
  _internal_set_switch_speed(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.switch_speed)
}
inline double LonBasedPidControllerConf::_internal_switch_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.switch_speed_;
}
inline void LonBasedPidControllerConf::_internal_set_switch_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_ = value;
}

// optional .control.PidConf reverse_station_pid_conf = 12;
inline bool LonBasedPidControllerConf::has_reverse_station_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reverse_station_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_reverse_station_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.reverse_station_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::reverse_station_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
  return _internal_reverse_station_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_station_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_station_pid_conf_);
  }
  _impl_.reverse_station_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_reverse_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::PidConf* released = _impl_.reverse_station_pid_conf_;
  _impl_.reverse_station_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::control::PidConf* temp = _impl_.reverse_station_pid_conf_;
  _impl_.reverse_station_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_reverse_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_station_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.reverse_station_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.reverse_station_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_reverse_station_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::control::PidConf* _msg = _internal_mutable_reverse_station_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_reverse_station_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_station_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.reverse_station_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_pid_conf)
}

// optional .control.PidConf reverse_speed_pid_conf = 13;
inline bool LonBasedPidControllerConf::has_reverse_speed_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reverse_speed_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_reverse_speed_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.reverse_speed_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::reverse_speed_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
  return _internal_reverse_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_speed_pid_conf_);
  }
  _impl_.reverse_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_reverse_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::PidConf* released = _impl_.reverse_speed_pid_conf_;
  _impl_.reverse_speed_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::control::PidConf* temp = _impl_.reverse_speed_pid_conf_;
  _impl_.reverse_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_reverse_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_speed_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.reverse_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.reverse_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_reverse_speed_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::control::PidConf* _msg = _internal_mutable_reverse_speed_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_reverse_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_speed_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.reverse_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_pid_conf)
}

// optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
inline bool LonBasedPidControllerConf::has_pitch_angle_filter_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pitch_angle_filter_conf_ != nullptr);
  return value;
}
inline void LonBasedPidControllerConf::clear_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pitch_angle_filter_conf_ != nullptr) _impl_.pitch_angle_filter_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::control::lonpid::FilterConf& LonBasedPidControllerConf::_internal_pitch_angle_filter_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::lonpid::FilterConf* p = _impl_.pitch_angle_filter_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::lonpid::FilterConf&>(::control::lonpid::_FilterConf_default_instance_);
}
inline const ::control::lonpid::FilterConf& LonBasedPidControllerConf::pitch_angle_filter_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
  return _internal_pitch_angle_filter_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_pitch_angle_filter_conf(::control::lonpid::FilterConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pitch_angle_filter_conf_);
  }
  _impl_.pitch_angle_filter_conf_ = reinterpret_cast<::control::lonpid::FilterConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::release_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::lonpid::FilterConf* released = _impl_.pitch_angle_filter_conf_;
  _impl_.pitch_angle_filter_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::unsafe_arena_release_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::control::lonpid::FilterConf* temp = _impl_.pitch_angle_filter_conf_;
  _impl_.pitch_angle_filter_conf_ = nullptr;
  return temp;
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::_internal_mutable_pitch_angle_filter_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pitch_angle_filter_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::lonpid::FilterConf>(GetArena());
    _impl_.pitch_angle_filter_conf_ = reinterpret_cast<::control::lonpid::FilterConf*>(p);
  }
  return _impl_.pitch_angle_filter_conf_;
}
inline ::control::lonpid::FilterConf* LonBasedPidControllerConf::mutable_pitch_angle_filter_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::control::lonpid::FilterConf* _msg = _internal_mutable_pitch_angle_filter_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_pitch_angle_filter_conf(::control::lonpid::FilterConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pitch_angle_filter_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.pitch_angle_filter_conf_ = reinterpret_cast<::control::lonpid::FilterConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.pitch_angle_filter_conf)
}

// optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
inline bool LonBasedPidControllerConf::has_reverse_station_leadlag_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reverse_station_leadlag_conf_ != nullptr);
  return value;
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::_internal_reverse_station_leadlag_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::LeadlagConf* p = _impl_.reverse_station_leadlag_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::LeadlagConf&>(::control::_LeadlagConf_default_instance_);
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::reverse_station_leadlag_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
  return _internal_reverse_station_leadlag_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_station_leadlag_conf(::control::LeadlagConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_station_leadlag_conf_);
  }
  _impl_.reverse_station_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::release_reverse_station_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::LeadlagConf* released = _impl_.reverse_station_leadlag_conf_;
  _impl_.reverse_station_leadlag_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_station_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::control::LeadlagConf* temp = _impl_.reverse_station_leadlag_conf_;
  _impl_.reverse_station_leadlag_conf_ = nullptr;
  return temp;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::_internal_mutable_reverse_station_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_station_leadlag_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::LeadlagConf>(GetArena());
    _impl_.reverse_station_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(p);
  }
  return _impl_.reverse_station_leadlag_conf_;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::mutable_reverse_station_leadlag_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::control::LeadlagConf* _msg = _internal_mutable_reverse_station_leadlag_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_reverse_station_leadlag_conf(::control::LeadlagConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_station_leadlag_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.reverse_station_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_station_leadlag_conf)
}

// optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
inline bool LonBasedPidControllerConf::has_reverse_speed_leadlag_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reverse_speed_leadlag_conf_ != nullptr);
  return value;
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::_internal_reverse_speed_leadlag_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::LeadlagConf* p = _impl_.reverse_speed_leadlag_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::LeadlagConf&>(::control::_LeadlagConf_default_instance_);
}
inline const ::control::LeadlagConf& LonBasedPidControllerConf::reverse_speed_leadlag_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
  return _internal_reverse_speed_leadlag_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_reverse_speed_leadlag_conf(::control::LeadlagConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_speed_leadlag_conf_);
  }
  _impl_.reverse_speed_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::release_reverse_speed_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::LeadlagConf* released = _impl_.reverse_speed_leadlag_conf_;
  _impl_.reverse_speed_leadlag_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::unsafe_arena_release_reverse_speed_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::control::LeadlagConf* temp = _impl_.reverse_speed_leadlag_conf_;
  _impl_.reverse_speed_leadlag_conf_ = nullptr;
  return temp;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::_internal_mutable_reverse_speed_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_speed_leadlag_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::LeadlagConf>(GetArena());
    _impl_.reverse_speed_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(p);
  }
  return _impl_.reverse_speed_leadlag_conf_;
}
inline ::control::LeadlagConf* LonBasedPidControllerConf::mutable_reverse_speed_leadlag_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::control::LeadlagConf* _msg = _internal_mutable_reverse_speed_leadlag_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_reverse_speed_leadlag_conf(::control::LeadlagConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_speed_leadlag_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.reverse_speed_leadlag_conf_ = reinterpret_cast<::control::LeadlagConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.reverse_speed_leadlag_conf)
}

// optional bool enable_reverse_leadlag_compensation = 18 [default = false];
inline bool LonBasedPidControllerConf::has_enable_reverse_leadlag_compensation() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_enable_reverse_leadlag_compensation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_reverse_leadlag_compensation_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool LonBasedPidControllerConf::enable_reverse_leadlag_compensation() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.enable_reverse_leadlag_compensation)
  return _internal_enable_reverse_leadlag_compensation();
}
inline void LonBasedPidControllerConf::set_enable_reverse_leadlag_compensation(bool value) {
  _internal_set_enable_reverse_leadlag_compensation(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.enable_reverse_leadlag_compensation)
}
inline bool LonBasedPidControllerConf::_internal_enable_reverse_leadlag_compensation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_reverse_leadlag_compensation_;
}
inline void LonBasedPidControllerConf::_internal_set_enable_reverse_leadlag_compensation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_reverse_leadlag_compensation_ = value;
}

// optional double switch_speed_window = 19 [default = 0];
inline bool LonBasedPidControllerConf::has_switch_speed_window() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_switch_speed_window() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_window_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double LonBasedPidControllerConf::switch_speed_window() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.switch_speed_window)
  return _internal_switch_speed_window();
}
inline void LonBasedPidControllerConf::set_switch_speed_window(double value) {
  _internal_set_switch_speed_window(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.switch_speed_window)
}
inline double LonBasedPidControllerConf::_internal_switch_speed_window() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.switch_speed_window_;
}
inline void LonBasedPidControllerConf::_internal_set_switch_speed_window(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.switch_speed_window_ = value;
}

// optional bool enable_speed_station_preview = 20 [default = false];
inline bool LonBasedPidControllerConf::has_enable_speed_station_preview() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_enable_speed_station_preview() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_speed_station_preview_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool LonBasedPidControllerConf::enable_speed_station_preview() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.enable_speed_station_preview)
  return _internal_enable_speed_station_preview();
}
inline void LonBasedPidControllerConf::set_enable_speed_station_preview(bool value) {
  _internal_set_enable_speed_station_preview(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.enable_speed_station_preview)
}
inline bool LonBasedPidControllerConf::_internal_enable_speed_station_preview() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_speed_station_preview_;
}
inline void LonBasedPidControllerConf::_internal_set_enable_speed_station_preview(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_speed_station_preview_ = value;
}

// optional bool enable_slope_offset = 21 [default = false];
inline bool LonBasedPidControllerConf::has_enable_slope_offset() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_enable_slope_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_slope_offset_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool LonBasedPidControllerConf::enable_slope_offset() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.enable_slope_offset)
  return _internal_enable_slope_offset();
}
inline void LonBasedPidControllerConf::set_enable_slope_offset(bool value) {
  _internal_set_enable_slope_offset(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.enable_slope_offset)
}
inline bool LonBasedPidControllerConf::_internal_enable_slope_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_slope_offset_;
}
inline void LonBasedPidControllerConf::_internal_set_enable_slope_offset(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_slope_offset_ = value;
}

// optional double max_path_remain_when_stopped = 22 [default = 0.3];
inline bool LonBasedPidControllerConf::has_max_path_remain_when_stopped() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_max_path_remain_when_stopped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_path_remain_when_stopped_ = 0.3;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline double LonBasedPidControllerConf::max_path_remain_when_stopped() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.max_path_remain_when_stopped)
  return _internal_max_path_remain_when_stopped();
}
inline void LonBasedPidControllerConf::set_max_path_remain_when_stopped(double value) {
  _internal_set_max_path_remain_when_stopped(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.max_path_remain_when_stopped)
}
inline double LonBasedPidControllerConf::_internal_max_path_remain_when_stopped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_path_remain_when_stopped_;
}
inline void LonBasedPidControllerConf::_internal_set_max_path_remain_when_stopped(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_path_remain_when_stopped_ = value;
}

// optional bool use_acceleration_lookup_limit = 23 [default = false];
inline bool LonBasedPidControllerConf::has_use_acceleration_lookup_limit() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_use_acceleration_lookup_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_acceleration_lookup_limit_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool LonBasedPidControllerConf::use_acceleration_lookup_limit() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_acceleration_lookup_limit)
  return _internal_use_acceleration_lookup_limit();
}
inline void LonBasedPidControllerConf::set_use_acceleration_lookup_limit(bool value) {
  _internal_set_use_acceleration_lookup_limit(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_acceleration_lookup_limit)
}
inline bool LonBasedPidControllerConf::_internal_use_acceleration_lookup_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_acceleration_lookup_limit_;
}
inline void LonBasedPidControllerConf::_internal_set_use_acceleration_lookup_limit(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_acceleration_lookup_limit_ = value;
}

// optional bool use_preview_reference_check = 24 [default = false];
inline bool LonBasedPidControllerConf::has_use_preview_reference_check() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_use_preview_reference_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_preview_reference_check_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool LonBasedPidControllerConf::use_preview_reference_check() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_preview_reference_check)
  return _internal_use_preview_reference_check();
}
inline void LonBasedPidControllerConf::set_use_preview_reference_check(bool value) {
  _internal_set_use_preview_reference_check(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_preview_reference_check)
}
inline bool LonBasedPidControllerConf::_internal_use_preview_reference_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_preview_reference_check_;
}
inline void LonBasedPidControllerConf::_internal_set_use_preview_reference_check(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_preview_reference_check_ = value;
}

// optional double steer_cmd_interval = 25 [default = 0];
inline bool LonBasedPidControllerConf::has_steer_cmd_interval() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_steer_cmd_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_cmd_interval_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline double LonBasedPidControllerConf::steer_cmd_interval() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.steer_cmd_interval)
  return _internal_steer_cmd_interval();
}
inline void LonBasedPidControllerConf::set_steer_cmd_interval(double value) {
  _internal_set_steer_cmd_interval(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.steer_cmd_interval)
}
inline double LonBasedPidControllerConf::_internal_steer_cmd_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_cmd_interval_;
}
inline void LonBasedPidControllerConf::_internal_set_steer_cmd_interval(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_cmd_interval_ = value;
}

// optional bool use_steering_check = 26 [default = false];
inline bool LonBasedPidControllerConf::has_use_steering_check() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_use_steering_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_steering_check_ = false;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool LonBasedPidControllerConf::use_steering_check() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_steering_check)
  return _internal_use_steering_check();
}
inline void LonBasedPidControllerConf::set_use_steering_check(bool value) {
  _internal_set_use_steering_check(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_steering_check)
}
inline bool LonBasedPidControllerConf::_internal_use_steering_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_steering_check_;
}
inline void LonBasedPidControllerConf::_internal_set_use_steering_check(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_steering_check_ = value;
}

// optional double pedestrian_stop_time = 27 [default = 10];
inline bool LonBasedPidControllerConf::has_pedestrian_stop_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_pedestrian_stop_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pedestrian_stop_time_ = 10;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline double LonBasedPidControllerConf::pedestrian_stop_time() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pedestrian_stop_time)
  return _internal_pedestrian_stop_time();
}
inline void LonBasedPidControllerConf::set_pedestrian_stop_time(double value) {
  _internal_set_pedestrian_stop_time(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.pedestrian_stop_time)
}
inline double LonBasedPidControllerConf::_internal_pedestrian_stop_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pedestrian_stop_time_;
}
inline void LonBasedPidControllerConf::_internal_set_pedestrian_stop_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pedestrian_stop_time_ = value;
}

// optional double standstill_narmal_acceleration = 28 [default = 0];
inline bool LonBasedPidControllerConf::has_standstill_narmal_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_standstill_narmal_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standstill_narmal_acceleration_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline double LonBasedPidControllerConf::standstill_narmal_acceleration() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.standstill_narmal_acceleration)
  return _internal_standstill_narmal_acceleration();
}
inline void LonBasedPidControllerConf::set_standstill_narmal_acceleration(double value) {
  _internal_set_standstill_narmal_acceleration(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.standstill_narmal_acceleration)
}
inline double LonBasedPidControllerConf::_internal_standstill_narmal_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.standstill_narmal_acceleration_;
}
inline void LonBasedPidControllerConf::_internal_set_standstill_narmal_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standstill_narmal_acceleration_ = value;
}

// optional double full_stop_long_time = 29 [default = 0];
inline bool LonBasedPidControllerConf::has_full_stop_long_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_full_stop_long_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_stop_long_time_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline double LonBasedPidControllerConf::full_stop_long_time() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.full_stop_long_time)
  return _internal_full_stop_long_time();
}
inline void LonBasedPidControllerConf::set_full_stop_long_time(double value) {
  _internal_set_full_stop_long_time(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.full_stop_long_time)
}
inline double LonBasedPidControllerConf::_internal_full_stop_long_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.full_stop_long_time_;
}
inline void LonBasedPidControllerConf::_internal_set_full_stop_long_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_stop_long_time_ = value;
}

// optional .control.PidConf pit_station_pid_conf = 30;
inline bool LonBasedPidControllerConf::has_pit_station_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pit_station_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_pit_station_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.pit_station_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::pit_station_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
  return _internal_pit_station_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_pit_station_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pit_station_pid_conf_);
  }
  _impl_.pit_station_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_pit_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::PidConf* released = _impl_.pit_station_pid_conf_;
  _impl_.pit_station_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_pit_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::control::PidConf* temp = _impl_.pit_station_pid_conf_;
  _impl_.pit_station_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_pit_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pit_station_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.pit_station_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.pit_station_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_pit_station_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::control::PidConf* _msg = _internal_mutable_pit_station_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_pit_station_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pit_station_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.pit_station_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_station_pid_conf)
}

// optional .control.PidConf pit_speed_pid_conf = 31;
inline bool LonBasedPidControllerConf::has_pit_speed_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pit_speed_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_pit_speed_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.pit_speed_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::pit_speed_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
  return _internal_pit_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_pit_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pit_speed_pid_conf_);
  }
  _impl_.pit_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_pit_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::control::PidConf* released = _impl_.pit_speed_pid_conf_;
  _impl_.pit_speed_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_pit_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::control::PidConf* temp = _impl_.pit_speed_pid_conf_;
  _impl_.pit_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_pit_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pit_speed_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.pit_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.pit_speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_pit_speed_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::control::PidConf* _msg = _internal_mutable_pit_speed_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_pit_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pit_speed_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.pit_speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.pit_speed_pid_conf)
}

// optional double pit_replan_check_time = 32 [default = 14];
inline bool LonBasedPidControllerConf::has_pit_replan_check_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_pit_replan_check_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pit_replan_check_time_ = 14;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline double LonBasedPidControllerConf::pit_replan_check_time() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_replan_check_time)
  return _internal_pit_replan_check_time();
}
inline void LonBasedPidControllerConf::set_pit_replan_check_time(double value) {
  _internal_set_pit_replan_check_time(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.pit_replan_check_time)
}
inline double LonBasedPidControllerConf::_internal_pit_replan_check_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pit_replan_check_time_;
}
inline void LonBasedPidControllerConf::_internal_set_pit_replan_check_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pit_replan_check_time_ = value;
}

// optional int32 pit_replan_check_count = 33 [default = 3];
inline bool LonBasedPidControllerConf::has_pit_replan_check_count() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_pit_replan_check_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pit_replan_check_count_ = 3;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline ::int32_t LonBasedPidControllerConf::pit_replan_check_count() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.pit_replan_check_count)
  return _internal_pit_replan_check_count();
}
inline void LonBasedPidControllerConf::set_pit_replan_check_count(::int32_t value) {
  _internal_set_pit_replan_check_count(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.pit_replan_check_count)
}
inline ::int32_t LonBasedPidControllerConf::_internal_pit_replan_check_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pit_replan_check_count_;
}
inline void LonBasedPidControllerConf::_internal_set_pit_replan_check_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pit_replan_check_count_ = value;
}

// optional int32 epb_change_count = 34 [default = 2];
inline bool LonBasedPidControllerConf::has_epb_change_count() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_epb_change_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epb_change_count_ = 2;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline ::int32_t LonBasedPidControllerConf::epb_change_count() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.epb_change_count)
  return _internal_epb_change_count();
}
inline void LonBasedPidControllerConf::set_epb_change_count(::int32_t value) {
  _internal_set_epb_change_count(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.epb_change_count)
}
inline ::int32_t LonBasedPidControllerConf::_internal_epb_change_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epb_change_count_;
}
inline void LonBasedPidControllerConf::_internal_set_epb_change_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epb_change_count_ = value;
}

// optional double stop_gain_acceleration = 35;
inline bool LonBasedPidControllerConf::has_stop_gain_acceleration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_stop_gain_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_gain_acceleration_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline double LonBasedPidControllerConf::stop_gain_acceleration() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.stop_gain_acceleration)
  return _internal_stop_gain_acceleration();
}
inline void LonBasedPidControllerConf::set_stop_gain_acceleration(double value) {
  _internal_set_stop_gain_acceleration(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.stop_gain_acceleration)
}
inline double LonBasedPidControllerConf::_internal_stop_gain_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stop_gain_acceleration_;
}
inline void LonBasedPidControllerConf::_internal_set_stop_gain_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_gain_acceleration_ = value;
}

// optional bool use_vehicle_epb = 36 [default = false];
inline bool LonBasedPidControllerConf::has_use_vehicle_epb() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_use_vehicle_epb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_vehicle_epb_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool LonBasedPidControllerConf::use_vehicle_epb() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_vehicle_epb)
  return _internal_use_vehicle_epb();
}
inline void LonBasedPidControllerConf::set_use_vehicle_epb(bool value) {
  _internal_set_use_vehicle_epb(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_vehicle_epb)
}
inline bool LonBasedPidControllerConf::_internal_use_vehicle_epb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_vehicle_epb_;
}
inline void LonBasedPidControllerConf::_internal_set_use_vehicle_epb(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_vehicle_epb_ = value;
}

// optional double full_stop_path_remain_gain = 37;
inline bool LonBasedPidControllerConf::has_full_stop_path_remain_gain() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_full_stop_path_remain_gain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_stop_path_remain_gain_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline double LonBasedPidControllerConf::full_stop_path_remain_gain() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.full_stop_path_remain_gain)
  return _internal_full_stop_path_remain_gain();
}
inline void LonBasedPidControllerConf::set_full_stop_path_remain_gain(double value) {
  _internal_set_full_stop_path_remain_gain(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.full_stop_path_remain_gain)
}
inline double LonBasedPidControllerConf::_internal_full_stop_path_remain_gain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.full_stop_path_remain_gain_;
}
inline void LonBasedPidControllerConf::_internal_set_full_stop_path_remain_gain(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.full_stop_path_remain_gain_ = value;
}

// optional int32 use_opposite_slope_compensation = 38 [default = 1];
inline bool LonBasedPidControllerConf::has_use_opposite_slope_compensation() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_use_opposite_slope_compensation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_opposite_slope_compensation_ = 1;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::int32_t LonBasedPidControllerConf::use_opposite_slope_compensation() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.use_opposite_slope_compensation)
  return _internal_use_opposite_slope_compensation();
}
inline void LonBasedPidControllerConf::set_use_opposite_slope_compensation(::int32_t value) {
  _internal_set_use_opposite_slope_compensation(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.use_opposite_slope_compensation)
}
inline ::int32_t LonBasedPidControllerConf::_internal_use_opposite_slope_compensation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_opposite_slope_compensation_;
}
inline void LonBasedPidControllerConf::_internal_set_use_opposite_slope_compensation(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_opposite_slope_compensation_ = value;
}

// optional .control.GainScheduler station_error_gain_scheduler = 39;
inline bool LonBasedPidControllerConf::has_station_error_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.station_error_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_station_error_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.station_error_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::station_error_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
  return _internal_station_error_gain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_station_error_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.station_error_gain_scheduler_);
  }
  _impl_.station_error_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_station_error_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::control::GainScheduler* released = _impl_.station_error_gain_scheduler_;
  _impl_.station_error_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_station_error_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::control::GainScheduler* temp = _impl_.station_error_gain_scheduler_;
  _impl_.station_error_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_station_error_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.station_error_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.station_error_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.station_error_gain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_station_error_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::control::GainScheduler* _msg = _internal_mutable_station_error_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_station_error_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.station_error_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.station_error_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.station_error_gain_scheduler)
}

// optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
inline bool LonBasedPidControllerConf::has_speed_error_accel_pgain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_accel_pgain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_accel_pgain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_accel_pgain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_accel_pgain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
  return _internal_speed_error_accel_pgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_accel_pgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_accel_pgain_scheduler_);
  }
  _impl_.speed_error_accel_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_accel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::control::GainScheduler* released = _impl_.speed_error_accel_pgain_scheduler_;
  _impl_.speed_error_accel_pgain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_accel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::control::GainScheduler* temp = _impl_.speed_error_accel_pgain_scheduler_;
  _impl_.speed_error_accel_pgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_accel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_accel_pgain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_accel_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_accel_pgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_accel_pgain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000800u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_accel_pgain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_accel_pgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_accel_pgain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.speed_error_accel_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_pgain_scheduler)
}

// optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
inline bool LonBasedPidControllerConf::has_speed_error_accel_igain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_accel_igain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_accel_igain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_accel_igain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_accel_igain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
  return _internal_speed_error_accel_igain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_accel_igain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_accel_igain_scheduler_);
  }
  _impl_.speed_error_accel_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_accel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::control::GainScheduler* released = _impl_.speed_error_accel_igain_scheduler_;
  _impl_.speed_error_accel_igain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_accel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::control::GainScheduler* temp = _impl_.speed_error_accel_igain_scheduler_;
  _impl_.speed_error_accel_igain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_accel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_accel_igain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_accel_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_accel_igain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_accel_igain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00001000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_accel_igain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_accel_igain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_accel_igain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.speed_error_accel_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_igain_scheduler)
}

// optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
inline bool LonBasedPidControllerConf::has_speed_error_accel_dgain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_accel_dgain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_accel_dgain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_accel_dgain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_accel_dgain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
  return _internal_speed_error_accel_dgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_accel_dgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_accel_dgain_scheduler_);
  }
  _impl_.speed_error_accel_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_accel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::control::GainScheduler* released = _impl_.speed_error_accel_dgain_scheduler_;
  _impl_.speed_error_accel_dgain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_accel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::control::GainScheduler* temp = _impl_.speed_error_accel_dgain_scheduler_;
  _impl_.speed_error_accel_dgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_accel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_accel_dgain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_accel_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_accel_dgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_accel_dgain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00002000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_accel_dgain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_accel_dgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_accel_dgain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.speed_error_accel_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_accel_dgain_scheduler)
}

// optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
inline bool LonBasedPidControllerConf::has_speed_error_small_pgain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_small_pgain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_small_pgain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_small_pgain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_small_pgain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
  return _internal_speed_error_small_pgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_small_pgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_small_pgain_scheduler_);
  }
  _impl_.speed_error_small_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_small_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::control::GainScheduler* released = _impl_.speed_error_small_pgain_scheduler_;
  _impl_.speed_error_small_pgain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_small_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::control::GainScheduler* temp = _impl_.speed_error_small_pgain_scheduler_;
  _impl_.speed_error_small_pgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_small_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_small_pgain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_small_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_small_pgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_small_pgain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00004000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_small_pgain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_small_pgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_small_pgain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.speed_error_small_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_pgain_scheduler)
}

// optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
inline bool LonBasedPidControllerConf::has_speed_error_small_igain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_small_igain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_small_igain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_small_igain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_small_igain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
  return _internal_speed_error_small_igain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_small_igain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_small_igain_scheduler_);
  }
  _impl_.speed_error_small_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_small_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::control::GainScheduler* released = _impl_.speed_error_small_igain_scheduler_;
  _impl_.speed_error_small_igain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_small_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::control::GainScheduler* temp = _impl_.speed_error_small_igain_scheduler_;
  _impl_.speed_error_small_igain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_small_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_small_igain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_small_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_small_igain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_small_igain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00008000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_small_igain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_small_igain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_small_igain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.speed_error_small_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_igain_scheduler)
}

// optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
inline bool LonBasedPidControllerConf::has_speed_error_small_dgain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_small_dgain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_small_dgain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_small_dgain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_small_dgain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
  return _internal_speed_error_small_dgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_small_dgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_small_dgain_scheduler_);
  }
  _impl_.speed_error_small_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_small_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::control::GainScheduler* released = _impl_.speed_error_small_dgain_scheduler_;
  _impl_.speed_error_small_dgain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_small_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::control::GainScheduler* temp = _impl_.speed_error_small_dgain_scheduler_;
  _impl_.speed_error_small_dgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_small_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_small_dgain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_small_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_small_dgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_small_dgain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00010000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_small_dgain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_small_dgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_small_dgain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.speed_error_small_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_small_dgain_scheduler)
}

// optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
inline bool LonBasedPidControllerConf::has_speed_error_decel_pgain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_decel_pgain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_decel_pgain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_decel_pgain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_decel_pgain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
  return _internal_speed_error_decel_pgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_decel_pgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_decel_pgain_scheduler_);
  }
  _impl_.speed_error_decel_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_decel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::control::GainScheduler* released = _impl_.speed_error_decel_pgain_scheduler_;
  _impl_.speed_error_decel_pgain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_decel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::control::GainScheduler* temp = _impl_.speed_error_decel_pgain_scheduler_;
  _impl_.speed_error_decel_pgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_decel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_decel_pgain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_decel_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_decel_pgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_decel_pgain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00020000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_decel_pgain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_decel_pgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_decel_pgain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }

  _impl_.speed_error_decel_pgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_pgain_scheduler)
}

// optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
inline bool LonBasedPidControllerConf::has_speed_error_decel_igain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_decel_igain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_decel_igain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_decel_igain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_decel_igain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
  return _internal_speed_error_decel_igain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_decel_igain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_decel_igain_scheduler_);
  }
  _impl_.speed_error_decel_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_decel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::control::GainScheduler* released = _impl_.speed_error_decel_igain_scheduler_;
  _impl_.speed_error_decel_igain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_decel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::control::GainScheduler* temp = _impl_.speed_error_decel_igain_scheduler_;
  _impl_.speed_error_decel_igain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_decel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_decel_igain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_decel_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_decel_igain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_decel_igain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00040000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_decel_igain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_decel_igain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_decel_igain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }

  _impl_.speed_error_decel_igain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_igain_scheduler)
}

// optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
inline bool LonBasedPidControllerConf::has_speed_error_decel_dgain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_error_decel_dgain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_speed_error_decel_dgain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.speed_error_decel_dgain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::speed_error_decel_dgain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
  return _internal_speed_error_decel_dgain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_error_decel_dgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_decel_dgain_scheduler_);
  }
  _impl_.speed_error_decel_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_speed_error_decel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::control::GainScheduler* released = _impl_.speed_error_decel_dgain_scheduler_;
  _impl_.speed_error_decel_dgain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_speed_error_decel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::control::GainScheduler* temp = _impl_.speed_error_decel_dgain_scheduler_;
  _impl_.speed_error_decel_dgain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_speed_error_decel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_decel_dgain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.speed_error_decel_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.speed_error_decel_dgain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_speed_error_decel_dgain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00080000u;
  ::control::GainScheduler* _msg = _internal_mutable_speed_error_decel_dgain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_error_decel_dgain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_error_decel_dgain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }

  _impl_.speed_error_decel_dgain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_error_decel_dgain_scheduler)
}

// optional double speed_error_gate = 49;
inline bool LonBasedPidControllerConf::has_speed_error_gate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_speed_error_gate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_gate_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline double LonBasedPidControllerConf::speed_error_gate() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_error_gate)
  return _internal_speed_error_gate();
}
inline void LonBasedPidControllerConf::set_speed_error_gate(double value) {
  _internal_set_speed_error_gate(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.speed_error_gate)
}
inline double LonBasedPidControllerConf::_internal_speed_error_gate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_error_gate_;
}
inline void LonBasedPidControllerConf::_internal_set_speed_error_gate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_error_gate_ = value;
}

// optional .control.PidConf speed_pid_conf = 50;
inline bool LonBasedPidControllerConf::has_speed_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_pid_conf_ != nullptr);
  return value;
}
inline const ::control::PidConf& LonBasedPidControllerConf::_internal_speed_pid_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::PidConf* p = _impl_.speed_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::PidConf&>(::control::_PidConf_default_instance_);
}
inline const ::control::PidConf& LonBasedPidControllerConf::speed_pid_conf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
  return _internal_speed_pid_conf();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_pid_conf_);
  }
  _impl_.speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
}
inline ::control::PidConf* LonBasedPidControllerConf::release_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::control::PidConf* released = _impl_.speed_pid_conf_;
  _impl_.speed_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::PidConf* LonBasedPidControllerConf::unsafe_arena_release_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::control::PidConf* temp = _impl_.speed_pid_conf_;
  _impl_.speed_pid_conf_ = nullptr;
  return temp;
}
inline ::control::PidConf* LonBasedPidControllerConf::_internal_mutable_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_pid_conf_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::PidConf>(GetArena());
    _impl_.speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(p);
  }
  return _impl_.speed_pid_conf_;
}
inline ::control::PidConf* LonBasedPidControllerConf::mutable_speed_pid_conf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00100000u;
  ::control::PidConf* _msg = _internal_mutable_speed_pid_conf();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_speed_pid_conf(::control::PidConf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_pid_conf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }

  _impl_.speed_pid_conf_ = reinterpret_cast<::control::PidConf*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.speed_pid_conf)
}

// optional double acceleration_jerk_limit_up = 51;
inline bool LonBasedPidControllerConf::has_acceleration_jerk_limit_up() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_acceleration_jerk_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_jerk_limit_up_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline double LonBasedPidControllerConf::acceleration_jerk_limit_up() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_up)
  return _internal_acceleration_jerk_limit_up();
}
inline void LonBasedPidControllerConf::set_acceleration_jerk_limit_up(double value) {
  _internal_set_acceleration_jerk_limit_up(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_up)
}
inline double LonBasedPidControllerConf::_internal_acceleration_jerk_limit_up() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_jerk_limit_up_;
}
inline void LonBasedPidControllerConf::_internal_set_acceleration_jerk_limit_up(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_jerk_limit_up_ = value;
}

// optional double acceleration_jerk_limit_low = 52;
inline bool LonBasedPidControllerConf::has_acceleration_jerk_limit_low() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_acceleration_jerk_limit_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_jerk_limit_low_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline double LonBasedPidControllerConf::acceleration_jerk_limit_low() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_low)
  return _internal_acceleration_jerk_limit_low();
}
inline void LonBasedPidControllerConf::set_acceleration_jerk_limit_low(double value) {
  _internal_set_acceleration_jerk_limit_low(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.acceleration_jerk_limit_low)
}
inline double LonBasedPidControllerConf::_internal_acceleration_jerk_limit_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceleration_jerk_limit_low_;
}
inline void LonBasedPidControllerConf::_internal_set_acceleration_jerk_limit_low(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceleration_jerk_limit_low_ = value;
}

// optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
inline bool LonBasedPidControllerConf::has_slope_offset_compensation_gain_scheduler() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slope_offset_compensation_gain_scheduler_ != nullptr);
  return value;
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::_internal_slope_offset_compensation_gain_scheduler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::GainScheduler* p = _impl_.slope_offset_compensation_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::GainScheduler&>(::control::_GainScheduler_default_instance_);
}
inline const ::control::GainScheduler& LonBasedPidControllerConf::slope_offset_compensation_gain_scheduler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
  return _internal_slope_offset_compensation_gain_scheduler();
}
inline void LonBasedPidControllerConf::unsafe_arena_set_allocated_slope_offset_compensation_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_offset_compensation_gain_scheduler_);
  }
  _impl_.slope_offset_compensation_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
}
inline ::control::GainScheduler* LonBasedPidControllerConf::release_slope_offset_compensation_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::control::GainScheduler* released = _impl_.slope_offset_compensation_gain_scheduler_;
  _impl_.slope_offset_compensation_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::unsafe_arena_release_slope_offset_compensation_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::control::GainScheduler* temp = _impl_.slope_offset_compensation_gain_scheduler_;
  _impl_.slope_offset_compensation_gain_scheduler_ = nullptr;
  return temp;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::_internal_mutable_slope_offset_compensation_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_offset_compensation_gain_scheduler_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::GainScheduler>(GetArena());
    _impl_.slope_offset_compensation_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(p);
  }
  return _impl_.slope_offset_compensation_gain_scheduler_;
}
inline ::control::GainScheduler* LonBasedPidControllerConf::mutable_slope_offset_compensation_gain_scheduler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00200000u;
  ::control::GainScheduler* _msg = _internal_mutable_slope_offset_compensation_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
  return _msg;
}
inline void LonBasedPidControllerConf::set_allocated_slope_offset_compensation_gain_scheduler(::control::GainScheduler* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slope_offset_compensation_gain_scheduler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }

  _impl_.slope_offset_compensation_gain_scheduler_ = reinterpret_cast<::control::GainScheduler*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.lonpid.LonBasedPidControllerConf.slope_offset_compensation_gain_scheduler)
}

// optional double brake_cmd_slope = 54;
inline bool LonBasedPidControllerConf::has_brake_cmd_slope() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_brake_cmd_slope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_cmd_slope_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline double LonBasedPidControllerConf::brake_cmd_slope() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.brake_cmd_slope)
  return _internal_brake_cmd_slope();
}
inline void LonBasedPidControllerConf::set_brake_cmd_slope(double value) {
  _internal_set_brake_cmd_slope(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.brake_cmd_slope)
}
inline double LonBasedPidControllerConf::_internal_brake_cmd_slope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_cmd_slope_;
}
inline void LonBasedPidControllerConf::_internal_set_brake_cmd_slope(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_cmd_slope_ = value;
}

// optional double brake_cmd_bias = 55;
inline bool LonBasedPidControllerConf::has_brake_cmd_bias() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_brake_cmd_bias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_cmd_bias_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline double LonBasedPidControllerConf::brake_cmd_bias() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.brake_cmd_bias)
  return _internal_brake_cmd_bias();
}
inline void LonBasedPidControllerConf::set_brake_cmd_bias(double value) {
  _internal_set_brake_cmd_bias(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.brake_cmd_bias)
}
inline double LonBasedPidControllerConf::_internal_brake_cmd_bias() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_cmd_bias_;
}
inline void LonBasedPidControllerConf::_internal_set_brake_cmd_bias(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_cmd_bias_ = value;
}

// optional double throttle_cmd_slope = 56;
inline bool LonBasedPidControllerConf::has_throttle_cmd_slope() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_throttle_cmd_slope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_cmd_slope_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline double LonBasedPidControllerConf::throttle_cmd_slope() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.throttle_cmd_slope)
  return _internal_throttle_cmd_slope();
}
inline void LonBasedPidControllerConf::set_throttle_cmd_slope(double value) {
  _internal_set_throttle_cmd_slope(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.throttle_cmd_slope)
}
inline double LonBasedPidControllerConf::_internal_throttle_cmd_slope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_cmd_slope_;
}
inline void LonBasedPidControllerConf::_internal_set_throttle_cmd_slope(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_cmd_slope_ = value;
}

// optional double throttle_cmd_bias = 57;
inline bool LonBasedPidControllerConf::has_throttle_cmd_bias() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void LonBasedPidControllerConf::clear_throttle_cmd_bias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_cmd_bias_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline double LonBasedPidControllerConf::throttle_cmd_bias() const {
  // @@protoc_insertion_point(field_get:control.lonpid.LonBasedPidControllerConf.throttle_cmd_bias)
  return _internal_throttle_cmd_bias();
}
inline void LonBasedPidControllerConf::set_throttle_cmd_bias(double value) {
  _internal_set_throttle_cmd_bias(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:control.lonpid.LonBasedPidControllerConf.throttle_cmd_bias)
}
inline double LonBasedPidControllerConf::_internal_throttle_cmd_bias() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_cmd_bias_;
}
inline void LonBasedPidControllerConf::_internal_set_throttle_cmd_bias(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_cmd_bias_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace lonpid
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_2epb_2eh

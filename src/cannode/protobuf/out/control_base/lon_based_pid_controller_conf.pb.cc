// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: control_base/lon_based_pid_controller_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#include "control_base/lon_based_pid_controller_conf.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace lonpid {

inline constexpr FilterConf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cutoff_freq_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FilterConf::FilterConf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FilterConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterConfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterConfDefaultTypeInternal() {}
  union {
    FilterConf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterConfDefaultTypeInternal _FilterConf_default_instance_;

inline constexpr LonBasedPidControllerConf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        station_pid_conf_{nullptr},
        low_speed_pid_conf_{nullptr},
        high_speed_pid_conf_{nullptr},
        reverse_station_pid_conf_{nullptr},
        reverse_speed_pid_conf_{nullptr},
        pitch_angle_filter_conf_{nullptr},
        reverse_station_leadlag_conf_{nullptr},
        reverse_speed_leadlag_conf_{nullptr},
        pit_station_pid_conf_{nullptr},
        pit_speed_pid_conf_{nullptr},
        station_error_gain_scheduler_{nullptr},
        speed_error_accel_pgain_scheduler_{nullptr},
        speed_error_accel_igain_scheduler_{nullptr},
        speed_error_accel_dgain_scheduler_{nullptr},
        speed_error_small_pgain_scheduler_{nullptr},
        speed_error_small_igain_scheduler_{nullptr},
        speed_error_small_dgain_scheduler_{nullptr},
        speed_error_decel_pgain_scheduler_{nullptr},
        speed_error_decel_igain_scheduler_{nullptr},
        speed_error_decel_dgain_scheduler_{nullptr},
        speed_pid_conf_{nullptr},
        slope_offset_compensation_gain_scheduler_{nullptr},
        ts_{0},
        brake_minimum_action_{0},
        throttle_minimum_action_{0},
        speed_controller_input_limit_{0},
        station_error_limit_{0},
        preview_window_{0},
        standstill_acceleration_{0},
        switch_speed_{0},
        switch_speed_window_{0},
        enable_reverse_leadlag_compensation_{false},
        enable_speed_station_preview_{false},
        enable_slope_offset_{false},
        use_acceleration_lookup_limit_{false},
        use_preview_reference_check_{false},
        use_steering_check_{false},
        use_vehicle_epb_{false},
        steer_cmd_interval_{0},
        standstill_narmal_acceleration_{0},
        full_stop_long_time_{0},
        stop_gain_acceleration_{0},
        full_stop_path_remain_gain_{0},
        speed_error_gate_{0},
        acceleration_jerk_limit_up_{0},
        acceleration_jerk_limit_low_{0},
        brake_cmd_slope_{0},
        brake_cmd_bias_{0},
        throttle_cmd_slope_{0},
        throttle_cmd_bias_{0},
        use_opposite_slope_compensation_{1},
        max_path_remain_when_stopped_{0.3},
        pedestrian_stop_time_{10},
        pit_replan_check_time_{14},
        pit_replan_check_count_{3},
        epb_change_count_{2} {}

template <typename>
PROTOBUF_CONSTEXPR LonBasedPidControllerConf::LonBasedPidControllerConf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LonBasedPidControllerConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LonBasedPidControllerConfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LonBasedPidControllerConfDefaultTypeInternal() {}
  union {
    LonBasedPidControllerConf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LonBasedPidControllerConfDefaultTypeInternal _LonBasedPidControllerConf_default_instance_;
}  // namespace lonpid
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto = nullptr;
const ::uint32_t
    TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::lonpid::FilterConf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::FilterConf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::lonpid::FilterConf, _impl_.cutoff_freq_),
        0,
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.ts_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.brake_minimum_action_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.throttle_minimum_action_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_controller_input_limit_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.station_error_limit_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.preview_window_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.standstill_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.station_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.low_speed_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.high_speed_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.switch_speed_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.reverse_station_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.reverse_speed_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.pitch_angle_filter_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.reverse_station_leadlag_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.reverse_speed_leadlag_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.enable_reverse_leadlag_compensation_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.switch_speed_window_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.enable_speed_station_preview_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.enable_slope_offset_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.max_path_remain_when_stopped_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.use_acceleration_lookup_limit_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.use_preview_reference_check_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.steer_cmd_interval_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.use_steering_check_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.pedestrian_stop_time_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.standstill_narmal_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.full_stop_long_time_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.pit_station_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.pit_speed_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.pit_replan_check_time_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.pit_replan_check_count_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.epb_change_count_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.stop_gain_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.use_vehicle_epb_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.full_stop_path_remain_gain_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.use_opposite_slope_compensation_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.station_error_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_accel_pgain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_accel_igain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_accel_dgain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_small_pgain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_small_igain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_small_dgain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_decel_pgain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_decel_igain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_decel_dgain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_error_gate_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.speed_pid_conf_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.acceleration_jerk_limit_up_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.acceleration_jerk_limit_low_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.slope_offset_compensation_gain_scheduler_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.brake_cmd_slope_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.brake_cmd_bias_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.throttle_cmd_slope_),
        PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _impl_.throttle_cmd_bias_),
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        0,
        1,
        2,
        29,
        3,
        4,
        5,
        6,
        7,
        31,
        30,
        32,
        33,
        51,
        34,
        35,
        38,
        36,
        52,
        39,
        40,
        8,
        9,
        53,
        54,
        55,
        41,
        37,
        42,
        50,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        43,
        20,
        44,
        45,
        21,
        46,
        47,
        48,
        49,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::control::lonpid::FilterConf)},
        {10, 74, -1, sizeof(::control::lonpid::LonBasedPidControllerConf)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::lonpid::_FilterConf_default_instance_._instance,
    &::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n0control_base/lon_based_pid_controller_"
    "conf.proto\022\016control.lonpid\032\037control_base"
    "/leadlag_conf.proto\032\033control_base/pid_co"
    "nf.proto\032&control_base/gain_scheduler_co"
    "nf.proto\"!\n\nFilterConf\022\023\n\013cutoff_freq\030\001 "
    "\001(\005\"\234\023\n\031LonBasedPidControllerConf\022\n\n\002ts\030"
    "\001 \001(\001\022\034\n\024brake_minimum_action\030\002 \001(\001\022\037\n\027t"
    "hrottle_minimum_action\030\003 \001(\001\022$\n\034speed_co"
    "ntroller_input_limit\030\004 \001(\001\022\033\n\023station_er"
    "ror_limit\030\005 \001(\001\022\026\n\016preview_window\030\006 \001(\001\022"
    "\037\n\027standstill_acceleration\030\007 \001(\001\022*\n\020stat"
    "ion_pid_conf\030\010 \001(\0132\020.control.PidConf\022,\n\022"
    "low_speed_pid_conf\030\t \001(\0132\020.control.PidCo"
    "nf\022-\n\023high_speed_pid_conf\030\n \001(\0132\020.contro"
    "l.PidConf\022\024\n\014switch_speed\030\013 \001(\001\0222\n\030rever"
    "se_station_pid_conf\030\014 \001(\0132\020.control.PidC"
    "onf\0220\n\026reverse_speed_pid_conf\030\r \001(\0132\020.co"
    "ntrol.PidConf\022;\n\027pitch_angle_filter_conf"
    "\030\016 \001(\0132\032.control.lonpid.FilterConf\022:\n\034re"
    "verse_station_leadlag_conf\030\017 \001(\0132\024.contr"
    "ol.LeadlagConf\0228\n\032reverse_speed_leadlag_"
    "conf\030\020 \001(\0132\024.control.LeadlagConf\0222\n#enab"
    "le_reverse_leadlag_compensation\030\022 \001(\010:\005f"
    "alse\022\036\n\023switch_speed_window\030\023 \001(\001:\0010\022+\n\034"
    "enable_speed_station_preview\030\024 \001(\010:\005fals"
    "e\022\"\n\023enable_slope_offset\030\025 \001(\010:\005false\022)\n"
    "\034max_path_remain_when_stopped\030\026 \001(\001:\0030.3"
    "\022,\n\035use_acceleration_lookup_limit\030\027 \001(\010:"
    "\005false\022*\n\033use_preview_reference_check\030\030 "
    "\001(\010:\005false\022\035\n\022steer_cmd_interval\030\031 \001(\001:\001"
    "0\022!\n\022use_steering_check\030\032 \001(\010:\005false\022 \n\024"
    "pedestrian_stop_time\030\033 \001(\001:\00210\022)\n\036stands"
    "till_narmal_acceleration\030\034 \001(\001:\0010\022\036\n\023ful"
    "l_stop_long_time\030\035 \001(\001:\0010\022.\n\024pit_station"
    "_pid_conf\030\036 \001(\0132\020.control.PidConf\022,\n\022pit"
    "_speed_pid_conf\030\037 \001(\0132\020.control.PidConf\022"
    "!\n\025pit_replan_check_time\030  \001(\001:\00214\022!\n\026pi"
    "t_replan_check_count\030! \001(\005:\0013\022\033\n\020epb_cha"
    "nge_count\030\" \001(\005:\0012\022\036\n\026stop_gain_accelera"
    "tion\030# \001(\001\022\036\n\017use_vehicle_epb\030$ \001(\010:\005fal"
    "se\022\"\n\032full_stop_path_remain_gain\030% \001(\001\022*"
    "\n\037use_opposite_slope_compensation\030& \001(\005:"
    "\0011\022<\n\034station_error_gain_scheduler\030\' \001(\013"
    "2\026.control.GainScheduler\022A\n!speed_error_"
    "accel_pgain_scheduler\030( \001(\0132\026.control.Ga"
    "inScheduler\022A\n!speed_error_accel_igain_s"
    "cheduler\030) \001(\0132\026.control.GainScheduler\022A"
    "\n!speed_error_accel_dgain_scheduler\030* \001("
    "\0132\026.control.GainScheduler\022A\n!speed_error"
    "_small_pgain_scheduler\030+ \001(\0132\026.control.G"
    "ainScheduler\022A\n!speed_error_small_igain_"
    "scheduler\030, \001(\0132\026.control.GainScheduler\022"
    "A\n!speed_error_small_dgain_scheduler\030- \001"
    "(\0132\026.control.GainScheduler\022A\n!speed_erro"
    "r_decel_pgain_scheduler\030. \001(\0132\026.control."
    "GainScheduler\022A\n!speed_error_decel_igain"
    "_scheduler\030/ \001(\0132\026.control.GainScheduler"
    "\022A\n!speed_error_decel_dgain_scheduler\0300 "
    "\001(\0132\026.control.GainScheduler\022\030\n\020speed_err"
    "or_gate\0301 \001(\001\022(\n\016speed_pid_conf\0302 \001(\0132\020."
    "control.PidConf\022\"\n\032acceleration_jerk_lim"
    "it_up\0303 \001(\001\022#\n\033acceleration_jerk_limit_l"
    "ow\0304 \001(\001\022H\n(slope_offset_compensation_ga"
    "in_scheduler\0305 \001(\0132\026.control.GainSchedul"
    "er\022\027\n\017brake_cmd_slope\0306 \001(\001\022\026\n\016brake_cmd"
    "_bias\0307 \001(\001\022\032\n\022throttle_cmd_slope\0308 \001(\001\022"
    "\031\n\021throttle_cmd_bias\0309 \001(\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_deps[3] =
    {
        &::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
        &::descriptor_table_control_5fbase_2fleadlag_5fconf_2eproto,
        &::descriptor_table_control_5fbase_2fpid_5fconf_2eproto,
};
static ::absl::once_flag descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto = {
    false,
    false,
    2666,
    descriptor_table_protodef_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto,
    "control_base/lon_based_pid_controller_conf.proto",
    &descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_once,
    descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto::offsets,
    file_level_enum_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto,
    file_level_service_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto,
};
namespace control {
namespace lonpid {
// ===================================================================

class FilterConf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FilterConf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FilterConf, _impl_._has_bits_);
};

FilterConf::FilterConf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.lonpid.FilterConf)
}
FilterConf::FilterConf(
    ::google::protobuf::Arena* arena, const FilterConf& from)
    : FilterConf(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FilterConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FilterConf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.cutoff_freq_ = {};
}
FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:control.lonpid.FilterConf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FilterConf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    FilterConf::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &FilterConf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<FilterConf>(),
            ::google::protobuf::Message::GetNewImpl<FilterConf>(),
            ::google::protobuf::Message::GetClearImpl<FilterConf>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<FilterConf>(),
                ::google::protobuf::Message::GetSerializeImpl<FilterConf>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(FilterConf, _impl_._cached_size_),
            false,
        },
        &FilterConf::kDescriptorMethods,
        &descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* FilterConf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> FilterConf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FilterConf, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FilterConf_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::lonpid::FilterConf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 cutoff_freq = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FilterConf, _impl_.cutoff_freq_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(FilterConf, _impl_.cutoff_freq_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 cutoff_freq = 1;
    {PROTOBUF_FIELD_OFFSET(FilterConf, _impl_.cutoff_freq_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.lonpid.FilterConf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cutoff_freq_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* FilterConf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.lonpid.FilterConf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_cutoff_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.lonpid.FilterConf)
  return target;
}

::size_t FilterConf::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.lonpid.FilterConf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // optional int32 cutoff_freq = 1;
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_cutoff_freq());
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void FilterConf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FilterConf*>(&to_msg);
  auto& from = static_cast<const FilterConf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.lonpid.FilterConf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.cutoff_freq_ = from._impl_.cutoff_freq_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.lonpid.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FilterConf::InternalSwap(FilterConf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.cutoff_freq_, other->_impl_.cutoff_freq_);
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LonBasedPidControllerConf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LonBasedPidControllerConf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_._has_bits_);
};

void LonBasedPidControllerConf::clear_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.station_pid_conf_ != nullptr) _impl_.station_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LonBasedPidControllerConf::clear_low_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_speed_pid_conf_ != nullptr) _impl_.low_speed_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LonBasedPidControllerConf::clear_high_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_speed_pid_conf_ != nullptr) _impl_.high_speed_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LonBasedPidControllerConf::clear_reverse_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_station_pid_conf_ != nullptr) _impl_.reverse_station_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void LonBasedPidControllerConf::clear_reverse_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_speed_pid_conf_ != nullptr) _impl_.reverse_speed_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void LonBasedPidControllerConf::clear_reverse_station_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_station_leadlag_conf_ != nullptr) _impl_.reverse_station_leadlag_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void LonBasedPidControllerConf::clear_reverse_speed_leadlag_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverse_speed_leadlag_conf_ != nullptr) _impl_.reverse_speed_leadlag_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void LonBasedPidControllerConf::clear_pit_station_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pit_station_pid_conf_ != nullptr) _impl_.pit_station_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void LonBasedPidControllerConf::clear_pit_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pit_speed_pid_conf_ != nullptr) _impl_.pit_speed_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void LonBasedPidControllerConf::clear_station_error_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.station_error_gain_scheduler_ != nullptr) _impl_.station_error_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void LonBasedPidControllerConf::clear_speed_error_accel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_accel_pgain_scheduler_ != nullptr) _impl_.speed_error_accel_pgain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void LonBasedPidControllerConf::clear_speed_error_accel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_accel_igain_scheduler_ != nullptr) _impl_.speed_error_accel_igain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void LonBasedPidControllerConf::clear_speed_error_accel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_accel_dgain_scheduler_ != nullptr) _impl_.speed_error_accel_dgain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void LonBasedPidControllerConf::clear_speed_error_small_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_small_pgain_scheduler_ != nullptr) _impl_.speed_error_small_pgain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void LonBasedPidControllerConf::clear_speed_error_small_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_small_igain_scheduler_ != nullptr) _impl_.speed_error_small_igain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void LonBasedPidControllerConf::clear_speed_error_small_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_small_dgain_scheduler_ != nullptr) _impl_.speed_error_small_dgain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void LonBasedPidControllerConf::clear_speed_error_decel_pgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_decel_pgain_scheduler_ != nullptr) _impl_.speed_error_decel_pgain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void LonBasedPidControllerConf::clear_speed_error_decel_igain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_decel_igain_scheduler_ != nullptr) _impl_.speed_error_decel_igain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void LonBasedPidControllerConf::clear_speed_error_decel_dgain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_error_decel_dgain_scheduler_ != nullptr) _impl_.speed_error_decel_dgain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void LonBasedPidControllerConf::clear_speed_pid_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_pid_conf_ != nullptr) _impl_.speed_pid_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void LonBasedPidControllerConf::clear_slope_offset_compensation_gain_scheduler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slope_offset_compensation_gain_scheduler_ != nullptr) _impl_.slope_offset_compensation_gain_scheduler_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
LonBasedPidControllerConf::LonBasedPidControllerConf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.lonpid.LonBasedPidControllerConf)
}
inline PROTOBUF_NDEBUG_INLINE LonBasedPidControllerConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::lonpid::LonBasedPidControllerConf& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LonBasedPidControllerConf::LonBasedPidControllerConf(
    ::google::protobuf::Arena* arena,
    const LonBasedPidControllerConf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LonBasedPidControllerConf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.station_pid_conf_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.station_pid_conf_)
                        : nullptr;
  _impl_.low_speed_pid_conf_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.low_speed_pid_conf_)
                        : nullptr;
  _impl_.high_speed_pid_conf_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.high_speed_pid_conf_)
                        : nullptr;
  _impl_.reverse_station_pid_conf_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.reverse_station_pid_conf_)
                        : nullptr;
  _impl_.reverse_speed_pid_conf_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.reverse_speed_pid_conf_)
                        : nullptr;
  _impl_.pitch_angle_filter_conf_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::control::lonpid::FilterConf>(
                              arena, *from._impl_.pitch_angle_filter_conf_)
                        : nullptr;
  _impl_.reverse_station_leadlag_conf_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::control::LeadlagConf>(
                              arena, *from._impl_.reverse_station_leadlag_conf_)
                        : nullptr;
  _impl_.reverse_speed_leadlag_conf_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::control::LeadlagConf>(
                              arena, *from._impl_.reverse_speed_leadlag_conf_)
                        : nullptr;
  _impl_.pit_station_pid_conf_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.pit_station_pid_conf_)
                        : nullptr;
  _impl_.pit_speed_pid_conf_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.pit_speed_pid_conf_)
                        : nullptr;
  _impl_.station_error_gain_scheduler_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.station_error_gain_scheduler_)
                        : nullptr;
  _impl_.speed_error_accel_pgain_scheduler_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_accel_pgain_scheduler_)
                        : nullptr;
  _impl_.speed_error_accel_igain_scheduler_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_accel_igain_scheduler_)
                        : nullptr;
  _impl_.speed_error_accel_dgain_scheduler_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_accel_dgain_scheduler_)
                        : nullptr;
  _impl_.speed_error_small_pgain_scheduler_ = (cached_has_bits & 0x00004000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_small_pgain_scheduler_)
                        : nullptr;
  _impl_.speed_error_small_igain_scheduler_ = (cached_has_bits & 0x00008000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_small_igain_scheduler_)
                        : nullptr;
  _impl_.speed_error_small_dgain_scheduler_ = (cached_has_bits & 0x00010000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_small_dgain_scheduler_)
                        : nullptr;
  _impl_.speed_error_decel_pgain_scheduler_ = (cached_has_bits & 0x00020000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_decel_pgain_scheduler_)
                        : nullptr;
  _impl_.speed_error_decel_igain_scheduler_ = (cached_has_bits & 0x00040000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_decel_igain_scheduler_)
                        : nullptr;
  _impl_.speed_error_decel_dgain_scheduler_ = (cached_has_bits & 0x00080000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.speed_error_decel_dgain_scheduler_)
                        : nullptr;
  _impl_.speed_pid_conf_ = (cached_has_bits & 0x00100000u) ? ::google::protobuf::Message::CopyConstruct<::control::PidConf>(
                              arena, *from._impl_.speed_pid_conf_)
                        : nullptr;
  _impl_.slope_offset_compensation_gain_scheduler_ = (cached_has_bits & 0x00200000u) ? ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(
                              arena, *from._impl_.slope_offset_compensation_gain_scheduler_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ts_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ts_),
           offsetof(Impl_, epb_change_count_) -
               offsetof(Impl_, ts_) +
               sizeof(Impl_::epb_change_count_));

  // @@protoc_insertion_point(copy_constructor:control.lonpid.LonBasedPidControllerConf)
}
inline PROTOBUF_NDEBUG_INLINE LonBasedPidControllerConf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        use_opposite_slope_compensation_{1},
        max_path_remain_when_stopped_{0.3},
        pedestrian_stop_time_{10},
        pit_replan_check_time_{14},
        pit_replan_check_count_{3},
        epb_change_count_{2} {}

inline void LonBasedPidControllerConf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, station_pid_conf_),
           0,
           offsetof(Impl_, throttle_cmd_bias_) -
               offsetof(Impl_, station_pid_conf_) +
               sizeof(Impl_::throttle_cmd_bias_));
}
LonBasedPidControllerConf::~LonBasedPidControllerConf() {
  // @@protoc_insertion_point(destructor:control.lonpid.LonBasedPidControllerConf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LonBasedPidControllerConf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.station_pid_conf_;
  delete _impl_.low_speed_pid_conf_;
  delete _impl_.high_speed_pid_conf_;
  delete _impl_.reverse_station_pid_conf_;
  delete _impl_.reverse_speed_pid_conf_;
  delete _impl_.pitch_angle_filter_conf_;
  delete _impl_.reverse_station_leadlag_conf_;
  delete _impl_.reverse_speed_leadlag_conf_;
  delete _impl_.pit_station_pid_conf_;
  delete _impl_.pit_speed_pid_conf_;
  delete _impl_.station_error_gain_scheduler_;
  delete _impl_.speed_error_accel_pgain_scheduler_;
  delete _impl_.speed_error_accel_igain_scheduler_;
  delete _impl_.speed_error_accel_dgain_scheduler_;
  delete _impl_.speed_error_small_pgain_scheduler_;
  delete _impl_.speed_error_small_igain_scheduler_;
  delete _impl_.speed_error_small_dgain_scheduler_;
  delete _impl_.speed_error_decel_pgain_scheduler_;
  delete _impl_.speed_error_decel_igain_scheduler_;
  delete _impl_.speed_error_decel_dgain_scheduler_;
  delete _impl_.speed_pid_conf_;
  delete _impl_.slope_offset_compensation_gain_scheduler_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    LonBasedPidControllerConf::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &LonBasedPidControllerConf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<LonBasedPidControllerConf>(),
            ::google::protobuf::Message::GetNewImpl<LonBasedPidControllerConf>(),
            ::google::protobuf::Message::GetClearImpl<LonBasedPidControllerConf>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<LonBasedPidControllerConf>(),
                ::google::protobuf::Message::GetSerializeImpl<LonBasedPidControllerConf>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_._cached_size_),
            false,
        },
        &LonBasedPidControllerConf::kDescriptorMethods,
        &descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* LonBasedPidControllerConf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 56, 22, 0, 9> LonBasedPidControllerConf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_._has_bits_),
    0, // no _extensions_
    57, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    65536,  // skipmap
    offsetof(decltype(_table_), field_entries),
    56,  // num_field_entries
    22,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LonBasedPidControllerConf_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::lonpid::LonBasedPidControllerConf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double ts = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 22, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.ts_)}},
    // optional double brake_minimum_action = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 23, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.brake_minimum_action_)}},
    // optional double throttle_minimum_action = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 24, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.throttle_minimum_action_)}},
    // optional double speed_controller_input_limit = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 25, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_controller_input_limit_)}},
    // optional double station_error_limit = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 26, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.station_error_limit_)}},
    // optional double preview_window = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 27, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.preview_window_)}},
    // optional double standstill_acceleration = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 28, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.standstill_acceleration_)}},
    // optional .control.PidConf station_pid_conf = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.station_pid_conf_)}},
    // optional .control.PidConf low_speed_pid_conf = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.low_speed_pid_conf_)}},
    // optional .control.PidConf high_speed_pid_conf = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 2, 2, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.high_speed_pid_conf_)}},
    // optional double switch_speed = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 29, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.switch_speed_)}},
    // optional .control.PidConf reverse_station_pid_conf = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 3, 3, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_station_pid_conf_)}},
    // optional .control.PidConf reverse_speed_pid_conf = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 4, 4, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_speed_pid_conf_)}},
    // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 5, 5, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pitch_angle_filter_conf_)}},
    // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 6, 6, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_station_leadlag_conf_)}},
    // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 7, 7, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_speed_leadlag_conf_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
    {::_pbi::TcParser::FastV8S2,
     {400, 31, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.enable_reverse_leadlag_compensation_)}},
    // optional double switch_speed_window = 19 [default = 0];
    {::_pbi::TcParser::FastF64S2,
     {409, 30, 0, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.switch_speed_window_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
    {::_pbi::TcParser::FastMtS2,
     {938, 21, 21, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.slope_offset_compensation_gain_scheduler_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.GainScheduler station_error_gain_scheduler = 39;
    {::_pbi::TcParser::FastMtS2,
     {698, 10, 10, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.station_error_gain_scheduler_)}},
    // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
    {::_pbi::TcParser::FastMtS2,
     {706, 11, 11, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_accel_pgain_scheduler_)}},
    // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
    {::_pbi::TcParser::FastMtS2,
     {714, 12, 12, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_accel_igain_scheduler_)}},
    // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
    {::_pbi::TcParser::FastMtS2,
     {722, 13, 13, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_accel_dgain_scheduler_)}},
    // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
    {::_pbi::TcParser::FastMtS2,
     {730, 14, 14, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_small_pgain_scheduler_)}},
    // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
    {::_pbi::TcParser::FastMtS2,
     {738, 15, 15, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_small_igain_scheduler_)}},
    // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
    {::_pbi::TcParser::FastMtS2,
     {746, 16, 16, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_small_dgain_scheduler_)}},
    // optional .control.PidConf pit_station_pid_conf = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 8, 8, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pit_station_pid_conf_)}},
    // optional .control.PidConf pit_speed_pid_conf = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 9, 9, PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pit_speed_pid_conf_)}},
  }}, {{
    33, 0, 2,
    0, 31, 65024, 47,
    65535, 65535
  }}, {{
    // optional double ts = 1;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.ts_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double brake_minimum_action = 2;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.brake_minimum_action_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double throttle_minimum_action = 3;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.throttle_minimum_action_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double speed_controller_input_limit = 4;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_controller_input_limit_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double station_error_limit = 5;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.station_error_limit_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double preview_window = 6;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.preview_window_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double standstill_acceleration = 7;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.standstill_acceleration_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.PidConf station_pid_conf = 8;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.station_pid_conf_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.PidConf low_speed_pid_conf = 9;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.low_speed_pid_conf_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.PidConf high_speed_pid_conf = 10;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.high_speed_pid_conf_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double switch_speed = 11;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.switch_speed_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.PidConf reverse_station_pid_conf = 12;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_station_pid_conf_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.PidConf reverse_speed_pid_conf = 13;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_speed_pid_conf_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pitch_angle_filter_conf_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_station_leadlag_conf_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.reverse_speed_leadlag_conf_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.enable_reverse_leadlag_compensation_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double switch_speed_window = 19 [default = 0];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.switch_speed_window_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool enable_speed_station_preview = 20 [default = false];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.enable_speed_station_preview_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_slope_offset = 21 [default = false];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.enable_slope_offset_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double max_path_remain_when_stopped = 22 [default = 0.3];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.max_path_remain_when_stopped_), _Internal::kHasBitsOffset + 51, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool use_acceleration_lookup_limit = 23 [default = false];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.use_acceleration_lookup_limit_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool use_preview_reference_check = 24 [default = false];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.use_preview_reference_check_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double steer_cmd_interval = 25 [default = 0];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.steer_cmd_interval_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool use_steering_check = 26 [default = false];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.use_steering_check_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double pedestrian_stop_time = 27 [default = 10];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pedestrian_stop_time_), _Internal::kHasBitsOffset + 52, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double standstill_narmal_acceleration = 28 [default = 0];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.standstill_narmal_acceleration_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double full_stop_long_time = 29 [default = 0];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.full_stop_long_time_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.PidConf pit_station_pid_conf = 30;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pit_station_pid_conf_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.PidConf pit_speed_pid_conf = 31;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pit_speed_pid_conf_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double pit_replan_check_time = 32 [default = 14];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pit_replan_check_time_), _Internal::kHasBitsOffset + 53, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 pit_replan_check_count = 33 [default = 3];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.pit_replan_check_count_), _Internal::kHasBitsOffset + 54, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 epb_change_count = 34 [default = 2];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.epb_change_count_), _Internal::kHasBitsOffset + 55, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double stop_gain_acceleration = 35;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.stop_gain_acceleration_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool use_vehicle_epb = 36 [default = false];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.use_vehicle_epb_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double full_stop_path_remain_gain = 37;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.full_stop_path_remain_gain_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 use_opposite_slope_compensation = 38 [default = 1];
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.use_opposite_slope_compensation_), _Internal::kHasBitsOffset + 50, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .control.GainScheduler station_error_gain_scheduler = 39;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.station_error_gain_scheduler_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_accel_pgain_scheduler_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_accel_igain_scheduler_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_accel_dgain_scheduler_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_small_pgain_scheduler_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_small_igain_scheduler_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_small_dgain_scheduler_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_decel_pgain_scheduler_), _Internal::kHasBitsOffset + 17, 17,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_decel_igain_scheduler_), _Internal::kHasBitsOffset + 18, 18,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_decel_dgain_scheduler_), _Internal::kHasBitsOffset + 19, 19,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double speed_error_gate = 49;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_error_gate_), _Internal::kHasBitsOffset + 43, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.PidConf speed_pid_conf = 50;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.speed_pid_conf_), _Internal::kHasBitsOffset + 20, 20,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double acceleration_jerk_limit_up = 51;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.acceleration_jerk_limit_up_), _Internal::kHasBitsOffset + 44, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double acceleration_jerk_limit_low = 52;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.acceleration_jerk_limit_low_), _Internal::kHasBitsOffset + 45, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.slope_offset_compensation_gain_scheduler_), _Internal::kHasBitsOffset + 21, 21,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double brake_cmd_slope = 54;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.brake_cmd_slope_), _Internal::kHasBitsOffset + 46, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double brake_cmd_bias = 55;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.brake_cmd_bias_), _Internal::kHasBitsOffset + 47, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double throttle_cmd_slope = 56;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.throttle_cmd_slope_), _Internal::kHasBitsOffset + 48, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double throttle_cmd_bias = 57;
    {PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.throttle_cmd_bias_), _Internal::kHasBitsOffset + 49, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::lonpid::FilterConf>()},
    {::_pbi::TcParser::GetTable<::control::LeadlagConf>()},
    {::_pbi::TcParser::GetTable<::control::LeadlagConf>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
    {::_pbi::TcParser::GetTable<::control::PidConf>()},
    {::_pbi::TcParser::GetTable<::control::GainScheduler>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LonBasedPidControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.lonpid.LonBasedPidControllerConf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.station_pid_conf_ != nullptr);
      _impl_.station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.low_speed_pid_conf_ != nullptr);
      _impl_.low_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.high_speed_pid_conf_ != nullptr);
      _impl_.high_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.reverse_station_pid_conf_ != nullptr);
      _impl_.reverse_station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.reverse_speed_pid_conf_ != nullptr);
      _impl_.reverse_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.pitch_angle_filter_conf_ != nullptr);
      _impl_.pitch_angle_filter_conf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.reverse_station_leadlag_conf_ != nullptr);
      _impl_.reverse_station_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.reverse_speed_leadlag_conf_ != nullptr);
      _impl_.reverse_speed_leadlag_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.pit_station_pid_conf_ != nullptr);
      _impl_.pit_station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.pit_speed_pid_conf_ != nullptr);
      _impl_.pit_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.station_error_gain_scheduler_ != nullptr);
      _impl_.station_error_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.speed_error_accel_pgain_scheduler_ != nullptr);
      _impl_.speed_error_accel_pgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.speed_error_accel_igain_scheduler_ != nullptr);
      _impl_.speed_error_accel_igain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.speed_error_accel_dgain_scheduler_ != nullptr);
      _impl_.speed_error_accel_dgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.speed_error_small_pgain_scheduler_ != nullptr);
      _impl_.speed_error_small_pgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.speed_error_small_igain_scheduler_ != nullptr);
      _impl_.speed_error_small_igain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(_impl_.speed_error_small_dgain_scheduler_ != nullptr);
      _impl_.speed_error_small_dgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(_impl_.speed_error_decel_pgain_scheduler_ != nullptr);
      _impl_.speed_error_decel_pgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(_impl_.speed_error_decel_igain_scheduler_ != nullptr);
      _impl_.speed_error_decel_igain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      ABSL_DCHECK(_impl_.speed_error_decel_dgain_scheduler_ != nullptr);
      _impl_.speed_error_decel_dgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      ABSL_DCHECK(_impl_.speed_pid_conf_ != nullptr);
      _impl_.speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      ABSL_DCHECK(_impl_.slope_offset_compensation_gain_scheduler_ != nullptr);
      _impl_.slope_offset_compensation_gain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x00c00000u) {
    ::memset(&_impl_.ts_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.brake_minimum_action_) -
        reinterpret_cast<char*>(&_impl_.ts_)) + sizeof(_impl_.brake_minimum_action_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.throttle_minimum_action_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_reverse_leadlag_compensation_) -
        reinterpret_cast<char*>(&_impl_.throttle_minimum_action_)) + sizeof(_impl_.enable_reverse_leadlag_compensation_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.enable_speed_station_preview_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.standstill_narmal_acceleration_) -
        reinterpret_cast<char*>(&_impl_.enable_speed_station_preview_)) + sizeof(_impl_.standstill_narmal_acceleration_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.full_stop_long_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.brake_cmd_bias_) -
        reinterpret_cast<char*>(&_impl_.full_stop_long_time_)) + sizeof(_impl_.brake_cmd_bias_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.throttle_cmd_slope_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.throttle_cmd_bias_) -
        reinterpret_cast<char*>(&_impl_.throttle_cmd_slope_)) + sizeof(_impl_.throttle_cmd_bias_));
    _impl_.use_opposite_slope_compensation_ = 1;
    _impl_.max_path_remain_when_stopped_ = 0.3;
    _impl_.pedestrian_stop_time_ = 10;
    _impl_.pit_replan_check_time_ = 14;
    _impl_.pit_replan_check_count_ = 3;
    _impl_.epb_change_count_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* LonBasedPidControllerConf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.lonpid.LonBasedPidControllerConf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_ts(), target);
  }

  // optional double brake_minimum_action = 2;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_brake_minimum_action(), target);
  }

  // optional double throttle_minimum_action = 3;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_throttle_minimum_action(), target);
  }

  // optional double speed_controller_input_limit = 4;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_speed_controller_input_limit(), target);
  }

  // optional double station_error_limit = 5;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_station_error_limit(), target);
  }

  // optional double preview_window = 6;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_preview_window(), target);
  }

  // optional double standstill_acceleration = 7;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_standstill_acceleration(), target);
  }

  // optional .control.PidConf station_pid_conf = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *_impl_.station_pid_conf_, _impl_.station_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional .control.PidConf low_speed_pid_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.low_speed_pid_conf_, _impl_.low_speed_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional .control.PidConf high_speed_pid_conf = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *_impl_.high_speed_pid_conf_, _impl_.high_speed_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional double switch_speed = 11;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_switch_speed(), target);
  }

  // optional .control.PidConf reverse_station_pid_conf = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *_impl_.reverse_station_pid_conf_, _impl_.reverse_station_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional .control.PidConf reverse_speed_pid_conf = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *_impl_.reverse_speed_pid_conf_, _impl_.reverse_speed_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *_impl_.pitch_angle_filter_conf_, _impl_.pitch_angle_filter_conf_->GetCachedSize(), target, stream);
  }

  // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *_impl_.reverse_station_leadlag_conf_, _impl_.reverse_station_leadlag_conf_->GetCachedSize(), target, stream);
  }

  // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *_impl_.reverse_speed_leadlag_conf_, _impl_.reverse_speed_leadlag_conf_->GetCachedSize(), target, stream);
  }

  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  // optional double switch_speed_window = 19 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        19, this->_internal_switch_speed_window(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool enable_speed_station_preview = 20 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_enable_speed_station_preview(), target);
  }

  // optional bool enable_slope_offset = 21 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_enable_slope_offset(), target);
  }

  // optional double max_path_remain_when_stopped = 22 [default = 0.3];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        22, this->_internal_max_path_remain_when_stopped(), target);
  }

  // optional bool use_acceleration_lookup_limit = 23 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_use_acceleration_lookup_limit(), target);
  }

  // optional bool use_preview_reference_check = 24 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        24, this->_internal_use_preview_reference_check(), target);
  }

  // optional double steer_cmd_interval = 25 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        25, this->_internal_steer_cmd_interval(), target);
  }

  // optional bool use_steering_check = 26 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_use_steering_check(), target);
  }

  // optional double pedestrian_stop_time = 27 [default = 10];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_pedestrian_stop_time(), target);
  }

  // optional double standstill_narmal_acceleration = 28 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        28, this->_internal_standstill_narmal_acceleration(), target);
  }

  // optional double full_stop_long_time = 29 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        29, this->_internal_full_stop_long_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.PidConf pit_station_pid_conf = 30;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, *_impl_.pit_station_pid_conf_, _impl_.pit_station_pid_conf_->GetCachedSize(), target, stream);
  }

  // optional .control.PidConf pit_speed_pid_conf = 31;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        31, *_impl_.pit_speed_pid_conf_, _impl_.pit_speed_pid_conf_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double pit_replan_check_time = 32 [default = 14];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        32, this->_internal_pit_replan_check_time(), target);
  }

  // optional int32 pit_replan_check_count = 33 [default = 3];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        33, this->_internal_pit_replan_check_count(), target);
  }

  // optional int32 epb_change_count = 34 [default = 2];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        34, this->_internal_epb_change_count(), target);
  }

  // optional double stop_gain_acceleration = 35;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        35, this->_internal_stop_gain_acceleration(), target);
  }

  // optional bool use_vehicle_epb = 36 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        36, this->_internal_use_vehicle_epb(), target);
  }

  // optional double full_stop_path_remain_gain = 37;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        37, this->_internal_full_stop_path_remain_gain(), target);
  }

  // optional int32 use_opposite_slope_compensation = 38 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        38, this->_internal_use_opposite_slope_compensation(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.GainScheduler station_error_gain_scheduler = 39;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        39, *_impl_.station_error_gain_scheduler_, _impl_.station_error_gain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        40, *_impl_.speed_error_accel_pgain_scheduler_, _impl_.speed_error_accel_pgain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        41, *_impl_.speed_error_accel_igain_scheduler_, _impl_.speed_error_accel_igain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        42, *_impl_.speed_error_accel_dgain_scheduler_, _impl_.speed_error_accel_dgain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        43, *_impl_.speed_error_small_pgain_scheduler_, _impl_.speed_error_small_pgain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        44, *_impl_.speed_error_small_igain_scheduler_, _impl_.speed_error_small_igain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        45, *_impl_.speed_error_small_dgain_scheduler_, _impl_.speed_error_small_dgain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        46, *_impl_.speed_error_decel_pgain_scheduler_, _impl_.speed_error_decel_pgain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        47, *_impl_.speed_error_decel_igain_scheduler_, _impl_.speed_error_decel_igain_scheduler_->GetCachedSize(), target, stream);
  }

  // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        48, *_impl_.speed_error_decel_dgain_scheduler_, _impl_.speed_error_decel_dgain_scheduler_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double speed_error_gate = 49;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        49, this->_internal_speed_error_gate(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.PidConf speed_pid_conf = 50;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        50, *_impl_.speed_pid_conf_, _impl_.speed_pid_conf_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double acceleration_jerk_limit_up = 51;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        51, this->_internal_acceleration_jerk_limit_up(), target);
  }

  // optional double acceleration_jerk_limit_low = 52;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        52, this->_internal_acceleration_jerk_limit_low(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        53, *_impl_.slope_offset_compensation_gain_scheduler_, _impl_.slope_offset_compensation_gain_scheduler_->GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double brake_cmd_slope = 54;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        54, this->_internal_brake_cmd_slope(), target);
  }

  // optional double brake_cmd_bias = 55;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        55, this->_internal_brake_cmd_bias(), target);
  }

  // optional double throttle_cmd_slope = 56;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        56, this->_internal_throttle_cmd_slope(), target);
  }

  // optional double throttle_cmd_bias = 57;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        57, this->_internal_throttle_cmd_bias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.lonpid.LonBasedPidControllerConf)
  return target;
}

::size_t LonBasedPidControllerConf::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.lonpid.LonBasedPidControllerConf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.PidConf station_pid_conf = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.station_pid_conf_);
    }
    // optional .control.PidConf low_speed_pid_conf = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.low_speed_pid_conf_);
    }
    // optional .control.PidConf high_speed_pid_conf = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.high_speed_pid_conf_);
    }
    // optional .control.PidConf reverse_station_pid_conf = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reverse_station_pid_conf_);
    }
    // optional .control.PidConf reverse_speed_pid_conf = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reverse_speed_pid_conf_);
    }
    // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pitch_angle_filter_conf_);
    }
    // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reverse_station_leadlag_conf_);
    }
    // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reverse_speed_leadlag_conf_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.PidConf pit_station_pid_conf = 30;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pit_station_pid_conf_);
    }
    // optional .control.PidConf pit_speed_pid_conf = 31;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pit_speed_pid_conf_);
    }
    // optional .control.GainScheduler station_error_gain_scheduler = 39;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.station_error_gain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_accel_pgain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_accel_igain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
    if (cached_has_bits & 0x00002000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_accel_dgain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
    if (cached_has_bits & 0x00004000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_small_pgain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
    if (cached_has_bits & 0x00008000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_small_igain_scheduler_);
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
    if (cached_has_bits & 0x00010000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_small_dgain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
    if (cached_has_bits & 0x00020000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_decel_pgain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
    if (cached_has_bits & 0x00040000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_decel_igain_scheduler_);
    }
    // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
    if (cached_has_bits & 0x00080000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_error_decel_dgain_scheduler_);
    }
    // optional .control.PidConf speed_pid_conf = 50;
    if (cached_has_bits & 0x00100000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_pid_conf_);
    }
    // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
    if (cached_has_bits & 0x00200000u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.slope_offset_compensation_gain_scheduler_);
    }
    // optional double ts = 1;
    if (cached_has_bits & 0x00400000u) {
      total_size += 9;
    }
    // optional double brake_minimum_action = 2;
    if (cached_has_bits & 0x00800000u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    // optional double throttle_minimum_action = 3;
    if (cached_has_bits & 0x01000000u) {
      total_size += 9;
    }
    // optional double speed_controller_input_limit = 4;
    if (cached_has_bits & 0x02000000u) {
      total_size += 9;
    }
    // optional double station_error_limit = 5;
    if (cached_has_bits & 0x04000000u) {
      total_size += 9;
    }
    // optional double preview_window = 6;
    if (cached_has_bits & 0x08000000u) {
      total_size += 9;
    }
    // optional double standstill_acceleration = 7;
    if (cached_has_bits & 0x10000000u) {
      total_size += 9;
    }
    // optional double switch_speed = 11;
    if (cached_has_bits & 0x20000000u) {
      total_size += 9;
    }
    // optional double switch_speed_window = 19 [default = 0];
    if (cached_has_bits & 0x40000000u) {
      total_size += 10;
    }
    // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3;
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_speed_station_preview = 20 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3;
    }
    // optional bool enable_slope_offset = 21 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3;
    }
    // optional bool use_acceleration_lookup_limit = 23 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3;
    }
    // optional bool use_preview_reference_check = 24 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3;
    }
    // optional bool use_steering_check = 26 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3;
    }
    // optional bool use_vehicle_epb = 36 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3;
    }
    // optional double steer_cmd_interval = 25 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 10;
    }
    // optional double standstill_narmal_acceleration = 28 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double full_stop_long_time = 29 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 10;
    }
    // optional double stop_gain_acceleration = 35;
    if (cached_has_bits & 0x00000200u) {
      total_size += 10;
    }
    // optional double full_stop_path_remain_gain = 37;
    if (cached_has_bits & 0x00000400u) {
      total_size += 10;
    }
    // optional double speed_error_gate = 49;
    if (cached_has_bits & 0x00000800u) {
      total_size += 10;
    }
    // optional double acceleration_jerk_limit_up = 51;
    if (cached_has_bits & 0x00001000u) {
      total_size += 10;
    }
    // optional double acceleration_jerk_limit_low = 52;
    if (cached_has_bits & 0x00002000u) {
      total_size += 10;
    }
    // optional double brake_cmd_slope = 54;
    if (cached_has_bits & 0x00004000u) {
      total_size += 10;
    }
    // optional double brake_cmd_bias = 55;
    if (cached_has_bits & 0x00008000u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double throttle_cmd_slope = 56;
    if (cached_has_bits & 0x00010000u) {
      total_size += 10;
    }
    // optional double throttle_cmd_bias = 57;
    if (cached_has_bits & 0x00020000u) {
      total_size += 10;
    }
    // optional int32 use_opposite_slope_compensation = 38 [default = 1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_use_opposite_slope_compensation());
    }
    // optional double max_path_remain_when_stopped = 22 [default = 0.3];
    if (cached_has_bits & 0x00080000u) {
      total_size += 10;
    }
    // optional double pedestrian_stop_time = 27 [default = 10];
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }
    // optional double pit_replan_check_time = 32 [default = 14];
    if (cached_has_bits & 0x00200000u) {
      total_size += 10;
    }
    // optional int32 pit_replan_check_count = 33 [default = 3];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_pit_replan_check_count());
    }
    // optional int32 epb_change_count = 34 [default = 2];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_epb_change_count());
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void LonBasedPidControllerConf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LonBasedPidControllerConf*>(&to_msg);
  auto& from = static_cast<const LonBasedPidControllerConf&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.lonpid.LonBasedPidControllerConf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.station_pid_conf_ != nullptr);
      if (_this->_impl_.station_pid_conf_ == nullptr) {
        _this->_impl_.station_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.station_pid_conf_);
      } else {
        _this->_impl_.station_pid_conf_->MergeFrom(*from._impl_.station_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.low_speed_pid_conf_ != nullptr);
      if (_this->_impl_.low_speed_pid_conf_ == nullptr) {
        _this->_impl_.low_speed_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.low_speed_pid_conf_);
      } else {
        _this->_impl_.low_speed_pid_conf_->MergeFrom(*from._impl_.low_speed_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.high_speed_pid_conf_ != nullptr);
      if (_this->_impl_.high_speed_pid_conf_ == nullptr) {
        _this->_impl_.high_speed_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.high_speed_pid_conf_);
      } else {
        _this->_impl_.high_speed_pid_conf_->MergeFrom(*from._impl_.high_speed_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.reverse_station_pid_conf_ != nullptr);
      if (_this->_impl_.reverse_station_pid_conf_ == nullptr) {
        _this->_impl_.reverse_station_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.reverse_station_pid_conf_);
      } else {
        _this->_impl_.reverse_station_pid_conf_->MergeFrom(*from._impl_.reverse_station_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.reverse_speed_pid_conf_ != nullptr);
      if (_this->_impl_.reverse_speed_pid_conf_ == nullptr) {
        _this->_impl_.reverse_speed_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.reverse_speed_pid_conf_);
      } else {
        _this->_impl_.reverse_speed_pid_conf_->MergeFrom(*from._impl_.reverse_speed_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.pitch_angle_filter_conf_ != nullptr);
      if (_this->_impl_.pitch_angle_filter_conf_ == nullptr) {
        _this->_impl_.pitch_angle_filter_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::lonpid::FilterConf>(arena, *from._impl_.pitch_angle_filter_conf_);
      } else {
        _this->_impl_.pitch_angle_filter_conf_->MergeFrom(*from._impl_.pitch_angle_filter_conf_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.reverse_station_leadlag_conf_ != nullptr);
      if (_this->_impl_.reverse_station_leadlag_conf_ == nullptr) {
        _this->_impl_.reverse_station_leadlag_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::LeadlagConf>(arena, *from._impl_.reverse_station_leadlag_conf_);
      } else {
        _this->_impl_.reverse_station_leadlag_conf_->MergeFrom(*from._impl_.reverse_station_leadlag_conf_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.reverse_speed_leadlag_conf_ != nullptr);
      if (_this->_impl_.reverse_speed_leadlag_conf_ == nullptr) {
        _this->_impl_.reverse_speed_leadlag_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::LeadlagConf>(arena, *from._impl_.reverse_speed_leadlag_conf_);
      } else {
        _this->_impl_.reverse_speed_leadlag_conf_->MergeFrom(*from._impl_.reverse_speed_leadlag_conf_);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.pit_station_pid_conf_ != nullptr);
      if (_this->_impl_.pit_station_pid_conf_ == nullptr) {
        _this->_impl_.pit_station_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.pit_station_pid_conf_);
      } else {
        _this->_impl_.pit_station_pid_conf_->MergeFrom(*from._impl_.pit_station_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.pit_speed_pid_conf_ != nullptr);
      if (_this->_impl_.pit_speed_pid_conf_ == nullptr) {
        _this->_impl_.pit_speed_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.pit_speed_pid_conf_);
      } else {
        _this->_impl_.pit_speed_pid_conf_->MergeFrom(*from._impl_.pit_speed_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.station_error_gain_scheduler_ != nullptr);
      if (_this->_impl_.station_error_gain_scheduler_ == nullptr) {
        _this->_impl_.station_error_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.station_error_gain_scheduler_);
      } else {
        _this->_impl_.station_error_gain_scheduler_->MergeFrom(*from._impl_.station_error_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.speed_error_accel_pgain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_accel_pgain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_accel_pgain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_accel_pgain_scheduler_);
      } else {
        _this->_impl_.speed_error_accel_pgain_scheduler_->MergeFrom(*from._impl_.speed_error_accel_pgain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.speed_error_accel_igain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_accel_igain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_accel_igain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_accel_igain_scheduler_);
      } else {
        _this->_impl_.speed_error_accel_igain_scheduler_->MergeFrom(*from._impl_.speed_error_accel_igain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.speed_error_accel_dgain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_accel_dgain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_accel_dgain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_accel_dgain_scheduler_);
      } else {
        _this->_impl_.speed_error_accel_dgain_scheduler_->MergeFrom(*from._impl_.speed_error_accel_dgain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(from._impl_.speed_error_small_pgain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_small_pgain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_small_pgain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_small_pgain_scheduler_);
      } else {
        _this->_impl_.speed_error_small_pgain_scheduler_->MergeFrom(*from._impl_.speed_error_small_pgain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(from._impl_.speed_error_small_igain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_small_igain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_small_igain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_small_igain_scheduler_);
      } else {
        _this->_impl_.speed_error_small_igain_scheduler_->MergeFrom(*from._impl_.speed_error_small_igain_scheduler_);
      }
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(from._impl_.speed_error_small_dgain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_small_dgain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_small_dgain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_small_dgain_scheduler_);
      } else {
        _this->_impl_.speed_error_small_dgain_scheduler_->MergeFrom(*from._impl_.speed_error_small_dgain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(from._impl_.speed_error_decel_pgain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_decel_pgain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_decel_pgain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_decel_pgain_scheduler_);
      } else {
        _this->_impl_.speed_error_decel_pgain_scheduler_->MergeFrom(*from._impl_.speed_error_decel_pgain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(from._impl_.speed_error_decel_igain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_decel_igain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_decel_igain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_decel_igain_scheduler_);
      } else {
        _this->_impl_.speed_error_decel_igain_scheduler_->MergeFrom(*from._impl_.speed_error_decel_igain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00080000u) {
      ABSL_DCHECK(from._impl_.speed_error_decel_dgain_scheduler_ != nullptr);
      if (_this->_impl_.speed_error_decel_dgain_scheduler_ == nullptr) {
        _this->_impl_.speed_error_decel_dgain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.speed_error_decel_dgain_scheduler_);
      } else {
        _this->_impl_.speed_error_decel_dgain_scheduler_->MergeFrom(*from._impl_.speed_error_decel_dgain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00100000u) {
      ABSL_DCHECK(from._impl_.speed_pid_conf_ != nullptr);
      if (_this->_impl_.speed_pid_conf_ == nullptr) {
        _this->_impl_.speed_pid_conf_ =
            ::google::protobuf::Message::CopyConstruct<::control::PidConf>(arena, *from._impl_.speed_pid_conf_);
      } else {
        _this->_impl_.speed_pid_conf_->MergeFrom(*from._impl_.speed_pid_conf_);
      }
    }
    if (cached_has_bits & 0x00200000u) {
      ABSL_DCHECK(from._impl_.slope_offset_compensation_gain_scheduler_ != nullptr);
      if (_this->_impl_.slope_offset_compensation_gain_scheduler_ == nullptr) {
        _this->_impl_.slope_offset_compensation_gain_scheduler_ =
            ::google::protobuf::Message::CopyConstruct<::control::GainScheduler>(arena, *from._impl_.slope_offset_compensation_gain_scheduler_);
      } else {
        _this->_impl_.slope_offset_compensation_gain_scheduler_->MergeFrom(*from._impl_.slope_offset_compensation_gain_scheduler_);
      }
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.ts_ = from._impl_.ts_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.brake_minimum_action_ = from._impl_.brake_minimum_action_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.throttle_minimum_action_ = from._impl_.throttle_minimum_action_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.speed_controller_input_limit_ = from._impl_.speed_controller_input_limit_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.station_error_limit_ = from._impl_.station_error_limit_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.preview_window_ = from._impl_.preview_window_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.standstill_acceleration_ = from._impl_.standstill_acceleration_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.switch_speed_ = from._impl_.switch_speed_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.switch_speed_window_ = from._impl_.switch_speed_window_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.enable_reverse_leadlag_compensation_ = from._impl_.enable_reverse_leadlag_compensation_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.enable_speed_station_preview_ = from._impl_.enable_speed_station_preview_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.enable_slope_offset_ = from._impl_.enable_slope_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.use_acceleration_lookup_limit_ = from._impl_.use_acceleration_lookup_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.use_preview_reference_check_ = from._impl_.use_preview_reference_check_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.use_steering_check_ = from._impl_.use_steering_check_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.use_vehicle_epb_ = from._impl_.use_vehicle_epb_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.steer_cmd_interval_ = from._impl_.steer_cmd_interval_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.standstill_narmal_acceleration_ = from._impl_.standstill_narmal_acceleration_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.full_stop_long_time_ = from._impl_.full_stop_long_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.stop_gain_acceleration_ = from._impl_.stop_gain_acceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.full_stop_path_remain_gain_ = from._impl_.full_stop_path_remain_gain_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.speed_error_gate_ = from._impl_.speed_error_gate_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.acceleration_jerk_limit_up_ = from._impl_.acceleration_jerk_limit_up_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.acceleration_jerk_limit_low_ = from._impl_.acceleration_jerk_limit_low_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.brake_cmd_slope_ = from._impl_.brake_cmd_slope_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.brake_cmd_bias_ = from._impl_.brake_cmd_bias_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.throttle_cmd_slope_ = from._impl_.throttle_cmd_slope_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.throttle_cmd_bias_ = from._impl_.throttle_cmd_bias_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.use_opposite_slope_compensation_ = from._impl_.use_opposite_slope_compensation_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.max_path_remain_when_stopped_ = from._impl_.max_path_remain_when_stopped_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.pedestrian_stop_time_ = from._impl_.pedestrian_stop_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.pit_replan_check_time_ = from._impl_.pit_replan_check_time_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.pit_replan_check_count_ = from._impl_.pit_replan_check_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.epb_change_count_ = from._impl_.epb_change_count_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LonBasedPidControllerConf::CopyFrom(const LonBasedPidControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.lonpid.LonBasedPidControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LonBasedPidControllerConf::InternalSwap(LonBasedPidControllerConf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.epb_change_count_)
      + sizeof(LonBasedPidControllerConf::_impl_.epb_change_count_)
      - PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, _impl_.station_pid_conf_)>(
          reinterpret_cast<char*>(&_impl_.station_pid_conf_),
          reinterpret_cast<char*>(&other->_impl_.station_pid_conf_));
}

::google::protobuf::Metadata LonBasedPidControllerConf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace lonpid
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

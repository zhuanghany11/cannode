// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_base/lon_based_pid_controller_conf.proto

#include "control_base/lon_based_pid_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fgain_5fscheduler_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fleadlag_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeadlagConf_control_5fbase_2fleadlag_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2fpid_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PidConf_control_5fbase_2fpid_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto;
namespace control {
namespace lonpid {
class FilterConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterConf> _instance;
} _FilterConf_default_instance_;
class LonBasedPidControllerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LonBasedPidControllerConf> _instance;
} _LonBasedPidControllerConf_default_instance_;
}  // namespace lonpid
}  // namespace control
static void InitDefaultsscc_info_FilterConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::lonpid::_FilterConf_default_instance_;
    new (ptr) ::control::lonpid::FilterConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::lonpid::FilterConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_LonBasedPidControllerConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::lonpid::_LonBasedPidControllerConf_default_instance_;
    new (ptr) ::control::lonpid::LonBasedPidControllerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::lonpid::LonBasedPidControllerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LonBasedPidControllerConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LonBasedPidControllerConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto}, {
      &scc_info_PidConf_control_5fbase_2fpid_5fconf_2eproto.base,
      &scc_info_FilterConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.base,
      &scc_info_LeadlagConf_control_5fbase_2fleadlag_5fconf_2eproto.base,
      &scc_info_GainScheduler_control_5fbase_2fgain_5fscheduler_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::lonpid::FilterConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::FilterConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::lonpid::FilterConf, cutoff_freq_),
  0,
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, brake_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, throttle_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_controller_input_limit_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, station_error_limit_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, standstill_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, low_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, high_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, switch_speed_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, reverse_station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, reverse_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, pitch_angle_filter_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, reverse_station_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, reverse_speed_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, enable_reverse_leadlag_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, switch_speed_window_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, enable_speed_station_preview_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, enable_slope_offset_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, max_path_remain_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, use_acceleration_lookup_limit_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, use_preview_reference_check_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, steer_cmd_interval_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, use_steering_check_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, pedestrian_stop_time_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, standstill_narmal_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, full_stop_long_time_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, pit_station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, pit_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, pit_replan_check_time_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, pit_replan_check_count_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, epb_change_count_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, stop_gain_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, use_vehicle_epb_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, full_stop_path_remain_gain_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, use_opposite_slope_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, station_error_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_accel_pgain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_accel_igain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_accel_dgain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_small_pgain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_small_igain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_small_dgain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_decel_pgain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_decel_igain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_decel_dgain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_error_gate_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, acceleration_jerk_limit_up_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, acceleration_jerk_limit_low_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, slope_offset_compensation_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, brake_cmd_slope_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, brake_cmd_bias_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, throttle_cmd_slope_),
  PROTOBUF_FIELD_OFFSET(::control::lonpid::LonBasedPidControllerConf, throttle_cmd_bias_),
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  0,
  1,
  2,
  29,
  3,
  4,
  5,
  6,
  7,
  31,
  30,
  32,
  33,
  51,
  34,
  35,
  38,
  36,
  52,
  39,
  40,
  8,
  9,
  53,
  54,
  55,
  41,
  37,
  42,
  50,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  43,
  20,
  44,
  45,
  21,
  46,
  47,
  48,
  49,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::control::lonpid::FilterConf)},
  { 7, 68, sizeof(::control::lonpid::LonBasedPidControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::lonpid::_FilterConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::lonpid::_LonBasedPidControllerConf_default_instance_),
};

const char descriptor_table_protodef_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0control_base/lon_based_pid_controller_"
  "conf.proto\022\016control.lonpid\032\037control_base"
  "/leadlag_conf.proto\032\033control_base/pid_co"
  "nf.proto\032&control_base/gain_scheduler_co"
  "nf.proto\"!\n\nFilterConf\022\023\n\013cutoff_freq\030\001 "
  "\001(\005\"\234\023\n\031LonBasedPidControllerConf\022\n\n\002ts\030"
  "\001 \001(\001\022\034\n\024brake_minimum_action\030\002 \001(\001\022\037\n\027t"
  "hrottle_minimum_action\030\003 \001(\001\022$\n\034speed_co"
  "ntroller_input_limit\030\004 \001(\001\022\033\n\023station_er"
  "ror_limit\030\005 \001(\001\022\026\n\016preview_window\030\006 \001(\001\022"
  "\037\n\027standstill_acceleration\030\007 \001(\001\022*\n\020stat"
  "ion_pid_conf\030\010 \001(\0132\020.control.PidConf\022,\n\022"
  "low_speed_pid_conf\030\t \001(\0132\020.control.PidCo"
  "nf\022-\n\023high_speed_pid_conf\030\n \001(\0132\020.contro"
  "l.PidConf\022\024\n\014switch_speed\030\013 \001(\001\0222\n\030rever"
  "se_station_pid_conf\030\014 \001(\0132\020.control.PidC"
  "onf\0220\n\026reverse_speed_pid_conf\030\r \001(\0132\020.co"
  "ntrol.PidConf\022;\n\027pitch_angle_filter_conf"
  "\030\016 \001(\0132\032.control.lonpid.FilterConf\022:\n\034re"
  "verse_station_leadlag_conf\030\017 \001(\0132\024.contr"
  "ol.LeadlagConf\0228\n\032reverse_speed_leadlag_"
  "conf\030\020 \001(\0132\024.control.LeadlagConf\0222\n#enab"
  "le_reverse_leadlag_compensation\030\022 \001(\010:\005f"
  "alse\022\036\n\023switch_speed_window\030\023 \001(\001:\0010\022+\n\034"
  "enable_speed_station_preview\030\024 \001(\010:\005fals"
  "e\022\"\n\023enable_slope_offset\030\025 \001(\010:\005false\022)\n"
  "\034max_path_remain_when_stopped\030\026 \001(\001:\0030.3"
  "\022,\n\035use_acceleration_lookup_limit\030\027 \001(\010:"
  "\005false\022*\n\033use_preview_reference_check\030\030 "
  "\001(\010:\005false\022\035\n\022steer_cmd_interval\030\031 \001(\001:\001"
  "0\022!\n\022use_steering_check\030\032 \001(\010:\005false\022 \n\024"
  "pedestrian_stop_time\030\033 \001(\001:\00210\022)\n\036stands"
  "till_narmal_acceleration\030\034 \001(\001:\0010\022\036\n\023ful"
  "l_stop_long_time\030\035 \001(\001:\0010\022.\n\024pit_station"
  "_pid_conf\030\036 \001(\0132\020.control.PidConf\022,\n\022pit"
  "_speed_pid_conf\030\037 \001(\0132\020.control.PidConf\022"
  "!\n\025pit_replan_check_time\030  \001(\001:\00214\022!\n\026pi"
  "t_replan_check_count\030! \001(\005:\0013\022\033\n\020epb_cha"
  "nge_count\030\" \001(\005:\0012\022\036\n\026stop_gain_accelera"
  "tion\030# \001(\001\022\036\n\017use_vehicle_epb\030$ \001(\010:\005fal"
  "se\022\"\n\032full_stop_path_remain_gain\030% \001(\001\022*"
  "\n\037use_opposite_slope_compensation\030& \001(\005:"
  "\0011\022<\n\034station_error_gain_scheduler\030\' \001(\013"
  "2\026.control.GainScheduler\022A\n!speed_error_"
  "accel_pgain_scheduler\030( \001(\0132\026.control.Ga"
  "inScheduler\022A\n!speed_error_accel_igain_s"
  "cheduler\030) \001(\0132\026.control.GainScheduler\022A"
  "\n!speed_error_accel_dgain_scheduler\030* \001("
  "\0132\026.control.GainScheduler\022A\n!speed_error"
  "_small_pgain_scheduler\030+ \001(\0132\026.control.G"
  "ainScheduler\022A\n!speed_error_small_igain_"
  "scheduler\030, \001(\0132\026.control.GainScheduler\022"
  "A\n!speed_error_small_dgain_scheduler\030- \001"
  "(\0132\026.control.GainScheduler\022A\n!speed_erro"
  "r_decel_pgain_scheduler\030. \001(\0132\026.control."
  "GainScheduler\022A\n!speed_error_decel_igain"
  "_scheduler\030/ \001(\0132\026.control.GainScheduler"
  "\022A\n!speed_error_decel_dgain_scheduler\0300 "
  "\001(\0132\026.control.GainScheduler\022\030\n\020speed_err"
  "or_gate\0301 \001(\001\022(\n\016speed_pid_conf\0302 \001(\0132\020."
  "control.PidConf\022\"\n\032acceleration_jerk_lim"
  "it_up\0303 \001(\001\022#\n\033acceleration_jerk_limit_l"
  "ow\0304 \001(\001\022H\n(slope_offset_compensation_ga"
  "in_scheduler\0305 \001(\0132\026.control.GainSchedul"
  "er\022\027\n\017brake_cmd_slope\0306 \001(\001\022\026\n\016brake_cmd"
  "_bias\0307 \001(\001\022\032\n\022throttle_cmd_slope\0308 \001(\001\022"
  "\031\n\021throttle_cmd_bias\0309 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_deps[3] = {
  &::descriptor_table_control_5fbase_2fgain_5fscheduler_5fconf_2eproto,
  &::descriptor_table_control_5fbase_2fleadlag_5fconf_2eproto,
  &::descriptor_table_control_5fbase_2fpid_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_sccs[2] = {
  &scc_info_FilterConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.base,
  &scc_info_LonBasedPidControllerConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto = {
  false, false, descriptor_table_protodef_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto, "control_base/lon_based_pid_controller_conf.proto", 2666,
  &descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_once, descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_sccs, descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto, 2, file_level_enum_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto, file_level_service_descriptors_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto)), true);
namespace control {
namespace lonpid {

// ===================================================================

void FilterConf::InitAsDefaultInstance() {
}
class FilterConf::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterConf>()._has_bits_);
  static void set_has_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FilterConf::FilterConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.lonpid.FilterConf)
}
FilterConf::FilterConf(const FilterConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cutoff_freq_ = from.cutoff_freq_;
  // @@protoc_insertion_point(copy_constructor:control.lonpid.FilterConf)
}

void FilterConf::SharedCtor() {
  cutoff_freq_ = 0;
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:control.lonpid.FilterConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilterConf::ArenaDtor(void* object) {
  FilterConf* _this = reinterpret_cast< FilterConf* >(object);
  (void)_this;
}
void FilterConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterConf& FilterConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.lonpid.FilterConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cutoff_freq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cutoff_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cutoff_freq(&has_bits);
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.lonpid.FilterConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cutoff_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.lonpid.FilterConf)
  return target;
}

size_t FilterConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.lonpid.FilterConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 cutoff_freq = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cutoff_freq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.lonpid.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.lonpid.FilterConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.lonpid.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.lonpid.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cutoff_freq()) {
    _internal_set_cutoff_freq(from._internal_cutoff_freq());
  }
}

void FilterConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.lonpid.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.lonpid.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {
  return true;
}

void FilterConf::InternalSwap(FilterConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cutoff_freq_, other->cutoff_freq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LonBasedPidControllerConf::InitAsDefaultInstance() {
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->station_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->low_speed_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->high_speed_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->reverse_station_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->reverse_speed_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->pitch_angle_filter_conf_ = const_cast< ::control::lonpid::FilterConf*>(
      ::control::lonpid::FilterConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->reverse_station_leadlag_conf_ = const_cast< ::control::LeadlagConf*>(
      ::control::LeadlagConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->reverse_speed_leadlag_conf_ = const_cast< ::control::LeadlagConf*>(
      ::control::LeadlagConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->pit_station_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->pit_speed_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->station_error_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_accel_pgain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_accel_igain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_accel_dgain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_small_pgain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_small_igain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_small_dgain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_decel_pgain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_decel_igain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_error_decel_dgain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->speed_pid_conf_ = const_cast< ::control::PidConf*>(
      ::control::PidConf::internal_default_instance());
  ::control::lonpid::_LonBasedPidControllerConf_default_instance_._instance.get_mutable()->slope_offset_compensation_gain_scheduler_ = const_cast< ::control::GainScheduler*>(
      ::control::GainScheduler::internal_default_instance());
}
class LonBasedPidControllerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<LonBasedPidControllerConf>()._has_bits_);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_brake_minimum_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_throttle_minimum_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_speed_controller_input_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_station_error_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_preview_window(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_standstill_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::control::PidConf& station_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_station_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::PidConf& low_speed_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_low_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::PidConf& high_speed_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_high_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_switch_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::control::PidConf& reverse_station_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_reverse_station_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::control::PidConf& reverse_speed_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_reverse_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::lonpid::FilterConf& pitch_angle_filter_conf(const LonBasedPidControllerConf* msg);
  static void set_has_pitch_angle_filter_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::LeadlagConf& reverse_station_leadlag_conf(const LonBasedPidControllerConf* msg);
  static void set_has_reverse_station_leadlag_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::control::LeadlagConf& reverse_speed_leadlag_conf(const LonBasedPidControllerConf* msg);
  static void set_has_reverse_speed_leadlag_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enable_reverse_leadlag_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_switch_speed_window(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_enable_speed_station_preview(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_enable_slope_offset(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_max_path_remain_when_stopped(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_use_acceleration_lookup_limit(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_use_preview_reference_check(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_steer_cmd_interval(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_use_steering_check(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_pedestrian_stop_time(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_standstill_narmal_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_full_stop_long_time(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::control::PidConf& pit_station_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_pit_station_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::control::PidConf& pit_speed_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_pit_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pit_replan_check_time(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_pit_replan_check_count(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_epb_change_count(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_stop_gain_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_use_vehicle_epb(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_full_stop_path_remain_gain(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_use_opposite_slope_compensation(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::control::GainScheduler& station_error_gain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_station_error_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::control::GainScheduler& speed_error_accel_pgain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_accel_pgain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::control::GainScheduler& speed_error_accel_igain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_accel_igain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::control::GainScheduler& speed_error_accel_dgain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_accel_dgain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::control::GainScheduler& speed_error_small_pgain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_small_pgain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::control::GainScheduler& speed_error_small_igain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_small_igain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::control::GainScheduler& speed_error_small_dgain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_small_dgain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::control::GainScheduler& speed_error_decel_pgain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_decel_pgain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::control::GainScheduler& speed_error_decel_igain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_decel_igain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::control::GainScheduler& speed_error_decel_dgain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_speed_error_decel_dgain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_speed_error_gate(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::control::PidConf& speed_pid_conf(const LonBasedPidControllerConf* msg);
  static void set_has_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_acceleration_jerk_limit_up(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_acceleration_jerk_limit_low(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::control::GainScheduler& slope_offset_compensation_gain_scheduler(const LonBasedPidControllerConf* msg);
  static void set_has_slope_offset_compensation_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_brake_cmd_slope(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_brake_cmd_bias(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_throttle_cmd_slope(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_throttle_cmd_bias(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
};

const ::control::PidConf&
LonBasedPidControllerConf::_Internal::station_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->station_pid_conf_;
}
const ::control::PidConf&
LonBasedPidControllerConf::_Internal::low_speed_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->low_speed_pid_conf_;
}
const ::control::PidConf&
LonBasedPidControllerConf::_Internal::high_speed_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->high_speed_pid_conf_;
}
const ::control::PidConf&
LonBasedPidControllerConf::_Internal::reverse_station_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->reverse_station_pid_conf_;
}
const ::control::PidConf&
LonBasedPidControllerConf::_Internal::reverse_speed_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->reverse_speed_pid_conf_;
}
const ::control::lonpid::FilterConf&
LonBasedPidControllerConf::_Internal::pitch_angle_filter_conf(const LonBasedPidControllerConf* msg) {
  return *msg->pitch_angle_filter_conf_;
}
const ::control::LeadlagConf&
LonBasedPidControllerConf::_Internal::reverse_station_leadlag_conf(const LonBasedPidControllerConf* msg) {
  return *msg->reverse_station_leadlag_conf_;
}
const ::control::LeadlagConf&
LonBasedPidControllerConf::_Internal::reverse_speed_leadlag_conf(const LonBasedPidControllerConf* msg) {
  return *msg->reverse_speed_leadlag_conf_;
}
const ::control::PidConf&
LonBasedPidControllerConf::_Internal::pit_station_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->pit_station_pid_conf_;
}
const ::control::PidConf&
LonBasedPidControllerConf::_Internal::pit_speed_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->pit_speed_pid_conf_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::station_error_gain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->station_error_gain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_accel_pgain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_accel_pgain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_accel_igain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_accel_igain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_accel_dgain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_accel_dgain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_small_pgain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_small_pgain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_small_igain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_small_igain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_small_dgain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_small_dgain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_decel_pgain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_decel_pgain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_decel_igain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_decel_igain_scheduler_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::speed_error_decel_dgain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->speed_error_decel_dgain_scheduler_;
}
const ::control::PidConf&
LonBasedPidControllerConf::_Internal::speed_pid_conf(const LonBasedPidControllerConf* msg) {
  return *msg->speed_pid_conf_;
}
const ::control::GainScheduler&
LonBasedPidControllerConf::_Internal::slope_offset_compensation_gain_scheduler(const LonBasedPidControllerConf* msg) {
  return *msg->slope_offset_compensation_gain_scheduler_;
}
void LonBasedPidControllerConf::clear_station_pid_conf() {
  if (station_pid_conf_ != nullptr) station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LonBasedPidControllerConf::clear_low_speed_pid_conf() {
  if (low_speed_pid_conf_ != nullptr) low_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LonBasedPidControllerConf::clear_high_speed_pid_conf() {
  if (high_speed_pid_conf_ != nullptr) high_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LonBasedPidControllerConf::clear_reverse_station_pid_conf() {
  if (reverse_station_pid_conf_ != nullptr) reverse_station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LonBasedPidControllerConf::clear_reverse_speed_pid_conf() {
  if (reverse_speed_pid_conf_ != nullptr) reverse_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LonBasedPidControllerConf::clear_reverse_station_leadlag_conf() {
  if (reverse_station_leadlag_conf_ != nullptr) reverse_station_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void LonBasedPidControllerConf::clear_reverse_speed_leadlag_conf() {
  if (reverse_speed_leadlag_conf_ != nullptr) reverse_speed_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void LonBasedPidControllerConf::clear_pit_station_pid_conf() {
  if (pit_station_pid_conf_ != nullptr) pit_station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void LonBasedPidControllerConf::clear_pit_speed_pid_conf() {
  if (pit_speed_pid_conf_ != nullptr) pit_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void LonBasedPidControllerConf::clear_station_error_gain_scheduler() {
  if (station_error_gain_scheduler_ != nullptr) station_error_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void LonBasedPidControllerConf::clear_speed_error_accel_pgain_scheduler() {
  if (speed_error_accel_pgain_scheduler_ != nullptr) speed_error_accel_pgain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void LonBasedPidControllerConf::clear_speed_error_accel_igain_scheduler() {
  if (speed_error_accel_igain_scheduler_ != nullptr) speed_error_accel_igain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void LonBasedPidControllerConf::clear_speed_error_accel_dgain_scheduler() {
  if (speed_error_accel_dgain_scheduler_ != nullptr) speed_error_accel_dgain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void LonBasedPidControllerConf::clear_speed_error_small_pgain_scheduler() {
  if (speed_error_small_pgain_scheduler_ != nullptr) speed_error_small_pgain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void LonBasedPidControllerConf::clear_speed_error_small_igain_scheduler() {
  if (speed_error_small_igain_scheduler_ != nullptr) speed_error_small_igain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void LonBasedPidControllerConf::clear_speed_error_small_dgain_scheduler() {
  if (speed_error_small_dgain_scheduler_ != nullptr) speed_error_small_dgain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void LonBasedPidControllerConf::clear_speed_error_decel_pgain_scheduler() {
  if (speed_error_decel_pgain_scheduler_ != nullptr) speed_error_decel_pgain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void LonBasedPidControllerConf::clear_speed_error_decel_igain_scheduler() {
  if (speed_error_decel_igain_scheduler_ != nullptr) speed_error_decel_igain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void LonBasedPidControllerConf::clear_speed_error_decel_dgain_scheduler() {
  if (speed_error_decel_dgain_scheduler_ != nullptr) speed_error_decel_dgain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void LonBasedPidControllerConf::clear_speed_pid_conf() {
  if (speed_pid_conf_ != nullptr) speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void LonBasedPidControllerConf::clear_slope_offset_compensation_gain_scheduler() {
  if (slope_offset_compensation_gain_scheduler_ != nullptr) slope_offset_compensation_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
LonBasedPidControllerConf::LonBasedPidControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.lonpid.LonBasedPidControllerConf)
}
LonBasedPidControllerConf::LonBasedPidControllerConf(const LonBasedPidControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_station_pid_conf()) {
    station_pid_conf_ = new ::control::PidConf(*from.station_pid_conf_);
  } else {
    station_pid_conf_ = nullptr;
  }
  if (from._internal_has_low_speed_pid_conf()) {
    low_speed_pid_conf_ = new ::control::PidConf(*from.low_speed_pid_conf_);
  } else {
    low_speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_high_speed_pid_conf()) {
    high_speed_pid_conf_ = new ::control::PidConf(*from.high_speed_pid_conf_);
  } else {
    high_speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_reverse_station_pid_conf()) {
    reverse_station_pid_conf_ = new ::control::PidConf(*from.reverse_station_pid_conf_);
  } else {
    reverse_station_pid_conf_ = nullptr;
  }
  if (from._internal_has_reverse_speed_pid_conf()) {
    reverse_speed_pid_conf_ = new ::control::PidConf(*from.reverse_speed_pid_conf_);
  } else {
    reverse_speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_pitch_angle_filter_conf()) {
    pitch_angle_filter_conf_ = new ::control::lonpid::FilterConf(*from.pitch_angle_filter_conf_);
  } else {
    pitch_angle_filter_conf_ = nullptr;
  }
  if (from._internal_has_reverse_station_leadlag_conf()) {
    reverse_station_leadlag_conf_ = new ::control::LeadlagConf(*from.reverse_station_leadlag_conf_);
  } else {
    reverse_station_leadlag_conf_ = nullptr;
  }
  if (from._internal_has_reverse_speed_leadlag_conf()) {
    reverse_speed_leadlag_conf_ = new ::control::LeadlagConf(*from.reverse_speed_leadlag_conf_);
  } else {
    reverse_speed_leadlag_conf_ = nullptr;
  }
  if (from._internal_has_pit_station_pid_conf()) {
    pit_station_pid_conf_ = new ::control::PidConf(*from.pit_station_pid_conf_);
  } else {
    pit_station_pid_conf_ = nullptr;
  }
  if (from._internal_has_pit_speed_pid_conf()) {
    pit_speed_pid_conf_ = new ::control::PidConf(*from.pit_speed_pid_conf_);
  } else {
    pit_speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_station_error_gain_scheduler()) {
    station_error_gain_scheduler_ = new ::control::GainScheduler(*from.station_error_gain_scheduler_);
  } else {
    station_error_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_accel_pgain_scheduler()) {
    speed_error_accel_pgain_scheduler_ = new ::control::GainScheduler(*from.speed_error_accel_pgain_scheduler_);
  } else {
    speed_error_accel_pgain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_accel_igain_scheduler()) {
    speed_error_accel_igain_scheduler_ = new ::control::GainScheduler(*from.speed_error_accel_igain_scheduler_);
  } else {
    speed_error_accel_igain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_accel_dgain_scheduler()) {
    speed_error_accel_dgain_scheduler_ = new ::control::GainScheduler(*from.speed_error_accel_dgain_scheduler_);
  } else {
    speed_error_accel_dgain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_small_pgain_scheduler()) {
    speed_error_small_pgain_scheduler_ = new ::control::GainScheduler(*from.speed_error_small_pgain_scheduler_);
  } else {
    speed_error_small_pgain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_small_igain_scheduler()) {
    speed_error_small_igain_scheduler_ = new ::control::GainScheduler(*from.speed_error_small_igain_scheduler_);
  } else {
    speed_error_small_igain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_small_dgain_scheduler()) {
    speed_error_small_dgain_scheduler_ = new ::control::GainScheduler(*from.speed_error_small_dgain_scheduler_);
  } else {
    speed_error_small_dgain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_decel_pgain_scheduler()) {
    speed_error_decel_pgain_scheduler_ = new ::control::GainScheduler(*from.speed_error_decel_pgain_scheduler_);
  } else {
    speed_error_decel_pgain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_decel_igain_scheduler()) {
    speed_error_decel_igain_scheduler_ = new ::control::GainScheduler(*from.speed_error_decel_igain_scheduler_);
  } else {
    speed_error_decel_igain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_error_decel_dgain_scheduler()) {
    speed_error_decel_dgain_scheduler_ = new ::control::GainScheduler(*from.speed_error_decel_dgain_scheduler_);
  } else {
    speed_error_decel_dgain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_pid_conf()) {
    speed_pid_conf_ = new ::control::PidConf(*from.speed_pid_conf_);
  } else {
    speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_slope_offset_compensation_gain_scheduler()) {
    slope_offset_compensation_gain_scheduler_ = new ::control::GainScheduler(*from.slope_offset_compensation_gain_scheduler_);
  } else {
    slope_offset_compensation_gain_scheduler_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&epb_change_count_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(epb_change_count_));
  // @@protoc_insertion_point(copy_constructor:control.lonpid.LonBasedPidControllerConf)
}

void LonBasedPidControllerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LonBasedPidControllerConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.base);
  ::memset(&station_pid_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throttle_cmd_bias_) -
      reinterpret_cast<char*>(&station_pid_conf_)) + sizeof(throttle_cmd_bias_));
  use_opposite_slope_compensation_ = 1;
  max_path_remain_when_stopped_ = 0.3;
  pedestrian_stop_time_ = 10;
  pit_replan_check_time_ = 14;
  pit_replan_check_count_ = 3;
  epb_change_count_ = 2;
}

LonBasedPidControllerConf::~LonBasedPidControllerConf() {
  // @@protoc_insertion_point(destructor:control.lonpid.LonBasedPidControllerConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LonBasedPidControllerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete station_pid_conf_;
  if (this != internal_default_instance()) delete low_speed_pid_conf_;
  if (this != internal_default_instance()) delete high_speed_pid_conf_;
  if (this != internal_default_instance()) delete reverse_station_pid_conf_;
  if (this != internal_default_instance()) delete reverse_speed_pid_conf_;
  if (this != internal_default_instance()) delete pitch_angle_filter_conf_;
  if (this != internal_default_instance()) delete reverse_station_leadlag_conf_;
  if (this != internal_default_instance()) delete reverse_speed_leadlag_conf_;
  if (this != internal_default_instance()) delete pit_station_pid_conf_;
  if (this != internal_default_instance()) delete pit_speed_pid_conf_;
  if (this != internal_default_instance()) delete station_error_gain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_accel_pgain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_accel_igain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_accel_dgain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_small_pgain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_small_igain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_small_dgain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_decel_pgain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_decel_igain_scheduler_;
  if (this != internal_default_instance()) delete speed_error_decel_dgain_scheduler_;
  if (this != internal_default_instance()) delete speed_pid_conf_;
  if (this != internal_default_instance()) delete slope_offset_compensation_gain_scheduler_;
}

void LonBasedPidControllerConf::ArenaDtor(void* object) {
  LonBasedPidControllerConf* _this = reinterpret_cast< LonBasedPidControllerConf* >(object);
  (void)_this;
}
void LonBasedPidControllerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LonBasedPidControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LonBasedPidControllerConf& LonBasedPidControllerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LonBasedPidControllerConf_control_5fbase_2flon_5fbased_5fpid_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LonBasedPidControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:control.lonpid.LonBasedPidControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_pid_conf_ != nullptr);
      station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(low_speed_pid_conf_ != nullptr);
      low_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(high_speed_pid_conf_ != nullptr);
      high_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reverse_station_pid_conf_ != nullptr);
      reverse_station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reverse_speed_pid_conf_ != nullptr);
      reverse_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pitch_angle_filter_conf_ != nullptr);
      pitch_angle_filter_conf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(reverse_station_leadlag_conf_ != nullptr);
      reverse_station_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(reverse_speed_leadlag_conf_ != nullptr);
      reverse_speed_leadlag_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(pit_station_pid_conf_ != nullptr);
      pit_station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(pit_speed_pid_conf_ != nullptr);
      pit_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(station_error_gain_scheduler_ != nullptr);
      station_error_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(speed_error_accel_pgain_scheduler_ != nullptr);
      speed_error_accel_pgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(speed_error_accel_igain_scheduler_ != nullptr);
      speed_error_accel_igain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(speed_error_accel_dgain_scheduler_ != nullptr);
      speed_error_accel_dgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(speed_error_small_pgain_scheduler_ != nullptr);
      speed_error_small_pgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(speed_error_small_igain_scheduler_ != nullptr);
      speed_error_small_igain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(speed_error_small_dgain_scheduler_ != nullptr);
      speed_error_small_dgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(speed_error_decel_pgain_scheduler_ != nullptr);
      speed_error_decel_pgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(speed_error_decel_igain_scheduler_ != nullptr);
      speed_error_decel_igain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(speed_error_decel_dgain_scheduler_ != nullptr);
      speed_error_decel_dgain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(speed_pid_conf_ != nullptr);
      speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(slope_offset_compensation_gain_scheduler_ != nullptr);
      slope_offset_compensation_gain_scheduler_->Clear();
    }
  }
  if (cached_has_bits & 0x00c00000u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_minimum_action_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(brake_minimum_action_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&throttle_minimum_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_) -
        reinterpret_cast<char*>(&throttle_minimum_action_)) + sizeof(enable_reverse_leadlag_compensation_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&enable_speed_station_preview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&standstill_narmal_acceleration_) -
        reinterpret_cast<char*>(&enable_speed_station_preview_)) + sizeof(standstill_narmal_acceleration_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&full_stop_long_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_cmd_bias_) -
        reinterpret_cast<char*>(&full_stop_long_time_)) + sizeof(brake_cmd_bias_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&throttle_cmd_slope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttle_cmd_bias_) -
        reinterpret_cast<char*>(&throttle_cmd_slope_)) + sizeof(throttle_cmd_bias_));
    use_opposite_slope_compensation_ = 1;
    max_path_remain_when_stopped_ = 0.3;
    pedestrian_stop_time_ = 10;
    pit_replan_check_time_ = 14;
    pit_replan_check_count_ = 3;
    epb_change_count_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LonBasedPidControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ts(&_has_bits_);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_minimum_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_brake_minimum_action(&_has_bits_);
          brake_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_minimum_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_throttle_minimum_action(&_has_bits_);
          throttle_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_controller_input_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_speed_controller_input_limit(&_has_bits_);
          speed_controller_input_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_station_error_limit(&_has_bits_);
          station_error_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_window = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_preview_window(&_has_bits_);
          preview_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double standstill_acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_standstill_acceleration(&_has_bits_);
          standstill_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf station_pid_conf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_station_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf low_speed_pid_conf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf high_speed_pid_conf = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double switch_speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_switch_speed(&_has_bits_);
          switch_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf reverse_station_pid_conf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_station_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf reverse_speed_pid_conf = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_pitch_angle_filter_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_station_leadlag_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_speed_leadlag_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_enable_reverse_leadlag_compensation(&_has_bits_);
          enable_reverse_leadlag_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double switch_speed_window = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_switch_speed_window(&_has_bits_);
          switch_speed_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_speed_station_preview = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_enable_speed_station_preview(&_has_bits_);
          enable_speed_station_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_slope_offset = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_enable_slope_offset(&_has_bits_);
          enable_slope_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_path_remain_when_stopped = 22 [default = 0.3];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_max_path_remain_when_stopped(&_has_bits_);
          max_path_remain_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_acceleration_lookup_limit = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_use_acceleration_lookup_limit(&_has_bits_);
          use_acceleration_lookup_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_preview_reference_check = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_use_preview_reference_check(&_has_bits_);
          use_preview_reference_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double steer_cmd_interval = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_steer_cmd_interval(&_has_bits_);
          steer_cmd_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_steering_check = 26 [default = false];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_use_steering_check(&_has_bits_);
          use_steering_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double pedestrian_stop_time = 27 [default = 10];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_pedestrian_stop_time(&_has_bits_);
          pedestrian_stop_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double standstill_narmal_acceleration = 28 [default = 0];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_standstill_narmal_acceleration(&_has_bits_);
          standstill_narmal_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double full_stop_long_time = 29 [default = 0];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_full_stop_long_time(&_has_bits_);
          full_stop_long_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf pit_station_pid_conf = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_pit_station_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf pit_speed_pid_conf = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_pit_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double pit_replan_check_time = 32 [default = 14];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_pit_replan_check_time(&_has_bits_);
          pit_replan_check_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 pit_replan_check_count = 33 [default = 3];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pit_replan_check_count(&_has_bits_);
          pit_replan_check_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 epb_change_count = 34 [default = 2];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_epb_change_count(&_has_bits_);
          epb_change_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double stop_gain_acceleration = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_stop_gain_acceleration(&_has_bits_);
          stop_gain_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_vehicle_epb = 36 [default = false];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_vehicle_epb(&_has_bits_);
          use_vehicle_epb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double full_stop_path_remain_gain = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_full_stop_path_remain_gain(&_has_bits_);
          full_stop_path_remain_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 use_opposite_slope_compensation = 38 [default = 1];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_opposite_slope_compensation(&_has_bits_);
          use_opposite_slope_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler station_error_gain_scheduler = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_station_error_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_accel_pgain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_accel_igain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_accel_dgain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_small_pgain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_small_igain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_small_dgain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_decel_pgain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_decel_igain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_error_decel_dgain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_error_gate = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_speed_error_gate(&_has_bits_);
          speed_error_gate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.PidConf speed_pid_conf = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_jerk_limit_up = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_acceleration_jerk_limit_up(&_has_bits_);
          acceleration_jerk_limit_up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_jerk_limit_low = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_acceleration_jerk_limit_low(&_has_bits_);
          acceleration_jerk_limit_low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_slope_offset_compensation_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double brake_cmd_slope = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_brake_cmd_slope(&_has_bits_);
          brake_cmd_slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_cmd_bias = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_brake_cmd_bias(&_has_bits_);
          brake_cmd_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_cmd_slope = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_throttle_cmd_slope(&_has_bits_);
          throttle_cmd_slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_cmd_bias = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_throttle_cmd_bias(&_has_bits_);
          throttle_cmd_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LonBasedPidControllerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.lonpid.LonBasedPidControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ts(), target);
  }

  // optional double brake_minimum_action = 2;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_brake_minimum_action(), target);
  }

  // optional double throttle_minimum_action = 3;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_throttle_minimum_action(), target);
  }

  // optional double speed_controller_input_limit = 4;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed_controller_input_limit(), target);
  }

  // optional double station_error_limit = 5;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_station_error_limit(), target);
  }

  // optional double preview_window = 6;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_preview_window(), target);
  }

  // optional double standstill_acceleration = 7;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_standstill_acceleration(), target);
  }

  // optional .control.PidConf station_pid_conf = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::station_pid_conf(this), target, stream);
  }

  // optional .control.PidConf low_speed_pid_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::low_speed_pid_conf(this), target, stream);
  }

  // optional .control.PidConf high_speed_pid_conf = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::high_speed_pid_conf(this), target, stream);
  }

  // optional double switch_speed = 11;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_switch_speed(), target);
  }

  // optional .control.PidConf reverse_station_pid_conf = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::reverse_station_pid_conf(this), target, stream);
  }

  // optional .control.PidConf reverse_speed_pid_conf = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::reverse_speed_pid_conf(this), target, stream);
  }

  // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::pitch_angle_filter_conf(this), target, stream);
  }

  // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::reverse_station_leadlag_conf(this), target, stream);
  }

  // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::reverse_speed_leadlag_conf(this), target, stream);
  }

  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  // optional double switch_speed_window = 19 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_switch_speed_window(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool enable_speed_station_preview = 20 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_enable_speed_station_preview(), target);
  }

  // optional bool enable_slope_offset = 21 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_enable_slope_offset(), target);
  }

  // optional double max_path_remain_when_stopped = 22 [default = 0.3];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_max_path_remain_when_stopped(), target);
  }

  // optional bool use_acceleration_lookup_limit = 23 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_use_acceleration_lookup_limit(), target);
  }

  // optional bool use_preview_reference_check = 24 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_use_preview_reference_check(), target);
  }

  // optional double steer_cmd_interval = 25 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_steer_cmd_interval(), target);
  }

  // optional bool use_steering_check = 26 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_use_steering_check(), target);
  }

  // optional double pedestrian_stop_time = 27 [default = 10];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_pedestrian_stop_time(), target);
  }

  // optional double standstill_narmal_acceleration = 28 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_standstill_narmal_acceleration(), target);
  }

  // optional double full_stop_long_time = 29 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_full_stop_long_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.PidConf pit_station_pid_conf = 30;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::pit_station_pid_conf(this), target, stream);
  }

  // optional .control.PidConf pit_speed_pid_conf = 31;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::pit_speed_pid_conf(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double pit_replan_check_time = 32 [default = 14];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_pit_replan_check_time(), target);
  }

  // optional int32 pit_replan_check_count = 33 [default = 3];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_pit_replan_check_count(), target);
  }

  // optional int32 epb_change_count = 34 [default = 2];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_epb_change_count(), target);
  }

  // optional double stop_gain_acceleration = 35;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_stop_gain_acceleration(), target);
  }

  // optional bool use_vehicle_epb = 36 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_use_vehicle_epb(), target);
  }

  // optional double full_stop_path_remain_gain = 37;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_full_stop_path_remain_gain(), target);
  }

  // optional int32 use_opposite_slope_compensation = 38 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_use_opposite_slope_compensation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.GainScheduler station_error_gain_scheduler = 39;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::station_error_gain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::speed_error_accel_pgain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::speed_error_accel_igain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::speed_error_accel_dgain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::speed_error_small_pgain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::speed_error_small_igain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::speed_error_small_dgain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::speed_error_decel_pgain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::speed_error_decel_igain_scheduler(this), target, stream);
  }

  // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::speed_error_decel_dgain_scheduler(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double speed_error_gate = 49;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_speed_error_gate(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.PidConf speed_pid_conf = 50;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::speed_pid_conf(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double acceleration_jerk_limit_up = 51;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_acceleration_jerk_limit_up(), target);
  }

  // optional double acceleration_jerk_limit_low = 52;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(52, this->_internal_acceleration_jerk_limit_low(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::slope_offset_compensation_gain_scheduler(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double brake_cmd_slope = 54;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(54, this->_internal_brake_cmd_slope(), target);
  }

  // optional double brake_cmd_bias = 55;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(55, this->_internal_brake_cmd_bias(), target);
  }

  // optional double throttle_cmd_slope = 56;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(56, this->_internal_throttle_cmd_slope(), target);
  }

  // optional double throttle_cmd_bias = 57;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(57, this->_internal_throttle_cmd_bias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.lonpid.LonBasedPidControllerConf)
  return target;
}

size_t LonBasedPidControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.lonpid.LonBasedPidControllerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.PidConf station_pid_conf = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *station_pid_conf_);
    }

    // optional .control.PidConf low_speed_pid_conf = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_speed_pid_conf_);
    }

    // optional .control.PidConf high_speed_pid_conf = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *high_speed_pid_conf_);
    }

    // optional .control.PidConf reverse_station_pid_conf = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_station_pid_conf_);
    }

    // optional .control.PidConf reverse_speed_pid_conf = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_speed_pid_conf_);
    }

    // optional .control.lonpid.FilterConf pitch_angle_filter_conf = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pitch_angle_filter_conf_);
    }

    // optional .control.LeadlagConf reverse_station_leadlag_conf = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_station_leadlag_conf_);
    }

    // optional .control.LeadlagConf reverse_speed_leadlag_conf = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_speed_leadlag_conf_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.PidConf pit_station_pid_conf = 30;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pit_station_pid_conf_);
    }

    // optional .control.PidConf pit_speed_pid_conf = 31;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pit_speed_pid_conf_);
    }

    // optional .control.GainScheduler station_error_gain_scheduler = 39;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *station_error_gain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_accel_pgain_scheduler = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_accel_pgain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_accel_igain_scheduler = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_accel_igain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_accel_dgain_scheduler = 42;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_accel_dgain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_small_pgain_scheduler = 43;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_small_pgain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_small_igain_scheduler = 44;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_small_igain_scheduler_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .control.GainScheduler speed_error_small_dgain_scheduler = 45;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_small_dgain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_decel_pgain_scheduler = 46;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_decel_pgain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_decel_igain_scheduler = 47;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_decel_igain_scheduler_);
    }

    // optional .control.GainScheduler speed_error_decel_dgain_scheduler = 48;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_error_decel_dgain_scheduler_);
    }

    // optional .control.PidConf speed_pid_conf = 50;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_pid_conf_);
    }

    // optional .control.GainScheduler slope_offset_compensation_gain_scheduler = 53;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slope_offset_compensation_gain_scheduler_);
    }

    // optional double ts = 1;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional double brake_minimum_action = 2;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double throttle_minimum_action = 3;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limit = 4;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 8;
    }

    // optional double station_error_limit = 5;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 8;
    }

    // optional double preview_window = 6;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 8;
    }

    // optional double standstill_acceleration = 7;
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 8;
    }

    // optional double switch_speed = 11;
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 8;
    }

    // optional double switch_speed_window = 19 [default = 0];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_speed_station_preview = 20 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool enable_slope_offset = 21 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool use_acceleration_lookup_limit = 23 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool use_preview_reference_check = 24 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool use_steering_check = 26 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool use_vehicle_epb = 36 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional double steer_cmd_interval = 25 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double standstill_narmal_acceleration = 28 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double full_stop_long_time = 29 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double stop_gain_acceleration = 35;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double full_stop_path_remain_gain = 37;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double speed_error_gate = 49;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_jerk_limit_up = 51;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_jerk_limit_low = 52;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double brake_cmd_slope = 54;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double brake_cmd_bias = 55;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double throttle_cmd_slope = 56;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double throttle_cmd_bias = 57;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional int32 use_opposite_slope_compensation = 38 [default = 1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_use_opposite_slope_compensation());
    }

    // optional double max_path_remain_when_stopped = 22 [default = 0.3];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double pedestrian_stop_time = 27 [default = 10];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double pit_replan_check_time = 32 [default = 14];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional int32 pit_replan_check_count = 33 [default = 3];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pit_replan_check_count());
    }

    // optional int32 epb_change_count = 34 [default = 2];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_epb_change_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LonBasedPidControllerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.lonpid.LonBasedPidControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LonBasedPidControllerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LonBasedPidControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.lonpid.LonBasedPidControllerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.lonpid.LonBasedPidControllerConf)
    MergeFrom(*source);
  }
}

void LonBasedPidControllerConf::MergeFrom(const LonBasedPidControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.lonpid.LonBasedPidControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_station_pid_conf()->::control::PidConf::MergeFrom(from._internal_station_pid_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_low_speed_pid_conf()->::control::PidConf::MergeFrom(from._internal_low_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_high_speed_pid_conf()->::control::PidConf::MergeFrom(from._internal_high_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reverse_station_pid_conf()->::control::PidConf::MergeFrom(from._internal_reverse_station_pid_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reverse_speed_pid_conf()->::control::PidConf::MergeFrom(from._internal_reverse_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_pitch_angle_filter_conf()->::control::lonpid::FilterConf::MergeFrom(from._internal_pitch_angle_filter_conf());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_reverse_station_leadlag_conf()->::control::LeadlagConf::MergeFrom(from._internal_reverse_station_leadlag_conf());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_reverse_speed_leadlag_conf()->::control::LeadlagConf::MergeFrom(from._internal_reverse_speed_leadlag_conf());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_pit_station_pid_conf()->::control::PidConf::MergeFrom(from._internal_pit_station_pid_conf());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_pit_speed_pid_conf()->::control::PidConf::MergeFrom(from._internal_pit_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_station_error_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_station_error_gain_scheduler());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_speed_error_accel_pgain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_accel_pgain_scheduler());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_speed_error_accel_igain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_accel_igain_scheduler());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_speed_error_accel_dgain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_accel_dgain_scheduler());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_speed_error_small_pgain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_small_pgain_scheduler());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_speed_error_small_igain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_small_igain_scheduler());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_speed_error_small_dgain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_small_dgain_scheduler());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_speed_error_decel_pgain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_decel_pgain_scheduler());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_speed_error_decel_igain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_decel_igain_scheduler());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_speed_error_decel_dgain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_speed_error_decel_dgain_scheduler());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_speed_pid_conf()->::control::PidConf::MergeFrom(from._internal_speed_pid_conf());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_slope_offset_compensation_gain_scheduler()->::control::GainScheduler::MergeFrom(from._internal_slope_offset_compensation_gain_scheduler());
    }
    if (cached_has_bits & 0x00400000u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00800000u) {
      brake_minimum_action_ = from.brake_minimum_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      throttle_minimum_action_ = from.throttle_minimum_action_;
    }
    if (cached_has_bits & 0x02000000u) {
      speed_controller_input_limit_ = from.speed_controller_input_limit_;
    }
    if (cached_has_bits & 0x04000000u) {
      station_error_limit_ = from.station_error_limit_;
    }
    if (cached_has_bits & 0x08000000u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x10000000u) {
      standstill_acceleration_ = from.standstill_acceleration_;
    }
    if (cached_has_bits & 0x20000000u) {
      switch_speed_ = from.switch_speed_;
    }
    if (cached_has_bits & 0x40000000u) {
      switch_speed_window_ = from.switch_speed_window_;
    }
    if (cached_has_bits & 0x80000000u) {
      enable_reverse_leadlag_compensation_ = from.enable_reverse_leadlag_compensation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_speed_station_preview_ = from.enable_speed_station_preview_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_slope_offset_ = from.enable_slope_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_acceleration_lookup_limit_ = from.use_acceleration_lookup_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_preview_reference_check_ = from.use_preview_reference_check_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_steering_check_ = from.use_steering_check_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_vehicle_epb_ = from.use_vehicle_epb_;
    }
    if (cached_has_bits & 0x00000040u) {
      steer_cmd_interval_ = from.steer_cmd_interval_;
    }
    if (cached_has_bits & 0x00000080u) {
      standstill_narmal_acceleration_ = from.standstill_narmal_acceleration_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      full_stop_long_time_ = from.full_stop_long_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      stop_gain_acceleration_ = from.stop_gain_acceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      full_stop_path_remain_gain_ = from.full_stop_path_remain_gain_;
    }
    if (cached_has_bits & 0x00000800u) {
      speed_error_gate_ = from.speed_error_gate_;
    }
    if (cached_has_bits & 0x00001000u) {
      acceleration_jerk_limit_up_ = from.acceleration_jerk_limit_up_;
    }
    if (cached_has_bits & 0x00002000u) {
      acceleration_jerk_limit_low_ = from.acceleration_jerk_limit_low_;
    }
    if (cached_has_bits & 0x00004000u) {
      brake_cmd_slope_ = from.brake_cmd_slope_;
    }
    if (cached_has_bits & 0x00008000u) {
      brake_cmd_bias_ = from.brake_cmd_bias_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      throttle_cmd_slope_ = from.throttle_cmd_slope_;
    }
    if (cached_has_bits & 0x00020000u) {
      throttle_cmd_bias_ = from.throttle_cmd_bias_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_opposite_slope_compensation_ = from.use_opposite_slope_compensation_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_path_remain_when_stopped_ = from.max_path_remain_when_stopped_;
    }
    if (cached_has_bits & 0x00100000u) {
      pedestrian_stop_time_ = from.pedestrian_stop_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      pit_replan_check_time_ = from.pit_replan_check_time_;
    }
    if (cached_has_bits & 0x00400000u) {
      pit_replan_check_count_ = from.pit_replan_check_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      epb_change_count_ = from.epb_change_count_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void LonBasedPidControllerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.lonpid.LonBasedPidControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonBasedPidControllerConf::CopyFrom(const LonBasedPidControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.lonpid.LonBasedPidControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonBasedPidControllerConf::IsInitialized() const {
  return true;
}

void LonBasedPidControllerConf::InternalSwap(LonBasedPidControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, throttle_cmd_bias_)
      + sizeof(LonBasedPidControllerConf::throttle_cmd_bias_)
      - PROTOBUF_FIELD_OFFSET(LonBasedPidControllerConf, station_pid_conf_)>(
          reinterpret_cast<char*>(&station_pid_conf_),
          reinterpret_cast<char*>(&other->station_pid_conf_));
  swap(use_opposite_slope_compensation_, other->use_opposite_slope_compensation_);
  swap(max_path_remain_when_stopped_, other->max_path_remain_when_stopped_);
  swap(pedestrian_stop_time_, other->pedestrian_stop_time_);
  swap(pit_replan_check_time_, other->pit_replan_check_time_);
  swap(pit_replan_check_count_, other->pit_replan_check_count_);
  swap(epb_change_count_, other->epb_change_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LonBasedPidControllerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lonpid
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::lonpid::FilterConf* Arena::CreateMaybeMessage< ::control::lonpid::FilterConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::lonpid::FilterConf >(arena);
}
template<> PROTOBUF_NOINLINE ::control::lonpid::LonBasedPidControllerConf* Arena::CreateMaybeMessage< ::control::lonpid::LonBasedPidControllerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::lonpid::LonBasedPidControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

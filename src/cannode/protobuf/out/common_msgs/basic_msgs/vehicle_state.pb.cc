// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/vehicle_state.proto
// Protobuf C++ Version: 5.28.0-dev

#include "common_msgs/basic_msgs/vehicle_state.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace common {

inline constexpr VehicleState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pose_{nullptr},
        x_{0},
        y_{0},
        z_{0},
        timestamp_{0},
        roll_{0},
        pitch_{0},
        yaw_{0},
        heading_{0},
        kappa_{0},
        linear_velocity_{0},
        angular_velocity_{0},
        linear_acceleration_{0},
        gear_{static_cast< ::control::canbus::Chassis_GearPosition >(0)},
        driving_mode_{static_cast< ::control::canbus::Chassis_DrivingMode >(0)},
        steering_percentage_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VehicleState::VehicleState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VehicleStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleStateDefaultTypeInternal() {}
  union {
    VehicleState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace common
}  // namespace control
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.roll_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.pitch_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.yaw_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.kappa_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.linear_velocity_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.angular_velocity_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.linear_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.gear_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.driving_mode_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.pose_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleState, _impl_.steering_percentage_),
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        0,
        15,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 24, -1, sizeof(::control::common::VehicleState)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::common::_VehicleState_default_instance_._instance,
};
const char descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n*common_msgs/basic_msgs/vehicle_state.p"
    "roto\022\016control.common\032&common_msgs/chassi"
    "s_msgs/chassis.proto\032\034localization_msgs/"
    "pose.proto\"\266\003\n\014VehicleState\022\014\n\001x\030\001 \001(\001:\001"
    "0\022\014\n\001y\030\002 \001(\001:\0010\022\014\n\001z\030\003 \001(\001:\0010\022\024\n\ttimesta"
    "mp\030\004 \001(\001:\0010\022\017\n\004roll\030\005 \001(\001:\0010\022\020\n\005pitch\030\006 "
    "\001(\001:\0010\022\016\n\003yaw\030\007 \001(\001:\0010\022\022\n\007heading\030\010 \001(\001:"
    "\0010\022\020\n\005kappa\030\t \001(\001:\0010\022\032\n\017linear_velocity\030"
    "\n \001(\001:\0010\022\033\n\020angular_velocity\030\013 \001(\001:\0010\022\036\n"
    "\023linear_acceleration\030\014 \001(\001:\0010\0222\n\004gear\030\r "
    "\001(\0162$.control.canbus.Chassis.GearPositio"
    "n\0229\n\014driving_mode\030\016 \001(\0162#.control.canbus"
    ".Chassis.DrivingMode\022(\n\004pose\030\017 \001(\0132\032.con"
    "trol.localization.Pose\022\033\n\023steering_perce"
    "ntage\030\020 \001(\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto_deps[2] =
    {
        &::descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto,
        &::descriptor_table_localization_5fmsgs_2fpose_2eproto,
};
static ::absl::once_flag descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto = {
    false,
    false,
    571,
    descriptor_table_protodef_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto,
    "common_msgs/basic_msgs/vehicle_state.proto",
    &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto_once,
    descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto::offsets,
    file_level_enum_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto,
    file_level_service_descriptors_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto,
};
namespace control {
namespace common {
// ===================================================================

class VehicleState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VehicleState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VehicleState, _impl_._has_bits_);
};

void VehicleState::clear_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VehicleState::VehicleState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.VehicleState)
}
inline PROTOBUF_NDEBUG_INLINE VehicleState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::common::VehicleState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VehicleState::VehicleState(
    ::google::protobuf::Arena* arena,
    const VehicleState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VehicleState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::localization::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, x_),
           offsetof(Impl_, steering_percentage_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::steering_percentage_));

  // @@protoc_insertion_point(copy_constructor:control.common.VehicleState)
}
inline PROTOBUF_NDEBUG_INLINE VehicleState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VehicleState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, steering_percentage_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::steering_percentage_));
}
VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:control.common.VehicleState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VehicleState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pose_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    VehicleState::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &VehicleState::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<VehicleState>(),
            ::google::protobuf::Message::GetNewImpl<VehicleState>(),
            ::google::protobuf::Message::GetClearImpl<VehicleState>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<VehicleState>(),
                ::google::protobuf::Message::GetSerializeImpl<VehicleState>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(VehicleState, _impl_._cached_size_),
            false,
        },
        &VehicleState::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* VehicleState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 3, 0, 2> VehicleState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VehicleState, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VehicleState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::VehicleState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional double steering_percentage = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 15, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.steering_percentage_)}},
    // optional double x = 1 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {9, 1, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.x_)}},
    // optional double y = 2 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {17, 2, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.y_)}},
    // optional double z = 3 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {25, 3, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.z_)}},
    // optional double timestamp = 4 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {33, 4, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.timestamp_)}},
    // optional double roll = 5 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {41, 5, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.roll_)}},
    // optional double pitch = 6 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {49, 6, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.pitch_)}},
    // optional double yaw = 7 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {57, 7, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.yaw_)}},
    // optional double heading = 8 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {65, 8, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.heading_)}},
    // optional double kappa = 9 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {73, 9, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.kappa_)}},
    // optional double linear_velocity = 10 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {81, 10, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.linear_velocity_)}},
    // optional double angular_velocity = 11 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {89, 11, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.angular_velocity_)}},
    // optional double linear_acceleration = 12 [default = 0];
    {::_pbi::TcParser::FastF64S1,
     {97, 12, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.linear_acceleration_)}},
    // optional .control.canbus.Chassis.GearPosition gear = 13;
    {::_pbi::TcParser::FastEr0S1,
     {104, 13, 6, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.gear_)}},
    // optional .control.canbus.Chassis.DrivingMode driving_mode = 14;
    {::_pbi::TcParser::FastEr0S1,
     {112, 14, 4, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.driving_mode_)}},
    // optional .control.localization.Pose pose = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 0, 0, PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double x = 1 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.x_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double y = 2 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.y_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double z = 3 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.z_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double timestamp = 4 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double roll = 5 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.roll_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double pitch = 6 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.pitch_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double yaw = 7 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.yaw_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double heading = 8 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.heading_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double kappa = 9 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.kappa_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double linear_velocity = 10 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.linear_velocity_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double angular_velocity = 11 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double linear_acceleration = 12 [default = 0];
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.linear_acceleration_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.canbus.Chassis.GearPosition gear = 13;
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.gear_), _Internal::kHasBitsOffset + 13, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .control.canbus.Chassis.DrivingMode driving_mode = 14;
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.driving_mode_), _Internal::kHasBitsOffset + 14, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .control.localization.Pose pose = 15;
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double steering_percentage = 16;
    {PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.steering_percentage_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::localization::Pose>()},
    {0, 7},
    {0, 5},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.VehicleState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pose_ != nullptr);
    _impl_.pose_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.yaw_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.heading_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.steering_percentage_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.steering_percentage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VehicleState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.VehicleState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  // optional double timestamp = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_timestamp(), target);
  }

  // optional double roll = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_roll(), target);
  }

  // optional double pitch = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_pitch(), target);
  }

  // optional double yaw = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_yaw(), target);
  }

  // optional double heading = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_heading(), target);
  }

  // optional double kappa = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_kappa(), target);
  }

  // optional double linear_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_linear_velocity(), target);
  }

  // optional double angular_velocity = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_angular_velocity(), target);
  }

  // optional double linear_acceleration = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_linear_acceleration(), target);
  }

  // optional .control.canbus.Chassis.GearPosition gear = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_gear(), target);
  }

  // optional .control.canbus.Chassis.DrivingMode driving_mode = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this->_internal_driving_mode(), target);
  }

  // optional .control.localization.Pose pose = 15;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *_impl_.pose_, _impl_.pose_->GetCachedSize(), target, stream);
  }

  // optional double steering_percentage = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_steering_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.VehicleState)
  return target;
}

::size_t VehicleState::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.VehicleState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.localization.Pose pose = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }
    // optional double x = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }
    // optional double y = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }
    // optional double z = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }
    // optional double timestamp = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }
    // optional double roll = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }
    // optional double pitch = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }
    // optional double yaw = 7 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading = 8 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }
    // optional double kappa = 9 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }
    // optional double linear_velocity = 10 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }
    // optional double angular_velocity = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 9;
    }
    // optional double linear_acceleration = 12 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional .control.canbus.Chassis.GearPosition gear = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_gear());
    }
    // optional .control.canbus.Chassis.DrivingMode driving_mode = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }
    // optional double steering_percentage = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 10;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void VehicleState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VehicleState*>(&to_msg);
  auto& from = static_cast<const VehicleState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.VehicleState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.pose_ != nullptr);
      if (_this->_impl_.pose_ == nullptr) {
        _this->_impl_.pose_ =
            ::google::protobuf::Message::CopyConstruct<::control::localization::Pose>(arena, *from._impl_.pose_);
      } else {
        _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.roll_ = from._impl_.roll_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pitch_ = from._impl_.pitch_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.yaw_ = from._impl_.yaw_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.kappa_ = from._impl_.kappa_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.linear_velocity_ = from._impl_.linear_velocity_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.angular_velocity_ = from._impl_.angular_velocity_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.linear_acceleration_ = from._impl_.linear_acceleration_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.gear_ = from._impl_.gear_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.driving_mode_ = from._impl_.driving_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.steering_percentage_ = from._impl_.steering_percentage_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VehicleState::InternalSwap(VehicleState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.steering_percentage_)
      + sizeof(VehicleState::_impl_.steering_percentage_)
      - PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata VehicleState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

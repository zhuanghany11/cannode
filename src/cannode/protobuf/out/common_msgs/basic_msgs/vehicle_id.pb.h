// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msgs/basic_msgs/vehicle_id.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
namespace control {
namespace common {
class VehicleID;
class VehicleIDDefaultTypeInternal;
extern VehicleIDDefaultTypeInternal _VehicleID_default_instance_;
}  // namespace common
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::common::VehicleID* Arena::CreateMaybeMessage<::control::common::VehicleID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {
namespace common {

// ===================================================================

class VehicleID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.common.VehicleID) */ {
 public:
  inline VehicleID() : VehicleID(nullptr) {};
  virtual ~VehicleID();

  VehicleID(const VehicleID& from);
  VehicleID(VehicleID&& from) noexcept
    : VehicleID() {
    *this = ::std::move(from);
  }

  inline VehicleID& operator=(const VehicleID& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleID& operator=(VehicleID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleID* internal_default_instance() {
    return reinterpret_cast<const VehicleID*>(
               &_VehicleID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleID& a, VehicleID& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleID* New() const final {
    return CreateMaybeMessage<VehicleID>(nullptr);
  }

  VehicleID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleID& from);
  void MergeFrom(const VehicleID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.common.VehicleID";
  }
  protected:
  explicit VehicleID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto);
    return ::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVinFieldNumber = 1,
    kPlateFieldNumber = 2,
    kOtherUniqueIdFieldNumber = 3,
  };
  // optional string vin = 1;
  bool has_vin() const;
  private:
  bool _internal_has_vin() const;
  public:
  void clear_vin();
  const std::string& vin() const;
  void set_vin(const std::string& value);
  void set_vin(std::string&& value);
  void set_vin(const char* value);
  void set_vin(const char* value, size_t size);
  std::string* mutable_vin();
  std::string* release_vin();
  void set_allocated_vin(std::string* vin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vin(
      std::string* vin);
  private:
  const std::string& _internal_vin() const;
  void _internal_set_vin(const std::string& value);
  std::string* _internal_mutable_vin();
  public:

  // optional string plate = 2;
  bool has_plate() const;
  private:
  bool _internal_has_plate() const;
  public:
  void clear_plate();
  const std::string& plate() const;
  void set_plate(const std::string& value);
  void set_plate(std::string&& value);
  void set_plate(const char* value);
  void set_plate(const char* value, size_t size);
  std::string* mutable_plate();
  std::string* release_plate();
  void set_allocated_plate(std::string* plate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plate(
      std::string* plate);
  private:
  const std::string& _internal_plate() const;
  void _internal_set_plate(const std::string& value);
  std::string* _internal_mutable_plate();
  public:

  // optional string other_unique_id = 3;
  bool has_other_unique_id() const;
  private:
  bool _internal_has_other_unique_id() const;
  public:
  void clear_other_unique_id();
  const std::string& other_unique_id() const;
  void set_other_unique_id(const std::string& value);
  void set_other_unique_id(std::string&& value);
  void set_other_unique_id(const char* value);
  void set_other_unique_id(const char* value, size_t size);
  std::string* mutable_other_unique_id();
  std::string* release_other_unique_id();
  void set_allocated_other_unique_id(std::string* other_unique_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_other_unique_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_other_unique_id(
      std::string* other_unique_id);
  private:
  const std::string& _internal_other_unique_id() const;
  void _internal_set_other_unique_id(const std::string& value);
  std::string* _internal_mutable_other_unique_id();
  public:

  // @@protoc_insertion_point(class_scope:control.common.VehicleID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_unique_id_;
  friend struct ::TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleID

// optional string vin = 1;
inline bool VehicleID::_internal_has_vin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleID::has_vin() const {
  return _internal_has_vin();
}
inline void VehicleID::clear_vin() {
  vin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleID::vin() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleID.vin)
  return _internal_vin();
}
inline void VehicleID::set_vin(const std::string& value) {
  _internal_set_vin(value);
  // @@protoc_insertion_point(field_set:control.common.VehicleID.vin)
}
inline std::string* VehicleID::mutable_vin() {
  // @@protoc_insertion_point(field_mutable:control.common.VehicleID.vin)
  return _internal_mutable_vin();
}
inline const std::string& VehicleID::_internal_vin() const {
  return vin_.Get();
}
inline void VehicleID::_internal_set_vin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VehicleID::set_vin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:control.common.VehicleID.vin)
}
inline void VehicleID::set_vin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:control.common.VehicleID.vin)
}
inline void VehicleID::set_vin(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:control.common.VehicleID.vin)
}
inline std::string* VehicleID::_internal_mutable_vin() {
  _has_bits_[0] |= 0x00000001u;
  return vin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VehicleID::release_vin() {
  // @@protoc_insertion_point(field_release:control.common.VehicleID.vin)
  if (!_internal_has_vin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VehicleID::set_allocated_vin(std::string* vin) {
  if (vin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleID.vin)
}
inline std::string* VehicleID::unsafe_arena_release_vin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:control.common.VehicleID.vin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return vin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleID::unsafe_arena_set_allocated_vin(
    std::string* vin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleID.vin)
}

// optional string plate = 2;
inline bool VehicleID::_internal_has_plate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleID::has_plate() const {
  return _internal_has_plate();
}
inline void VehicleID::clear_plate() {
  plate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VehicleID::plate() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleID.plate)
  return _internal_plate();
}
inline void VehicleID::set_plate(const std::string& value) {
  _internal_set_plate(value);
  // @@protoc_insertion_point(field_set:control.common.VehicleID.plate)
}
inline std::string* VehicleID::mutable_plate() {
  // @@protoc_insertion_point(field_mutable:control.common.VehicleID.plate)
  return _internal_mutable_plate();
}
inline const std::string& VehicleID::_internal_plate() const {
  return plate_.Get();
}
inline void VehicleID::_internal_set_plate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VehicleID::set_plate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:control.common.VehicleID.plate)
}
inline void VehicleID::set_plate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:control.common.VehicleID.plate)
}
inline void VehicleID::set_plate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:control.common.VehicleID.plate)
}
inline std::string* VehicleID::_internal_mutable_plate() {
  _has_bits_[0] |= 0x00000002u;
  return plate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VehicleID::release_plate() {
  // @@protoc_insertion_point(field_release:control.common.VehicleID.plate)
  if (!_internal_has_plate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VehicleID::set_allocated_plate(std::string* plate) {
  if (plate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleID.plate)
}
inline std::string* VehicleID::unsafe_arena_release_plate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:control.common.VehicleID.plate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return plate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleID::unsafe_arena_set_allocated_plate(
    std::string* plate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (plate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleID.plate)
}

// optional string other_unique_id = 3;
inline bool VehicleID::_internal_has_other_unique_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleID::has_other_unique_id() const {
  return _internal_has_other_unique_id();
}
inline void VehicleID::clear_other_unique_id() {
  other_unique_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VehicleID::other_unique_id() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleID.other_unique_id)
  return _internal_other_unique_id();
}
inline void VehicleID::set_other_unique_id(const std::string& value) {
  _internal_set_other_unique_id(value);
  // @@protoc_insertion_point(field_set:control.common.VehicleID.other_unique_id)
}
inline std::string* VehicleID::mutable_other_unique_id() {
  // @@protoc_insertion_point(field_mutable:control.common.VehicleID.other_unique_id)
  return _internal_mutable_other_unique_id();
}
inline const std::string& VehicleID::_internal_other_unique_id() const {
  return other_unique_id_.Get();
}
inline void VehicleID::_internal_set_other_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VehicleID::set_other_unique_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:control.common.VehicleID.other_unique_id)
}
inline void VehicleID::set_other_unique_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:control.common.VehicleID.other_unique_id)
}
inline void VehicleID::set_other_unique_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:control.common.VehicleID.other_unique_id)
}
inline std::string* VehicleID::_internal_mutable_other_unique_id() {
  _has_bits_[0] |= 0x00000004u;
  return other_unique_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VehicleID::release_other_unique_id() {
  // @@protoc_insertion_point(field_release:control.common.VehicleID.other_unique_id)
  if (!_internal_has_other_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return other_unique_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VehicleID::set_allocated_other_unique_id(std::string* other_unique_id) {
  if (other_unique_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  other_unique_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), other_unique_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleID.other_unique_id)
}
inline std::string* VehicleID::unsafe_arena_release_other_unique_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:control.common.VehicleID.other_unique_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return other_unique_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleID::unsafe_arena_set_allocated_other_unique_id(
    std::string* other_unique_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (other_unique_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  other_unique_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      other_unique_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleID.other_unique_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/vehicle_state.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs/chassis_msgs/chassis.pb.h"
#include "localization_msgs/pose.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto;
namespace control {
namespace common {
class VehicleState;
struct VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class VehicleState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.VehicleState) */ {
 public:
  inline VehicleState() : VehicleState(nullptr) {}
  ~VehicleState() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleState(
      ::google::protobuf::internal::ConstantInitialized);

  inline VehicleState(const VehicleState& from) : VehicleState(nullptr, from) {}
  inline VehicleState(VehicleState&& from) noexcept
      : VehicleState(nullptr, std::move(from)) {}
  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
        &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VehicleState& a, VehicleState& b) { a.Swap(&b); }
  inline void Swap(VehicleState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<VehicleState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VehicleState& from) { VehicleState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.VehicleState"; }

 protected:
  explicit VehicleState(::google::protobuf::Arena* arena);
  VehicleState(::google::protobuf::Arena* arena, const VehicleState& from);
  VehicleState(::google::protobuf::Arena* arena, VehicleState&& from) noexcept
      : VehicleState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPoseFieldNumber = 15,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kRollFieldNumber = 5,
    kPitchFieldNumber = 6,
    kYawFieldNumber = 7,
    kHeadingFieldNumber = 8,
    kKappaFieldNumber = 9,
    kLinearVelocityFieldNumber = 10,
    kAngularVelocityFieldNumber = 11,
    kLinearAccelerationFieldNumber = 12,
    kGearFieldNumber = 13,
    kDrivingModeFieldNumber = 14,
    kSteeringPercentageFieldNumber = 16,
  };
  // optional .control.localization.Pose pose = 15;
  bool has_pose() const;
  void clear_pose() ;
  const ::control::localization::Pose& pose() const;
  PROTOBUF_NODISCARD ::control::localization::Pose* release_pose();
  ::control::localization::Pose* mutable_pose();
  void set_allocated_pose(::control::localization::Pose* value);
  void unsafe_arena_set_allocated_pose(::control::localization::Pose* value);
  ::control::localization::Pose* unsafe_arena_release_pose();

  private:
  const ::control::localization::Pose& _internal_pose() const;
  ::control::localization::Pose* _internal_mutable_pose();

  public:
  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // optional double z = 3 [default = 0];
  bool has_z() const;
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // optional double timestamp = 4 [default = 0];
  bool has_timestamp() const;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // optional double roll = 5 [default = 0];
  bool has_roll() const;
  void clear_roll() ;
  double roll() const;
  void set_roll(double value);

  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);

  public:
  // optional double pitch = 6 [default = 0];
  bool has_pitch() const;
  void clear_pitch() ;
  double pitch() const;
  void set_pitch(double value);

  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);

  public:
  // optional double yaw = 7 [default = 0];
  bool has_yaw() const;
  void clear_yaw() ;
  double yaw() const;
  void set_yaw(double value);

  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);

  public:
  // optional double heading = 8 [default = 0];
  bool has_heading() const;
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // optional double kappa = 9 [default = 0];
  bool has_kappa() const;
  void clear_kappa() ;
  double kappa() const;
  void set_kappa(double value);

  private:
  double _internal_kappa() const;
  void _internal_set_kappa(double value);

  public:
  // optional double linear_velocity = 10 [default = 0];
  bool has_linear_velocity() const;
  void clear_linear_velocity() ;
  double linear_velocity() const;
  void set_linear_velocity(double value);

  private:
  double _internal_linear_velocity() const;
  void _internal_set_linear_velocity(double value);

  public:
  // optional double angular_velocity = 11 [default = 0];
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  double angular_velocity() const;
  void set_angular_velocity(double value);

  private:
  double _internal_angular_velocity() const;
  void _internal_set_angular_velocity(double value);

  public:
  // optional double linear_acceleration = 12 [default = 0];
  bool has_linear_acceleration() const;
  void clear_linear_acceleration() ;
  double linear_acceleration() const;
  void set_linear_acceleration(double value);

  private:
  double _internal_linear_acceleration() const;
  void _internal_set_linear_acceleration(double value);

  public:
  // optional .control.canbus.Chassis.GearPosition gear = 13;
  bool has_gear() const;
  void clear_gear() ;
  ::control::canbus::Chassis_GearPosition gear() const;
  void set_gear(::control::canbus::Chassis_GearPosition value);

  private:
  ::control::canbus::Chassis_GearPosition _internal_gear() const;
  void _internal_set_gear(::control::canbus::Chassis_GearPosition value);

  public:
  // optional .control.canbus.Chassis.DrivingMode driving_mode = 14;
  bool has_driving_mode() const;
  void clear_driving_mode() ;
  ::control::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::control::canbus::Chassis_DrivingMode value);

  private:
  ::control::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::control::canbus::Chassis_DrivingMode value);

  public:
  // optional double steering_percentage = 16;
  bool has_steering_percentage() const;
  void clear_steering_percentage() ;
  double steering_percentage() const;
  void set_steering_percentage(double value);

  private:
  double _internal_steering_percentage() const;
  void _internal_set_steering_percentage(double value);

  public:
  // @@protoc_insertion_point(class_scope:control.common.VehicleState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VehicleState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VehicleState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::control::localization::Pose* pose_;
    double x_;
    double y_;
    double z_;
    double timestamp_;
    double roll_;
    double pitch_;
    double yaw_;
    double heading_;
    double kappa_;
    double linear_velocity_;
    double angular_velocity_;
    double linear_acceleration_;
    int gear_;
    int driving_mode_;
    double steering_percentage_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VehicleState

// optional double x = 1 [default = 0];
inline bool VehicleState::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VehicleState::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double VehicleState::x() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.x)
  return _internal_x();
}
inline void VehicleState::set_x(double value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.x)
}
inline double VehicleState::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void VehicleState::_internal_set_x(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// optional double y = 2 [default = 0];
inline bool VehicleState::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VehicleState::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double VehicleState::y() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.y)
  return _internal_y();
}
inline void VehicleState::set_y(double value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.y)
}
inline double VehicleState::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void VehicleState::_internal_set_y(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// optional double z = 3 [default = 0];
inline bool VehicleState::has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VehicleState::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double VehicleState::z() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.z)
  return _internal_z();
}
inline void VehicleState::set_z(double value) {
  _internal_set_z(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.z)
}
inline double VehicleState::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void VehicleState::_internal_set_z(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// optional double timestamp = 4 [default = 0];
inline bool VehicleState::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VehicleState::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double VehicleState::timestamp() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.timestamp)
  return _internal_timestamp();
}
inline void VehicleState::set_timestamp(double value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.timestamp)
}
inline double VehicleState::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void VehicleState::_internal_set_timestamp(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// optional double roll = 5 [default = 0];
inline bool VehicleState::has_roll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VehicleState::clear_roll() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double VehicleState::roll() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.roll)
  return _internal_roll();
}
inline void VehicleState::set_roll(double value) {
  _internal_set_roll(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.roll)
}
inline double VehicleState::_internal_roll() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_;
}
inline void VehicleState::_internal_set_roll(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = value;
}

// optional double pitch = 6 [default = 0];
inline bool VehicleState::has_pitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VehicleState::clear_pitch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double VehicleState::pitch() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.pitch)
  return _internal_pitch();
}
inline void VehicleState::set_pitch(double value) {
  _internal_set_pitch(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.pitch)
}
inline double VehicleState::_internal_pitch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_;
}
inline void VehicleState::_internal_set_pitch(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_ = value;
}

// optional double yaw = 7 [default = 0];
inline bool VehicleState::has_yaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VehicleState::clear_yaw() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double VehicleState::yaw() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.yaw)
  return _internal_yaw();
}
inline void VehicleState::set_yaw(double value) {
  _internal_set_yaw(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.yaw)
}
inline double VehicleState::_internal_yaw() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_;
}
inline void VehicleState::_internal_set_yaw(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_ = value;
}

// optional double heading = 8 [default = 0];
inline bool VehicleState::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void VehicleState::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double VehicleState::heading() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.heading)
  return _internal_heading();
}
inline void VehicleState::set_heading(double value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.heading)
}
inline double VehicleState::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void VehicleState::_internal_set_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// optional double kappa = 9 [default = 0];
inline bool VehicleState::has_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void VehicleState::clear_kappa() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double VehicleState::kappa() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.kappa)
  return _internal_kappa();
}
inline void VehicleState::set_kappa(double value) {
  _internal_set_kappa(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.kappa)
}
inline double VehicleState::_internal_kappa() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kappa_;
}
inline void VehicleState::_internal_set_kappa(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kappa_ = value;
}

// optional double linear_velocity = 10 [default = 0];
inline bool VehicleState::has_linear_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void VehicleState::clear_linear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_velocity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double VehicleState::linear_velocity() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.linear_velocity)
  return _internal_linear_velocity();
}
inline void VehicleState::set_linear_velocity(double value) {
  _internal_set_linear_velocity(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.linear_velocity)
}
inline double VehicleState::_internal_linear_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linear_velocity_;
}
inline void VehicleState::_internal_set_linear_velocity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_velocity_ = value;
}

// optional double angular_velocity = 11 [default = 0];
inline bool VehicleState::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void VehicleState::clear_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_velocity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double VehicleState::angular_velocity() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.angular_velocity)
  return _internal_angular_velocity();
}
inline void VehicleState::set_angular_velocity(double value) {
  _internal_set_angular_velocity(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.angular_velocity)
}
inline double VehicleState::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angular_velocity_;
}
inline void VehicleState::_internal_set_angular_velocity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_velocity_ = value;
}

// optional double linear_acceleration = 12 [default = 0];
inline bool VehicleState::has_linear_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void VehicleState::clear_linear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double VehicleState::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void VehicleState::set_linear_acceleration(double value) {
  _internal_set_linear_acceleration(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.linear_acceleration)
}
inline double VehicleState::_internal_linear_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linear_acceleration_;
}
inline void VehicleState::_internal_set_linear_acceleration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_acceleration_ = value;
}

// optional .control.canbus.Chassis.GearPosition gear = 13;
inline bool VehicleState::has_gear() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void VehicleState::clear_gear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gear_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::control::canbus::Chassis_GearPosition VehicleState::gear() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.gear)
  return _internal_gear();
}
inline void VehicleState::set_gear(::control::canbus::Chassis_GearPosition value) {
  _internal_set_gear(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.gear)
}
inline ::control::canbus::Chassis_GearPosition VehicleState::_internal_gear() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_GearPosition>(_impl_.gear_);
}
inline void VehicleState::_internal_set_gear(::control::canbus::Chassis_GearPosition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_GearPosition_IsValid(value));
  _impl_.gear_ = value;
}

// optional .control.canbus.Chassis.DrivingMode driving_mode = 14;
inline bool VehicleState::has_driving_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void VehicleState::clear_driving_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.driving_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::control::canbus::Chassis_DrivingMode VehicleState::driving_mode() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.driving_mode)
  return _internal_driving_mode();
}
inline void VehicleState::set_driving_mode(::control::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.driving_mode)
}
inline ::control::canbus::Chassis_DrivingMode VehicleState::_internal_driving_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::canbus::Chassis_DrivingMode>(_impl_.driving_mode_);
}
inline void VehicleState::_internal_set_driving_mode(::control::canbus::Chassis_DrivingMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::canbus::Chassis_DrivingMode_IsValid(value));
  _impl_.driving_mode_ = value;
}

// optional .control.localization.Pose pose = 15;
inline bool VehicleState::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline const ::control::localization::Pose& VehicleState::_internal_pose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::localization::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::localization::Pose&>(::control::localization::_Pose_default_instance_);
}
inline const ::control::localization::Pose& VehicleState::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.pose)
  return _internal_pose();
}
inline void VehicleState::unsafe_arena_set_allocated_pose(::control::localization::Pose* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::control::localization::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.VehicleState.pose)
}
inline ::control::localization::Pose* VehicleState::release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::localization::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::localization::Pose* VehicleState::unsafe_arena_release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.VehicleState.pose)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::control::localization::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::control::localization::Pose* VehicleState::_internal_mutable_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::localization::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::control::localization::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::control::localization::Pose* VehicleState::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::control::localization::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:control.common.VehicleState.pose)
  return _msg;
}
inline void VehicleState::set_allocated_pose(::control::localization::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pose_ = reinterpret_cast<::control::localization::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.VehicleState.pose)
}

// optional double steering_percentage = 16;
inline bool VehicleState::has_steering_percentage() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void VehicleState::clear_steering_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_percentage_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double VehicleState::steering_percentage() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleState.steering_percentage)
  return _internal_steering_percentage();
}
inline void VehicleState::set_steering_percentage(double value) {
  _internal_set_steering_percentage(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:control.common.VehicleState.steering_percentage)
}
inline double VehicleState::_internal_steering_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steering_percentage_;
}
inline void VehicleState::_internal_set_steering_percentage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steering_percentage_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fstate_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/vehicle_signal.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto;
namespace control {
namespace common {
class VehicleSignal;
struct VehicleSignalDefaultTypeInternal;
extern VehicleSignalDefaultTypeInternal _VehicleSignal_default_instance_;
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace common {
enum VehicleSignal_TurnSignal : int {
  VehicleSignal_TurnSignal_TURN_NONE = 0,
  VehicleSignal_TurnSignal_TURN_LEFT = 1,
  VehicleSignal_TurnSignal_TURN_RIGHT = 2,
};

bool VehicleSignal_TurnSignal_IsValid(int value);
extern const uint32_t VehicleSignal_TurnSignal_internal_data_[];
constexpr VehicleSignal_TurnSignal VehicleSignal_TurnSignal_TurnSignal_MIN = static_cast<VehicleSignal_TurnSignal>(0);
constexpr VehicleSignal_TurnSignal VehicleSignal_TurnSignal_TurnSignal_MAX = static_cast<VehicleSignal_TurnSignal>(2);
constexpr int VehicleSignal_TurnSignal_TurnSignal_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VehicleSignal_TurnSignal_descriptor();
template <typename T>
const std::string& VehicleSignal_TurnSignal_Name(T value) {
  static_assert(std::is_same<T, VehicleSignal_TurnSignal>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TurnSignal_Name().");
  return VehicleSignal_TurnSignal_Name(static_cast<VehicleSignal_TurnSignal>(value));
}
template <>
inline const std::string& VehicleSignal_TurnSignal_Name(VehicleSignal_TurnSignal value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VehicleSignal_TurnSignal_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VehicleSignal_TurnSignal_Parse(absl::string_view name, VehicleSignal_TurnSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleSignal_TurnSignal>(
      VehicleSignal_TurnSignal_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VehicleSignal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.VehicleSignal) */ {
 public:
  inline VehicleSignal() : VehicleSignal(nullptr) {}
  ~VehicleSignal() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleSignal(
      ::google::protobuf::internal::ConstantInitialized);

  inline VehicleSignal(const VehicleSignal& from) : VehicleSignal(nullptr, from) {}
  inline VehicleSignal(VehicleSignal&& from) noexcept
      : VehicleSignal(nullptr, std::move(from)) {}
  inline VehicleSignal& operator=(const VehicleSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleSignal& operator=(VehicleSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleSignal* internal_default_instance() {
    return reinterpret_cast<const VehicleSignal*>(
        &_VehicleSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VehicleSignal& a, VehicleSignal& b) { a.Swap(&b); }
  inline void Swap(VehicleSignal* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleSignal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleSignal* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<VehicleSignal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleSignal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VehicleSignal& from) { VehicleSignal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleSignal* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.VehicleSignal"; }

 protected:
  explicit VehicleSignal(::google::protobuf::Arena* arena);
  VehicleSignal(::google::protobuf::Arena* arena, const VehicleSignal& from);
  VehicleSignal(::google::protobuf::Arena* arena, VehicleSignal&& from) noexcept
      : VehicleSignal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TurnSignal = VehicleSignal_TurnSignal;
  static constexpr TurnSignal TURN_NONE = VehicleSignal_TurnSignal_TURN_NONE;
  static constexpr TurnSignal TURN_LEFT = VehicleSignal_TurnSignal_TURN_LEFT;
  static constexpr TurnSignal TURN_RIGHT = VehicleSignal_TurnSignal_TURN_RIGHT;
  static inline bool TurnSignal_IsValid(int value) {
    return VehicleSignal_TurnSignal_IsValid(value);
  }
  static constexpr TurnSignal TurnSignal_MIN = VehicleSignal_TurnSignal_TurnSignal_MIN;
  static constexpr TurnSignal TurnSignal_MAX = VehicleSignal_TurnSignal_TurnSignal_MAX;
  static constexpr int TurnSignal_ARRAYSIZE = VehicleSignal_TurnSignal_TurnSignal_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TurnSignal_descriptor() {
    return VehicleSignal_TurnSignal_descriptor();
  }
  template <typename T>
  static inline const std::string& TurnSignal_Name(T value) {
    return VehicleSignal_TurnSignal_Name(value);
  }
  static inline bool TurnSignal_Parse(absl::string_view name, TurnSignal* value) {
    return VehicleSignal_TurnSignal_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTurnSignalFieldNumber = 1,
    kHighBeamFieldNumber = 2,
    kLowBeamFieldNumber = 3,
    kHornFieldNumber = 4,
    kEmergencyLightFieldNumber = 5,
  };
  // optional .control.common.VehicleSignal.TurnSignal turn_signal = 1;
  bool has_turn_signal() const;
  void clear_turn_signal() ;
  ::control::common::VehicleSignal_TurnSignal turn_signal() const;
  void set_turn_signal(::control::common::VehicleSignal_TurnSignal value);

  private:
  ::control::common::VehicleSignal_TurnSignal _internal_turn_signal() const;
  void _internal_set_turn_signal(::control::common::VehicleSignal_TurnSignal value);

  public:
  // optional bool high_beam = 2;
  bool has_high_beam() const;
  void clear_high_beam() ;
  bool high_beam() const;
  void set_high_beam(bool value);

  private:
  bool _internal_high_beam() const;
  void _internal_set_high_beam(bool value);

  public:
  // optional bool low_beam = 3;
  bool has_low_beam() const;
  void clear_low_beam() ;
  bool low_beam() const;
  void set_low_beam(bool value);

  private:
  bool _internal_low_beam() const;
  void _internal_set_low_beam(bool value);

  public:
  // optional bool horn = 4;
  bool has_horn() const;
  void clear_horn() ;
  bool horn() const;
  void set_horn(bool value);

  private:
  bool _internal_horn() const;
  void _internal_set_horn(bool value);

  public:
  // optional bool emergency_light = 5;
  bool has_emergency_light() const;
  void clear_emergency_light() ;
  bool emergency_light() const;
  void set_emergency_light(bool value);

  private:
  bool _internal_emergency_light() const;
  void _internal_set_emergency_light(bool value);

  public:
  // @@protoc_insertion_point(class_scope:control.common.VehicleSignal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VehicleSignal_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VehicleSignal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int turn_signal_;
    bool high_beam_;
    bool low_beam_;
    bool horn_;
    bool emergency_light_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VehicleSignal

// optional .control.common.VehicleSignal.TurnSignal turn_signal = 1;
inline bool VehicleSignal::has_turn_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VehicleSignal::clear_turn_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_signal_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::control::common::VehicleSignal_TurnSignal VehicleSignal::turn_signal() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleSignal.turn_signal)
  return _internal_turn_signal();
}
inline void VehicleSignal::set_turn_signal(::control::common::VehicleSignal_TurnSignal value) {
  _internal_set_turn_signal(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.common.VehicleSignal.turn_signal)
}
inline ::control::common::VehicleSignal_TurnSignal VehicleSignal::_internal_turn_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::common::VehicleSignal_TurnSignal>(_impl_.turn_signal_);
}
inline void VehicleSignal::_internal_set_turn_signal(::control::common::VehicleSignal_TurnSignal value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::common::VehicleSignal_TurnSignal_IsValid(value));
  _impl_.turn_signal_ = value;
}

// optional bool high_beam = 2;
inline bool VehicleSignal::has_high_beam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VehicleSignal::clear_high_beam() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_beam_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool VehicleSignal::high_beam() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleSignal.high_beam)
  return _internal_high_beam();
}
inline void VehicleSignal::set_high_beam(bool value) {
  _internal_set_high_beam(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.common.VehicleSignal.high_beam)
}
inline bool VehicleSignal::_internal_high_beam() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.high_beam_;
}
inline void VehicleSignal::_internal_set_high_beam(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_beam_ = value;
}

// optional bool low_beam = 3;
inline bool VehicleSignal::has_low_beam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VehicleSignal::clear_low_beam() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_beam_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool VehicleSignal::low_beam() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleSignal.low_beam)
  return _internal_low_beam();
}
inline void VehicleSignal::set_low_beam(bool value) {
  _internal_set_low_beam(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:control.common.VehicleSignal.low_beam)
}
inline bool VehicleSignal::_internal_low_beam() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.low_beam_;
}
inline void VehicleSignal::_internal_set_low_beam(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_beam_ = value;
}

// optional bool horn = 4;
inline bool VehicleSignal::has_horn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VehicleSignal::clear_horn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horn_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool VehicleSignal::horn() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleSignal.horn)
  return _internal_horn();
}
inline void VehicleSignal::set_horn(bool value) {
  _internal_set_horn(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.common.VehicleSignal.horn)
}
inline bool VehicleSignal::_internal_horn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.horn_;
}
inline void VehicleSignal::_internal_set_horn(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horn_ = value;
}

// optional bool emergency_light = 5;
inline bool VehicleSignal::has_emergency_light() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VehicleSignal::clear_emergency_light() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emergency_light_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool VehicleSignal::emergency_light() const {
  // @@protoc_insertion_point(field_get:control.common.VehicleSignal.emergency_light)
  return _internal_emergency_light();
}
inline void VehicleSignal::set_emergency_light(bool value) {
  _internal_set_emergency_light(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.common.VehicleSignal.emergency_light)
}
inline bool VehicleSignal::_internal_emergency_light() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emergency_light_;
}
inline void VehicleSignal::_internal_set_emergency_light(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emergency_light_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::common::VehicleSignal_TurnSignal> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::common::VehicleSignal_TurnSignal>() {
  return ::control::common::VehicleSignal_TurnSignal_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/basic_msgs/header.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs/basic_msgs/error_code.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
namespace control {
namespace common {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class Header final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.common.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Header(
      ::google::protobuf::internal::ConstantInitialized);

  inline Header(const Header& from) : Header(nullptr, from) {}
  inline Header(Header&& from) noexcept
      : Header(nullptr, std::move(from)) {}
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
        &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Header& a, Header& b) { a.Swap(&b); }
  inline void Swap(Header* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Header& from) { Header::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Header* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.common.Header"; }

 protected:
  explicit Header(::google::protobuf::Arena* arena);
  Header(::google::protobuf::Arena* arena, const Header& from);
  Header(::google::protobuf::Arena* arena, Header&& from) noexcept
      : Header(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModuleNameFieldNumber = 2,
    kFrameIdFieldNumber = 9,
    kStatusFieldNumber = 8,
    kTimestampSecFieldNumber = 1,
    kLidarTimestampFieldNumber = 4,
    kCameraTimestampFieldNumber = 5,
    kRadarTimestampFieldNumber = 6,
    kSequenceNumFieldNumber = 3,
    kVersionFieldNumber = 7,
  };
  // optional string module_name = 2;
  bool has_module_name() const;
  void clear_module_name() ;
  const std::string& module_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module_name(Arg_&& arg, Args_... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* value);

  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(
      const std::string& value);
  std::string* _internal_mutable_module_name();

  public:
  // optional string frame_id = 9;
  bool has_frame_id() const;
  void clear_frame_id() ;
  const std::string& frame_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_frame_id(Arg_&& arg, Args_... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* value);

  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(
      const std::string& value);
  std::string* _internal_mutable_frame_id();

  public:
  // optional .control.common.StatusPb status = 8;
  bool has_status() const;
  void clear_status() ;
  const ::control::common::StatusPb& status() const;
  PROTOBUF_NODISCARD ::control::common::StatusPb* release_status();
  ::control::common::StatusPb* mutable_status();
  void set_allocated_status(::control::common::StatusPb* value);
  void unsafe_arena_set_allocated_status(::control::common::StatusPb* value);
  ::control::common::StatusPb* unsafe_arena_release_status();

  private:
  const ::control::common::StatusPb& _internal_status() const;
  ::control::common::StatusPb* _internal_mutable_status();

  public:
  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec() ;
  double timestamp_sec() const;
  void set_timestamp_sec(double value);

  private:
  double _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(double value);

  public:
  // optional uint64 lidar_timestamp = 4;
  bool has_lidar_timestamp() const;
  void clear_lidar_timestamp() ;
  ::uint64_t lidar_timestamp() const;
  void set_lidar_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_lidar_timestamp() const;
  void _internal_set_lidar_timestamp(::uint64_t value);

  public:
  // optional uint64 camera_timestamp = 5;
  bool has_camera_timestamp() const;
  void clear_camera_timestamp() ;
  ::uint64_t camera_timestamp() const;
  void set_camera_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_camera_timestamp() const;
  void _internal_set_camera_timestamp(::uint64_t value);

  public:
  // optional uint64 radar_timestamp = 6;
  bool has_radar_timestamp() const;
  void clear_radar_timestamp() ;
  ::uint64_t radar_timestamp() const;
  void set_radar_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_radar_timestamp() const;
  void _internal_set_radar_timestamp(::uint64_t value);

  public:
  // optional uint32 sequence_num = 3;
  bool has_sequence_num() const;
  void clear_sequence_num() ;
  ::uint32_t sequence_num() const;
  void set_sequence_num(::uint32_t value);

  private:
  ::uint32_t _internal_sequence_num() const;
  void _internal_set_sequence_num(::uint32_t value);

  public:
  // optional uint32 version = 7 [default = 1];
  bool has_version() const;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:control.common.Header)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Header_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Header& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr module_name_;
    ::google::protobuf::internal::ArenaStringPtr frame_id_;
    ::control::common::StatusPb* status_;
    double timestamp_sec_;
    ::uint64_t lidar_timestamp_;
    ::uint64_t camera_timestamp_;
    ::uint64_t radar_timestamp_;
    ::uint32_t sequence_num_;
    ::uint32_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Header

// optional double timestamp_sec = 1;
inline bool Header::has_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Header::clear_timestamp_sec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Header::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:control.common.Header.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void Header::set_timestamp_sec(double value) {
  _internal_set_timestamp_sec(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:control.common.Header.timestamp_sec)
}
inline double Header::_internal_timestamp_sec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_sec_;
}
inline void Header::_internal_set_timestamp_sec(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_sec_ = value;
}

// optional string module_name = 2;
inline bool Header::has_module_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Header::clear_module_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.module_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::module_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Header.module_name)
  return _internal_module_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_module_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.module_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.Header.module_name)
}
inline std::string* Header::mutable_module_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:control.common.Header.module_name)
  return _s;
}
inline const std::string& Header::_internal_module_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.module_name_.Get();
}
inline void Header::_internal_set_module_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.module_name_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_module_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.module_name_.Mutable( GetArena());
}
inline std::string* Header::release_module_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.Header.module_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.module_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Header::set_allocated_module_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.module_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_name_.IsDefault()) {
          _impl_.module_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.Header.module_name)
}

// optional uint32 sequence_num = 3;
inline bool Header::has_sequence_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Header::clear_sequence_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Header::sequence_num() const {
  // @@protoc_insertion_point(field_get:control.common.Header.sequence_num)
  return _internal_sequence_num();
}
inline void Header::set_sequence_num(::uint32_t value) {
  _internal_set_sequence_num(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:control.common.Header.sequence_num)
}
inline ::uint32_t Header::_internal_sequence_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_num_;
}
inline void Header::_internal_set_sequence_num(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_num_ = value;
}

// optional uint64 lidar_timestamp = 4;
inline bool Header::has_lidar_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Header::clear_lidar_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lidar_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Header::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:control.common.Header.lidar_timestamp)
  return _internal_lidar_timestamp();
}
inline void Header::set_lidar_timestamp(::uint64_t value) {
  _internal_set_lidar_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:control.common.Header.lidar_timestamp)
}
inline ::uint64_t Header::_internal_lidar_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lidar_timestamp_;
}
inline void Header::_internal_set_lidar_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lidar_timestamp_ = value;
}

// optional uint64 camera_timestamp = 5;
inline bool Header::has_camera_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Header::clear_camera_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.camera_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Header::camera_timestamp() const {
  // @@protoc_insertion_point(field_get:control.common.Header.camera_timestamp)
  return _internal_camera_timestamp();
}
inline void Header::set_camera_timestamp(::uint64_t value) {
  _internal_set_camera_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:control.common.Header.camera_timestamp)
}
inline ::uint64_t Header::_internal_camera_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.camera_timestamp_;
}
inline void Header::_internal_set_camera_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.camera_timestamp_ = value;
}

// optional uint64 radar_timestamp = 6;
inline bool Header::has_radar_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Header::clear_radar_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radar_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Header::radar_timestamp() const {
  // @@protoc_insertion_point(field_get:control.common.Header.radar_timestamp)
  return _internal_radar_timestamp();
}
inline void Header::set_radar_timestamp(::uint64_t value) {
  _internal_set_radar_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:control.common.Header.radar_timestamp)
}
inline ::uint64_t Header::_internal_radar_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.radar_timestamp_;
}
inline void Header::_internal_set_radar_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radar_timestamp_ = value;
}

// optional uint32 version = 7 [default = 1];
inline bool Header::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Header::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Header::version() const {
  // @@protoc_insertion_point(field_get:control.common.Header.version)
  return _internal_version();
}
inline void Header::set_version(::uint32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:control.common.Header.version)
}
inline ::uint32_t Header::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void Header::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// optional .control.common.StatusPb status = 8;
inline bool Header::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::control::common::StatusPb& Header::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::control::common::StatusPb* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::control::common::StatusPb&>(::control::common::_StatusPb_default_instance_);
}
inline const ::control::common::StatusPb& Header::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Header.status)
  return _internal_status();
}
inline void Header::unsafe_arena_set_allocated_status(::control::common::StatusPb* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::control::common::StatusPb*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.common.Header.status)
}
inline ::control::common::StatusPb* Header::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::StatusPb* released = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::control::common::StatusPb* Header::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.Header.status)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::control::common::StatusPb* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::control::common::StatusPb* Header::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::control::common::StatusPb>(GetArena());
    _impl_.status_ = reinterpret_cast<::control::common::StatusPb*>(p);
  }
  return _impl_.status_;
}
inline ::control::common::StatusPb* Header::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::control::common::StatusPb* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:control.common.Header.status)
  return _msg;
}
inline void Header::set_allocated_status(::control::common::StatusPb* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.status_ = reinterpret_cast<::control::common::StatusPb*>(value);
  // @@protoc_insertion_point(field_set_allocated:control.common.Header.status)
}

// optional string frame_id = 9;
inline bool Header::has_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Header::clear_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Header::frame_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:control.common.Header.frame_id)
  return _internal_frame_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_frame_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frame_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:control.common.Header.frame_id)
}
inline std::string* Header::mutable_frame_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:control.common.Header.frame_id)
  return _s;
}
inline const std::string& Header::_internal_frame_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_id_.Get();
}
inline void Header::_internal_set_frame_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frame_id_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.frame_id_.Mutable( GetArena());
}
inline std::string* Header::release_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:control.common.Header.frame_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.frame_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Header::set_allocated_frame_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.frame_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.frame_id_.IsDefault()) {
          _impl_.frame_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:control.common.Header.frame_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto_2epb_2eh

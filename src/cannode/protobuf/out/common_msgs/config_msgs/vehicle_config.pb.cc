// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common_msgs/config_msgs/vehicle_config.proto
// Protobuf C++ Version: 5.28.0-dev

#include "common_msgs/config_msgs/vehicle_config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace control {
namespace common {

inline constexpr LatencyParam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dead_time_{0},
        rise_time_{0},
        peak_time_{0},
        settling_time_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LatencyParam::LatencyParam(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LatencyParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyParamDefaultTypeInternal() {}
  union {
    LatencyParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyParamDefaultTypeInternal _LatencyParam_default_instance_;

inline constexpr VehicleParam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vehicle_id_{nullptr},
        steering_latency_param_{nullptr},
        throttle_latency_param_{nullptr},
        brake_latency_param_{nullptr},
        cubic_coeff_{0},
        quadratic_coeff_{0},
        linear_coeff_{0},
        offset_{0},
        brand_{static_cast< ::control::common::VehicleBrand >(0)},
        max_abs_speed_when_stopped_{std::numeric_limits<float>::quiet_NaN()},
        front_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        back_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        left_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        right_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        length_{std::numeric_limits<double>::quiet_NaN()},
        width_{std::numeric_limits<double>::quiet_NaN()},
        height_{std::numeric_limits<double>::quiet_NaN()},
        min_turn_radius_{std::numeric_limits<double>::quiet_NaN()},
        max_acceleration_{std::numeric_limits<double>::quiet_NaN()},
        max_deceleration_{std::numeric_limits<double>::quiet_NaN()},
        max_steer_angle_{std::numeric_limits<double>::quiet_NaN()},
        max_steer_angle_rate_{std::numeric_limits<double>::quiet_NaN()},
        min_steer_angle_rate_{std::numeric_limits<double>::quiet_NaN()},
        steer_ratio_{std::numeric_limits<double>::quiet_NaN()},
        wheel_base_{std::numeric_limits<double>::quiet_NaN()},
        wheel_rolling_radius_{std::numeric_limits<double>::quiet_NaN()},
        brake_deadzone_{std::numeric_limits<double>::quiet_NaN()},
        throttle_deadzone_{std::numeric_limits<double>::quiet_NaN()} {}

template <typename>
PROTOBUF_CONSTEXPR VehicleParam::VehicleParam(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VehicleParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleParamDefaultTypeInternal() {}
  union {
    VehicleParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;

inline constexpr Transform::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_frame_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_frame_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        translation_{nullptr},
        rotation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Transform::Transform(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;

inline constexpr Extrinsics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tansforms_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Extrinsics::Extrinsics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExtrinsicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtrinsicsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtrinsicsDefaultTypeInternal() {}
  union {
    Extrinsics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtrinsicsDefaultTypeInternal _Extrinsics_default_instance_;

inline constexpr VehicleConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        vehicle_param_{nullptr},
        extrinsics_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR VehicleConfig::VehicleConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VehicleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleConfigDefaultTypeInternal() {}
  union {
    VehicleConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
}  // namespace common
}  // namespace control
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::control::common::Transform, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::Transform, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::Transform, _impl_.source_frame_),
        PROTOBUF_FIELD_OFFSET(::control::common::Transform, _impl_.target_frame_),
        PROTOBUF_FIELD_OFFSET(::control::common::Transform, _impl_.translation_),
        PROTOBUF_FIELD_OFFSET(::control::common::Transform, _impl_.rotation_),
        0,
        1,
        2,
        3,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::control::common::Extrinsics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::Extrinsics, _impl_.tansforms_),
        PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _impl_.dead_time_),
        PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _impl_.rise_time_),
        PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _impl_.peak_time_),
        PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _impl_.settling_time_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.vehicle_id_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.front_edge_to_center_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.back_edge_to_center_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.left_edge_to_center_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.right_edge_to_center_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.length_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.min_turn_radius_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.max_acceleration_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.max_deceleration_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.max_steer_angle_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.max_steer_angle_rate_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.min_steer_angle_rate_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.steer_ratio_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.wheel_base_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.wheel_rolling_radius_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.max_abs_speed_when_stopped_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.brake_deadzone_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.throttle_deadzone_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.steering_latency_param_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.throttle_latency_param_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.brake_latency_param_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.cubic_coeff_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.quadratic_coeff_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.linear_coeff_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _impl_.offset_),
        8,
        0,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        9,
        26,
        27,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, _impl_.vehicle_param_),
        PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, _impl_.extrinsics_),
        0,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::control::common::Transform)},
        {16, -1, -1, sizeof(::control::common::Extrinsics)},
        {25, 37, -1, sizeof(::control::common::LatencyParam)},
        {41, 77, -1, sizeof(::control::common::VehicleParam)},
        {105, 116, -1, sizeof(::control::common::VehicleConfig)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::control::common::_Transform_default_instance_._instance,
    &::control::common::_Extrinsics_default_instance_._instance,
    &::control::common::_LatencyParam_default_instance_._instance,
    &::control::common::_VehicleParam_default_instance_._instance,
    &::control::common::_VehicleConfig_default_instance_._instance,
};
const char descriptor_table_protodef_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n,common_msgs/config_msgs/vehicle_config"
    ".proto\022\016control.common\032#common_msgs/basi"
    "c_msgs/header.proto\032%common_msgs/basic_m"
    "sgs/geometry.proto\032\'common_msgs/basic_ms"
    "gs/vehicle_id.proto\"\223\001\n\tTransform\022\024\n\014sou"
    "rce_frame\030\001 \001(\014\022\024\n\014target_frame\030\002 \001(\014\022,\n"
    "\013translation\030\003 \001(\0132\027.control.common.Poin"
    "t3D\022,\n\010rotation\030\004 \001(\0132\032.control.common.Q"
    "uaternion\":\n\nExtrinsics\022,\n\ttansforms\030\001 \003"
    "(\0132\031.control.common.Transform\"^\n\014Latency"
    "Param\022\021\n\tdead_time\030\001 \001(\001\022\021\n\trise_time\030\002 "
    "\001(\001\022\021\n\tpeak_time\030\003 \001(\001\022\025\n\rsettling_time\030"
    "\004 \001(\001\"\271\007\n\014VehicleParam\022+\n\005brand\030\001 \001(\0162\034."
    "control.common.VehicleBrand\022-\n\nvehicle_i"
    "d\030\002 \001(\0132\031.control.common.VehicleID\022!\n\024fr"
    "ont_edge_to_center\030\003 \001(\001:\003nan\022 \n\023back_ed"
    "ge_to_center\030\004 \001(\001:\003nan\022 \n\023left_edge_to_"
    "center\030\005 \001(\001:\003nan\022!\n\024right_edge_to_cente"
    "r\030\006 \001(\001:\003nan\022\023\n\006length\030\007 \001(\001:\003nan\022\022\n\005wid"
    "th\030\010 \001(\001:\003nan\022\023\n\006height\030\t \001(\001:\003nan\022\034\n\017mi"
    "n_turn_radius\030\n \001(\001:\003nan\022\035\n\020max_accelera"
    "tion\030\013 \001(\001:\003nan\022\035\n\020max_deceleration\030\014 \001("
    "\001:\003nan\022\034\n\017max_steer_angle\030\r \001(\001:\003nan\022!\n\024"
    "max_steer_angle_rate\030\016 \001(\001:\003nan\022!\n\024min_s"
    "teer_angle_rate\030\017 \001(\001:\003nan\022\030\n\013steer_rati"
    "o\030\020 \001(\001:\003nan\022\027\n\nwheel_base\030\021 \001(\001:\003nan\022!\n"
    "\024wheel_rolling_radius\030\022 \001(\001:\003nan\022\'\n\032max_"
    "abs_speed_when_stopped\030\023 \001(\002:\003nan\022\033\n\016bra"
    "ke_deadzone\030\024 \001(\001:\003nan\022\036\n\021throttle_deadz"
    "one\030\025 \001(\001:\003nan\022<\n\026steering_latency_param"
    "\030\026 \001(\0132\034.control.common.LatencyParam\022<\n\026"
    "throttle_latency_param\030\027 \001(\0132\034.control.c"
    "ommon.LatencyParam\0229\n\023brake_latency_para"
    "m\030\030 \001(\0132\034.control.common.LatencyParam\022\023\n"
    "\013cubic_coeff\030\031 \001(\001\022\027\n\017quadratic_coeff\030\032 "
    "\001(\001\022\024\n\014linear_coeff\030\033 \001(\001\022\016\n\006offset\030\034 \001("
    "\001\"\234\001\n\rVehicleConfig\022&\n\006header\030\001 \001(\0132\026.co"
    "ntrol.common.Header\0223\n\rvehicle_param\030\002 \001"
    "(\0132\034.control.common.VehicleParam\022.\n\nextr"
    "insics\030\003 \001(\0132\032.control.common.Extrinsics"
    "*~\n\014VehicleBrand\022\017\n\013LINCOLN_MKZ\020\000\022\007\n\003GEM"
    "\020\001\022\t\n\005LEXUS\020\002\022\013\n\007TRANSIT\020\003\022\007\n\003GE3\020\004\022\007\n\003W"
    "EY\020\005\022\014\n\010ZHONGYUN\020\006\022\006\n\002CH\020\007\022\010\n\004DKIT\020\010\022\n\n\006"
    "NEOLIX\020\t"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_deps[3] =
    {
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
        &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
};
static ::absl::once_flag descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = {
    false,
    false,
    1728,
    descriptor_table_protodef_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
    "common_msgs/config_msgs/vehicle_config.proto",
    &descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_once,
    descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto::offsets,
    file_level_enum_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
    file_level_service_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
};
namespace control {
namespace common {
const ::google::protobuf::EnumDescriptor* VehicleBrand_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t VehicleBrand_internal_data_[] = {
    655360u, 0u, };
bool VehicleBrand_IsValid(int value) {
  return 0 <= value && value <= 9;
}
// ===================================================================

class Transform::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Transform>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_);
};

void Transform::clear_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.translation_ != nullptr) _impl_.translation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Transform::Transform(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::common::Transform& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        source_frame_(arena, from.source_frame_),
        target_frame_(arena, from.target_frame_) {}

Transform::Transform(
    ::google::protobuf::Arena* arena,
    const Transform& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transform* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.translation_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(
                              arena, *from._impl_.translation_)
                        : nullptr;
  _impl_.rotation_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Quaternion>(
                              arena, *from._impl_.rotation_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:control.common.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        source_frame_(arena),
        target_frame_(arena) {}

inline void Transform::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, translation_),
           0,
           offsetof(Impl_, rotation_) -
               offsetof(Impl_, translation_) +
               sizeof(Impl_::rotation_));
}
Transform::~Transform() {
  // @@protoc_insertion_point(destructor:control.common.Transform)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Transform::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.source_frame_.Destroy();
  _impl_.target_frame_.Destroy();
  delete _impl_.translation_;
  delete _impl_.rotation_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Transform::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Transform::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Transform>(),
            ::google::protobuf::Message::GetNewImpl<Transform>(),
            ::google::protobuf::Message::GetClearImpl<Transform>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<Transform>(),
                ::google::protobuf::Message::GetSerializeImpl<Transform>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Transform, _impl_._cached_size_),
            false,
        },
        &Transform::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Transform::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> Transform::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Transform_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::Transform>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .control.common.Quaternion rotation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 1, PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)}},
    // optional bytes source_frame = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.source_frame_)}},
    // optional bytes target_frame = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.target_frame_)}},
    // optional .control.common.Point3D translation = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.translation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes source_frame = 1;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.source_frame_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes target_frame = 2;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.target_frame_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional .control.common.Point3D translation = 3;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.translation_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Quaternion rotation = 4;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::Point3D>()},
    {::_pbi::TcParser::GetTable<::control::common::Quaternion>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.Transform)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.target_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.translation_ != nullptr);
      _impl_.translation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Transform::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.Transform)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_source_frame();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_target_frame();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional .control.common.Point3D translation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.translation_, _impl_.translation_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Quaternion rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.rotation_, _impl_.rotation_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.Transform)
  return target;
}

::size_t Transform::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.Transform)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes source_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_source_frame());
    }
    // optional bytes target_frame = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_target_frame());
    }
    // optional .control.common.Point3D translation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.translation_);
    }
    // optional .control.common.Quaternion rotation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rotation_);
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void Transform::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transform*>(&to_msg);
  auto& from = static_cast<const Transform&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.Transform)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_frame(from._internal_source_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_target_frame(from._internal_target_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.translation_ != nullptr);
      if (_this->_impl_.translation_ == nullptr) {
        _this->_impl_.translation_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Point3D>(arena, *from._impl_.translation_);
      } else {
        _this->_impl_.translation_->MergeFrom(*from._impl_.translation_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.rotation_ != nullptr);
      if (_this->_impl_.rotation_ == nullptr) {
        _this->_impl_.rotation_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Quaternion>(arena, *from._impl_.rotation_);
      } else {
        _this->_impl_.rotation_->MergeFrom(*from._impl_.rotation_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transform::InternalSwap(Transform* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_frame_, &other->_impl_.source_frame_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_frame_, &other->_impl_.target_frame_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)
      + sizeof(Transform::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Extrinsics::_Internal {
 public:
};

Extrinsics::Extrinsics(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.Extrinsics)
}
inline PROTOBUF_NDEBUG_INLINE Extrinsics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::common::Extrinsics& from_msg)
      : tansforms_{visibility, arena, from.tansforms_},
        _cached_size_{0} {}

Extrinsics::Extrinsics(
    ::google::protobuf::Arena* arena,
    const Extrinsics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Extrinsics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:control.common.Extrinsics)
}
inline PROTOBUF_NDEBUG_INLINE Extrinsics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tansforms_{visibility, arena},
        _cached_size_{0} {}

inline void Extrinsics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:control.common.Extrinsics)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Extrinsics::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Extrinsics::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Extrinsics::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Extrinsics>(),
            ::google::protobuf::Message::GetNewImpl<Extrinsics>(),
            ::google::protobuf::Message::GetClearImpl<Extrinsics>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<Extrinsics>(),
                ::google::protobuf::Message::GetSerializeImpl<Extrinsics>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Extrinsics, _impl_._cached_size_),
            false,
        },
        &Extrinsics::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Extrinsics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Extrinsics::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Extrinsics_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::Extrinsics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .control.common.Transform tansforms = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Extrinsics, _impl_.tansforms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .control.common.Transform tansforms = 1;
    {PROTOBUF_FIELD_OFFSET(Extrinsics, _impl_.tansforms_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::Transform>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.Extrinsics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tansforms_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Extrinsics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.Extrinsics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .control.common.Transform tansforms = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_tansforms_size());
       i < n; i++) {
    const auto& repfield = this->_internal_tansforms().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.Extrinsics)
  return target;
}

::size_t Extrinsics::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.Extrinsics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated .control.common.Transform tansforms = 1;
     {
      total_size += 1UL * this->_internal_tansforms_size();
      for (const auto& msg : this->_internal_tansforms()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void Extrinsics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Extrinsics*>(&to_msg);
  auto& from = static_cast<const Extrinsics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.Extrinsics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tansforms()->MergeFrom(
      from._internal_tansforms());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Extrinsics::InternalSwap(Extrinsics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tansforms_.InternalSwap(&other->_impl_.tansforms_);
}

::google::protobuf::Metadata Extrinsics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LatencyParam::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LatencyParam>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_._has_bits_);
};

LatencyParam::LatencyParam(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.LatencyParam)
}
LatencyParam::LatencyParam(
    ::google::protobuf::Arena* arena, const LatencyParam& from)
    : LatencyParam(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE LatencyParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LatencyParam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dead_time_),
           0,
           offsetof(Impl_, settling_time_) -
               offsetof(Impl_, dead_time_) +
               sizeof(Impl_::settling_time_));
}
LatencyParam::~LatencyParam() {
  // @@protoc_insertion_point(destructor:control.common.LatencyParam)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LatencyParam::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    LatencyParam::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &LatencyParam::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<LatencyParam>(),
            ::google::protobuf::Message::GetNewImpl<LatencyParam>(),
            ::google::protobuf::Message::GetClearImpl<LatencyParam>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<LatencyParam>(),
                ::google::protobuf::Message::GetSerializeImpl<LatencyParam>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_._cached_size_),
            false,
        },
        &LatencyParam::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* LatencyParam::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> LatencyParam::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LatencyParam_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::LatencyParam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional double settling_time = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.settling_time_)}},
    // optional double dead_time = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.dead_time_)}},
    // optional double rise_time = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.rise_time_)}},
    // optional double peak_time = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.peak_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double dead_time = 1;
    {PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.dead_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double rise_time = 2;
    {PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.rise_time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double peak_time = 3;
    {PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.peak_time_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double settling_time = 4;
    {PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.settling_time_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void LatencyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.LatencyParam)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.dead_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.settling_time_) -
        reinterpret_cast<char*>(&_impl_.dead_time_)) + sizeof(_impl_.settling_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* LatencyParam::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.LatencyParam)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_dead_time(), target);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_rise_time(), target);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_peak_time(), target);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_settling_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.LatencyParam)
  return target;
}

::size_t LatencyParam::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.LatencyParam)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double dead_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }
    // optional double rise_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }
    // optional double peak_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }
    // optional double settling_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void LatencyParam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LatencyParam*>(&to_msg);
  auto& from = static_cast<const LatencyParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.LatencyParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dead_time_ = from._impl_.dead_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rise_time_ = from._impl_.rise_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.peak_time_ = from._impl_.peak_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.settling_time_ = from._impl_.settling_time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyParam::CopyFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LatencyParam::InternalSwap(LatencyParam* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.settling_time_)
      + sizeof(LatencyParam::_impl_.settling_time_)
      - PROTOBUF_FIELD_OFFSET(LatencyParam, _impl_.dead_time_)>(
          reinterpret_cast<char*>(&_impl_.dead_time_),
          reinterpret_cast<char*>(&other->_impl_.dead_time_));
}

::google::protobuf::Metadata LatencyParam::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VehicleParam::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VehicleParam>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_._has_bits_);
};

void VehicleParam::clear_vehicle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vehicle_id_ != nullptr) _impl_.vehicle_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VehicleParam::VehicleParam(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.VehicleParam)
}
inline PROTOBUF_NDEBUG_INLINE VehicleParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::common::VehicleParam& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VehicleParam::VehicleParam(
    ::google::protobuf::Arena* arena,
    const VehicleParam& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VehicleParam* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vehicle_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::common::VehicleID>(
                              arena, *from._impl_.vehicle_id_)
                        : nullptr;
  _impl_.steering_latency_param_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::common::LatencyParam>(
                              arena, *from._impl_.steering_latency_param_)
                        : nullptr;
  _impl_.throttle_latency_param_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::LatencyParam>(
                              arena, *from._impl_.throttle_latency_param_)
                        : nullptr;
  _impl_.brake_latency_param_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::control::common::LatencyParam>(
                              arena, *from._impl_.brake_latency_param_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cubic_coeff_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cubic_coeff_),
           offsetof(Impl_, throttle_deadzone_) -
               offsetof(Impl_, cubic_coeff_) +
               sizeof(Impl_::throttle_deadzone_));

  // @@protoc_insertion_point(copy_constructor:control.common.VehicleParam)
}
inline PROTOBUF_NDEBUG_INLINE VehicleParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        max_abs_speed_when_stopped_{std::numeric_limits<float>::quiet_NaN()},
        front_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        back_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        left_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        right_edge_to_center_{std::numeric_limits<double>::quiet_NaN()},
        length_{std::numeric_limits<double>::quiet_NaN()},
        width_{std::numeric_limits<double>::quiet_NaN()},
        height_{std::numeric_limits<double>::quiet_NaN()},
        min_turn_radius_{std::numeric_limits<double>::quiet_NaN()},
        max_acceleration_{std::numeric_limits<double>::quiet_NaN()},
        max_deceleration_{std::numeric_limits<double>::quiet_NaN()},
        max_steer_angle_{std::numeric_limits<double>::quiet_NaN()},
        max_steer_angle_rate_{std::numeric_limits<double>::quiet_NaN()},
        min_steer_angle_rate_{std::numeric_limits<double>::quiet_NaN()},
        steer_ratio_{std::numeric_limits<double>::quiet_NaN()},
        wheel_base_{std::numeric_limits<double>::quiet_NaN()},
        wheel_rolling_radius_{std::numeric_limits<double>::quiet_NaN()},
        brake_deadzone_{std::numeric_limits<double>::quiet_NaN()},
        throttle_deadzone_{std::numeric_limits<double>::quiet_NaN()} {}

inline void VehicleParam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vehicle_id_),
           0,
           offsetof(Impl_, brand_) -
               offsetof(Impl_, vehicle_id_) +
               sizeof(Impl_::brand_));
}
VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:control.common.VehicleParam)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VehicleParam::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.vehicle_id_;
  delete _impl_.steering_latency_param_;
  delete _impl_.throttle_latency_param_;
  delete _impl_.brake_latency_param_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    VehicleParam::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &VehicleParam::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<VehicleParam>(),
            ::google::protobuf::Message::GetNewImpl<VehicleParam>(),
            ::google::protobuf::Message::GetClearImpl<VehicleParam>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<VehicleParam>(),
                ::google::protobuf::Message::GetSerializeImpl<VehicleParam>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_._cached_size_),
            false,
        },
        &VehicleParam::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* VehicleParam::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 28, 5, 0, 2> VehicleParam::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_._has_bits_),
    0, // no _extensions_
    28, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4026531840,  // skipmap
    offsetof(decltype(_table_), field_entries),
    28,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VehicleParam_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::VehicleParam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.VehicleBrand brand = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 8, 9, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.brand_)}},
    // optional .control.common.VehicleID vehicle_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.vehicle_id_)}},
    // optional double front_edge_to_center = 3 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {25, 10, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.front_edge_to_center_)}},
    // optional double back_edge_to_center = 4 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {33, 11, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.back_edge_to_center_)}},
    // optional double left_edge_to_center = 5 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {41, 12, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.left_edge_to_center_)}},
    // optional double right_edge_to_center = 6 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {49, 13, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.right_edge_to_center_)}},
    // optional double length = 7 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {57, 14, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.length_)}},
    // optional double width = 8 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {65, 15, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.width_)}},
    // optional double height = 9 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {73, 16, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.height_)}},
    // optional double min_turn_radius = 10 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {81, 17, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.min_turn_radius_)}},
    // optional double max_acceleration = 11 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {89, 18, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_acceleration_)}},
    // optional double max_deceleration = 12 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {97, 19, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_deceleration_)}},
    // optional double max_steer_angle = 13 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {105, 20, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_steer_angle_)}},
    // optional double max_steer_angle_rate = 14 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {113, 21, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_steer_angle_rate_)}},
    // optional double min_steer_angle_rate = 15 [default = nan];
    {::_pbi::TcParser::FastF64S1,
     {121, 22, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.min_steer_angle_rate_)}},
    // optional double steer_ratio = 16 [default = nan];
    {::_pbi::TcParser::FastF64S2,
     {385, 23, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.steer_ratio_)}},
    // optional double wheel_base = 17 [default = nan];
    {::_pbi::TcParser::FastF64S2,
     {393, 24, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.wheel_base_)}},
    // optional double wheel_rolling_radius = 18 [default = nan];
    {::_pbi::TcParser::FastF64S2,
     {401, 25, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.wheel_rolling_radius_)}},
    // optional float max_abs_speed_when_stopped = 19 [default = nan];
    {::_pbi::TcParser::FastF32S2,
     {413, 9, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_abs_speed_when_stopped_)}},
    // optional double brake_deadzone = 20 [default = nan];
    {::_pbi::TcParser::FastF64S2,
     {417, 26, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.brake_deadzone_)}},
    // optional double throttle_deadzone = 21 [default = nan];
    {::_pbi::TcParser::FastF64S2,
     {425, 27, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.throttle_deadzone_)}},
    // optional .control.common.LatencyParam steering_latency_param = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 1, 1, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.steering_latency_param_)}},
    // optional .control.common.LatencyParam throttle_latency_param = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 2, 2, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.throttle_latency_param_)}},
    // optional .control.common.LatencyParam brake_latency_param = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 3, 3, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.brake_latency_param_)}},
    // optional double cubic_coeff = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 4, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.cubic_coeff_)}},
    // optional double quadratic_coeff = 26;
    {::_pbi::TcParser::FastF64S2,
     {465, 5, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.quadratic_coeff_)}},
    // optional double linear_coeff = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 6, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.linear_coeff_)}},
    // optional double offset = 28;
    {::_pbi::TcParser::FastF64S2,
     {481, 7, 0, PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.offset_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .control.common.VehicleBrand brand = 1;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.brand_), _Internal::kHasBitsOffset + 8, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .control.common.VehicleID vehicle_id = 2;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.vehicle_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double front_edge_to_center = 3 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.front_edge_to_center_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double back_edge_to_center = 4 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.back_edge_to_center_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double left_edge_to_center = 5 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.left_edge_to_center_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double right_edge_to_center = 6 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.right_edge_to_center_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double length = 7 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.length_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double width = 8 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.width_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double height = 9 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.height_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double min_turn_radius = 10 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.min_turn_radius_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double max_acceleration = 11 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_acceleration_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double max_deceleration = 12 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_deceleration_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double max_steer_angle = 13 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_steer_angle_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double max_steer_angle_rate = 14 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_steer_angle_rate_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double min_steer_angle_rate = 15 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.min_steer_angle_rate_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double steer_ratio = 16 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.steer_ratio_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double wheel_base = 17 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.wheel_base_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double wheel_rolling_radius = 18 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.wheel_rolling_radius_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional float max_abs_speed_when_stopped = 19 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.max_abs_speed_when_stopped_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional double brake_deadzone = 20 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.brake_deadzone_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double throttle_deadzone = 21 [default = nan];
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.throttle_deadzone_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .control.common.LatencyParam steering_latency_param = 22;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.steering_latency_param_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.LatencyParam throttle_latency_param = 23;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.throttle_latency_param_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.LatencyParam brake_latency_param = 24;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.brake_latency_param_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double cubic_coeff = 25;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.cubic_coeff_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double quadratic_coeff = 26;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.quadratic_coeff_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double linear_coeff = 27;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.linear_coeff_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double offset = 28;
    {PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.offset_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::VehicleID>()},
    {::_pbi::TcParser::GetTable<::control::common::LatencyParam>()},
    {::_pbi::TcParser::GetTable<::control::common::LatencyParam>()},
    {::_pbi::TcParser::GetTable<::control::common::LatencyParam>()},
    {0, 10},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.VehicleParam)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.vehicle_id_ != nullptr);
      _impl_.vehicle_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.steering_latency_param_ != nullptr);
      _impl_.steering_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.throttle_latency_param_ != nullptr);
      _impl_.throttle_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.brake_latency_param_ != nullptr);
      _impl_.brake_latency_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.cubic_coeff_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.cubic_coeff_)) + sizeof(_impl_.offset_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.brand_ = 0;
    _impl_.max_abs_speed_when_stopped_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.front_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.back_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.left_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.right_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.length_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.width_ = std::numeric_limits<double>::quiet_NaN();
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.height_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.min_turn_radius_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.max_acceleration_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.max_deceleration_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.max_steer_angle_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.max_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.steer_ratio_ = std::numeric_limits<double>::quiet_NaN();
  }
  if (cached_has_bits & 0x0f000000u) {
    _impl_.wheel_base_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VehicleParam::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.VehicleParam)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_brand(), target);
  }

  // optional .control.common.VehicleID vehicle_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.vehicle_id_, _impl_.vehicle_id_->GetCachedSize(), target, stream);
  }

  // optional double front_edge_to_center = 3 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 4 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 5 [default = nan];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 6 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_right_edge_to_center(), target);
  }

  // optional double length = 7 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_length(), target);
  }

  // optional double width = 8 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_width(), target);
  }

  // optional double height = 9 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_height(), target);
  }

  // optional double min_turn_radius = 10 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_min_turn_radius(), target);
  }

  // optional double max_acceleration = 11 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_max_acceleration(), target);
  }

  // optional double max_deceleration = 12 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_max_deceleration(), target);
  }

  // optional double max_steer_angle = 13 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 14 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this->_internal_min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 16 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_steer_ratio(), target);
  }

  // optional double wheel_base = 17 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this->_internal_wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        18, this->_internal_wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        19, this->_internal_max_abs_speed_when_stopped(), target);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this->_internal_brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        21, this->_internal_throttle_deadzone(), target);
  }

  // optional .control.common.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        22, *_impl_.steering_latency_param_, _impl_.steering_latency_param_->GetCachedSize(), target, stream);
  }

  // optional .control.common.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        23, *_impl_.throttle_latency_param_, _impl_.throttle_latency_param_->GetCachedSize(), target, stream);
  }

  // optional .control.common.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, *_impl_.brake_latency_param_, _impl_.brake_latency_param_->GetCachedSize(), target, stream);
  }

  // optional double cubic_coeff = 25;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        25, this->_internal_cubic_coeff(), target);
  }

  // optional double quadratic_coeff = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        26, this->_internal_quadratic_coeff(), target);
  }

  // optional double linear_coeff = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_linear_coeff(), target);
  }

  // optional double offset = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        28, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.VehicleParam)
  return target;
}

::size_t VehicleParam::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.VehicleParam)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.VehicleID vehicle_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vehicle_id_);
    }
    // optional .control.common.LatencyParam steering_latency_param = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.steering_latency_param_);
    }
    // optional .control.common.LatencyParam throttle_latency_param = 23;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.throttle_latency_param_);
    }
    // optional .control.common.LatencyParam brake_latency_param = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.brake_latency_param_);
    }
    // optional double cubic_coeff = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 10;
    }
    // optional double quadratic_coeff = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 10;
    }
    // optional double linear_coeff = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 10;
    }
    // optional double offset = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.common.VehicleBrand brand = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_brand());
    }
    // optional float max_abs_speed_when_stopped = 19 [default = nan];
    if (cached_has_bits & 0x00000200u) {
      total_size += 6;
    }
    // optional double front_edge_to_center = 3 [default = nan];
    if (cached_has_bits & 0x00000400u) {
      total_size += 9;
    }
    // optional double back_edge_to_center = 4 [default = nan];
    if (cached_has_bits & 0x00000800u) {
      total_size += 9;
    }
    // optional double left_edge_to_center = 5 [default = nan];
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }
    // optional double right_edge_to_center = 6 [default = nan];
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }
    // optional double length = 7 [default = nan];
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }
    // optional double width = 8 [default = nan];
    if (cached_has_bits & 0x00008000u) {
      total_size += 9;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double height = 9 [default = nan];
    if (cached_has_bits & 0x00010000u) {
      total_size += 9;
    }
    // optional double min_turn_radius = 10 [default = nan];
    if (cached_has_bits & 0x00020000u) {
      total_size += 9;
    }
    // optional double max_acceleration = 11 [default = nan];
    if (cached_has_bits & 0x00040000u) {
      total_size += 9;
    }
    // optional double max_deceleration = 12 [default = nan];
    if (cached_has_bits & 0x00080000u) {
      total_size += 9;
    }
    // optional double max_steer_angle = 13 [default = nan];
    if (cached_has_bits & 0x00100000u) {
      total_size += 9;
    }
    // optional double max_steer_angle_rate = 14 [default = nan];
    if (cached_has_bits & 0x00200000u) {
      total_size += 9;
    }
    // optional double min_steer_angle_rate = 15 [default = nan];
    if (cached_has_bits & 0x00400000u) {
      total_size += 9;
    }
    // optional double steer_ratio = 16 [default = nan];
    if (cached_has_bits & 0x00800000u) {
      total_size += 10;
    }
  }
  if (cached_has_bits & 0x0f000000u) {
    // optional double wheel_base = 17 [default = nan];
    if (cached_has_bits & 0x01000000u) {
      total_size += 10;
    }
    // optional double wheel_rolling_radius = 18 [default = nan];
    if (cached_has_bits & 0x02000000u) {
      total_size += 10;
    }
    // optional double brake_deadzone = 20 [default = nan];
    if (cached_has_bits & 0x04000000u) {
      total_size += 10;
    }
    // optional double throttle_deadzone = 21 [default = nan];
    if (cached_has_bits & 0x08000000u) {
      total_size += 10;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void VehicleParam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VehicleParam*>(&to_msg);
  auto& from = static_cast<const VehicleParam&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.VehicleParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.vehicle_id_ != nullptr);
      if (_this->_impl_.vehicle_id_ == nullptr) {
        _this->_impl_.vehicle_id_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::VehicleID>(arena, *from._impl_.vehicle_id_);
      } else {
        _this->_impl_.vehicle_id_->MergeFrom(*from._impl_.vehicle_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.steering_latency_param_ != nullptr);
      if (_this->_impl_.steering_latency_param_ == nullptr) {
        _this->_impl_.steering_latency_param_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::LatencyParam>(arena, *from._impl_.steering_latency_param_);
      } else {
        _this->_impl_.steering_latency_param_->MergeFrom(*from._impl_.steering_latency_param_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.throttle_latency_param_ != nullptr);
      if (_this->_impl_.throttle_latency_param_ == nullptr) {
        _this->_impl_.throttle_latency_param_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::LatencyParam>(arena, *from._impl_.throttle_latency_param_);
      } else {
        _this->_impl_.throttle_latency_param_->MergeFrom(*from._impl_.throttle_latency_param_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.brake_latency_param_ != nullptr);
      if (_this->_impl_.brake_latency_param_ == nullptr) {
        _this->_impl_.brake_latency_param_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::LatencyParam>(arena, *from._impl_.brake_latency_param_);
      } else {
        _this->_impl_.brake_latency_param_->MergeFrom(*from._impl_.brake_latency_param_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cubic_coeff_ = from._impl_.cubic_coeff_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.quadratic_coeff_ = from._impl_.quadratic_coeff_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.linear_coeff_ = from._impl_.linear_coeff_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.brand_ = from._impl_.brand_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_abs_speed_when_stopped_ = from._impl_.max_abs_speed_when_stopped_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.front_edge_to_center_ = from._impl_.front_edge_to_center_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.back_edge_to_center_ = from._impl_.back_edge_to_center_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.left_edge_to_center_ = from._impl_.left_edge_to_center_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.right_edge_to_center_ = from._impl_.right_edge_to_center_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.min_turn_radius_ = from._impl_.min_turn_radius_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.max_acceleration_ = from._impl_.max_acceleration_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.max_deceleration_ = from._impl_.max_deceleration_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.max_steer_angle_ = from._impl_.max_steer_angle_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.max_steer_angle_rate_ = from._impl_.max_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.min_steer_angle_rate_ = from._impl_.min_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.steer_ratio_ = from._impl_.steer_ratio_;
    }
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.wheel_base_ = from._impl_.wheel_base_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.wheel_rolling_radius_ = from._impl_.wheel_rolling_radius_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.brake_deadzone_ = from._impl_.brake_deadzone_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.throttle_deadzone_ = from._impl_.throttle_deadzone_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VehicleParam::InternalSwap(VehicleParam* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.throttle_deadzone_)
      + sizeof(VehicleParam::_impl_.throttle_deadzone_)
      - PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.vehicle_id_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_id_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_id_));
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VehicleConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VehicleConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_._has_bits_);
};

void VehicleConfig::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VehicleConfig::VehicleConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.VehicleConfig)
}
inline PROTOBUF_NDEBUG_INLINE VehicleConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::control::common::VehicleConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VehicleConfig::VehicleConfig(
    ::google::protobuf::Arena* arena,
    const VehicleConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VehicleConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.vehicle_param_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::control::common::VehicleParam>(
                              arena, *from._impl_.vehicle_param_)
                        : nullptr;
  _impl_.extrinsics_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::control::common::Extrinsics>(
                              arena, *from._impl_.extrinsics_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:control.common.VehicleConfig)
}
inline PROTOBUF_NDEBUG_INLINE VehicleConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VehicleConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, extrinsics_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::extrinsics_));
}
VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:control.common.VehicleConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VehicleConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.vehicle_param_;
  delete _impl_.extrinsics_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    VehicleConfig::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &VehicleConfig::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<VehicleConfig>(),
            ::google::protobuf::Message::GetNewImpl<VehicleConfig>(),
            ::google::protobuf::Message::GetClearImpl<VehicleConfig>(),
                ::google::protobuf::Message::GetByteSizeLongImpl<VehicleConfig>(),
                ::google::protobuf::Message::GetSerializeImpl<VehicleConfig>(),
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_._cached_size_),
            false,
        },
        &VehicleConfig::kDescriptorMethods,
        &descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* VehicleConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> VehicleConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VehicleConfig_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::control::common::VehicleConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .control.common.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.header_)}},
    // optional .control.common.VehicleParam vehicle_param = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.vehicle_param_)}},
    // optional .control.common.Extrinsics extrinsics = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.extrinsics_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .control.common.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.VehicleParam vehicle_param = 2;
    {PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.vehicle_param_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .control.common.Extrinsics extrinsics = 3;
    {PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.extrinsics_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::control::common::Header>()},
    {::_pbi::TcParser::GetTable<::control::common::VehicleParam>()},
    {::_pbi::TcParser::GetTable<::control::common::Extrinsics>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.VehicleConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.vehicle_param_ != nullptr);
      _impl_.vehicle_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.extrinsics_ != nullptr);
      _impl_.extrinsics_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VehicleConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.VehicleConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.header_, _impl_.header_->GetCachedSize(), target, stream);
  }

  // optional .control.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.vehicle_param_, _impl_.vehicle_param_->GetCachedSize(), target, stream);
  }

  // optional .control.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.extrinsics_, _impl_.extrinsics_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.VehicleConfig)
  return target;
}

::size_t VehicleConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:control.common.VehicleConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }
    // optional .control.common.VehicleParam vehicle_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vehicle_param_);
    }
    // optional .control.common.Extrinsics extrinsics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.extrinsics_);
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

void VehicleConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VehicleConfig*>(&to_msg);
  auto& from = static_cast<const VehicleConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:control.common.VehicleConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.vehicle_param_ != nullptr);
      if (_this->_impl_.vehicle_param_ == nullptr) {
        _this->_impl_.vehicle_param_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::VehicleParam>(arena, *from._impl_.vehicle_param_);
      } else {
        _this->_impl_.vehicle_param_->MergeFrom(*from._impl_.vehicle_param_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.extrinsics_ != nullptr);
      if (_this->_impl_.extrinsics_ == nullptr) {
        _this->_impl_.extrinsics_ =
            ::google::protobuf::Message::CopyConstruct<::control::common::Extrinsics>(arena, *from._impl_.extrinsics_);
      } else {
        _this->_impl_.extrinsics_->MergeFrom(*from._impl_.extrinsics_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VehicleConfig::InternalSwap(VehicleConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.extrinsics_)
      + sizeof(VehicleConfig::_impl_.extrinsics_)
      - PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

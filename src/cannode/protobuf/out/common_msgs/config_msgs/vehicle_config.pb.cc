// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msgs/config_msgs/vehicle_config.proto

#include "common_msgs/config_msgs/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleID_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
namespace control {
namespace common {
class TransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transform> _instance;
} _Transform_default_instance_;
class ExtrinsicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extrinsics> _instance;
} _Extrinsics_default_instance_;
class LatencyParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatencyParam> _instance;
} _LatencyParam_default_instance_;
class VehicleParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleParam> _instance;
} _VehicleParam_default_instance_;
class VehicleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleConfig> _instance;
} _VehicleConfig_default_instance_;
}  // namespace common
}  // namespace control
static void InitDefaultsscc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::common::_Extrinsics_default_instance_;
    new (ptr) ::control::common::Extrinsics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::common::Extrinsics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_LatencyParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::common::_LatencyParam_default_instance_;
    new (ptr) ::control::common::LatencyParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::common::LatencyParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatencyParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::common::_Transform_default_instance_;
    new (ptr) ::control::common::Transform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::common::Transform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_Point3D_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_Quaternion_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_VehicleConfig_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::common::_VehicleConfig_default_instance_;
    new (ptr) ::control::common::VehicleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::common::VehicleConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VehicleConfig_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VehicleConfig_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
      &scc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::common::_VehicleParam_default_instance_;
    new (ptr) ::control::common::VehicleParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::common::VehicleParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_VehicleID_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto.base,
      &scc_info_LatencyParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::common::Transform, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::common::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::common::Transform, source_frame_),
  PROTOBUF_FIELD_OFFSET(::control::common::Transform, target_frame_),
  PROTOBUF_FIELD_OFFSET(::control::common::Transform, translation_),
  PROTOBUF_FIELD_OFFSET(::control::common::Transform, rotation_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::control::common::Extrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::common::Extrinsics, tansforms_),
  PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, dead_time_),
  PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, rise_time_),
  PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, peak_time_),
  PROTOBUF_FIELD_OFFSET(::control::common::LatencyParam, settling_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, brand_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, front_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, back_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, left_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, right_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, length_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, width_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, height_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, min_turn_radius_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, max_steer_angle_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, max_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, min_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, steer_ratio_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, wheel_base_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, wheel_rolling_radius_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, max_abs_speed_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, brake_deadzone_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, throttle_deadzone_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, steering_latency_param_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, throttle_latency_param_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, brake_latency_param_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, cubic_coeff_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, quadratic_coeff_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, linear_coeff_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleParam, offset_),
  8,
  0,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  9,
  26,
  27,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, header_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, vehicle_param_),
  PROTOBUF_FIELD_OFFSET(::control::common::VehicleConfig, extrinsics_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::control::common::Transform)},
  { 13, -1, sizeof(::control::common::Extrinsics)},
  { 19, 28, sizeof(::control::common::LatencyParam)},
  { 32, 65, sizeof(::control::common::VehicleParam)},
  { 93, 101, sizeof(::control::common::VehicleConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::common::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::common::_Extrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::common::_LatencyParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::common::_VehicleParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::common::_VehicleConfig_default_instance_),
};

const char descriptor_table_protodef_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,common_msgs/config_msgs/vehicle_config"
  ".proto\022\016control.common\032#common_msgs/basi"
  "c_msgs/header.proto\032%common_msgs/basic_m"
  "sgs/geometry.proto\032\'common_msgs/basic_ms"
  "gs/vehicle_id.proto\"\223\001\n\tTransform\022\024\n\014sou"
  "rce_frame\030\001 \001(\014\022\024\n\014target_frame\030\002 \001(\014\022,\n"
  "\013translation\030\003 \001(\0132\027.control.common.Poin"
  "t3D\022,\n\010rotation\030\004 \001(\0132\032.control.common.Q"
  "uaternion\":\n\nExtrinsics\022,\n\ttansforms\030\001 \003"
  "(\0132\031.control.common.Transform\"^\n\014Latency"
  "Param\022\021\n\tdead_time\030\001 \001(\001\022\021\n\trise_time\030\002 "
  "\001(\001\022\021\n\tpeak_time\030\003 \001(\001\022\025\n\rsettling_time\030"
  "\004 \001(\001\"\271\007\n\014VehicleParam\022+\n\005brand\030\001 \001(\0162\034."
  "control.common.VehicleBrand\022-\n\nvehicle_i"
  "d\030\002 \001(\0132\031.control.common.VehicleID\022!\n\024fr"
  "ont_edge_to_center\030\003 \001(\001:\003nan\022 \n\023back_ed"
  "ge_to_center\030\004 \001(\001:\003nan\022 \n\023left_edge_to_"
  "center\030\005 \001(\001:\003nan\022!\n\024right_edge_to_cente"
  "r\030\006 \001(\001:\003nan\022\023\n\006length\030\007 \001(\001:\003nan\022\022\n\005wid"
  "th\030\010 \001(\001:\003nan\022\023\n\006height\030\t \001(\001:\003nan\022\034\n\017mi"
  "n_turn_radius\030\n \001(\001:\003nan\022\035\n\020max_accelera"
  "tion\030\013 \001(\001:\003nan\022\035\n\020max_deceleration\030\014 \001("
  "\001:\003nan\022\034\n\017max_steer_angle\030\r \001(\001:\003nan\022!\n\024"
  "max_steer_angle_rate\030\016 \001(\001:\003nan\022!\n\024min_s"
  "teer_angle_rate\030\017 \001(\001:\003nan\022\030\n\013steer_rati"
  "o\030\020 \001(\001:\003nan\022\027\n\nwheel_base\030\021 \001(\001:\003nan\022!\n"
  "\024wheel_rolling_radius\030\022 \001(\001:\003nan\022\'\n\032max_"
  "abs_speed_when_stopped\030\023 \001(\002:\003nan\022\033\n\016bra"
  "ke_deadzone\030\024 \001(\001:\003nan\022\036\n\021throttle_deadz"
  "one\030\025 \001(\001:\003nan\022<\n\026steering_latency_param"
  "\030\026 \001(\0132\034.control.common.LatencyParam\022<\n\026"
  "throttle_latency_param\030\027 \001(\0132\034.control.c"
  "ommon.LatencyParam\0229\n\023brake_latency_para"
  "m\030\030 \001(\0132\034.control.common.LatencyParam\022\023\n"
  "\013cubic_coeff\030\031 \001(\001\022\027\n\017quadratic_coeff\030\032 "
  "\001(\001\022\024\n\014linear_coeff\030\033 \001(\001\022\016\n\006offset\030\034 \001("
  "\001\"\234\001\n\rVehicleConfig\022&\n\006header\030\001 \001(\0132\026.co"
  "ntrol.common.Header\0223\n\rvehicle_param\030\002 \001"
  "(\0132\034.control.common.VehicleParam\022.\n\nextr"
  "insics\030\003 \001(\0132\032.control.common.Extrinsics"
  "*~\n\014VehicleBrand\022\017\n\013LINCOLN_MKZ\020\000\022\007\n\003GEM"
  "\020\001\022\t\n\005LEXUS\020\002\022\013\n\007TRANSIT\020\003\022\007\n\003GE3\020\004\022\007\n\003W"
  "EY\020\005\022\014\n\010ZHONGYUN\020\006\022\006\n\002CH\020\007\022\010\n\004DKIT\020\010\022\n\n\006"
  "NEOLIX\020\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_deps[3] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_sccs[5] = {
  &scc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_LatencyParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_VehicleConfig_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto, "common_msgs/config_msgs/vehicle_config.proto", 1728,
  &descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_once, descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_sccs, descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto::offsets,
  file_level_metadata_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto, 5, file_level_enum_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto, file_level_service_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto)), true);
namespace control {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleBrand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[0];
}
bool VehicleBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Transform::InitAsDefaultInstance() {
  ::control::common::_Transform_default_instance_._instance.get_mutable()->translation_ = const_cast< ::control::common::Point3D*>(
      ::control::common::Point3D::internal_default_instance());
  ::control::common::_Transform_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::control::common::Quaternion*>(
      ::control::common::Quaternion::internal_default_instance());
}
class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._has_bits_);
  static void set_has_source_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::Point3D& translation(const Transform* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::common::Quaternion& rotation(const Transform* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::control::common::Point3D&
Transform::_Internal::translation(const Transform* msg) {
  return *msg->translation_;
}
const ::control::common::Quaternion&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->rotation_;
}
void Transform::clear_translation() {
  if (translation_ != nullptr) translation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_frame()) {
    source_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_frame(),
      GetArena());
  }
  target_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_frame()) {
    target_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_frame(),
      GetArena());
  }
  if (from._internal_has_translation()) {
    translation_ = new ::control::common::Point3D(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::control::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.common.Transform)
}

void Transform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  source_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:control.common.Transform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transform& Transform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transform_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(translation_ != nullptr);
      translation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes source_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes target_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Point3D translation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Quaternion rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source_frame(), target);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_frame(), target);
  }

  // optional .control.common.Point3D translation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::translation(this), target, stream);
  }

  // optional .control.common.Quaternion rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.common.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes source_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_frame());
    }

    // optional bytes target_frame = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_target_frame());
    }

    // optional .control.common.Point3D translation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translation_);
    }

    // optional .control.common.Quaternion rotation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.common.Transform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.common.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_frame(from._internal_source_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target_frame(from._internal_target_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_translation()->::control::common::Point3D::MergeFrom(from._internal_translation());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rotation()->::control::common::Quaternion::MergeFrom(from._internal_rotation());
    }
  }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_frame_.Swap(&other->source_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_frame_.Swap(&other->target_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, rotation_)
      + sizeof(Transform::rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extrinsics::InitAsDefaultInstance() {
}
class Extrinsics::_Internal {
 public:
};

Extrinsics::Extrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tansforms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.Extrinsics)
}
Extrinsics::Extrinsics(const Extrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tansforms_(from.tansforms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:control.common.Extrinsics)
}

void Extrinsics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:control.common.Extrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extrinsics::ArenaDtor(void* object) {
  Extrinsics* _this = reinterpret_cast< Extrinsics* >(object);
  (void)_this;
}
void Extrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extrinsics& Extrinsics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extrinsics_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.Extrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tansforms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .control.common.Transform tansforms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tansforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.Extrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .control.common.Transform tansforms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tansforms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tansforms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.Extrinsics)
  return target;
}

size_t Extrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.common.Extrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.common.Transform tansforms = 1;
  total_size += 1UL * this->_internal_tansforms_size();
  for (const auto& msg : this->tansforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const Extrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.common.Extrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.common.Extrinsics)
    MergeFrom(*source);
  }
}

void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tansforms_.MergeFrom(from.tansforms_);
}

void Extrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {
  return true;
}

void Extrinsics::InternalSwap(Extrinsics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tansforms_.InternalSwap(&other->tansforms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extrinsics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatencyParam::InitAsDefaultInstance() {
}
class LatencyParam::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyParam>()._has_bits_);
  static void set_has_dead_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rise_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_peak_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_settling_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LatencyParam::LatencyParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.LatencyParam)
}
LatencyParam::LatencyParam(const LatencyParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dead_time_, &from.dead_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
    reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  // @@protoc_insertion_point(copy_constructor:control.common.LatencyParam)
}

void LatencyParam::SharedCtor() {
  ::memset(&dead_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settling_time_) -
      reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
}

LatencyParam::~LatencyParam() {
  // @@protoc_insertion_point(destructor:control.common.LatencyParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatencyParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LatencyParam::ArenaDtor(void* object) {
  LatencyParam* _this = reinterpret_cast< LatencyParam* >(object);
  (void)_this;
}
void LatencyParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyParam& LatencyParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatencyParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LatencyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.LatencyParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dead_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&settling_time_) -
        reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double dead_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_dead_time(&has_bits);
          dead_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rise_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_rise_time(&has_bits);
          rise_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double peak_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_peak_time(&has_bits);
          peak_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double settling_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_settling_time(&has_bits);
          settling_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatencyParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.LatencyParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dead_time(), target);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rise_time(), target);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_peak_time(), target);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_settling_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.LatencyParam)
  return target;
}

size_t LatencyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.common.LatencyParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double dead_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rise_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double peak_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double settling_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.common.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatencyParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.common.LatencyParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.common.LatencyParam)
    MergeFrom(*source);
  }
}

void LatencyParam::MergeFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.common.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dead_time_ = from.dead_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      rise_time_ = from.rise_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      peak_time_ = from.peak_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      settling_time_ = from.settling_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyParam::CopyFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyParam::IsInitialized() const {
  return true;
}

void LatencyParam::InternalSwap(LatencyParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyParam, settling_time_)
      + sizeof(LatencyParam::settling_time_)
      - PROTOBUF_FIELD_OFFSET(LatencyParam, dead_time_)>(
          reinterpret_cast<char*>(&dead_time_),
          reinterpret_cast<char*>(&other->dead_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleParam::InitAsDefaultInstance() {
  ::control::common::_VehicleParam_default_instance_._instance.get_mutable()->vehicle_id_ = const_cast< ::control::common::VehicleID*>(
      ::control::common::VehicleID::internal_default_instance());
  ::control::common::_VehicleParam_default_instance_._instance.get_mutable()->steering_latency_param_ = const_cast< ::control::common::LatencyParam*>(
      ::control::common::LatencyParam::internal_default_instance());
  ::control::common::_VehicleParam_default_instance_._instance.get_mutable()->throttle_latency_param_ = const_cast< ::control::common::LatencyParam*>(
      ::control::common::LatencyParam::internal_default_instance());
  ::control::common::_VehicleParam_default_instance_._instance.get_mutable()->brake_latency_param_ = const_cast< ::control::common::LatencyParam*>(
      ::control::common::LatencyParam::internal_default_instance());
}
class VehicleParam::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleParam>()._has_bits_);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::control::common::VehicleID& vehicle_id(const VehicleParam* msg);
  static void set_has_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_back_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_left_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_right_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_min_turn_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_max_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_steer_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_min_steer_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_steer_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_wheel_base(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_wheel_rolling_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_max_abs_speed_when_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_brake_deadzone(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_throttle_deadzone(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::control::common::LatencyParam& steering_latency_param(const VehicleParam* msg);
  static void set_has_steering_latency_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::LatencyParam& throttle_latency_param(const VehicleParam* msg);
  static void set_has_throttle_latency_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::common::LatencyParam& brake_latency_param(const VehicleParam* msg);
  static void set_has_brake_latency_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cubic_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quadratic_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_linear_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::control::common::VehicleID&
VehicleParam::_Internal::vehicle_id(const VehicleParam* msg) {
  return *msg->vehicle_id_;
}
const ::control::common::LatencyParam&
VehicleParam::_Internal::steering_latency_param(const VehicleParam* msg) {
  return *msg->steering_latency_param_;
}
const ::control::common::LatencyParam&
VehicleParam::_Internal::throttle_latency_param(const VehicleParam* msg) {
  return *msg->throttle_latency_param_;
}
const ::control::common::LatencyParam&
VehicleParam::_Internal::brake_latency_param(const VehicleParam* msg) {
  return *msg->brake_latency_param_;
}
void VehicleParam::clear_vehicle_id() {
  if (vehicle_id_ != nullptr) vehicle_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VehicleParam::VehicleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_id()) {
    vehicle_id_ = new ::control::common::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = nullptr;
  }
  if (from._internal_has_steering_latency_param()) {
    steering_latency_param_ = new ::control::common::LatencyParam(*from.steering_latency_param_);
  } else {
    steering_latency_param_ = nullptr;
  }
  if (from._internal_has_throttle_latency_param()) {
    throttle_latency_param_ = new ::control::common::LatencyParam(*from.throttle_latency_param_);
  } else {
    throttle_latency_param_ = nullptr;
  }
  if (from._internal_has_brake_latency_param()) {
    brake_latency_param_ = new ::control::common::LatencyParam(*from.brake_latency_param_);
  } else {
    brake_latency_param_ = nullptr;
  }
  ::memcpy(&cubic_coeff_, &from.cubic_coeff_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttle_deadzone_) -
    reinterpret_cast<char*>(&cubic_coeff_)) + sizeof(throttle_deadzone_));
  // @@protoc_insertion_point(copy_constructor:control.common.VehicleParam)
}

void VehicleParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brand_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(brand_));
  max_abs_speed_when_stopped_ = std::numeric_limits<float>::quiet_NaN();
  front_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  back_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  left_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  right_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  length_ = std::numeric_limits<double>::quiet_NaN();
  width_ = std::numeric_limits<double>::quiet_NaN();
  height_ = std::numeric_limits<double>::quiet_NaN();
  min_turn_radius_ = std::numeric_limits<double>::quiet_NaN();
  max_acceleration_ = std::numeric_limits<double>::quiet_NaN();
  max_deceleration_ = std::numeric_limits<double>::quiet_NaN();
  max_steer_angle_ = std::numeric_limits<double>::quiet_NaN();
  max_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  steer_ratio_ = std::numeric_limits<double>::quiet_NaN();
  wheel_base_ = std::numeric_limits<double>::quiet_NaN();
  wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
  brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:control.common.VehicleParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehicle_id_;
  if (this != internal_default_instance()) delete steering_latency_param_;
  if (this != internal_default_instance()) delete throttle_latency_param_;
  if (this != internal_default_instance()) delete brake_latency_param_;
}

void VehicleParam::ArenaDtor(void* object) {
  VehicleParam* _this = reinterpret_cast< VehicleParam* >(object);
  (void)_this;
}
void VehicleParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleParam& VehicleParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleParam_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vehicle_id_ != nullptr);
      vehicle_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(steering_latency_param_ != nullptr);
      steering_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(throttle_latency_param_ != nullptr);
      throttle_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(brake_latency_param_ != nullptr);
      brake_latency_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&cubic_coeff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&cubic_coeff_)) + sizeof(offset_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    brand_ = 0;
    max_abs_speed_when_stopped_ = std::numeric_limits<float>::quiet_NaN();
    front_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    back_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    left_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    right_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
    length_ = std::numeric_limits<double>::quiet_NaN();
    width_ = std::numeric_limits<double>::quiet_NaN();
  }
  if (cached_has_bits & 0x00ff0000u) {
    height_ = std::numeric_limits<double>::quiet_NaN();
    min_turn_radius_ = std::numeric_limits<double>::quiet_NaN();
    max_acceleration_ = std::numeric_limits<double>::quiet_NaN();
    max_deceleration_ = std::numeric_limits<double>::quiet_NaN();
    max_steer_angle_ = std::numeric_limits<double>::quiet_NaN();
    max_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
    min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
    steer_ratio_ = std::numeric_limits<double>::quiet_NaN();
  }
  if (cached_has_bits & 0x0f000000u) {
    wheel_base_ = std::numeric_limits<double>::quiet_NaN();
    wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
    brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
    throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.VehicleBrand brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::common::VehicleBrand_IsValid(val))) {
            _internal_set_brand(static_cast<::control::common::VehicleBrand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.common.VehicleID vehicle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double front_edge_to_center = 3 [default = nan];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_front_edge_to_center(&has_bits);
          front_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double back_edge_to_center = 4 [default = nan];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_back_edge_to_center(&has_bits);
          back_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double left_edge_to_center = 5 [default = nan];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_left_edge_to_center(&has_bits);
          left_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double right_edge_to_center = 6 [default = nan];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_right_edge_to_center(&has_bits);
          right_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 7 [default = nan];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 8 [default = nan];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 9 [default = nan];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_turn_radius = 10 [default = nan];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_min_turn_radius(&has_bits);
          min_turn_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acceleration = 11 [default = nan];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_max_acceleration(&has_bits);
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_deceleration = 12 [default = nan];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_max_deceleration(&has_bits);
          max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_steer_angle = 13 [default = nan];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_max_steer_angle(&has_bits);
          max_steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_steer_angle_rate = 14 [default = nan];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_max_steer_angle_rate(&has_bits);
          max_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_steer_angle_rate = 15 [default = nan];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_min_steer_angle_rate(&has_bits);
          min_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_ratio = 16 [default = nan];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_steer_ratio(&has_bits);
          steer_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wheel_base = 17 [default = nan];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_wheel_base(&has_bits);
          wheel_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wheel_rolling_radius = 18 [default = nan];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_wheel_rolling_radius(&has_bits);
          wheel_rolling_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float max_abs_speed_when_stopped = 19 [default = nan];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_max_abs_speed_when_stopped(&has_bits);
          max_abs_speed_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double brake_deadzone = 20 [default = nan];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_brake_deadzone(&has_bits);
          brake_deadzone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_deadzone = 21 [default = nan];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_throttle_deadzone(&has_bits);
          throttle_deadzone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.LatencyParam steering_latency_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_latency_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.LatencyParam throttle_latency_param = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_latency_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.LatencyParam brake_latency_param = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_latency_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cubic_coeff = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_cubic_coeff(&has_bits);
          cubic_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double quadratic_coeff = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_quadratic_coeff(&has_bits);
          quadratic_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double linear_coeff = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_linear_coeff(&has_bits);
          linear_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double offset = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brand(), target);
  }

  // optional .control.common.VehicleID vehicle_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_id(this), target, stream);
  }

  // optional double front_edge_to_center = 3 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 4 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 5 [default = nan];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 6 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_right_edge_to_center(), target);
  }

  // optional double length = 7 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_length(), target);
  }

  // optional double width = 8 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_width(), target);
  }

  // optional double height = 9 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_height(), target);
  }

  // optional double min_turn_radius = 10 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_min_turn_radius(), target);
  }

  // optional double max_acceleration = 11 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_max_acceleration(), target);
  }

  // optional double max_deceleration = 12 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_deceleration(), target);
  }

  // optional double max_steer_angle = 13 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 14 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 16 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_steer_ratio(), target);
  }

  // optional double wheel_base = 17 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_max_abs_speed_when_stopped(), target);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_throttle_deadzone(), target);
  }

  // optional .control.common.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::steering_latency_param(this), target, stream);
  }

  // optional .control.common.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::throttle_latency_param(this), target, stream);
  }

  // optional .control.common.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::brake_latency_param(this), target, stream);
  }

  // optional double cubic_coeff = 25;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_cubic_coeff(), target);
  }

  // optional double quadratic_coeff = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_quadratic_coeff(), target);
  }

  // optional double linear_coeff = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_linear_coeff(), target);
  }

  // optional double offset = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.common.VehicleParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.VehicleID vehicle_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_id_);
    }

    // optional .control.common.LatencyParam steering_latency_param = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_latency_param_);
    }

    // optional .control.common.LatencyParam throttle_latency_param = 23;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *throttle_latency_param_);
    }

    // optional .control.common.LatencyParam brake_latency_param = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_latency_param_);
    }

    // optional double cubic_coeff = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double quadratic_coeff = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double linear_coeff = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double offset = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.common.VehicleBrand brand = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brand());
    }

    // optional float max_abs_speed_when_stopped = 19 [default = nan];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional double front_edge_to_center = 3 [default = nan];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double back_edge_to_center = 4 [default = nan];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double left_edge_to_center = 5 [default = nan];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double right_edge_to_center = 6 [default = nan];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double length = 7 [default = nan];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double width = 8 [default = nan];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double height = 9 [default = nan];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double min_turn_radius = 10 [default = nan];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 11 [default = nan];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 12 [default = nan];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle = 13 [default = nan];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle_rate = 14 [default = nan];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional double min_steer_angle_rate = 15 [default = nan];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional double steer_ratio = 16 [default = nan];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional double wheel_base = 17 [default = nan];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double wheel_rolling_radius = 18 [default = nan];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double brake_deadzone = 20 [default = nan];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double throttle_deadzone = 21 [default = nan];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.common.VehicleParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.common.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vehicle_id()->::control::common::VehicleID::MergeFrom(from._internal_vehicle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_steering_latency_param()->::control::common::LatencyParam::MergeFrom(from._internal_steering_latency_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_throttle_latency_param()->::control::common::LatencyParam::MergeFrom(from._internal_throttle_latency_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_brake_latency_param()->::control::common::LatencyParam::MergeFrom(from._internal_brake_latency_param());
    }
    if (cached_has_bits & 0x00000010u) {
      cubic_coeff_ = from.cubic_coeff_;
    }
    if (cached_has_bits & 0x00000020u) {
      quadratic_coeff_ = from.quadratic_coeff_;
    }
    if (cached_has_bits & 0x00000040u) {
      linear_coeff_ = from.linear_coeff_;
    }
    if (cached_has_bits & 0x00000080u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_abs_speed_when_stopped_ = from.max_abs_speed_when_stopped_;
    }
    if (cached_has_bits & 0x00000400u) {
      front_edge_to_center_ = from.front_edge_to_center_;
    }
    if (cached_has_bits & 0x00000800u) {
      back_edge_to_center_ = from.back_edge_to_center_;
    }
    if (cached_has_bits & 0x00001000u) {
      left_edge_to_center_ = from.left_edge_to_center_;
    }
    if (cached_has_bits & 0x00002000u) {
      right_edge_to_center_ = from.right_edge_to_center_;
    }
    if (cached_has_bits & 0x00004000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00008000u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00020000u) {
      min_turn_radius_ = from.min_turn_radius_;
    }
    if (cached_has_bits & 0x00040000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_steer_angle_ = from.max_steer_angle_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_steer_angle_rate_ = from.max_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      min_steer_angle_rate_ = from.min_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00800000u) {
      steer_ratio_ = from.steer_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      wheel_base_ = from.wheel_base_;
    }
    if (cached_has_bits & 0x02000000u) {
      wheel_rolling_radius_ = from.wheel_rolling_radius_;
    }
    if (cached_has_bits & 0x04000000u) {
      brake_deadzone_ = from.brake_deadzone_;
    }
    if (cached_has_bits & 0x08000000u) {
      throttle_deadzone_ = from.throttle_deadzone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleParam, brand_)
      + sizeof(VehicleParam::brand_)
      - PROTOBUF_FIELD_OFFSET(VehicleParam, vehicle_id_)>(
          reinterpret_cast<char*>(&vehicle_id_),
          reinterpret_cast<char*>(&other->vehicle_id_));
  swap(max_abs_speed_when_stopped_, other->max_abs_speed_when_stopped_);
  swap(front_edge_to_center_, other->front_edge_to_center_);
  swap(back_edge_to_center_, other->back_edge_to_center_);
  swap(left_edge_to_center_, other->left_edge_to_center_);
  swap(right_edge_to_center_, other->right_edge_to_center_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(min_turn_radius_, other->min_turn_radius_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(max_steer_angle_, other->max_steer_angle_);
  swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  swap(min_steer_angle_rate_, other->min_steer_angle_rate_);
  swap(steer_ratio_, other->steer_ratio_);
  swap(wheel_base_, other->wheel_base_);
  swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  swap(brake_deadzone_, other->brake_deadzone_);
  swap(throttle_deadzone_, other->throttle_deadzone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleConfig::InitAsDefaultInstance() {
  ::control::common::_VehicleConfig_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::common::_VehicleConfig_default_instance_._instance.get_mutable()->vehicle_param_ = const_cast< ::control::common::VehicleParam*>(
      ::control::common::VehicleParam::internal_default_instance());
  ::control::common::_VehicleConfig_default_instance_._instance.get_mutable()->extrinsics_ = const_cast< ::control::common::Extrinsics*>(
      ::control::common::Extrinsics::internal_default_instance());
}
class VehicleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleConfig>()._has_bits_);
  static const ::control::common::Header& header(const VehicleConfig* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::common::VehicleParam& vehicle_param(const VehicleConfig* msg);
  static void set_has_vehicle_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::Extrinsics& extrinsics(const VehicleConfig* msg);
  static void set_has_extrinsics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::control::common::Header&
VehicleConfig::_Internal::header(const VehicleConfig* msg) {
  return *msg->header_;
}
const ::control::common::VehicleParam&
VehicleConfig::_Internal::vehicle_param(const VehicleConfig* msg) {
  return *msg->vehicle_param_;
}
const ::control::common::Extrinsics&
VehicleConfig::_Internal::extrinsics(const VehicleConfig* msg) {
  return *msg->extrinsics_;
}
void VehicleConfig::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VehicleConfig::VehicleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.common.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_vehicle_param()) {
    vehicle_param_ = new ::control::common::VehicleParam(*from.vehicle_param_);
  } else {
    vehicle_param_ = nullptr;
  }
  if (from._internal_has_extrinsics()) {
    extrinsics_ = new ::control::common::Extrinsics(*from.extrinsics_);
  } else {
    extrinsics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.common.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleConfig_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrinsics_) -
      reinterpret_cast<char*>(&header_)) + sizeof(extrinsics_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:control.common.VehicleConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vehicle_param_;
  if (this != internal_default_instance()) delete extrinsics_;
}

void VehicleConfig::ArenaDtor(void* object) {
  VehicleConfig* _this = reinterpret_cast< VehicleConfig* >(object);
  (void)_this;
}
void VehicleConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleConfig& VehicleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleConfig_common_5fmsgs_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:control.common.VehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vehicle_param_ != nullptr);
      vehicle_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(extrinsics_ != nullptr);
      extrinsics_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.VehicleParam vehicle_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Extrinsics extrinsics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.common.VehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .control.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_param(this), target, stream);
  }

  // optional .control.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extrinsics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.common.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.common.VehicleConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .control.common.VehicleParam vehicle_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_param_);
    }

    // optional .control.common.Extrinsics extrinsics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extrinsics_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.common.VehicleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.common.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vehicle_param()->::control::common::VehicleParam::MergeFrom(from._internal_vehicle_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_extrinsics()->::control::common::Extrinsics::MergeFrom(from._internal_extrinsics());
    }
  }
}

void VehicleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::InternalSwap(VehicleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleConfig, extrinsics_)
      + sizeof(VehicleConfig::extrinsics_)
      - PROTOBUF_FIELD_OFFSET(VehicleConfig, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::common::Transform* Arena::CreateMaybeMessage< ::control::common::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::common::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::control::common::Extrinsics* Arena::CreateMaybeMessage< ::control::common::Extrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::common::Extrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::control::common::LatencyParam* Arena::CreateMaybeMessage< ::control::common::LatencyParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::common::LatencyParam >(arena);
}
template<> PROTOBUF_NOINLINE ::control::common::VehicleParam* Arena::CreateMaybeMessage< ::control::common::VehicleParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::common::VehicleParam >(arena);
}
template<> PROTOBUF_NOINLINE ::control::common::VehicleConfig* Arena::CreateMaybeMessage< ::control::common::VehicleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::common::VehicleConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

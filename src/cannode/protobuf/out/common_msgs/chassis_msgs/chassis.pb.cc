// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msgs/chassis_msgs/chassis.proto

#include "common_msgs/chassis_msgs/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisGPS_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponse_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelSpeed_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngageAdvice_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleID_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace control {
namespace canbus {
class ChassisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chassis> _instance;
} _Chassis_default_instance_;
class ChassisGPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisGPS> _instance;
} _ChassisGPS_default_instance_;
class WheelSpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WheelSpeed> _instance;
} _WheelSpeed_default_instance_;
class SonarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sonar> _instance;
} _Sonar_default_instance_;
class SurroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Surround> _instance;
} _Surround_default_instance_;
class LicenseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<License> _instance;
} _License_default_instance_;
class CheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckResponse> _instance;
} _CheckResponse_default_instance_;
}  // namespace canbus
}  // namespace control
static void InitDefaultsscc_info_Chassis_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::canbus::_Chassis_default_instance_;
    new (ptr) ::control::canbus::Chassis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::canbus::Chassis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Chassis_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Chassis_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_VehicleSignal_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto.base,
      &scc_info_ChassisGPS_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_EngageAdvice_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto.base,
      &scc_info_WheelSpeed_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_VehicleID_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto.base,
      &scc_info_CheckResponse_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ChassisGPS_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::canbus::_ChassisGPS_default_instance_;
    new (ptr) ::control::canbus::ChassisGPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::canbus::ChassisGPS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisGPS_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChassisGPS_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static void InitDefaultsscc_info_CheckResponse_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::canbus::_CheckResponse_default_instance_;
    new (ptr) ::control::canbus::CheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::canbus::CheckResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponse_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckResponse_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static void InitDefaultsscc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::canbus::_License_default_instance_;
    new (ptr) ::control::canbus::License();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::canbus::License::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static void InitDefaultsscc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::canbus::_Sonar_default_instance_;
    new (ptr) ::control::canbus::Sonar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::canbus::Sonar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto}, {
      &scc_info_Point3D_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_Quaternion_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::canbus::_Surround_default_instance_;
    new (ptr) ::control::canbus::Surround();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::canbus::Surround::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto}, {
      &scc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,}};

static void InitDefaultsscc_info_WheelSpeed_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::canbus::_WheelSpeed_default_instance_;
    new (ptr) ::control::canbus::WheelSpeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::canbus::WheelSpeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelSpeed_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WheelSpeed_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, engine_started_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, engine_rpm_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, speed_mps_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, odometer_m_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, fuel_range_m_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, steering_torque_nm_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, high_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, low_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, left_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, right_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, horn_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, wiper_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, disengage_status_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, error_code_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, gear_location_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, steering_timestamp_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, header_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, chassis_error_mask_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, signal_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, chassis_gps_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, surround_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, license_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, battery_soc_percentage_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, throttle_percentage_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, brake_percentage_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, steering_percentage_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, front_bumper_event_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, back_bumper_event_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, check_response_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, custom_status_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, steer_mode_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, door_fl_status_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, switch_status_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, epb_status_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, mtr_trq_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, container_position_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, container_status_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, pto_status_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, arm_angle_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Chassis, shovel_angle_),
  11,
  38,
  39,
  40,
  10,
  41,
  42,
  43,
  44,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  23,
  22,
  0,
  24,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  45,
  46,
  47,
  37,
  25,
  26,
  8,
  9,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, latitude_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, longitude_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, gps_valid_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, year_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, month_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, day_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, hours_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, minutes_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, seconds_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, compass_direction_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, pdop_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, is_gps_fault_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, is_inferred_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, altitude_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, heading_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, hdop_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, vdop_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, quality_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, num_satellites_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::ChassisGPS, gps_speed_),
  0,
  1,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  14,
  15,
  16,
  17,
  13,
  19,
  18,
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, is_wheel_spd_rr_valid_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_direction_rr_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_spd_rr_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, is_wheel_spd_rl_valid_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_direction_rl_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_spd_rl_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, is_wheel_spd_fr_valid_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_direction_fr_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_spd_fr_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, is_wheel_spd_fl_valid_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_direction_fl_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::WheelSpeed, wheel_spd_fl_),
  4,
  8,
  0,
  5,
  9,
  1,
  6,
  10,
  2,
  7,
  11,
  3,
  PROTOBUF_FIELD_OFFSET(::control::canbus::Sonar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Sonar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::canbus::Sonar, range_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Sonar, translation_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Sonar, rotation_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, cross_traffic_alert_left_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, cross_traffic_alert_left_enabled_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, blind_spot_left_alert_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, blind_spot_left_alert_enabled_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, cross_traffic_alert_right_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, cross_traffic_alert_right_enabled_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, blind_spot_right_alert_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, blind_spot_right_alert_enabled_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar00_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar01_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar02_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar03_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar04_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar05_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar06_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar07_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar08_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar09_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar10_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar11_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar_enabled_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar_fault_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar_range_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::Surround, sonar_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::control::canbus::License, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::canbus::License, vin_),
  0,
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, is_eps_online_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, is_epb_online_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, is_esp_online_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, is_vtog_online_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, is_scu_online_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, is_switch_online_),
  PROTOBUF_FIELD_OFFSET(::control::canbus::CheckResponse, is_vcu_online_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 53, sizeof(::control::canbus::Chassis)},
  { 101, 126, sizeof(::control::canbus::ChassisGPS)},
  { 146, 163, sizeof(::control::canbus::WheelSpeed)},
  { 175, 183, sizeof(::control::canbus::Sonar)},
  { 186, 215, sizeof(::control::canbus::Surround)},
  { 239, 245, sizeof(::control::canbus::License)},
  { 246, 258, sizeof(::control::canbus::CheckResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::canbus::_Chassis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::canbus::_ChassisGPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::canbus::_WheelSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::canbus::_Sonar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::canbus::_Surround_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::canbus::_License_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::canbus::_CheckResponse_default_instance_),
};

const char descriptor_table_protodef_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&common_msgs/chassis_msgs/chassis.proto"
  "\022\016control.canbus\032\031google/protobuf/any.pr"
  "oto\032(common_msgs/basic_msgs/drive_state."
  "proto\032%common_msgs/basic_msgs/geometry.p"
  "roto\032#common_msgs/basic_msgs/header.prot"
  "o\032\'common_msgs/basic_msgs/vehicle_id.pro"
  "to\032+common_msgs/basic_msgs/vehicle_signa"
  "l.proto\"\343\022\n\007Chassis\022\026\n\016engine_started\030\003 "
  "\001(\010\022\027\n\nengine_rpm\030\004 \001(\002:\003nan\022\026\n\tspeed_mp"
  "s\030\005 \001(\002:\003nan\022\027\n\nodometer_m\030\006 \001(\002:\003nan\022\024\n"
  "\014fuel_range_m\030\007 \001(\005\022 \n\023throttle_percenta"
  "ge\030\010 \001(\002:\003nan\022\035\n\020brake_percentage\030\t \001(\002:"
  "\003nan\022 \n\023steering_percentage\030\013 \001(\002:\003nan\022\037"
  "\n\022steering_torque_nm\030\014 \001(\002:\003nan\022\025\n\rparki"
  "ng_brake\030\r \001(\010\022\034\n\020high_beam_signal\030\016 \001(\010"
  "B\002\030\001\022\033\n\017low_beam_signal\030\017 \001(\010B\002\030\001\022\034\n\020lef"
  "t_turn_signal\030\020 \001(\010B\002\030\001\022\035\n\021right_turn_si"
  "gnal\030\021 \001(\010B\002\030\001\022\020\n\004horn\030\022 \001(\010B\002\030\001\022\r\n\005wipe"
  "r\030\023 \001(\010\022\034\n\020disengage_status\030\024 \001(\010B\002\030\001\022J\n"
  "\014driving_mode\030\025 \001(\0162#.control.canbus.Cha"
  "ssis.DrivingMode:\017COMPLETE_MANUAL\022\?\n\nerr"
  "or_code\030\026 \001(\0162!.control.canbus.Chassis.E"
  "rrorCode:\010NO_ERROR\022;\n\rgear_location\030\027 \001("
  "\0162$.control.canbus.Chassis.GearPosition\022"
  "\032\n\022steering_timestamp\030\030 \001(\001\022&\n\006header\030\031 "
  "\001(\0132\026.control.common.Header\022\035\n\022chassis_e"
  "rror_mask\030\032 \001(\005:\0010\022-\n\006signal\030\033 \001(\0132\035.con"
  "trol.common.VehicleSignal\022/\n\013chassis_gps"
  "\030\034 \001(\0132\032.control.canbus.ChassisGPS\0223\n\ren"
  "gage_advice\030\035 \001(\0132\034.control.common.Engag"
  "eAdvice\022/\n\013wheel_speed\030\036 \001(\0132\032.control.c"
  "anbus.WheelSpeed\022*\n\010surround\030\037 \001(\0132\030.con"
  "trol.canbus.Surround\022,\n\007license\030  \001(\0132\027."
  "control.canbus.LicenseB\002\030\001\022-\n\nvehicle_id"
  "\030! \001(\0132\031.control.common.VehicleID\022\"\n\026bat"
  "tery_soc_percentage\030\" \001(\005:\002-1\022$\n\027throttl"
  "e_percentage_cmd\030# \001(\002:\003nan\022!\n\024brake_per"
  "centage_cmd\030$ \001(\002:\003nan\022$\n\027steering_perce"
  "ntage_cmd\030% \001(\002:\003nan\022\?\n\022front_bumper_eve"
  "nt\030& \001(\0162#.control.canbus.Chassis.Bumper"
  "Event\022>\n\021back_bumper_event\030\' \001(\0162#.contr"
  "ol.canbus.Chassis.BumperEvent\0225\n\016check_r"
  "esponse\030( \001(\0132\035.control.canbus.CheckResp"
  "onse\022+\n\rcustom_status\030) \001(\0132\024.google.pro"
  "tobuf.Any\0225\n\nsteer_mode\030* \001(\0162!.control."
  "canbus.Chassis.SteerMode\022\026\n\016door_fl_stat"
  "us\030+ \001(\005\022\025\n\rswitch_status\030, \001(\005\022\022\n\nepb_s"
  "tatus\030- \001(\r\022\017\n\007mtr_trq\030. \001(\005\022\032\n\022containe"
  "r_position\030/ \001(\r\022\030\n\020container_status\0300 \001"
  "(\r\022\022\n\npto_status\0301 \001(\r\022\024\n\tarm_angle\0302 \001("
  "\001:\0010\022\027\n\014shovel_angle\0303 \001(\001:\0010\"y\n\013Driving"
  "Mode\022\023\n\017COMPLETE_MANUAL\020\000\022\027\n\023COMPLETE_AU"
  "TO_DRIVE\020\001\022\023\n\017AUTO_STEER_ONLY\020\002\022\023\n\017AUTO_"
  "SPEED_ONLY\020\003\022\022\n\016EMERGENCY_MODE\020\004\"\200\002\n\tErr"
  "orCode\022\014\n\010NO_ERROR\020\000\022\025\n\021CMD_NOT_IN_PERIO"
  "D\020\001\022\021\n\rCHASSIS_ERROR\020\002\022\032\n\026CHASSIS_ERROR_"
  "ON_STEER\020\006\022\032\n\026CHASSIS_ERROR_ON_BRAKE\020\007\022\035"
  "\n\031CHASSIS_ERROR_ON_THROTTLE\020\010\022\031\n\025CHASSIS"
  "_ERROR_ON_GEAR\020\t\022\027\n\023MANUAL_INTERVENTION\020"
  "\003\022\035\n\031CHASSIS_CAN_NOT_IN_PERIOD\020\004\022\021\n\rUNKN"
  "OWN_ERROR\020\005\"\203\001\n\014GearPosition\022\020\n\014GEAR_INV"
  "ALID\020\000\022\016\n\nGEAR_DRIVE\020\001\022\020\n\014GEAR_NEUTRAL\020\002"
  "\022\020\n\014GEAR_REVERSE\020\003\022\020\n\014GEAR_PARKING\020\004\022\014\n\010"
  "GEAR_LOW\020\005\022\r\n\tGEAR_NONE\020\006\"H\n\013BumperEvent"
  "\022\022\n\016BUMPER_INVALID\020\000\022\021\n\rBUMPER_NORMAL\020\001\022"
  "\022\n\016BUMPER_PRESSED\020\002\"H\n\tSteerMode\022\014\n\010STRA"
  "IGHT\020\000\022\r\n\tFULLWHEEL\020\001\022\014\n\010DIAGONAL\020\002\022\020\n\014F"
  "ORWARDWHEEL\020\003\"\212\003\n\nChassisGPS\022\020\n\010latitude"
  "\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\021\n\tgps_valid\030\003"
  " \001(\010\022\014\n\004year\030\004 \001(\005\022\r\n\005month\030\005 \001(\005\022\013\n\003day"
  "\030\006 \001(\005\022\r\n\005hours\030\007 \001(\005\022\017\n\007minutes\030\010 \001(\005\022\017"
  "\n\007seconds\030\t \001(\005\022\031\n\021compass_direction\030\n \001"
  "(\001\022\014\n\004pdop\030\013 \001(\001\022\024\n\014is_gps_fault\030\014 \001(\010\022\023"
  "\n\013is_inferred\030\r \001(\010\022\020\n\010altitude\030\016 \001(\001\022\017\n"
  "\007heading\030\017 \001(\001\022\014\n\004hdop\030\020 \001(\001\022\014\n\004vdop\030\021 \001"
  "(\001\022+\n\007quality\030\022 \001(\0162\032.control.canbus.Gps"
  "Quality\022\026\n\016num_satellites\030\023 \001(\005\022\021\n\tgps_s"
  "peed\030\024 \001(\001\"\222\005\n\nWheelSpeed\022$\n\025is_wheel_sp"
  "d_rr_valid\030\001 \001(\010:\005false\022N\n\022wheel_directi"
  "on_rr\030\002 \001(\0162).control.canbus.WheelSpeed."
  "WheelSpeedType:\007INVALID\022\027\n\014wheel_spd_rr\030"
  "\003 \001(\001:\0010\022$\n\025is_wheel_spd_rl_valid\030\004 \001(\010:"
  "\005false\022N\n\022wheel_direction_rl\030\005 \001(\0162).con"
  "trol.canbus.WheelSpeed.WheelSpeedType:\007I"
  "NVALID\022\027\n\014wheel_spd_rl\030\006 \001(\001:\0010\022$\n\025is_wh"
  "eel_spd_fr_valid\030\007 \001(\010:\005false\022N\n\022wheel_d"
  "irection_fr\030\010 \001(\0162).control.canbus.Wheel"
  "Speed.WheelSpeedType:\007INVALID\022\027\n\014wheel_s"
  "pd_fr\030\t \001(\001:\0010\022$\n\025is_wheel_spd_fl_valid\030"
  "\n \001(\010:\005false\022N\n\022wheel_direction_fl\030\013 \001(\016"
  "2).control.canbus.WheelSpeed.WheelSpeedT"
  "ype:\007INVALID\022\027\n\014wheel_spd_fl\030\014 \001(\001:\0010\"H\n"
  "\016WheelSpeedType\022\013\n\007FORWARD\020\000\022\014\n\010BACKWARD"
  "\020\001\022\016\n\nSTANDSTILL\020\002\022\013\n\007INVALID\020\003\"r\n\005Sonar"
  "\022\r\n\005range\030\001 \001(\001\022,\n\013translation\030\002 \001(\0132\027.c"
  "ontrol.common.Point3D\022,\n\010rotation\030\003 \001(\0132"
  "\032.control.common.Quaternion\"\345\004\n\010Surround"
  "\022 \n\030cross_traffic_alert_left\030\001 \001(\010\022(\n cr"
  "oss_traffic_alert_left_enabled\030\002 \001(\010\022\035\n\025"
  "blind_spot_left_alert\030\003 \001(\010\022%\n\035blind_spo"
  "t_left_alert_enabled\030\004 \001(\010\022!\n\031cross_traf"
  "fic_alert_right\030\005 \001(\010\022)\n!cross_traffic_a"
  "lert_right_enabled\030\006 \001(\010\022\036\n\026blind_spot_r"
  "ight_alert\030\007 \001(\010\022&\n\036blind_spot_right_ale"
  "rt_enabled\030\010 \001(\010\022\017\n\007sonar00\030\t \001(\001\022\017\n\007son"
  "ar01\030\n \001(\001\022\017\n\007sonar02\030\013 \001(\001\022\017\n\007sonar03\030\014"
  " \001(\001\022\017\n\007sonar04\030\r \001(\001\022\017\n\007sonar05\030\016 \001(\001\022\017"
  "\n\007sonar06\030\017 \001(\001\022\017\n\007sonar07\030\020 \001(\001\022\017\n\007sona"
  "r08\030\021 \001(\001\022\017\n\007sonar09\030\022 \001(\001\022\017\n\007sonar10\030\023 "
  "\001(\001\022\017\n\007sonar11\030\024 \001(\001\022\025\n\rsonar_enabled\030\025 "
  "\001(\010\022\023\n\013sonar_fault\030\026 \001(\010\022\023\n\013sonar_range\030"
  "\027 \003(\001\022$\n\005sonar\030\030 \003(\0132\025.control.canbus.So"
  "nar\"\032\n\007License\022\017\n\003vin\030\001 \001(\tB\002\030\001\"\345\001\n\rChec"
  "kResponse\022\034\n\ris_eps_online\030\001 \001(\010:\005false\022"
  "\034\n\ris_epb_online\030\002 \001(\010:\005false\022\034\n\ris_esp_"
  "online\030\003 \001(\010:\005false\022\035\n\016is_vtog_online\030\004 "
  "\001(\010:\005false\022\034\n\ris_scu_online\030\005 \001(\010:\005false"
  "\022\037\n\020is_switch_online\030\006 \001(\010:\005false\022\034\n\ris_"
  "vcu_online\030\007 \001(\010:\005false*A\n\nGpsQuality\022\n\n"
  "\006FIX_NO\020\000\022\n\n\006FIX_2D\020\001\022\n\n\006FIX_3D\020\002\022\017\n\013FIX"
  "_INVALID\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_deps[6] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_sccs[7] = {
  &scc_info_Chassis_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_ChassisGPS_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_CheckResponse_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_WheelSpeed_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto = {
  false, false, descriptor_table_protodef_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto, "common_msgs/chassis_msgs/chassis.proto", 4810,
  &descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_once, descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_sccs, descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto_deps, 7, 6,
  schemas, file_default_instances, TableStruct_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto::offsets,
  file_level_metadata_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto, 7, file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto, file_level_service_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto)), true);
namespace control {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
constexpr Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
constexpr Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
constexpr Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
constexpr Chassis_DrivingMode Chassis::EMERGENCY_MODE;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MIN;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MAX;
constexpr int Chassis::DrivingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[1];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_ErrorCode Chassis::NO_ERROR;
constexpr Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_STEER;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_BRAKE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_THROTTLE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_GEAR;
constexpr Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
constexpr Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MIN;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MAX;
constexpr int Chassis::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[2];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_GearPosition Chassis::GEAR_INVALID;
constexpr Chassis_GearPosition Chassis::GEAR_DRIVE;
constexpr Chassis_GearPosition Chassis::GEAR_NEUTRAL;
constexpr Chassis_GearPosition Chassis::GEAR_REVERSE;
constexpr Chassis_GearPosition Chassis::GEAR_PARKING;
constexpr Chassis_GearPosition Chassis::GEAR_LOW;
constexpr Chassis_GearPosition Chassis::GEAR_NONE;
constexpr Chassis_GearPosition Chassis::GearPosition_MIN;
constexpr Chassis_GearPosition Chassis::GearPosition_MAX;
constexpr int Chassis::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_BumperEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[3];
}
bool Chassis_BumperEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_BumperEvent Chassis::BUMPER_INVALID;
constexpr Chassis_BumperEvent Chassis::BUMPER_NORMAL;
constexpr Chassis_BumperEvent Chassis::BUMPER_PRESSED;
constexpr Chassis_BumperEvent Chassis::BumperEvent_MIN;
constexpr Chassis_BumperEvent Chassis::BumperEvent_MAX;
constexpr int Chassis::BumperEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_SteerMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[4];
}
bool Chassis_SteerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_SteerMode Chassis::STRAIGHT;
constexpr Chassis_SteerMode Chassis::FULLWHEEL;
constexpr Chassis_SteerMode Chassis::DIAGONAL;
constexpr Chassis_SteerMode Chassis::FORWARDWHEEL;
constexpr Chassis_SteerMode Chassis::SteerMode_MIN;
constexpr Chassis_SteerMode Chassis::SteerMode_MAX;
constexpr int Chassis::SteerMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[5];
}
bool WheelSpeed_WheelSpeedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WheelSpeed_WheelSpeedType WheelSpeed::FORWARD;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::BACKWARD;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::STANDSTILL;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::INVALID;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MIN;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MAX;
constexpr int WheelSpeed::WheelSpeedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto[6];
}
bool GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Chassis::InitAsDefaultInstance() {
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->signal_ = const_cast< ::control::common::VehicleSignal*>(
      ::control::common::VehicleSignal::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->chassis_gps_ = const_cast< ::control::canbus::ChassisGPS*>(
      ::control::canbus::ChassisGPS::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::control::common::EngageAdvice*>(
      ::control::common::EngageAdvice::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->wheel_speed_ = const_cast< ::control::canbus::WheelSpeed*>(
      ::control::canbus::WheelSpeed::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->surround_ = const_cast< ::control::canbus::Surround*>(
      ::control::canbus::Surround::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->license_ = const_cast< ::control::canbus::License*>(
      ::control::canbus::License::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->vehicle_id_ = const_cast< ::control::common::VehicleID*>(
      ::control::common::VehicleID::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->check_response_ = const_cast< ::control::canbus::CheckResponse*>(
      ::control::canbus::CheckResponse::internal_default_instance());
  ::control::canbus::_Chassis_default_instance_._instance.get_mutable()->custom_status_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Chassis::_Internal {
 public:
  using HasBits = decltype(std::declval<Chassis>()._has_bits_);
  static void set_has_engine_started(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_engine_rpm(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_speed_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_odometer_m(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_fuel_range_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_throttle_percentage(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_brake_percentage(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_steering_torque_nm(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_high_beam_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_low_beam_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_left_turn_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_right_turn_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_wiper(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_disengage_status(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_steering_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::control::common::Header& header(const Chassis* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chassis_error_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::control::common::VehicleSignal& signal(const Chassis* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::canbus::ChassisGPS& chassis_gps(const Chassis* msg);
  static void set_has_chassis_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::common::EngageAdvice& engage_advice(const Chassis* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::control::canbus::WheelSpeed& wheel_speed(const Chassis* msg);
  static void set_has_wheel_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::canbus::Surround& surround(const Chassis* msg);
  static void set_has_surround(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::canbus::License& license(const Chassis* msg);
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::control::common::VehicleID& vehicle_id(const Chassis* msg);
  static void set_has_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_battery_soc_percentage(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_throttle_percentage_cmd(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_brake_percentage_cmd(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_steering_percentage_cmd(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_front_bumper_event(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_back_bumper_event(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::control::canbus::CheckResponse& check_response(const Chassis* msg);
  static void set_has_check_response(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const PROTOBUF_NAMESPACE_ID::Any& custom_status(const Chassis* msg);
  static void set_has_custom_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steer_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_door_fl_status(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_switch_status(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_epb_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_mtr_trq(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_container_position(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_container_status(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_pto_status(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_arm_angle(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_shovel_angle(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
};

const ::control::common::Header&
Chassis::_Internal::header(const Chassis* msg) {
  return *msg->header_;
}
const ::control::common::VehicleSignal&
Chassis::_Internal::signal(const Chassis* msg) {
  return *msg->signal_;
}
const ::control::canbus::ChassisGPS&
Chassis::_Internal::chassis_gps(const Chassis* msg) {
  return *msg->chassis_gps_;
}
const ::control::common::EngageAdvice&
Chassis::_Internal::engage_advice(const Chassis* msg) {
  return *msg->engage_advice_;
}
const ::control::canbus::WheelSpeed&
Chassis::_Internal::wheel_speed(const Chassis* msg) {
  return *msg->wheel_speed_;
}
const ::control::canbus::Surround&
Chassis::_Internal::surround(const Chassis* msg) {
  return *msg->surround_;
}
const ::control::canbus::License&
Chassis::_Internal::license(const Chassis* msg) {
  return *msg->license_;
}
const ::control::common::VehicleID&
Chassis::_Internal::vehicle_id(const Chassis* msg) {
  return *msg->vehicle_id_;
}
const ::control::canbus::CheckResponse&
Chassis::_Internal::check_response(const Chassis* msg) {
  return *msg->check_response_;
}
const PROTOBUF_NAMESPACE_ID::Any&
Chassis::_Internal::custom_status(const Chassis* msg) {
  return *msg->custom_status_;
}
void Chassis::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Chassis::clear_signal() {
  if (signal_ != nullptr) signal_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Chassis::clear_engage_advice() {
  if (engage_advice_ != nullptr) engage_advice_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Chassis::clear_vehicle_id() {
  if (vehicle_id_ != nullptr) vehicle_id_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Chassis::clear_custom_status() {
  if (custom_status_ != nullptr) custom_status_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
Chassis::Chassis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_signal()) {
    signal_ = new ::control::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = nullptr;
  }
  if (from._internal_has_chassis_gps()) {
    chassis_gps_ = new ::control::canbus::ChassisGPS(*from.chassis_gps_);
  } else {
    chassis_gps_ = nullptr;
  }
  if (from._internal_has_engage_advice()) {
    engage_advice_ = new ::control::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  if (from._internal_has_wheel_speed()) {
    wheel_speed_ = new ::control::canbus::WheelSpeed(*from.wheel_speed_);
  } else {
    wheel_speed_ = nullptr;
  }
  if (from._internal_has_surround()) {
    surround_ = new ::control::canbus::Surround(*from.surround_);
  } else {
    surround_ = nullptr;
  }
  if (from._internal_has_license()) {
    license_ = new ::control::canbus::License(*from.license_);
  } else {
    license_ = nullptr;
  }
  if (from._internal_has_vehicle_id()) {
    vehicle_id_ = new ::control::common::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = nullptr;
  }
  if (from._internal_has_check_response()) {
    check_response_ = new ::control::canbus::CheckResponse(*from.check_response_);
  } else {
    check_response_ = nullptr;
  }
  if (from._internal_has_custom_status()) {
    custom_status_ = new PROTOBUF_NAMESPACE_ID::Any(*from.custom_status_);
  } else {
    custom_status_ = nullptr;
  }
  ::memcpy(&fuel_range_m_, &from.fuel_range_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_percentage_cmd_) -
    reinterpret_cast<char*>(&fuel_range_m_)) + sizeof(brake_percentage_cmd_));
  // @@protoc_insertion_point(copy_constructor:control.canbus.Chassis)
}

void Chassis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chassis_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shovel_angle_) -
      reinterpret_cast<char*>(&header_)) + sizeof(shovel_angle_));
  steering_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
  engine_rpm_ = std::numeric_limits<float>::quiet_NaN();
  speed_mps_ = std::numeric_limits<float>::quiet_NaN();
  odometer_m_ = std::numeric_limits<float>::quiet_NaN();
  throttle_percentage_ = std::numeric_limits<float>::quiet_NaN();
  brake_percentage_ = std::numeric_limits<float>::quiet_NaN();
  steering_percentage_ = std::numeric_limits<float>::quiet_NaN();
  steering_torque_nm_ = std::numeric_limits<float>::quiet_NaN();
  battery_soc_percentage_ = -1;
  throttle_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
  brake_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:control.canbus.Chassis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chassis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete chassis_gps_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete wheel_speed_;
  if (this != internal_default_instance()) delete surround_;
  if (this != internal_default_instance()) delete license_;
  if (this != internal_default_instance()) delete vehicle_id_;
  if (this != internal_default_instance()) delete check_response_;
  if (this != internal_default_instance()) delete custom_status_;
}

void Chassis::ArenaDtor(void* object) {
  Chassis* _this = reinterpret_cast< Chassis* >(object);
  (void)_this;
}
void Chassis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chassis& Chassis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chassis_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:control.canbus.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signal_ != nullptr);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chassis_gps_ != nullptr);
      chassis_gps_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(engage_advice_ != nullptr);
      engage_advice_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(wheel_speed_ != nullptr);
      wheel_speed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(surround_ != nullptr);
      surround_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(license_ != nullptr);
      license_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(vehicle_id_ != nullptr);
      vehicle_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(check_response_ != nullptr);
      check_response_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(custom_status_ != nullptr);
      custom_status_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&fuel_range_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&left_turn_signal_) -
        reinterpret_cast<char*>(&fuel_range_m_)) + sizeof(left_turn_signal_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&right_turn_signal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_location_) -
        reinterpret_cast<char*>(&right_turn_signal_)) + sizeof(gear_location_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&chassis_error_mask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtr_trq_) -
        reinterpret_cast<char*>(&chassis_error_mask_)) + sizeof(mtr_trq_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&container_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shovel_angle_) -
        reinterpret_cast<char*>(&container_position_)) + sizeof(shovel_angle_));
    steering_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
    engine_rpm_ = std::numeric_limits<float>::quiet_NaN();
    speed_mps_ = std::numeric_limits<float>::quiet_NaN();
  }
  if (cached_has_bits & 0x0000ff00u) {
    odometer_m_ = std::numeric_limits<float>::quiet_NaN();
    throttle_percentage_ = std::numeric_limits<float>::quiet_NaN();
    brake_percentage_ = std::numeric_limits<float>::quiet_NaN();
    steering_percentage_ = std::numeric_limits<float>::quiet_NaN();
    steering_torque_nm_ = std::numeric_limits<float>::quiet_NaN();
    battery_soc_percentage_ = -1;
    throttle_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
    brake_percentage_cmd_ = std::numeric_limits<float>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chassis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool engine_started = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_engine_started(&_has_bits_);
          engine_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float engine_rpm = 4 [default = nan];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_engine_rpm(&_has_bits_);
          engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_mps = 5 [default = nan];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_speed_mps(&_has_bits_);
          speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float odometer_m = 6 [default = nan];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_odometer_m(&_has_bits_);
          odometer_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 fuel_range_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fuel_range_m(&_has_bits_);
          fuel_range_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float throttle_percentage = 8 [default = nan];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_throttle_percentage(&_has_bits_);
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float brake_percentage = 9 [default = nan];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_brake_percentage(&_has_bits_);
          brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steering_percentage = 11 [default = nan];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_steering_percentage(&_has_bits_);
          steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steering_torque_nm = 12 [default = nan];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_steering_torque_nm(&_has_bits_);
          steering_torque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool parking_brake = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_parking_brake(&_has_bits_);
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_high_beam_signal(&_has_bits_);
          high_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_low_beam_signal(&_has_bits_);
          low_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_left_turn_signal(&_has_bits_);
          left_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_right_turn_signal(&_has_bits_);
          right_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool horn = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_horn(&_has_bits_);
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wiper = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_wiper(&_has_bits_);
          wiper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disengage_status = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_disengage_status(&_has_bits_);
          disengage_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::control::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::control::canbus::Chassis_ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.GearPosition gear_location = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::control::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double steering_timestamp = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_steering_timestamp(&_has_bits_);
          steering_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Header header = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_chassis_error_mask(&_has_bits_);
          chassis_error_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.VehicleSignal signal = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.ChassisGPS chassis_gps = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.EngageAdvice engage_advice = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.WheelSpeed wheel_speed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Surround surround = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_surround(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.License license = 32 [deprecated = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.VehicleID vehicle_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 battery_soc_percentage = 34 [default = -1];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_battery_soc_percentage(&_has_bits_);
          battery_soc_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float throttle_percentage_cmd = 35 [default = nan];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_throttle_percentage_cmd(&_has_bits_);
          throttle_percentage_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float brake_percentage_cmd = 36 [default = nan];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_brake_percentage_cmd(&_has_bits_);
          brake_percentage_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steering_percentage_cmd = 37 [default = nan];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_steering_percentage_cmd(&_has_bits_);
          steering_percentage_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.BumperEvent front_bumper_event = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_BumperEvent_IsValid(val))) {
            _internal_set_front_bumper_event(static_cast<::control::canbus::Chassis_BumperEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(38, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.BumperEvent back_bumper_event = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_BumperEvent_IsValid(val))) {
            _internal_set_back_bumper_event(static_cast<::control::canbus::Chassis_BumperEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(39, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.CheckResponse check_response = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Any custom_status = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.SteerMode steer_mode = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_SteerMode_IsValid(val))) {
            _internal_set_steer_mode(static_cast<::control::canbus::Chassis_SteerMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(42, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 door_fl_status = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_door_fl_status(&_has_bits_);
          door_fl_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 switch_status = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_switch_status(&_has_bits_);
          switch_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 epb_status = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_epb_status(&_has_bits_);
          epb_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mtr_trq = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_mtr_trq(&_has_bits_);
          mtr_trq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 container_position = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_container_position(&_has_bits_);
          container_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 container_status = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_container_status(&_has_bits_);
          container_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pto_status = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_pto_status(&_has_bits_);
          pto_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double arm_angle = 50 [default = 0];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_arm_angle(&_has_bits_);
          arm_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double shovel_angle = 51 [default = 0];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_shovel_angle(&_has_bits_);
          shovel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chassis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.canbus.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_engine_started(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_engine_rpm(), target);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed_mps(), target);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_odometer_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_fuel_range_m(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float throttle_percentage = 8 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_throttle_percentage(), target);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_brake_percentage(), target);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_steering_torque_nm(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_parking_brake(), target);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_right_turn_signal(), target);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_horn(), target);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_wiper(), target);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_disengage_status(), target);
  }

  // optional .control.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_driving_mode(), target);
  }

  // optional .control.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_error_code(), target);
  }

  // optional .control.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_steering_timestamp(), target);
  }

  // optional .control.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::header(this), target, stream);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_chassis_error_mask(), target);
  }

  // optional .control.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::signal(this), target, stream);
  }

  // optional .control.canbus.ChassisGPS chassis_gps = 28;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::chassis_gps(this), target, stream);
  }

  // optional .control.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::engage_advice(this), target, stream);
  }

  // optional .control.canbus.WheelSpeed wheel_speed = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::wheel_speed(this), target, stream);
  }

  // optional .control.canbus.Surround surround = 31;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::surround(this), target, stream);
  }

  // optional .control.canbus.License license = 32 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::license(this), target, stream);
  }

  // optional .control.common.VehicleID vehicle_id = 33;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::vehicle_id(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 battery_soc_percentage = 34 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_battery_soc_percentage(), target);
  }

  // optional float throttle_percentage_cmd = 35 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_throttle_percentage_cmd(), target);
  }

  // optional float brake_percentage_cmd = 36 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_brake_percentage_cmd(), target);
  }

  // optional float steering_percentage_cmd = 37 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_steering_percentage_cmd(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.canbus.Chassis.BumperEvent front_bumper_event = 38;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      38, this->_internal_front_bumper_event(), target);
  }

  // optional .control.canbus.Chassis.BumperEvent back_bumper_event = 39;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      39, this->_internal_back_bumper_event(), target);
  }

  // optional .control.canbus.CheckResponse check_response = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::check_response(this), target, stream);
  }

  // optional .google.protobuf.Any custom_status = 41;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::custom_status(this), target, stream);
  }

  // optional .control.canbus.Chassis.SteerMode steer_mode = 42;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      42, this->_internal_steer_mode(), target);
  }

  // optional int32 door_fl_status = 43;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_door_fl_status(), target);
  }

  // optional int32 switch_status = 44;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->_internal_switch_status(), target);
  }

  // optional uint32 epb_status = 45;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_epb_status(), target);
  }

  // optional int32 mtr_trq = 46;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_mtr_trq(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 container_position = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_container_position(), target);
  }

  // optional uint32 container_status = 48;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_container_status(), target);
  }

  // optional uint32 pto_status = 49;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_pto_status(), target);
  }

  // optional double arm_angle = 50 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_arm_angle(), target);
  }

  // optional double shovel_angle = 51 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_shovel_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.canbus.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.canbus.Chassis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.Header header = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .control.common.VehicleSignal signal = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .control.canbus.ChassisGPS chassis_gps = 28;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chassis_gps_);
    }

    // optional .control.common.EngageAdvice engage_advice = 29;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

    // optional .control.canbus.WheelSpeed wheel_speed = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wheel_speed_);
    }

    // optional .control.canbus.Surround surround = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *surround_);
    }

    // optional .control.canbus.License license = 32 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *license_);
    }

    // optional .control.common.VehicleID vehicle_id = 33;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_id_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.canbus.CheckResponse check_response = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_response_);
    }

    // optional .google.protobuf.Any custom_status = 41;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_status_);
    }

    // optional int32 fuel_range_m = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fuel_range_m());
    }

    // optional bool engine_started = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool low_beam_signal = 15 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool left_turn_signal = 16 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool right_turn_signal = 17 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool wiper = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool disengage_status = 20 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional .control.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

    // optional .control.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
    }

    // optional double steering_timestamp = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional .control.canbus.Chassis.GearPosition gear_location = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 chassis_error_mask = 26 [default = 0];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chassis_error_mask());
    }

    // optional .control.canbus.Chassis.BumperEvent front_bumper_event = 38;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_front_bumper_event());
    }

    // optional .control.canbus.Chassis.BumperEvent back_bumper_event = 39;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_back_bumper_event());
    }

    // optional .control.canbus.Chassis.SteerMode steer_mode = 42;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steer_mode());
    }

    // optional int32 door_fl_status = 43;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_door_fl_status());
    }

    // optional int32 switch_status = 44;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_switch_status());
    }

    // optional uint32 epb_status = 45;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_epb_status());
    }

    // optional int32 mtr_trq = 46;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtr_trq());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 container_position = 47;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_container_position());
    }

    // optional uint32 container_status = 48;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_container_status());
    }

    // optional uint32 pto_status = 49;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pto_status());
    }

    // optional double arm_angle = 50 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double shovel_angle = 51 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional float steering_percentage_cmd = 37 [default = nan];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float engine_rpm = 4 [default = nan];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float speed_mps = 5 [default = nan];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float odometer_m = 6 [default = nan];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 8 [default = nan];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 9 [default = nan];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = nan];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float steering_torque_nm = 12 [default = nan];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional int32 battery_soc_percentage = 34 [default = -1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_battery_soc_percentage());
    }

    // optional float throttle_percentage_cmd = 35 [default = nan];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float brake_percentage_cmd = 36 [default = nan];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chassis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chassis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.canbus.Chassis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.canbus.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signal()->::control::common::VehicleSignal::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chassis_gps()->::control::canbus::ChassisGPS::MergeFrom(from._internal_chassis_gps());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_engage_advice()->::control::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_wheel_speed()->::control::canbus::WheelSpeed::MergeFrom(from._internal_wheel_speed());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_surround()->::control::canbus::Surround::MergeFrom(from._internal_surround());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_license()->::control::canbus::License::MergeFrom(from._internal_license());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_vehicle_id()->::control::common::VehicleID::MergeFrom(from._internal_vehicle_id());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_check_response()->::control::canbus::CheckResponse::MergeFrom(from._internal_check_response());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_custom_status()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_custom_status());
    }
    if (cached_has_bits & 0x00000400u) {
      fuel_range_m_ = from.fuel_range_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      engine_started_ = from.engine_started_;
    }
    if (cached_has_bits & 0x00001000u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00002000u) {
      high_beam_signal_ = from.high_beam_signal_;
    }
    if (cached_has_bits & 0x00004000u) {
      low_beam_signal_ = from.low_beam_signal_;
    }
    if (cached_has_bits & 0x00008000u) {
      left_turn_signal_ = from.left_turn_signal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      right_turn_signal_ = from.right_turn_signal_;
    }
    if (cached_has_bits & 0x00020000u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00040000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00080000u) {
      disengage_status_ = from.disengage_status_;
    }
    if (cached_has_bits & 0x00100000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00200000u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00400000u) {
      steering_timestamp_ = from.steering_timestamp_;
    }
    if (cached_has_bits & 0x00800000u) {
      gear_location_ = from.gear_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      chassis_error_mask_ = from.chassis_error_mask_;
    }
    if (cached_has_bits & 0x02000000u) {
      front_bumper_event_ = from.front_bumper_event_;
    }
    if (cached_has_bits & 0x04000000u) {
      back_bumper_event_ = from.back_bumper_event_;
    }
    if (cached_has_bits & 0x08000000u) {
      steer_mode_ = from.steer_mode_;
    }
    if (cached_has_bits & 0x10000000u) {
      door_fl_status_ = from.door_fl_status_;
    }
    if (cached_has_bits & 0x20000000u) {
      switch_status_ = from.switch_status_;
    }
    if (cached_has_bits & 0x40000000u) {
      epb_status_ = from.epb_status_;
    }
    if (cached_has_bits & 0x80000000u) {
      mtr_trq_ = from.mtr_trq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      container_position_ = from.container_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      container_status_ = from.container_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      pto_status_ = from.pto_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      arm_angle_ = from.arm_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      shovel_angle_ = from.shovel_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      steering_percentage_cmd_ = from.steering_percentage_cmd_;
    }
    if (cached_has_bits & 0x00000040u) {
      engine_rpm_ = from.engine_rpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_mps_ = from.speed_mps_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      odometer_m_ = from.odometer_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00000800u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00001000u) {
      steering_torque_nm_ = from.steering_torque_nm_;
    }
    if (cached_has_bits & 0x00002000u) {
      battery_soc_percentage_ = from.battery_soc_percentage_;
    }
    if (cached_has_bits & 0x00004000u) {
      throttle_percentage_cmd_ = from.throttle_percentage_cmd_;
    }
    if (cached_has_bits & 0x00008000u) {
      brake_percentage_cmd_ = from.brake_percentage_cmd_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chassis, shovel_angle_)
      + sizeof(Chassis::shovel_angle_)
      - PROTOBUF_FIELD_OFFSET(Chassis, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(steering_percentage_cmd_, other->steering_percentage_cmd_);
  swap(engine_rpm_, other->engine_rpm_);
  swap(speed_mps_, other->speed_mps_);
  swap(odometer_m_, other->odometer_m_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(brake_percentage_, other->brake_percentage_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(steering_torque_nm_, other->steering_torque_nm_);
  swap(battery_soc_percentage_, other->battery_soc_percentage_);
  swap(throttle_percentage_cmd_, other->throttle_percentage_cmd_);
  swap(brake_percentage_cmd_, other->brake_percentage_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chassis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChassisGPS::InitAsDefaultInstance() {
}
class ChassisGPS::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisGPS>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_compass_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pdop(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_gps_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_inferred(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_vdop(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_num_satellites(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gps_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

ChassisGPS::ChassisGPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.canbus.ChassisGPS)
}
ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
  // @@protoc_insertion_point(copy_constructor:control.canbus.ChassisGPS)
}

void ChassisGPS::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_satellites_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:control.canbus.ChassisGPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChassisGPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChassisGPS::ArenaDtor(void* object) {
  ChassisGPS* _this = reinterpret_cast< ChassisGPS* >(object);
  (void)_this;
}
void ChassisGPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChassisGPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisGPS& ChassisGPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisGPS_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:control.canbus.ChassisGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(seconds_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&compass_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&compass_direction_)) + sizeof(heading_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&hdop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_satellites_) -
        reinterpret_cast<char*>(&hdop_)) + sizeof(num_satellites_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisGPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool gps_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gps_valid(&has_bits);
          gps_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_day(&has_bits);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hours(&has_bits);
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_minutes(&has_bits);
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double compass_direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_compass_direction(&has_bits);
          compass_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pdop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_pdop(&has_bits);
          pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_gps_fault = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_gps_fault(&has_bits);
          is_gps_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_inferred = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_inferred(&has_bits);
          is_inferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double altitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hdop = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_hdop(&has_bits);
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vdop = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_vdop(&has_bits);
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.GpsQuality quality = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::GpsQuality_IsValid(val))) {
            _internal_set_quality(static_cast<::control::canbus::GpsQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_satellites = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_num_satellites(&has_bits);
          num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gps_speed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_gps_speed(&has_bits);
          gps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisGPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.canbus.ChassisGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gps_valid(), target);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_year(), target);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_day(), target);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hours(), target);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_minutes(), target);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_seconds(), target);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_compass_direction(), target);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_pdop(), target);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_gps_fault(), target);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_inferred(), target);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_altitude(), target);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_heading(), target);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_hdop(), target);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_vdop(), target);
  }

  // optional .control.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_quality(), target);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_num_satellites(), target);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_gps_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.canbus.ChassisGPS)
  return target;
}

size_t ChassisGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.canbus.ChassisGPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 year = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_year());
    }

    // optional int32 month = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_month());
    }

    // optional int32 day = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_day());
    }

    // optional int32 hours = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hours());
    }

    // optional int32 minutes = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minutes());
    }

    // optional int32 seconds = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seconds());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double compass_direction = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double pdop = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional bool gps_valid = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_gps_fault = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_inferred = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional .control.canbus.GpsQuality quality = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
    }

    // optional double altitude = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double heading = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double hdop = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double vdop = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double gps_speed = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional int32 num_satellites = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_satellites());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisGPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisGPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisGPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.canbus.ChassisGPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.canbus.ChassisGPS)
    MergeFrom(*source);
  }
}

void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000080u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      pdop_ = from.pdop_;
    }
    if (cached_has_bits & 0x00000400u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00004000u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00020000u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_speed_ = from.gps_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      num_satellites_ = from.num_satellites_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisGPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {
  return true;
}

void ChassisGPS::InternalSwap(ChassisGPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChassisGPS, num_satellites_)
      + sizeof(ChassisGPS::num_satellites_)
      - PROTOBUF_FIELD_OFFSET(ChassisGPS, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisGPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WheelSpeed::InitAsDefaultInstance() {
}
class WheelSpeed::_Internal {
 public:
  using HasBits = decltype(std::declval<WheelSpeed>()._has_bits_);
  static void set_has_is_wheel_spd_rr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wheel_direction_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wheel_spd_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_wheel_spd_rl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wheel_direction_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wheel_spd_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_wheel_spd_fr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wheel_direction_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wheel_spd_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_wheel_spd_fl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wheel_direction_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wheel_spd_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WheelSpeed::WheelSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.canbus.WheelSpeed)
}
WheelSpeed::WheelSpeed(const WheelSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wheel_spd_rr_, &from.wheel_spd_rr_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_direction_fl_) -
    reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(wheel_direction_fl_));
  // @@protoc_insertion_point(copy_constructor:control.canbus.WheelSpeed)
}

void WheelSpeed::SharedCtor() {
  ::memset(&wheel_spd_rr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_wheel_spd_fl_valid_) -
      reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(is_wheel_spd_fl_valid_));
  wheel_direction_rr_ = 3;
  wheel_direction_rl_ = 3;
  wheel_direction_fr_ = 3;
  wheel_direction_fl_ = 3;
}

WheelSpeed::~WheelSpeed() {
  // @@protoc_insertion_point(destructor:control.canbus.WheelSpeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WheelSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WheelSpeed::ArenaDtor(void* object) {
  WheelSpeed* _this = reinterpret_cast< WheelSpeed* >(object);
  (void)_this;
}
void WheelSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WheelSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WheelSpeed& WheelSpeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WheelSpeed_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void WheelSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:control.canbus.WheelSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&wheel_spd_rr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_wheel_spd_fl_valid_) -
        reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(is_wheel_spd_fl_valid_));
  }
  if (cached_has_bits & 0x00000f00u) {
    wheel_direction_rr_ = 3;
    wheel_direction_rl_ = 3;
    wheel_direction_fr_ = 3;
    wheel_direction_fl_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WheelSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_wheel_spd_rr_valid = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_wheel_spd_rr_valid(&has_bits);
          is_wheel_spd_rr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rr(static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_rr = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_wheel_spd_rr(&has_bits);
          wheel_spd_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_rl_valid = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_wheel_spd_rl_valid(&has_bits);
          is_wheel_spd_rl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rl(static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_rl = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_wheel_spd_rl(&has_bits);
          wheel_spd_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fr_valid = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_wheel_spd_fr_valid(&has_bits);
          is_wheel_spd_fr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fr(static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_fr = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_wheel_spd_fr(&has_bits);
          wheel_spd_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fl_valid = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_wheel_spd_fl_valid(&has_bits);
          is_wheel_spd_fl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fl(static_cast<::control::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_fl = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_wheel_spd_fl(&has_bits);
          wheel_spd_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WheelSpeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.canbus.WheelSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_wheel_spd_rr_valid(), target);
  }

  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_wheel_spd_rl_valid(), target);
  }

  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_wheel_spd_fr_valid(), target);
  }

  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_wheel_spd_fl_valid(), target);
  }

  // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_wheel_spd_fl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.canbus.WheelSpeed)
  return target;
}

size_t WheelSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.canbus.WheelSpeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double wheel_spd_rr = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 6 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fr = 9 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fl = 12 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool is_wheel_spd_rr_valid = 1 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 4 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fr_valid = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_rr());
    }

    // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_rl());
    }

    // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_fr());
    }

    // optional .control.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_fl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WheelSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.canbus.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WheelSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.canbus.WheelSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.canbus.WheelSpeed)
    MergeFrom(*source);
  }
}

void WheelSpeed::MergeFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.canbus.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      wheel_spd_rr_ = from.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_spd_rl_ = from.wheel_spd_rl_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheel_spd_fr_ = from.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheel_spd_fl_ = from.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wheel_spd_rr_valid_ = from.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_wheel_spd_rl_valid_ = from.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_wheel_spd_fr_valid_ = from.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_wheel_spd_fl_valid_ = from.is_wheel_spd_fl_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      wheel_direction_rr_ = from.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheel_direction_rl_ = from.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheel_direction_fr_ = from.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheel_direction_fl_ = from.wheel_direction_fl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WheelSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelSpeed::CopyFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelSpeed::IsInitialized() const {
  return true;
}

void WheelSpeed::InternalSwap(WheelSpeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WheelSpeed, is_wheel_spd_fl_valid_)
      + sizeof(WheelSpeed::is_wheel_spd_fl_valid_)
      - PROTOBUF_FIELD_OFFSET(WheelSpeed, wheel_spd_rr_)>(
          reinterpret_cast<char*>(&wheel_spd_rr_),
          reinterpret_cast<char*>(&other->wheel_spd_rr_));
  swap(wheel_direction_rr_, other->wheel_direction_rr_);
  swap(wheel_direction_rl_, other->wheel_direction_rl_);
  swap(wheel_direction_fr_, other->wheel_direction_fr_);
  swap(wheel_direction_fl_, other->wheel_direction_fl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WheelSpeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sonar::InitAsDefaultInstance() {
  ::control::canbus::_Sonar_default_instance_._instance.get_mutable()->translation_ = const_cast< ::control::common::Point3D*>(
      ::control::common::Point3D::internal_default_instance());
  ::control::canbus::_Sonar_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::control::common::Quaternion*>(
      ::control::common::Quaternion::internal_default_instance());
}
class Sonar::_Internal {
 public:
  using HasBits = decltype(std::declval<Sonar>()._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::common::Point3D& translation(const Sonar* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::common::Quaternion& rotation(const Sonar* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::control::common::Point3D&
Sonar::_Internal::translation(const Sonar* msg) {
  return *msg->translation_;
}
const ::control::common::Quaternion&
Sonar::_Internal::rotation(const Sonar* msg) {
  return *msg->rotation_;
}
void Sonar::clear_translation() {
  if (translation_ != nullptr) translation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Sonar::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Sonar::Sonar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.canbus.Sonar)
}
Sonar::Sonar(const Sonar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::control::common::Point3D(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::control::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  range_ = from.range_;
  // @@protoc_insertion_point(copy_constructor:control.canbus.Sonar)
}

void Sonar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(range_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:control.canbus.Sonar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sonar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Sonar::ArenaDtor(void* object) {
  Sonar* _this = reinterpret_cast< Sonar* >(object);
  (void)_this;
}
void Sonar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sonar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sonar& Sonar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sonar_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:control.canbus.Sonar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(translation_ != nullptr);
      translation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
  }
  range_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sonar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Point3D translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Quaternion rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sonar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.canbus.Sonar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double range = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_range(), target);
  }

  // optional .control.common.Point3D translation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translation(this), target, stream);
  }

  // optional .control.common.Quaternion rotation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.canbus.Sonar)
  return target;
}

size_t Sonar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.canbus.Sonar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .control.common.Point3D translation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translation_);
    }

    // optional .control.common.Quaternion rotation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // optional double range = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sonar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.canbus.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sonar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sonar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.canbus.Sonar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.canbus.Sonar)
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.canbus.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_translation()->::control::common::Point3D::MergeFrom(from._internal_translation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rotation()->::control::common::Quaternion::MergeFrom(from._internal_rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      range_ = from.range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sonar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  return true;
}

void Sonar::InternalSwap(Sonar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sonar, range_)
      + sizeof(Sonar::range_)
      - PROTOBUF_FIELD_OFFSET(Sonar, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sonar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Surround::InitAsDefaultInstance() {
}
class Surround::_Internal {
 public:
  using HasBits = decltype(std::declval<Surround>()._has_bits_);
  static void set_has_cross_traffic_alert_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cross_traffic_alert_left_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_blind_spot_left_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blind_spot_left_alert_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cross_traffic_alert_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cross_traffic_alert_right_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_blind_spot_right_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_blind_spot_right_alert_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sonar00(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sonar01(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sonar02(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sonar03(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sonar04(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sonar05(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sonar06(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sonar07(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sonar08(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sonar09(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sonar10(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_sonar11(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_sonar_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_sonar_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

Surround::Surround(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sonar_range_(arena),
  sonar_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.canbus.Surround)
}
Surround::Surround(const Surround& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sonar_range_(from.sonar_range_),
      sonar_(from.sonar_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cross_traffic_alert_left_, &from.cross_traffic_alert_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&sonar_fault_) -
    reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(sonar_fault_));
  // @@protoc_insertion_point(copy_constructor:control.canbus.Surround)
}

void Surround::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  ::memset(&cross_traffic_alert_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sonar_fault_) -
      reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(sonar_fault_));
}

Surround::~Surround() {
  // @@protoc_insertion_point(destructor:control.canbus.Surround)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Surround::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Surround::ArenaDtor(void* object) {
  Surround* _this = reinterpret_cast< Surround* >(object);
  (void)_this;
}
void Surround::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Surround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Surround& Surround::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Surround_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void Surround::Clear() {
// @@protoc_insertion_point(message_clear_start:control.canbus.Surround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sonar_range_.Clear();
  sonar_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cross_traffic_alert_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blind_spot_right_alert_enabled_) -
        reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(blind_spot_right_alert_enabled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&sonar00_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sonar07_) -
        reinterpret_cast<char*>(&sonar00_)) + sizeof(sonar07_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&sonar08_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sonar_fault_) -
        reinterpret_cast<char*>(&sonar08_)) + sizeof(sonar_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Surround::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool cross_traffic_alert_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cross_traffic_alert_left(&has_bits);
          cross_traffic_alert_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cross_traffic_alert_left_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cross_traffic_alert_left_enabled(&has_bits);
          cross_traffic_alert_left_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool blind_spot_left_alert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_blind_spot_left_alert(&has_bits);
          blind_spot_left_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool blind_spot_left_alert_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_blind_spot_left_alert_enabled(&has_bits);
          blind_spot_left_alert_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cross_traffic_alert_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cross_traffic_alert_right(&has_bits);
          cross_traffic_alert_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cross_traffic_alert_right_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cross_traffic_alert_right_enabled(&has_bits);
          cross_traffic_alert_right_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool blind_spot_right_alert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_blind_spot_right_alert(&has_bits);
          blind_spot_right_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool blind_spot_right_alert_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_blind_spot_right_alert_enabled(&has_bits);
          blind_spot_right_alert_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double sonar00 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_sonar00(&has_bits);
          sonar00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar01 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_sonar01(&has_bits);
          sonar01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar02 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_sonar02(&has_bits);
          sonar02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar03 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_sonar03(&has_bits);
          sonar03_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar04 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_sonar04(&has_bits);
          sonar04_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar05 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_sonar05(&has_bits);
          sonar05_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar06 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_sonar06(&has_bits);
          sonar06_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar07 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_sonar07(&has_bits);
          sonar07_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar08 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_sonar08(&has_bits);
          sonar08_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar09 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_sonar09(&has_bits);
          sonar09_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_sonar10(&has_bits);
          sonar10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sonar11 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_sonar11(&has_bits);
          sonar11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool sonar_enabled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_sonar_enabled(&has_bits);
          sonar_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sonar_fault = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_sonar_fault(&has_bits);
          sonar_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double sonar_range = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_sonar_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<185>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_sonar_range(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.canbus.Sonar sonar = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sonar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Surround::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.canbus.Surround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cross_traffic_alert_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_cross_traffic_alert_left(), target);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cross_traffic_alert_left_enabled(), target);
  }

  // optional bool blind_spot_left_alert = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_blind_spot_left_alert(), target);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_blind_spot_left_alert_enabled(), target);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cross_traffic_alert_right(), target);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cross_traffic_alert_right_enabled(), target);
  }

  // optional bool blind_spot_right_alert = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_blind_spot_right_alert(), target);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_blind_spot_right_alert_enabled(), target);
  }

  // optional double sonar00 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_sonar00(), target);
  }

  // optional double sonar01 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_sonar01(), target);
  }

  // optional double sonar02 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sonar02(), target);
  }

  // optional double sonar03 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_sonar03(), target);
  }

  // optional double sonar04 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_sonar04(), target);
  }

  // optional double sonar05 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_sonar05(), target);
  }

  // optional double sonar06 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_sonar06(), target);
  }

  // optional double sonar07 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_sonar07(), target);
  }

  // optional double sonar08 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_sonar08(), target);
  }

  // optional double sonar09 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_sonar09(), target);
  }

  // optional double sonar10 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_sonar10(), target);
  }

  // optional double sonar11 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_sonar11(), target);
  }

  // optional bool sonar_enabled = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_sonar_enabled(), target);
  }

  // optional bool sonar_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_sonar_fault(), target);
  }

  // repeated double sonar_range = 23;
  for (int i = 0, n = this->_internal_sonar_range_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_sonar_range(i), target);
  }

  // repeated .control.canbus.Sonar sonar = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sonar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_sonar(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.canbus.Surround)
  return target;
}

size_t Surround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.canbus.Surround)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sonar_range = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sonar_range_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sonar_range_size());
    total_size += data_size;
  }

  // repeated .control.canbus.Sonar sonar = 24;
  total_size += 2UL * this->_internal_sonar_size();
  for (const auto& msg : this->sonar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool cross_traffic_alert_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_left_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert_enabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double sonar00 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double sonar01 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double sonar02 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double sonar03 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double sonar04 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double sonar05 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double sonar06 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double sonar07 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional double sonar08 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double sonar09 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double sonar10 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double sonar11 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional bool sonar_enabled = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool sonar_fault = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surround::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.canbus.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  const Surround* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Surround>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.canbus.Surround)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.canbus.Surround)
    MergeFrom(*source);
  }
}

void Surround::MergeFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.canbus.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sonar_range_.MergeFrom(from.sonar_range_);
  sonar_.MergeFrom(from.sonar_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cross_traffic_alert_left_ = from.cross_traffic_alert_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      cross_traffic_alert_left_enabled_ = from.cross_traffic_alert_left_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      blind_spot_left_alert_ = from.blind_spot_left_alert_;
    }
    if (cached_has_bits & 0x00000008u) {
      blind_spot_left_alert_enabled_ = from.blind_spot_left_alert_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      cross_traffic_alert_right_ = from.cross_traffic_alert_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      cross_traffic_alert_right_enabled_ = from.cross_traffic_alert_right_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      blind_spot_right_alert_ = from.blind_spot_right_alert_;
    }
    if (cached_has_bits & 0x00000080u) {
      blind_spot_right_alert_enabled_ = from.blind_spot_right_alert_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sonar00_ = from.sonar00_;
    }
    if (cached_has_bits & 0x00000200u) {
      sonar01_ = from.sonar01_;
    }
    if (cached_has_bits & 0x00000400u) {
      sonar02_ = from.sonar02_;
    }
    if (cached_has_bits & 0x00000800u) {
      sonar03_ = from.sonar03_;
    }
    if (cached_has_bits & 0x00001000u) {
      sonar04_ = from.sonar04_;
    }
    if (cached_has_bits & 0x00002000u) {
      sonar05_ = from.sonar05_;
    }
    if (cached_has_bits & 0x00004000u) {
      sonar06_ = from.sonar06_;
    }
    if (cached_has_bits & 0x00008000u) {
      sonar07_ = from.sonar07_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      sonar08_ = from.sonar08_;
    }
    if (cached_has_bits & 0x00020000u) {
      sonar09_ = from.sonar09_;
    }
    if (cached_has_bits & 0x00040000u) {
      sonar10_ = from.sonar10_;
    }
    if (cached_has_bits & 0x00080000u) {
      sonar11_ = from.sonar11_;
    }
    if (cached_has_bits & 0x00100000u) {
      sonar_enabled_ = from.sonar_enabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      sonar_fault_ = from.sonar_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Surround::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surround::CopyFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surround::IsInitialized() const {
  return true;
}

void Surround::InternalSwap(Surround* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sonar_range_.InternalSwap(&other->sonar_range_);
  sonar_.InternalSwap(&other->sonar_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Surround, sonar_fault_)
      + sizeof(Surround::sonar_fault_)
      - PROTOBUF_FIELD_OFFSET(Surround, cross_traffic_alert_left_)>(
          reinterpret_cast<char*>(&cross_traffic_alert_left_),
          reinterpret_cast<char*>(&other->cross_traffic_alert_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Surround::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void License::InitAsDefaultInstance() {
}
class License::_Internal {
 public:
  using HasBits = decltype(std::declval<License>()._has_bits_);
  static void set_has_vin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

License::License(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.canbus.License)
}
License::License(const License& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vin()) {
    vin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vin(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:control.canbus.License)
}

void License::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

License::~License() {
  // @@protoc_insertion_point(destructor:control.canbus.License)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void License::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void License::ArenaDtor(void* object) {
  License* _this = reinterpret_cast< License* >(object);
  (void)_this;
}
void License::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void License::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const License& License::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_License_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void License::Clear() {
// @@protoc_insertion_point(message_clear_start:control.canbus.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vin_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* License::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string vin = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.canbus.License.vin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* License::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.canbus.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vin().data(), static_cast<int>(this->_internal_vin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.canbus.License.vin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.canbus.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.canbus.License)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string vin = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void License::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  const License* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<License>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.canbus.License)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.canbus.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vin()) {
    _internal_set_vin(from._internal_vin());
  }
}

void License::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::InternalSwap(License* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vin_.Swap(&other->vin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata License::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckResponse::InitAsDefaultInstance() {
}
class CheckResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckResponse>()._has_bits_);
  static void set_has_is_eps_online(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_epb_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_esp_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_vtog_online(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_scu_online(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_switch_online(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_vcu_online(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CheckResponse::CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.canbus.CheckResponse)
}
CheckResponse::CheckResponse(const CheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_eps_online_, &from.is_eps_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_vcu_online_) -
    reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  // @@protoc_insertion_point(copy_constructor:control.canbus.CheckResponse)
}

void CheckResponse::SharedCtor() {
  ::memset(&is_eps_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
}

CheckResponse::~CheckResponse() {
  // @@protoc_insertion_point(destructor:control.canbus.CheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckResponse::ArenaDtor(void* object) {
  CheckResponse* _this = reinterpret_cast< CheckResponse* >(object);
  (void)_this;
}
void CheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckResponse& CheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckResponse_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void CheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:control.canbus.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&is_eps_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_vcu_online_) -
        reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_eps_online = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_eps_online(&has_bits);
          is_eps_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_epb_online = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_epb_online(&has_bits);
          is_epb_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_esp_online = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_esp_online(&has_bits);
          is_esp_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vtog_online = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_vtog_online(&has_bits);
          is_vtog_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_scu_online = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_scu_online(&has_bits);
          is_scu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_switch_online = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_switch_online(&has_bits);
          is_switch_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vcu_online = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_vcu_online(&has_bits);
          is_vcu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.canbus.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_online = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_eps_online(), target);
  }

  // optional bool is_epb_online = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_epb_online(), target);
  }

  // optional bool is_esp_online = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_esp_online(), target);
  }

  // optional bool is_vtog_online = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_vtog_online(), target);
  }

  // optional bool is_scu_online = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_scu_online(), target);
  }

  // optional bool is_switch_online = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_switch_online(), target);
  }

  // optional bool is_vcu_online = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_vcu_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.canbus.CheckResponse)
  return target;
}

size_t CheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.canbus.CheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool is_eps_online = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_online = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_online = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_vtog_online = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_scu_online = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_switch_online = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_vcu_online = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.canbus.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.canbus.CheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.canbus.CheckResponse)
    MergeFrom(*source);
  }
}

void CheckResponse::MergeFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.canbus.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      is_eps_online_ = from.is_eps_online_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_epb_online_ = from.is_epb_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_esp_online_ = from.is_esp_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_vtog_online_ = from.is_vtog_online_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_scu_online_ = from.is_scu_online_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_switch_online_ = from.is_switch_online_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_vcu_online_ = from.is_vcu_online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.canbus.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponse::CopyFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.canbus.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse::IsInitialized() const {
  return true;
}

void CheckResponse::InternalSwap(CheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckResponse, is_vcu_online_)
      + sizeof(CheckResponse::is_vcu_online_)
      - PROTOBUF_FIELD_OFFSET(CheckResponse, is_eps_online_)>(
          reinterpret_cast<char*>(&is_eps_online_),
          reinterpret_cast<char*>(&other->is_eps_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::canbus::Chassis* Arena::CreateMaybeMessage< ::control::canbus::Chassis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::canbus::Chassis >(arena);
}
template<> PROTOBUF_NOINLINE ::control::canbus::ChassisGPS* Arena::CreateMaybeMessage< ::control::canbus::ChassisGPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::canbus::ChassisGPS >(arena);
}
template<> PROTOBUF_NOINLINE ::control::canbus::WheelSpeed* Arena::CreateMaybeMessage< ::control::canbus::WheelSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::canbus::WheelSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::control::canbus::Sonar* Arena::CreateMaybeMessage< ::control::canbus::Sonar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::canbus::Sonar >(arena);
}
template<> PROTOBUF_NOINLINE ::control::canbus::Surround* Arena::CreateMaybeMessage< ::control::canbus::Surround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::canbus::Surround >(arena);
}
template<> PROTOBUF_NOINLINE ::control::canbus::License* Arena::CreateMaybeMessage< ::control::canbus::License >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::canbus::License >(arena);
}
template<> PROTOBUF_NOINLINE ::control::canbus::CheckResponse* Arena::CreateMaybeMessage< ::control::canbus::CheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::canbus::CheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

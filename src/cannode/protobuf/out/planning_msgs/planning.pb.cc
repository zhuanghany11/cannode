// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_msgs/planning.proto

#include "planning_msgs/planning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fchassis_5fmsgs_2fjoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointAngle_common_5fmsgs_2fchassis_5fmsgs_2fjoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngageAdvice_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointLLH_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DecisionResult_planning_5fmsgs_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EStop_planning_5fmsgs_2fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RSSInfo_planning_5fmsgs_2fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_planning_5fmsgs_2fplanning_5finternal_2eproto;
namespace control {
namespace planning {
class EStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EStop> _instance;
} _EStop_default_instance_;
class TaskStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskStats> _instance;
} _TaskStats_default_instance_;
class LatencyStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatencyStats> _instance;
} _LatencyStats_default_instance_;
class RSSInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RSSInfo> _instance;
} _RSSInfo_default_instance_;
class ADCTrajectory_CriticalRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADCTrajectory_CriticalRegion> _instance;
} _ADCTrajectory_CriticalRegion_default_instance_;
class ADCTrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADCTrajectory> _instance;
} _ADCTrajectory_default_instance_;
}  // namespace planning
}  // namespace control
static void InitDefaultsscc_info_ADCTrajectory_planning_5fmsgs_2fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::planning::_ADCTrajectory_default_instance_;
    new (ptr) ::control::planning::ADCTrajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::planning::ADCTrajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_ADCTrajectory_planning_5fmsgs_2fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_ADCTrajectory_planning_5fmsgs_2fplanning_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_EStop_planning_5fmsgs_2fplanning_2eproto.base,
      &scc_info_Debug_planning_5fmsgs_2fplanning_5finternal_2eproto.base,
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
      &scc_info_PathPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
      &scc_info_DecisionResult_planning_5fmsgs_2fdecision_2eproto.base,
      &scc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto.base,
      &scc_info_EngageAdvice_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto.base,
      &scc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto.base,
      &scc_info_PointLLH_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_JointAngle_common_5fmsgs_2fchassis_5fmsgs_2fjoint_2eproto.base,
      &scc_info_RSSInfo_planning_5fmsgs_2fplanning_2eproto.base,}};

static void InitDefaultsscc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::planning::_ADCTrajectory_CriticalRegion_default_instance_;
    new (ptr) ::control::planning::ADCTrajectory_CriticalRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::planning::ADCTrajectory_CriticalRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto}, {
      &scc_info_Polygon_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_EStop_planning_5fmsgs_2fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::planning::_EStop_default_instance_;
    new (ptr) ::control::planning::EStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::planning::EStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EStop_planning_5fmsgs_2fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EStop_planning_5fmsgs_2fplanning_2eproto}, {}};

static void InitDefaultsscc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::planning::_LatencyStats_default_instance_;
    new (ptr) ::control::planning::LatencyStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::planning::LatencyStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto}, {
      &scc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto.base,}};

static void InitDefaultsscc_info_RSSInfo_planning_5fmsgs_2fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::planning::_RSSInfo_default_instance_;
    new (ptr) ::control::planning::RSSInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::planning::RSSInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RSSInfo_planning_5fmsgs_2fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RSSInfo_planning_5fmsgs_2fplanning_2eproto}, {}};

static void InitDefaultsscc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::planning::_TaskStats_default_instance_;
    new (ptr) ::control::planning::TaskStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::planning::TaskStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_planning_5fmsgs_2fplanning_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_planning_5fmsgs_2fplanning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_planning_5fmsgs_2fplanning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::planning::EStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::planning::EStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::planning::EStop, is_estop_),
  PROTOBUF_FIELD_OFFSET(::control::planning::EStop, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, name_),
  PROTOBUF_FIELD_OFFSET(::control::planning::TaskStats, time_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, task_stats_),
  PROTOBUF_FIELD_OFFSET(::control::planning::LatencyStats, init_frame_time_ms_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, is_rss_safe_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, cur_dist_lon_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, rss_safe_dist_lon_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, acc_lon_range_minimum_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, acc_lon_range_maximum_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, acc_lat_left_range_minimum_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, acc_lat_left_range_maximum_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, acc_lat_right_range_minimum_),
  PROTOBUF_FIELD_OFFSET(::control::planning::RSSInfo, acc_lat_right_range_maximum_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory_CriticalRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory_CriticalRegion, region_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, header_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, total_path_length_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, total_path_time_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, reference_speed_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, map_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, estop_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, debug_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, is_replan_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, gear_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, path_point_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, decision_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, latency_stats_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, routing_header_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, right_of_way_status_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, critical_region_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, trajectory_type_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, replan_reason_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, car_in_dead_end_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, point_llh_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, lift_weight_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, align_guide_loc_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, opendoor_status_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, pto_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, plan_state_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, joint_angle_),
  PROTOBUF_FIELD_OFFSET(::control::planning::ADCTrajectory, rss_info_),
  1,
  11,
  12,
  13,
  14,
  2,
  3,
  16,
  15,
  ~0u,
  ~0u,
  4,
  5,
  6,
  18,
  7,
  8,
  19,
  0,
  17,
  ~0u,
  21,
  20,
  22,
  23,
  24,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::control::planning::EStop)},
  { 9, 16, sizeof(::control::planning::TaskStats)},
  { 18, 26, sizeof(::control::planning::LatencyStats)},
  { 29, 43, sizeof(::control::planning::RSSInfo)},
  { 52, -1, sizeof(::control::planning::ADCTrajectory_CriticalRegion)},
  { 58, 91, sizeof(::control::planning::ADCTrajectory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::planning::_EStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::planning::_TaskStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::planning::_LatencyStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::planning::_RSSInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::planning::_ADCTrajectory_CriticalRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::planning::_ADCTrajectory_default_instance_),
};

const char descriptor_table_protodef_planning_5fmsgs_2fplanning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034planning_msgs/planning.proto\022\020control."
  "planning\032&common_msgs/chassis_msgs/chass"
  "is.proto\032$common_msgs/chassis_msgs/joint"
  ".proto\032(common_msgs/basic_msgs/drive_sta"
  "te.proto\032%common_msgs/basic_msgs/geometr"
  "y.proto\032#common_msgs/basic_msgs/header.p"
  "roto\032&common_msgs/basic_msgs/pnc_point.p"
  "roto\032\034planning_msgs/decision.proto\032%plan"
  "ning_msgs/planning_internal.proto\")\n\005ESt"
  "op\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002 \001(\t\"*\n\t"
  "TaskStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_ms\030\002 \001(\001"
  "\"r\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001 \001(\001\022"
  "/\n\ntask_stats\030\002 \003(\0132\033.control.planning.T"
  "askStats\022\032\n\022init_frame_time_ms\030\003 \001(\001\"\237\002\n"
  "\007RSSInfo\022\023\n\013is_rss_safe\030\001 \001(\010\022\024\n\014cur_dis"
  "t_lon\030\002 \001(\001\022\031\n\021rss_safe_dist_lon\030\003 \001(\001\022\035"
  "\n\025acc_lon_range_minimum\030\004 \001(\001\022\035\n\025acc_lon"
  "_range_maximum\030\005 \001(\001\022\"\n\032acc_lat_left_ran"
  "ge_minimum\030\006 \001(\001\022\"\n\032acc_lat_left_range_m"
  "aximum\030\007 \001(\001\022#\n\033acc_lat_right_range_mini"
  "mum\030\010 \001(\001\022#\n\033acc_lat_right_range_maximum"
  "\030\t \001(\001\"\355\n\n\rADCTrajectory\022&\n\006header\030\001 \001(\013"
  "2\026.control.common.Header\022\031\n\021total_path_l"
  "ength\030\002 \001(\001\022\027\n\017total_path_time\030\003 \001(\001\022\027\n\017"
  "reference_speed\030\004 \001(\001\022\027\n\017map_speed_limit"
  "\030\005 \001(\001\022&\n\005estop\030\006 \001(\0132\027.control.planning"
  ".EStop\022/\n\005debug\030\010 \001(\0132 .control.planning"
  "_internal.Debug\022\030\n\tis_replan\030\t \001(\010:\005fals"
  "e\0222\n\004gear\030\n \001(\0162$.control.canbus.Chassis"
  ".GearPosition\0229\n\020trajectory_point\030\014 \003(\0132"
  "\037.control.common.TrajectoryPoint\022-\n\npath"
  "_point\030\r \003(\0132\031.control.common.PathPoint\022"
  "2\n\010decision\030\016 \001(\0132 .control.planning.Dec"
  "isionResult\0225\n\rlatency_stats\030\017 \001(\0132\036.con"
  "trol.planning.LatencyStats\022.\n\016routing_he"
  "ader\030\020 \001(\0132\026.control.common.Header\022M\n\023ri"
  "ght_of_way_status\030\021 \001(\01620.control.planni"
  "ng.ADCTrajectory.RightOfWayStatus\0223\n\reng"
  "age_advice\030\023 \001(\0132\034.control.common.Engage"
  "Advice\022G\n\017critical_region\030\024 \001(\0132..contro"
  "l.planning.ADCTrajectory.CriticalRegion\022"
  "P\n\017trajectory_type\030\025 \001(\0162..control.plann"
  "ing.ADCTrajectory.TrajectoryType:\007UNKNOW"
  "N\022\025\n\rreplan_reason\030\026 \001(\t\022\027\n\017car_in_dead_"
  "end\030\030 \001(\010\022+\n\tpoint_llh\030\031 \003(\0132\030.control.c"
  "ommon.PointLLH\022\023\n\013lift_weight\030\032 \001(\005\022\027\n\017a"
  "lign_guide_loc\030\033 \001(\001\022\027\n\017opendoor_status\030"
  "\034 \001(\005\022\013\n\003pto\030\035 \001(\r\022\022\n\nplan_state\030\036 \001(\005\022/"
  "\n\013joint_angle\030\037 \001(\0132\032.control.canbus.Joi"
  "ntAngle\022+\n\010rss_info\030d \001(\0132\031.control.plan"
  "ning.RSSInfo\0329\n\016CriticalRegion\022\'\n\006region"
  "\030\001 \003(\0132\027.control.common.Polygon\"2\n\020Right"
  "OfWayStatus\022\017\n\013UNPROTECTED\020\000\022\r\n\tPROTECTE"
  "D\020\001\"q\n\016TrajectoryType\022\013\n\007UNKNOWN\020\000\022\n\n\006NO"
  "RMAL\020\001\022\021\n\rPATH_FALLBACK\020\002\022\022\n\016SPEED_FALLB"
  "ACK\020\003\022\017\n\013PATH_REUSED\020\004\022\016\n\nOPEN_SPACE\020\005*_"
  "\n\007JucType\022\013\n\007UNKNOWN\020\000\022\013\n\007IN_ROAD\020\001\022\016\n\nC"
  "ROSS_ROAD\020\002\022\r\n\tFORK_ROAD\020\003\022\r\n\tMAIN_SIDE\020"
  "\004\022\014\n\010DEAD_END\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_planning_5fmsgs_2fplanning_2eproto_deps[8] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto,
  &::descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto,
  &::descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fjoint_2eproto,
  &::descriptor_table_planning_5fmsgs_2fdecision_2eproto,
  &::descriptor_table_planning_5fmsgs_2fplanning_5finternal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_planning_5fmsgs_2fplanning_2eproto_sccs[6] = {
  &scc_info_ADCTrajectory_planning_5fmsgs_2fplanning_2eproto.base,
  &scc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto.base,
  &scc_info_EStop_planning_5fmsgs_2fplanning_2eproto.base,
  &scc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto.base,
  &scc_info_RSSInfo_planning_5fmsgs_2fplanning_2eproto.base,
  &scc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_planning_5fmsgs_2fplanning_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_5fmsgs_2fplanning_2eproto = {
  false, false, descriptor_table_protodef_planning_5fmsgs_2fplanning_2eproto, "planning_msgs/planning.proto", 2335,
  &descriptor_table_planning_5fmsgs_2fplanning_2eproto_once, descriptor_table_planning_5fmsgs_2fplanning_2eproto_sccs, descriptor_table_planning_5fmsgs_2fplanning_2eproto_deps, 6, 8,
  schemas, file_default_instances, TableStruct_planning_5fmsgs_2fplanning_2eproto::offsets,
  file_level_metadata_planning_5fmsgs_2fplanning_2eproto, 6, file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto, file_level_service_descriptors_planning_5fmsgs_2fplanning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planning_5fmsgs_2fplanning_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto)), true);
namespace control {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto);
  return file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[0];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
constexpr int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto);
  return file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[1];
}
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::PATH_REUSED;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::OPEN_SPACE;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
constexpr int ADCTrajectory::TrajectoryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JucType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fmsgs_2fplanning_2eproto);
  return file_level_enum_descriptors_planning_5fmsgs_2fplanning_2eproto[2];
}
bool JucType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EStop::InitAsDefaultInstance() {
}
class EStop::_Internal {
 public:
  using HasBits = decltype(std::declval<EStop>()._has_bits_);
  static void set_has_is_estop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EStop::EStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.EStop)
}
EStop::EStop(const EStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  is_estop_ = from.is_estop_;
  // @@protoc_insertion_point(copy_constructor:control.planning.EStop)
}

void EStop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EStop_planning_5fmsgs_2fplanning_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_estop_ = false;
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:control.planning.EStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EStop::ArenaDtor(void* object) {
  EStop* _this = reinterpret_cast< EStop* >(object);
  (void)_this;
}
void EStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EStop& EStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EStop_planning_5fmsgs_2fplanning_2eproto.base);
  return *internal_default_instance();
}


void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.EStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  is_estop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_estop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_estop(&has_bits);
          is_estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.planning.EStop.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.EStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.planning.EStop.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.EStop)
  return target;
}

size_t EStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.planning.EStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional bool is_estop = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.planning.EStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      is_estop_ = from.is_estop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {
  return true;
}

void EStop::InternalSwap(EStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_estop_, other->is_estop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskStats::InitAsDefaultInstance() {
}
class TaskStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskStats>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TaskStats::TaskStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.TaskStats)
}
TaskStats::TaskStats(const TaskStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  time_ms_ = from.time_ms_;
  // @@protoc_insertion_point(copy_constructor:control.planning.TaskStats)
}

void TaskStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ms_ = 0;
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:control.planning.TaskStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskStats::ArenaDtor(void* object) {
  TaskStats* _this = reinterpret_cast< TaskStats* >(object);
  (void)_this;
}
void TaskStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskStats& TaskStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskStats_planning_5fmsgs_2fplanning_2eproto.base);
  return *internal_default_instance();
}


void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.TaskStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  time_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.planning.TaskStats.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_time_ms(&has_bits);
          time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.TaskStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.planning.TaskStats.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.planning.TaskStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.planning.TaskStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.planning.TaskStats)
    MergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ms_ = from.time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {
  return true;
}

void TaskStats::InternalSwap(TaskStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_ms_, other->time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatencyStats::InitAsDefaultInstance() {
}
class LatencyStats::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyStats>()._has_bits_);
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_init_frame_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LatencyStats::LatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      task_stats_(from.task_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  // @@protoc_insertion_point(copy_constructor:control.planning.LatencyStats)
}

void LatencyStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto.base);
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_frame_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:control.planning.LatencyStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatencyStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LatencyStats::ArenaDtor(void* object) {
  LatencyStats* _this = reinterpret_cast< LatencyStats* >(object);
  (void)_this;
}
void LatencyStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyStats& LatencyStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatencyStats_planning_5fmsgs_2fplanning_2eproto.base);
  return *internal_default_instance();
}


void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.LatencyStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_frame_time_ms_) -
        reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double total_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_total_time_ms(&has_bits);
          total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .control.planning.TaskStats task_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double init_frame_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_init_frame_time_ms(&has_bits);
          init_frame_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatencyStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.LatencyStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time_ms(), target);
  }

  // repeated .control.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_task_stats(i), target, stream);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_init_frame_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.planning.LatencyStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.planning.TaskStats task_stats = 2;
  total_size += 1UL * this->_internal_task_stats_size();
  for (const auto& msg : this->task_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double total_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatencyStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.planning.LatencyStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.planning.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_stats_.MergeFrom(from.task_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      init_frame_time_ms_ = from.init_frame_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_stats_.InternalSwap(&other->task_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyStats, init_frame_time_ms_)
      + sizeof(LatencyStats::init_frame_time_ms_)
      - PROTOBUF_FIELD_OFFSET(LatencyStats, total_time_ms_)>(
          reinterpret_cast<char*>(&total_time_ms_),
          reinterpret_cast<char*>(&other->total_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RSSInfo::InitAsDefaultInstance() {
}
class RSSInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RSSInfo>()._has_bits_);
  static void set_has_is_rss_safe(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cur_dist_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rss_safe_dist_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acc_lon_range_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_acc_lon_range_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acc_lat_left_range_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_acc_lat_left_range_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acc_lat_right_range_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_acc_lat_right_range_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

RSSInfo::RSSInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.RSSInfo)
}
RSSInfo::RSSInfo(const RSSInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_dist_lon_, &from.cur_dist_lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:control.planning.RSSInfo)
}

void RSSInfo::SharedCtor() {
  ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_rss_safe_) -
      reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
}

RSSInfo::~RSSInfo() {
  // @@protoc_insertion_point(destructor:control.planning.RSSInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RSSInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RSSInfo::ArenaDtor(void* object) {
  RSSInfo* _this = reinterpret_cast< RSSInfo* >(object);
  (void)_this;
}
void RSSInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSSInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RSSInfo& RSSInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RSSInfo_planning_5fmsgs_2fplanning_2eproto.base);
  return *internal_default_instance();
}


void RSSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.RSSInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_lat_right_range_maximum_) -
        reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(acc_lat_right_range_maximum_));
  }
  is_rss_safe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSSInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_rss_safe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_rss_safe(&has_bits);
          is_rss_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cur_dist_lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cur_dist_lon(&has_bits);
          cur_dist_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rss_safe_dist_lon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_rss_safe_dist_lon(&has_bits);
          rss_safe_dist_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_lon_range_minimum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_acc_lon_range_minimum(&has_bits);
          acc_lon_range_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_lon_range_maximum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_acc_lon_range_maximum(&has_bits);
          acc_lon_range_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_lat_left_range_minimum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_acc_lat_left_range_minimum(&has_bits);
          acc_lat_left_range_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_lat_left_range_maximum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_acc_lat_left_range_maximum(&has_bits);
          acc_lat_left_range_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_lat_right_range_minimum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_acc_lat_right_range_minimum(&has_bits);
          acc_lat_right_range_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_lat_right_range_maximum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_acc_lat_right_range_maximum(&has_bits);
          acc_lat_right_range_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RSSInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.RSSInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_rss_safe(), target);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cur_dist_lon(), target);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rss_safe_dist_lon(), target);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_acc_lon_range_minimum(), target);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acc_lon_range_maximum(), target);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_acc_lat_left_range_minimum(), target);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acc_lat_left_range_maximum(), target);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acc_lat_right_range_minimum(), target);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_acc_lat_right_range_maximum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.RSSInfo)
  return target;
}

size_t RSSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.planning.RSSInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double cur_dist_lon = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rss_safe_dist_lon = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_minimum = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_maximum = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_minimum = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_maximum = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_minimum = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_maximum = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RSSInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RSSInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RSSInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.planning.RSSInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.planning.RSSInfo)
    MergeFrom(*source);
  }
}

void RSSInfo::MergeFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cur_dist_lon_ = from.cur_dist_lon_;
    }
    if (cached_has_bits & 0x00000002u) {
      rss_safe_dist_lon_ = from.rss_safe_dist_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_lon_range_minimum_ = from.acc_lon_range_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_lon_range_maximum_ = from.acc_lon_range_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lat_left_range_minimum_ = from.acc_lat_left_range_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lat_left_range_maximum_ = from.acc_lat_left_range_maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lat_right_range_minimum_ = from.acc_lat_right_range_minimum_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_lat_right_range_maximum_ = from.acc_lat_right_range_maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_rss_safe(from._internal_is_rss_safe());
  }
}

void RSSInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSSInfo::CopyFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSSInfo::IsInitialized() const {
  return true;
}

void RSSInfo::InternalSwap(RSSInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RSSInfo, is_rss_safe_)
      + sizeof(RSSInfo::is_rss_safe_)
      - PROTOBUF_FIELD_OFFSET(RSSInfo, cur_dist_lon_)>(
          reinterpret_cast<char*>(&cur_dist_lon_),
          reinterpret_cast<char*>(&other->cur_dist_lon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RSSInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADCTrajectory_CriticalRegion::InitAsDefaultInstance() {
}
class ADCTrajectory_CriticalRegion::_Internal {
 public:
};

void ADCTrajectory_CriticalRegion::clear_region() {
  region_.Clear();
}
ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  region_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.ADCTrajectory.CriticalRegion)
}
ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      region_(from.region_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:control.planning.ADCTrajectory.CriticalRegion)
}

void ADCTrajectory_CriticalRegion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto.base);
}

ADCTrajectory_CriticalRegion::~ADCTrajectory_CriticalRegion() {
  // @@protoc_insertion_point(destructor:control.planning.ADCTrajectory.CriticalRegion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ADCTrajectory_CriticalRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ADCTrajectory_CriticalRegion::ArenaDtor(void* object) {
  ADCTrajectory_CriticalRegion* _this = reinterpret_cast< ADCTrajectory_CriticalRegion* >(object);
  (void)_this;
}
void ADCTrajectory_CriticalRegion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADCTrajectory_CriticalRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADCTrajectory_CriticalRegion& ADCTrajectory_CriticalRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADCTrajectory_CriticalRegion_planning_5fmsgs_2fplanning_2eproto.base);
  return *internal_default_instance();
}


void ADCTrajectory_CriticalRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.ADCTrajectory.CriticalRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectory_CriticalRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .control.common.Polygon region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_region(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ADCTrajectory_CriticalRegion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.ADCTrajectory.CriticalRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .control.common.Polygon region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_region_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_region(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.ADCTrajectory.CriticalRegion)
  return target;
}

size_t ADCTrajectory_CriticalRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.planning.ADCTrajectory.CriticalRegion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.common.Polygon region = 1;
  total_size += 1UL * this->_internal_region_size();
  for (const auto& msg : this->region_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.planning.ADCTrajectory.CriticalRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory_CriticalRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADCTrajectory_CriticalRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.planning.ADCTrajectory.CriticalRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.planning.ADCTrajectory.CriticalRegion)
    MergeFrom(*source);
  }
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.planning.ADCTrajectory.CriticalRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory_CriticalRegion::IsInitialized() const {
  return true;
}

void ADCTrajectory_CriticalRegion::InternalSwap(ADCTrajectory_CriticalRegion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  region_.InternalSwap(&other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectory_CriticalRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADCTrajectory::InitAsDefaultInstance() {
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->estop_ = const_cast< ::control::planning::EStop*>(
      ::control::planning::EStop::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->debug_ = const_cast< ::control::planning_internal::Debug*>(
      ::control::planning_internal::Debug::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->decision_ = const_cast< ::control::planning::DecisionResult*>(
      ::control::planning::DecisionResult::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->latency_stats_ = const_cast< ::control::planning::LatencyStats*>(
      ::control::planning::LatencyStats::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->routing_header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::control::common::EngageAdvice*>(
      ::control::common::EngageAdvice::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->critical_region_ = const_cast< ::control::planning::ADCTrajectory_CriticalRegion*>(
      ::control::planning::ADCTrajectory_CriticalRegion::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->joint_angle_ = const_cast< ::control::canbus::JointAngle*>(
      ::control::canbus::JointAngle::internal_default_instance());
  ::control::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->rss_info_ = const_cast< ::control::planning::RSSInfo*>(
      ::control::planning::RSSInfo::internal_default_instance());
}
class ADCTrajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<ADCTrajectory>()._has_bits_);
  static const ::control::common::Header& header(const ADCTrajectory* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_total_path_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_reference_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_map_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::control::planning::EStop& estop(const ADCTrajectory* msg);
  static void set_has_estop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::planning_internal::Debug& debug(const ADCTrajectory* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_replan(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::control::planning::DecisionResult& decision(const ADCTrajectory* msg);
  static void set_has_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::planning::LatencyStats& latency_stats(const ADCTrajectory* msg);
  static void set_has_latency_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::control::common::Header& routing_header(const ADCTrajectory* msg);
  static void set_has_routing_header(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_right_of_way_status(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::control::common::EngageAdvice& engage_advice(const ADCTrajectory* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::control::planning::ADCTrajectory_CriticalRegion& critical_region(const ADCTrajectory* msg);
  static void set_has_critical_region(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trajectory_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_replan_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_car_in_dead_end(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lift_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_align_guide_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_opendoor_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_pto(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_plan_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::control::canbus::JointAngle& joint_angle(const ADCTrajectory* msg);
  static void set_has_joint_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::control::planning::RSSInfo& rss_info(const ADCTrajectory* msg);
  static void set_has_rss_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::control::common::Header&
ADCTrajectory::_Internal::header(const ADCTrajectory* msg) {
  return *msg->header_;
}
const ::control::planning::EStop&
ADCTrajectory::_Internal::estop(const ADCTrajectory* msg) {
  return *msg->estop_;
}
const ::control::planning_internal::Debug&
ADCTrajectory::_Internal::debug(const ADCTrajectory* msg) {
  return *msg->debug_;
}
const ::control::planning::DecisionResult&
ADCTrajectory::_Internal::decision(const ADCTrajectory* msg) {
  return *msg->decision_;
}
const ::control::planning::LatencyStats&
ADCTrajectory::_Internal::latency_stats(const ADCTrajectory* msg) {
  return *msg->latency_stats_;
}
const ::control::common::Header&
ADCTrajectory::_Internal::routing_header(const ADCTrajectory* msg) {
  return *msg->routing_header_;
}
const ::control::common::EngageAdvice&
ADCTrajectory::_Internal::engage_advice(const ADCTrajectory* msg) {
  return *msg->engage_advice_;
}
const ::control::planning::ADCTrajectory_CriticalRegion&
ADCTrajectory::_Internal::critical_region(const ADCTrajectory* msg) {
  return *msg->critical_region_;
}
const ::control::canbus::JointAngle&
ADCTrajectory::_Internal::joint_angle(const ADCTrajectory* msg) {
  return *msg->joint_angle_;
}
const ::control::planning::RSSInfo&
ADCTrajectory::_Internal::rss_info(const ADCTrajectory* msg) {
  return *msg->rss_info_;
}
void ADCTrajectory::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectory::clear_debug() {
  if (debug_ != nullptr) debug_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
void ADCTrajectory::clear_decision() {
  if (decision_ != nullptr) decision_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectory::clear_routing_header() {
  if (routing_header_ != nullptr) routing_header_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectory::clear_engage_advice() {
  if (engage_advice_ != nullptr) engage_advice_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ADCTrajectory::clear_point_llh() {
  point_llh_.Clear();
}
void ADCTrajectory::clear_joint_angle() {
  if (joint_angle_ != nullptr) joint_angle_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
ADCTrajectory::ADCTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_point_(arena),
  path_point_(arena),
  point_llh_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_),
      path_point_(from.path_point_),
      point_llh_(from.point_llh_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  replan_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_replan_reason()) {
    replan_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_replan_reason(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_estop()) {
    estop_ = new ::control::planning::EStop(*from.estop_);
  } else {
    estop_ = nullptr;
  }
  if (from._internal_has_debug()) {
    debug_ = new ::control::planning_internal::Debug(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from._internal_has_decision()) {
    decision_ = new ::control::planning::DecisionResult(*from.decision_);
  } else {
    decision_ = nullptr;
  }
  if (from._internal_has_latency_stats()) {
    latency_stats_ = new ::control::planning::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = nullptr;
  }
  if (from._internal_has_routing_header()) {
    routing_header_ = new ::control::common::Header(*from.routing_header_);
  } else {
    routing_header_ = nullptr;
  }
  if (from._internal_has_engage_advice()) {
    engage_advice_ = new ::control::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  if (from._internal_has_critical_region()) {
    critical_region_ = new ::control::planning::ADCTrajectory_CriticalRegion(*from.critical_region_);
  } else {
    critical_region_ = nullptr;
  }
  if (from._internal_has_joint_angle()) {
    joint_angle_ = new ::control::canbus::JointAngle(*from.joint_angle_);
  } else {
    joint_angle_ = nullptr;
  }
  if (from._internal_has_rss_info()) {
    rss_info_ = new ::control::planning::RSSInfo(*from.rss_info_);
  } else {
    rss_info_ = nullptr;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&plan_state_) -
    reinterpret_cast<char*>(&total_path_length_)) + sizeof(plan_state_));
  // @@protoc_insertion_point(copy_constructor:control.planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADCTrajectory_planning_5fmsgs_2fplanning_2eproto.base);
  replan_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plan_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(plan_state_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:control.planning.ADCTrajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ADCTrajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  replan_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete estop_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete decision_;
  if (this != internal_default_instance()) delete latency_stats_;
  if (this != internal_default_instance()) delete routing_header_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete critical_region_;
  if (this != internal_default_instance()) delete joint_angle_;
  if (this != internal_default_instance()) delete rss_info_;
}

void ADCTrajectory::ArenaDtor(void* object) {
  ADCTrajectory* _this = reinterpret_cast< ADCTrajectory* >(object);
  (void)_this;
}
void ADCTrajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADCTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADCTrajectory& ADCTrajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADCTrajectory_planning_5fmsgs_2fplanning_2eproto.base);
  return *internal_default_instance();
}


void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:control.planning.ADCTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  path_point_.Clear();
  point_llh_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      replan_reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(estop_ != nullptr);
      estop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(debug_ != nullptr);
      debug_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(decision_ != nullptr);
      decision_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(latency_stats_ != nullptr);
      latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(routing_header_ != nullptr);
      routing_header_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(engage_advice_ != nullptr);
      engage_advice_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(critical_region_ != nullptr);
      critical_region_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(joint_angle_ != nullptr);
      joint_angle_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(rss_info_ != nullptr);
      rss_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&total_path_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_) -
        reinterpret_cast<char*>(&total_path_length_)) + sizeof(gear_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_replan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pto_) -
        reinterpret_cast<char*>(&is_replan_)) + sizeof(pto_));
  }
  plan_state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double total_path_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_total_path_length(&has_bits);
          total_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double total_path_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_total_path_time(&has_bits);
          total_path_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reference_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_reference_speed(&has_bits);
          reference_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double map_speed_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_map_speed_limit(&has_bits);
          map_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.planning.EStop estop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_estop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.planning_internal.Debug debug = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_replan = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_replan(&has_bits);
          is_replan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.GearPosition gear = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear(static_cast<::control::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .control.common.TrajectoryPoint trajectory_point = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .control.common.PathPoint path_point = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .control.planning.DecisionResult decision = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_decision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.planning.LatencyStats latency_stats = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Header routing_header = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::planning::ADCTrajectory_RightOfWayStatus_IsValid(val))) {
            _internal_set_right_of_way_status(static_cast<::control::planning::ADCTrajectory_RightOfWayStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.common.EngageAdvice engage_advice = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_critical_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::planning::ADCTrajectory_TrajectoryType_IsValid(val))) {
            _internal_set_trajectory_type(static_cast<::control::planning::ADCTrajectory_TrajectoryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string replan_reason = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_replan_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "control.planning.ADCTrajectory.replan_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool car_in_dead_end = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_car_in_dead_end(&has_bits);
          car_in_dead_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .control.common.PointLLH point_llh = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_point_llh(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 lift_weight = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_lift_weight(&has_bits);
          lift_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double align_guide_loc = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_align_guide_loc(&has_bits);
          align_guide_loc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 opendoor_status = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_opendoor_status(&has_bits);
          opendoor_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pto = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_pto(&has_bits);
          pto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 plan_state = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_plan_state(&has_bits);
          plan_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.JointAngle joint_angle = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_joint_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.planning.RSSInfo rss_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rss_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ADCTrajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.planning.ADCTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_path_time(), target);
  }

  // optional double reference_speed = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_reference_speed(), target);
  }

  // optional double map_speed_limit = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_map_speed_limit(), target);
  }

  // optional .control.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::estop(this), target, stream);
  }

  // optional .control.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::debug(this), target, stream);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_replan(), target);
  }

  // optional .control.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_gear(), target);
  }

  // repeated .control.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_trajectory_point(i), target, stream);
  }

  // repeated .control.common.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_path_point(i), target, stream);
  }

  // optional .control.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::decision(this), target, stream);
  }

  // optional .control.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::latency_stats(this), target, stream);
  }

  // optional .control.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::routing_header(this), target, stream);
  }

  // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_right_of_way_status(), target);
  }

  // optional .control.common.EngageAdvice engage_advice = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::engage_advice(this), target, stream);
  }

  // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::critical_region(this), target, stream);
  }

  // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_trajectory_type(), target);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_replan_reason().data(), static_cast<int>(this->_internal_replan_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "control.planning.ADCTrajectory.replan_reason");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_replan_reason(), target);
  }

  // optional bool car_in_dead_end = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_car_in_dead_end(), target);
  }

  // repeated .control.common.PointLLH point_llh = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_llh_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_point_llh(i), target, stream);
  }

  // optional int32 lift_weight = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_lift_weight(), target);
  }

  // optional double align_guide_loc = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_align_guide_loc(), target);
  }

  // optional int32 opendoor_status = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_opendoor_status(), target);
  }

  // optional uint32 pto = 29;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_pto(), target);
  }

  // optional int32 plan_state = 30;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_plan_state(), target);
  }

  // optional .control.canbus.JointAngle joint_angle = 31;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::joint_angle(this), target, stream);
  }

  // optional .control.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::rss_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.planning.ADCTrajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .control.common.TrajectoryPoint trajectory_point = 12;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .control.common.PathPoint path_point = 13;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .control.common.PointLLH point_llh = 25;
  total_size += 2UL * this->_internal_point_llh_size();
  for (const auto& msg : this->point_llh_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string replan_reason = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_replan_reason());
    }

    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .control.planning.EStop estop = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *estop_);
    }

    // optional .control.planning_internal.Debug debug = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_);
    }

    // optional .control.planning.DecisionResult decision = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decision_);
    }

    // optional .control.planning.LatencyStats latency_stats = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latency_stats_);
    }

    // optional .control.common.Header routing_header = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_header_);
    }

    // optional .control.common.EngageAdvice engage_advice = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .control.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *critical_region_);
    }

    // optional .control.canbus.JointAngle joint_angle = 31;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joint_angle_);
    }

    // optional .control.planning.RSSInfo rss_info = 100;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rss_info_);
    }

    // optional double total_path_length = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double total_path_time = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double reference_speed = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double map_speed_limit = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional .control.canbus.Chassis.GearPosition gear = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_replan = 9 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool car_in_dead_end = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional .control.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_right_of_way_status());
    }

    // optional .control.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trajectory_type());
    }

    // optional double align_guide_loc = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional int32 lift_weight = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lift_weight());
    }

    // optional int32 opendoor_status = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_opendoor_status());
    }

    // optional uint32 pto = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pto());
    }

  }
  // optional int32 plan_state = 30;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plan_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADCTrajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.planning.ADCTrajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  point_llh_.MergeFrom(from.point_llh_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_replan_reason(from._internal_replan_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_estop()->::control::planning::EStop::MergeFrom(from._internal_estop());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_debug()->::control::planning_internal::Debug::MergeFrom(from._internal_debug());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_decision()->::control::planning::DecisionResult::MergeFrom(from._internal_decision());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_latency_stats()->::control::planning::LatencyStats::MergeFrom(from._internal_latency_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_routing_header()->::control::common::Header::MergeFrom(from._internal_routing_header());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_engage_advice()->::control::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_critical_region()->::control::planning::ADCTrajectory_CriticalRegion::MergeFrom(from._internal_critical_region());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_joint_angle()->::control::canbus::JointAngle::MergeFrom(from._internal_joint_angle());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_rss_info()->::control::planning::RSSInfo::MergeFrom(from._internal_rss_info());
    }
    if (cached_has_bits & 0x00000800u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_path_time_ = from.total_path_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      reference_speed_ = from.reference_speed_;
    }
    if (cached_has_bits & 0x00004000u) {
      map_speed_limit_ = from.map_speed_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      gear_ = from.gear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_replan_ = from.is_replan_;
    }
    if (cached_has_bits & 0x00020000u) {
      car_in_dead_end_ = from.car_in_dead_end_;
    }
    if (cached_has_bits & 0x00040000u) {
      right_of_way_status_ = from.right_of_way_status_;
    }
    if (cached_has_bits & 0x00080000u) {
      trajectory_type_ = from.trajectory_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      align_guide_loc_ = from.align_guide_loc_;
    }
    if (cached_has_bits & 0x00200000u) {
      lift_weight_ = from.lift_weight_;
    }
    if (cached_has_bits & 0x00400000u) {
      opendoor_status_ = from.opendoor_status_;
    }
    if (cached_has_bits & 0x00800000u) {
      pto_ = from.pto_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_plan_state(from._internal_plan_state());
  }
}

void ADCTrajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  path_point_.InternalSwap(&other->path_point_);
  point_llh_.InternalSwap(&other->point_llh_);
  replan_reason_.Swap(&other->replan_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCTrajectory, plan_state_)
      + sizeof(ADCTrajectory::plan_state_)
      - PROTOBUF_FIELD_OFFSET(ADCTrajectory, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::planning::EStop* Arena::CreateMaybeMessage< ::control::planning::EStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::planning::EStop >(arena);
}
template<> PROTOBUF_NOINLINE ::control::planning::TaskStats* Arena::CreateMaybeMessage< ::control::planning::TaskStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::planning::TaskStats >(arena);
}
template<> PROTOBUF_NOINLINE ::control::planning::LatencyStats* Arena::CreateMaybeMessage< ::control::planning::LatencyStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::planning::LatencyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::control::planning::RSSInfo* Arena::CreateMaybeMessage< ::control::planning::RSSInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::planning::RSSInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::control::planning::ADCTrajectory_CriticalRegion* Arena::CreateMaybeMessage< ::control::planning::ADCTrajectory_CriticalRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::planning::ADCTrajectory_CriticalRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::control::planning::ADCTrajectory* Arena::CreateMaybeMessage< ::control::planning::ADCTrajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::planning::ADCTrajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

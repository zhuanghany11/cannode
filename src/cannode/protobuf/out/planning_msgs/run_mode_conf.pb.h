// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: planning_msgs/run_mode_conf.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_planning_5fmsgs_2frun_5fmode_5fconf_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_planning_5fmsgs_2frun_5fmode_5fconf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_planning_5fmsgs_2frun_5fmode_5fconf_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_5fmsgs_2frun_5fmode_5fconf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_planning_5fmsgs_2frun_5fmode_5fconf_2eproto;
namespace control {
class RunModeConf;
struct RunModeConfDefaultTypeInternal;
extern RunModeConfDefaultTypeInternal _RunModeConf_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace control {
enum RunMode : int {
  MODE_REALITY = 0,
  MODE_SIMULATION = 1,
};

bool RunMode_IsValid(int value);
extern const uint32_t RunMode_internal_data_[];
constexpr RunMode RunMode_MIN = static_cast<RunMode>(0);
constexpr RunMode RunMode_MAX = static_cast<RunMode>(1);
constexpr int RunMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
RunMode_descriptor();
template <typename T>
const std::string& RunMode_Name(T value) {
  static_assert(std::is_same<T, RunMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RunMode_Name().");
  return RunMode_Name(static_cast<RunMode>(value));
}
template <>
inline const std::string& RunMode_Name(RunMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RunMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool RunMode_Parse(absl::string_view name, RunMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RunMode>(
      RunMode_descriptor(), name, value);
}
enum ClockMode : int {
  MODE_CYBER = 0,
  MODE_MOCK = 1,
};

bool ClockMode_IsValid(int value);
extern const uint32_t ClockMode_internal_data_[];
constexpr ClockMode ClockMode_MIN = static_cast<ClockMode>(0);
constexpr ClockMode ClockMode_MAX = static_cast<ClockMode>(1);
constexpr int ClockMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ClockMode_descriptor();
template <typename T>
const std::string& ClockMode_Name(T value) {
  static_assert(std::is_same<T, ClockMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ClockMode_Name().");
  return ClockMode_Name(static_cast<ClockMode>(value));
}
template <>
inline const std::string& ClockMode_Name(ClockMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ClockMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ClockMode_Parse(absl::string_view name, ClockMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClockMode>(
      ClockMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RunModeConf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:control.RunModeConf) */ {
 public:
  inline RunModeConf() : RunModeConf(nullptr) {}
  ~RunModeConf() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RunModeConf(
      ::google::protobuf::internal::ConstantInitialized);

  inline RunModeConf(const RunModeConf& from) : RunModeConf(nullptr, from) {}
  inline RunModeConf(RunModeConf&& from) noexcept
      : RunModeConf(nullptr, std::move(from)) {}
  inline RunModeConf& operator=(const RunModeConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunModeConf& operator=(RunModeConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunModeConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunModeConf* internal_default_instance() {
    return reinterpret_cast<const RunModeConf*>(
        &_RunModeConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RunModeConf& a, RunModeConf& b) { a.Swap(&b); }
  inline void Swap(RunModeConf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunModeConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunModeConf* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RunModeConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RunModeConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RunModeConf& from) { RunModeConf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  ::size_t ByteSizeLong() const PROTOBUF_FINAL;
  ::uint8_t* _InternalSerialize(::uint8_t* target,
                              ::google::protobuf::io::EpsCopyOutputStream*
                                  stream) const PROTOBUF_FINAL;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RunModeConf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "control.RunModeConf"; }

 protected:
  explicit RunModeConf(::google::protobuf::Arena* arena);
  RunModeConf(::google::protobuf::Arena* arena, const RunModeConf& from);
  RunModeConf(::google::protobuf::Arena* arena, RunModeConf&& from) noexcept
      : RunModeConf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRunModeFieldNumber = 1,
    kClockModeFieldNumber = 2,
  };
  // optional .control.RunMode run_mode = 1 [default = MODE_REALITY];
  bool has_run_mode() const;
  void clear_run_mode() ;
  ::control::RunMode run_mode() const;
  void set_run_mode(::control::RunMode value);

  private:
  ::control::RunMode _internal_run_mode() const;
  void _internal_set_run_mode(::control::RunMode value);

  public:
  // optional .control.ClockMode clock_mode = 2 [default = MODE_CYBER];
  bool has_clock_mode() const;
  void clear_clock_mode() ;
  ::control::ClockMode clock_mode() const;
  void set_clock_mode(::control::ClockMode value);

  private:
  ::control::ClockMode _internal_clock_mode() const;
  void _internal_set_clock_mode(::control::ClockMode value);

  public:
  // @@protoc_insertion_point(class_scope:control.RunModeConf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RunModeConf_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RunModeConf& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int run_mode_;
    int clock_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_planning_5fmsgs_2frun_5fmode_5fconf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RunModeConf

// optional .control.RunMode run_mode = 1 [default = MODE_REALITY];
inline bool RunModeConf::has_run_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RunModeConf::clear_run_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.run_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::control::RunMode RunModeConf::run_mode() const {
  // @@protoc_insertion_point(field_get:control.RunModeConf.run_mode)
  return _internal_run_mode();
}
inline void RunModeConf::set_run_mode(::control::RunMode value) {
  _internal_set_run_mode(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:control.RunModeConf.run_mode)
}
inline ::control::RunMode RunModeConf::_internal_run_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::RunMode>(_impl_.run_mode_);
}
inline void RunModeConf::_internal_set_run_mode(::control::RunMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::RunMode_IsValid(value));
  _impl_.run_mode_ = value;
}

// optional .control.ClockMode clock_mode = 2 [default = MODE_CYBER];
inline bool RunModeConf::has_clock_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RunModeConf::clear_clock_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::control::ClockMode RunModeConf::clock_mode() const {
  // @@protoc_insertion_point(field_get:control.RunModeConf.clock_mode)
  return _internal_clock_mode();
}
inline void RunModeConf::set_clock_mode(::control::ClockMode value) {
  _internal_set_clock_mode(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:control.RunModeConf.clock_mode)
}
inline ::control::ClockMode RunModeConf::_internal_clock_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::control::ClockMode>(_impl_.clock_mode_);
}
inline void RunModeConf::_internal_set_clock_mode(::control::ClockMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::control::ClockMode_IsValid(value));
  _impl_.clock_mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::control::RunMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::RunMode>() {
  return ::control::RunMode_descriptor();
}
template <>
struct is_proto_enum<::control::ClockMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::control::ClockMode>() {
  return ::control::ClockMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_planning_5fmsgs_2frun_5fmode_5fconf_2eproto_2epb_2eh

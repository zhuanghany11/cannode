// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs/control_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2fcontrol_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2fcontrol_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs/basic_msgs/drive_state.pb.h"
#include "common_msgs/basic_msgs/header.pb.h"
#include "common_msgs/basic_msgs/pnc_point.pb.h"
#include "common_msgs/basic_msgs/vehicle_signal.pb.h"
#include "common_msgs/chassis_msgs/chassis.pb.h"
#include "control_msgs/input_debug.pb.h"
#include "control_msgs/pad_msg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto;
namespace control {
class ControlCommand;
class ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
class Debug;
class DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class LatencyStats;
class LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class LodmcDebug;
class LodmcDebugDefaultTypeInternal;
extern LodmcDebugDefaultTypeInternal _LodmcDebug_default_instance_;
class MracAdaptiveGain;
class MracAdaptiveGainDefaultTypeInternal;
extern MracAdaptiveGainDefaultTypeInternal _MracAdaptiveGain_default_instance_;
class MracDebug;
class MracDebugDefaultTypeInternal;
extern MracDebugDefaultTypeInternal _MracDebug_default_instance_;
class SimpleLateralDebug;
class SimpleLateralDebugDefaultTypeInternal;
extern SimpleLateralDebugDefaultTypeInternal _SimpleLateralDebug_default_instance_;
class SimpleLongitudinalDebug;
class SimpleLongitudinalDebugDefaultTypeInternal;
extern SimpleLongitudinalDebugDefaultTypeInternal _SimpleLongitudinalDebug_default_instance_;
class SimpleMPCDebug;
class SimpleMPCDebugDefaultTypeInternal;
extern SimpleMPCDebugDefaultTypeInternal _SimpleMPCDebug_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::ControlCommand* Arena::CreateMaybeMessage<::control::ControlCommand>(Arena*);
template<> ::control::Debug* Arena::CreateMaybeMessage<::control::Debug>(Arena*);
template<> ::control::LatencyStats* Arena::CreateMaybeMessage<::control::LatencyStats>(Arena*);
template<> ::control::LodmcDebug* Arena::CreateMaybeMessage<::control::LodmcDebug>(Arena*);
template<> ::control::MracAdaptiveGain* Arena::CreateMaybeMessage<::control::MracAdaptiveGain>(Arena*);
template<> ::control::MracDebug* Arena::CreateMaybeMessage<::control::MracDebug>(Arena*);
template<> ::control::SimpleLateralDebug* Arena::CreateMaybeMessage<::control::SimpleLateralDebug>(Arena*);
template<> ::control::SimpleLongitudinalDebug* Arena::CreateMaybeMessage<::control::SimpleLongitudinalDebug>(Arena*);
template<> ::control::SimpleMPCDebug* Arena::CreateMaybeMessage<::control::SimpleMPCDebug>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

enum TurnSignal : int {
  TURN_NONE = 0,
  TURN_LEFT = 1,
  TURN_RIGHT = 2
};
bool TurnSignal_IsValid(int value);
constexpr TurnSignal TurnSignal_MIN = TURN_NONE;
constexpr TurnSignal TurnSignal_MAX = TURN_RIGHT;
constexpr int TurnSignal_ARRAYSIZE = TurnSignal_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnSignal_descriptor();
template<typename T>
inline const std::string& TurnSignal_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TurnSignal>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TurnSignal_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TurnSignal_descriptor(), enum_t_value);
}
inline bool TurnSignal_Parse(
    const std::string& name, TurnSignal* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TurnSignal>(
    TurnSignal_descriptor(), name, value);
}
// ===================================================================

class LatencyStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.LatencyStats) */ {
 public:
  inline LatencyStats() : LatencyStats(nullptr) {};
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);
  LatencyStats(LatencyStats&& from) noexcept
    : LatencyStats() {
    *this = ::std::move(from);
  }

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyStats& operator=(LatencyStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LatencyStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyStats* internal_default_instance() {
    return reinterpret_cast<const LatencyStats*>(
               &_LatencyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LatencyStats& a, LatencyStats& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const final {
    return CreateMaybeMessage<LatencyStats>(nullptr);
  }

  LatencyStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.LatencyStats";
  }
  protected:
  explicit LatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerTimeMsFieldNumber = 2,
    kTotalTimeMsFieldNumber = 1,
    kTotalTimeExceededFieldNumber = 3,
  };
  // repeated double controller_time_ms = 2;
  int controller_time_ms_size() const;
  private:
  int _internal_controller_time_ms_size() const;
  public:
  void clear_controller_time_ms();
  private:
  double _internal_controller_time_ms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_controller_time_ms() const;
  void _internal_add_controller_time_ms(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_controller_time_ms();
  public:
  double controller_time_ms(int index) const;
  void set_controller_time_ms(int index, double value);
  void add_controller_time_ms(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      controller_time_ms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_controller_time_ms();

  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  private:
  bool _internal_has_total_time_ms() const;
  public:
  void clear_total_time_ms();
  double total_time_ms() const;
  void set_total_time_ms(double value);
  private:
  double _internal_total_time_ms() const;
  void _internal_set_total_time_ms(double value);
  public:

  // optional bool total_time_exceeded = 3;
  bool has_total_time_exceeded() const;
  private:
  bool _internal_has_total_time_exceeded() const;
  public:
  void clear_total_time_exceeded();
  bool total_time_exceeded() const;
  void set_total_time_exceeded(bool value);
  private:
  bool _internal_total_time_exceeded() const;
  void _internal_set_total_time_exceeded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:control.LatencyStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > controller_time_ms_;
  double total_time_ms_;
  bool total_time_exceeded_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class ControlCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.ControlCommand) */ {
 public:
  inline ControlCommand() : ControlCommand(nullptr) {};
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);
  ControlCommand(ControlCommand&& from) noexcept
    : ControlCommand() {
    *this = ::std::move(from);
  }

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCommand& operator=(ControlCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlCommand& a, ControlCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const final {
    return CreateMaybeMessage<ControlCommand>(nullptr);
  }

  ControlCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.ControlCommand";
  }
  protected:
  explicit ControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDebugFieldNumber = 14,
    kSignalFieldNumber = 15,
    kLatencyStatsFieldNumber = 16,
    kPadMsgFieldNumber = 17,
    kEngageAdviceFieldNumber = 18,
    kThrottleFieldNumber = 2,
    kBrakeFieldNumber = 3,
    kSteeringRateFieldNumber = 4,
    kSteeringTargetFieldNumber = 5,
    kSpeedFieldNumber = 7,
    kAccelerationFieldNumber = 8,
    kTrajectoryFractionFieldNumber = 11,
    kParkingBrakeFieldNumber = 6,
    kResetModelFieldNumber = 9,
    kEngineOnOffFieldNumber = 10,
    kIsInSafeModeFieldNumber = 19,
    kDrivingModeFieldNumber = 12,
    kGearLocationFieldNumber = 13,
    kLeftTurnFieldNumber = 20,
    kRightTurnFieldNumber = 21,
    kHighBeamFieldNumber = 22,
    kLowBeamFieldNumber = 23,
    kTurnsignalFieldNumber = 25,
    kDoorFlStatusFieldNumber = 26,
    kEpbCmdFieldNumber = 28,
    kHornFieldNumber = 24,
    kVehicleStopStatusFieldNumber = 27,
    kArmEnableFieldNumber = 31,
    kShovelEnableFieldNumber = 33,
    kArmAngleFieldNumber = 30,
    kShovelAngleFieldNumber = 32,
    kPtoCmdFieldNumber = 29,
    kEstopFieldNumber = 34,
    kRapidShakeFieldNumber = 35,
  };
  // optional .control.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::control::common::Header& header() const;
  ::control::common::Header* release_header();
  ::control::common::Header* mutable_header();
  void set_allocated_header(::control::common::Header* header);
  private:
  const ::control::common::Header& _internal_header() const;
  ::control::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::control::common::Header* header);
  ::control::common::Header* unsafe_arena_release_header();

  // optional .control.Debug debug = 14;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::control::Debug& debug() const;
  ::control::Debug* release_debug();
  ::control::Debug* mutable_debug();
  void set_allocated_debug(::control::Debug* debug);
  private:
  const ::control::Debug& _internal_debug() const;
  ::control::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::control::Debug* debug);
  ::control::Debug* unsafe_arena_release_debug();

  // optional .control.common.VehicleSignal signal = 15;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  const ::control::common::VehicleSignal& signal() const;
  ::control::common::VehicleSignal* release_signal();
  ::control::common::VehicleSignal* mutable_signal();
  void set_allocated_signal(::control::common::VehicleSignal* signal);
  private:
  const ::control::common::VehicleSignal& _internal_signal() const;
  ::control::common::VehicleSignal* _internal_mutable_signal();
  public:
  void unsafe_arena_set_allocated_signal(
      ::control::common::VehicleSignal* signal);
  ::control::common::VehicleSignal* unsafe_arena_release_signal();

  // optional .control.LatencyStats latency_stats = 16;
  bool has_latency_stats() const;
  private:
  bool _internal_has_latency_stats() const;
  public:
  void clear_latency_stats();
  const ::control::LatencyStats& latency_stats() const;
  ::control::LatencyStats* release_latency_stats();
  ::control::LatencyStats* mutable_latency_stats();
  void set_allocated_latency_stats(::control::LatencyStats* latency_stats);
  private:
  const ::control::LatencyStats& _internal_latency_stats() const;
  ::control::LatencyStats* _internal_mutable_latency_stats();
  public:
  void unsafe_arena_set_allocated_latency_stats(
      ::control::LatencyStats* latency_stats);
  ::control::LatencyStats* unsafe_arena_release_latency_stats();

  // optional .control.PadMessage pad_msg = 17;
  bool has_pad_msg() const;
  private:
  bool _internal_has_pad_msg() const;
  public:
  void clear_pad_msg();
  const ::control::PadMessage& pad_msg() const;
  ::control::PadMessage* release_pad_msg();
  ::control::PadMessage* mutable_pad_msg();
  void set_allocated_pad_msg(::control::PadMessage* pad_msg);
  private:
  const ::control::PadMessage& _internal_pad_msg() const;
  ::control::PadMessage* _internal_mutable_pad_msg();
  public:
  void unsafe_arena_set_allocated_pad_msg(
      ::control::PadMessage* pad_msg);
  ::control::PadMessage* unsafe_arena_release_pad_msg();

  // optional .control.common.EngageAdvice engage_advice = 18;
  bool has_engage_advice() const;
  private:
  bool _internal_has_engage_advice() const;
  public:
  void clear_engage_advice();
  const ::control::common::EngageAdvice& engage_advice() const;
  ::control::common::EngageAdvice* release_engage_advice();
  ::control::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::control::common::EngageAdvice* engage_advice);
  private:
  const ::control::common::EngageAdvice& _internal_engage_advice() const;
  ::control::common::EngageAdvice* _internal_mutable_engage_advice();
  public:
  void unsafe_arena_set_allocated_engage_advice(
      ::control::common::EngageAdvice* engage_advice);
  ::control::common::EngageAdvice* unsafe_arena_release_engage_advice();

  // optional double throttle = 2 [default = 0];
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  double throttle() const;
  void set_throttle(double value);
  private:
  double _internal_throttle() const;
  void _internal_set_throttle(double value);
  public:

  // optional double brake = 3 [default = 0];
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  double brake() const;
  void set_brake(double value);
  private:
  double _internal_brake() const;
  void _internal_set_brake(double value);
  public:

  // optional double steering_rate = 4 [default = 0];
  bool has_steering_rate() const;
  private:
  bool _internal_has_steering_rate() const;
  public:
  void clear_steering_rate();
  double steering_rate() const;
  void set_steering_rate(double value);
  private:
  double _internal_steering_rate() const;
  void _internal_set_steering_rate(double value);
  public:

  // optional double steering_target = 5 [default = 0];
  bool has_steering_target() const;
  private:
  bool _internal_has_steering_target() const;
  public:
  void clear_steering_target();
  double steering_target() const;
  void set_steering_target(double value);
  private:
  double _internal_steering_target() const;
  void _internal_set_steering_target(double value);
  public:

  // optional double speed = 7 [default = 0];
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acceleration = 8 [default = 0];
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // optional double trajectory_fraction = 11;
  bool has_trajectory_fraction() const;
  private:
  bool _internal_has_trajectory_fraction() const;
  public:
  void clear_trajectory_fraction();
  double trajectory_fraction() const;
  void set_trajectory_fraction(double value);
  private:
  double _internal_trajectory_fraction() const;
  void _internal_set_trajectory_fraction(double value);
  public:

  // optional bool parking_brake = 6;
  bool has_parking_brake() const;
  private:
  bool _internal_has_parking_brake() const;
  public:
  void clear_parking_brake();
  bool parking_brake() const;
  void set_parking_brake(bool value);
  private:
  bool _internal_parking_brake() const;
  void _internal_set_parking_brake(bool value);
  public:

  // optional bool reset_model = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_reset_model() const;
  private:
  bool _internal_has_reset_model() const;
  public:
  PROTOBUF_DEPRECATED void clear_reset_model();
  PROTOBUF_DEPRECATED bool reset_model() const;
  PROTOBUF_DEPRECATED void set_reset_model(bool value);
  private:
  bool _internal_reset_model() const;
  void _internal_set_reset_model(bool value);
  public:

  // optional bool engine_on_off = 10;
  bool has_engine_on_off() const;
  private:
  bool _internal_has_engine_on_off() const;
  public:
  void clear_engine_on_off();
  bool engine_on_off() const;
  void set_engine_on_off(bool value);
  private:
  bool _internal_engine_on_off() const;
  void _internal_set_engine_on_off(bool value);
  public:

  // optional bool is_in_safe_mode = 19 [default = false];
  bool has_is_in_safe_mode() const;
  private:
  bool _internal_has_is_in_safe_mode() const;
  public:
  void clear_is_in_safe_mode();
  bool is_in_safe_mode() const;
  void set_is_in_safe_mode(bool value);
  private:
  bool _internal_is_in_safe_mode() const;
  void _internal_set_is_in_safe_mode(bool value);
  public:

  // optional .control.canbus.Chassis.DrivingMode driving_mode = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_driving_mode() const;
  private:
  bool _internal_has_driving_mode() const;
  public:
  PROTOBUF_DEPRECATED void clear_driving_mode();
  PROTOBUF_DEPRECATED ::control::canbus::Chassis_DrivingMode driving_mode() const;
  PROTOBUF_DEPRECATED void set_driving_mode(::control::canbus::Chassis_DrivingMode value);
  private:
  ::control::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::control::canbus::Chassis_DrivingMode value);
  public:

  // optional .control.canbus.Chassis.GearPosition gear_location = 13;
  bool has_gear_location() const;
  private:
  bool _internal_has_gear_location() const;
  public:
  void clear_gear_location();
  ::control::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::control::canbus::Chassis_GearPosition value);
  private:
  ::control::canbus::Chassis_GearPosition _internal_gear_location() const;
  void _internal_set_gear_location(::control::canbus::Chassis_GearPosition value);
  public:

  // optional bool left_turn = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_left_turn() const;
  private:
  bool _internal_has_left_turn() const;
  public:
  PROTOBUF_DEPRECATED void clear_left_turn();
  PROTOBUF_DEPRECATED bool left_turn() const;
  PROTOBUF_DEPRECATED void set_left_turn(bool value);
  private:
  bool _internal_left_turn() const;
  void _internal_set_left_turn(bool value);
  public:

  // optional bool right_turn = 21 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_right_turn() const;
  private:
  bool _internal_has_right_turn() const;
  public:
  PROTOBUF_DEPRECATED void clear_right_turn();
  PROTOBUF_DEPRECATED bool right_turn() const;
  PROTOBUF_DEPRECATED void set_right_turn(bool value);
  private:
  bool _internal_right_turn() const;
  void _internal_set_right_turn(bool value);
  public:

  // optional bool high_beam = 22 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_high_beam() const;
  private:
  bool _internal_has_high_beam() const;
  public:
  PROTOBUF_DEPRECATED void clear_high_beam();
  PROTOBUF_DEPRECATED bool high_beam() const;
  PROTOBUF_DEPRECATED void set_high_beam(bool value);
  private:
  bool _internal_high_beam() const;
  void _internal_set_high_beam(bool value);
  public:

  // optional bool low_beam = 23 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_low_beam() const;
  private:
  bool _internal_has_low_beam() const;
  public:
  PROTOBUF_DEPRECATED void clear_low_beam();
  PROTOBUF_DEPRECATED bool low_beam() const;
  PROTOBUF_DEPRECATED void set_low_beam(bool value);
  private:
  bool _internal_low_beam() const;
  void _internal_set_low_beam(bool value);
  public:

  // optional .control.TurnSignal turnsignal = 25 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_turnsignal() const;
  private:
  bool _internal_has_turnsignal() const;
  public:
  PROTOBUF_DEPRECATED void clear_turnsignal();
  PROTOBUF_DEPRECATED ::control::TurnSignal turnsignal() const;
  PROTOBUF_DEPRECATED void set_turnsignal(::control::TurnSignal value);
  private:
  ::control::TurnSignal _internal_turnsignal() const;
  void _internal_set_turnsignal(::control::TurnSignal value);
  public:

  // optional int32 door_fl_status = 26;
  bool has_door_fl_status() const;
  private:
  bool _internal_has_door_fl_status() const;
  public:
  void clear_door_fl_status();
  ::PROTOBUF_NAMESPACE_ID::int32 door_fl_status() const;
  void set_door_fl_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_door_fl_status() const;
  void _internal_set_door_fl_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 epb_cmd = 28;
  bool has_epb_cmd() const;
  private:
  bool _internal_has_epb_cmd() const;
  public:
  void clear_epb_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 epb_cmd() const;
  void set_epb_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epb_cmd() const;
  void _internal_set_epb_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool horn = 24 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_horn() const;
  private:
  bool _internal_has_horn() const;
  public:
  PROTOBUF_DEPRECATED void clear_horn();
  PROTOBUF_DEPRECATED bool horn() const;
  PROTOBUF_DEPRECATED void set_horn(bool value);
  private:
  bool _internal_horn() const;
  void _internal_set_horn(bool value);
  public:

  // optional bool vehicle_stop_status = 27;
  bool has_vehicle_stop_status() const;
  private:
  bool _internal_has_vehicle_stop_status() const;
  public:
  void clear_vehicle_stop_status();
  bool vehicle_stop_status() const;
  void set_vehicle_stop_status(bool value);
  private:
  bool _internal_vehicle_stop_status() const;
  void _internal_set_vehicle_stop_status(bool value);
  public:

  // optional bool arm_enable = 31 [default = false];
  bool has_arm_enable() const;
  private:
  bool _internal_has_arm_enable() const;
  public:
  void clear_arm_enable();
  bool arm_enable() const;
  void set_arm_enable(bool value);
  private:
  bool _internal_arm_enable() const;
  void _internal_set_arm_enable(bool value);
  public:

  // optional bool shovel_enable = 33 [default = false];
  bool has_shovel_enable() const;
  private:
  bool _internal_has_shovel_enable() const;
  public:
  void clear_shovel_enable();
  bool shovel_enable() const;
  void set_shovel_enable(bool value);
  private:
  bool _internal_shovel_enable() const;
  void _internal_set_shovel_enable(bool value);
  public:

  // optional double arm_angle = 30 [default = 0];
  bool has_arm_angle() const;
  private:
  bool _internal_has_arm_angle() const;
  public:
  void clear_arm_angle();
  double arm_angle() const;
  void set_arm_angle(double value);
  private:
  double _internal_arm_angle() const;
  void _internal_set_arm_angle(double value);
  public:

  // optional double shovel_angle = 32 [default = 0];
  bool has_shovel_angle() const;
  private:
  bool _internal_has_shovel_angle() const;
  public:
  void clear_shovel_angle();
  double shovel_angle() const;
  void set_shovel_angle(double value);
  private:
  double _internal_shovel_angle() const;
  void _internal_set_shovel_angle(double value);
  public:

  // optional uint32 pto_cmd = 29;
  bool has_pto_cmd() const;
  private:
  bool _internal_has_pto_cmd() const;
  public:
  void clear_pto_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 pto_cmd() const;
  void set_pto_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pto_cmd() const;
  void _internal_set_pto_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool estop = 34 [default = false];
  bool has_estop() const;
  private:
  bool _internal_has_estop() const;
  public:
  void clear_estop();
  bool estop() const;
  void set_estop(bool value);
  private:
  bool _internal_estop() const;
  void _internal_set_estop(bool value);
  public:

  // optional bool rapid_shake = 35 [default = false];
  bool has_rapid_shake() const;
  private:
  bool _internal_has_rapid_shake() const;
  public:
  void clear_rapid_shake();
  bool rapid_shake() const;
  void set_rapid_shake(bool value);
  private:
  bool _internal_rapid_shake() const;
  void _internal_set_rapid_shake(bool value);
  public:

  // @@protoc_insertion_point(class_scope:control.ControlCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::Header* header_;
  ::control::Debug* debug_;
  ::control::common::VehicleSignal* signal_;
  ::control::LatencyStats* latency_stats_;
  ::control::PadMessage* pad_msg_;
  ::control::common::EngageAdvice* engage_advice_;
  double throttle_;
  double brake_;
  double steering_rate_;
  double steering_target_;
  double speed_;
  double acceleration_;
  double trajectory_fraction_;
  bool parking_brake_;
  bool reset_model_;
  bool engine_on_off_;
  bool is_in_safe_mode_;
  int driving_mode_;
  int gear_location_;
  bool left_turn_;
  bool right_turn_;
  bool high_beam_;
  bool low_beam_;
  int turnsignal_;
  ::PROTOBUF_NAMESPACE_ID::int32 door_fl_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epb_cmd_;
  bool horn_;
  bool vehicle_stop_status_;
  bool arm_enable_;
  bool shovel_enable_;
  double arm_angle_;
  double shovel_angle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pto_cmd_;
  bool estop_;
  bool rapid_shake_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class SimpleLongitudinalDebug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.SimpleLongitudinalDebug) */ {
 public:
  inline SimpleLongitudinalDebug() : SimpleLongitudinalDebug(nullptr) {};
  virtual ~SimpleLongitudinalDebug();

  SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from);
  SimpleLongitudinalDebug(SimpleLongitudinalDebug&& from) noexcept
    : SimpleLongitudinalDebug() {
    *this = ::std::move(from);
  }

  inline SimpleLongitudinalDebug& operator=(const SimpleLongitudinalDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleLongitudinalDebug& operator=(SimpleLongitudinalDebug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleLongitudinalDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleLongitudinalDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleLongitudinalDebug*>(
               &_SimpleLongitudinalDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimpleLongitudinalDebug& a, SimpleLongitudinalDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleLongitudinalDebug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleLongitudinalDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleLongitudinalDebug* New() const final {
    return CreateMaybeMessage<SimpleLongitudinalDebug>(nullptr);
  }

  SimpleLongitudinalDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleLongitudinalDebug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleLongitudinalDebug& from);
  void MergeFrom(const SimpleLongitudinalDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleLongitudinalDebug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.SimpleLongitudinalDebug";
  }
  protected:
  explicit SimpleLongitudinalDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentMatchedPointFieldNumber = 32,
    kCurrentReferencePointFieldNumber = 33,
    kPreviewReferencePointFieldNumber = 34,
    kStationReferenceFieldNumber = 1,
    kStationErrorFieldNumber = 2,
    kStationErrorLimitedFieldNumber = 3,
    kPreviewStationErrorFieldNumber = 4,
    kSpeedReferenceFieldNumber = 5,
    kSpeedErrorFieldNumber = 6,
    kSpeedControllerInputLimitedFieldNumber = 7,
    kPreviewSpeedReferenceFieldNumber = 8,
    kPreviewSpeedErrorFieldNumber = 9,
    kPreviewAccelerationReferenceFieldNumber = 10,
    kAccelerationCmdCloseloopFieldNumber = 11,
    kAccelerationCmdFieldNumber = 12,
    kAccelerationLookupFieldNumber = 13,
    kSpeedLookupFieldNumber = 14,
    kCalibrationValueFieldNumber = 15,
    kThrottleCmdFieldNumber = 16,
    kBrakeCmdFieldNumber = 17,
    kSlopeOffsetCompensationFieldNumber = 19,
    kCurrentStationFieldNumber = 20,
    kPathRemainFieldNumber = 21,
    kPidSaturationStatusFieldNumber = 22,
    kLeadlagSaturationStatusFieldNumber = 23,
    kSpeedOffsetFieldNumber = 24,
    kCurrentSpeedFieldNumber = 25,
    kAccelerationReferenceFieldNumber = 26,
    kCurrentAccelerationFieldNumber = 27,
    kAccelerationErrorFieldNumber = 28,
    kJerkReferenceFieldNumber = 29,
    kCurrentJerkFieldNumber = 30,
    kJerkErrorFieldNumber = 31,
    kAccelerationLookupLimitFieldNumber = 35,
    kVehiclePitchFieldNumber = 36,
    kCurrentSteerIntervalFieldNumber = 38,
    kIsFullStopFieldNumber = 18,
    kIsEpbBrakeFieldNumber = 37,
    kIsWaitSteerFieldNumber = 39,
    kIsStopReasonByDestinationFieldNumber = 40,
    kIsStopReasonByPrdestrianFieldNumber = 41,
    kIsFullStopSoftFieldNumber = 42,
    kIsStopScenarioFieldNumber = 53,
    kIsTakeOffStateFieldNumber = 56,
    kStopAccCmdFieldNumber = 51,
    kGearLocationFieldNumber = 52,
    kStopstateFieldNumber = 55,
    kContrapositionXFieldNumber = 54,
  };
  // optional .control.common.TrajectoryPoint current_matched_point = 32;
  bool has_current_matched_point() const;
  private:
  bool _internal_has_current_matched_point() const;
  public:
  void clear_current_matched_point();
  const ::control::common::TrajectoryPoint& current_matched_point() const;
  ::control::common::TrajectoryPoint* release_current_matched_point();
  ::control::common::TrajectoryPoint* mutable_current_matched_point();
  void set_allocated_current_matched_point(::control::common::TrajectoryPoint* current_matched_point);
  private:
  const ::control::common::TrajectoryPoint& _internal_current_matched_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_matched_point();
  public:
  void unsafe_arena_set_allocated_current_matched_point(
      ::control::common::TrajectoryPoint* current_matched_point);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_matched_point();

  // optional .control.common.TrajectoryPoint current_reference_point = 33;
  bool has_current_reference_point() const;
  private:
  bool _internal_has_current_reference_point() const;
  public:
  void clear_current_reference_point();
  const ::control::common::TrajectoryPoint& current_reference_point() const;
  ::control::common::TrajectoryPoint* release_current_reference_point();
  ::control::common::TrajectoryPoint* mutable_current_reference_point();
  void set_allocated_current_reference_point(::control::common::TrajectoryPoint* current_reference_point);
  private:
  const ::control::common::TrajectoryPoint& _internal_current_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_reference_point();
  public:
  void unsafe_arena_set_allocated_current_reference_point(
      ::control::common::TrajectoryPoint* current_reference_point);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_reference_point();

  // optional .control.common.TrajectoryPoint preview_reference_point = 34;
  bool has_preview_reference_point() const;
  private:
  bool _internal_has_preview_reference_point() const;
  public:
  void clear_preview_reference_point();
  const ::control::common::TrajectoryPoint& preview_reference_point() const;
  ::control::common::TrajectoryPoint* release_preview_reference_point();
  ::control::common::TrajectoryPoint* mutable_preview_reference_point();
  void set_allocated_preview_reference_point(::control::common::TrajectoryPoint* preview_reference_point);
  private:
  const ::control::common::TrajectoryPoint& _internal_preview_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_preview_reference_point();
  public:
  void unsafe_arena_set_allocated_preview_reference_point(
      ::control::common::TrajectoryPoint* preview_reference_point);
  ::control::common::TrajectoryPoint* unsafe_arena_release_preview_reference_point();

  // optional double station_reference = 1;
  bool has_station_reference() const;
  private:
  bool _internal_has_station_reference() const;
  public:
  void clear_station_reference();
  double station_reference() const;
  void set_station_reference(double value);
  private:
  double _internal_station_reference() const;
  void _internal_set_station_reference(double value);
  public:

  // optional double station_error = 2;
  bool has_station_error() const;
  private:
  bool _internal_has_station_error() const;
  public:
  void clear_station_error();
  double station_error() const;
  void set_station_error(double value);
  private:
  double _internal_station_error() const;
  void _internal_set_station_error(double value);
  public:

  // optional double station_error_limited = 3;
  bool has_station_error_limited() const;
  private:
  bool _internal_has_station_error_limited() const;
  public:
  void clear_station_error_limited();
  double station_error_limited() const;
  void set_station_error_limited(double value);
  private:
  double _internal_station_error_limited() const;
  void _internal_set_station_error_limited(double value);
  public:

  // optional double preview_station_error = 4;
  bool has_preview_station_error() const;
  private:
  bool _internal_has_preview_station_error() const;
  public:
  void clear_preview_station_error();
  double preview_station_error() const;
  void set_preview_station_error(double value);
  private:
  double _internal_preview_station_error() const;
  void _internal_set_preview_station_error(double value);
  public:

  // optional double speed_reference = 5;
  bool has_speed_reference() const;
  private:
  bool _internal_has_speed_reference() const;
  public:
  void clear_speed_reference();
  double speed_reference() const;
  void set_speed_reference(double value);
  private:
  double _internal_speed_reference() const;
  void _internal_set_speed_reference(double value);
  public:

  // optional double speed_error = 6;
  bool has_speed_error() const;
  private:
  bool _internal_has_speed_error() const;
  public:
  void clear_speed_error();
  double speed_error() const;
  void set_speed_error(double value);
  private:
  double _internal_speed_error() const;
  void _internal_set_speed_error(double value);
  public:

  // optional double speed_controller_input_limited = 7;
  bool has_speed_controller_input_limited() const;
  private:
  bool _internal_has_speed_controller_input_limited() const;
  public:
  void clear_speed_controller_input_limited();
  double speed_controller_input_limited() const;
  void set_speed_controller_input_limited(double value);
  private:
  double _internal_speed_controller_input_limited() const;
  void _internal_set_speed_controller_input_limited(double value);
  public:

  // optional double preview_speed_reference = 8;
  bool has_preview_speed_reference() const;
  private:
  bool _internal_has_preview_speed_reference() const;
  public:
  void clear_preview_speed_reference();
  double preview_speed_reference() const;
  void set_preview_speed_reference(double value);
  private:
  double _internal_preview_speed_reference() const;
  void _internal_set_preview_speed_reference(double value);
  public:

  // optional double preview_speed_error = 9;
  bool has_preview_speed_error() const;
  private:
  bool _internal_has_preview_speed_error() const;
  public:
  void clear_preview_speed_error();
  double preview_speed_error() const;
  void set_preview_speed_error(double value);
  private:
  double _internal_preview_speed_error() const;
  void _internal_set_preview_speed_error(double value);
  public:

  // optional double preview_acceleration_reference = 10;
  bool has_preview_acceleration_reference() const;
  private:
  bool _internal_has_preview_acceleration_reference() const;
  public:
  void clear_preview_acceleration_reference();
  double preview_acceleration_reference() const;
  void set_preview_acceleration_reference(double value);
  private:
  double _internal_preview_acceleration_reference() const;
  void _internal_set_preview_acceleration_reference(double value);
  public:

  // optional double acceleration_cmd_closeloop = 11;
  bool has_acceleration_cmd_closeloop() const;
  private:
  bool _internal_has_acceleration_cmd_closeloop() const;
  public:
  void clear_acceleration_cmd_closeloop();
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);
  private:
  double _internal_acceleration_cmd_closeloop() const;
  void _internal_set_acceleration_cmd_closeloop(double value);
  public:

  // optional double acceleration_cmd = 12;
  bool has_acceleration_cmd() const;
  private:
  bool _internal_has_acceleration_cmd() const;
  public:
  void clear_acceleration_cmd();
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);
  private:
  double _internal_acceleration_cmd() const;
  void _internal_set_acceleration_cmd(double value);
  public:

  // optional double acceleration_lookup = 13;
  bool has_acceleration_lookup() const;
  private:
  bool _internal_has_acceleration_lookup() const;
  public:
  void clear_acceleration_lookup();
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);
  private:
  double _internal_acceleration_lookup() const;
  void _internal_set_acceleration_lookup(double value);
  public:

  // optional double speed_lookup = 14;
  bool has_speed_lookup() const;
  private:
  bool _internal_has_speed_lookup() const;
  public:
  void clear_speed_lookup();
  double speed_lookup() const;
  void set_speed_lookup(double value);
  private:
  double _internal_speed_lookup() const;
  void _internal_set_speed_lookup(double value);
  public:

  // optional double calibration_value = 15;
  bool has_calibration_value() const;
  private:
  bool _internal_has_calibration_value() const;
  public:
  void clear_calibration_value();
  double calibration_value() const;
  void set_calibration_value(double value);
  private:
  double _internal_calibration_value() const;
  void _internal_set_calibration_value(double value);
  public:

  // optional double throttle_cmd = 16;
  bool has_throttle_cmd() const;
  private:
  bool _internal_has_throttle_cmd() const;
  public:
  void clear_throttle_cmd();
  double throttle_cmd() const;
  void set_throttle_cmd(double value);
  private:
  double _internal_throttle_cmd() const;
  void _internal_set_throttle_cmd(double value);
  public:

  // optional double brake_cmd = 17;
  bool has_brake_cmd() const;
  private:
  bool _internal_has_brake_cmd() const;
  public:
  void clear_brake_cmd();
  double brake_cmd() const;
  void set_brake_cmd(double value);
  private:
  double _internal_brake_cmd() const;
  void _internal_set_brake_cmd(double value);
  public:

  // optional double slope_offset_compensation = 19;
  bool has_slope_offset_compensation() const;
  private:
  bool _internal_has_slope_offset_compensation() const;
  public:
  void clear_slope_offset_compensation();
  double slope_offset_compensation() const;
  void set_slope_offset_compensation(double value);
  private:
  double _internal_slope_offset_compensation() const;
  void _internal_set_slope_offset_compensation(double value);
  public:

  // optional double current_station = 20;
  bool has_current_station() const;
  private:
  bool _internal_has_current_station() const;
  public:
  void clear_current_station();
  double current_station() const;
  void set_current_station(double value);
  private:
  double _internal_current_station() const;
  void _internal_set_current_station(double value);
  public:

  // optional double path_remain = 21;
  bool has_path_remain() const;
  private:
  bool _internal_has_path_remain() const;
  public:
  void clear_path_remain();
  double path_remain() const;
  void set_path_remain(double value);
  private:
  double _internal_path_remain() const;
  void _internal_set_path_remain(double value);
  public:

  // optional int32 pid_saturation_status = 22;
  bool has_pid_saturation_status() const;
  private:
  bool _internal_has_pid_saturation_status() const;
  public:
  void clear_pid_saturation_status();
  ::PROTOBUF_NAMESPACE_ID::int32 pid_saturation_status() const;
  void set_pid_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid_saturation_status() const;
  void _internal_set_pid_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 leadlag_saturation_status = 23;
  bool has_leadlag_saturation_status() const;
  private:
  bool _internal_has_leadlag_saturation_status() const;
  public:
  void clear_leadlag_saturation_status();
  ::PROTOBUF_NAMESPACE_ID::int32 leadlag_saturation_status() const;
  void set_leadlag_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leadlag_saturation_status() const;
  void _internal_set_leadlag_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double speed_offset = 24;
  bool has_speed_offset() const;
  private:
  bool _internal_has_speed_offset() const;
  public:
  void clear_speed_offset();
  double speed_offset() const;
  void set_speed_offset(double value);
  private:
  double _internal_speed_offset() const;
  void _internal_set_speed_offset(double value);
  public:

  // optional double current_speed = 25;
  bool has_current_speed() const;
  private:
  bool _internal_has_current_speed() const;
  public:
  void clear_current_speed();
  double current_speed() const;
  void set_current_speed(double value);
  private:
  double _internal_current_speed() const;
  void _internal_set_current_speed(double value);
  public:

  // optional double acceleration_reference = 26;
  bool has_acceleration_reference() const;
  private:
  bool _internal_has_acceleration_reference() const;
  public:
  void clear_acceleration_reference();
  double acceleration_reference() const;
  void set_acceleration_reference(double value);
  private:
  double _internal_acceleration_reference() const;
  void _internal_set_acceleration_reference(double value);
  public:

  // optional double current_acceleration = 27;
  bool has_current_acceleration() const;
  private:
  bool _internal_has_current_acceleration() const;
  public:
  void clear_current_acceleration();
  double current_acceleration() const;
  void set_current_acceleration(double value);
  private:
  double _internal_current_acceleration() const;
  void _internal_set_current_acceleration(double value);
  public:

  // optional double acceleration_error = 28;
  bool has_acceleration_error() const;
  private:
  bool _internal_has_acceleration_error() const;
  public:
  void clear_acceleration_error();
  double acceleration_error() const;
  void set_acceleration_error(double value);
  private:
  double _internal_acceleration_error() const;
  void _internal_set_acceleration_error(double value);
  public:

  // optional double jerk_reference = 29;
  bool has_jerk_reference() const;
  private:
  bool _internal_has_jerk_reference() const;
  public:
  void clear_jerk_reference();
  double jerk_reference() const;
  void set_jerk_reference(double value);
  private:
  double _internal_jerk_reference() const;
  void _internal_set_jerk_reference(double value);
  public:

  // optional double current_jerk = 30;
  bool has_current_jerk() const;
  private:
  bool _internal_has_current_jerk() const;
  public:
  void clear_current_jerk();
  double current_jerk() const;
  void set_current_jerk(double value);
  private:
  double _internal_current_jerk() const;
  void _internal_set_current_jerk(double value);
  public:

  // optional double jerk_error = 31;
  bool has_jerk_error() const;
  private:
  bool _internal_has_jerk_error() const;
  public:
  void clear_jerk_error();
  double jerk_error() const;
  void set_jerk_error(double value);
  private:
  double _internal_jerk_error() const;
  void _internal_set_jerk_error(double value);
  public:

  // optional double acceleration_lookup_limit = 35;
  bool has_acceleration_lookup_limit() const;
  private:
  bool _internal_has_acceleration_lookup_limit() const;
  public:
  void clear_acceleration_lookup_limit();
  double acceleration_lookup_limit() const;
  void set_acceleration_lookup_limit(double value);
  private:
  double _internal_acceleration_lookup_limit() const;
  void _internal_set_acceleration_lookup_limit(double value);
  public:

  // optional double vehicle_pitch = 36;
  bool has_vehicle_pitch() const;
  private:
  bool _internal_has_vehicle_pitch() const;
  public:
  void clear_vehicle_pitch();
  double vehicle_pitch() const;
  void set_vehicle_pitch(double value);
  private:
  double _internal_vehicle_pitch() const;
  void _internal_set_vehicle_pitch(double value);
  public:

  // optional double current_steer_interval = 38;
  bool has_current_steer_interval() const;
  private:
  bool _internal_has_current_steer_interval() const;
  public:
  void clear_current_steer_interval();
  double current_steer_interval() const;
  void set_current_steer_interval(double value);
  private:
  double _internal_current_steer_interval() const;
  void _internal_set_current_steer_interval(double value);
  public:

  // optional bool is_full_stop = 18;
  bool has_is_full_stop() const;
  private:
  bool _internal_has_is_full_stop() const;
  public:
  void clear_is_full_stop();
  bool is_full_stop() const;
  void set_is_full_stop(bool value);
  private:
  bool _internal_is_full_stop() const;
  void _internal_set_is_full_stop(bool value);
  public:

  // optional bool is_epb_brake = 37;
  bool has_is_epb_brake() const;
  private:
  bool _internal_has_is_epb_brake() const;
  public:
  void clear_is_epb_brake();
  bool is_epb_brake() const;
  void set_is_epb_brake(bool value);
  private:
  bool _internal_is_epb_brake() const;
  void _internal_set_is_epb_brake(bool value);
  public:

  // optional bool is_wait_steer = 39;
  bool has_is_wait_steer() const;
  private:
  bool _internal_has_is_wait_steer() const;
  public:
  void clear_is_wait_steer();
  bool is_wait_steer() const;
  void set_is_wait_steer(bool value);
  private:
  bool _internal_is_wait_steer() const;
  void _internal_set_is_wait_steer(bool value);
  public:

  // optional bool is_stop_reason_by_destination = 40;
  bool has_is_stop_reason_by_destination() const;
  private:
  bool _internal_has_is_stop_reason_by_destination() const;
  public:
  void clear_is_stop_reason_by_destination();
  bool is_stop_reason_by_destination() const;
  void set_is_stop_reason_by_destination(bool value);
  private:
  bool _internal_is_stop_reason_by_destination() const;
  void _internal_set_is_stop_reason_by_destination(bool value);
  public:

  // optional bool is_stop_reason_by_prdestrian = 41;
  bool has_is_stop_reason_by_prdestrian() const;
  private:
  bool _internal_has_is_stop_reason_by_prdestrian() const;
  public:
  void clear_is_stop_reason_by_prdestrian();
  bool is_stop_reason_by_prdestrian() const;
  void set_is_stop_reason_by_prdestrian(bool value);
  private:
  bool _internal_is_stop_reason_by_prdestrian() const;
  void _internal_set_is_stop_reason_by_prdestrian(bool value);
  public:

  // optional bool is_full_stop_soft = 42;
  bool has_is_full_stop_soft() const;
  private:
  bool _internal_has_is_full_stop_soft() const;
  public:
  void clear_is_full_stop_soft();
  bool is_full_stop_soft() const;
  void set_is_full_stop_soft(bool value);
  private:
  bool _internal_is_full_stop_soft() const;
  void _internal_set_is_full_stop_soft(bool value);
  public:

  // optional bool is_stop_scenario = 53;
  bool has_is_stop_scenario() const;
  private:
  bool _internal_has_is_stop_scenario() const;
  public:
  void clear_is_stop_scenario();
  bool is_stop_scenario() const;
  void set_is_stop_scenario(bool value);
  private:
  bool _internal_is_stop_scenario() const;
  void _internal_set_is_stop_scenario(bool value);
  public:

  // optional bool is_take_off_state = 56;
  bool has_is_take_off_state() const;
  private:
  bool _internal_has_is_take_off_state() const;
  public:
  void clear_is_take_off_state();
  bool is_take_off_state() const;
  void set_is_take_off_state(bool value);
  private:
  bool _internal_is_take_off_state() const;
  void _internal_set_is_take_off_state(bool value);
  public:

  // optional double stop_acc_cmd = 51;
  bool has_stop_acc_cmd() const;
  private:
  bool _internal_has_stop_acc_cmd() const;
  public:
  void clear_stop_acc_cmd();
  double stop_acc_cmd() const;
  void set_stop_acc_cmd(double value);
  private:
  double _internal_stop_acc_cmd() const;
  void _internal_set_stop_acc_cmd(double value);
  public:

  // optional .control.canbus.Chassis.GearPosition gear_location = 52;
  bool has_gear_location() const;
  private:
  bool _internal_has_gear_location() const;
  public:
  void clear_gear_location();
  ::control::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::control::canbus::Chassis_GearPosition value);
  private:
  ::control::canbus::Chassis_GearPosition _internal_gear_location() const;
  void _internal_set_gear_location(::control::canbus::Chassis_GearPosition value);
  public:

  // optional uint32 stopstate = 55;
  bool has_stopstate() const;
  private:
  bool _internal_has_stopstate() const;
  public:
  void clear_stopstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 stopstate() const;
  void set_stopstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stopstate() const;
  void _internal_set_stopstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double contraposition_x = 54;
  bool has_contraposition_x() const;
  private:
  bool _internal_has_contraposition_x() const;
  public:
  void clear_contraposition_x();
  double contraposition_x() const;
  void set_contraposition_x(double value);
  private:
  double _internal_contraposition_x() const;
  void _internal_set_contraposition_x(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.SimpleLongitudinalDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::TrajectoryPoint* current_matched_point_;
  ::control::common::TrajectoryPoint* current_reference_point_;
  ::control::common::TrajectoryPoint* preview_reference_point_;
  double station_reference_;
  double station_error_;
  double station_error_limited_;
  double preview_station_error_;
  double speed_reference_;
  double speed_error_;
  double speed_controller_input_limited_;
  double preview_speed_reference_;
  double preview_speed_error_;
  double preview_acceleration_reference_;
  double acceleration_cmd_closeloop_;
  double acceleration_cmd_;
  double acceleration_lookup_;
  double speed_lookup_;
  double calibration_value_;
  double throttle_cmd_;
  double brake_cmd_;
  double slope_offset_compensation_;
  double current_station_;
  double path_remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_saturation_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 leadlag_saturation_status_;
  double speed_offset_;
  double current_speed_;
  double acceleration_reference_;
  double current_acceleration_;
  double acceleration_error_;
  double jerk_reference_;
  double current_jerk_;
  double jerk_error_;
  double acceleration_lookup_limit_;
  double vehicle_pitch_;
  double current_steer_interval_;
  bool is_full_stop_;
  bool is_epb_brake_;
  bool is_wait_steer_;
  bool is_stop_reason_by_destination_;
  bool is_stop_reason_by_prdestrian_;
  bool is_full_stop_soft_;
  bool is_stop_scenario_;
  bool is_take_off_state_;
  double stop_acc_cmd_;
  int gear_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stopstate_;
  double contraposition_x_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class SimpleLateralDebug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.SimpleLateralDebug) */ {
 public:
  inline SimpleLateralDebug() : SimpleLateralDebug(nullptr) {};
  virtual ~SimpleLateralDebug();

  SimpleLateralDebug(const SimpleLateralDebug& from);
  SimpleLateralDebug(SimpleLateralDebug&& from) noexcept
    : SimpleLateralDebug() {
    *this = ::std::move(from);
  }

  inline SimpleLateralDebug& operator=(const SimpleLateralDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleLateralDebug& operator=(SimpleLateralDebug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleLateralDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleLateralDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleLateralDebug*>(
               &_SimpleLateralDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimpleLateralDebug& a, SimpleLateralDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleLateralDebug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleLateralDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleLateralDebug* New() const final {
    return CreateMaybeMessage<SimpleLateralDebug>(nullptr);
  }

  SimpleLateralDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleLateralDebug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleLateralDebug& from);
  void MergeFrom(const SimpleLateralDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleLateralDebug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.SimpleLateralDebug";
  }
  protected:
  explicit SimpleLateralDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentTargetPointFieldNumber = 30,
    kSteerMracDebugFieldNumber = 32,
    kLateralErrorFieldNumber = 1,
    kRefHeadingFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kHeadingErrorFieldNumber = 4,
    kHeadingErrorRateFieldNumber = 5,
    kLateralErrorRateFieldNumber = 6,
    kCurvatureFieldNumber = 7,
    kSteerAngleFieldNumber = 8,
    kSteerAngleFeedforwardFieldNumber = 9,
    kSteerAngleLateralContributionFieldNumber = 10,
    kSteerAngleLateralRateContributionFieldNumber = 11,
    kSteerAngleHeadingContributionFieldNumber = 12,
    kSteerAngleHeadingRateContributionFieldNumber = 13,
    kSteerAngleFeedbackFieldNumber = 14,
    kSteeringPositionFieldNumber = 15,
    kRefSpeedFieldNumber = 16,
    kSteerAngleLimitedFieldNumber = 17,
    kLateralAccelerationFieldNumber = 18,
    kLateralJerkFieldNumber = 19,
    kRefHeadingRateFieldNumber = 20,
    kHeadingRateFieldNumber = 21,
    kRefHeadingAccelerationFieldNumber = 22,
    kHeadingAccelerationFieldNumber = 23,
    kHeadingErrorAccelerationFieldNumber = 24,
    kRefHeadingJerkFieldNumber = 25,
    kHeadingJerkFieldNumber = 26,
    kHeadingErrorJerkFieldNumber = 27,
    kLateralErrorFeedbackFieldNumber = 28,
    kHeadingErrorFeedbackFieldNumber = 29,
    kSteerAngleFeedbackAugmentFieldNumber = 31,
    kLateralCentripetalAccelerationFieldNumber = 34,
    kSteerMracEnableStatusFieldNumber = 33,
    kPreviewHeadingErrorFieldNumber = 36,
    kPreviewPosCurvatureFieldNumber = 35,
  };
  // optional .control.common.TrajectoryPoint current_target_point = 30;
  bool has_current_target_point() const;
  private:
  bool _internal_has_current_target_point() const;
  public:
  void clear_current_target_point();
  const ::control::common::TrajectoryPoint& current_target_point() const;
  ::control::common::TrajectoryPoint* release_current_target_point();
  ::control::common::TrajectoryPoint* mutable_current_target_point();
  void set_allocated_current_target_point(::control::common::TrajectoryPoint* current_target_point);
  private:
  const ::control::common::TrajectoryPoint& _internal_current_target_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_target_point();
  public:
  void unsafe_arena_set_allocated_current_target_point(
      ::control::common::TrajectoryPoint* current_target_point);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_target_point();

  // optional .control.MracDebug steer_mrac_debug = 32;
  bool has_steer_mrac_debug() const;
  private:
  bool _internal_has_steer_mrac_debug() const;
  public:
  void clear_steer_mrac_debug();
  const ::control::MracDebug& steer_mrac_debug() const;
  ::control::MracDebug* release_steer_mrac_debug();
  ::control::MracDebug* mutable_steer_mrac_debug();
  void set_allocated_steer_mrac_debug(::control::MracDebug* steer_mrac_debug);
  private:
  const ::control::MracDebug& _internal_steer_mrac_debug() const;
  ::control::MracDebug* _internal_mutable_steer_mrac_debug();
  public:
  void unsafe_arena_set_allocated_steer_mrac_debug(
      ::control::MracDebug* steer_mrac_debug);
  ::control::MracDebug* unsafe_arena_release_steer_mrac_debug();

  // optional double lateral_error = 1;
  bool has_lateral_error() const;
  private:
  bool _internal_has_lateral_error() const;
  public:
  void clear_lateral_error();
  double lateral_error() const;
  void set_lateral_error(double value);
  private:
  double _internal_lateral_error() const;
  void _internal_set_lateral_error(double value);
  public:

  // optional double ref_heading = 2;
  bool has_ref_heading() const;
  private:
  bool _internal_has_ref_heading() const;
  public:
  void clear_ref_heading();
  double ref_heading() const;
  void set_ref_heading(double value);
  private:
  double _internal_ref_heading() const;
  void _internal_set_ref_heading(double value);
  public:

  // optional double heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double heading_error = 4;
  bool has_heading_error() const;
  private:
  bool _internal_has_heading_error() const;
  public:
  void clear_heading_error();
  double heading_error() const;
  void set_heading_error(double value);
  private:
  double _internal_heading_error() const;
  void _internal_set_heading_error(double value);
  public:

  // optional double heading_error_rate = 5;
  bool has_heading_error_rate() const;
  private:
  bool _internal_has_heading_error_rate() const;
  public:
  void clear_heading_error_rate();
  double heading_error_rate() const;
  void set_heading_error_rate(double value);
  private:
  double _internal_heading_error_rate() const;
  void _internal_set_heading_error_rate(double value);
  public:

  // optional double lateral_error_rate = 6;
  bool has_lateral_error_rate() const;
  private:
  bool _internal_has_lateral_error_rate() const;
  public:
  void clear_lateral_error_rate();
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);
  private:
  double _internal_lateral_error_rate() const;
  void _internal_set_lateral_error_rate(double value);
  public:

  // optional double curvature = 7;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double steer_angle = 8;
  bool has_steer_angle() const;
  private:
  bool _internal_has_steer_angle() const;
  public:
  void clear_steer_angle();
  double steer_angle() const;
  void set_steer_angle(double value);
  private:
  double _internal_steer_angle() const;
  void _internal_set_steer_angle(double value);
  public:

  // optional double steer_angle_feedforward = 9;
  bool has_steer_angle_feedforward() const;
  private:
  bool _internal_has_steer_angle_feedforward() const;
  public:
  void clear_steer_angle_feedforward();
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);
  private:
  double _internal_steer_angle_feedforward() const;
  void _internal_set_steer_angle_feedforward(double value);
  public:

  // optional double steer_angle_lateral_contribution = 10;
  bool has_steer_angle_lateral_contribution() const;
  private:
  bool _internal_has_steer_angle_lateral_contribution() const;
  public:
  void clear_steer_angle_lateral_contribution();
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);
  private:
  double _internal_steer_angle_lateral_contribution() const;
  void _internal_set_steer_angle_lateral_contribution(double value);
  public:

  // optional double steer_angle_lateral_rate_contribution = 11;
  bool has_steer_angle_lateral_rate_contribution() const;
  private:
  bool _internal_has_steer_angle_lateral_rate_contribution() const;
  public:
  void clear_steer_angle_lateral_rate_contribution();
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);
  private:
  double _internal_steer_angle_lateral_rate_contribution() const;
  void _internal_set_steer_angle_lateral_rate_contribution(double value);
  public:

  // optional double steer_angle_heading_contribution = 12;
  bool has_steer_angle_heading_contribution() const;
  private:
  bool _internal_has_steer_angle_heading_contribution() const;
  public:
  void clear_steer_angle_heading_contribution();
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);
  private:
  double _internal_steer_angle_heading_contribution() const;
  void _internal_set_steer_angle_heading_contribution(double value);
  public:

  // optional double steer_angle_heading_rate_contribution = 13;
  bool has_steer_angle_heading_rate_contribution() const;
  private:
  bool _internal_has_steer_angle_heading_rate_contribution() const;
  public:
  void clear_steer_angle_heading_rate_contribution();
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);
  private:
  double _internal_steer_angle_heading_rate_contribution() const;
  void _internal_set_steer_angle_heading_rate_contribution(double value);
  public:

  // optional double steer_angle_feedback = 14;
  bool has_steer_angle_feedback() const;
  private:
  bool _internal_has_steer_angle_feedback() const;
  public:
  void clear_steer_angle_feedback();
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);
  private:
  double _internal_steer_angle_feedback() const;
  void _internal_set_steer_angle_feedback(double value);
  public:

  // optional double steering_position = 15;
  bool has_steering_position() const;
  private:
  bool _internal_has_steering_position() const;
  public:
  void clear_steering_position();
  double steering_position() const;
  void set_steering_position(double value);
  private:
  double _internal_steering_position() const;
  void _internal_set_steering_position(double value);
  public:

  // optional double ref_speed = 16;
  bool has_ref_speed() const;
  private:
  bool _internal_has_ref_speed() const;
  public:
  void clear_ref_speed();
  double ref_speed() const;
  void set_ref_speed(double value);
  private:
  double _internal_ref_speed() const;
  void _internal_set_ref_speed(double value);
  public:

  // optional double steer_angle_limited = 17;
  bool has_steer_angle_limited() const;
  private:
  bool _internal_has_steer_angle_limited() const;
  public:
  void clear_steer_angle_limited();
  double steer_angle_limited() const;
  void set_steer_angle_limited(double value);
  private:
  double _internal_steer_angle_limited() const;
  void _internal_set_steer_angle_limited(double value);
  public:

  // optional double lateral_acceleration = 18;
  bool has_lateral_acceleration() const;
  private:
  bool _internal_has_lateral_acceleration() const;
  public:
  void clear_lateral_acceleration();
  double lateral_acceleration() const;
  void set_lateral_acceleration(double value);
  private:
  double _internal_lateral_acceleration() const;
  void _internal_set_lateral_acceleration(double value);
  public:

  // optional double lateral_jerk = 19;
  bool has_lateral_jerk() const;
  private:
  bool _internal_has_lateral_jerk() const;
  public:
  void clear_lateral_jerk();
  double lateral_jerk() const;
  void set_lateral_jerk(double value);
  private:
  double _internal_lateral_jerk() const;
  void _internal_set_lateral_jerk(double value);
  public:

  // optional double ref_heading_rate = 20;
  bool has_ref_heading_rate() const;
  private:
  bool _internal_has_ref_heading_rate() const;
  public:
  void clear_ref_heading_rate();
  double ref_heading_rate() const;
  void set_ref_heading_rate(double value);
  private:
  double _internal_ref_heading_rate() const;
  void _internal_set_ref_heading_rate(double value);
  public:

  // optional double heading_rate = 21;
  bool has_heading_rate() const;
  private:
  bool _internal_has_heading_rate() const;
  public:
  void clear_heading_rate();
  double heading_rate() const;
  void set_heading_rate(double value);
  private:
  double _internal_heading_rate() const;
  void _internal_set_heading_rate(double value);
  public:

  // optional double ref_heading_acceleration = 22;
  bool has_ref_heading_acceleration() const;
  private:
  bool _internal_has_ref_heading_acceleration() const;
  public:
  void clear_ref_heading_acceleration();
  double ref_heading_acceleration() const;
  void set_ref_heading_acceleration(double value);
  private:
  double _internal_ref_heading_acceleration() const;
  void _internal_set_ref_heading_acceleration(double value);
  public:

  // optional double heading_acceleration = 23;
  bool has_heading_acceleration() const;
  private:
  bool _internal_has_heading_acceleration() const;
  public:
  void clear_heading_acceleration();
  double heading_acceleration() const;
  void set_heading_acceleration(double value);
  private:
  double _internal_heading_acceleration() const;
  void _internal_set_heading_acceleration(double value);
  public:

  // optional double heading_error_acceleration = 24;
  bool has_heading_error_acceleration() const;
  private:
  bool _internal_has_heading_error_acceleration() const;
  public:
  void clear_heading_error_acceleration();
  double heading_error_acceleration() const;
  void set_heading_error_acceleration(double value);
  private:
  double _internal_heading_error_acceleration() const;
  void _internal_set_heading_error_acceleration(double value);
  public:

  // optional double ref_heading_jerk = 25;
  bool has_ref_heading_jerk() const;
  private:
  bool _internal_has_ref_heading_jerk() const;
  public:
  void clear_ref_heading_jerk();
  double ref_heading_jerk() const;
  void set_ref_heading_jerk(double value);
  private:
  double _internal_ref_heading_jerk() const;
  void _internal_set_ref_heading_jerk(double value);
  public:

  // optional double heading_jerk = 26;
  bool has_heading_jerk() const;
  private:
  bool _internal_has_heading_jerk() const;
  public:
  void clear_heading_jerk();
  double heading_jerk() const;
  void set_heading_jerk(double value);
  private:
  double _internal_heading_jerk() const;
  void _internal_set_heading_jerk(double value);
  public:

  // optional double heading_error_jerk = 27;
  bool has_heading_error_jerk() const;
  private:
  bool _internal_has_heading_error_jerk() const;
  public:
  void clear_heading_error_jerk();
  double heading_error_jerk() const;
  void set_heading_error_jerk(double value);
  private:
  double _internal_heading_error_jerk() const;
  void _internal_set_heading_error_jerk(double value);
  public:

  // optional double lateral_error_feedback = 28;
  bool has_lateral_error_feedback() const;
  private:
  bool _internal_has_lateral_error_feedback() const;
  public:
  void clear_lateral_error_feedback();
  double lateral_error_feedback() const;
  void set_lateral_error_feedback(double value);
  private:
  double _internal_lateral_error_feedback() const;
  void _internal_set_lateral_error_feedback(double value);
  public:

  // optional double heading_error_feedback = 29;
  bool has_heading_error_feedback() const;
  private:
  bool _internal_has_heading_error_feedback() const;
  public:
  void clear_heading_error_feedback();
  double heading_error_feedback() const;
  void set_heading_error_feedback(double value);
  private:
  double _internal_heading_error_feedback() const;
  void _internal_set_heading_error_feedback(double value);
  public:

  // optional double steer_angle_feedback_augment = 31;
  bool has_steer_angle_feedback_augment() const;
  private:
  bool _internal_has_steer_angle_feedback_augment() const;
  public:
  void clear_steer_angle_feedback_augment();
  double steer_angle_feedback_augment() const;
  void set_steer_angle_feedback_augment(double value);
  private:
  double _internal_steer_angle_feedback_augment() const;
  void _internal_set_steer_angle_feedback_augment(double value);
  public:

  // optional double lateral_centripetal_acceleration = 34;
  bool has_lateral_centripetal_acceleration() const;
  private:
  bool _internal_has_lateral_centripetal_acceleration() const;
  public:
  void clear_lateral_centripetal_acceleration();
  double lateral_centripetal_acceleration() const;
  void set_lateral_centripetal_acceleration(double value);
  private:
  double _internal_lateral_centripetal_acceleration() const;
  void _internal_set_lateral_centripetal_acceleration(double value);
  public:

  // optional bool steer_mrac_enable_status = 33;
  bool has_steer_mrac_enable_status() const;
  private:
  bool _internal_has_steer_mrac_enable_status() const;
  public:
  void clear_steer_mrac_enable_status();
  bool steer_mrac_enable_status() const;
  void set_steer_mrac_enable_status(bool value);
  private:
  bool _internal_steer_mrac_enable_status() const;
  void _internal_set_steer_mrac_enable_status(bool value);
  public:

  // optional float preview_heading_error = 36;
  bool has_preview_heading_error() const;
  private:
  bool _internal_has_preview_heading_error() const;
  public:
  void clear_preview_heading_error();
  float preview_heading_error() const;
  void set_preview_heading_error(float value);
  private:
  float _internal_preview_heading_error() const;
  void _internal_set_preview_heading_error(float value);
  public:

  // optional double preview_pos_curvature = 35;
  bool has_preview_pos_curvature() const;
  private:
  bool _internal_has_preview_pos_curvature() const;
  public:
  void clear_preview_pos_curvature();
  double preview_pos_curvature() const;
  void set_preview_pos_curvature(double value);
  private:
  double _internal_preview_pos_curvature() const;
  void _internal_set_preview_pos_curvature(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.SimpleLateralDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::TrajectoryPoint* current_target_point_;
  ::control::MracDebug* steer_mrac_debug_;
  double lateral_error_;
  double ref_heading_;
  double heading_;
  double heading_error_;
  double heading_error_rate_;
  double lateral_error_rate_;
  double curvature_;
  double steer_angle_;
  double steer_angle_feedforward_;
  double steer_angle_lateral_contribution_;
  double steer_angle_lateral_rate_contribution_;
  double steer_angle_heading_contribution_;
  double steer_angle_heading_rate_contribution_;
  double steer_angle_feedback_;
  double steering_position_;
  double ref_speed_;
  double steer_angle_limited_;
  double lateral_acceleration_;
  double lateral_jerk_;
  double ref_heading_rate_;
  double heading_rate_;
  double ref_heading_acceleration_;
  double heading_acceleration_;
  double heading_error_acceleration_;
  double ref_heading_jerk_;
  double heading_jerk_;
  double heading_error_jerk_;
  double lateral_error_feedback_;
  double heading_error_feedback_;
  double steer_angle_feedback_augment_;
  double lateral_centripetal_acceleration_;
  bool steer_mrac_enable_status_;
  float preview_heading_error_;
  double preview_pos_curvature_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class SimpleMPCDebug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.SimpleMPCDebug) */ {
 public:
  inline SimpleMPCDebug() : SimpleMPCDebug(nullptr) {};
  virtual ~SimpleMPCDebug();

  SimpleMPCDebug(const SimpleMPCDebug& from);
  SimpleMPCDebug(SimpleMPCDebug&& from) noexcept
    : SimpleMPCDebug() {
    *this = ::std::move(from);
  }

  inline SimpleMPCDebug& operator=(const SimpleMPCDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleMPCDebug& operator=(SimpleMPCDebug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleMPCDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleMPCDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleMPCDebug*>(
               &_SimpleMPCDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimpleMPCDebug& a, SimpleMPCDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleMPCDebug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleMPCDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleMPCDebug* New() const final {
    return CreateMaybeMessage<SimpleMPCDebug>(nullptr);
  }

  SimpleMPCDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleMPCDebug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleMPCDebug& from);
  void MergeFrom(const SimpleMPCDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleMPCDebug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.SimpleMPCDebug";
  }
  protected:
  explicit SimpleMPCDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixQUpdatedFieldNumber = 33,
    kMatrixRUpdatedFieldNumber = 34,
    kCurrentMatchedPointFieldNumber = 53,
    kCurrentReferencePointFieldNumber = 54,
    kPreviewReferencePointFieldNumber = 55,
    kLateralErrorFieldNumber = 1,
    kRefHeadingFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kHeadingErrorFieldNumber = 4,
    kHeadingErrorRateFieldNumber = 5,
    kLateralErrorRateFieldNumber = 6,
    kCurvatureFieldNumber = 7,
    kSteerAngleFieldNumber = 8,
    kSteerAngleFeedforwardFieldNumber = 9,
    kSteerAngleLateralContributionFieldNumber = 10,
    kSteerAngleLateralRateContributionFieldNumber = 11,
    kSteerAngleHeadingContributionFieldNumber = 12,
    kSteerAngleHeadingRateContributionFieldNumber = 13,
    kSteerAngleFeedbackFieldNumber = 14,
    kSteeringPositionFieldNumber = 15,
    kRefSpeedFieldNumber = 16,
    kSteerAngleLimitedFieldNumber = 17,
    kStationReferenceFieldNumber = 18,
    kStationErrorFieldNumber = 19,
    kSpeedReferenceFieldNumber = 20,
    kSpeedErrorFieldNumber = 21,
    kAccelerationReferenceFieldNumber = 22,
    kStationFeedbackFieldNumber = 24,
    kSpeedFeedbackFieldNumber = 25,
    kAccelerationCmdCloseloopFieldNumber = 26,
    kAccelerationCmdFieldNumber = 27,
    kAccelerationLookupFieldNumber = 28,
    kSpeedLookupFieldNumber = 29,
    kCalibrationValueFieldNumber = 30,
    kSteerUnconstrainedControlDiffFieldNumber = 31,
    kSteerAngleFeedforwardCompensationFieldNumber = 32,
    kLateralAccelerationFieldNumber = 35,
    kLateralJerkFieldNumber = 36,
    kRefHeadingRateFieldNumber = 37,
    kHeadingRateFieldNumber = 38,
    kRefHeadingAccelerationFieldNumber = 39,
    kHeadingAccelerationFieldNumber = 40,
    kHeadingErrorAccelerationFieldNumber = 41,
    kRefHeadingJerkFieldNumber = 42,
    kHeadingJerkFieldNumber = 43,
    kHeadingErrorJerkFieldNumber = 44,
    kAccelerationFeedbackFieldNumber = 45,
    kAccelerationErrorFieldNumber = 46,
    kJerkReferenceFieldNumber = 47,
    kJerkFeedbackFieldNumber = 48,
    kJerkErrorFieldNumber = 49,
    kLateralErrorFeedbackFieldNumber = 50,
    kHeadingErrorFeedbackFieldNumber = 51,
    kSteerAngleFeedbackAugmentFieldNumber = 52,
    kPreviewStationErrorFieldNumber = 56,
    kPreviewSpeedReferenceFieldNumber = 57,
    kPreviewSpeedErrorFieldNumber = 58,
    kPreviewAccelerationReferenceFieldNumber = 59,
    kVehiclePitchFieldNumber = 60,
    kSlopeOffsetCompensationFieldNumber = 61,
    kPathRemainFieldNumber = 62,
    kAccelerationLookupOffsetFieldNumber = 63,
    kAccelerationVrfFieldNumber = 64,
    kIsFullStopFieldNumber = 23,
  };
  // repeated double matrix_q_updated = 33;
  int matrix_q_updated_size() const;
  private:
  int _internal_matrix_q_updated_size() const;
  public:
  void clear_matrix_q_updated();
  private:
  double _internal_matrix_q_updated(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_q_updated() const;
  void _internal_add_matrix_q_updated(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_q_updated();
  public:
  double matrix_q_updated(int index) const;
  void set_matrix_q_updated(int index, double value);
  void add_matrix_q_updated(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_q_updated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_q_updated();

  // repeated double matrix_r_updated = 34;
  int matrix_r_updated_size() const;
  private:
  int _internal_matrix_r_updated_size() const;
  public:
  void clear_matrix_r_updated();
  private:
  double _internal_matrix_r_updated(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_r_updated() const;
  void _internal_add_matrix_r_updated(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_r_updated();
  public:
  double matrix_r_updated(int index) const;
  void set_matrix_r_updated(int index, double value);
  void add_matrix_r_updated(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_r_updated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_r_updated();

  // optional .control.common.TrajectoryPoint current_matched_point = 53;
  bool has_current_matched_point() const;
  private:
  bool _internal_has_current_matched_point() const;
  public:
  void clear_current_matched_point();
  const ::control::common::TrajectoryPoint& current_matched_point() const;
  ::control::common::TrajectoryPoint* release_current_matched_point();
  ::control::common::TrajectoryPoint* mutable_current_matched_point();
  void set_allocated_current_matched_point(::control::common::TrajectoryPoint* current_matched_point);
  private:
  const ::control::common::TrajectoryPoint& _internal_current_matched_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_matched_point();
  public:
  void unsafe_arena_set_allocated_current_matched_point(
      ::control::common::TrajectoryPoint* current_matched_point);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_matched_point();

  // optional .control.common.TrajectoryPoint current_reference_point = 54;
  bool has_current_reference_point() const;
  private:
  bool _internal_has_current_reference_point() const;
  public:
  void clear_current_reference_point();
  const ::control::common::TrajectoryPoint& current_reference_point() const;
  ::control::common::TrajectoryPoint* release_current_reference_point();
  ::control::common::TrajectoryPoint* mutable_current_reference_point();
  void set_allocated_current_reference_point(::control::common::TrajectoryPoint* current_reference_point);
  private:
  const ::control::common::TrajectoryPoint& _internal_current_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_current_reference_point();
  public:
  void unsafe_arena_set_allocated_current_reference_point(
      ::control::common::TrajectoryPoint* current_reference_point);
  ::control::common::TrajectoryPoint* unsafe_arena_release_current_reference_point();

  // optional .control.common.TrajectoryPoint preview_reference_point = 55;
  bool has_preview_reference_point() const;
  private:
  bool _internal_has_preview_reference_point() const;
  public:
  void clear_preview_reference_point();
  const ::control::common::TrajectoryPoint& preview_reference_point() const;
  ::control::common::TrajectoryPoint* release_preview_reference_point();
  ::control::common::TrajectoryPoint* mutable_preview_reference_point();
  void set_allocated_preview_reference_point(::control::common::TrajectoryPoint* preview_reference_point);
  private:
  const ::control::common::TrajectoryPoint& _internal_preview_reference_point() const;
  ::control::common::TrajectoryPoint* _internal_mutable_preview_reference_point();
  public:
  void unsafe_arena_set_allocated_preview_reference_point(
      ::control::common::TrajectoryPoint* preview_reference_point);
  ::control::common::TrajectoryPoint* unsafe_arena_release_preview_reference_point();

  // optional double lateral_error = 1;
  bool has_lateral_error() const;
  private:
  bool _internal_has_lateral_error() const;
  public:
  void clear_lateral_error();
  double lateral_error() const;
  void set_lateral_error(double value);
  private:
  double _internal_lateral_error() const;
  void _internal_set_lateral_error(double value);
  public:

  // optional double ref_heading = 2;
  bool has_ref_heading() const;
  private:
  bool _internal_has_ref_heading() const;
  public:
  void clear_ref_heading();
  double ref_heading() const;
  void set_ref_heading(double value);
  private:
  double _internal_ref_heading() const;
  void _internal_set_ref_heading(double value);
  public:

  // optional double heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double heading_error = 4;
  bool has_heading_error() const;
  private:
  bool _internal_has_heading_error() const;
  public:
  void clear_heading_error();
  double heading_error() const;
  void set_heading_error(double value);
  private:
  double _internal_heading_error() const;
  void _internal_set_heading_error(double value);
  public:

  // optional double heading_error_rate = 5;
  bool has_heading_error_rate() const;
  private:
  bool _internal_has_heading_error_rate() const;
  public:
  void clear_heading_error_rate();
  double heading_error_rate() const;
  void set_heading_error_rate(double value);
  private:
  double _internal_heading_error_rate() const;
  void _internal_set_heading_error_rate(double value);
  public:

  // optional double lateral_error_rate = 6;
  bool has_lateral_error_rate() const;
  private:
  bool _internal_has_lateral_error_rate() const;
  public:
  void clear_lateral_error_rate();
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);
  private:
  double _internal_lateral_error_rate() const;
  void _internal_set_lateral_error_rate(double value);
  public:

  // optional double curvature = 7;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double steer_angle = 8;
  bool has_steer_angle() const;
  private:
  bool _internal_has_steer_angle() const;
  public:
  void clear_steer_angle();
  double steer_angle() const;
  void set_steer_angle(double value);
  private:
  double _internal_steer_angle() const;
  void _internal_set_steer_angle(double value);
  public:

  // optional double steer_angle_feedforward = 9;
  bool has_steer_angle_feedforward() const;
  private:
  bool _internal_has_steer_angle_feedforward() const;
  public:
  void clear_steer_angle_feedforward();
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);
  private:
  double _internal_steer_angle_feedforward() const;
  void _internal_set_steer_angle_feedforward(double value);
  public:

  // optional double steer_angle_lateral_contribution = 10;
  bool has_steer_angle_lateral_contribution() const;
  private:
  bool _internal_has_steer_angle_lateral_contribution() const;
  public:
  void clear_steer_angle_lateral_contribution();
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);
  private:
  double _internal_steer_angle_lateral_contribution() const;
  void _internal_set_steer_angle_lateral_contribution(double value);
  public:

  // optional double steer_angle_lateral_rate_contribution = 11;
  bool has_steer_angle_lateral_rate_contribution() const;
  private:
  bool _internal_has_steer_angle_lateral_rate_contribution() const;
  public:
  void clear_steer_angle_lateral_rate_contribution();
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);
  private:
  double _internal_steer_angle_lateral_rate_contribution() const;
  void _internal_set_steer_angle_lateral_rate_contribution(double value);
  public:

  // optional double steer_angle_heading_contribution = 12;
  bool has_steer_angle_heading_contribution() const;
  private:
  bool _internal_has_steer_angle_heading_contribution() const;
  public:
  void clear_steer_angle_heading_contribution();
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);
  private:
  double _internal_steer_angle_heading_contribution() const;
  void _internal_set_steer_angle_heading_contribution(double value);
  public:

  // optional double steer_angle_heading_rate_contribution = 13;
  bool has_steer_angle_heading_rate_contribution() const;
  private:
  bool _internal_has_steer_angle_heading_rate_contribution() const;
  public:
  void clear_steer_angle_heading_rate_contribution();
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);
  private:
  double _internal_steer_angle_heading_rate_contribution() const;
  void _internal_set_steer_angle_heading_rate_contribution(double value);
  public:

  // optional double steer_angle_feedback = 14;
  bool has_steer_angle_feedback() const;
  private:
  bool _internal_has_steer_angle_feedback() const;
  public:
  void clear_steer_angle_feedback();
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);
  private:
  double _internal_steer_angle_feedback() const;
  void _internal_set_steer_angle_feedback(double value);
  public:

  // optional double steering_position = 15;
  bool has_steering_position() const;
  private:
  bool _internal_has_steering_position() const;
  public:
  void clear_steering_position();
  double steering_position() const;
  void set_steering_position(double value);
  private:
  double _internal_steering_position() const;
  void _internal_set_steering_position(double value);
  public:

  // optional double ref_speed = 16;
  bool has_ref_speed() const;
  private:
  bool _internal_has_ref_speed() const;
  public:
  void clear_ref_speed();
  double ref_speed() const;
  void set_ref_speed(double value);
  private:
  double _internal_ref_speed() const;
  void _internal_set_ref_speed(double value);
  public:

  // optional double steer_angle_limited = 17;
  bool has_steer_angle_limited() const;
  private:
  bool _internal_has_steer_angle_limited() const;
  public:
  void clear_steer_angle_limited();
  double steer_angle_limited() const;
  void set_steer_angle_limited(double value);
  private:
  double _internal_steer_angle_limited() const;
  void _internal_set_steer_angle_limited(double value);
  public:

  // optional double station_reference = 18;
  bool has_station_reference() const;
  private:
  bool _internal_has_station_reference() const;
  public:
  void clear_station_reference();
  double station_reference() const;
  void set_station_reference(double value);
  private:
  double _internal_station_reference() const;
  void _internal_set_station_reference(double value);
  public:

  // optional double station_error = 19;
  bool has_station_error() const;
  private:
  bool _internal_has_station_error() const;
  public:
  void clear_station_error();
  double station_error() const;
  void set_station_error(double value);
  private:
  double _internal_station_error() const;
  void _internal_set_station_error(double value);
  public:

  // optional double speed_reference = 20;
  bool has_speed_reference() const;
  private:
  bool _internal_has_speed_reference() const;
  public:
  void clear_speed_reference();
  double speed_reference() const;
  void set_speed_reference(double value);
  private:
  double _internal_speed_reference() const;
  void _internal_set_speed_reference(double value);
  public:

  // optional double speed_error = 21;
  bool has_speed_error() const;
  private:
  bool _internal_has_speed_error() const;
  public:
  void clear_speed_error();
  double speed_error() const;
  void set_speed_error(double value);
  private:
  double _internal_speed_error() const;
  void _internal_set_speed_error(double value);
  public:

  // optional double acceleration_reference = 22;
  bool has_acceleration_reference() const;
  private:
  bool _internal_has_acceleration_reference() const;
  public:
  void clear_acceleration_reference();
  double acceleration_reference() const;
  void set_acceleration_reference(double value);
  private:
  double _internal_acceleration_reference() const;
  void _internal_set_acceleration_reference(double value);
  public:

  // optional double station_feedback = 24;
  bool has_station_feedback() const;
  private:
  bool _internal_has_station_feedback() const;
  public:
  void clear_station_feedback();
  double station_feedback() const;
  void set_station_feedback(double value);
  private:
  double _internal_station_feedback() const;
  void _internal_set_station_feedback(double value);
  public:

  // optional double speed_feedback = 25;
  bool has_speed_feedback() const;
  private:
  bool _internal_has_speed_feedback() const;
  public:
  void clear_speed_feedback();
  double speed_feedback() const;
  void set_speed_feedback(double value);
  private:
  double _internal_speed_feedback() const;
  void _internal_set_speed_feedback(double value);
  public:

  // optional double acceleration_cmd_closeloop = 26;
  bool has_acceleration_cmd_closeloop() const;
  private:
  bool _internal_has_acceleration_cmd_closeloop() const;
  public:
  void clear_acceleration_cmd_closeloop();
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);
  private:
  double _internal_acceleration_cmd_closeloop() const;
  void _internal_set_acceleration_cmd_closeloop(double value);
  public:

  // optional double acceleration_cmd = 27;
  bool has_acceleration_cmd() const;
  private:
  bool _internal_has_acceleration_cmd() const;
  public:
  void clear_acceleration_cmd();
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);
  private:
  double _internal_acceleration_cmd() const;
  void _internal_set_acceleration_cmd(double value);
  public:

  // optional double acceleration_lookup = 28;
  bool has_acceleration_lookup() const;
  private:
  bool _internal_has_acceleration_lookup() const;
  public:
  void clear_acceleration_lookup();
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);
  private:
  double _internal_acceleration_lookup() const;
  void _internal_set_acceleration_lookup(double value);
  public:

  // optional double speed_lookup = 29;
  bool has_speed_lookup() const;
  private:
  bool _internal_has_speed_lookup() const;
  public:
  void clear_speed_lookup();
  double speed_lookup() const;
  void set_speed_lookup(double value);
  private:
  double _internal_speed_lookup() const;
  void _internal_set_speed_lookup(double value);
  public:

  // optional double calibration_value = 30;
  bool has_calibration_value() const;
  private:
  bool _internal_has_calibration_value() const;
  public:
  void clear_calibration_value();
  double calibration_value() const;
  void set_calibration_value(double value);
  private:
  double _internal_calibration_value() const;
  void _internal_set_calibration_value(double value);
  public:

  // optional double steer_unconstrained_control_diff = 31;
  bool has_steer_unconstrained_control_diff() const;
  private:
  bool _internal_has_steer_unconstrained_control_diff() const;
  public:
  void clear_steer_unconstrained_control_diff();
  double steer_unconstrained_control_diff() const;
  void set_steer_unconstrained_control_diff(double value);
  private:
  double _internal_steer_unconstrained_control_diff() const;
  void _internal_set_steer_unconstrained_control_diff(double value);
  public:

  // optional double steer_angle_feedforward_compensation = 32;
  bool has_steer_angle_feedforward_compensation() const;
  private:
  bool _internal_has_steer_angle_feedforward_compensation() const;
  public:
  void clear_steer_angle_feedforward_compensation();
  double steer_angle_feedforward_compensation() const;
  void set_steer_angle_feedforward_compensation(double value);
  private:
  double _internal_steer_angle_feedforward_compensation() const;
  void _internal_set_steer_angle_feedforward_compensation(double value);
  public:

  // optional double lateral_acceleration = 35;
  bool has_lateral_acceleration() const;
  private:
  bool _internal_has_lateral_acceleration() const;
  public:
  void clear_lateral_acceleration();
  double lateral_acceleration() const;
  void set_lateral_acceleration(double value);
  private:
  double _internal_lateral_acceleration() const;
  void _internal_set_lateral_acceleration(double value);
  public:

  // optional double lateral_jerk = 36;
  bool has_lateral_jerk() const;
  private:
  bool _internal_has_lateral_jerk() const;
  public:
  void clear_lateral_jerk();
  double lateral_jerk() const;
  void set_lateral_jerk(double value);
  private:
  double _internal_lateral_jerk() const;
  void _internal_set_lateral_jerk(double value);
  public:

  // optional double ref_heading_rate = 37;
  bool has_ref_heading_rate() const;
  private:
  bool _internal_has_ref_heading_rate() const;
  public:
  void clear_ref_heading_rate();
  double ref_heading_rate() const;
  void set_ref_heading_rate(double value);
  private:
  double _internal_ref_heading_rate() const;
  void _internal_set_ref_heading_rate(double value);
  public:

  // optional double heading_rate = 38;
  bool has_heading_rate() const;
  private:
  bool _internal_has_heading_rate() const;
  public:
  void clear_heading_rate();
  double heading_rate() const;
  void set_heading_rate(double value);
  private:
  double _internal_heading_rate() const;
  void _internal_set_heading_rate(double value);
  public:

  // optional double ref_heading_acceleration = 39;
  bool has_ref_heading_acceleration() const;
  private:
  bool _internal_has_ref_heading_acceleration() const;
  public:
  void clear_ref_heading_acceleration();
  double ref_heading_acceleration() const;
  void set_ref_heading_acceleration(double value);
  private:
  double _internal_ref_heading_acceleration() const;
  void _internal_set_ref_heading_acceleration(double value);
  public:

  // optional double heading_acceleration = 40;
  bool has_heading_acceleration() const;
  private:
  bool _internal_has_heading_acceleration() const;
  public:
  void clear_heading_acceleration();
  double heading_acceleration() const;
  void set_heading_acceleration(double value);
  private:
  double _internal_heading_acceleration() const;
  void _internal_set_heading_acceleration(double value);
  public:

  // optional double heading_error_acceleration = 41;
  bool has_heading_error_acceleration() const;
  private:
  bool _internal_has_heading_error_acceleration() const;
  public:
  void clear_heading_error_acceleration();
  double heading_error_acceleration() const;
  void set_heading_error_acceleration(double value);
  private:
  double _internal_heading_error_acceleration() const;
  void _internal_set_heading_error_acceleration(double value);
  public:

  // optional double ref_heading_jerk = 42;
  bool has_ref_heading_jerk() const;
  private:
  bool _internal_has_ref_heading_jerk() const;
  public:
  void clear_ref_heading_jerk();
  double ref_heading_jerk() const;
  void set_ref_heading_jerk(double value);
  private:
  double _internal_ref_heading_jerk() const;
  void _internal_set_ref_heading_jerk(double value);
  public:

  // optional double heading_jerk = 43;
  bool has_heading_jerk() const;
  private:
  bool _internal_has_heading_jerk() const;
  public:
  void clear_heading_jerk();
  double heading_jerk() const;
  void set_heading_jerk(double value);
  private:
  double _internal_heading_jerk() const;
  void _internal_set_heading_jerk(double value);
  public:

  // optional double heading_error_jerk = 44;
  bool has_heading_error_jerk() const;
  private:
  bool _internal_has_heading_error_jerk() const;
  public:
  void clear_heading_error_jerk();
  double heading_error_jerk() const;
  void set_heading_error_jerk(double value);
  private:
  double _internal_heading_error_jerk() const;
  void _internal_set_heading_error_jerk(double value);
  public:

  // optional double acceleration_feedback = 45;
  bool has_acceleration_feedback() const;
  private:
  bool _internal_has_acceleration_feedback() const;
  public:
  void clear_acceleration_feedback();
  double acceleration_feedback() const;
  void set_acceleration_feedback(double value);
  private:
  double _internal_acceleration_feedback() const;
  void _internal_set_acceleration_feedback(double value);
  public:

  // optional double acceleration_error = 46;
  bool has_acceleration_error() const;
  private:
  bool _internal_has_acceleration_error() const;
  public:
  void clear_acceleration_error();
  double acceleration_error() const;
  void set_acceleration_error(double value);
  private:
  double _internal_acceleration_error() const;
  void _internal_set_acceleration_error(double value);
  public:

  // optional double jerk_reference = 47;
  bool has_jerk_reference() const;
  private:
  bool _internal_has_jerk_reference() const;
  public:
  void clear_jerk_reference();
  double jerk_reference() const;
  void set_jerk_reference(double value);
  private:
  double _internal_jerk_reference() const;
  void _internal_set_jerk_reference(double value);
  public:

  // optional double jerk_feedback = 48;
  bool has_jerk_feedback() const;
  private:
  bool _internal_has_jerk_feedback() const;
  public:
  void clear_jerk_feedback();
  double jerk_feedback() const;
  void set_jerk_feedback(double value);
  private:
  double _internal_jerk_feedback() const;
  void _internal_set_jerk_feedback(double value);
  public:

  // optional double jerk_error = 49;
  bool has_jerk_error() const;
  private:
  bool _internal_has_jerk_error() const;
  public:
  void clear_jerk_error();
  double jerk_error() const;
  void set_jerk_error(double value);
  private:
  double _internal_jerk_error() const;
  void _internal_set_jerk_error(double value);
  public:

  // optional double lateral_error_feedback = 50;
  bool has_lateral_error_feedback() const;
  private:
  bool _internal_has_lateral_error_feedback() const;
  public:
  void clear_lateral_error_feedback();
  double lateral_error_feedback() const;
  void set_lateral_error_feedback(double value);
  private:
  double _internal_lateral_error_feedback() const;
  void _internal_set_lateral_error_feedback(double value);
  public:

  // optional double heading_error_feedback = 51;
  bool has_heading_error_feedback() const;
  private:
  bool _internal_has_heading_error_feedback() const;
  public:
  void clear_heading_error_feedback();
  double heading_error_feedback() const;
  void set_heading_error_feedback(double value);
  private:
  double _internal_heading_error_feedback() const;
  void _internal_set_heading_error_feedback(double value);
  public:

  // optional double steer_angle_feedback_augment = 52;
  bool has_steer_angle_feedback_augment() const;
  private:
  bool _internal_has_steer_angle_feedback_augment() const;
  public:
  void clear_steer_angle_feedback_augment();
  double steer_angle_feedback_augment() const;
  void set_steer_angle_feedback_augment(double value);
  private:
  double _internal_steer_angle_feedback_augment() const;
  void _internal_set_steer_angle_feedback_augment(double value);
  public:

  // optional double preview_station_error = 56;
  bool has_preview_station_error() const;
  private:
  bool _internal_has_preview_station_error() const;
  public:
  void clear_preview_station_error();
  double preview_station_error() const;
  void set_preview_station_error(double value);
  private:
  double _internal_preview_station_error() const;
  void _internal_set_preview_station_error(double value);
  public:

  // optional double preview_speed_reference = 57;
  bool has_preview_speed_reference() const;
  private:
  bool _internal_has_preview_speed_reference() const;
  public:
  void clear_preview_speed_reference();
  double preview_speed_reference() const;
  void set_preview_speed_reference(double value);
  private:
  double _internal_preview_speed_reference() const;
  void _internal_set_preview_speed_reference(double value);
  public:

  // optional double preview_speed_error = 58;
  bool has_preview_speed_error() const;
  private:
  bool _internal_has_preview_speed_error() const;
  public:
  void clear_preview_speed_error();
  double preview_speed_error() const;
  void set_preview_speed_error(double value);
  private:
  double _internal_preview_speed_error() const;
  void _internal_set_preview_speed_error(double value);
  public:

  // optional double preview_acceleration_reference = 59;
  bool has_preview_acceleration_reference() const;
  private:
  bool _internal_has_preview_acceleration_reference() const;
  public:
  void clear_preview_acceleration_reference();
  double preview_acceleration_reference() const;
  void set_preview_acceleration_reference(double value);
  private:
  double _internal_preview_acceleration_reference() const;
  void _internal_set_preview_acceleration_reference(double value);
  public:

  // optional double vehicle_pitch = 60;
  bool has_vehicle_pitch() const;
  private:
  bool _internal_has_vehicle_pitch() const;
  public:
  void clear_vehicle_pitch();
  double vehicle_pitch() const;
  void set_vehicle_pitch(double value);
  private:
  double _internal_vehicle_pitch() const;
  void _internal_set_vehicle_pitch(double value);
  public:

  // optional double slope_offset_compensation = 61;
  bool has_slope_offset_compensation() const;
  private:
  bool _internal_has_slope_offset_compensation() const;
  public:
  void clear_slope_offset_compensation();
  double slope_offset_compensation() const;
  void set_slope_offset_compensation(double value);
  private:
  double _internal_slope_offset_compensation() const;
  void _internal_set_slope_offset_compensation(double value);
  public:

  // optional double path_remain = 62;
  bool has_path_remain() const;
  private:
  bool _internal_has_path_remain() const;
  public:
  void clear_path_remain();
  double path_remain() const;
  void set_path_remain(double value);
  private:
  double _internal_path_remain() const;
  void _internal_set_path_remain(double value);
  public:

  // optional double acceleration_lookup_offset = 63;
  bool has_acceleration_lookup_offset() const;
  private:
  bool _internal_has_acceleration_lookup_offset() const;
  public:
  void clear_acceleration_lookup_offset();
  double acceleration_lookup_offset() const;
  void set_acceleration_lookup_offset(double value);
  private:
  double _internal_acceleration_lookup_offset() const;
  void _internal_set_acceleration_lookup_offset(double value);
  public:

  // optional double acceleration_vrf = 64;
  bool has_acceleration_vrf() const;
  private:
  bool _internal_has_acceleration_vrf() const;
  public:
  void clear_acceleration_vrf();
  double acceleration_vrf() const;
  void set_acceleration_vrf(double value);
  private:
  double _internal_acceleration_vrf() const;
  void _internal_set_acceleration_vrf(double value);
  public:

  // optional bool is_full_stop = 23;
  bool has_is_full_stop() const;
  private:
  bool _internal_has_is_full_stop() const;
  public:
  void clear_is_full_stop();
  bool is_full_stop() const;
  void set_is_full_stop(bool value);
  private:
  bool _internal_is_full_stop() const;
  void _internal_set_is_full_stop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:control.SimpleMPCDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_q_updated_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_r_updated_;
  ::control::common::TrajectoryPoint* current_matched_point_;
  ::control::common::TrajectoryPoint* current_reference_point_;
  ::control::common::TrajectoryPoint* preview_reference_point_;
  double lateral_error_;
  double ref_heading_;
  double heading_;
  double heading_error_;
  double heading_error_rate_;
  double lateral_error_rate_;
  double curvature_;
  double steer_angle_;
  double steer_angle_feedforward_;
  double steer_angle_lateral_contribution_;
  double steer_angle_lateral_rate_contribution_;
  double steer_angle_heading_contribution_;
  double steer_angle_heading_rate_contribution_;
  double steer_angle_feedback_;
  double steering_position_;
  double ref_speed_;
  double steer_angle_limited_;
  double station_reference_;
  double station_error_;
  double speed_reference_;
  double speed_error_;
  double acceleration_reference_;
  double station_feedback_;
  double speed_feedback_;
  double acceleration_cmd_closeloop_;
  double acceleration_cmd_;
  double acceleration_lookup_;
  double speed_lookup_;
  double calibration_value_;
  double steer_unconstrained_control_diff_;
  double steer_angle_feedforward_compensation_;
  double lateral_acceleration_;
  double lateral_jerk_;
  double ref_heading_rate_;
  double heading_rate_;
  double ref_heading_acceleration_;
  double heading_acceleration_;
  double heading_error_acceleration_;
  double ref_heading_jerk_;
  double heading_jerk_;
  double heading_error_jerk_;
  double acceleration_feedback_;
  double acceleration_error_;
  double jerk_reference_;
  double jerk_feedback_;
  double jerk_error_;
  double lateral_error_feedback_;
  double heading_error_feedback_;
  double steer_angle_feedback_augment_;
  double preview_station_error_;
  double preview_speed_reference_;
  double preview_speed_error_;
  double preview_acceleration_reference_;
  double vehicle_pitch_;
  double slope_offset_compensation_;
  double path_remain_;
  double acceleration_lookup_offset_;
  double acceleration_vrf_;
  bool is_full_stop_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class MracDebug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.MracDebug) */ {
 public:
  inline MracDebug() : MracDebug(nullptr) {};
  virtual ~MracDebug();

  MracDebug(const MracDebug& from);
  MracDebug(MracDebug&& from) noexcept
    : MracDebug() {
    *this = ::std::move(from);
  }

  inline MracDebug& operator=(const MracDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline MracDebug& operator=(MracDebug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MracDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MracDebug* internal_default_instance() {
    return reinterpret_cast<const MracDebug*>(
               &_MracDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MracDebug& a, MracDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(MracDebug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MracDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MracDebug* New() const final {
    return CreateMaybeMessage<MracDebug>(nullptr);
  }

  MracDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MracDebug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MracDebug& from);
  void MergeFrom(const MracDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MracDebug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.MracDebug";
  }
  protected:
  explicit MracDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMracReferenceStateFieldNumber = 2,
    kMracStateErrorFieldNumber = 3,
    kMracAdaptiveGainFieldNumber = 4,
    kMracModelOrderFieldNumber = 1,
    kMracReferenceSaturationStatusFieldNumber = 5,
    kMracControlSaturationStatusFieldNumber = 6,
  };
  // repeated double mrac_reference_state = 2;
  int mrac_reference_state_size() const;
  private:
  int _internal_mrac_reference_state_size() const;
  public:
  void clear_mrac_reference_state();
  private:
  double _internal_mrac_reference_state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_mrac_reference_state() const;
  void _internal_add_mrac_reference_state(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_mrac_reference_state();
  public:
  double mrac_reference_state(int index) const;
  void set_mrac_reference_state(int index, double value);
  void add_mrac_reference_state(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      mrac_reference_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_mrac_reference_state();

  // repeated double mrac_state_error = 3;
  int mrac_state_error_size() const;
  private:
  int _internal_mrac_state_error_size() const;
  public:
  void clear_mrac_state_error();
  private:
  double _internal_mrac_state_error(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_mrac_state_error() const;
  void _internal_add_mrac_state_error(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_mrac_state_error();
  public:
  double mrac_state_error(int index) const;
  void set_mrac_state_error(int index, double value);
  void add_mrac_state_error(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      mrac_state_error() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_mrac_state_error();

  // optional .control.MracAdaptiveGain mrac_adaptive_gain = 4;
  bool has_mrac_adaptive_gain() const;
  private:
  bool _internal_has_mrac_adaptive_gain() const;
  public:
  void clear_mrac_adaptive_gain();
  const ::control::MracAdaptiveGain& mrac_adaptive_gain() const;
  ::control::MracAdaptiveGain* release_mrac_adaptive_gain();
  ::control::MracAdaptiveGain* mutable_mrac_adaptive_gain();
  void set_allocated_mrac_adaptive_gain(::control::MracAdaptiveGain* mrac_adaptive_gain);
  private:
  const ::control::MracAdaptiveGain& _internal_mrac_adaptive_gain() const;
  ::control::MracAdaptiveGain* _internal_mutable_mrac_adaptive_gain();
  public:
  void unsafe_arena_set_allocated_mrac_adaptive_gain(
      ::control::MracAdaptiveGain* mrac_adaptive_gain);
  ::control::MracAdaptiveGain* unsafe_arena_release_mrac_adaptive_gain();

  // optional int32 mrac_model_order = 1;
  bool has_mrac_model_order() const;
  private:
  bool _internal_has_mrac_model_order() const;
  public:
  void clear_mrac_model_order();
  ::PROTOBUF_NAMESPACE_ID::int32 mrac_model_order() const;
  void set_mrac_model_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrac_model_order() const;
  void _internal_set_mrac_model_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mrac_reference_saturation_status = 5;
  bool has_mrac_reference_saturation_status() const;
  private:
  bool _internal_has_mrac_reference_saturation_status() const;
  public:
  void clear_mrac_reference_saturation_status();
  ::PROTOBUF_NAMESPACE_ID::int32 mrac_reference_saturation_status() const;
  void set_mrac_reference_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrac_reference_saturation_status() const;
  void _internal_set_mrac_reference_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mrac_control_saturation_status = 6;
  bool has_mrac_control_saturation_status() const;
  private:
  bool _internal_has_mrac_control_saturation_status() const;
  public:
  void clear_mrac_control_saturation_status();
  ::PROTOBUF_NAMESPACE_ID::int32 mrac_control_saturation_status() const;
  void set_mrac_control_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrac_control_saturation_status() const;
  void _internal_set_mrac_control_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:control.MracDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > mrac_reference_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > mrac_state_error_;
  ::control::MracAdaptiveGain* mrac_adaptive_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrac_model_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrac_reference_saturation_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrac_control_saturation_status_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class MracAdaptiveGain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.MracAdaptiveGain) */ {
 public:
  inline MracAdaptiveGain() : MracAdaptiveGain(nullptr) {};
  virtual ~MracAdaptiveGain();

  MracAdaptiveGain(const MracAdaptiveGain& from);
  MracAdaptiveGain(MracAdaptiveGain&& from) noexcept
    : MracAdaptiveGain() {
    *this = ::std::move(from);
  }

  inline MracAdaptiveGain& operator=(const MracAdaptiveGain& from) {
    CopyFrom(from);
    return *this;
  }
  inline MracAdaptiveGain& operator=(MracAdaptiveGain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MracAdaptiveGain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MracAdaptiveGain* internal_default_instance() {
    return reinterpret_cast<const MracAdaptiveGain*>(
               &_MracAdaptiveGain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MracAdaptiveGain& a, MracAdaptiveGain& b) {
    a.Swap(&b);
  }
  inline void Swap(MracAdaptiveGain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MracAdaptiveGain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MracAdaptiveGain* New() const final {
    return CreateMaybeMessage<MracAdaptiveGain>(nullptr);
  }

  MracAdaptiveGain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MracAdaptiveGain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MracAdaptiveGain& from);
  void MergeFrom(const MracAdaptiveGain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MracAdaptiveGain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.MracAdaptiveGain";
  }
  protected:
  explicit MracAdaptiveGain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateAdaptiveGainFieldNumber = 1,
    kInputAdaptiveGainFieldNumber = 2,
    kNonlinearAdaptiveGainFieldNumber = 3,
  };
  // repeated double state_adaptive_gain = 1;
  int state_adaptive_gain_size() const;
  private:
  int _internal_state_adaptive_gain_size() const;
  public:
  void clear_state_adaptive_gain();
  private:
  double _internal_state_adaptive_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_state_adaptive_gain() const;
  void _internal_add_state_adaptive_gain(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_state_adaptive_gain();
  public:
  double state_adaptive_gain(int index) const;
  void set_state_adaptive_gain(int index, double value);
  void add_state_adaptive_gain(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      state_adaptive_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_state_adaptive_gain();

  // repeated double input_adaptive_gain = 2;
  int input_adaptive_gain_size() const;
  private:
  int _internal_input_adaptive_gain_size() const;
  public:
  void clear_input_adaptive_gain();
  private:
  double _internal_input_adaptive_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_input_adaptive_gain() const;
  void _internal_add_input_adaptive_gain(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_input_adaptive_gain();
  public:
  double input_adaptive_gain(int index) const;
  void set_input_adaptive_gain(int index, double value);
  void add_input_adaptive_gain(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      input_adaptive_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_input_adaptive_gain();

  // repeated double nonlinear_adaptive_gain = 3;
  int nonlinear_adaptive_gain_size() const;
  private:
  int _internal_nonlinear_adaptive_gain_size() const;
  public:
  void clear_nonlinear_adaptive_gain();
  private:
  double _internal_nonlinear_adaptive_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_nonlinear_adaptive_gain() const;
  void _internal_add_nonlinear_adaptive_gain(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_nonlinear_adaptive_gain();
  public:
  double nonlinear_adaptive_gain(int index) const;
  void set_nonlinear_adaptive_gain(int index, double value);
  void add_nonlinear_adaptive_gain(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      nonlinear_adaptive_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_nonlinear_adaptive_gain();

  // @@protoc_insertion_point(class_scope:control.MracAdaptiveGain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > state_adaptive_gain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > input_adaptive_gain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > nonlinear_adaptive_gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class Debug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.Debug) */ {
 public:
  inline Debug() : Debug(nullptr) {};
  virtual ~Debug();

  Debug(const Debug& from);
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug& operator=(Debug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Debug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug* New() const final {
    return CreateMaybeMessage<Debug>(nullptr);
  }

  Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.Debug";
  }
  protected:
  explicit Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimpleLonDebugFieldNumber = 1,
    kSimpleLatDebugFieldNumber = 2,
    kInputDebugFieldNumber = 3,
    kSimpleMpcDebugFieldNumber = 4,
    kLodmcDebugFieldNumber = 5,
  };
  // optional .control.SimpleLongitudinalDebug simple_lon_debug = 1;
  bool has_simple_lon_debug() const;
  private:
  bool _internal_has_simple_lon_debug() const;
  public:
  void clear_simple_lon_debug();
  const ::control::SimpleLongitudinalDebug& simple_lon_debug() const;
  ::control::SimpleLongitudinalDebug* release_simple_lon_debug();
  ::control::SimpleLongitudinalDebug* mutable_simple_lon_debug();
  void set_allocated_simple_lon_debug(::control::SimpleLongitudinalDebug* simple_lon_debug);
  private:
  const ::control::SimpleLongitudinalDebug& _internal_simple_lon_debug() const;
  ::control::SimpleLongitudinalDebug* _internal_mutable_simple_lon_debug();
  public:
  void unsafe_arena_set_allocated_simple_lon_debug(
      ::control::SimpleLongitudinalDebug* simple_lon_debug);
  ::control::SimpleLongitudinalDebug* unsafe_arena_release_simple_lon_debug();

  // optional .control.SimpleLateralDebug simple_lat_debug = 2;
  bool has_simple_lat_debug() const;
  private:
  bool _internal_has_simple_lat_debug() const;
  public:
  void clear_simple_lat_debug();
  const ::control::SimpleLateralDebug& simple_lat_debug() const;
  ::control::SimpleLateralDebug* release_simple_lat_debug();
  ::control::SimpleLateralDebug* mutable_simple_lat_debug();
  void set_allocated_simple_lat_debug(::control::SimpleLateralDebug* simple_lat_debug);
  private:
  const ::control::SimpleLateralDebug& _internal_simple_lat_debug() const;
  ::control::SimpleLateralDebug* _internal_mutable_simple_lat_debug();
  public:
  void unsafe_arena_set_allocated_simple_lat_debug(
      ::control::SimpleLateralDebug* simple_lat_debug);
  ::control::SimpleLateralDebug* unsafe_arena_release_simple_lat_debug();

  // optional .control.InputDebug input_debug = 3;
  bool has_input_debug() const;
  private:
  bool _internal_has_input_debug() const;
  public:
  void clear_input_debug();
  const ::control::InputDebug& input_debug() const;
  ::control::InputDebug* release_input_debug();
  ::control::InputDebug* mutable_input_debug();
  void set_allocated_input_debug(::control::InputDebug* input_debug);
  private:
  const ::control::InputDebug& _internal_input_debug() const;
  ::control::InputDebug* _internal_mutable_input_debug();
  public:
  void unsafe_arena_set_allocated_input_debug(
      ::control::InputDebug* input_debug);
  ::control::InputDebug* unsafe_arena_release_input_debug();

  // optional .control.SimpleMPCDebug simple_mpc_debug = 4;
  bool has_simple_mpc_debug() const;
  private:
  bool _internal_has_simple_mpc_debug() const;
  public:
  void clear_simple_mpc_debug();
  const ::control::SimpleMPCDebug& simple_mpc_debug() const;
  ::control::SimpleMPCDebug* release_simple_mpc_debug();
  ::control::SimpleMPCDebug* mutable_simple_mpc_debug();
  void set_allocated_simple_mpc_debug(::control::SimpleMPCDebug* simple_mpc_debug);
  private:
  const ::control::SimpleMPCDebug& _internal_simple_mpc_debug() const;
  ::control::SimpleMPCDebug* _internal_mutable_simple_mpc_debug();
  public:
  void unsafe_arena_set_allocated_simple_mpc_debug(
      ::control::SimpleMPCDebug* simple_mpc_debug);
  ::control::SimpleMPCDebug* unsafe_arena_release_simple_mpc_debug();

  // optional .control.LodmcDebug lodmc_debug = 5;
  bool has_lodmc_debug() const;
  private:
  bool _internal_has_lodmc_debug() const;
  public:
  void clear_lodmc_debug();
  const ::control::LodmcDebug& lodmc_debug() const;
  ::control::LodmcDebug* release_lodmc_debug();
  ::control::LodmcDebug* mutable_lodmc_debug();
  void set_allocated_lodmc_debug(::control::LodmcDebug* lodmc_debug);
  private:
  const ::control::LodmcDebug& _internal_lodmc_debug() const;
  ::control::LodmcDebug* _internal_mutable_lodmc_debug();
  public:
  void unsafe_arena_set_allocated_lodmc_debug(
      ::control::LodmcDebug* lodmc_debug);
  ::control::LodmcDebug* unsafe_arena_release_lodmc_debug();

  // @@protoc_insertion_point(class_scope:control.Debug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::SimpleLongitudinalDebug* simple_lon_debug_;
  ::control::SimpleLateralDebug* simple_lat_debug_;
  ::control::InputDebug* input_debug_;
  ::control::SimpleMPCDebug* simple_mpc_debug_;
  ::control::LodmcDebug* lodmc_debug_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class LodmcDebug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.LodmcDebug) */ {
 public:
  inline LodmcDebug() : LodmcDebug(nullptr) {};
  virtual ~LodmcDebug();

  LodmcDebug(const LodmcDebug& from);
  LodmcDebug(LodmcDebug&& from) noexcept
    : LodmcDebug() {
    *this = ::std::move(from);
  }

  inline LodmcDebug& operator=(const LodmcDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline LodmcDebug& operator=(LodmcDebug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LodmcDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LodmcDebug* internal_default_instance() {
    return reinterpret_cast<const LodmcDebug*>(
               &_LodmcDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LodmcDebug& a, LodmcDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(LodmcDebug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LodmcDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LodmcDebug* New() const final {
    return CreateMaybeMessage<LodmcDebug>(nullptr);
  }

  LodmcDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LodmcDebug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LodmcDebug& from);
  void MergeFrom(const LodmcDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LodmcDebug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.LodmcDebug";
  }
  protected:
  explicit LodmcDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
    return ::descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorqCommandFieldNumber = 1,
    kTorqFeedForwardFieldNumber = 2,
    kTorqFeedBackFieldNumber = 3,
    kDmcFRollFieldNumber = 4,
    kDmcFAirFieldNumber = 5,
    kDmcFSlopeFieldNumber = 6,
    kDmcFAccFieldNumber = 7,
    kAccErrorFieldNumber = 8,
    kMassFieldNumber = 9,
    kTargetAccFieldNumber = 10,
    kVehilceAccFieldNumber = 11,
    kVehspeedFieldNumber = 12,
    kRoadslopeFieldNumber = 13,
    kTargetAccFilterFieldNumber = 14,
  };
  // optional double torq_command = 1;
  bool has_torq_command() const;
  private:
  bool _internal_has_torq_command() const;
  public:
  void clear_torq_command();
  double torq_command() const;
  void set_torq_command(double value);
  private:
  double _internal_torq_command() const;
  void _internal_set_torq_command(double value);
  public:

  // optional double torq_feed_forward = 2;
  bool has_torq_feed_forward() const;
  private:
  bool _internal_has_torq_feed_forward() const;
  public:
  void clear_torq_feed_forward();
  double torq_feed_forward() const;
  void set_torq_feed_forward(double value);
  private:
  double _internal_torq_feed_forward() const;
  void _internal_set_torq_feed_forward(double value);
  public:

  // optional double torq_feed_back = 3;
  bool has_torq_feed_back() const;
  private:
  bool _internal_has_torq_feed_back() const;
  public:
  void clear_torq_feed_back();
  double torq_feed_back() const;
  void set_torq_feed_back(double value);
  private:
  double _internal_torq_feed_back() const;
  void _internal_set_torq_feed_back(double value);
  public:

  // optional double dmc_f_roll = 4;
  bool has_dmc_f_roll() const;
  private:
  bool _internal_has_dmc_f_roll() const;
  public:
  void clear_dmc_f_roll();
  double dmc_f_roll() const;
  void set_dmc_f_roll(double value);
  private:
  double _internal_dmc_f_roll() const;
  void _internal_set_dmc_f_roll(double value);
  public:

  // optional double dmc_f_air = 5;
  bool has_dmc_f_air() const;
  private:
  bool _internal_has_dmc_f_air() const;
  public:
  void clear_dmc_f_air();
  double dmc_f_air() const;
  void set_dmc_f_air(double value);
  private:
  double _internal_dmc_f_air() const;
  void _internal_set_dmc_f_air(double value);
  public:

  // optional double dmc_f_slope = 6;
  bool has_dmc_f_slope() const;
  private:
  bool _internal_has_dmc_f_slope() const;
  public:
  void clear_dmc_f_slope();
  double dmc_f_slope() const;
  void set_dmc_f_slope(double value);
  private:
  double _internal_dmc_f_slope() const;
  void _internal_set_dmc_f_slope(double value);
  public:

  // optional double dmc_f_acc = 7;
  bool has_dmc_f_acc() const;
  private:
  bool _internal_has_dmc_f_acc() const;
  public:
  void clear_dmc_f_acc();
  double dmc_f_acc() const;
  void set_dmc_f_acc(double value);
  private:
  double _internal_dmc_f_acc() const;
  void _internal_set_dmc_f_acc(double value);
  public:

  // optional double acc_error = 8;
  bool has_acc_error() const;
  private:
  bool _internal_has_acc_error() const;
  public:
  void clear_acc_error();
  double acc_error() const;
  void set_acc_error(double value);
  private:
  double _internal_acc_error() const;
  void _internal_set_acc_error(double value);
  public:

  // optional double mass = 9;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  double mass() const;
  void set_mass(double value);
  private:
  double _internal_mass() const;
  void _internal_set_mass(double value);
  public:

  // optional double target_acc = 10;
  bool has_target_acc() const;
  private:
  bool _internal_has_target_acc() const;
  public:
  void clear_target_acc();
  double target_acc() const;
  void set_target_acc(double value);
  private:
  double _internal_target_acc() const;
  void _internal_set_target_acc(double value);
  public:

  // optional double vehilce_acc = 11;
  bool has_vehilce_acc() const;
  private:
  bool _internal_has_vehilce_acc() const;
  public:
  void clear_vehilce_acc();
  double vehilce_acc() const;
  void set_vehilce_acc(double value);
  private:
  double _internal_vehilce_acc() const;
  void _internal_set_vehilce_acc(double value);
  public:

  // optional double vehspeed = 12;
  bool has_vehspeed() const;
  private:
  bool _internal_has_vehspeed() const;
  public:
  void clear_vehspeed();
  double vehspeed() const;
  void set_vehspeed(double value);
  private:
  double _internal_vehspeed() const;
  void _internal_set_vehspeed(double value);
  public:

  // optional double roadslope = 13;
  bool has_roadslope() const;
  private:
  bool _internal_has_roadslope() const;
  public:
  void clear_roadslope();
  double roadslope() const;
  void set_roadslope(double value);
  private:
  double _internal_roadslope() const;
  void _internal_set_roadslope(double value);
  public:

  // optional double target_acc_filter = 14;
  bool has_target_acc_filter() const;
  private:
  bool _internal_has_target_acc_filter() const;
  public:
  void clear_target_acc_filter();
  double target_acc_filter() const;
  void set_target_acc_filter(double value);
  private:
  double _internal_target_acc_filter() const;
  void _internal_set_target_acc_filter(double value);
  public:

  // @@protoc_insertion_point(class_scope:control.LodmcDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double torq_command_;
  double torq_feed_forward_;
  double torq_feed_back_;
  double dmc_f_roll_;
  double dmc_f_air_;
  double dmc_f_slope_;
  double dmc_f_acc_;
  double acc_error_;
  double mass_;
  double target_acc_;
  double vehilce_acc_;
  double vehspeed_;
  double roadslope_;
  double target_acc_filter_;
  friend struct ::TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::_internal_has_total_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyStats::has_total_time_ms() const {
  return _internal_has_total_time_ms();
}
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LatencyStats::_internal_total_time_ms() const {
  return total_time_ms_;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:control.LatencyStats.total_time_ms)
  return _internal_total_time_ms();
}
inline void LatencyStats::_internal_set_total_time_ms(double value) {
  _has_bits_[0] |= 0x00000001u;
  total_time_ms_ = value;
}
inline void LatencyStats::set_total_time_ms(double value) {
  _internal_set_total_time_ms(value);
  // @@protoc_insertion_point(field_set:control.LatencyStats.total_time_ms)
}

// repeated double controller_time_ms = 2;
inline int LatencyStats::_internal_controller_time_ms_size() const {
  return controller_time_ms_.size();
}
inline int LatencyStats::controller_time_ms_size() const {
  return _internal_controller_time_ms_size();
}
inline void LatencyStats::clear_controller_time_ms() {
  controller_time_ms_.Clear();
}
inline double LatencyStats::_internal_controller_time_ms(int index) const {
  return controller_time_ms_.Get(index);
}
inline double LatencyStats::controller_time_ms(int index) const {
  // @@protoc_insertion_point(field_get:control.LatencyStats.controller_time_ms)
  return _internal_controller_time_ms(index);
}
inline void LatencyStats::set_controller_time_ms(int index, double value) {
  controller_time_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.LatencyStats.controller_time_ms)
}
inline void LatencyStats::_internal_add_controller_time_ms(double value) {
  controller_time_ms_.Add(value);
}
inline void LatencyStats::add_controller_time_ms(double value) {
  _internal_add_controller_time_ms(value);
  // @@protoc_insertion_point(field_add:control.LatencyStats.controller_time_ms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LatencyStats::_internal_controller_time_ms() const {
  return controller_time_ms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LatencyStats::controller_time_ms() const {
  // @@protoc_insertion_point(field_list:control.LatencyStats.controller_time_ms)
  return _internal_controller_time_ms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LatencyStats::_internal_mutable_controller_time_ms() {
  return &controller_time_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LatencyStats::mutable_controller_time_ms() {
  // @@protoc_insertion_point(field_mutable_list:control.LatencyStats.controller_time_ms)
  return _internal_mutable_controller_time_ms();
}

// optional bool total_time_exceeded = 3;
inline bool LatencyStats::_internal_has_total_time_exceeded() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatencyStats::has_total_time_exceeded() const {
  return _internal_has_total_time_exceeded();
}
inline void LatencyStats::clear_total_time_exceeded() {
  total_time_exceeded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LatencyStats::_internal_total_time_exceeded() const {
  return total_time_exceeded_;
}
inline bool LatencyStats::total_time_exceeded() const {
  // @@protoc_insertion_point(field_get:control.LatencyStats.total_time_exceeded)
  return _internal_total_time_exceeded();
}
inline void LatencyStats::_internal_set_total_time_exceeded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  total_time_exceeded_ = value;
}
inline void LatencyStats::set_total_time_exceeded(bool value) {
  _internal_set_total_time_exceeded(value);
  // @@protoc_insertion_point(field_set:control.LatencyStats.total_time_exceeded)
}

// -------------------------------------------------------------------

// ControlCommand

// optional .control.common.Header header = 1;
inline bool ControlCommand::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ControlCommand::has_header() const {
  return _internal_has_header();
}
inline const ::control::common::Header& ControlCommand::_internal_header() const {
  const ::control::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& ControlCommand::header() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.header)
  return _internal_header();
}
inline void ControlCommand::unsafe_arena_set_allocated_header(
    ::control::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlCommand.header)
}
inline ::control::common::Header* ControlCommand::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* ControlCommand::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:control.ControlCommand.header)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::control::common::Header* ControlCommand::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::control::common::Header* ControlCommand::mutable_header() {
  // @@protoc_insertion_point(field_mutable:control.ControlCommand.header)
  return _internal_mutable_header();
}
inline void ControlCommand::set_allocated_header(::control::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:control.ControlCommand.header)
}

// optional double throttle = 2 [default = 0];
inline bool ControlCommand::_internal_has_throttle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ControlCommand::has_throttle() const {
  return _internal_has_throttle();
}
inline void ControlCommand::clear_throttle() {
  throttle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double ControlCommand::_internal_throttle() const {
  return throttle_;
}
inline double ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.throttle)
  return _internal_throttle();
}
inline void ControlCommand::_internal_set_throttle(double value) {
  _has_bits_[0] |= 0x00000040u;
  throttle_ = value;
}
inline void ControlCommand::set_throttle(double value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.throttle)
}

// optional double brake = 3 [default = 0];
inline bool ControlCommand::_internal_has_brake() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ControlCommand::has_brake() const {
  return _internal_has_brake();
}
inline void ControlCommand::clear_brake() {
  brake_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double ControlCommand::_internal_brake() const {
  return brake_;
}
inline double ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.brake)
  return _internal_brake();
}
inline void ControlCommand::_internal_set_brake(double value) {
  _has_bits_[0] |= 0x00000080u;
  brake_ = value;
}
inline void ControlCommand::set_brake(double value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.brake)
}

// optional double steering_rate = 4 [default = 0];
inline bool ControlCommand::_internal_has_steering_rate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ControlCommand::has_steering_rate() const {
  return _internal_has_steering_rate();
}
inline void ControlCommand::clear_steering_rate() {
  steering_rate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ControlCommand::_internal_steering_rate() const {
  return steering_rate_;
}
inline double ControlCommand::steering_rate() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.steering_rate)
  return _internal_steering_rate();
}
inline void ControlCommand::_internal_set_steering_rate(double value) {
  _has_bits_[0] |= 0x00000100u;
  steering_rate_ = value;
}
inline void ControlCommand::set_steering_rate(double value) {
  _internal_set_steering_rate(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.steering_rate)
}

// optional double steering_target = 5 [default = 0];
inline bool ControlCommand::_internal_has_steering_target() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ControlCommand::has_steering_target() const {
  return _internal_has_steering_target();
}
inline void ControlCommand::clear_steering_target() {
  steering_target_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double ControlCommand::_internal_steering_target() const {
  return steering_target_;
}
inline double ControlCommand::steering_target() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.steering_target)
  return _internal_steering_target();
}
inline void ControlCommand::_internal_set_steering_target(double value) {
  _has_bits_[0] |= 0x00000200u;
  steering_target_ = value;
}
inline void ControlCommand::set_steering_target(double value) {
  _internal_set_steering_target(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.steering_target)
}

// optional bool parking_brake = 6;
inline bool ControlCommand::_internal_has_parking_brake() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ControlCommand::has_parking_brake() const {
  return _internal_has_parking_brake();
}
inline void ControlCommand::clear_parking_brake() {
  parking_brake_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ControlCommand::_internal_parking_brake() const {
  return parking_brake_;
}
inline bool ControlCommand::parking_brake() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.parking_brake)
  return _internal_parking_brake();
}
inline void ControlCommand::_internal_set_parking_brake(bool value) {
  _has_bits_[0] |= 0x00002000u;
  parking_brake_ = value;
}
inline void ControlCommand::set_parking_brake(bool value) {
  _internal_set_parking_brake(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.parking_brake)
}

// optional double speed = 7 [default = 0];
inline bool ControlCommand::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ControlCommand::has_speed() const {
  return _internal_has_speed();
}
inline void ControlCommand::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double ControlCommand::_internal_speed() const {
  return speed_;
}
inline double ControlCommand::speed() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.speed)
  return _internal_speed();
}
inline void ControlCommand::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000400u;
  speed_ = value;
}
inline void ControlCommand::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.speed)
}

// optional double acceleration = 8 [default = 0];
inline bool ControlCommand::_internal_has_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ControlCommand::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void ControlCommand::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double ControlCommand::_internal_acceleration() const {
  return acceleration_;
}
inline double ControlCommand::acceleration() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.acceleration)
  return _internal_acceleration();
}
inline void ControlCommand::_internal_set_acceleration(double value) {
  _has_bits_[0] |= 0x00000800u;
  acceleration_ = value;
}
inline void ControlCommand::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.acceleration)
}

// optional bool reset_model = 9 [deprecated = true];
inline bool ControlCommand::_internal_has_reset_model() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ControlCommand::has_reset_model() const {
  return _internal_has_reset_model();
}
inline void ControlCommand::clear_reset_model() {
  reset_model_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ControlCommand::_internal_reset_model() const {
  return reset_model_;
}
inline bool ControlCommand::reset_model() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.reset_model)
  return _internal_reset_model();
}
inline void ControlCommand::_internal_set_reset_model(bool value) {
  _has_bits_[0] |= 0x00004000u;
  reset_model_ = value;
}
inline void ControlCommand::set_reset_model(bool value) {
  _internal_set_reset_model(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.reset_model)
}

// optional bool engine_on_off = 10;
inline bool ControlCommand::_internal_has_engine_on_off() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ControlCommand::has_engine_on_off() const {
  return _internal_has_engine_on_off();
}
inline void ControlCommand::clear_engine_on_off() {
  engine_on_off_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ControlCommand::_internal_engine_on_off() const {
  return engine_on_off_;
}
inline bool ControlCommand::engine_on_off() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.engine_on_off)
  return _internal_engine_on_off();
}
inline void ControlCommand::_internal_set_engine_on_off(bool value) {
  _has_bits_[0] |= 0x00008000u;
  engine_on_off_ = value;
}
inline void ControlCommand::set_engine_on_off(bool value) {
  _internal_set_engine_on_off(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.engine_on_off)
}

// optional double trajectory_fraction = 11;
inline bool ControlCommand::_internal_has_trajectory_fraction() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ControlCommand::has_trajectory_fraction() const {
  return _internal_has_trajectory_fraction();
}
inline void ControlCommand::clear_trajectory_fraction() {
  trajectory_fraction_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double ControlCommand::_internal_trajectory_fraction() const {
  return trajectory_fraction_;
}
inline double ControlCommand::trajectory_fraction() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.trajectory_fraction)
  return _internal_trajectory_fraction();
}
inline void ControlCommand::_internal_set_trajectory_fraction(double value) {
  _has_bits_[0] |= 0x00001000u;
  trajectory_fraction_ = value;
}
inline void ControlCommand::set_trajectory_fraction(double value) {
  _internal_set_trajectory_fraction(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.trajectory_fraction)
}

// optional .control.canbus.Chassis.DrivingMode driving_mode = 12 [deprecated = true];
inline bool ControlCommand::_internal_has_driving_mode() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ControlCommand::has_driving_mode() const {
  return _internal_has_driving_mode();
}
inline void ControlCommand::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::control::canbus::Chassis_DrivingMode ControlCommand::_internal_driving_mode() const {
  return static_cast< ::control::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline ::control::canbus::Chassis_DrivingMode ControlCommand::driving_mode() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.driving_mode)
  return _internal_driving_mode();
}
inline void ControlCommand::_internal_set_driving_mode(::control::canbus::Chassis_DrivingMode value) {
  assert(::control::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  driving_mode_ = value;
}
inline void ControlCommand::set_driving_mode(::control::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.driving_mode)
}

// optional .control.canbus.Chassis.GearPosition gear_location = 13;
inline bool ControlCommand::_internal_has_gear_location() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ControlCommand::has_gear_location() const {
  return _internal_has_gear_location();
}
inline void ControlCommand::clear_gear_location() {
  gear_location_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::control::canbus::Chassis_GearPosition ControlCommand::_internal_gear_location() const {
  return static_cast< ::control::canbus::Chassis_GearPosition >(gear_location_);
}
inline ::control::canbus::Chassis_GearPosition ControlCommand::gear_location() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.gear_location)
  return _internal_gear_location();
}
inline void ControlCommand::_internal_set_gear_location(::control::canbus::Chassis_GearPosition value) {
  assert(::control::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  gear_location_ = value;
}
inline void ControlCommand::set_gear_location(::control::canbus::Chassis_GearPosition value) {
  _internal_set_gear_location(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.gear_location)
}

// optional .control.Debug debug = 14;
inline bool ControlCommand::_internal_has_debug() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || debug_ != nullptr);
  return value;
}
inline bool ControlCommand::has_debug() const {
  return _internal_has_debug();
}
inline void ControlCommand::clear_debug() {
  if (debug_ != nullptr) debug_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::Debug& ControlCommand::_internal_debug() const {
  const ::control::Debug* p = debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::Debug*>(
      &::control::_Debug_default_instance_);
}
inline const ::control::Debug& ControlCommand::debug() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.debug)
  return _internal_debug();
}
inline void ControlCommand::unsafe_arena_set_allocated_debug(
    ::control::Debug* debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  debug_ = debug;
  if (debug) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlCommand.debug)
}
inline ::control::Debug* ControlCommand::release_debug() {
  auto temp = unsafe_arena_release_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::Debug* ControlCommand::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:control.ControlCommand.debug)
  _has_bits_[0] &= ~0x00000002u;
  ::control::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::control::Debug* ControlCommand::_internal_mutable_debug() {
  _has_bits_[0] |= 0x00000002u;
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::Debug>(GetArena());
    debug_ = p;
  }
  return debug_;
}
inline ::control::Debug* ControlCommand::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:control.ControlCommand.debug)
  return _internal_mutable_debug();
}
inline void ControlCommand::set_allocated_debug(::control::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:control.ControlCommand.debug)
}

// optional .control.common.VehicleSignal signal = 15;
inline bool ControlCommand::_internal_has_signal() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || signal_ != nullptr);
  return value;
}
inline bool ControlCommand::has_signal() const {
  return _internal_has_signal();
}
inline const ::control::common::VehicleSignal& ControlCommand::_internal_signal() const {
  const ::control::common::VehicleSignal* p = signal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::VehicleSignal*>(
      &::control::common::_VehicleSignal_default_instance_);
}
inline const ::control::common::VehicleSignal& ControlCommand::signal() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.signal)
  return _internal_signal();
}
inline void ControlCommand::unsafe_arena_set_allocated_signal(
    ::control::common::VehicleSignal* signal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_);
  }
  signal_ = signal;
  if (signal) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlCommand.signal)
}
inline ::control::common::VehicleSignal* ControlCommand::release_signal() {
  auto temp = unsafe_arena_release_signal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::VehicleSignal* ControlCommand::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_release:control.ControlCommand.signal)
  _has_bits_[0] &= ~0x00000004u;
  ::control::common::VehicleSignal* temp = signal_;
  signal_ = nullptr;
  return temp;
}
inline ::control::common::VehicleSignal* ControlCommand::_internal_mutable_signal() {
  _has_bits_[0] |= 0x00000004u;
  if (signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::VehicleSignal>(GetArena());
    signal_ = p;
  }
  return signal_;
}
inline ::control::common::VehicleSignal* ControlCommand::mutable_signal() {
  // @@protoc_insertion_point(field_mutable:control.ControlCommand.signal)
  return _internal_mutable_signal();
}
inline void ControlCommand::set_allocated_signal(::control::common::VehicleSignal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_);
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal)->GetArena();
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:control.ControlCommand.signal)
}

// optional .control.LatencyStats latency_stats = 16;
inline bool ControlCommand::_internal_has_latency_stats() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || latency_stats_ != nullptr);
  return value;
}
inline bool ControlCommand::has_latency_stats() const {
  return _internal_has_latency_stats();
}
inline void ControlCommand::clear_latency_stats() {
  if (latency_stats_ != nullptr) latency_stats_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::control::LatencyStats& ControlCommand::_internal_latency_stats() const {
  const ::control::LatencyStats* p = latency_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::LatencyStats*>(
      &::control::_LatencyStats_default_instance_);
}
inline const ::control::LatencyStats& ControlCommand::latency_stats() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.latency_stats)
  return _internal_latency_stats();
}
inline void ControlCommand::unsafe_arena_set_allocated_latency_stats(
    ::control::LatencyStats* latency_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_stats_);
  }
  latency_stats_ = latency_stats;
  if (latency_stats) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlCommand.latency_stats)
}
inline ::control::LatencyStats* ControlCommand::release_latency_stats() {
  auto temp = unsafe_arena_release_latency_stats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::LatencyStats* ControlCommand::unsafe_arena_release_latency_stats() {
  // @@protoc_insertion_point(field_release:control.ControlCommand.latency_stats)
  _has_bits_[0] &= ~0x00000008u;
  ::control::LatencyStats* temp = latency_stats_;
  latency_stats_ = nullptr;
  return temp;
}
inline ::control::LatencyStats* ControlCommand::_internal_mutable_latency_stats() {
  _has_bits_[0] |= 0x00000008u;
  if (latency_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::LatencyStats>(GetArena());
    latency_stats_ = p;
  }
  return latency_stats_;
}
inline ::control::LatencyStats* ControlCommand::mutable_latency_stats() {
  // @@protoc_insertion_point(field_mutable:control.ControlCommand.latency_stats)
  return _internal_mutable_latency_stats();
}
inline void ControlCommand::set_allocated_latency_stats(::control::LatencyStats* latency_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete latency_stats_;
  }
  if (latency_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latency_stats);
    if (message_arena != submessage_arena) {
      latency_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  latency_stats_ = latency_stats;
  // @@protoc_insertion_point(field_set_allocated:control.ControlCommand.latency_stats)
}

// optional .control.PadMessage pad_msg = 17;
inline bool ControlCommand::_internal_has_pad_msg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || pad_msg_ != nullptr);
  return value;
}
inline bool ControlCommand::has_pad_msg() const {
  return _internal_has_pad_msg();
}
inline const ::control::PadMessage& ControlCommand::_internal_pad_msg() const {
  const ::control::PadMessage* p = pad_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::PadMessage*>(
      &::control::_PadMessage_default_instance_);
}
inline const ::control::PadMessage& ControlCommand::pad_msg() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.pad_msg)
  return _internal_pad_msg();
}
inline void ControlCommand::unsafe_arena_set_allocated_pad_msg(
    ::control::PadMessage* pad_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_msg_);
  }
  pad_msg_ = pad_msg;
  if (pad_msg) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlCommand.pad_msg)
}
inline ::control::PadMessage* ControlCommand::release_pad_msg() {
  auto temp = unsafe_arena_release_pad_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::PadMessage* ControlCommand::unsafe_arena_release_pad_msg() {
  // @@protoc_insertion_point(field_release:control.ControlCommand.pad_msg)
  _has_bits_[0] &= ~0x00000010u;
  ::control::PadMessage* temp = pad_msg_;
  pad_msg_ = nullptr;
  return temp;
}
inline ::control::PadMessage* ControlCommand::_internal_mutable_pad_msg() {
  _has_bits_[0] |= 0x00000010u;
  if (pad_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::PadMessage>(GetArena());
    pad_msg_ = p;
  }
  return pad_msg_;
}
inline ::control::PadMessage* ControlCommand::mutable_pad_msg() {
  // @@protoc_insertion_point(field_mutable:control.ControlCommand.pad_msg)
  return _internal_mutable_pad_msg();
}
inline void ControlCommand::set_allocated_pad_msg(::control::PadMessage* pad_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_msg_);
  }
  if (pad_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_msg)->GetArena();
    if (message_arena != submessage_arena) {
      pad_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pad_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pad_msg_ = pad_msg;
  // @@protoc_insertion_point(field_set_allocated:control.ControlCommand.pad_msg)
}

// optional .control.common.EngageAdvice engage_advice = 18;
inline bool ControlCommand::_internal_has_engage_advice() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || engage_advice_ != nullptr);
  return value;
}
inline bool ControlCommand::has_engage_advice() const {
  return _internal_has_engage_advice();
}
inline const ::control::common::EngageAdvice& ControlCommand::_internal_engage_advice() const {
  const ::control::common::EngageAdvice* p = engage_advice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::EngageAdvice*>(
      &::control::common::_EngageAdvice_default_instance_);
}
inline const ::control::common::EngageAdvice& ControlCommand::engage_advice() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.engage_advice)
  return _internal_engage_advice();
}
inline void ControlCommand::unsafe_arena_set_allocated_engage_advice(
    ::control::common::EngageAdvice* engage_advice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice_);
  }
  engage_advice_ = engage_advice;
  if (engage_advice) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.ControlCommand.engage_advice)
}
inline ::control::common::EngageAdvice* ControlCommand::release_engage_advice() {
  auto temp = unsafe_arena_release_engage_advice();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::EngageAdvice* ControlCommand::unsafe_arena_release_engage_advice() {
  // @@protoc_insertion_point(field_release:control.ControlCommand.engage_advice)
  _has_bits_[0] &= ~0x00000020u;
  ::control::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = nullptr;
  return temp;
}
inline ::control::common::EngageAdvice* ControlCommand::_internal_mutable_engage_advice() {
  _has_bits_[0] |= 0x00000020u;
  if (engage_advice_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::EngageAdvice>(GetArena());
    engage_advice_ = p;
  }
  return engage_advice_;
}
inline ::control::common::EngageAdvice* ControlCommand::mutable_engage_advice() {
  // @@protoc_insertion_point(field_mutable:control.ControlCommand.engage_advice)
  return _internal_mutable_engage_advice();
}
inline void ControlCommand::set_allocated_engage_advice(::control::common::EngageAdvice* engage_advice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice_);
  }
  if (engage_advice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice)->GetArena();
    if (message_arena != submessage_arena) {
      engage_advice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engage_advice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  engage_advice_ = engage_advice;
  // @@protoc_insertion_point(field_set_allocated:control.ControlCommand.engage_advice)
}

// optional bool is_in_safe_mode = 19 [default = false];
inline bool ControlCommand::_internal_has_is_in_safe_mode() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ControlCommand::has_is_in_safe_mode() const {
  return _internal_has_is_in_safe_mode();
}
inline void ControlCommand::clear_is_in_safe_mode() {
  is_in_safe_mode_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ControlCommand::_internal_is_in_safe_mode() const {
  return is_in_safe_mode_;
}
inline bool ControlCommand::is_in_safe_mode() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.is_in_safe_mode)
  return _internal_is_in_safe_mode();
}
inline void ControlCommand::_internal_set_is_in_safe_mode(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_in_safe_mode_ = value;
}
inline void ControlCommand::set_is_in_safe_mode(bool value) {
  _internal_set_is_in_safe_mode(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.is_in_safe_mode)
}

// optional bool left_turn = 20 [deprecated = true];
inline bool ControlCommand::_internal_has_left_turn() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ControlCommand::has_left_turn() const {
  return _internal_has_left_turn();
}
inline void ControlCommand::clear_left_turn() {
  left_turn_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ControlCommand::_internal_left_turn() const {
  return left_turn_;
}
inline bool ControlCommand::left_turn() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.left_turn)
  return _internal_left_turn();
}
inline void ControlCommand::_internal_set_left_turn(bool value) {
  _has_bits_[0] |= 0x00080000u;
  left_turn_ = value;
}
inline void ControlCommand::set_left_turn(bool value) {
  _internal_set_left_turn(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.left_turn)
}

// optional bool right_turn = 21 [deprecated = true];
inline bool ControlCommand::_internal_has_right_turn() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ControlCommand::has_right_turn() const {
  return _internal_has_right_turn();
}
inline void ControlCommand::clear_right_turn() {
  right_turn_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ControlCommand::_internal_right_turn() const {
  return right_turn_;
}
inline bool ControlCommand::right_turn() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.right_turn)
  return _internal_right_turn();
}
inline void ControlCommand::_internal_set_right_turn(bool value) {
  _has_bits_[0] |= 0x00100000u;
  right_turn_ = value;
}
inline void ControlCommand::set_right_turn(bool value) {
  _internal_set_right_turn(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.right_turn)
}

// optional bool high_beam = 22 [deprecated = true];
inline bool ControlCommand::_internal_has_high_beam() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ControlCommand::has_high_beam() const {
  return _internal_has_high_beam();
}
inline void ControlCommand::clear_high_beam() {
  high_beam_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ControlCommand::_internal_high_beam() const {
  return high_beam_;
}
inline bool ControlCommand::high_beam() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.high_beam)
  return _internal_high_beam();
}
inline void ControlCommand::_internal_set_high_beam(bool value) {
  _has_bits_[0] |= 0x00200000u;
  high_beam_ = value;
}
inline void ControlCommand::set_high_beam(bool value) {
  _internal_set_high_beam(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.high_beam)
}

// optional bool low_beam = 23 [deprecated = true];
inline bool ControlCommand::_internal_has_low_beam() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ControlCommand::has_low_beam() const {
  return _internal_has_low_beam();
}
inline void ControlCommand::clear_low_beam() {
  low_beam_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ControlCommand::_internal_low_beam() const {
  return low_beam_;
}
inline bool ControlCommand::low_beam() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.low_beam)
  return _internal_low_beam();
}
inline void ControlCommand::_internal_set_low_beam(bool value) {
  _has_bits_[0] |= 0x00400000u;
  low_beam_ = value;
}
inline void ControlCommand::set_low_beam(bool value) {
  _internal_set_low_beam(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.low_beam)
}

// optional bool horn = 24 [deprecated = true];
inline bool ControlCommand::_internal_has_horn() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ControlCommand::has_horn() const {
  return _internal_has_horn();
}
inline void ControlCommand::clear_horn() {
  horn_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool ControlCommand::_internal_horn() const {
  return horn_;
}
inline bool ControlCommand::horn() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.horn)
  return _internal_horn();
}
inline void ControlCommand::_internal_set_horn(bool value) {
  _has_bits_[0] |= 0x04000000u;
  horn_ = value;
}
inline void ControlCommand::set_horn(bool value) {
  _internal_set_horn(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.horn)
}

// optional .control.TurnSignal turnsignal = 25 [deprecated = true];
inline bool ControlCommand::_internal_has_turnsignal() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ControlCommand::has_turnsignal() const {
  return _internal_has_turnsignal();
}
inline void ControlCommand::clear_turnsignal() {
  turnsignal_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::control::TurnSignal ControlCommand::_internal_turnsignal() const {
  return static_cast< ::control::TurnSignal >(turnsignal_);
}
inline ::control::TurnSignal ControlCommand::turnsignal() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.turnsignal)
  return _internal_turnsignal();
}
inline void ControlCommand::_internal_set_turnsignal(::control::TurnSignal value) {
  assert(::control::TurnSignal_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  turnsignal_ = value;
}
inline void ControlCommand::set_turnsignal(::control::TurnSignal value) {
  _internal_set_turnsignal(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.turnsignal)
}

// optional int32 door_fl_status = 26;
inline bool ControlCommand::_internal_has_door_fl_status() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ControlCommand::has_door_fl_status() const {
  return _internal_has_door_fl_status();
}
inline void ControlCommand::clear_door_fl_status() {
  door_fl_status_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommand::_internal_door_fl_status() const {
  return door_fl_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommand::door_fl_status() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.door_fl_status)
  return _internal_door_fl_status();
}
inline void ControlCommand::_internal_set_door_fl_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  door_fl_status_ = value;
}
inline void ControlCommand::set_door_fl_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_door_fl_status(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.door_fl_status)
}

// optional bool vehicle_stop_status = 27;
inline bool ControlCommand::_internal_has_vehicle_stop_status() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ControlCommand::has_vehicle_stop_status() const {
  return _internal_has_vehicle_stop_status();
}
inline void ControlCommand::clear_vehicle_stop_status() {
  vehicle_stop_status_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ControlCommand::_internal_vehicle_stop_status() const {
  return vehicle_stop_status_;
}
inline bool ControlCommand::vehicle_stop_status() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.vehicle_stop_status)
  return _internal_vehicle_stop_status();
}
inline void ControlCommand::_internal_set_vehicle_stop_status(bool value) {
  _has_bits_[0] |= 0x08000000u;
  vehicle_stop_status_ = value;
}
inline void ControlCommand::set_vehicle_stop_status(bool value) {
  _internal_set_vehicle_stop_status(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.vehicle_stop_status)
}

// optional uint32 epb_cmd = 28;
inline bool ControlCommand::_internal_has_epb_cmd() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ControlCommand::has_epb_cmd() const {
  return _internal_has_epb_cmd();
}
inline void ControlCommand::clear_epb_cmd() {
  epb_cmd_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlCommand::_internal_epb_cmd() const {
  return epb_cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlCommand::epb_cmd() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.epb_cmd)
  return _internal_epb_cmd();
}
inline void ControlCommand::_internal_set_epb_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  epb_cmd_ = value;
}
inline void ControlCommand::set_epb_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epb_cmd(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.epb_cmd)
}

// optional uint32 pto_cmd = 29;
inline bool ControlCommand::_internal_has_pto_cmd() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ControlCommand::has_pto_cmd() const {
  return _internal_has_pto_cmd();
}
inline void ControlCommand::clear_pto_cmd() {
  pto_cmd_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlCommand::_internal_pto_cmd() const {
  return pto_cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlCommand::pto_cmd() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.pto_cmd)
  return _internal_pto_cmd();
}
inline void ControlCommand::_internal_set_pto_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  pto_cmd_ = value;
}
inline void ControlCommand::set_pto_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pto_cmd(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.pto_cmd)
}

// optional double arm_angle = 30 [default = 0];
inline bool ControlCommand::_internal_has_arm_angle() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ControlCommand::has_arm_angle() const {
  return _internal_has_arm_angle();
}
inline void ControlCommand::clear_arm_angle() {
  arm_angle_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double ControlCommand::_internal_arm_angle() const {
  return arm_angle_;
}
inline double ControlCommand::arm_angle() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.arm_angle)
  return _internal_arm_angle();
}
inline void ControlCommand::_internal_set_arm_angle(double value) {
  _has_bits_[0] |= 0x40000000u;
  arm_angle_ = value;
}
inline void ControlCommand::set_arm_angle(double value) {
  _internal_set_arm_angle(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.arm_angle)
}

// optional bool arm_enable = 31 [default = false];
inline bool ControlCommand::_internal_has_arm_enable() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ControlCommand::has_arm_enable() const {
  return _internal_has_arm_enable();
}
inline void ControlCommand::clear_arm_enable() {
  arm_enable_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ControlCommand::_internal_arm_enable() const {
  return arm_enable_;
}
inline bool ControlCommand::arm_enable() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.arm_enable)
  return _internal_arm_enable();
}
inline void ControlCommand::_internal_set_arm_enable(bool value) {
  _has_bits_[0] |= 0x10000000u;
  arm_enable_ = value;
}
inline void ControlCommand::set_arm_enable(bool value) {
  _internal_set_arm_enable(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.arm_enable)
}

// optional double shovel_angle = 32 [default = 0];
inline bool ControlCommand::_internal_has_shovel_angle() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ControlCommand::has_shovel_angle() const {
  return _internal_has_shovel_angle();
}
inline void ControlCommand::clear_shovel_angle() {
  shovel_angle_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double ControlCommand::_internal_shovel_angle() const {
  return shovel_angle_;
}
inline double ControlCommand::shovel_angle() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.shovel_angle)
  return _internal_shovel_angle();
}
inline void ControlCommand::_internal_set_shovel_angle(double value) {
  _has_bits_[0] |= 0x80000000u;
  shovel_angle_ = value;
}
inline void ControlCommand::set_shovel_angle(double value) {
  _internal_set_shovel_angle(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.shovel_angle)
}

// optional bool shovel_enable = 33 [default = false];
inline bool ControlCommand::_internal_has_shovel_enable() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ControlCommand::has_shovel_enable() const {
  return _internal_has_shovel_enable();
}
inline void ControlCommand::clear_shovel_enable() {
  shovel_enable_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ControlCommand::_internal_shovel_enable() const {
  return shovel_enable_;
}
inline bool ControlCommand::shovel_enable() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.shovel_enable)
  return _internal_shovel_enable();
}
inline void ControlCommand::_internal_set_shovel_enable(bool value) {
  _has_bits_[0] |= 0x20000000u;
  shovel_enable_ = value;
}
inline void ControlCommand::set_shovel_enable(bool value) {
  _internal_set_shovel_enable(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.shovel_enable)
}

// optional bool estop = 34 [default = false];
inline bool ControlCommand::_internal_has_estop() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ControlCommand::has_estop() const {
  return _internal_has_estop();
}
inline void ControlCommand::clear_estop() {
  estop_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ControlCommand::_internal_estop() const {
  return estop_;
}
inline bool ControlCommand::estop() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.estop)
  return _internal_estop();
}
inline void ControlCommand::_internal_set_estop(bool value) {
  _has_bits_[1] |= 0x00000002u;
  estop_ = value;
}
inline void ControlCommand::set_estop(bool value) {
  _internal_set_estop(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.estop)
}

// optional bool rapid_shake = 35 [default = false];
inline bool ControlCommand::_internal_has_rapid_shake() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ControlCommand::has_rapid_shake() const {
  return _internal_has_rapid_shake();
}
inline void ControlCommand::clear_rapid_shake() {
  rapid_shake_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ControlCommand::_internal_rapid_shake() const {
  return rapid_shake_;
}
inline bool ControlCommand::rapid_shake() const {
  // @@protoc_insertion_point(field_get:control.ControlCommand.rapid_shake)
  return _internal_rapid_shake();
}
inline void ControlCommand::_internal_set_rapid_shake(bool value) {
  _has_bits_[1] |= 0x00000004u;
  rapid_shake_ = value;
}
inline void ControlCommand::set_rapid_shake(bool value) {
  _internal_set_rapid_shake(value);
  // @@protoc_insertion_point(field_set:control.ControlCommand.rapid_shake)
}

// -------------------------------------------------------------------

// SimpleLongitudinalDebug

// optional double station_reference = 1;
inline bool SimpleLongitudinalDebug::_internal_has_station_reference() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_station_reference() const {
  return _internal_has_station_reference();
}
inline void SimpleLongitudinalDebug::clear_station_reference() {
  station_reference_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimpleLongitudinalDebug::_internal_station_reference() const {
  return station_reference_;
}
inline double SimpleLongitudinalDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.station_reference)
  return _internal_station_reference();
}
inline void SimpleLongitudinalDebug::_internal_set_station_reference(double value) {
  _has_bits_[0] |= 0x00000008u;
  station_reference_ = value;
}
inline void SimpleLongitudinalDebug::set_station_reference(double value) {
  _internal_set_station_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.station_reference)
}

// optional double station_error = 2;
inline bool SimpleLongitudinalDebug::_internal_has_station_error() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_station_error() const {
  return _internal_has_station_error();
}
inline void SimpleLongitudinalDebug::clear_station_error() {
  station_error_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimpleLongitudinalDebug::_internal_station_error() const {
  return station_error_;
}
inline double SimpleLongitudinalDebug::station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.station_error)
  return _internal_station_error();
}
inline void SimpleLongitudinalDebug::_internal_set_station_error(double value) {
  _has_bits_[0] |= 0x00000010u;
  station_error_ = value;
}
inline void SimpleLongitudinalDebug::set_station_error(double value) {
  _internal_set_station_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.station_error)
}

// optional double station_error_limited = 3;
inline bool SimpleLongitudinalDebug::_internal_has_station_error_limited() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_station_error_limited() const {
  return _internal_has_station_error_limited();
}
inline void SimpleLongitudinalDebug::clear_station_error_limited() {
  station_error_limited_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimpleLongitudinalDebug::_internal_station_error_limited() const {
  return station_error_limited_;
}
inline double SimpleLongitudinalDebug::station_error_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.station_error_limited)
  return _internal_station_error_limited();
}
inline void SimpleLongitudinalDebug::_internal_set_station_error_limited(double value) {
  _has_bits_[0] |= 0x00000020u;
  station_error_limited_ = value;
}
inline void SimpleLongitudinalDebug::set_station_error_limited(double value) {
  _internal_set_station_error_limited(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.station_error_limited)
}

// optional double preview_station_error = 4;
inline bool SimpleLongitudinalDebug::_internal_has_preview_station_error() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_preview_station_error() const {
  return _internal_has_preview_station_error();
}
inline void SimpleLongitudinalDebug::clear_preview_station_error() {
  preview_station_error_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimpleLongitudinalDebug::_internal_preview_station_error() const {
  return preview_station_error_;
}
inline double SimpleLongitudinalDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.preview_station_error)
  return _internal_preview_station_error();
}
inline void SimpleLongitudinalDebug::_internal_set_preview_station_error(double value) {
  _has_bits_[0] |= 0x00000040u;
  preview_station_error_ = value;
}
inline void SimpleLongitudinalDebug::set_preview_station_error(double value) {
  _internal_set_preview_station_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.preview_station_error)
}

// optional double speed_reference = 5;
inline bool SimpleLongitudinalDebug::_internal_has_speed_reference() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_speed_reference() const {
  return _internal_has_speed_reference();
}
inline void SimpleLongitudinalDebug::clear_speed_reference() {
  speed_reference_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimpleLongitudinalDebug::_internal_speed_reference() const {
  return speed_reference_;
}
inline double SimpleLongitudinalDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.speed_reference)
  return _internal_speed_reference();
}
inline void SimpleLongitudinalDebug::_internal_set_speed_reference(double value) {
  _has_bits_[0] |= 0x00000080u;
  speed_reference_ = value;
}
inline void SimpleLongitudinalDebug::set_speed_reference(double value) {
  _internal_set_speed_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.speed_reference)
}

// optional double speed_error = 6;
inline bool SimpleLongitudinalDebug::_internal_has_speed_error() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_speed_error() const {
  return _internal_has_speed_error();
}
inline void SimpleLongitudinalDebug::clear_speed_error() {
  speed_error_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimpleLongitudinalDebug::_internal_speed_error() const {
  return speed_error_;
}
inline double SimpleLongitudinalDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.speed_error)
  return _internal_speed_error();
}
inline void SimpleLongitudinalDebug::_internal_set_speed_error(double value) {
  _has_bits_[0] |= 0x00000100u;
  speed_error_ = value;
}
inline void SimpleLongitudinalDebug::set_speed_error(double value) {
  _internal_set_speed_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.speed_error)
}

// optional double speed_controller_input_limited = 7;
inline bool SimpleLongitudinalDebug::_internal_has_speed_controller_input_limited() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_speed_controller_input_limited() const {
  return _internal_has_speed_controller_input_limited();
}
inline void SimpleLongitudinalDebug::clear_speed_controller_input_limited() {
  speed_controller_input_limited_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SimpleLongitudinalDebug::_internal_speed_controller_input_limited() const {
  return speed_controller_input_limited_;
}
inline double SimpleLongitudinalDebug::speed_controller_input_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.speed_controller_input_limited)
  return _internal_speed_controller_input_limited();
}
inline void SimpleLongitudinalDebug::_internal_set_speed_controller_input_limited(double value) {
  _has_bits_[0] |= 0x00000200u;
  speed_controller_input_limited_ = value;
}
inline void SimpleLongitudinalDebug::set_speed_controller_input_limited(double value) {
  _internal_set_speed_controller_input_limited(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.speed_controller_input_limited)
}

// optional double preview_speed_reference = 8;
inline bool SimpleLongitudinalDebug::_internal_has_preview_speed_reference() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_preview_speed_reference() const {
  return _internal_has_preview_speed_reference();
}
inline void SimpleLongitudinalDebug::clear_preview_speed_reference() {
  preview_speed_reference_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SimpleLongitudinalDebug::_internal_preview_speed_reference() const {
  return preview_speed_reference_;
}
inline double SimpleLongitudinalDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.preview_speed_reference)
  return _internal_preview_speed_reference();
}
inline void SimpleLongitudinalDebug::_internal_set_preview_speed_reference(double value) {
  _has_bits_[0] |= 0x00000400u;
  preview_speed_reference_ = value;
}
inline void SimpleLongitudinalDebug::set_preview_speed_reference(double value) {
  _internal_set_preview_speed_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.preview_speed_reference)
}

// optional double preview_speed_error = 9;
inline bool SimpleLongitudinalDebug::_internal_has_preview_speed_error() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_preview_speed_error() const {
  return _internal_has_preview_speed_error();
}
inline void SimpleLongitudinalDebug::clear_preview_speed_error() {
  preview_speed_error_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SimpleLongitudinalDebug::_internal_preview_speed_error() const {
  return preview_speed_error_;
}
inline double SimpleLongitudinalDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.preview_speed_error)
  return _internal_preview_speed_error();
}
inline void SimpleLongitudinalDebug::_internal_set_preview_speed_error(double value) {
  _has_bits_[0] |= 0x00000800u;
  preview_speed_error_ = value;
}
inline void SimpleLongitudinalDebug::set_preview_speed_error(double value) {
  _internal_set_preview_speed_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.preview_speed_error)
}

// optional double preview_acceleration_reference = 10;
inline bool SimpleLongitudinalDebug::_internal_has_preview_acceleration_reference() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_preview_acceleration_reference() const {
  return _internal_has_preview_acceleration_reference();
}
inline void SimpleLongitudinalDebug::clear_preview_acceleration_reference() {
  preview_acceleration_reference_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SimpleLongitudinalDebug::_internal_preview_acceleration_reference() const {
  return preview_acceleration_reference_;
}
inline double SimpleLongitudinalDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.preview_acceleration_reference)
  return _internal_preview_acceleration_reference();
}
inline void SimpleLongitudinalDebug::_internal_set_preview_acceleration_reference(double value) {
  _has_bits_[0] |= 0x00001000u;
  preview_acceleration_reference_ = value;
}
inline void SimpleLongitudinalDebug::set_preview_acceleration_reference(double value) {
  _internal_set_preview_acceleration_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.preview_acceleration_reference)
}

// optional double acceleration_cmd_closeloop = 11;
inline bool SimpleLongitudinalDebug::_internal_has_acceleration_cmd_closeloop() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_acceleration_cmd_closeloop() const {
  return _internal_has_acceleration_cmd_closeloop();
}
inline void SimpleLongitudinalDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SimpleLongitudinalDebug::_internal_acceleration_cmd_closeloop() const {
  return acceleration_cmd_closeloop_;
}
inline double SimpleLongitudinalDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
  return _internal_acceleration_cmd_closeloop();
}
inline void SimpleLongitudinalDebug::_internal_set_acceleration_cmd_closeloop(double value) {
  _has_bits_[0] |= 0x00002000u;
  acceleration_cmd_closeloop_ = value;
}
inline void SimpleLongitudinalDebug::set_acceleration_cmd_closeloop(double value) {
  _internal_set_acceleration_cmd_closeloop(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 12;
inline bool SimpleLongitudinalDebug::_internal_has_acceleration_cmd() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_acceleration_cmd() const {
  return _internal_has_acceleration_cmd();
}
inline void SimpleLongitudinalDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SimpleLongitudinalDebug::_internal_acceleration_cmd() const {
  return acceleration_cmd_;
}
inline double SimpleLongitudinalDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.acceleration_cmd)
  return _internal_acceleration_cmd();
}
inline void SimpleLongitudinalDebug::_internal_set_acceleration_cmd(double value) {
  _has_bits_[0] |= 0x00004000u;
  acceleration_cmd_ = value;
}
inline void SimpleLongitudinalDebug::set_acceleration_cmd(double value) {
  _internal_set_acceleration_cmd(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 13;
inline bool SimpleLongitudinalDebug::_internal_has_acceleration_lookup() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_acceleration_lookup() const {
  return _internal_has_acceleration_lookup();
}
inline void SimpleLongitudinalDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SimpleLongitudinalDebug::_internal_acceleration_lookup() const {
  return acceleration_lookup_;
}
inline double SimpleLongitudinalDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.acceleration_lookup)
  return _internal_acceleration_lookup();
}
inline void SimpleLongitudinalDebug::_internal_set_acceleration_lookup(double value) {
  _has_bits_[0] |= 0x00008000u;
  acceleration_lookup_ = value;
}
inline void SimpleLongitudinalDebug::set_acceleration_lookup(double value) {
  _internal_set_acceleration_lookup(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.acceleration_lookup)
}

// optional double speed_lookup = 14;
inline bool SimpleLongitudinalDebug::_internal_has_speed_lookup() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_speed_lookup() const {
  return _internal_has_speed_lookup();
}
inline void SimpleLongitudinalDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double SimpleLongitudinalDebug::_internal_speed_lookup() const {
  return speed_lookup_;
}
inline double SimpleLongitudinalDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.speed_lookup)
  return _internal_speed_lookup();
}
inline void SimpleLongitudinalDebug::_internal_set_speed_lookup(double value) {
  _has_bits_[0] |= 0x00010000u;
  speed_lookup_ = value;
}
inline void SimpleLongitudinalDebug::set_speed_lookup(double value) {
  _internal_set_speed_lookup(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.speed_lookup)
}

// optional double calibration_value = 15;
inline bool SimpleLongitudinalDebug::_internal_has_calibration_value() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_calibration_value() const {
  return _internal_has_calibration_value();
}
inline void SimpleLongitudinalDebug::clear_calibration_value() {
  calibration_value_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double SimpleLongitudinalDebug::_internal_calibration_value() const {
  return calibration_value_;
}
inline double SimpleLongitudinalDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.calibration_value)
  return _internal_calibration_value();
}
inline void SimpleLongitudinalDebug::_internal_set_calibration_value(double value) {
  _has_bits_[0] |= 0x00020000u;
  calibration_value_ = value;
}
inline void SimpleLongitudinalDebug::set_calibration_value(double value) {
  _internal_set_calibration_value(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.calibration_value)
}

// optional double throttle_cmd = 16;
inline bool SimpleLongitudinalDebug::_internal_has_throttle_cmd() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_throttle_cmd() const {
  return _internal_has_throttle_cmd();
}
inline void SimpleLongitudinalDebug::clear_throttle_cmd() {
  throttle_cmd_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double SimpleLongitudinalDebug::_internal_throttle_cmd() const {
  return throttle_cmd_;
}
inline double SimpleLongitudinalDebug::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.throttle_cmd)
  return _internal_throttle_cmd();
}
inline void SimpleLongitudinalDebug::_internal_set_throttle_cmd(double value) {
  _has_bits_[0] |= 0x00040000u;
  throttle_cmd_ = value;
}
inline void SimpleLongitudinalDebug::set_throttle_cmd(double value) {
  _internal_set_throttle_cmd(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.throttle_cmd)
}

// optional double brake_cmd = 17;
inline bool SimpleLongitudinalDebug::_internal_has_brake_cmd() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_brake_cmd() const {
  return _internal_has_brake_cmd();
}
inline void SimpleLongitudinalDebug::clear_brake_cmd() {
  brake_cmd_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double SimpleLongitudinalDebug::_internal_brake_cmd() const {
  return brake_cmd_;
}
inline double SimpleLongitudinalDebug::brake_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.brake_cmd)
  return _internal_brake_cmd();
}
inline void SimpleLongitudinalDebug::_internal_set_brake_cmd(double value) {
  _has_bits_[0] |= 0x00080000u;
  brake_cmd_ = value;
}
inline void SimpleLongitudinalDebug::set_brake_cmd(double value) {
  _internal_set_brake_cmd(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.brake_cmd)
}

// optional bool is_full_stop = 18;
inline bool SimpleLongitudinalDebug::_internal_has_is_full_stop() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_full_stop() const {
  return _internal_has_is_full_stop();
}
inline void SimpleLongitudinalDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool SimpleLongitudinalDebug::_internal_is_full_stop() const {
  return is_full_stop_;
}
inline bool SimpleLongitudinalDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_full_stop)
  return _internal_is_full_stop();
}
inline void SimpleLongitudinalDebug::_internal_set_is_full_stop(bool value) {
  _has_bits_[1] |= 0x00000010u;
  is_full_stop_ = value;
}
inline void SimpleLongitudinalDebug::set_is_full_stop(bool value) {
  _internal_set_is_full_stop(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_full_stop)
}

// optional double slope_offset_compensation = 19;
inline bool SimpleLongitudinalDebug::_internal_has_slope_offset_compensation() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_slope_offset_compensation() const {
  return _internal_has_slope_offset_compensation();
}
inline void SimpleLongitudinalDebug::clear_slope_offset_compensation() {
  slope_offset_compensation_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double SimpleLongitudinalDebug::_internal_slope_offset_compensation() const {
  return slope_offset_compensation_;
}
inline double SimpleLongitudinalDebug::slope_offset_compensation() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.slope_offset_compensation)
  return _internal_slope_offset_compensation();
}
inline void SimpleLongitudinalDebug::_internal_set_slope_offset_compensation(double value) {
  _has_bits_[0] |= 0x00100000u;
  slope_offset_compensation_ = value;
}
inline void SimpleLongitudinalDebug::set_slope_offset_compensation(double value) {
  _internal_set_slope_offset_compensation(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.slope_offset_compensation)
}

// optional double current_station = 20;
inline bool SimpleLongitudinalDebug::_internal_has_current_station() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_current_station() const {
  return _internal_has_current_station();
}
inline void SimpleLongitudinalDebug::clear_current_station() {
  current_station_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double SimpleLongitudinalDebug::_internal_current_station() const {
  return current_station_;
}
inline double SimpleLongitudinalDebug::current_station() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.current_station)
  return _internal_current_station();
}
inline void SimpleLongitudinalDebug::_internal_set_current_station(double value) {
  _has_bits_[0] |= 0x00200000u;
  current_station_ = value;
}
inline void SimpleLongitudinalDebug::set_current_station(double value) {
  _internal_set_current_station(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.current_station)
}

// optional double path_remain = 21;
inline bool SimpleLongitudinalDebug::_internal_has_path_remain() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_path_remain() const {
  return _internal_has_path_remain();
}
inline void SimpleLongitudinalDebug::clear_path_remain() {
  path_remain_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double SimpleLongitudinalDebug::_internal_path_remain() const {
  return path_remain_;
}
inline double SimpleLongitudinalDebug::path_remain() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.path_remain)
  return _internal_path_remain();
}
inline void SimpleLongitudinalDebug::_internal_set_path_remain(double value) {
  _has_bits_[0] |= 0x00400000u;
  path_remain_ = value;
}
inline void SimpleLongitudinalDebug::set_path_remain(double value) {
  _internal_set_path_remain(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.path_remain)
}

// optional int32 pid_saturation_status = 22;
inline bool SimpleLongitudinalDebug::_internal_has_pid_saturation_status() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_pid_saturation_status() const {
  return _internal_has_pid_saturation_status();
}
inline void SimpleLongitudinalDebug::clear_pid_saturation_status() {
  pid_saturation_status_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleLongitudinalDebug::_internal_pid_saturation_status() const {
  return pid_saturation_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleLongitudinalDebug::pid_saturation_status() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.pid_saturation_status)
  return _internal_pid_saturation_status();
}
inline void SimpleLongitudinalDebug::_internal_set_pid_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  pid_saturation_status_ = value;
}
inline void SimpleLongitudinalDebug::set_pid_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid_saturation_status(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.pid_saturation_status)
}

// optional int32 leadlag_saturation_status = 23;
inline bool SimpleLongitudinalDebug::_internal_has_leadlag_saturation_status() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_leadlag_saturation_status() const {
  return _internal_has_leadlag_saturation_status();
}
inline void SimpleLongitudinalDebug::clear_leadlag_saturation_status() {
  leadlag_saturation_status_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleLongitudinalDebug::_internal_leadlag_saturation_status() const {
  return leadlag_saturation_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleLongitudinalDebug::leadlag_saturation_status() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.leadlag_saturation_status)
  return _internal_leadlag_saturation_status();
}
inline void SimpleLongitudinalDebug::_internal_set_leadlag_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  leadlag_saturation_status_ = value;
}
inline void SimpleLongitudinalDebug::set_leadlag_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leadlag_saturation_status(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.leadlag_saturation_status)
}

// optional double speed_offset = 24;
inline bool SimpleLongitudinalDebug::_internal_has_speed_offset() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_speed_offset() const {
  return _internal_has_speed_offset();
}
inline void SimpleLongitudinalDebug::clear_speed_offset() {
  speed_offset_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double SimpleLongitudinalDebug::_internal_speed_offset() const {
  return speed_offset_;
}
inline double SimpleLongitudinalDebug::speed_offset() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.speed_offset)
  return _internal_speed_offset();
}
inline void SimpleLongitudinalDebug::_internal_set_speed_offset(double value) {
  _has_bits_[0] |= 0x02000000u;
  speed_offset_ = value;
}
inline void SimpleLongitudinalDebug::set_speed_offset(double value) {
  _internal_set_speed_offset(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.speed_offset)
}

// optional double current_speed = 25;
inline bool SimpleLongitudinalDebug::_internal_has_current_speed() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_current_speed() const {
  return _internal_has_current_speed();
}
inline void SimpleLongitudinalDebug::clear_current_speed() {
  current_speed_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double SimpleLongitudinalDebug::_internal_current_speed() const {
  return current_speed_;
}
inline double SimpleLongitudinalDebug::current_speed() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.current_speed)
  return _internal_current_speed();
}
inline void SimpleLongitudinalDebug::_internal_set_current_speed(double value) {
  _has_bits_[0] |= 0x04000000u;
  current_speed_ = value;
}
inline void SimpleLongitudinalDebug::set_current_speed(double value) {
  _internal_set_current_speed(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.current_speed)
}

// optional double acceleration_reference = 26;
inline bool SimpleLongitudinalDebug::_internal_has_acceleration_reference() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_acceleration_reference() const {
  return _internal_has_acceleration_reference();
}
inline void SimpleLongitudinalDebug::clear_acceleration_reference() {
  acceleration_reference_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double SimpleLongitudinalDebug::_internal_acceleration_reference() const {
  return acceleration_reference_;
}
inline double SimpleLongitudinalDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.acceleration_reference)
  return _internal_acceleration_reference();
}
inline void SimpleLongitudinalDebug::_internal_set_acceleration_reference(double value) {
  _has_bits_[0] |= 0x08000000u;
  acceleration_reference_ = value;
}
inline void SimpleLongitudinalDebug::set_acceleration_reference(double value) {
  _internal_set_acceleration_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.acceleration_reference)
}

// optional double current_acceleration = 27;
inline bool SimpleLongitudinalDebug::_internal_has_current_acceleration() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_current_acceleration() const {
  return _internal_has_current_acceleration();
}
inline void SimpleLongitudinalDebug::clear_current_acceleration() {
  current_acceleration_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double SimpleLongitudinalDebug::_internal_current_acceleration() const {
  return current_acceleration_;
}
inline double SimpleLongitudinalDebug::current_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.current_acceleration)
  return _internal_current_acceleration();
}
inline void SimpleLongitudinalDebug::_internal_set_current_acceleration(double value) {
  _has_bits_[0] |= 0x10000000u;
  current_acceleration_ = value;
}
inline void SimpleLongitudinalDebug::set_current_acceleration(double value) {
  _internal_set_current_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.current_acceleration)
}

// optional double acceleration_error = 28;
inline bool SimpleLongitudinalDebug::_internal_has_acceleration_error() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_acceleration_error() const {
  return _internal_has_acceleration_error();
}
inline void SimpleLongitudinalDebug::clear_acceleration_error() {
  acceleration_error_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double SimpleLongitudinalDebug::_internal_acceleration_error() const {
  return acceleration_error_;
}
inline double SimpleLongitudinalDebug::acceleration_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.acceleration_error)
  return _internal_acceleration_error();
}
inline void SimpleLongitudinalDebug::_internal_set_acceleration_error(double value) {
  _has_bits_[0] |= 0x20000000u;
  acceleration_error_ = value;
}
inline void SimpleLongitudinalDebug::set_acceleration_error(double value) {
  _internal_set_acceleration_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.acceleration_error)
}

// optional double jerk_reference = 29;
inline bool SimpleLongitudinalDebug::_internal_has_jerk_reference() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_jerk_reference() const {
  return _internal_has_jerk_reference();
}
inline void SimpleLongitudinalDebug::clear_jerk_reference() {
  jerk_reference_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double SimpleLongitudinalDebug::_internal_jerk_reference() const {
  return jerk_reference_;
}
inline double SimpleLongitudinalDebug::jerk_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.jerk_reference)
  return _internal_jerk_reference();
}
inline void SimpleLongitudinalDebug::_internal_set_jerk_reference(double value) {
  _has_bits_[0] |= 0x40000000u;
  jerk_reference_ = value;
}
inline void SimpleLongitudinalDebug::set_jerk_reference(double value) {
  _internal_set_jerk_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.jerk_reference)
}

// optional double current_jerk = 30;
inline bool SimpleLongitudinalDebug::_internal_has_current_jerk() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_current_jerk() const {
  return _internal_has_current_jerk();
}
inline void SimpleLongitudinalDebug::clear_current_jerk() {
  current_jerk_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double SimpleLongitudinalDebug::_internal_current_jerk() const {
  return current_jerk_;
}
inline double SimpleLongitudinalDebug::current_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.current_jerk)
  return _internal_current_jerk();
}
inline void SimpleLongitudinalDebug::_internal_set_current_jerk(double value) {
  _has_bits_[0] |= 0x80000000u;
  current_jerk_ = value;
}
inline void SimpleLongitudinalDebug::set_current_jerk(double value) {
  _internal_set_current_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.current_jerk)
}

// optional double jerk_error = 31;
inline bool SimpleLongitudinalDebug::_internal_has_jerk_error() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_jerk_error() const {
  return _internal_has_jerk_error();
}
inline void SimpleLongitudinalDebug::clear_jerk_error() {
  jerk_error_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline double SimpleLongitudinalDebug::_internal_jerk_error() const {
  return jerk_error_;
}
inline double SimpleLongitudinalDebug::jerk_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.jerk_error)
  return _internal_jerk_error();
}
inline void SimpleLongitudinalDebug::_internal_set_jerk_error(double value) {
  _has_bits_[1] |= 0x00000001u;
  jerk_error_ = value;
}
inline void SimpleLongitudinalDebug::set_jerk_error(double value) {
  _internal_set_jerk_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.jerk_error)
}

// optional .control.common.TrajectoryPoint current_matched_point = 32;
inline bool SimpleLongitudinalDebug::_internal_has_current_matched_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_matched_point_ != nullptr);
  return value;
}
inline bool SimpleLongitudinalDebug::has_current_matched_point() const {
  return _internal_has_current_matched_point();
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalDebug::_internal_current_matched_point() const {
  const ::control::common::TrajectoryPoint* p = current_matched_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::TrajectoryPoint*>(
      &::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalDebug::current_matched_point() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.current_matched_point)
  return _internal_current_matched_point();
}
inline void SimpleLongitudinalDebug::unsafe_arena_set_allocated_current_matched_point(
    ::control::common::TrajectoryPoint* current_matched_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_matched_point_);
  }
  current_matched_point_ = current_matched_point;
  if (current_matched_point) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLongitudinalDebug.current_matched_point)
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::release_current_matched_point() {
  auto temp = unsafe_arena_release_current_matched_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::unsafe_arena_release_current_matched_point() {
  // @@protoc_insertion_point(field_release:control.SimpleLongitudinalDebug.current_matched_point)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::TrajectoryPoint* temp = current_matched_point_;
  current_matched_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::_internal_mutable_current_matched_point() {
  _has_bits_[0] |= 0x00000001u;
  if (current_matched_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::TrajectoryPoint>(GetArena());
    current_matched_point_ = p;
  }
  return current_matched_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::mutable_current_matched_point() {
  // @@protoc_insertion_point(field_mutable:control.SimpleLongitudinalDebug.current_matched_point)
  return _internal_mutable_current_matched_point();
}
inline void SimpleLongitudinalDebug::set_allocated_current_matched_point(::control::common::TrajectoryPoint* current_matched_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_matched_point_);
  }
  if (current_matched_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_matched_point)->GetArena();
    if (message_arena != submessage_arena) {
      current_matched_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_matched_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_matched_point_ = current_matched_point;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLongitudinalDebug.current_matched_point)
}

// optional .control.common.TrajectoryPoint current_reference_point = 33;
inline bool SimpleLongitudinalDebug::_internal_has_current_reference_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || current_reference_point_ != nullptr);
  return value;
}
inline bool SimpleLongitudinalDebug::has_current_reference_point() const {
  return _internal_has_current_reference_point();
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalDebug::_internal_current_reference_point() const {
  const ::control::common::TrajectoryPoint* p = current_reference_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::TrajectoryPoint*>(
      &::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalDebug::current_reference_point() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.current_reference_point)
  return _internal_current_reference_point();
}
inline void SimpleLongitudinalDebug::unsafe_arena_set_allocated_current_reference_point(
    ::control::common::TrajectoryPoint* current_reference_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_reference_point_);
  }
  current_reference_point_ = current_reference_point;
  if (current_reference_point) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLongitudinalDebug.current_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::release_current_reference_point() {
  auto temp = unsafe_arena_release_current_reference_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::unsafe_arena_release_current_reference_point() {
  // @@protoc_insertion_point(field_release:control.SimpleLongitudinalDebug.current_reference_point)
  _has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* temp = current_reference_point_;
  current_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::_internal_mutable_current_reference_point() {
  _has_bits_[0] |= 0x00000002u;
  if (current_reference_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::TrajectoryPoint>(GetArena());
    current_reference_point_ = p;
  }
  return current_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::mutable_current_reference_point() {
  // @@protoc_insertion_point(field_mutable:control.SimpleLongitudinalDebug.current_reference_point)
  return _internal_mutable_current_reference_point();
}
inline void SimpleLongitudinalDebug::set_allocated_current_reference_point(::control::common::TrajectoryPoint* current_reference_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_reference_point_);
  }
  if (current_reference_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_reference_point)->GetArena();
    if (message_arena != submessage_arena) {
      current_reference_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_reference_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_reference_point_ = current_reference_point;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLongitudinalDebug.current_reference_point)
}

// optional .control.common.TrajectoryPoint preview_reference_point = 34;
inline bool SimpleLongitudinalDebug::_internal_has_preview_reference_point() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || preview_reference_point_ != nullptr);
  return value;
}
inline bool SimpleLongitudinalDebug::has_preview_reference_point() const {
  return _internal_has_preview_reference_point();
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalDebug::_internal_preview_reference_point() const {
  const ::control::common::TrajectoryPoint* p = preview_reference_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::TrajectoryPoint*>(
      &::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLongitudinalDebug::preview_reference_point() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.preview_reference_point)
  return _internal_preview_reference_point();
}
inline void SimpleLongitudinalDebug::unsafe_arena_set_allocated_preview_reference_point(
    ::control::common::TrajectoryPoint* preview_reference_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preview_reference_point_);
  }
  preview_reference_point_ = preview_reference_point;
  if (preview_reference_point) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLongitudinalDebug.preview_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::release_preview_reference_point() {
  auto temp = unsafe_arena_release_preview_reference_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::unsafe_arena_release_preview_reference_point() {
  // @@protoc_insertion_point(field_release:control.SimpleLongitudinalDebug.preview_reference_point)
  _has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* temp = preview_reference_point_;
  preview_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::_internal_mutable_preview_reference_point() {
  _has_bits_[0] |= 0x00000004u;
  if (preview_reference_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::TrajectoryPoint>(GetArena());
    preview_reference_point_ = p;
  }
  return preview_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLongitudinalDebug::mutable_preview_reference_point() {
  // @@protoc_insertion_point(field_mutable:control.SimpleLongitudinalDebug.preview_reference_point)
  return _internal_mutable_preview_reference_point();
}
inline void SimpleLongitudinalDebug::set_allocated_preview_reference_point(::control::common::TrajectoryPoint* preview_reference_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preview_reference_point_);
  }
  if (preview_reference_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preview_reference_point)->GetArena();
    if (message_arena != submessage_arena) {
      preview_reference_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preview_reference_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preview_reference_point_ = preview_reference_point;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLongitudinalDebug.preview_reference_point)
}

// optional double acceleration_lookup_limit = 35;
inline bool SimpleLongitudinalDebug::_internal_has_acceleration_lookup_limit() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_acceleration_lookup_limit() const {
  return _internal_has_acceleration_lookup_limit();
}
inline void SimpleLongitudinalDebug::clear_acceleration_lookup_limit() {
  acceleration_lookup_limit_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline double SimpleLongitudinalDebug::_internal_acceleration_lookup_limit() const {
  return acceleration_lookup_limit_;
}
inline double SimpleLongitudinalDebug::acceleration_lookup_limit() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.acceleration_lookup_limit)
  return _internal_acceleration_lookup_limit();
}
inline void SimpleLongitudinalDebug::_internal_set_acceleration_lookup_limit(double value) {
  _has_bits_[1] |= 0x00000002u;
  acceleration_lookup_limit_ = value;
}
inline void SimpleLongitudinalDebug::set_acceleration_lookup_limit(double value) {
  _internal_set_acceleration_lookup_limit(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.acceleration_lookup_limit)
}

// optional double vehicle_pitch = 36;
inline bool SimpleLongitudinalDebug::_internal_has_vehicle_pitch() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_vehicle_pitch() const {
  return _internal_has_vehicle_pitch();
}
inline void SimpleLongitudinalDebug::clear_vehicle_pitch() {
  vehicle_pitch_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline double SimpleLongitudinalDebug::_internal_vehicle_pitch() const {
  return vehicle_pitch_;
}
inline double SimpleLongitudinalDebug::vehicle_pitch() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.vehicle_pitch)
  return _internal_vehicle_pitch();
}
inline void SimpleLongitudinalDebug::_internal_set_vehicle_pitch(double value) {
  _has_bits_[1] |= 0x00000004u;
  vehicle_pitch_ = value;
}
inline void SimpleLongitudinalDebug::set_vehicle_pitch(double value) {
  _internal_set_vehicle_pitch(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.vehicle_pitch)
}

// optional bool is_epb_brake = 37;
inline bool SimpleLongitudinalDebug::_internal_has_is_epb_brake() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_epb_brake() const {
  return _internal_has_is_epb_brake();
}
inline void SimpleLongitudinalDebug::clear_is_epb_brake() {
  is_epb_brake_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool SimpleLongitudinalDebug::_internal_is_epb_brake() const {
  return is_epb_brake_;
}
inline bool SimpleLongitudinalDebug::is_epb_brake() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_epb_brake)
  return _internal_is_epb_brake();
}
inline void SimpleLongitudinalDebug::_internal_set_is_epb_brake(bool value) {
  _has_bits_[1] |= 0x00000020u;
  is_epb_brake_ = value;
}
inline void SimpleLongitudinalDebug::set_is_epb_brake(bool value) {
  _internal_set_is_epb_brake(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_epb_brake)
}

// optional double current_steer_interval = 38;
inline bool SimpleLongitudinalDebug::_internal_has_current_steer_interval() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_current_steer_interval() const {
  return _internal_has_current_steer_interval();
}
inline void SimpleLongitudinalDebug::clear_current_steer_interval() {
  current_steer_interval_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline double SimpleLongitudinalDebug::_internal_current_steer_interval() const {
  return current_steer_interval_;
}
inline double SimpleLongitudinalDebug::current_steer_interval() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.current_steer_interval)
  return _internal_current_steer_interval();
}
inline void SimpleLongitudinalDebug::_internal_set_current_steer_interval(double value) {
  _has_bits_[1] |= 0x00000008u;
  current_steer_interval_ = value;
}
inline void SimpleLongitudinalDebug::set_current_steer_interval(double value) {
  _internal_set_current_steer_interval(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.current_steer_interval)
}

// optional bool is_wait_steer = 39;
inline bool SimpleLongitudinalDebug::_internal_has_is_wait_steer() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_wait_steer() const {
  return _internal_has_is_wait_steer();
}
inline void SimpleLongitudinalDebug::clear_is_wait_steer() {
  is_wait_steer_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool SimpleLongitudinalDebug::_internal_is_wait_steer() const {
  return is_wait_steer_;
}
inline bool SimpleLongitudinalDebug::is_wait_steer() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_wait_steer)
  return _internal_is_wait_steer();
}
inline void SimpleLongitudinalDebug::_internal_set_is_wait_steer(bool value) {
  _has_bits_[1] |= 0x00000040u;
  is_wait_steer_ = value;
}
inline void SimpleLongitudinalDebug::set_is_wait_steer(bool value) {
  _internal_set_is_wait_steer(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_wait_steer)
}

// optional bool is_stop_reason_by_destination = 40;
inline bool SimpleLongitudinalDebug::_internal_has_is_stop_reason_by_destination() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_stop_reason_by_destination() const {
  return _internal_has_is_stop_reason_by_destination();
}
inline void SimpleLongitudinalDebug::clear_is_stop_reason_by_destination() {
  is_stop_reason_by_destination_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool SimpleLongitudinalDebug::_internal_is_stop_reason_by_destination() const {
  return is_stop_reason_by_destination_;
}
inline bool SimpleLongitudinalDebug::is_stop_reason_by_destination() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_stop_reason_by_destination)
  return _internal_is_stop_reason_by_destination();
}
inline void SimpleLongitudinalDebug::_internal_set_is_stop_reason_by_destination(bool value) {
  _has_bits_[1] |= 0x00000080u;
  is_stop_reason_by_destination_ = value;
}
inline void SimpleLongitudinalDebug::set_is_stop_reason_by_destination(bool value) {
  _internal_set_is_stop_reason_by_destination(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_stop_reason_by_destination)
}

// optional bool is_stop_reason_by_prdestrian = 41;
inline bool SimpleLongitudinalDebug::_internal_has_is_stop_reason_by_prdestrian() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_stop_reason_by_prdestrian() const {
  return _internal_has_is_stop_reason_by_prdestrian();
}
inline void SimpleLongitudinalDebug::clear_is_stop_reason_by_prdestrian() {
  is_stop_reason_by_prdestrian_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool SimpleLongitudinalDebug::_internal_is_stop_reason_by_prdestrian() const {
  return is_stop_reason_by_prdestrian_;
}
inline bool SimpleLongitudinalDebug::is_stop_reason_by_prdestrian() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_stop_reason_by_prdestrian)
  return _internal_is_stop_reason_by_prdestrian();
}
inline void SimpleLongitudinalDebug::_internal_set_is_stop_reason_by_prdestrian(bool value) {
  _has_bits_[1] |= 0x00000100u;
  is_stop_reason_by_prdestrian_ = value;
}
inline void SimpleLongitudinalDebug::set_is_stop_reason_by_prdestrian(bool value) {
  _internal_set_is_stop_reason_by_prdestrian(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_stop_reason_by_prdestrian)
}

// optional bool is_full_stop_soft = 42;
inline bool SimpleLongitudinalDebug::_internal_has_is_full_stop_soft() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_full_stop_soft() const {
  return _internal_has_is_full_stop_soft();
}
inline void SimpleLongitudinalDebug::clear_is_full_stop_soft() {
  is_full_stop_soft_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool SimpleLongitudinalDebug::_internal_is_full_stop_soft() const {
  return is_full_stop_soft_;
}
inline bool SimpleLongitudinalDebug::is_full_stop_soft() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_full_stop_soft)
  return _internal_is_full_stop_soft();
}
inline void SimpleLongitudinalDebug::_internal_set_is_full_stop_soft(bool value) {
  _has_bits_[1] |= 0x00000200u;
  is_full_stop_soft_ = value;
}
inline void SimpleLongitudinalDebug::set_is_full_stop_soft(bool value) {
  _internal_set_is_full_stop_soft(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_full_stop_soft)
}

// optional double stop_acc_cmd = 51;
inline bool SimpleLongitudinalDebug::_internal_has_stop_acc_cmd() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_stop_acc_cmd() const {
  return _internal_has_stop_acc_cmd();
}
inline void SimpleLongitudinalDebug::clear_stop_acc_cmd() {
  stop_acc_cmd_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline double SimpleLongitudinalDebug::_internal_stop_acc_cmd() const {
  return stop_acc_cmd_;
}
inline double SimpleLongitudinalDebug::stop_acc_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.stop_acc_cmd)
  return _internal_stop_acc_cmd();
}
inline void SimpleLongitudinalDebug::_internal_set_stop_acc_cmd(double value) {
  _has_bits_[1] |= 0x00001000u;
  stop_acc_cmd_ = value;
}
inline void SimpleLongitudinalDebug::set_stop_acc_cmd(double value) {
  _internal_set_stop_acc_cmd(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.stop_acc_cmd)
}

// optional .control.canbus.Chassis.GearPosition gear_location = 52;
inline bool SimpleLongitudinalDebug::_internal_has_gear_location() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_gear_location() const {
  return _internal_has_gear_location();
}
inline void SimpleLongitudinalDebug::clear_gear_location() {
  gear_location_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::control::canbus::Chassis_GearPosition SimpleLongitudinalDebug::_internal_gear_location() const {
  return static_cast< ::control::canbus::Chassis_GearPosition >(gear_location_);
}
inline ::control::canbus::Chassis_GearPosition SimpleLongitudinalDebug::gear_location() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.gear_location)
  return _internal_gear_location();
}
inline void SimpleLongitudinalDebug::_internal_set_gear_location(::control::canbus::Chassis_GearPosition value) {
  assert(::control::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  gear_location_ = value;
}
inline void SimpleLongitudinalDebug::set_gear_location(::control::canbus::Chassis_GearPosition value) {
  _internal_set_gear_location(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.gear_location)
}

// optional bool is_stop_scenario = 53;
inline bool SimpleLongitudinalDebug::_internal_has_is_stop_scenario() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_stop_scenario() const {
  return _internal_has_is_stop_scenario();
}
inline void SimpleLongitudinalDebug::clear_is_stop_scenario() {
  is_stop_scenario_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool SimpleLongitudinalDebug::_internal_is_stop_scenario() const {
  return is_stop_scenario_;
}
inline bool SimpleLongitudinalDebug::is_stop_scenario() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_stop_scenario)
  return _internal_is_stop_scenario();
}
inline void SimpleLongitudinalDebug::_internal_set_is_stop_scenario(bool value) {
  _has_bits_[1] |= 0x00000400u;
  is_stop_scenario_ = value;
}
inline void SimpleLongitudinalDebug::set_is_stop_scenario(bool value) {
  _internal_set_is_stop_scenario(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_stop_scenario)
}

// optional double contraposition_x = 54;
inline bool SimpleLongitudinalDebug::_internal_has_contraposition_x() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_contraposition_x() const {
  return _internal_has_contraposition_x();
}
inline void SimpleLongitudinalDebug::clear_contraposition_x() {
  contraposition_x_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline double SimpleLongitudinalDebug::_internal_contraposition_x() const {
  return contraposition_x_;
}
inline double SimpleLongitudinalDebug::contraposition_x() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.contraposition_x)
  return _internal_contraposition_x();
}
inline void SimpleLongitudinalDebug::_internal_set_contraposition_x(double value) {
  _has_bits_[1] |= 0x00008000u;
  contraposition_x_ = value;
}
inline void SimpleLongitudinalDebug::set_contraposition_x(double value) {
  _internal_set_contraposition_x(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.contraposition_x)
}

// optional uint32 stopstate = 55;
inline bool SimpleLongitudinalDebug::_internal_has_stopstate() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_stopstate() const {
  return _internal_has_stopstate();
}
inline void SimpleLongitudinalDebug::clear_stopstate() {
  stopstate_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimpleLongitudinalDebug::_internal_stopstate() const {
  return stopstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimpleLongitudinalDebug::stopstate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.stopstate)
  return _internal_stopstate();
}
inline void SimpleLongitudinalDebug::_internal_set_stopstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  stopstate_ = value;
}
inline void SimpleLongitudinalDebug::set_stopstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stopstate(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.stopstate)
}

// optional bool is_take_off_state = 56;
inline bool SimpleLongitudinalDebug::_internal_has_is_take_off_state() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool SimpleLongitudinalDebug::has_is_take_off_state() const {
  return _internal_has_is_take_off_state();
}
inline void SimpleLongitudinalDebug::clear_is_take_off_state() {
  is_take_off_state_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool SimpleLongitudinalDebug::_internal_is_take_off_state() const {
  return is_take_off_state_;
}
inline bool SimpleLongitudinalDebug::is_take_off_state() const {
  // @@protoc_insertion_point(field_get:control.SimpleLongitudinalDebug.is_take_off_state)
  return _internal_is_take_off_state();
}
inline void SimpleLongitudinalDebug::_internal_set_is_take_off_state(bool value) {
  _has_bits_[1] |= 0x00000800u;
  is_take_off_state_ = value;
}
inline void SimpleLongitudinalDebug::set_is_take_off_state(bool value) {
  _internal_set_is_take_off_state(value);
  // @@protoc_insertion_point(field_set:control.SimpleLongitudinalDebug.is_take_off_state)
}

// -------------------------------------------------------------------

// SimpleLateralDebug

// optional double lateral_error = 1;
inline bool SimpleLateralDebug::_internal_has_lateral_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_lateral_error() const {
  return _internal_has_lateral_error();
}
inline void SimpleLateralDebug::clear_lateral_error() {
  lateral_error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SimpleLateralDebug::_internal_lateral_error() const {
  return lateral_error_;
}
inline double SimpleLateralDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.lateral_error)
  return _internal_lateral_error();
}
inline void SimpleLateralDebug::_internal_set_lateral_error(double value) {
  _has_bits_[0] |= 0x00000004u;
  lateral_error_ = value;
}
inline void SimpleLateralDebug::set_lateral_error(double value) {
  _internal_set_lateral_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.lateral_error)
}

// optional double ref_heading = 2;
inline bool SimpleLateralDebug::_internal_has_ref_heading() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_ref_heading() const {
  return _internal_has_ref_heading();
}
inline void SimpleLateralDebug::clear_ref_heading() {
  ref_heading_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimpleLateralDebug::_internal_ref_heading() const {
  return ref_heading_;
}
inline double SimpleLateralDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.ref_heading)
  return _internal_ref_heading();
}
inline void SimpleLateralDebug::_internal_set_ref_heading(double value) {
  _has_bits_[0] |= 0x00000008u;
  ref_heading_ = value;
}
inline void SimpleLateralDebug::set_ref_heading(double value) {
  _internal_set_ref_heading(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.ref_heading)
}

// optional double heading = 3;
inline bool SimpleLateralDebug::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading() const {
  return _internal_has_heading();
}
inline void SimpleLateralDebug::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimpleLateralDebug::_internal_heading() const {
  return heading_;
}
inline double SimpleLateralDebug::heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading)
  return _internal_heading();
}
inline void SimpleLateralDebug::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000010u;
  heading_ = value;
}
inline void SimpleLateralDebug::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading)
}

// optional double heading_error = 4;
inline bool SimpleLateralDebug::_internal_has_heading_error() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_error() const {
  return _internal_has_heading_error();
}
inline void SimpleLateralDebug::clear_heading_error() {
  heading_error_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimpleLateralDebug::_internal_heading_error() const {
  return heading_error_;
}
inline double SimpleLateralDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_error)
  return _internal_heading_error();
}
inline void SimpleLateralDebug::_internal_set_heading_error(double value) {
  _has_bits_[0] |= 0x00000020u;
  heading_error_ = value;
}
inline void SimpleLateralDebug::set_heading_error(double value) {
  _internal_set_heading_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_error)
}

// optional double heading_error_rate = 5;
inline bool SimpleLateralDebug::_internal_has_heading_error_rate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_error_rate() const {
  return _internal_has_heading_error_rate();
}
inline void SimpleLateralDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimpleLateralDebug::_internal_heading_error_rate() const {
  return heading_error_rate_;
}
inline double SimpleLateralDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_error_rate)
  return _internal_heading_error_rate();
}
inline void SimpleLateralDebug::_internal_set_heading_error_rate(double value) {
  _has_bits_[0] |= 0x00000040u;
  heading_error_rate_ = value;
}
inline void SimpleLateralDebug::set_heading_error_rate(double value) {
  _internal_set_heading_error_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
inline bool SimpleLateralDebug::_internal_has_lateral_error_rate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_lateral_error_rate() const {
  return _internal_has_lateral_error_rate();
}
inline void SimpleLateralDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimpleLateralDebug::_internal_lateral_error_rate() const {
  return lateral_error_rate_;
}
inline double SimpleLateralDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.lateral_error_rate)
  return _internal_lateral_error_rate();
}
inline void SimpleLateralDebug::_internal_set_lateral_error_rate(double value) {
  _has_bits_[0] |= 0x00000080u;
  lateral_error_rate_ = value;
}
inline void SimpleLateralDebug::set_lateral_error_rate(double value) {
  _internal_set_lateral_error_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.lateral_error_rate)
}

// optional double curvature = 7;
inline bool SimpleLateralDebug::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_curvature() const {
  return _internal_has_curvature();
}
inline void SimpleLateralDebug::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimpleLateralDebug::_internal_curvature() const {
  return curvature_;
}
inline double SimpleLateralDebug::curvature() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.curvature)
  return _internal_curvature();
}
inline void SimpleLateralDebug::_internal_set_curvature(double value) {
  _has_bits_[0] |= 0x00000100u;
  curvature_ = value;
}
inline void SimpleLateralDebug::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.curvature)
}

// optional double steer_angle = 8;
inline bool SimpleLateralDebug::_internal_has_steer_angle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle() const {
  return _internal_has_steer_angle();
}
inline void SimpleLateralDebug::clear_steer_angle() {
  steer_angle_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SimpleLateralDebug::_internal_steer_angle() const {
  return steer_angle_;
}
inline double SimpleLateralDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle)
  return _internal_steer_angle();
}
inline void SimpleLateralDebug::_internal_set_steer_angle(double value) {
  _has_bits_[0] |= 0x00000200u;
  steer_angle_ = value;
}
inline void SimpleLateralDebug::set_steer_angle(double value) {
  _internal_set_steer_angle(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
inline bool SimpleLateralDebug::_internal_has_steer_angle_feedforward() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_feedforward() const {
  return _internal_has_steer_angle_feedforward();
}
inline void SimpleLateralDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SimpleLateralDebug::_internal_steer_angle_feedforward() const {
  return steer_angle_feedforward_;
}
inline double SimpleLateralDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_feedforward)
  return _internal_steer_angle_feedforward();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_feedforward(double value) {
  _has_bits_[0] |= 0x00000400u;
  steer_angle_feedforward_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_feedforward(double value) {
  _internal_set_steer_angle_feedforward(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
inline bool SimpleLateralDebug::_internal_has_steer_angle_lateral_contribution() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_lateral_contribution() const {
  return _internal_has_steer_angle_lateral_contribution();
}
inline void SimpleLateralDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SimpleLateralDebug::_internal_steer_angle_lateral_contribution() const {
  return steer_angle_lateral_contribution_;
}
inline double SimpleLateralDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_lateral_contribution)
  return _internal_steer_angle_lateral_contribution();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_lateral_contribution(double value) {
  _has_bits_[0] |= 0x00000800u;
  steer_angle_lateral_contribution_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_lateral_contribution(double value) {
  _internal_set_steer_angle_lateral_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
inline bool SimpleLateralDebug::_internal_has_steer_angle_lateral_rate_contribution() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_lateral_rate_contribution() const {
  return _internal_has_steer_angle_lateral_rate_contribution();
}
inline void SimpleLateralDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SimpleLateralDebug::_internal_steer_angle_lateral_rate_contribution() const {
  return steer_angle_lateral_rate_contribution_;
}
inline double SimpleLateralDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
  return _internal_steer_angle_lateral_rate_contribution();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_lateral_rate_contribution(double value) {
  _has_bits_[0] |= 0x00001000u;
  steer_angle_lateral_rate_contribution_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_lateral_rate_contribution(double value) {
  _internal_set_steer_angle_lateral_rate_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
inline bool SimpleLateralDebug::_internal_has_steer_angle_heading_contribution() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_heading_contribution() const {
  return _internal_has_steer_angle_heading_contribution();
}
inline void SimpleLateralDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SimpleLateralDebug::_internal_steer_angle_heading_contribution() const {
  return steer_angle_heading_contribution_;
}
inline double SimpleLateralDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_heading_contribution)
  return _internal_steer_angle_heading_contribution();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_heading_contribution(double value) {
  _has_bits_[0] |= 0x00002000u;
  steer_angle_heading_contribution_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_heading_contribution(double value) {
  _internal_set_steer_angle_heading_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
inline bool SimpleLateralDebug::_internal_has_steer_angle_heading_rate_contribution() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_heading_rate_contribution() const {
  return _internal_has_steer_angle_heading_rate_contribution();
}
inline void SimpleLateralDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SimpleLateralDebug::_internal_steer_angle_heading_rate_contribution() const {
  return steer_angle_heading_rate_contribution_;
}
inline double SimpleLateralDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
  return _internal_steer_angle_heading_rate_contribution();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_heading_rate_contribution(double value) {
  _has_bits_[0] |= 0x00004000u;
  steer_angle_heading_rate_contribution_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_heading_rate_contribution(double value) {
  _internal_set_steer_angle_heading_rate_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
inline bool SimpleLateralDebug::_internal_has_steer_angle_feedback() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_feedback() const {
  return _internal_has_steer_angle_feedback();
}
inline void SimpleLateralDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SimpleLateralDebug::_internal_steer_angle_feedback() const {
  return steer_angle_feedback_;
}
inline double SimpleLateralDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_feedback)
  return _internal_steer_angle_feedback();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_feedback(double value) {
  _has_bits_[0] |= 0x00008000u;
  steer_angle_feedback_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_feedback(double value) {
  _internal_set_steer_angle_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
inline bool SimpleLateralDebug::_internal_has_steering_position() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steering_position() const {
  return _internal_has_steering_position();
}
inline void SimpleLateralDebug::clear_steering_position() {
  steering_position_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double SimpleLateralDebug::_internal_steering_position() const {
  return steering_position_;
}
inline double SimpleLateralDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steering_position)
  return _internal_steering_position();
}
inline void SimpleLateralDebug::_internal_set_steering_position(double value) {
  _has_bits_[0] |= 0x00010000u;
  steering_position_ = value;
}
inline void SimpleLateralDebug::set_steering_position(double value) {
  _internal_set_steering_position(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steering_position)
}

// optional double ref_speed = 16;
inline bool SimpleLateralDebug::_internal_has_ref_speed() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_ref_speed() const {
  return _internal_has_ref_speed();
}
inline void SimpleLateralDebug::clear_ref_speed() {
  ref_speed_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double SimpleLateralDebug::_internal_ref_speed() const {
  return ref_speed_;
}
inline double SimpleLateralDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.ref_speed)
  return _internal_ref_speed();
}
inline void SimpleLateralDebug::_internal_set_ref_speed(double value) {
  _has_bits_[0] |= 0x00020000u;
  ref_speed_ = value;
}
inline void SimpleLateralDebug::set_ref_speed(double value) {
  _internal_set_ref_speed(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
inline bool SimpleLateralDebug::_internal_has_steer_angle_limited() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_limited() const {
  return _internal_has_steer_angle_limited();
}
inline void SimpleLateralDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double SimpleLateralDebug::_internal_steer_angle_limited() const {
  return steer_angle_limited_;
}
inline double SimpleLateralDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_limited)
  return _internal_steer_angle_limited();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_limited(double value) {
  _has_bits_[0] |= 0x00040000u;
  steer_angle_limited_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_limited(double value) {
  _internal_set_steer_angle_limited(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_limited)
}

// optional double lateral_acceleration = 18;
inline bool SimpleLateralDebug::_internal_has_lateral_acceleration() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_lateral_acceleration() const {
  return _internal_has_lateral_acceleration();
}
inline void SimpleLateralDebug::clear_lateral_acceleration() {
  lateral_acceleration_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double SimpleLateralDebug::_internal_lateral_acceleration() const {
  return lateral_acceleration_;
}
inline double SimpleLateralDebug::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.lateral_acceleration)
  return _internal_lateral_acceleration();
}
inline void SimpleLateralDebug::_internal_set_lateral_acceleration(double value) {
  _has_bits_[0] |= 0x00080000u;
  lateral_acceleration_ = value;
}
inline void SimpleLateralDebug::set_lateral_acceleration(double value) {
  _internal_set_lateral_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.lateral_acceleration)
}

// optional double lateral_jerk = 19;
inline bool SimpleLateralDebug::_internal_has_lateral_jerk() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_lateral_jerk() const {
  return _internal_has_lateral_jerk();
}
inline void SimpleLateralDebug::clear_lateral_jerk() {
  lateral_jerk_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double SimpleLateralDebug::_internal_lateral_jerk() const {
  return lateral_jerk_;
}
inline double SimpleLateralDebug::lateral_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.lateral_jerk)
  return _internal_lateral_jerk();
}
inline void SimpleLateralDebug::_internal_set_lateral_jerk(double value) {
  _has_bits_[0] |= 0x00100000u;
  lateral_jerk_ = value;
}
inline void SimpleLateralDebug::set_lateral_jerk(double value) {
  _internal_set_lateral_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.lateral_jerk)
}

// optional double ref_heading_rate = 20;
inline bool SimpleLateralDebug::_internal_has_ref_heading_rate() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_ref_heading_rate() const {
  return _internal_has_ref_heading_rate();
}
inline void SimpleLateralDebug::clear_ref_heading_rate() {
  ref_heading_rate_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double SimpleLateralDebug::_internal_ref_heading_rate() const {
  return ref_heading_rate_;
}
inline double SimpleLateralDebug::ref_heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.ref_heading_rate)
  return _internal_ref_heading_rate();
}
inline void SimpleLateralDebug::_internal_set_ref_heading_rate(double value) {
  _has_bits_[0] |= 0x00200000u;
  ref_heading_rate_ = value;
}
inline void SimpleLateralDebug::set_ref_heading_rate(double value) {
  _internal_set_ref_heading_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.ref_heading_rate)
}

// optional double heading_rate = 21;
inline bool SimpleLateralDebug::_internal_has_heading_rate() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_rate() const {
  return _internal_has_heading_rate();
}
inline void SimpleLateralDebug::clear_heading_rate() {
  heading_rate_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double SimpleLateralDebug::_internal_heading_rate() const {
  return heading_rate_;
}
inline double SimpleLateralDebug::heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_rate)
  return _internal_heading_rate();
}
inline void SimpleLateralDebug::_internal_set_heading_rate(double value) {
  _has_bits_[0] |= 0x00400000u;
  heading_rate_ = value;
}
inline void SimpleLateralDebug::set_heading_rate(double value) {
  _internal_set_heading_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_rate)
}

// optional double ref_heading_acceleration = 22;
inline bool SimpleLateralDebug::_internal_has_ref_heading_acceleration() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_ref_heading_acceleration() const {
  return _internal_has_ref_heading_acceleration();
}
inline void SimpleLateralDebug::clear_ref_heading_acceleration() {
  ref_heading_acceleration_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double SimpleLateralDebug::_internal_ref_heading_acceleration() const {
  return ref_heading_acceleration_;
}
inline double SimpleLateralDebug::ref_heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.ref_heading_acceleration)
  return _internal_ref_heading_acceleration();
}
inline void SimpleLateralDebug::_internal_set_ref_heading_acceleration(double value) {
  _has_bits_[0] |= 0x00800000u;
  ref_heading_acceleration_ = value;
}
inline void SimpleLateralDebug::set_ref_heading_acceleration(double value) {
  _internal_set_ref_heading_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.ref_heading_acceleration)
}

// optional double heading_acceleration = 23;
inline bool SimpleLateralDebug::_internal_has_heading_acceleration() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_acceleration() const {
  return _internal_has_heading_acceleration();
}
inline void SimpleLateralDebug::clear_heading_acceleration() {
  heading_acceleration_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double SimpleLateralDebug::_internal_heading_acceleration() const {
  return heading_acceleration_;
}
inline double SimpleLateralDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_acceleration)
  return _internal_heading_acceleration();
}
inline void SimpleLateralDebug::_internal_set_heading_acceleration(double value) {
  _has_bits_[0] |= 0x01000000u;
  heading_acceleration_ = value;
}
inline void SimpleLateralDebug::set_heading_acceleration(double value) {
  _internal_set_heading_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_acceleration)
}

// optional double heading_error_acceleration = 24;
inline bool SimpleLateralDebug::_internal_has_heading_error_acceleration() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_error_acceleration() const {
  return _internal_has_heading_error_acceleration();
}
inline void SimpleLateralDebug::clear_heading_error_acceleration() {
  heading_error_acceleration_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double SimpleLateralDebug::_internal_heading_error_acceleration() const {
  return heading_error_acceleration_;
}
inline double SimpleLateralDebug::heading_error_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_error_acceleration)
  return _internal_heading_error_acceleration();
}
inline void SimpleLateralDebug::_internal_set_heading_error_acceleration(double value) {
  _has_bits_[0] |= 0x02000000u;
  heading_error_acceleration_ = value;
}
inline void SimpleLateralDebug::set_heading_error_acceleration(double value) {
  _internal_set_heading_error_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_error_acceleration)
}

// optional double ref_heading_jerk = 25;
inline bool SimpleLateralDebug::_internal_has_ref_heading_jerk() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_ref_heading_jerk() const {
  return _internal_has_ref_heading_jerk();
}
inline void SimpleLateralDebug::clear_ref_heading_jerk() {
  ref_heading_jerk_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double SimpleLateralDebug::_internal_ref_heading_jerk() const {
  return ref_heading_jerk_;
}
inline double SimpleLateralDebug::ref_heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.ref_heading_jerk)
  return _internal_ref_heading_jerk();
}
inline void SimpleLateralDebug::_internal_set_ref_heading_jerk(double value) {
  _has_bits_[0] |= 0x04000000u;
  ref_heading_jerk_ = value;
}
inline void SimpleLateralDebug::set_ref_heading_jerk(double value) {
  _internal_set_ref_heading_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.ref_heading_jerk)
}

// optional double heading_jerk = 26;
inline bool SimpleLateralDebug::_internal_has_heading_jerk() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_jerk() const {
  return _internal_has_heading_jerk();
}
inline void SimpleLateralDebug::clear_heading_jerk() {
  heading_jerk_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double SimpleLateralDebug::_internal_heading_jerk() const {
  return heading_jerk_;
}
inline double SimpleLateralDebug::heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_jerk)
  return _internal_heading_jerk();
}
inline void SimpleLateralDebug::_internal_set_heading_jerk(double value) {
  _has_bits_[0] |= 0x08000000u;
  heading_jerk_ = value;
}
inline void SimpleLateralDebug::set_heading_jerk(double value) {
  _internal_set_heading_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_jerk)
}

// optional double heading_error_jerk = 27;
inline bool SimpleLateralDebug::_internal_has_heading_error_jerk() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_error_jerk() const {
  return _internal_has_heading_error_jerk();
}
inline void SimpleLateralDebug::clear_heading_error_jerk() {
  heading_error_jerk_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double SimpleLateralDebug::_internal_heading_error_jerk() const {
  return heading_error_jerk_;
}
inline double SimpleLateralDebug::heading_error_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_error_jerk)
  return _internal_heading_error_jerk();
}
inline void SimpleLateralDebug::_internal_set_heading_error_jerk(double value) {
  _has_bits_[0] |= 0x10000000u;
  heading_error_jerk_ = value;
}
inline void SimpleLateralDebug::set_heading_error_jerk(double value) {
  _internal_set_heading_error_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_error_jerk)
}

// optional double lateral_error_feedback = 28;
inline bool SimpleLateralDebug::_internal_has_lateral_error_feedback() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_lateral_error_feedback() const {
  return _internal_has_lateral_error_feedback();
}
inline void SimpleLateralDebug::clear_lateral_error_feedback() {
  lateral_error_feedback_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double SimpleLateralDebug::_internal_lateral_error_feedback() const {
  return lateral_error_feedback_;
}
inline double SimpleLateralDebug::lateral_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.lateral_error_feedback)
  return _internal_lateral_error_feedback();
}
inline void SimpleLateralDebug::_internal_set_lateral_error_feedback(double value) {
  _has_bits_[0] |= 0x20000000u;
  lateral_error_feedback_ = value;
}
inline void SimpleLateralDebug::set_lateral_error_feedback(double value) {
  _internal_set_lateral_error_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.lateral_error_feedback)
}

// optional double heading_error_feedback = 29;
inline bool SimpleLateralDebug::_internal_has_heading_error_feedback() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_heading_error_feedback() const {
  return _internal_has_heading_error_feedback();
}
inline void SimpleLateralDebug::clear_heading_error_feedback() {
  heading_error_feedback_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double SimpleLateralDebug::_internal_heading_error_feedback() const {
  return heading_error_feedback_;
}
inline double SimpleLateralDebug::heading_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.heading_error_feedback)
  return _internal_heading_error_feedback();
}
inline void SimpleLateralDebug::_internal_set_heading_error_feedback(double value) {
  _has_bits_[0] |= 0x40000000u;
  heading_error_feedback_ = value;
}
inline void SimpleLateralDebug::set_heading_error_feedback(double value) {
  _internal_set_heading_error_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.heading_error_feedback)
}

// optional .control.common.TrajectoryPoint current_target_point = 30;
inline bool SimpleLateralDebug::_internal_has_current_target_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_target_point_ != nullptr);
  return value;
}
inline bool SimpleLateralDebug::has_current_target_point() const {
  return _internal_has_current_target_point();
}
inline const ::control::common::TrajectoryPoint& SimpleLateralDebug::_internal_current_target_point() const {
  const ::control::common::TrajectoryPoint* p = current_target_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::TrajectoryPoint*>(
      &::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleLateralDebug::current_target_point() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.current_target_point)
  return _internal_current_target_point();
}
inline void SimpleLateralDebug::unsafe_arena_set_allocated_current_target_point(
    ::control::common::TrajectoryPoint* current_target_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_target_point_);
  }
  current_target_point_ = current_target_point;
  if (current_target_point) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLateralDebug.current_target_point)
}
inline ::control::common::TrajectoryPoint* SimpleLateralDebug::release_current_target_point() {
  auto temp = unsafe_arena_release_current_target_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLateralDebug::unsafe_arena_release_current_target_point() {
  // @@protoc_insertion_point(field_release:control.SimpleLateralDebug.current_target_point)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::TrajectoryPoint* temp = current_target_point_;
  current_target_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleLateralDebug::_internal_mutable_current_target_point() {
  _has_bits_[0] |= 0x00000001u;
  if (current_target_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::TrajectoryPoint>(GetArena());
    current_target_point_ = p;
  }
  return current_target_point_;
}
inline ::control::common::TrajectoryPoint* SimpleLateralDebug::mutable_current_target_point() {
  // @@protoc_insertion_point(field_mutable:control.SimpleLateralDebug.current_target_point)
  return _internal_mutable_current_target_point();
}
inline void SimpleLateralDebug::set_allocated_current_target_point(::control::common::TrajectoryPoint* current_target_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_target_point_);
  }
  if (current_target_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_target_point)->GetArena();
    if (message_arena != submessage_arena) {
      current_target_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_target_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_target_point_ = current_target_point;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLateralDebug.current_target_point)
}

// optional double steer_angle_feedback_augment = 31;
inline bool SimpleLateralDebug::_internal_has_steer_angle_feedback_augment() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_angle_feedback_augment() const {
  return _internal_has_steer_angle_feedback_augment();
}
inline void SimpleLateralDebug::clear_steer_angle_feedback_augment() {
  steer_angle_feedback_augment_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double SimpleLateralDebug::_internal_steer_angle_feedback_augment() const {
  return steer_angle_feedback_augment_;
}
inline double SimpleLateralDebug::steer_angle_feedback_augment() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_angle_feedback_augment)
  return _internal_steer_angle_feedback_augment();
}
inline void SimpleLateralDebug::_internal_set_steer_angle_feedback_augment(double value) {
  _has_bits_[0] |= 0x80000000u;
  steer_angle_feedback_augment_ = value;
}
inline void SimpleLateralDebug::set_steer_angle_feedback_augment(double value) {
  _internal_set_steer_angle_feedback_augment(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_angle_feedback_augment)
}

// optional .control.MracDebug steer_mrac_debug = 32;
inline bool SimpleLateralDebug::_internal_has_steer_mrac_debug() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || steer_mrac_debug_ != nullptr);
  return value;
}
inline bool SimpleLateralDebug::has_steer_mrac_debug() const {
  return _internal_has_steer_mrac_debug();
}
inline void SimpleLateralDebug::clear_steer_mrac_debug() {
  if (steer_mrac_debug_ != nullptr) steer_mrac_debug_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::MracDebug& SimpleLateralDebug::_internal_steer_mrac_debug() const {
  const ::control::MracDebug* p = steer_mrac_debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::MracDebug*>(
      &::control::_MracDebug_default_instance_);
}
inline const ::control::MracDebug& SimpleLateralDebug::steer_mrac_debug() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_mrac_debug)
  return _internal_steer_mrac_debug();
}
inline void SimpleLateralDebug::unsafe_arena_set_allocated_steer_mrac_debug(
    ::control::MracDebug* steer_mrac_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_mrac_debug_);
  }
  steer_mrac_debug_ = steer_mrac_debug;
  if (steer_mrac_debug) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleLateralDebug.steer_mrac_debug)
}
inline ::control::MracDebug* SimpleLateralDebug::release_steer_mrac_debug() {
  auto temp = unsafe_arena_release_steer_mrac_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::MracDebug* SimpleLateralDebug::unsafe_arena_release_steer_mrac_debug() {
  // @@protoc_insertion_point(field_release:control.SimpleLateralDebug.steer_mrac_debug)
  _has_bits_[0] &= ~0x00000002u;
  ::control::MracDebug* temp = steer_mrac_debug_;
  steer_mrac_debug_ = nullptr;
  return temp;
}
inline ::control::MracDebug* SimpleLateralDebug::_internal_mutable_steer_mrac_debug() {
  _has_bits_[0] |= 0x00000002u;
  if (steer_mrac_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::MracDebug>(GetArena());
    steer_mrac_debug_ = p;
  }
  return steer_mrac_debug_;
}
inline ::control::MracDebug* SimpleLateralDebug::mutable_steer_mrac_debug() {
  // @@protoc_insertion_point(field_mutable:control.SimpleLateralDebug.steer_mrac_debug)
  return _internal_mutable_steer_mrac_debug();
}
inline void SimpleLateralDebug::set_allocated_steer_mrac_debug(::control::MracDebug* steer_mrac_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete steer_mrac_debug_;
  }
  if (steer_mrac_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(steer_mrac_debug);
    if (message_arena != submessage_arena) {
      steer_mrac_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_mrac_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  steer_mrac_debug_ = steer_mrac_debug;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleLateralDebug.steer_mrac_debug)
}

// optional bool steer_mrac_enable_status = 33;
inline bool SimpleLateralDebug::_internal_has_steer_mrac_enable_status() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_steer_mrac_enable_status() const {
  return _internal_has_steer_mrac_enable_status();
}
inline void SimpleLateralDebug::clear_steer_mrac_enable_status() {
  steer_mrac_enable_status_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool SimpleLateralDebug::_internal_steer_mrac_enable_status() const {
  return steer_mrac_enable_status_;
}
inline bool SimpleLateralDebug::steer_mrac_enable_status() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.steer_mrac_enable_status)
  return _internal_steer_mrac_enable_status();
}
inline void SimpleLateralDebug::_internal_set_steer_mrac_enable_status(bool value) {
  _has_bits_[1] |= 0x00000002u;
  steer_mrac_enable_status_ = value;
}
inline void SimpleLateralDebug::set_steer_mrac_enable_status(bool value) {
  _internal_set_steer_mrac_enable_status(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.steer_mrac_enable_status)
}

// optional double lateral_centripetal_acceleration = 34;
inline bool SimpleLateralDebug::_internal_has_lateral_centripetal_acceleration() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_lateral_centripetal_acceleration() const {
  return _internal_has_lateral_centripetal_acceleration();
}
inline void SimpleLateralDebug::clear_lateral_centripetal_acceleration() {
  lateral_centripetal_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline double SimpleLateralDebug::_internal_lateral_centripetal_acceleration() const {
  return lateral_centripetal_acceleration_;
}
inline double SimpleLateralDebug::lateral_centripetal_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.lateral_centripetal_acceleration)
  return _internal_lateral_centripetal_acceleration();
}
inline void SimpleLateralDebug::_internal_set_lateral_centripetal_acceleration(double value) {
  _has_bits_[1] |= 0x00000001u;
  lateral_centripetal_acceleration_ = value;
}
inline void SimpleLateralDebug::set_lateral_centripetal_acceleration(double value) {
  _internal_set_lateral_centripetal_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.lateral_centripetal_acceleration)
}

// optional double preview_pos_curvature = 35;
inline bool SimpleLateralDebug::_internal_has_preview_pos_curvature() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_preview_pos_curvature() const {
  return _internal_has_preview_pos_curvature();
}
inline void SimpleLateralDebug::clear_preview_pos_curvature() {
  preview_pos_curvature_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline double SimpleLateralDebug::_internal_preview_pos_curvature() const {
  return preview_pos_curvature_;
}
inline double SimpleLateralDebug::preview_pos_curvature() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.preview_pos_curvature)
  return _internal_preview_pos_curvature();
}
inline void SimpleLateralDebug::_internal_set_preview_pos_curvature(double value) {
  _has_bits_[1] |= 0x00000008u;
  preview_pos_curvature_ = value;
}
inline void SimpleLateralDebug::set_preview_pos_curvature(double value) {
  _internal_set_preview_pos_curvature(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.preview_pos_curvature)
}

// optional float preview_heading_error = 36;
inline bool SimpleLateralDebug::_internal_has_preview_heading_error() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool SimpleLateralDebug::has_preview_heading_error() const {
  return _internal_has_preview_heading_error();
}
inline void SimpleLateralDebug::clear_preview_heading_error() {
  preview_heading_error_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline float SimpleLateralDebug::_internal_preview_heading_error() const {
  return preview_heading_error_;
}
inline float SimpleLateralDebug::preview_heading_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleLateralDebug.preview_heading_error)
  return _internal_preview_heading_error();
}
inline void SimpleLateralDebug::_internal_set_preview_heading_error(float value) {
  _has_bits_[1] |= 0x00000004u;
  preview_heading_error_ = value;
}
inline void SimpleLateralDebug::set_preview_heading_error(float value) {
  _internal_set_preview_heading_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleLateralDebug.preview_heading_error)
}

// -------------------------------------------------------------------

// SimpleMPCDebug

// optional double lateral_error = 1;
inline bool SimpleMPCDebug::_internal_has_lateral_error() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_lateral_error() const {
  return _internal_has_lateral_error();
}
inline void SimpleMPCDebug::clear_lateral_error() {
  lateral_error_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimpleMPCDebug::_internal_lateral_error() const {
  return lateral_error_;
}
inline double SimpleMPCDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.lateral_error)
  return _internal_lateral_error();
}
inline void SimpleMPCDebug::_internal_set_lateral_error(double value) {
  _has_bits_[0] |= 0x00000008u;
  lateral_error_ = value;
}
inline void SimpleMPCDebug::set_lateral_error(double value) {
  _internal_set_lateral_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.lateral_error)
}

// optional double ref_heading = 2;
inline bool SimpleMPCDebug::_internal_has_ref_heading() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_ref_heading() const {
  return _internal_has_ref_heading();
}
inline void SimpleMPCDebug::clear_ref_heading() {
  ref_heading_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimpleMPCDebug::_internal_ref_heading() const {
  return ref_heading_;
}
inline double SimpleMPCDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.ref_heading)
  return _internal_ref_heading();
}
inline void SimpleMPCDebug::_internal_set_ref_heading(double value) {
  _has_bits_[0] |= 0x00000010u;
  ref_heading_ = value;
}
inline void SimpleMPCDebug::set_ref_heading(double value) {
  _internal_set_ref_heading(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.ref_heading)
}

// optional double heading = 3;
inline bool SimpleMPCDebug::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading() const {
  return _internal_has_heading();
}
inline void SimpleMPCDebug::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimpleMPCDebug::_internal_heading() const {
  return heading_;
}
inline double SimpleMPCDebug::heading() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading)
  return _internal_heading();
}
inline void SimpleMPCDebug::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000020u;
  heading_ = value;
}
inline void SimpleMPCDebug::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading)
}

// optional double heading_error = 4;
inline bool SimpleMPCDebug::_internal_has_heading_error() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_error() const {
  return _internal_has_heading_error();
}
inline void SimpleMPCDebug::clear_heading_error() {
  heading_error_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimpleMPCDebug::_internal_heading_error() const {
  return heading_error_;
}
inline double SimpleMPCDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_error)
  return _internal_heading_error();
}
inline void SimpleMPCDebug::_internal_set_heading_error(double value) {
  _has_bits_[0] |= 0x00000040u;
  heading_error_ = value;
}
inline void SimpleMPCDebug::set_heading_error(double value) {
  _internal_set_heading_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_error)
}

// optional double heading_error_rate = 5;
inline bool SimpleMPCDebug::_internal_has_heading_error_rate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_error_rate() const {
  return _internal_has_heading_error_rate();
}
inline void SimpleMPCDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimpleMPCDebug::_internal_heading_error_rate() const {
  return heading_error_rate_;
}
inline double SimpleMPCDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_error_rate)
  return _internal_heading_error_rate();
}
inline void SimpleMPCDebug::_internal_set_heading_error_rate(double value) {
  _has_bits_[0] |= 0x00000080u;
  heading_error_rate_ = value;
}
inline void SimpleMPCDebug::set_heading_error_rate(double value) {
  _internal_set_heading_error_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
inline bool SimpleMPCDebug::_internal_has_lateral_error_rate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_lateral_error_rate() const {
  return _internal_has_lateral_error_rate();
}
inline void SimpleMPCDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimpleMPCDebug::_internal_lateral_error_rate() const {
  return lateral_error_rate_;
}
inline double SimpleMPCDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.lateral_error_rate)
  return _internal_lateral_error_rate();
}
inline void SimpleMPCDebug::_internal_set_lateral_error_rate(double value) {
  _has_bits_[0] |= 0x00000100u;
  lateral_error_rate_ = value;
}
inline void SimpleMPCDebug::set_lateral_error_rate(double value) {
  _internal_set_lateral_error_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.lateral_error_rate)
}

// optional double curvature = 7;
inline bool SimpleMPCDebug::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_curvature() const {
  return _internal_has_curvature();
}
inline void SimpleMPCDebug::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SimpleMPCDebug::_internal_curvature() const {
  return curvature_;
}
inline double SimpleMPCDebug::curvature() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.curvature)
  return _internal_curvature();
}
inline void SimpleMPCDebug::_internal_set_curvature(double value) {
  _has_bits_[0] |= 0x00000200u;
  curvature_ = value;
}
inline void SimpleMPCDebug::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.curvature)
}

// optional double steer_angle = 8;
inline bool SimpleMPCDebug::_internal_has_steer_angle() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle() const {
  return _internal_has_steer_angle();
}
inline void SimpleMPCDebug::clear_steer_angle() {
  steer_angle_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SimpleMPCDebug::_internal_steer_angle() const {
  return steer_angle_;
}
inline double SimpleMPCDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle)
  return _internal_steer_angle();
}
inline void SimpleMPCDebug::_internal_set_steer_angle(double value) {
  _has_bits_[0] |= 0x00000400u;
  steer_angle_ = value;
}
inline void SimpleMPCDebug::set_steer_angle(double value) {
  _internal_set_steer_angle(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
inline bool SimpleMPCDebug::_internal_has_steer_angle_feedforward() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_feedforward() const {
  return _internal_has_steer_angle_feedforward();
}
inline void SimpleMPCDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SimpleMPCDebug::_internal_steer_angle_feedforward() const {
  return steer_angle_feedforward_;
}
inline double SimpleMPCDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_feedforward)
  return _internal_steer_angle_feedforward();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_feedforward(double value) {
  _has_bits_[0] |= 0x00000800u;
  steer_angle_feedforward_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_feedforward(double value) {
  _internal_set_steer_angle_feedforward(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
inline bool SimpleMPCDebug::_internal_has_steer_angle_lateral_contribution() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_lateral_contribution() const {
  return _internal_has_steer_angle_lateral_contribution();
}
inline void SimpleMPCDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SimpleMPCDebug::_internal_steer_angle_lateral_contribution() const {
  return steer_angle_lateral_contribution_;
}
inline double SimpleMPCDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_lateral_contribution)
  return _internal_steer_angle_lateral_contribution();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_lateral_contribution(double value) {
  _has_bits_[0] |= 0x00001000u;
  steer_angle_lateral_contribution_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_lateral_contribution(double value) {
  _internal_set_steer_angle_lateral_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
inline bool SimpleMPCDebug::_internal_has_steer_angle_lateral_rate_contribution() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_lateral_rate_contribution() const {
  return _internal_has_steer_angle_lateral_rate_contribution();
}
inline void SimpleMPCDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SimpleMPCDebug::_internal_steer_angle_lateral_rate_contribution() const {
  return steer_angle_lateral_rate_contribution_;
}
inline double SimpleMPCDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
  return _internal_steer_angle_lateral_rate_contribution();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_lateral_rate_contribution(double value) {
  _has_bits_[0] |= 0x00002000u;
  steer_angle_lateral_rate_contribution_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_lateral_rate_contribution(double value) {
  _internal_set_steer_angle_lateral_rate_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
inline bool SimpleMPCDebug::_internal_has_steer_angle_heading_contribution() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_heading_contribution() const {
  return _internal_has_steer_angle_heading_contribution();
}
inline void SimpleMPCDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SimpleMPCDebug::_internal_steer_angle_heading_contribution() const {
  return steer_angle_heading_contribution_;
}
inline double SimpleMPCDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_heading_contribution)
  return _internal_steer_angle_heading_contribution();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_heading_contribution(double value) {
  _has_bits_[0] |= 0x00004000u;
  steer_angle_heading_contribution_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_heading_contribution(double value) {
  _internal_set_steer_angle_heading_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
inline bool SimpleMPCDebug::_internal_has_steer_angle_heading_rate_contribution() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_heading_rate_contribution() const {
  return _internal_has_steer_angle_heading_rate_contribution();
}
inline void SimpleMPCDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SimpleMPCDebug::_internal_steer_angle_heading_rate_contribution() const {
  return steer_angle_heading_rate_contribution_;
}
inline double SimpleMPCDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_heading_rate_contribution)
  return _internal_steer_angle_heading_rate_contribution();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_heading_rate_contribution(double value) {
  _has_bits_[0] |= 0x00008000u;
  steer_angle_heading_rate_contribution_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_heading_rate_contribution(double value) {
  _internal_set_steer_angle_heading_rate_contribution(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
inline bool SimpleMPCDebug::_internal_has_steer_angle_feedback() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_feedback() const {
  return _internal_has_steer_angle_feedback();
}
inline void SimpleMPCDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double SimpleMPCDebug::_internal_steer_angle_feedback() const {
  return steer_angle_feedback_;
}
inline double SimpleMPCDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_feedback)
  return _internal_steer_angle_feedback();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_feedback(double value) {
  _has_bits_[0] |= 0x00010000u;
  steer_angle_feedback_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_feedback(double value) {
  _internal_set_steer_angle_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
inline bool SimpleMPCDebug::_internal_has_steering_position() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steering_position() const {
  return _internal_has_steering_position();
}
inline void SimpleMPCDebug::clear_steering_position() {
  steering_position_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double SimpleMPCDebug::_internal_steering_position() const {
  return steering_position_;
}
inline double SimpleMPCDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steering_position)
  return _internal_steering_position();
}
inline void SimpleMPCDebug::_internal_set_steering_position(double value) {
  _has_bits_[0] |= 0x00020000u;
  steering_position_ = value;
}
inline void SimpleMPCDebug::set_steering_position(double value) {
  _internal_set_steering_position(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steering_position)
}

// optional double ref_speed = 16;
inline bool SimpleMPCDebug::_internal_has_ref_speed() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_ref_speed() const {
  return _internal_has_ref_speed();
}
inline void SimpleMPCDebug::clear_ref_speed() {
  ref_speed_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double SimpleMPCDebug::_internal_ref_speed() const {
  return ref_speed_;
}
inline double SimpleMPCDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.ref_speed)
  return _internal_ref_speed();
}
inline void SimpleMPCDebug::_internal_set_ref_speed(double value) {
  _has_bits_[0] |= 0x00040000u;
  ref_speed_ = value;
}
inline void SimpleMPCDebug::set_ref_speed(double value) {
  _internal_set_ref_speed(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
inline bool SimpleMPCDebug::_internal_has_steer_angle_limited() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_limited() const {
  return _internal_has_steer_angle_limited();
}
inline void SimpleMPCDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double SimpleMPCDebug::_internal_steer_angle_limited() const {
  return steer_angle_limited_;
}
inline double SimpleMPCDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_limited)
  return _internal_steer_angle_limited();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_limited(double value) {
  _has_bits_[0] |= 0x00080000u;
  steer_angle_limited_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_limited(double value) {
  _internal_set_steer_angle_limited(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_limited)
}

// optional double station_reference = 18;
inline bool SimpleMPCDebug::_internal_has_station_reference() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_station_reference() const {
  return _internal_has_station_reference();
}
inline void SimpleMPCDebug::clear_station_reference() {
  station_reference_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double SimpleMPCDebug::_internal_station_reference() const {
  return station_reference_;
}
inline double SimpleMPCDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.station_reference)
  return _internal_station_reference();
}
inline void SimpleMPCDebug::_internal_set_station_reference(double value) {
  _has_bits_[0] |= 0x00100000u;
  station_reference_ = value;
}
inline void SimpleMPCDebug::set_station_reference(double value) {
  _internal_set_station_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.station_reference)
}

// optional double station_error = 19;
inline bool SimpleMPCDebug::_internal_has_station_error() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_station_error() const {
  return _internal_has_station_error();
}
inline void SimpleMPCDebug::clear_station_error() {
  station_error_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double SimpleMPCDebug::_internal_station_error() const {
  return station_error_;
}
inline double SimpleMPCDebug::station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.station_error)
  return _internal_station_error();
}
inline void SimpleMPCDebug::_internal_set_station_error(double value) {
  _has_bits_[0] |= 0x00200000u;
  station_error_ = value;
}
inline void SimpleMPCDebug::set_station_error(double value) {
  _internal_set_station_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.station_error)
}

// optional double speed_reference = 20;
inline bool SimpleMPCDebug::_internal_has_speed_reference() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_speed_reference() const {
  return _internal_has_speed_reference();
}
inline void SimpleMPCDebug::clear_speed_reference() {
  speed_reference_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double SimpleMPCDebug::_internal_speed_reference() const {
  return speed_reference_;
}
inline double SimpleMPCDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.speed_reference)
  return _internal_speed_reference();
}
inline void SimpleMPCDebug::_internal_set_speed_reference(double value) {
  _has_bits_[0] |= 0x00400000u;
  speed_reference_ = value;
}
inline void SimpleMPCDebug::set_speed_reference(double value) {
  _internal_set_speed_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.speed_reference)
}

// optional double speed_error = 21;
inline bool SimpleMPCDebug::_internal_has_speed_error() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_speed_error() const {
  return _internal_has_speed_error();
}
inline void SimpleMPCDebug::clear_speed_error() {
  speed_error_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double SimpleMPCDebug::_internal_speed_error() const {
  return speed_error_;
}
inline double SimpleMPCDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.speed_error)
  return _internal_speed_error();
}
inline void SimpleMPCDebug::_internal_set_speed_error(double value) {
  _has_bits_[0] |= 0x00800000u;
  speed_error_ = value;
}
inline void SimpleMPCDebug::set_speed_error(double value) {
  _internal_set_speed_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.speed_error)
}

// optional double acceleration_reference = 22;
inline bool SimpleMPCDebug::_internal_has_acceleration_reference() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_reference() const {
  return _internal_has_acceleration_reference();
}
inline void SimpleMPCDebug::clear_acceleration_reference() {
  acceleration_reference_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double SimpleMPCDebug::_internal_acceleration_reference() const {
  return acceleration_reference_;
}
inline double SimpleMPCDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_reference)
  return _internal_acceleration_reference();
}
inline void SimpleMPCDebug::_internal_set_acceleration_reference(double value) {
  _has_bits_[0] |= 0x01000000u;
  acceleration_reference_ = value;
}
inline void SimpleMPCDebug::set_acceleration_reference(double value) {
  _internal_set_acceleration_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_reference)
}

// optional bool is_full_stop = 23;
inline bool SimpleMPCDebug::_internal_has_is_full_stop() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_is_full_stop() const {
  return _internal_has_is_full_stop();
}
inline void SimpleMPCDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  _has_bits_[1] &= ~0x20000000u;
}
inline bool SimpleMPCDebug::_internal_is_full_stop() const {
  return is_full_stop_;
}
inline bool SimpleMPCDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.is_full_stop)
  return _internal_is_full_stop();
}
inline void SimpleMPCDebug::_internal_set_is_full_stop(bool value) {
  _has_bits_[1] |= 0x20000000u;
  is_full_stop_ = value;
}
inline void SimpleMPCDebug::set_is_full_stop(bool value) {
  _internal_set_is_full_stop(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.is_full_stop)
}

// optional double station_feedback = 24;
inline bool SimpleMPCDebug::_internal_has_station_feedback() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_station_feedback() const {
  return _internal_has_station_feedback();
}
inline void SimpleMPCDebug::clear_station_feedback() {
  station_feedback_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double SimpleMPCDebug::_internal_station_feedback() const {
  return station_feedback_;
}
inline double SimpleMPCDebug::station_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.station_feedback)
  return _internal_station_feedback();
}
inline void SimpleMPCDebug::_internal_set_station_feedback(double value) {
  _has_bits_[0] |= 0x02000000u;
  station_feedback_ = value;
}
inline void SimpleMPCDebug::set_station_feedback(double value) {
  _internal_set_station_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.station_feedback)
}

// optional double speed_feedback = 25;
inline bool SimpleMPCDebug::_internal_has_speed_feedback() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_speed_feedback() const {
  return _internal_has_speed_feedback();
}
inline void SimpleMPCDebug::clear_speed_feedback() {
  speed_feedback_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double SimpleMPCDebug::_internal_speed_feedback() const {
  return speed_feedback_;
}
inline double SimpleMPCDebug::speed_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.speed_feedback)
  return _internal_speed_feedback();
}
inline void SimpleMPCDebug::_internal_set_speed_feedback(double value) {
  _has_bits_[0] |= 0x04000000u;
  speed_feedback_ = value;
}
inline void SimpleMPCDebug::set_speed_feedback(double value) {
  _internal_set_speed_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.speed_feedback)
}

// optional double acceleration_cmd_closeloop = 26;
inline bool SimpleMPCDebug::_internal_has_acceleration_cmd_closeloop() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_cmd_closeloop() const {
  return _internal_has_acceleration_cmd_closeloop();
}
inline void SimpleMPCDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double SimpleMPCDebug::_internal_acceleration_cmd_closeloop() const {
  return acceleration_cmd_closeloop_;
}
inline double SimpleMPCDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_cmd_closeloop)
  return _internal_acceleration_cmd_closeloop();
}
inline void SimpleMPCDebug::_internal_set_acceleration_cmd_closeloop(double value) {
  _has_bits_[0] |= 0x08000000u;
  acceleration_cmd_closeloop_ = value;
}
inline void SimpleMPCDebug::set_acceleration_cmd_closeloop(double value) {
  _internal_set_acceleration_cmd_closeloop(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 27;
inline bool SimpleMPCDebug::_internal_has_acceleration_cmd() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_cmd() const {
  return _internal_has_acceleration_cmd();
}
inline void SimpleMPCDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double SimpleMPCDebug::_internal_acceleration_cmd() const {
  return acceleration_cmd_;
}
inline double SimpleMPCDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_cmd)
  return _internal_acceleration_cmd();
}
inline void SimpleMPCDebug::_internal_set_acceleration_cmd(double value) {
  _has_bits_[0] |= 0x10000000u;
  acceleration_cmd_ = value;
}
inline void SimpleMPCDebug::set_acceleration_cmd(double value) {
  _internal_set_acceleration_cmd(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 28;
inline bool SimpleMPCDebug::_internal_has_acceleration_lookup() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_lookup() const {
  return _internal_has_acceleration_lookup();
}
inline void SimpleMPCDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double SimpleMPCDebug::_internal_acceleration_lookup() const {
  return acceleration_lookup_;
}
inline double SimpleMPCDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_lookup)
  return _internal_acceleration_lookup();
}
inline void SimpleMPCDebug::_internal_set_acceleration_lookup(double value) {
  _has_bits_[0] |= 0x20000000u;
  acceleration_lookup_ = value;
}
inline void SimpleMPCDebug::set_acceleration_lookup(double value) {
  _internal_set_acceleration_lookup(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_lookup)
}

// optional double speed_lookup = 29;
inline bool SimpleMPCDebug::_internal_has_speed_lookup() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_speed_lookup() const {
  return _internal_has_speed_lookup();
}
inline void SimpleMPCDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double SimpleMPCDebug::_internal_speed_lookup() const {
  return speed_lookup_;
}
inline double SimpleMPCDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.speed_lookup)
  return _internal_speed_lookup();
}
inline void SimpleMPCDebug::_internal_set_speed_lookup(double value) {
  _has_bits_[0] |= 0x40000000u;
  speed_lookup_ = value;
}
inline void SimpleMPCDebug::set_speed_lookup(double value) {
  _internal_set_speed_lookup(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.speed_lookup)
}

// optional double calibration_value = 30;
inline bool SimpleMPCDebug::_internal_has_calibration_value() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_calibration_value() const {
  return _internal_has_calibration_value();
}
inline void SimpleMPCDebug::clear_calibration_value() {
  calibration_value_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double SimpleMPCDebug::_internal_calibration_value() const {
  return calibration_value_;
}
inline double SimpleMPCDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.calibration_value)
  return _internal_calibration_value();
}
inline void SimpleMPCDebug::_internal_set_calibration_value(double value) {
  _has_bits_[0] |= 0x80000000u;
  calibration_value_ = value;
}
inline void SimpleMPCDebug::set_calibration_value(double value) {
  _internal_set_calibration_value(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.calibration_value)
}

// optional double steer_unconstrained_control_diff = 31;
inline bool SimpleMPCDebug::_internal_has_steer_unconstrained_control_diff() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_unconstrained_control_diff() const {
  return _internal_has_steer_unconstrained_control_diff();
}
inline void SimpleMPCDebug::clear_steer_unconstrained_control_diff() {
  steer_unconstrained_control_diff_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline double SimpleMPCDebug::_internal_steer_unconstrained_control_diff() const {
  return steer_unconstrained_control_diff_;
}
inline double SimpleMPCDebug::steer_unconstrained_control_diff() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_unconstrained_control_diff)
  return _internal_steer_unconstrained_control_diff();
}
inline void SimpleMPCDebug::_internal_set_steer_unconstrained_control_diff(double value) {
  _has_bits_[1] |= 0x00000001u;
  steer_unconstrained_control_diff_ = value;
}
inline void SimpleMPCDebug::set_steer_unconstrained_control_diff(double value) {
  _internal_set_steer_unconstrained_control_diff(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_unconstrained_control_diff)
}

// optional double steer_angle_feedforward_compensation = 32;
inline bool SimpleMPCDebug::_internal_has_steer_angle_feedforward_compensation() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_feedforward_compensation() const {
  return _internal_has_steer_angle_feedforward_compensation();
}
inline void SimpleMPCDebug::clear_steer_angle_feedforward_compensation() {
  steer_angle_feedforward_compensation_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline double SimpleMPCDebug::_internal_steer_angle_feedforward_compensation() const {
  return steer_angle_feedforward_compensation_;
}
inline double SimpleMPCDebug::steer_angle_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_feedforward_compensation)
  return _internal_steer_angle_feedforward_compensation();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_feedforward_compensation(double value) {
  _has_bits_[1] |= 0x00000002u;
  steer_angle_feedforward_compensation_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_feedforward_compensation(double value) {
  _internal_set_steer_angle_feedforward_compensation(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_feedforward_compensation)
}

// repeated double matrix_q_updated = 33;
inline int SimpleMPCDebug::_internal_matrix_q_updated_size() const {
  return matrix_q_updated_.size();
}
inline int SimpleMPCDebug::matrix_q_updated_size() const {
  return _internal_matrix_q_updated_size();
}
inline void SimpleMPCDebug::clear_matrix_q_updated() {
  matrix_q_updated_.Clear();
}
inline double SimpleMPCDebug::_internal_matrix_q_updated(int index) const {
  return matrix_q_updated_.Get(index);
}
inline double SimpleMPCDebug::matrix_q_updated(int index) const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.matrix_q_updated)
  return _internal_matrix_q_updated(index);
}
inline void SimpleMPCDebug::set_matrix_q_updated(int index, double value) {
  matrix_q_updated_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.matrix_q_updated)
}
inline void SimpleMPCDebug::_internal_add_matrix_q_updated(double value) {
  matrix_q_updated_.Add(value);
}
inline void SimpleMPCDebug::add_matrix_q_updated(double value) {
  _internal_add_matrix_q_updated(value);
  // @@protoc_insertion_point(field_add:control.SimpleMPCDebug.matrix_q_updated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SimpleMPCDebug::_internal_matrix_q_updated() const {
  return matrix_q_updated_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SimpleMPCDebug::matrix_q_updated() const {
  // @@protoc_insertion_point(field_list:control.SimpleMPCDebug.matrix_q_updated)
  return _internal_matrix_q_updated();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SimpleMPCDebug::_internal_mutable_matrix_q_updated() {
  return &matrix_q_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SimpleMPCDebug::mutable_matrix_q_updated() {
  // @@protoc_insertion_point(field_mutable_list:control.SimpleMPCDebug.matrix_q_updated)
  return _internal_mutable_matrix_q_updated();
}

// repeated double matrix_r_updated = 34;
inline int SimpleMPCDebug::_internal_matrix_r_updated_size() const {
  return matrix_r_updated_.size();
}
inline int SimpleMPCDebug::matrix_r_updated_size() const {
  return _internal_matrix_r_updated_size();
}
inline void SimpleMPCDebug::clear_matrix_r_updated() {
  matrix_r_updated_.Clear();
}
inline double SimpleMPCDebug::_internal_matrix_r_updated(int index) const {
  return matrix_r_updated_.Get(index);
}
inline double SimpleMPCDebug::matrix_r_updated(int index) const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.matrix_r_updated)
  return _internal_matrix_r_updated(index);
}
inline void SimpleMPCDebug::set_matrix_r_updated(int index, double value) {
  matrix_r_updated_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.matrix_r_updated)
}
inline void SimpleMPCDebug::_internal_add_matrix_r_updated(double value) {
  matrix_r_updated_.Add(value);
}
inline void SimpleMPCDebug::add_matrix_r_updated(double value) {
  _internal_add_matrix_r_updated(value);
  // @@protoc_insertion_point(field_add:control.SimpleMPCDebug.matrix_r_updated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SimpleMPCDebug::_internal_matrix_r_updated() const {
  return matrix_r_updated_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SimpleMPCDebug::matrix_r_updated() const {
  // @@protoc_insertion_point(field_list:control.SimpleMPCDebug.matrix_r_updated)
  return _internal_matrix_r_updated();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SimpleMPCDebug::_internal_mutable_matrix_r_updated() {
  return &matrix_r_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SimpleMPCDebug::mutable_matrix_r_updated() {
  // @@protoc_insertion_point(field_mutable_list:control.SimpleMPCDebug.matrix_r_updated)
  return _internal_mutable_matrix_r_updated();
}

// optional double lateral_acceleration = 35;
inline bool SimpleMPCDebug::_internal_has_lateral_acceleration() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_lateral_acceleration() const {
  return _internal_has_lateral_acceleration();
}
inline void SimpleMPCDebug::clear_lateral_acceleration() {
  lateral_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline double SimpleMPCDebug::_internal_lateral_acceleration() const {
  return lateral_acceleration_;
}
inline double SimpleMPCDebug::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.lateral_acceleration)
  return _internal_lateral_acceleration();
}
inline void SimpleMPCDebug::_internal_set_lateral_acceleration(double value) {
  _has_bits_[1] |= 0x00000004u;
  lateral_acceleration_ = value;
}
inline void SimpleMPCDebug::set_lateral_acceleration(double value) {
  _internal_set_lateral_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.lateral_acceleration)
}

// optional double lateral_jerk = 36;
inline bool SimpleMPCDebug::_internal_has_lateral_jerk() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_lateral_jerk() const {
  return _internal_has_lateral_jerk();
}
inline void SimpleMPCDebug::clear_lateral_jerk() {
  lateral_jerk_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline double SimpleMPCDebug::_internal_lateral_jerk() const {
  return lateral_jerk_;
}
inline double SimpleMPCDebug::lateral_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.lateral_jerk)
  return _internal_lateral_jerk();
}
inline void SimpleMPCDebug::_internal_set_lateral_jerk(double value) {
  _has_bits_[1] |= 0x00000008u;
  lateral_jerk_ = value;
}
inline void SimpleMPCDebug::set_lateral_jerk(double value) {
  _internal_set_lateral_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.lateral_jerk)
}

// optional double ref_heading_rate = 37;
inline bool SimpleMPCDebug::_internal_has_ref_heading_rate() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_ref_heading_rate() const {
  return _internal_has_ref_heading_rate();
}
inline void SimpleMPCDebug::clear_ref_heading_rate() {
  ref_heading_rate_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline double SimpleMPCDebug::_internal_ref_heading_rate() const {
  return ref_heading_rate_;
}
inline double SimpleMPCDebug::ref_heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.ref_heading_rate)
  return _internal_ref_heading_rate();
}
inline void SimpleMPCDebug::_internal_set_ref_heading_rate(double value) {
  _has_bits_[1] |= 0x00000010u;
  ref_heading_rate_ = value;
}
inline void SimpleMPCDebug::set_ref_heading_rate(double value) {
  _internal_set_ref_heading_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.ref_heading_rate)
}

// optional double heading_rate = 38;
inline bool SimpleMPCDebug::_internal_has_heading_rate() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_rate() const {
  return _internal_has_heading_rate();
}
inline void SimpleMPCDebug::clear_heading_rate() {
  heading_rate_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline double SimpleMPCDebug::_internal_heading_rate() const {
  return heading_rate_;
}
inline double SimpleMPCDebug::heading_rate() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_rate)
  return _internal_heading_rate();
}
inline void SimpleMPCDebug::_internal_set_heading_rate(double value) {
  _has_bits_[1] |= 0x00000020u;
  heading_rate_ = value;
}
inline void SimpleMPCDebug::set_heading_rate(double value) {
  _internal_set_heading_rate(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_rate)
}

// optional double ref_heading_acceleration = 39;
inline bool SimpleMPCDebug::_internal_has_ref_heading_acceleration() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_ref_heading_acceleration() const {
  return _internal_has_ref_heading_acceleration();
}
inline void SimpleMPCDebug::clear_ref_heading_acceleration() {
  ref_heading_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline double SimpleMPCDebug::_internal_ref_heading_acceleration() const {
  return ref_heading_acceleration_;
}
inline double SimpleMPCDebug::ref_heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.ref_heading_acceleration)
  return _internal_ref_heading_acceleration();
}
inline void SimpleMPCDebug::_internal_set_ref_heading_acceleration(double value) {
  _has_bits_[1] |= 0x00000040u;
  ref_heading_acceleration_ = value;
}
inline void SimpleMPCDebug::set_ref_heading_acceleration(double value) {
  _internal_set_ref_heading_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.ref_heading_acceleration)
}

// optional double heading_acceleration = 40;
inline bool SimpleMPCDebug::_internal_has_heading_acceleration() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_acceleration() const {
  return _internal_has_heading_acceleration();
}
inline void SimpleMPCDebug::clear_heading_acceleration() {
  heading_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline double SimpleMPCDebug::_internal_heading_acceleration() const {
  return heading_acceleration_;
}
inline double SimpleMPCDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_acceleration)
  return _internal_heading_acceleration();
}
inline void SimpleMPCDebug::_internal_set_heading_acceleration(double value) {
  _has_bits_[1] |= 0x00000080u;
  heading_acceleration_ = value;
}
inline void SimpleMPCDebug::set_heading_acceleration(double value) {
  _internal_set_heading_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_acceleration)
}

// optional double heading_error_acceleration = 41;
inline bool SimpleMPCDebug::_internal_has_heading_error_acceleration() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_error_acceleration() const {
  return _internal_has_heading_error_acceleration();
}
inline void SimpleMPCDebug::clear_heading_error_acceleration() {
  heading_error_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline double SimpleMPCDebug::_internal_heading_error_acceleration() const {
  return heading_error_acceleration_;
}
inline double SimpleMPCDebug::heading_error_acceleration() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_error_acceleration)
  return _internal_heading_error_acceleration();
}
inline void SimpleMPCDebug::_internal_set_heading_error_acceleration(double value) {
  _has_bits_[1] |= 0x00000100u;
  heading_error_acceleration_ = value;
}
inline void SimpleMPCDebug::set_heading_error_acceleration(double value) {
  _internal_set_heading_error_acceleration(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_error_acceleration)
}

// optional double ref_heading_jerk = 42;
inline bool SimpleMPCDebug::_internal_has_ref_heading_jerk() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_ref_heading_jerk() const {
  return _internal_has_ref_heading_jerk();
}
inline void SimpleMPCDebug::clear_ref_heading_jerk() {
  ref_heading_jerk_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline double SimpleMPCDebug::_internal_ref_heading_jerk() const {
  return ref_heading_jerk_;
}
inline double SimpleMPCDebug::ref_heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.ref_heading_jerk)
  return _internal_ref_heading_jerk();
}
inline void SimpleMPCDebug::_internal_set_ref_heading_jerk(double value) {
  _has_bits_[1] |= 0x00000200u;
  ref_heading_jerk_ = value;
}
inline void SimpleMPCDebug::set_ref_heading_jerk(double value) {
  _internal_set_ref_heading_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.ref_heading_jerk)
}

// optional double heading_jerk = 43;
inline bool SimpleMPCDebug::_internal_has_heading_jerk() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_jerk() const {
  return _internal_has_heading_jerk();
}
inline void SimpleMPCDebug::clear_heading_jerk() {
  heading_jerk_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline double SimpleMPCDebug::_internal_heading_jerk() const {
  return heading_jerk_;
}
inline double SimpleMPCDebug::heading_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_jerk)
  return _internal_heading_jerk();
}
inline void SimpleMPCDebug::_internal_set_heading_jerk(double value) {
  _has_bits_[1] |= 0x00000400u;
  heading_jerk_ = value;
}
inline void SimpleMPCDebug::set_heading_jerk(double value) {
  _internal_set_heading_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_jerk)
}

// optional double heading_error_jerk = 44;
inline bool SimpleMPCDebug::_internal_has_heading_error_jerk() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_error_jerk() const {
  return _internal_has_heading_error_jerk();
}
inline void SimpleMPCDebug::clear_heading_error_jerk() {
  heading_error_jerk_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline double SimpleMPCDebug::_internal_heading_error_jerk() const {
  return heading_error_jerk_;
}
inline double SimpleMPCDebug::heading_error_jerk() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_error_jerk)
  return _internal_heading_error_jerk();
}
inline void SimpleMPCDebug::_internal_set_heading_error_jerk(double value) {
  _has_bits_[1] |= 0x00000800u;
  heading_error_jerk_ = value;
}
inline void SimpleMPCDebug::set_heading_error_jerk(double value) {
  _internal_set_heading_error_jerk(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_error_jerk)
}

// optional double acceleration_feedback = 45;
inline bool SimpleMPCDebug::_internal_has_acceleration_feedback() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_feedback() const {
  return _internal_has_acceleration_feedback();
}
inline void SimpleMPCDebug::clear_acceleration_feedback() {
  acceleration_feedback_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline double SimpleMPCDebug::_internal_acceleration_feedback() const {
  return acceleration_feedback_;
}
inline double SimpleMPCDebug::acceleration_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_feedback)
  return _internal_acceleration_feedback();
}
inline void SimpleMPCDebug::_internal_set_acceleration_feedback(double value) {
  _has_bits_[1] |= 0x00001000u;
  acceleration_feedback_ = value;
}
inline void SimpleMPCDebug::set_acceleration_feedback(double value) {
  _internal_set_acceleration_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_feedback)
}

// optional double acceleration_error = 46;
inline bool SimpleMPCDebug::_internal_has_acceleration_error() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_error() const {
  return _internal_has_acceleration_error();
}
inline void SimpleMPCDebug::clear_acceleration_error() {
  acceleration_error_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline double SimpleMPCDebug::_internal_acceleration_error() const {
  return acceleration_error_;
}
inline double SimpleMPCDebug::acceleration_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_error)
  return _internal_acceleration_error();
}
inline void SimpleMPCDebug::_internal_set_acceleration_error(double value) {
  _has_bits_[1] |= 0x00002000u;
  acceleration_error_ = value;
}
inline void SimpleMPCDebug::set_acceleration_error(double value) {
  _internal_set_acceleration_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_error)
}

// optional double jerk_reference = 47;
inline bool SimpleMPCDebug::_internal_has_jerk_reference() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_jerk_reference() const {
  return _internal_has_jerk_reference();
}
inline void SimpleMPCDebug::clear_jerk_reference() {
  jerk_reference_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline double SimpleMPCDebug::_internal_jerk_reference() const {
  return jerk_reference_;
}
inline double SimpleMPCDebug::jerk_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.jerk_reference)
  return _internal_jerk_reference();
}
inline void SimpleMPCDebug::_internal_set_jerk_reference(double value) {
  _has_bits_[1] |= 0x00004000u;
  jerk_reference_ = value;
}
inline void SimpleMPCDebug::set_jerk_reference(double value) {
  _internal_set_jerk_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.jerk_reference)
}

// optional double jerk_feedback = 48;
inline bool SimpleMPCDebug::_internal_has_jerk_feedback() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_jerk_feedback() const {
  return _internal_has_jerk_feedback();
}
inline void SimpleMPCDebug::clear_jerk_feedback() {
  jerk_feedback_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline double SimpleMPCDebug::_internal_jerk_feedback() const {
  return jerk_feedback_;
}
inline double SimpleMPCDebug::jerk_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.jerk_feedback)
  return _internal_jerk_feedback();
}
inline void SimpleMPCDebug::_internal_set_jerk_feedback(double value) {
  _has_bits_[1] |= 0x00008000u;
  jerk_feedback_ = value;
}
inline void SimpleMPCDebug::set_jerk_feedback(double value) {
  _internal_set_jerk_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.jerk_feedback)
}

// optional double jerk_error = 49;
inline bool SimpleMPCDebug::_internal_has_jerk_error() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_jerk_error() const {
  return _internal_has_jerk_error();
}
inline void SimpleMPCDebug::clear_jerk_error() {
  jerk_error_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline double SimpleMPCDebug::_internal_jerk_error() const {
  return jerk_error_;
}
inline double SimpleMPCDebug::jerk_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.jerk_error)
  return _internal_jerk_error();
}
inline void SimpleMPCDebug::_internal_set_jerk_error(double value) {
  _has_bits_[1] |= 0x00010000u;
  jerk_error_ = value;
}
inline void SimpleMPCDebug::set_jerk_error(double value) {
  _internal_set_jerk_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.jerk_error)
}

// optional double lateral_error_feedback = 50;
inline bool SimpleMPCDebug::_internal_has_lateral_error_feedback() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_lateral_error_feedback() const {
  return _internal_has_lateral_error_feedback();
}
inline void SimpleMPCDebug::clear_lateral_error_feedback() {
  lateral_error_feedback_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline double SimpleMPCDebug::_internal_lateral_error_feedback() const {
  return lateral_error_feedback_;
}
inline double SimpleMPCDebug::lateral_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.lateral_error_feedback)
  return _internal_lateral_error_feedback();
}
inline void SimpleMPCDebug::_internal_set_lateral_error_feedback(double value) {
  _has_bits_[1] |= 0x00020000u;
  lateral_error_feedback_ = value;
}
inline void SimpleMPCDebug::set_lateral_error_feedback(double value) {
  _internal_set_lateral_error_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.lateral_error_feedback)
}

// optional double heading_error_feedback = 51;
inline bool SimpleMPCDebug::_internal_has_heading_error_feedback() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_heading_error_feedback() const {
  return _internal_has_heading_error_feedback();
}
inline void SimpleMPCDebug::clear_heading_error_feedback() {
  heading_error_feedback_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline double SimpleMPCDebug::_internal_heading_error_feedback() const {
  return heading_error_feedback_;
}
inline double SimpleMPCDebug::heading_error_feedback() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.heading_error_feedback)
  return _internal_heading_error_feedback();
}
inline void SimpleMPCDebug::_internal_set_heading_error_feedback(double value) {
  _has_bits_[1] |= 0x00040000u;
  heading_error_feedback_ = value;
}
inline void SimpleMPCDebug::set_heading_error_feedback(double value) {
  _internal_set_heading_error_feedback(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.heading_error_feedback)
}

// optional double steer_angle_feedback_augment = 52;
inline bool SimpleMPCDebug::_internal_has_steer_angle_feedback_augment() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_steer_angle_feedback_augment() const {
  return _internal_has_steer_angle_feedback_augment();
}
inline void SimpleMPCDebug::clear_steer_angle_feedback_augment() {
  steer_angle_feedback_augment_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline double SimpleMPCDebug::_internal_steer_angle_feedback_augment() const {
  return steer_angle_feedback_augment_;
}
inline double SimpleMPCDebug::steer_angle_feedback_augment() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.steer_angle_feedback_augment)
  return _internal_steer_angle_feedback_augment();
}
inline void SimpleMPCDebug::_internal_set_steer_angle_feedback_augment(double value) {
  _has_bits_[1] |= 0x00080000u;
  steer_angle_feedback_augment_ = value;
}
inline void SimpleMPCDebug::set_steer_angle_feedback_augment(double value) {
  _internal_set_steer_angle_feedback_augment(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.steer_angle_feedback_augment)
}

// optional .control.common.TrajectoryPoint current_matched_point = 53;
inline bool SimpleMPCDebug::_internal_has_current_matched_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_matched_point_ != nullptr);
  return value;
}
inline bool SimpleMPCDebug::has_current_matched_point() const {
  return _internal_has_current_matched_point();
}
inline const ::control::common::TrajectoryPoint& SimpleMPCDebug::_internal_current_matched_point() const {
  const ::control::common::TrajectoryPoint* p = current_matched_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::TrajectoryPoint*>(
      &::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleMPCDebug::current_matched_point() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.current_matched_point)
  return _internal_current_matched_point();
}
inline void SimpleMPCDebug::unsafe_arena_set_allocated_current_matched_point(
    ::control::common::TrajectoryPoint* current_matched_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_matched_point_);
  }
  current_matched_point_ = current_matched_point;
  if (current_matched_point) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleMPCDebug.current_matched_point)
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::release_current_matched_point() {
  auto temp = unsafe_arena_release_current_matched_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::unsafe_arena_release_current_matched_point() {
  // @@protoc_insertion_point(field_release:control.SimpleMPCDebug.current_matched_point)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::TrajectoryPoint* temp = current_matched_point_;
  current_matched_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::_internal_mutable_current_matched_point() {
  _has_bits_[0] |= 0x00000001u;
  if (current_matched_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::TrajectoryPoint>(GetArena());
    current_matched_point_ = p;
  }
  return current_matched_point_;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::mutable_current_matched_point() {
  // @@protoc_insertion_point(field_mutable:control.SimpleMPCDebug.current_matched_point)
  return _internal_mutable_current_matched_point();
}
inline void SimpleMPCDebug::set_allocated_current_matched_point(::control::common::TrajectoryPoint* current_matched_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_matched_point_);
  }
  if (current_matched_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_matched_point)->GetArena();
    if (message_arena != submessage_arena) {
      current_matched_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_matched_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_matched_point_ = current_matched_point;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleMPCDebug.current_matched_point)
}

// optional .control.common.TrajectoryPoint current_reference_point = 54;
inline bool SimpleMPCDebug::_internal_has_current_reference_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || current_reference_point_ != nullptr);
  return value;
}
inline bool SimpleMPCDebug::has_current_reference_point() const {
  return _internal_has_current_reference_point();
}
inline const ::control::common::TrajectoryPoint& SimpleMPCDebug::_internal_current_reference_point() const {
  const ::control::common::TrajectoryPoint* p = current_reference_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::TrajectoryPoint*>(
      &::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleMPCDebug::current_reference_point() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.current_reference_point)
  return _internal_current_reference_point();
}
inline void SimpleMPCDebug::unsafe_arena_set_allocated_current_reference_point(
    ::control::common::TrajectoryPoint* current_reference_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_reference_point_);
  }
  current_reference_point_ = current_reference_point;
  if (current_reference_point) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleMPCDebug.current_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::release_current_reference_point() {
  auto temp = unsafe_arena_release_current_reference_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::unsafe_arena_release_current_reference_point() {
  // @@protoc_insertion_point(field_release:control.SimpleMPCDebug.current_reference_point)
  _has_bits_[0] &= ~0x00000002u;
  ::control::common::TrajectoryPoint* temp = current_reference_point_;
  current_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::_internal_mutable_current_reference_point() {
  _has_bits_[0] |= 0x00000002u;
  if (current_reference_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::TrajectoryPoint>(GetArena());
    current_reference_point_ = p;
  }
  return current_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::mutable_current_reference_point() {
  // @@protoc_insertion_point(field_mutable:control.SimpleMPCDebug.current_reference_point)
  return _internal_mutable_current_reference_point();
}
inline void SimpleMPCDebug::set_allocated_current_reference_point(::control::common::TrajectoryPoint* current_reference_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_reference_point_);
  }
  if (current_reference_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_reference_point)->GetArena();
    if (message_arena != submessage_arena) {
      current_reference_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_reference_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_reference_point_ = current_reference_point;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleMPCDebug.current_reference_point)
}

// optional .control.common.TrajectoryPoint preview_reference_point = 55;
inline bool SimpleMPCDebug::_internal_has_preview_reference_point() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || preview_reference_point_ != nullptr);
  return value;
}
inline bool SimpleMPCDebug::has_preview_reference_point() const {
  return _internal_has_preview_reference_point();
}
inline const ::control::common::TrajectoryPoint& SimpleMPCDebug::_internal_preview_reference_point() const {
  const ::control::common::TrajectoryPoint* p = preview_reference_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::TrajectoryPoint*>(
      &::control::common::_TrajectoryPoint_default_instance_);
}
inline const ::control::common::TrajectoryPoint& SimpleMPCDebug::preview_reference_point() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.preview_reference_point)
  return _internal_preview_reference_point();
}
inline void SimpleMPCDebug::unsafe_arena_set_allocated_preview_reference_point(
    ::control::common::TrajectoryPoint* preview_reference_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preview_reference_point_);
  }
  preview_reference_point_ = preview_reference_point;
  if (preview_reference_point) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.SimpleMPCDebug.preview_reference_point)
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::release_preview_reference_point() {
  auto temp = unsafe_arena_release_preview_reference_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::unsafe_arena_release_preview_reference_point() {
  // @@protoc_insertion_point(field_release:control.SimpleMPCDebug.preview_reference_point)
  _has_bits_[0] &= ~0x00000004u;
  ::control::common::TrajectoryPoint* temp = preview_reference_point_;
  preview_reference_point_ = nullptr;
  return temp;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::_internal_mutable_preview_reference_point() {
  _has_bits_[0] |= 0x00000004u;
  if (preview_reference_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::TrajectoryPoint>(GetArena());
    preview_reference_point_ = p;
  }
  return preview_reference_point_;
}
inline ::control::common::TrajectoryPoint* SimpleMPCDebug::mutable_preview_reference_point() {
  // @@protoc_insertion_point(field_mutable:control.SimpleMPCDebug.preview_reference_point)
  return _internal_mutable_preview_reference_point();
}
inline void SimpleMPCDebug::set_allocated_preview_reference_point(::control::common::TrajectoryPoint* preview_reference_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preview_reference_point_);
  }
  if (preview_reference_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preview_reference_point)->GetArena();
    if (message_arena != submessage_arena) {
      preview_reference_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preview_reference_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preview_reference_point_ = preview_reference_point;
  // @@protoc_insertion_point(field_set_allocated:control.SimpleMPCDebug.preview_reference_point)
}

// optional double preview_station_error = 56;
inline bool SimpleMPCDebug::_internal_has_preview_station_error() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_preview_station_error() const {
  return _internal_has_preview_station_error();
}
inline void SimpleMPCDebug::clear_preview_station_error() {
  preview_station_error_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline double SimpleMPCDebug::_internal_preview_station_error() const {
  return preview_station_error_;
}
inline double SimpleMPCDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.preview_station_error)
  return _internal_preview_station_error();
}
inline void SimpleMPCDebug::_internal_set_preview_station_error(double value) {
  _has_bits_[1] |= 0x00100000u;
  preview_station_error_ = value;
}
inline void SimpleMPCDebug::set_preview_station_error(double value) {
  _internal_set_preview_station_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.preview_station_error)
}

// optional double preview_speed_reference = 57;
inline bool SimpleMPCDebug::_internal_has_preview_speed_reference() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_preview_speed_reference() const {
  return _internal_has_preview_speed_reference();
}
inline void SimpleMPCDebug::clear_preview_speed_reference() {
  preview_speed_reference_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline double SimpleMPCDebug::_internal_preview_speed_reference() const {
  return preview_speed_reference_;
}
inline double SimpleMPCDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.preview_speed_reference)
  return _internal_preview_speed_reference();
}
inline void SimpleMPCDebug::_internal_set_preview_speed_reference(double value) {
  _has_bits_[1] |= 0x00200000u;
  preview_speed_reference_ = value;
}
inline void SimpleMPCDebug::set_preview_speed_reference(double value) {
  _internal_set_preview_speed_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.preview_speed_reference)
}

// optional double preview_speed_error = 58;
inline bool SimpleMPCDebug::_internal_has_preview_speed_error() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_preview_speed_error() const {
  return _internal_has_preview_speed_error();
}
inline void SimpleMPCDebug::clear_preview_speed_error() {
  preview_speed_error_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline double SimpleMPCDebug::_internal_preview_speed_error() const {
  return preview_speed_error_;
}
inline double SimpleMPCDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.preview_speed_error)
  return _internal_preview_speed_error();
}
inline void SimpleMPCDebug::_internal_set_preview_speed_error(double value) {
  _has_bits_[1] |= 0x00400000u;
  preview_speed_error_ = value;
}
inline void SimpleMPCDebug::set_preview_speed_error(double value) {
  _internal_set_preview_speed_error(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.preview_speed_error)
}

// optional double preview_acceleration_reference = 59;
inline bool SimpleMPCDebug::_internal_has_preview_acceleration_reference() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_preview_acceleration_reference() const {
  return _internal_has_preview_acceleration_reference();
}
inline void SimpleMPCDebug::clear_preview_acceleration_reference() {
  preview_acceleration_reference_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline double SimpleMPCDebug::_internal_preview_acceleration_reference() const {
  return preview_acceleration_reference_;
}
inline double SimpleMPCDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.preview_acceleration_reference)
  return _internal_preview_acceleration_reference();
}
inline void SimpleMPCDebug::_internal_set_preview_acceleration_reference(double value) {
  _has_bits_[1] |= 0x00800000u;
  preview_acceleration_reference_ = value;
}
inline void SimpleMPCDebug::set_preview_acceleration_reference(double value) {
  _internal_set_preview_acceleration_reference(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.preview_acceleration_reference)
}

// optional double vehicle_pitch = 60;
inline bool SimpleMPCDebug::_internal_has_vehicle_pitch() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_vehicle_pitch() const {
  return _internal_has_vehicle_pitch();
}
inline void SimpleMPCDebug::clear_vehicle_pitch() {
  vehicle_pitch_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline double SimpleMPCDebug::_internal_vehicle_pitch() const {
  return vehicle_pitch_;
}
inline double SimpleMPCDebug::vehicle_pitch() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.vehicle_pitch)
  return _internal_vehicle_pitch();
}
inline void SimpleMPCDebug::_internal_set_vehicle_pitch(double value) {
  _has_bits_[1] |= 0x01000000u;
  vehicle_pitch_ = value;
}
inline void SimpleMPCDebug::set_vehicle_pitch(double value) {
  _internal_set_vehicle_pitch(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.vehicle_pitch)
}

// optional double slope_offset_compensation = 61;
inline bool SimpleMPCDebug::_internal_has_slope_offset_compensation() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_slope_offset_compensation() const {
  return _internal_has_slope_offset_compensation();
}
inline void SimpleMPCDebug::clear_slope_offset_compensation() {
  slope_offset_compensation_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline double SimpleMPCDebug::_internal_slope_offset_compensation() const {
  return slope_offset_compensation_;
}
inline double SimpleMPCDebug::slope_offset_compensation() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.slope_offset_compensation)
  return _internal_slope_offset_compensation();
}
inline void SimpleMPCDebug::_internal_set_slope_offset_compensation(double value) {
  _has_bits_[1] |= 0x02000000u;
  slope_offset_compensation_ = value;
}
inline void SimpleMPCDebug::set_slope_offset_compensation(double value) {
  _internal_set_slope_offset_compensation(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.slope_offset_compensation)
}

// optional double path_remain = 62;
inline bool SimpleMPCDebug::_internal_has_path_remain() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_path_remain() const {
  return _internal_has_path_remain();
}
inline void SimpleMPCDebug::clear_path_remain() {
  path_remain_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline double SimpleMPCDebug::_internal_path_remain() const {
  return path_remain_;
}
inline double SimpleMPCDebug::path_remain() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.path_remain)
  return _internal_path_remain();
}
inline void SimpleMPCDebug::_internal_set_path_remain(double value) {
  _has_bits_[1] |= 0x04000000u;
  path_remain_ = value;
}
inline void SimpleMPCDebug::set_path_remain(double value) {
  _internal_set_path_remain(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.path_remain)
}

// optional double acceleration_lookup_offset = 63;
inline bool SimpleMPCDebug::_internal_has_acceleration_lookup_offset() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_lookup_offset() const {
  return _internal_has_acceleration_lookup_offset();
}
inline void SimpleMPCDebug::clear_acceleration_lookup_offset() {
  acceleration_lookup_offset_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline double SimpleMPCDebug::_internal_acceleration_lookup_offset() const {
  return acceleration_lookup_offset_;
}
inline double SimpleMPCDebug::acceleration_lookup_offset() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_lookup_offset)
  return _internal_acceleration_lookup_offset();
}
inline void SimpleMPCDebug::_internal_set_acceleration_lookup_offset(double value) {
  _has_bits_[1] |= 0x08000000u;
  acceleration_lookup_offset_ = value;
}
inline void SimpleMPCDebug::set_acceleration_lookup_offset(double value) {
  _internal_set_acceleration_lookup_offset(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_lookup_offset)
}

// optional double acceleration_vrf = 64;
inline bool SimpleMPCDebug::_internal_has_acceleration_vrf() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool SimpleMPCDebug::has_acceleration_vrf() const {
  return _internal_has_acceleration_vrf();
}
inline void SimpleMPCDebug::clear_acceleration_vrf() {
  acceleration_vrf_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline double SimpleMPCDebug::_internal_acceleration_vrf() const {
  return acceleration_vrf_;
}
inline double SimpleMPCDebug::acceleration_vrf() const {
  // @@protoc_insertion_point(field_get:control.SimpleMPCDebug.acceleration_vrf)
  return _internal_acceleration_vrf();
}
inline void SimpleMPCDebug::_internal_set_acceleration_vrf(double value) {
  _has_bits_[1] |= 0x10000000u;
  acceleration_vrf_ = value;
}
inline void SimpleMPCDebug::set_acceleration_vrf(double value) {
  _internal_set_acceleration_vrf(value);
  // @@protoc_insertion_point(field_set:control.SimpleMPCDebug.acceleration_vrf)
}

// -------------------------------------------------------------------

// MracDebug

// optional int32 mrac_model_order = 1;
inline bool MracDebug::_internal_has_mrac_model_order() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MracDebug::has_mrac_model_order() const {
  return _internal_has_mrac_model_order();
}
inline void MracDebug::clear_mrac_model_order() {
  mrac_model_order_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MracDebug::_internal_mrac_model_order() const {
  return mrac_model_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MracDebug::mrac_model_order() const {
  // @@protoc_insertion_point(field_get:control.MracDebug.mrac_model_order)
  return _internal_mrac_model_order();
}
inline void MracDebug::_internal_set_mrac_model_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mrac_model_order_ = value;
}
inline void MracDebug::set_mrac_model_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrac_model_order(value);
  // @@protoc_insertion_point(field_set:control.MracDebug.mrac_model_order)
}

// repeated double mrac_reference_state = 2;
inline int MracDebug::_internal_mrac_reference_state_size() const {
  return mrac_reference_state_.size();
}
inline int MracDebug::mrac_reference_state_size() const {
  return _internal_mrac_reference_state_size();
}
inline void MracDebug::clear_mrac_reference_state() {
  mrac_reference_state_.Clear();
}
inline double MracDebug::_internal_mrac_reference_state(int index) const {
  return mrac_reference_state_.Get(index);
}
inline double MracDebug::mrac_reference_state(int index) const {
  // @@protoc_insertion_point(field_get:control.MracDebug.mrac_reference_state)
  return _internal_mrac_reference_state(index);
}
inline void MracDebug::set_mrac_reference_state(int index, double value) {
  mrac_reference_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracDebug.mrac_reference_state)
}
inline void MracDebug::_internal_add_mrac_reference_state(double value) {
  mrac_reference_state_.Add(value);
}
inline void MracDebug::add_mrac_reference_state(double value) {
  _internal_add_mrac_reference_state(value);
  // @@protoc_insertion_point(field_add:control.MracDebug.mrac_reference_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracDebug::_internal_mrac_reference_state() const {
  return mrac_reference_state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracDebug::mrac_reference_state() const {
  // @@protoc_insertion_point(field_list:control.MracDebug.mrac_reference_state)
  return _internal_mrac_reference_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracDebug::_internal_mutable_mrac_reference_state() {
  return &mrac_reference_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracDebug::mutable_mrac_reference_state() {
  // @@protoc_insertion_point(field_mutable_list:control.MracDebug.mrac_reference_state)
  return _internal_mutable_mrac_reference_state();
}

// repeated double mrac_state_error = 3;
inline int MracDebug::_internal_mrac_state_error_size() const {
  return mrac_state_error_.size();
}
inline int MracDebug::mrac_state_error_size() const {
  return _internal_mrac_state_error_size();
}
inline void MracDebug::clear_mrac_state_error() {
  mrac_state_error_.Clear();
}
inline double MracDebug::_internal_mrac_state_error(int index) const {
  return mrac_state_error_.Get(index);
}
inline double MracDebug::mrac_state_error(int index) const {
  // @@protoc_insertion_point(field_get:control.MracDebug.mrac_state_error)
  return _internal_mrac_state_error(index);
}
inline void MracDebug::set_mrac_state_error(int index, double value) {
  mrac_state_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracDebug.mrac_state_error)
}
inline void MracDebug::_internal_add_mrac_state_error(double value) {
  mrac_state_error_.Add(value);
}
inline void MracDebug::add_mrac_state_error(double value) {
  _internal_add_mrac_state_error(value);
  // @@protoc_insertion_point(field_add:control.MracDebug.mrac_state_error)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracDebug::_internal_mrac_state_error() const {
  return mrac_state_error_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracDebug::mrac_state_error() const {
  // @@protoc_insertion_point(field_list:control.MracDebug.mrac_state_error)
  return _internal_mrac_state_error();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracDebug::_internal_mutable_mrac_state_error() {
  return &mrac_state_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracDebug::mutable_mrac_state_error() {
  // @@protoc_insertion_point(field_mutable_list:control.MracDebug.mrac_state_error)
  return _internal_mutable_mrac_state_error();
}

// optional .control.MracAdaptiveGain mrac_adaptive_gain = 4;
inline bool MracDebug::_internal_has_mrac_adaptive_gain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mrac_adaptive_gain_ != nullptr);
  return value;
}
inline bool MracDebug::has_mrac_adaptive_gain() const {
  return _internal_has_mrac_adaptive_gain();
}
inline void MracDebug::clear_mrac_adaptive_gain() {
  if (mrac_adaptive_gain_ != nullptr) mrac_adaptive_gain_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::MracAdaptiveGain& MracDebug::_internal_mrac_adaptive_gain() const {
  const ::control::MracAdaptiveGain* p = mrac_adaptive_gain_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::MracAdaptiveGain*>(
      &::control::_MracAdaptiveGain_default_instance_);
}
inline const ::control::MracAdaptiveGain& MracDebug::mrac_adaptive_gain() const {
  // @@protoc_insertion_point(field_get:control.MracDebug.mrac_adaptive_gain)
  return _internal_mrac_adaptive_gain();
}
inline void MracDebug::unsafe_arena_set_allocated_mrac_adaptive_gain(
    ::control::MracAdaptiveGain* mrac_adaptive_gain) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mrac_adaptive_gain_);
  }
  mrac_adaptive_gain_ = mrac_adaptive_gain;
  if (mrac_adaptive_gain) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.MracDebug.mrac_adaptive_gain)
}
inline ::control::MracAdaptiveGain* MracDebug::release_mrac_adaptive_gain() {
  auto temp = unsafe_arena_release_mrac_adaptive_gain();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::MracAdaptiveGain* MracDebug::unsafe_arena_release_mrac_adaptive_gain() {
  // @@protoc_insertion_point(field_release:control.MracDebug.mrac_adaptive_gain)
  _has_bits_[0] &= ~0x00000001u;
  ::control::MracAdaptiveGain* temp = mrac_adaptive_gain_;
  mrac_adaptive_gain_ = nullptr;
  return temp;
}
inline ::control::MracAdaptiveGain* MracDebug::_internal_mutable_mrac_adaptive_gain() {
  _has_bits_[0] |= 0x00000001u;
  if (mrac_adaptive_gain_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::MracAdaptiveGain>(GetArena());
    mrac_adaptive_gain_ = p;
  }
  return mrac_adaptive_gain_;
}
inline ::control::MracAdaptiveGain* MracDebug::mutable_mrac_adaptive_gain() {
  // @@protoc_insertion_point(field_mutable:control.MracDebug.mrac_adaptive_gain)
  return _internal_mutable_mrac_adaptive_gain();
}
inline void MracDebug::set_allocated_mrac_adaptive_gain(::control::MracAdaptiveGain* mrac_adaptive_gain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mrac_adaptive_gain_;
  }
  if (mrac_adaptive_gain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mrac_adaptive_gain);
    if (message_arena != submessage_arena) {
      mrac_adaptive_gain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mrac_adaptive_gain, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mrac_adaptive_gain_ = mrac_adaptive_gain;
  // @@protoc_insertion_point(field_set_allocated:control.MracDebug.mrac_adaptive_gain)
}

// optional int32 mrac_reference_saturation_status = 5;
inline bool MracDebug::_internal_has_mrac_reference_saturation_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MracDebug::has_mrac_reference_saturation_status() const {
  return _internal_has_mrac_reference_saturation_status();
}
inline void MracDebug::clear_mrac_reference_saturation_status() {
  mrac_reference_saturation_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MracDebug::_internal_mrac_reference_saturation_status() const {
  return mrac_reference_saturation_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MracDebug::mrac_reference_saturation_status() const {
  // @@protoc_insertion_point(field_get:control.MracDebug.mrac_reference_saturation_status)
  return _internal_mrac_reference_saturation_status();
}
inline void MracDebug::_internal_set_mrac_reference_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mrac_reference_saturation_status_ = value;
}
inline void MracDebug::set_mrac_reference_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrac_reference_saturation_status(value);
  // @@protoc_insertion_point(field_set:control.MracDebug.mrac_reference_saturation_status)
}

// optional int32 mrac_control_saturation_status = 6;
inline bool MracDebug::_internal_has_mrac_control_saturation_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MracDebug::has_mrac_control_saturation_status() const {
  return _internal_has_mrac_control_saturation_status();
}
inline void MracDebug::clear_mrac_control_saturation_status() {
  mrac_control_saturation_status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MracDebug::_internal_mrac_control_saturation_status() const {
  return mrac_control_saturation_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MracDebug::mrac_control_saturation_status() const {
  // @@protoc_insertion_point(field_get:control.MracDebug.mrac_control_saturation_status)
  return _internal_mrac_control_saturation_status();
}
inline void MracDebug::_internal_set_mrac_control_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mrac_control_saturation_status_ = value;
}
inline void MracDebug::set_mrac_control_saturation_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrac_control_saturation_status(value);
  // @@protoc_insertion_point(field_set:control.MracDebug.mrac_control_saturation_status)
}

// -------------------------------------------------------------------

// MracAdaptiveGain

// repeated double state_adaptive_gain = 1;
inline int MracAdaptiveGain::_internal_state_adaptive_gain_size() const {
  return state_adaptive_gain_.size();
}
inline int MracAdaptiveGain::state_adaptive_gain_size() const {
  return _internal_state_adaptive_gain_size();
}
inline void MracAdaptiveGain::clear_state_adaptive_gain() {
  state_adaptive_gain_.Clear();
}
inline double MracAdaptiveGain::_internal_state_adaptive_gain(int index) const {
  return state_adaptive_gain_.Get(index);
}
inline double MracAdaptiveGain::state_adaptive_gain(int index) const {
  // @@protoc_insertion_point(field_get:control.MracAdaptiveGain.state_adaptive_gain)
  return _internal_state_adaptive_gain(index);
}
inline void MracAdaptiveGain::set_state_adaptive_gain(int index, double value) {
  state_adaptive_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracAdaptiveGain.state_adaptive_gain)
}
inline void MracAdaptiveGain::_internal_add_state_adaptive_gain(double value) {
  state_adaptive_gain_.Add(value);
}
inline void MracAdaptiveGain::add_state_adaptive_gain(double value) {
  _internal_add_state_adaptive_gain(value);
  // @@protoc_insertion_point(field_add:control.MracAdaptiveGain.state_adaptive_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracAdaptiveGain::_internal_state_adaptive_gain() const {
  return state_adaptive_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracAdaptiveGain::state_adaptive_gain() const {
  // @@protoc_insertion_point(field_list:control.MracAdaptiveGain.state_adaptive_gain)
  return _internal_state_adaptive_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracAdaptiveGain::_internal_mutable_state_adaptive_gain() {
  return &state_adaptive_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracAdaptiveGain::mutable_state_adaptive_gain() {
  // @@protoc_insertion_point(field_mutable_list:control.MracAdaptiveGain.state_adaptive_gain)
  return _internal_mutable_state_adaptive_gain();
}

// repeated double input_adaptive_gain = 2;
inline int MracAdaptiveGain::_internal_input_adaptive_gain_size() const {
  return input_adaptive_gain_.size();
}
inline int MracAdaptiveGain::input_adaptive_gain_size() const {
  return _internal_input_adaptive_gain_size();
}
inline void MracAdaptiveGain::clear_input_adaptive_gain() {
  input_adaptive_gain_.Clear();
}
inline double MracAdaptiveGain::_internal_input_adaptive_gain(int index) const {
  return input_adaptive_gain_.Get(index);
}
inline double MracAdaptiveGain::input_adaptive_gain(int index) const {
  // @@protoc_insertion_point(field_get:control.MracAdaptiveGain.input_adaptive_gain)
  return _internal_input_adaptive_gain(index);
}
inline void MracAdaptiveGain::set_input_adaptive_gain(int index, double value) {
  input_adaptive_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracAdaptiveGain.input_adaptive_gain)
}
inline void MracAdaptiveGain::_internal_add_input_adaptive_gain(double value) {
  input_adaptive_gain_.Add(value);
}
inline void MracAdaptiveGain::add_input_adaptive_gain(double value) {
  _internal_add_input_adaptive_gain(value);
  // @@protoc_insertion_point(field_add:control.MracAdaptiveGain.input_adaptive_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracAdaptiveGain::_internal_input_adaptive_gain() const {
  return input_adaptive_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracAdaptiveGain::input_adaptive_gain() const {
  // @@protoc_insertion_point(field_list:control.MracAdaptiveGain.input_adaptive_gain)
  return _internal_input_adaptive_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracAdaptiveGain::_internal_mutable_input_adaptive_gain() {
  return &input_adaptive_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracAdaptiveGain::mutable_input_adaptive_gain() {
  // @@protoc_insertion_point(field_mutable_list:control.MracAdaptiveGain.input_adaptive_gain)
  return _internal_mutable_input_adaptive_gain();
}

// repeated double nonlinear_adaptive_gain = 3;
inline int MracAdaptiveGain::_internal_nonlinear_adaptive_gain_size() const {
  return nonlinear_adaptive_gain_.size();
}
inline int MracAdaptiveGain::nonlinear_adaptive_gain_size() const {
  return _internal_nonlinear_adaptive_gain_size();
}
inline void MracAdaptiveGain::clear_nonlinear_adaptive_gain() {
  nonlinear_adaptive_gain_.Clear();
}
inline double MracAdaptiveGain::_internal_nonlinear_adaptive_gain(int index) const {
  return nonlinear_adaptive_gain_.Get(index);
}
inline double MracAdaptiveGain::nonlinear_adaptive_gain(int index) const {
  // @@protoc_insertion_point(field_get:control.MracAdaptiveGain.nonlinear_adaptive_gain)
  return _internal_nonlinear_adaptive_gain(index);
}
inline void MracAdaptiveGain::set_nonlinear_adaptive_gain(int index, double value) {
  nonlinear_adaptive_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:control.MracAdaptiveGain.nonlinear_adaptive_gain)
}
inline void MracAdaptiveGain::_internal_add_nonlinear_adaptive_gain(double value) {
  nonlinear_adaptive_gain_.Add(value);
}
inline void MracAdaptiveGain::add_nonlinear_adaptive_gain(double value) {
  _internal_add_nonlinear_adaptive_gain(value);
  // @@protoc_insertion_point(field_add:control.MracAdaptiveGain.nonlinear_adaptive_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracAdaptiveGain::_internal_nonlinear_adaptive_gain() const {
  return nonlinear_adaptive_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracAdaptiveGain::nonlinear_adaptive_gain() const {
  // @@protoc_insertion_point(field_list:control.MracAdaptiveGain.nonlinear_adaptive_gain)
  return _internal_nonlinear_adaptive_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracAdaptiveGain::_internal_mutable_nonlinear_adaptive_gain() {
  return &nonlinear_adaptive_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracAdaptiveGain::mutable_nonlinear_adaptive_gain() {
  // @@protoc_insertion_point(field_mutable_list:control.MracAdaptiveGain.nonlinear_adaptive_gain)
  return _internal_mutable_nonlinear_adaptive_gain();
}

// -------------------------------------------------------------------

// Debug

// optional .control.SimpleLongitudinalDebug simple_lon_debug = 1;
inline bool Debug::_internal_has_simple_lon_debug() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || simple_lon_debug_ != nullptr);
  return value;
}
inline bool Debug::has_simple_lon_debug() const {
  return _internal_has_simple_lon_debug();
}
inline void Debug::clear_simple_lon_debug() {
  if (simple_lon_debug_ != nullptr) simple_lon_debug_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::control::SimpleLongitudinalDebug& Debug::_internal_simple_lon_debug() const {
  const ::control::SimpleLongitudinalDebug* p = simple_lon_debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::SimpleLongitudinalDebug*>(
      &::control::_SimpleLongitudinalDebug_default_instance_);
}
inline const ::control::SimpleLongitudinalDebug& Debug::simple_lon_debug() const {
  // @@protoc_insertion_point(field_get:control.Debug.simple_lon_debug)
  return _internal_simple_lon_debug();
}
inline void Debug::unsafe_arena_set_allocated_simple_lon_debug(
    ::control::SimpleLongitudinalDebug* simple_lon_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simple_lon_debug_);
  }
  simple_lon_debug_ = simple_lon_debug;
  if (simple_lon_debug) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Debug.simple_lon_debug)
}
inline ::control::SimpleLongitudinalDebug* Debug::release_simple_lon_debug() {
  auto temp = unsafe_arena_release_simple_lon_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::SimpleLongitudinalDebug* Debug::unsafe_arena_release_simple_lon_debug() {
  // @@protoc_insertion_point(field_release:control.Debug.simple_lon_debug)
  _has_bits_[0] &= ~0x00000001u;
  ::control::SimpleLongitudinalDebug* temp = simple_lon_debug_;
  simple_lon_debug_ = nullptr;
  return temp;
}
inline ::control::SimpleLongitudinalDebug* Debug::_internal_mutable_simple_lon_debug() {
  _has_bits_[0] |= 0x00000001u;
  if (simple_lon_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::SimpleLongitudinalDebug>(GetArena());
    simple_lon_debug_ = p;
  }
  return simple_lon_debug_;
}
inline ::control::SimpleLongitudinalDebug* Debug::mutable_simple_lon_debug() {
  // @@protoc_insertion_point(field_mutable:control.Debug.simple_lon_debug)
  return _internal_mutable_simple_lon_debug();
}
inline void Debug::set_allocated_simple_lon_debug(::control::SimpleLongitudinalDebug* simple_lon_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete simple_lon_debug_;
  }
  if (simple_lon_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(simple_lon_debug);
    if (message_arena != submessage_arena) {
      simple_lon_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_lon_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  simple_lon_debug_ = simple_lon_debug;
  // @@protoc_insertion_point(field_set_allocated:control.Debug.simple_lon_debug)
}

// optional .control.SimpleLateralDebug simple_lat_debug = 2;
inline bool Debug::_internal_has_simple_lat_debug() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || simple_lat_debug_ != nullptr);
  return value;
}
inline bool Debug::has_simple_lat_debug() const {
  return _internal_has_simple_lat_debug();
}
inline void Debug::clear_simple_lat_debug() {
  if (simple_lat_debug_ != nullptr) simple_lat_debug_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::control::SimpleLateralDebug& Debug::_internal_simple_lat_debug() const {
  const ::control::SimpleLateralDebug* p = simple_lat_debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::SimpleLateralDebug*>(
      &::control::_SimpleLateralDebug_default_instance_);
}
inline const ::control::SimpleLateralDebug& Debug::simple_lat_debug() const {
  // @@protoc_insertion_point(field_get:control.Debug.simple_lat_debug)
  return _internal_simple_lat_debug();
}
inline void Debug::unsafe_arena_set_allocated_simple_lat_debug(
    ::control::SimpleLateralDebug* simple_lat_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simple_lat_debug_);
  }
  simple_lat_debug_ = simple_lat_debug;
  if (simple_lat_debug) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Debug.simple_lat_debug)
}
inline ::control::SimpleLateralDebug* Debug::release_simple_lat_debug() {
  auto temp = unsafe_arena_release_simple_lat_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::SimpleLateralDebug* Debug::unsafe_arena_release_simple_lat_debug() {
  // @@protoc_insertion_point(field_release:control.Debug.simple_lat_debug)
  _has_bits_[0] &= ~0x00000002u;
  ::control::SimpleLateralDebug* temp = simple_lat_debug_;
  simple_lat_debug_ = nullptr;
  return temp;
}
inline ::control::SimpleLateralDebug* Debug::_internal_mutable_simple_lat_debug() {
  _has_bits_[0] |= 0x00000002u;
  if (simple_lat_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::SimpleLateralDebug>(GetArena());
    simple_lat_debug_ = p;
  }
  return simple_lat_debug_;
}
inline ::control::SimpleLateralDebug* Debug::mutable_simple_lat_debug() {
  // @@protoc_insertion_point(field_mutable:control.Debug.simple_lat_debug)
  return _internal_mutable_simple_lat_debug();
}
inline void Debug::set_allocated_simple_lat_debug(::control::SimpleLateralDebug* simple_lat_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete simple_lat_debug_;
  }
  if (simple_lat_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(simple_lat_debug);
    if (message_arena != submessage_arena) {
      simple_lat_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_lat_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  simple_lat_debug_ = simple_lat_debug;
  // @@protoc_insertion_point(field_set_allocated:control.Debug.simple_lat_debug)
}

// optional .control.InputDebug input_debug = 3;
inline bool Debug::_internal_has_input_debug() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || input_debug_ != nullptr);
  return value;
}
inline bool Debug::has_input_debug() const {
  return _internal_has_input_debug();
}
inline const ::control::InputDebug& Debug::_internal_input_debug() const {
  const ::control::InputDebug* p = input_debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::InputDebug*>(
      &::control::_InputDebug_default_instance_);
}
inline const ::control::InputDebug& Debug::input_debug() const {
  // @@protoc_insertion_point(field_get:control.Debug.input_debug)
  return _internal_input_debug();
}
inline void Debug::unsafe_arena_set_allocated_input_debug(
    ::control::InputDebug* input_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_debug_);
  }
  input_debug_ = input_debug;
  if (input_debug) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Debug.input_debug)
}
inline ::control::InputDebug* Debug::release_input_debug() {
  auto temp = unsafe_arena_release_input_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::InputDebug* Debug::unsafe_arena_release_input_debug() {
  // @@protoc_insertion_point(field_release:control.Debug.input_debug)
  _has_bits_[0] &= ~0x00000004u;
  ::control::InputDebug* temp = input_debug_;
  input_debug_ = nullptr;
  return temp;
}
inline ::control::InputDebug* Debug::_internal_mutable_input_debug() {
  _has_bits_[0] |= 0x00000004u;
  if (input_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::InputDebug>(GetArena());
    input_debug_ = p;
  }
  return input_debug_;
}
inline ::control::InputDebug* Debug::mutable_input_debug() {
  // @@protoc_insertion_point(field_mutable:control.Debug.input_debug)
  return _internal_mutable_input_debug();
}
inline void Debug::set_allocated_input_debug(::control::InputDebug* input_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_debug_);
  }
  if (input_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_debug)->GetArena();
    if (message_arena != submessage_arena) {
      input_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_debug_ = input_debug;
  // @@protoc_insertion_point(field_set_allocated:control.Debug.input_debug)
}

// optional .control.SimpleMPCDebug simple_mpc_debug = 4;
inline bool Debug::_internal_has_simple_mpc_debug() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || simple_mpc_debug_ != nullptr);
  return value;
}
inline bool Debug::has_simple_mpc_debug() const {
  return _internal_has_simple_mpc_debug();
}
inline void Debug::clear_simple_mpc_debug() {
  if (simple_mpc_debug_ != nullptr) simple_mpc_debug_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::control::SimpleMPCDebug& Debug::_internal_simple_mpc_debug() const {
  const ::control::SimpleMPCDebug* p = simple_mpc_debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::SimpleMPCDebug*>(
      &::control::_SimpleMPCDebug_default_instance_);
}
inline const ::control::SimpleMPCDebug& Debug::simple_mpc_debug() const {
  // @@protoc_insertion_point(field_get:control.Debug.simple_mpc_debug)
  return _internal_simple_mpc_debug();
}
inline void Debug::unsafe_arena_set_allocated_simple_mpc_debug(
    ::control::SimpleMPCDebug* simple_mpc_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simple_mpc_debug_);
  }
  simple_mpc_debug_ = simple_mpc_debug;
  if (simple_mpc_debug) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Debug.simple_mpc_debug)
}
inline ::control::SimpleMPCDebug* Debug::release_simple_mpc_debug() {
  auto temp = unsafe_arena_release_simple_mpc_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::SimpleMPCDebug* Debug::unsafe_arena_release_simple_mpc_debug() {
  // @@protoc_insertion_point(field_release:control.Debug.simple_mpc_debug)
  _has_bits_[0] &= ~0x00000008u;
  ::control::SimpleMPCDebug* temp = simple_mpc_debug_;
  simple_mpc_debug_ = nullptr;
  return temp;
}
inline ::control::SimpleMPCDebug* Debug::_internal_mutable_simple_mpc_debug() {
  _has_bits_[0] |= 0x00000008u;
  if (simple_mpc_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::SimpleMPCDebug>(GetArena());
    simple_mpc_debug_ = p;
  }
  return simple_mpc_debug_;
}
inline ::control::SimpleMPCDebug* Debug::mutable_simple_mpc_debug() {
  // @@protoc_insertion_point(field_mutable:control.Debug.simple_mpc_debug)
  return _internal_mutable_simple_mpc_debug();
}
inline void Debug::set_allocated_simple_mpc_debug(::control::SimpleMPCDebug* simple_mpc_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete simple_mpc_debug_;
  }
  if (simple_mpc_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(simple_mpc_debug);
    if (message_arena != submessage_arena) {
      simple_mpc_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_mpc_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  simple_mpc_debug_ = simple_mpc_debug;
  // @@protoc_insertion_point(field_set_allocated:control.Debug.simple_mpc_debug)
}

// optional .control.LodmcDebug lodmc_debug = 5;
inline bool Debug::_internal_has_lodmc_debug() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || lodmc_debug_ != nullptr);
  return value;
}
inline bool Debug::has_lodmc_debug() const {
  return _internal_has_lodmc_debug();
}
inline void Debug::clear_lodmc_debug() {
  if (lodmc_debug_ != nullptr) lodmc_debug_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::control::LodmcDebug& Debug::_internal_lodmc_debug() const {
  const ::control::LodmcDebug* p = lodmc_debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::LodmcDebug*>(
      &::control::_LodmcDebug_default_instance_);
}
inline const ::control::LodmcDebug& Debug::lodmc_debug() const {
  // @@protoc_insertion_point(field_get:control.Debug.lodmc_debug)
  return _internal_lodmc_debug();
}
inline void Debug::unsafe_arena_set_allocated_lodmc_debug(
    ::control::LodmcDebug* lodmc_debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lodmc_debug_);
  }
  lodmc_debug_ = lodmc_debug;
  if (lodmc_debug) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.Debug.lodmc_debug)
}
inline ::control::LodmcDebug* Debug::release_lodmc_debug() {
  auto temp = unsafe_arena_release_lodmc_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::LodmcDebug* Debug::unsafe_arena_release_lodmc_debug() {
  // @@protoc_insertion_point(field_release:control.Debug.lodmc_debug)
  _has_bits_[0] &= ~0x00000010u;
  ::control::LodmcDebug* temp = lodmc_debug_;
  lodmc_debug_ = nullptr;
  return temp;
}
inline ::control::LodmcDebug* Debug::_internal_mutable_lodmc_debug() {
  _has_bits_[0] |= 0x00000010u;
  if (lodmc_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::LodmcDebug>(GetArena());
    lodmc_debug_ = p;
  }
  return lodmc_debug_;
}
inline ::control::LodmcDebug* Debug::mutable_lodmc_debug() {
  // @@protoc_insertion_point(field_mutable:control.Debug.lodmc_debug)
  return _internal_mutable_lodmc_debug();
}
inline void Debug::set_allocated_lodmc_debug(::control::LodmcDebug* lodmc_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lodmc_debug_;
  }
  if (lodmc_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lodmc_debug);
    if (message_arena != submessage_arena) {
      lodmc_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lodmc_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lodmc_debug_ = lodmc_debug;
  // @@protoc_insertion_point(field_set_allocated:control.Debug.lodmc_debug)
}

// -------------------------------------------------------------------

// LodmcDebug

// optional double torq_command = 1;
inline bool LodmcDebug::_internal_has_torq_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LodmcDebug::has_torq_command() const {
  return _internal_has_torq_command();
}
inline void LodmcDebug::clear_torq_command() {
  torq_command_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LodmcDebug::_internal_torq_command() const {
  return torq_command_;
}
inline double LodmcDebug::torq_command() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.torq_command)
  return _internal_torq_command();
}
inline void LodmcDebug::_internal_set_torq_command(double value) {
  _has_bits_[0] |= 0x00000001u;
  torq_command_ = value;
}
inline void LodmcDebug::set_torq_command(double value) {
  _internal_set_torq_command(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.torq_command)
}

// optional double torq_feed_forward = 2;
inline bool LodmcDebug::_internal_has_torq_feed_forward() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LodmcDebug::has_torq_feed_forward() const {
  return _internal_has_torq_feed_forward();
}
inline void LodmcDebug::clear_torq_feed_forward() {
  torq_feed_forward_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LodmcDebug::_internal_torq_feed_forward() const {
  return torq_feed_forward_;
}
inline double LodmcDebug::torq_feed_forward() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.torq_feed_forward)
  return _internal_torq_feed_forward();
}
inline void LodmcDebug::_internal_set_torq_feed_forward(double value) {
  _has_bits_[0] |= 0x00000002u;
  torq_feed_forward_ = value;
}
inline void LodmcDebug::set_torq_feed_forward(double value) {
  _internal_set_torq_feed_forward(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.torq_feed_forward)
}

// optional double torq_feed_back = 3;
inline bool LodmcDebug::_internal_has_torq_feed_back() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LodmcDebug::has_torq_feed_back() const {
  return _internal_has_torq_feed_back();
}
inline void LodmcDebug::clear_torq_feed_back() {
  torq_feed_back_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LodmcDebug::_internal_torq_feed_back() const {
  return torq_feed_back_;
}
inline double LodmcDebug::torq_feed_back() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.torq_feed_back)
  return _internal_torq_feed_back();
}
inline void LodmcDebug::_internal_set_torq_feed_back(double value) {
  _has_bits_[0] |= 0x00000004u;
  torq_feed_back_ = value;
}
inline void LodmcDebug::set_torq_feed_back(double value) {
  _internal_set_torq_feed_back(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.torq_feed_back)
}

// optional double dmc_f_roll = 4;
inline bool LodmcDebug::_internal_has_dmc_f_roll() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LodmcDebug::has_dmc_f_roll() const {
  return _internal_has_dmc_f_roll();
}
inline void LodmcDebug::clear_dmc_f_roll() {
  dmc_f_roll_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LodmcDebug::_internal_dmc_f_roll() const {
  return dmc_f_roll_;
}
inline double LodmcDebug::dmc_f_roll() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.dmc_f_roll)
  return _internal_dmc_f_roll();
}
inline void LodmcDebug::_internal_set_dmc_f_roll(double value) {
  _has_bits_[0] |= 0x00000008u;
  dmc_f_roll_ = value;
}
inline void LodmcDebug::set_dmc_f_roll(double value) {
  _internal_set_dmc_f_roll(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.dmc_f_roll)
}

// optional double dmc_f_air = 5;
inline bool LodmcDebug::_internal_has_dmc_f_air() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LodmcDebug::has_dmc_f_air() const {
  return _internal_has_dmc_f_air();
}
inline void LodmcDebug::clear_dmc_f_air() {
  dmc_f_air_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double LodmcDebug::_internal_dmc_f_air() const {
  return dmc_f_air_;
}
inline double LodmcDebug::dmc_f_air() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.dmc_f_air)
  return _internal_dmc_f_air();
}
inline void LodmcDebug::_internal_set_dmc_f_air(double value) {
  _has_bits_[0] |= 0x00000010u;
  dmc_f_air_ = value;
}
inline void LodmcDebug::set_dmc_f_air(double value) {
  _internal_set_dmc_f_air(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.dmc_f_air)
}

// optional double dmc_f_slope = 6;
inline bool LodmcDebug::_internal_has_dmc_f_slope() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LodmcDebug::has_dmc_f_slope() const {
  return _internal_has_dmc_f_slope();
}
inline void LodmcDebug::clear_dmc_f_slope() {
  dmc_f_slope_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LodmcDebug::_internal_dmc_f_slope() const {
  return dmc_f_slope_;
}
inline double LodmcDebug::dmc_f_slope() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.dmc_f_slope)
  return _internal_dmc_f_slope();
}
inline void LodmcDebug::_internal_set_dmc_f_slope(double value) {
  _has_bits_[0] |= 0x00000020u;
  dmc_f_slope_ = value;
}
inline void LodmcDebug::set_dmc_f_slope(double value) {
  _internal_set_dmc_f_slope(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.dmc_f_slope)
}

// optional double dmc_f_acc = 7;
inline bool LodmcDebug::_internal_has_dmc_f_acc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LodmcDebug::has_dmc_f_acc() const {
  return _internal_has_dmc_f_acc();
}
inline void LodmcDebug::clear_dmc_f_acc() {
  dmc_f_acc_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double LodmcDebug::_internal_dmc_f_acc() const {
  return dmc_f_acc_;
}
inline double LodmcDebug::dmc_f_acc() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.dmc_f_acc)
  return _internal_dmc_f_acc();
}
inline void LodmcDebug::_internal_set_dmc_f_acc(double value) {
  _has_bits_[0] |= 0x00000040u;
  dmc_f_acc_ = value;
}
inline void LodmcDebug::set_dmc_f_acc(double value) {
  _internal_set_dmc_f_acc(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.dmc_f_acc)
}

// optional double acc_error = 8;
inline bool LodmcDebug::_internal_has_acc_error() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LodmcDebug::has_acc_error() const {
  return _internal_has_acc_error();
}
inline void LodmcDebug::clear_acc_error() {
  acc_error_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double LodmcDebug::_internal_acc_error() const {
  return acc_error_;
}
inline double LodmcDebug::acc_error() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.acc_error)
  return _internal_acc_error();
}
inline void LodmcDebug::_internal_set_acc_error(double value) {
  _has_bits_[0] |= 0x00000080u;
  acc_error_ = value;
}
inline void LodmcDebug::set_acc_error(double value) {
  _internal_set_acc_error(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.acc_error)
}

// optional double mass = 9;
inline bool LodmcDebug::_internal_has_mass() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LodmcDebug::has_mass() const {
  return _internal_has_mass();
}
inline void LodmcDebug::clear_mass() {
  mass_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double LodmcDebug::_internal_mass() const {
  return mass_;
}
inline double LodmcDebug::mass() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.mass)
  return _internal_mass();
}
inline void LodmcDebug::_internal_set_mass(double value) {
  _has_bits_[0] |= 0x00000100u;
  mass_ = value;
}
inline void LodmcDebug::set_mass(double value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.mass)
}

// optional double target_acc = 10;
inline bool LodmcDebug::_internal_has_target_acc() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LodmcDebug::has_target_acc() const {
  return _internal_has_target_acc();
}
inline void LodmcDebug::clear_target_acc() {
  target_acc_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double LodmcDebug::_internal_target_acc() const {
  return target_acc_;
}
inline double LodmcDebug::target_acc() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.target_acc)
  return _internal_target_acc();
}
inline void LodmcDebug::_internal_set_target_acc(double value) {
  _has_bits_[0] |= 0x00000200u;
  target_acc_ = value;
}
inline void LodmcDebug::set_target_acc(double value) {
  _internal_set_target_acc(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.target_acc)
}

// optional double vehilce_acc = 11;
inline bool LodmcDebug::_internal_has_vehilce_acc() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LodmcDebug::has_vehilce_acc() const {
  return _internal_has_vehilce_acc();
}
inline void LodmcDebug::clear_vehilce_acc() {
  vehilce_acc_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double LodmcDebug::_internal_vehilce_acc() const {
  return vehilce_acc_;
}
inline double LodmcDebug::vehilce_acc() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.vehilce_acc)
  return _internal_vehilce_acc();
}
inline void LodmcDebug::_internal_set_vehilce_acc(double value) {
  _has_bits_[0] |= 0x00000400u;
  vehilce_acc_ = value;
}
inline void LodmcDebug::set_vehilce_acc(double value) {
  _internal_set_vehilce_acc(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.vehilce_acc)
}

// optional double vehspeed = 12;
inline bool LodmcDebug::_internal_has_vehspeed() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LodmcDebug::has_vehspeed() const {
  return _internal_has_vehspeed();
}
inline void LodmcDebug::clear_vehspeed() {
  vehspeed_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double LodmcDebug::_internal_vehspeed() const {
  return vehspeed_;
}
inline double LodmcDebug::vehspeed() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.vehspeed)
  return _internal_vehspeed();
}
inline void LodmcDebug::_internal_set_vehspeed(double value) {
  _has_bits_[0] |= 0x00000800u;
  vehspeed_ = value;
}
inline void LodmcDebug::set_vehspeed(double value) {
  _internal_set_vehspeed(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.vehspeed)
}

// optional double roadslope = 13;
inline bool LodmcDebug::_internal_has_roadslope() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LodmcDebug::has_roadslope() const {
  return _internal_has_roadslope();
}
inline void LodmcDebug::clear_roadslope() {
  roadslope_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double LodmcDebug::_internal_roadslope() const {
  return roadslope_;
}
inline double LodmcDebug::roadslope() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.roadslope)
  return _internal_roadslope();
}
inline void LodmcDebug::_internal_set_roadslope(double value) {
  _has_bits_[0] |= 0x00001000u;
  roadslope_ = value;
}
inline void LodmcDebug::set_roadslope(double value) {
  _internal_set_roadslope(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.roadslope)
}

// optional double target_acc_filter = 14;
inline bool LodmcDebug::_internal_has_target_acc_filter() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LodmcDebug::has_target_acc_filter() const {
  return _internal_has_target_acc_filter();
}
inline void LodmcDebug::clear_target_acc_filter() {
  target_acc_filter_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double LodmcDebug::_internal_target_acc_filter() const {
  return target_acc_filter_;
}
inline double LodmcDebug::target_acc_filter() const {
  // @@protoc_insertion_point(field_get:control.LodmcDebug.target_acc_filter)
  return _internal_target_acc_filter();
}
inline void LodmcDebug::_internal_set_target_acc_filter(double value) {
  _has_bits_[0] |= 0x00002000u;
  target_acc_filter_ = value;
}
inline void LodmcDebug::set_target_acc_filter(double value) {
  _internal_set_target_acc_filter(value);
  // @@protoc_insertion_point(field_set:control.LodmcDebug.target_acc_filter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::control::TurnSignal> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::control::TurnSignal>() {
  return ::control::TurnSignal_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2fcontrol_5fcmd_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs/input_debug.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2finput_5fdebug_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2finput_5fdebug_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs/basic_msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2finput_5fdebug_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fmsgs_2finput_5fdebug_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto;
namespace control {
class InputDebug;
class InputDebugDefaultTypeInternal;
extern InputDebugDefaultTypeInternal _InputDebug_default_instance_;
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> ::control::InputDebug* Arena::CreateMaybeMessage<::control::InputDebug>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace control {

// ===================================================================

class InputDebug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:control.InputDebug) */ {
 public:
  inline InputDebug() : InputDebug(nullptr) {};
  virtual ~InputDebug();

  InputDebug(const InputDebug& from);
  InputDebug(InputDebug&& from) noexcept
    : InputDebug() {
    *this = ::std::move(from);
  }

  inline InputDebug& operator=(const InputDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputDebug& operator=(InputDebug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputDebug* internal_default_instance() {
    return reinterpret_cast<const InputDebug*>(
               &_InputDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputDebug& a, InputDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(InputDebug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputDebug* New() const final {
    return CreateMaybeMessage<InputDebug>(nullptr);
  }

  InputDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputDebug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputDebug& from);
  void MergeFrom(const InputDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputDebug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "control.InputDebug";
  }
  protected:
  explicit InputDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto);
    return ::descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizationHeaderFieldNumber = 1,
    kCanbusHeaderFieldNumber = 2,
    kTrajectoryHeaderFieldNumber = 3,
    kLatestReplanTrajectoryHeaderFieldNumber = 4,
  };
  // optional .control.common.Header localization_header = 1;
  bool has_localization_header() const;
  private:
  bool _internal_has_localization_header() const;
  public:
  void clear_localization_header();
  const ::control::common::Header& localization_header() const;
  ::control::common::Header* release_localization_header();
  ::control::common::Header* mutable_localization_header();
  void set_allocated_localization_header(::control::common::Header* localization_header);
  private:
  const ::control::common::Header& _internal_localization_header() const;
  ::control::common::Header* _internal_mutable_localization_header();
  public:
  void unsafe_arena_set_allocated_localization_header(
      ::control::common::Header* localization_header);
  ::control::common::Header* unsafe_arena_release_localization_header();

  // optional .control.common.Header canbus_header = 2;
  bool has_canbus_header() const;
  private:
  bool _internal_has_canbus_header() const;
  public:
  void clear_canbus_header();
  const ::control::common::Header& canbus_header() const;
  ::control::common::Header* release_canbus_header();
  ::control::common::Header* mutable_canbus_header();
  void set_allocated_canbus_header(::control::common::Header* canbus_header);
  private:
  const ::control::common::Header& _internal_canbus_header() const;
  ::control::common::Header* _internal_mutable_canbus_header();
  public:
  void unsafe_arena_set_allocated_canbus_header(
      ::control::common::Header* canbus_header);
  ::control::common::Header* unsafe_arena_release_canbus_header();

  // optional .control.common.Header trajectory_header = 3;
  bool has_trajectory_header() const;
  private:
  bool _internal_has_trajectory_header() const;
  public:
  void clear_trajectory_header();
  const ::control::common::Header& trajectory_header() const;
  ::control::common::Header* release_trajectory_header();
  ::control::common::Header* mutable_trajectory_header();
  void set_allocated_trajectory_header(::control::common::Header* trajectory_header);
  private:
  const ::control::common::Header& _internal_trajectory_header() const;
  ::control::common::Header* _internal_mutable_trajectory_header();
  public:
  void unsafe_arena_set_allocated_trajectory_header(
      ::control::common::Header* trajectory_header);
  ::control::common::Header* unsafe_arena_release_trajectory_header();

  // optional .control.common.Header latest_replan_trajectory_header = 4;
  bool has_latest_replan_trajectory_header() const;
  private:
  bool _internal_has_latest_replan_trajectory_header() const;
  public:
  void clear_latest_replan_trajectory_header();
  const ::control::common::Header& latest_replan_trajectory_header() const;
  ::control::common::Header* release_latest_replan_trajectory_header();
  ::control::common::Header* mutable_latest_replan_trajectory_header();
  void set_allocated_latest_replan_trajectory_header(::control::common::Header* latest_replan_trajectory_header);
  private:
  const ::control::common::Header& _internal_latest_replan_trajectory_header() const;
  ::control::common::Header* _internal_mutable_latest_replan_trajectory_header();
  public:
  void unsafe_arena_set_allocated_latest_replan_trajectory_header(
      ::control::common::Header* latest_replan_trajectory_header);
  ::control::common::Header* unsafe_arena_release_latest_replan_trajectory_header();

  // @@protoc_insertion_point(class_scope:control.InputDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::control::common::Header* localization_header_;
  ::control::common::Header* canbus_header_;
  ::control::common::Header* trajectory_header_;
  ::control::common::Header* latest_replan_trajectory_header_;
  friend struct ::TableStruct_control_5fmsgs_2finput_5fdebug_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputDebug

// optional .control.common.Header localization_header = 1;
inline bool InputDebug::_internal_has_localization_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || localization_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_localization_header() const {
  return _internal_has_localization_header();
}
inline const ::control::common::Header& InputDebug::_internal_localization_header() const {
  const ::control::common::Header* p = localization_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& InputDebug::localization_header() const {
  // @@protoc_insertion_point(field_get:control.InputDebug.localization_header)
  return _internal_localization_header();
}
inline void InputDebug::unsafe_arena_set_allocated_localization_header(
    ::control::common::Header* localization_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_header_);
  }
  localization_header_ = localization_header;
  if (localization_header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.InputDebug.localization_header)
}
inline ::control::common::Header* InputDebug::release_localization_header() {
  auto temp = unsafe_arena_release_localization_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* InputDebug::unsafe_arena_release_localization_header() {
  // @@protoc_insertion_point(field_release:control.InputDebug.localization_header)
  _has_bits_[0] &= ~0x00000001u;
  ::control::common::Header* temp = localization_header_;
  localization_header_ = nullptr;
  return temp;
}
inline ::control::common::Header* InputDebug::_internal_mutable_localization_header() {
  _has_bits_[0] |= 0x00000001u;
  if (localization_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    localization_header_ = p;
  }
  return localization_header_;
}
inline ::control::common::Header* InputDebug::mutable_localization_header() {
  // @@protoc_insertion_point(field_mutable:control.InputDebug.localization_header)
  return _internal_mutable_localization_header();
}
inline void InputDebug::set_allocated_localization_header(::control::common::Header* localization_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_header_);
  }
  if (localization_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_header)->GetArena();
    if (message_arena != submessage_arena) {
      localization_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  localization_header_ = localization_header;
  // @@protoc_insertion_point(field_set_allocated:control.InputDebug.localization_header)
}

// optional .control.common.Header canbus_header = 2;
inline bool InputDebug::_internal_has_canbus_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || canbus_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_canbus_header() const {
  return _internal_has_canbus_header();
}
inline const ::control::common::Header& InputDebug::_internal_canbus_header() const {
  const ::control::common::Header* p = canbus_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& InputDebug::canbus_header() const {
  // @@protoc_insertion_point(field_get:control.InputDebug.canbus_header)
  return _internal_canbus_header();
}
inline void InputDebug::unsafe_arena_set_allocated_canbus_header(
    ::control::common::Header* canbus_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canbus_header_);
  }
  canbus_header_ = canbus_header;
  if (canbus_header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.InputDebug.canbus_header)
}
inline ::control::common::Header* InputDebug::release_canbus_header() {
  auto temp = unsafe_arena_release_canbus_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* InputDebug::unsafe_arena_release_canbus_header() {
  // @@protoc_insertion_point(field_release:control.InputDebug.canbus_header)
  _has_bits_[0] &= ~0x00000002u;
  ::control::common::Header* temp = canbus_header_;
  canbus_header_ = nullptr;
  return temp;
}
inline ::control::common::Header* InputDebug::_internal_mutable_canbus_header() {
  _has_bits_[0] |= 0x00000002u;
  if (canbus_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    canbus_header_ = p;
  }
  return canbus_header_;
}
inline ::control::common::Header* InputDebug::mutable_canbus_header() {
  // @@protoc_insertion_point(field_mutable:control.InputDebug.canbus_header)
  return _internal_mutable_canbus_header();
}
inline void InputDebug::set_allocated_canbus_header(::control::common::Header* canbus_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(canbus_header_);
  }
  if (canbus_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canbus_header)->GetArena();
    if (message_arena != submessage_arena) {
      canbus_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, canbus_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  canbus_header_ = canbus_header;
  // @@protoc_insertion_point(field_set_allocated:control.InputDebug.canbus_header)
}

// optional .control.common.Header trajectory_header = 3;
inline bool InputDebug::_internal_has_trajectory_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || trajectory_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_trajectory_header() const {
  return _internal_has_trajectory_header();
}
inline const ::control::common::Header& InputDebug::_internal_trajectory_header() const {
  const ::control::common::Header* p = trajectory_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& InputDebug::trajectory_header() const {
  // @@protoc_insertion_point(field_get:control.InputDebug.trajectory_header)
  return _internal_trajectory_header();
}
inline void InputDebug::unsafe_arena_set_allocated_trajectory_header(
    ::control::common::Header* trajectory_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_header_);
  }
  trajectory_header_ = trajectory_header;
  if (trajectory_header) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.InputDebug.trajectory_header)
}
inline ::control::common::Header* InputDebug::release_trajectory_header() {
  auto temp = unsafe_arena_release_trajectory_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* InputDebug::unsafe_arena_release_trajectory_header() {
  // @@protoc_insertion_point(field_release:control.InputDebug.trajectory_header)
  _has_bits_[0] &= ~0x00000004u;
  ::control::common::Header* temp = trajectory_header_;
  trajectory_header_ = nullptr;
  return temp;
}
inline ::control::common::Header* InputDebug::_internal_mutable_trajectory_header() {
  _has_bits_[0] |= 0x00000004u;
  if (trajectory_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    trajectory_header_ = p;
  }
  return trajectory_header_;
}
inline ::control::common::Header* InputDebug::mutable_trajectory_header() {
  // @@protoc_insertion_point(field_mutable:control.InputDebug.trajectory_header)
  return _internal_mutable_trajectory_header();
}
inline void InputDebug::set_allocated_trajectory_header(::control::common::Header* trajectory_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_header_);
  }
  if (trajectory_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_header)->GetArena();
    if (message_arena != submessage_arena) {
      trajectory_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trajectory_header_ = trajectory_header;
  // @@protoc_insertion_point(field_set_allocated:control.InputDebug.trajectory_header)
}

// optional .control.common.Header latest_replan_trajectory_header = 4;
inline bool InputDebug::_internal_has_latest_replan_trajectory_header() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || latest_replan_trajectory_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_latest_replan_trajectory_header() const {
  return _internal_has_latest_replan_trajectory_header();
}
inline const ::control::common::Header& InputDebug::_internal_latest_replan_trajectory_header() const {
  const ::control::common::Header* p = latest_replan_trajectory_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::control::common::Header*>(
      &::control::common::_Header_default_instance_);
}
inline const ::control::common::Header& InputDebug::latest_replan_trajectory_header() const {
  // @@protoc_insertion_point(field_get:control.InputDebug.latest_replan_trajectory_header)
  return _internal_latest_replan_trajectory_header();
}
inline void InputDebug::unsafe_arena_set_allocated_latest_replan_trajectory_header(
    ::control::common::Header* latest_replan_trajectory_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_replan_trajectory_header_);
  }
  latest_replan_trajectory_header_ = latest_replan_trajectory_header;
  if (latest_replan_trajectory_header) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:control.InputDebug.latest_replan_trajectory_header)
}
inline ::control::common::Header* InputDebug::release_latest_replan_trajectory_header() {
  auto temp = unsafe_arena_release_latest_replan_trajectory_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::control::common::Header* InputDebug::unsafe_arena_release_latest_replan_trajectory_header() {
  // @@protoc_insertion_point(field_release:control.InputDebug.latest_replan_trajectory_header)
  _has_bits_[0] &= ~0x00000008u;
  ::control::common::Header* temp = latest_replan_trajectory_header_;
  latest_replan_trajectory_header_ = nullptr;
  return temp;
}
inline ::control::common::Header* InputDebug::_internal_mutable_latest_replan_trajectory_header() {
  _has_bits_[0] |= 0x00000008u;
  if (latest_replan_trajectory_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::control::common::Header>(GetArena());
    latest_replan_trajectory_header_ = p;
  }
  return latest_replan_trajectory_header_;
}
inline ::control::common::Header* InputDebug::mutable_latest_replan_trajectory_header() {
  // @@protoc_insertion_point(field_mutable:control.InputDebug.latest_replan_trajectory_header)
  return _internal_mutable_latest_replan_trajectory_header();
}
inline void InputDebug::set_allocated_latest_replan_trajectory_header(::control::common::Header* latest_replan_trajectory_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_replan_trajectory_header_);
  }
  if (latest_replan_trajectory_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_replan_trajectory_header)->GetArena();
    if (message_arena != submessage_arena) {
      latest_replan_trajectory_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_replan_trajectory_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  latest_replan_trajectory_header_ = latest_replan_trajectory_header;
  // @@protoc_insertion_point(field_set_allocated:control.InputDebug.latest_replan_trajectory_header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2finput_5fdebug_2eproto

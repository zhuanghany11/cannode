// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs/input_debug.proto

#include "control_msgs/input_debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
namespace control {
class InputDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputDebug> _instance;
} _InputDebug_default_instance_;
}  // namespace control
static void InitDefaultsscc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_InputDebug_default_instance_;
    new (ptr) ::control::InputDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::InputDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fmsgs_2finput_5fdebug_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fmsgs_2finput_5fdebug_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fmsgs_2finput_5fdebug_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fmsgs_2finput_5fdebug_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::InputDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::InputDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::InputDebug, localization_header_),
  PROTOBUF_FIELD_OFFSET(::control::InputDebug, canbus_header_),
  PROTOBUF_FIELD_OFFSET(::control::InputDebug, trajectory_header_),
  PROTOBUF_FIELD_OFFSET(::control::InputDebug, latest_replan_trajectory_header_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::control::InputDebug)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_InputDebug_default_instance_),
};

const char descriptor_table_protodef_control_5fmsgs_2finput_5fdebug_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036control_msgs/input_debug.proto\022\007contro"
  "l\032#common_msgs/basic_msgs/header.proto\"\344"
  "\001\n\nInputDebug\0223\n\023localization_header\030\001 \001"
  "(\0132\026.control.common.Header\022-\n\rcanbus_hea"
  "der\030\002 \001(\0132\026.control.common.Header\0221\n\021tra"
  "jectory_header\030\003 \001(\0132\026.control.common.He"
  "ader\022\?\n\037latest_replan_trajectory_header\030"
  "\004 \001(\0132\026.control.common.Header"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto_deps[1] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto_sccs[1] = {
  &scc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto = {
  false, false, descriptor_table_protodef_control_5fmsgs_2finput_5fdebug_2eproto, "control_msgs/input_debug.proto", 309,
  &descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto_once, descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto_sccs, descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_control_5fmsgs_2finput_5fdebug_2eproto::offsets,
  file_level_metadata_control_5fmsgs_2finput_5fdebug_2eproto, 1, file_level_enum_descriptors_control_5fmsgs_2finput_5fdebug_2eproto, file_level_service_descriptors_control_5fmsgs_2finput_5fdebug_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fmsgs_2finput_5fdebug_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto)), true);
namespace control {

// ===================================================================

void InputDebug::InitAsDefaultInstance() {
  ::control::_InputDebug_default_instance_._instance.get_mutable()->localization_header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::_InputDebug_default_instance_._instance.get_mutable()->canbus_header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::_InputDebug_default_instance_._instance.get_mutable()->trajectory_header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::_InputDebug_default_instance_._instance.get_mutable()->latest_replan_trajectory_header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
}
class InputDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<InputDebug>()._has_bits_);
  static const ::control::common::Header& localization_header(const InputDebug* msg);
  static void set_has_localization_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::common::Header& canbus_header(const InputDebug* msg);
  static void set_has_canbus_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::Header& trajectory_header(const InputDebug* msg);
  static void set_has_trajectory_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::common::Header& latest_replan_trajectory_header(const InputDebug* msg);
  static void set_has_latest_replan_trajectory_header(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::control::common::Header&
InputDebug::_Internal::localization_header(const InputDebug* msg) {
  return *msg->localization_header_;
}
const ::control::common::Header&
InputDebug::_Internal::canbus_header(const InputDebug* msg) {
  return *msg->canbus_header_;
}
const ::control::common::Header&
InputDebug::_Internal::trajectory_header(const InputDebug* msg) {
  return *msg->trajectory_header_;
}
const ::control::common::Header&
InputDebug::_Internal::latest_replan_trajectory_header(const InputDebug* msg) {
  return *msg->latest_replan_trajectory_header_;
}
void InputDebug::clear_localization_header() {
  if (localization_header_ != nullptr) localization_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InputDebug::clear_canbus_header() {
  if (canbus_header_ != nullptr) canbus_header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InputDebug::clear_trajectory_header() {
  if (trajectory_header_ != nullptr) trajectory_header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void InputDebug::clear_latest_replan_trajectory_header() {
  if (latest_replan_trajectory_header_ != nullptr) latest_replan_trajectory_header_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
InputDebug::InputDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.InputDebug)
}
InputDebug::InputDebug(const InputDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_localization_header()) {
    localization_header_ = new ::control::common::Header(*from.localization_header_);
  } else {
    localization_header_ = nullptr;
  }
  if (from._internal_has_canbus_header()) {
    canbus_header_ = new ::control::common::Header(*from.canbus_header_);
  } else {
    canbus_header_ = nullptr;
  }
  if (from._internal_has_trajectory_header()) {
    trajectory_header_ = new ::control::common::Header(*from.trajectory_header_);
  } else {
    trajectory_header_ = nullptr;
  }
  if (from._internal_has_latest_replan_trajectory_header()) {
    latest_replan_trajectory_header_ = new ::control::common::Header(*from.latest_replan_trajectory_header_);
  } else {
    latest_replan_trajectory_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.InputDebug)
}

void InputDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto.base);
  ::memset(&localization_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_replan_trajectory_header_) -
      reinterpret_cast<char*>(&localization_header_)) + sizeof(latest_replan_trajectory_header_));
}

InputDebug::~InputDebug() {
  // @@protoc_insertion_point(destructor:control.InputDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete localization_header_;
  if (this != internal_default_instance()) delete canbus_header_;
  if (this != internal_default_instance()) delete trajectory_header_;
  if (this != internal_default_instance()) delete latest_replan_trajectory_header_;
}

void InputDebug::ArenaDtor(void* object) {
  InputDebug* _this = reinterpret_cast< InputDebug* >(object);
  (void)_this;
}
void InputDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputDebug& InputDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void InputDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.InputDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(localization_header_ != nullptr);
      localization_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(canbus_header_ != nullptr);
      canbus_header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trajectory_header_ != nullptr);
      trajectory_header_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(latest_replan_trajectory_header_ != nullptr);
      latest_replan_trajectory_header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header localization_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Header canbus_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_canbus_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Header trajectory_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.Header latest_replan_trajectory_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_replan_trajectory_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.InputDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header localization_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::localization_header(this), target, stream);
  }

  // optional .control.common.Header canbus_header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::canbus_header(this), target, stream);
  }

  // optional .control.common.Header trajectory_header = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trajectory_header(this), target, stream);
  }

  // optional .control.common.Header latest_replan_trajectory_header = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::latest_replan_trajectory_header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.InputDebug)
  return target;
}

size_t InputDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.InputDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .control.common.Header localization_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_header_);
    }

    // optional .control.common.Header canbus_header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *canbus_header_);
    }

    // optional .control.common.Header trajectory_header = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_header_);
    }

    // optional .control.common.Header latest_replan_trajectory_header = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latest_replan_trajectory_header_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const InputDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.InputDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.InputDebug)
    MergeFrom(*source);
  }
}

void InputDebug::MergeFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_localization_header()->::control::common::Header::MergeFrom(from._internal_localization_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_canbus_header()->::control::common::Header::MergeFrom(from._internal_canbus_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_trajectory_header()->::control::common::Header::MergeFrom(from._internal_trajectory_header());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latest_replan_trajectory_header()->::control::common::Header::MergeFrom(from._internal_latest_replan_trajectory_header());
    }
  }
}

void InputDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDebug::CopyFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDebug::IsInitialized() const {
  return true;
}

void InputDebug::InternalSwap(InputDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputDebug, latest_replan_trajectory_header_)
      + sizeof(InputDebug::latest_replan_trajectory_header_)
      - PROTOBUF_FIELD_OFFSET(InputDebug, localization_header_)>(
          reinterpret_cast<char*>(&localization_header_),
          reinterpret_cast<char*>(&other->localization_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::InputDebug* Arena::CreateMaybeMessage< ::control::InputDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::InputDebug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs/control_cmd.proto

#include "control_msgs/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2finput_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyStats_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LodmcDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MracAdaptiveGain_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fpad_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PadMessage_control_5fmsgs_2fpad_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngageAdvice_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto;
namespace control {
class LatencyStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatencyStats> _instance;
} _LatencyStats_default_instance_;
class ControlCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlCommand> _instance;
} _ControlCommand_default_instance_;
class SimpleLongitudinalDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleLongitudinalDebug> _instance;
} _SimpleLongitudinalDebug_default_instance_;
class SimpleLateralDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleLateralDebug> _instance;
} _SimpleLateralDebug_default_instance_;
class SimpleMPCDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleMPCDebug> _instance;
} _SimpleMPCDebug_default_instance_;
class MracDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MracDebug> _instance;
} _MracDebug_default_instance_;
class MracAdaptiveGainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MracAdaptiveGain> _instance;
} _MracAdaptiveGain_default_instance_;
class DebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug> _instance;
} _Debug_default_instance_;
class LodmcDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LodmcDebug> _instance;
} _LodmcDebug_default_instance_;
}  // namespace control
static void InitDefaultsscc_info_ControlCommand_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_ControlCommand_default_instance_;
    new (ptr) ::control::ControlCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::ControlCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ControlCommand_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ControlCommand_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {
      &scc_info_Header_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
      &scc_info_VehicleSignal_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto.base,
      &scc_info_LatencyStats_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
      &scc_info_PadMessage_control_5fmsgs_2fpad_5fmsg_2eproto.base,
      &scc_info_EngageAdvice_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_Debug_default_instance_;
    new (ptr) ::control::Debug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::Debug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {
      &scc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
      &scc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
      &scc_info_InputDebug_control_5fmsgs_2finput_5fdebug_2eproto.base,
      &scc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
      &scc_info_LodmcDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_LatencyStats_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_LatencyStats_default_instance_;
    new (ptr) ::control::LatencyStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::LatencyStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyStats_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatencyStats_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_LodmcDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_LodmcDebug_default_instance_;
    new (ptr) ::control::LodmcDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::LodmcDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LodmcDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LodmcDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_MracAdaptiveGain_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_MracAdaptiveGain_default_instance_;
    new (ptr) ::control::MracAdaptiveGain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::MracAdaptiveGain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MracAdaptiveGain_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MracAdaptiveGain_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_MracDebug_default_instance_;
    new (ptr) ::control::MracDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::MracDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {
      &scc_info_MracAdaptiveGain_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_SimpleLateralDebug_default_instance_;
    new (ptr) ::control::SimpleLateralDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::SimpleLateralDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
      &scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_SimpleLongitudinalDebug_default_instance_;
    new (ptr) ::control::SimpleLongitudinalDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::SimpleLongitudinalDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::control::_SimpleMPCDebug_default_instance_;
    new (ptr) ::control::SimpleMPCDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::control::SimpleMPCDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto}, {
      &scc_info_TrajectoryPoint_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fmsgs_2fcontrol_5fcmd_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_control_5fmsgs_2fcontrol_5fcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fmsgs_2fcontrol_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::control::LatencyStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::LatencyStats, total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::control::LatencyStats, controller_time_ms_),
  PROTOBUF_FIELD_OFFSET(::control::LatencyStats, total_time_exceeded_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, header_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, throttle_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, brake_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, steering_rate_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, steering_target_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, speed_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, reset_model_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, engine_on_off_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, trajectory_fraction_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, gear_location_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, debug_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, signal_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, latency_stats_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, pad_msg_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, is_in_safe_mode_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, left_turn_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, right_turn_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, high_beam_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, low_beam_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, horn_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, turnsignal_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, door_fl_status_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, vehicle_stop_status_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, epb_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, pto_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, arm_angle_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, arm_enable_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, shovel_angle_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, shovel_enable_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, estop_),
  PROTOBUF_FIELD_OFFSET(::control::ControlCommand, rapid_shake_),
  0,
  6,
  7,
  8,
  9,
  13,
  10,
  11,
  14,
  15,
  12,
  17,
  18,
  1,
  2,
  3,
  4,
  5,
  16,
  19,
  20,
  21,
  22,
  26,
  23,
  24,
  27,
  25,
  32,
  30,
  28,
  31,
  29,
  33,
  34,
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, station_error_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, preview_station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, speed_controller_input_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, preview_speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, preview_speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, preview_acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, slope_offset_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, current_station_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, path_remain_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, pid_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, leadlag_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, speed_offset_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, current_speed_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, current_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, current_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, jerk_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, current_matched_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, current_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, preview_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, acceleration_lookup_limit_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, vehicle_pitch_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_epb_brake_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, current_steer_interval_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_wait_steer_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_stop_reason_by_destination_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_stop_reason_by_prdestrian_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_full_stop_soft_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, stop_acc_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, gear_location_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_stop_scenario_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, contraposition_x_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, stopstate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLongitudinalDebug, is_take_off_state_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  36,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  0,
  1,
  2,
  33,
  34,
  37,
  35,
  38,
  39,
  40,
  41,
  44,
  45,
  42,
  47,
  46,
  43,
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, lateral_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, heading_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, current_target_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_angle_feedback_augment_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_mrac_debug_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, steer_mrac_enable_status_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, lateral_centripetal_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, preview_pos_curvature_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleLateralDebug, preview_heading_error_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  0,
  31,
  1,
  33,
  32,
  35,
  34,
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, station_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, speed_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_unconstrained_control_diff_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_feedforward_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, matrix_q_updated_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, matrix_r_updated_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, jerk_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, jerk_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, lateral_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, heading_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, steer_angle_feedback_augment_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, current_matched_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, current_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, preview_reference_point_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, preview_station_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, preview_speed_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, preview_speed_error_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, preview_acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, vehicle_pitch_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, slope_offset_compensation_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, path_remain_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_lookup_offset_),
  PROTOBUF_FIELD_OFFSET(::control::SimpleMPCDebug, acceleration_vrf_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  61,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  ~0u,
  ~0u,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  0,
  1,
  2,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, mrac_model_order_),
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, mrac_reference_state_),
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, mrac_state_error_),
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, mrac_adaptive_gain_),
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, mrac_reference_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::control::MracDebug, mrac_control_saturation_status_),
  1,
  ~0u,
  ~0u,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::control::MracAdaptiveGain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::MracAdaptiveGain, state_adaptive_gain_),
  PROTOBUF_FIELD_OFFSET(::control::MracAdaptiveGain, input_adaptive_gain_),
  PROTOBUF_FIELD_OFFSET(::control::MracAdaptiveGain, nonlinear_adaptive_gain_),
  PROTOBUF_FIELD_OFFSET(::control::Debug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::Debug, simple_lon_debug_),
  PROTOBUF_FIELD_OFFSET(::control::Debug, simple_lat_debug_),
  PROTOBUF_FIELD_OFFSET(::control::Debug, input_debug_),
  PROTOBUF_FIELD_OFFSET(::control::Debug, simple_mpc_debug_),
  PROTOBUF_FIELD_OFFSET(::control::Debug, lodmc_debug_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, torq_command_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, torq_feed_forward_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, torq_feed_back_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, dmc_f_roll_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, dmc_f_air_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, dmc_f_slope_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, dmc_f_acc_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, acc_error_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, mass_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, target_acc_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, vehilce_acc_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, vehspeed_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, roadslope_),
  PROTOBUF_FIELD_OFFSET(::control::LodmcDebug, target_acc_filter_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::control::LatencyStats)},
  { 11, 51, sizeof(::control::ControlCommand)},
  { 86, 139, sizeof(::control::SimpleLongitudinalDebug)},
  { 187, 228, sizeof(::control::SimpleLateralDebug)},
  { 264, 333, sizeof(::control::SimpleMPCDebug)},
  { 397, 408, sizeof(::control::MracDebug)},
  { 414, -1, sizeof(::control::MracAdaptiveGain)},
  { 422, 432, sizeof(::control::Debug)},
  { 437, 456, sizeof(::control::LodmcDebug)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_LatencyStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_ControlCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_SimpleLongitudinalDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_SimpleLateralDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_SimpleMPCDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_MracDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_MracAdaptiveGain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_Debug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::control::_LodmcDebug_default_instance_),
};

const char descriptor_table_protodef_control_5fmsgs_2fcontrol_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036control_msgs/control_cmd.proto\022\007contro"
  "l\032(common_msgs/basic_msgs/drive_state.pr"
  "oto\032#common_msgs/basic_msgs/header.proto"
  "\032&common_msgs/basic_msgs/pnc_point.proto"
  "\032+common_msgs/basic_msgs/vehicle_signal."
  "proto\032&common_msgs/chassis_msgs/chassis."
  "proto\032\036control_msgs/input_debug.proto\032\032c"
  "ontrol_msgs/pad_msg.proto\"^\n\014LatencyStat"
  "s\022\025\n\rtotal_time_ms\030\001 \001(\001\022\032\n\022controller_t"
  "ime_ms\030\002 \003(\001\022\033\n\023total_time_exceeded\030\003 \001("
  "\010\"\243\010\n\016ControlCommand\022&\n\006header\030\001 \001(\0132\026.c"
  "ontrol.common.Header\022\023\n\010throttle\030\002 \001(\001:\001"
  "0\022\020\n\005brake\030\003 \001(\001:\0010\022\030\n\rsteering_rate\030\004 \001"
  "(\001:\0010\022\032\n\017steering_target\030\005 \001(\001:\0010\022\025\n\rpar"
  "king_brake\030\006 \001(\010\022\020\n\005speed\030\007 \001(\001:\0010\022\027\n\014ac"
  "celeration\030\010 \001(\001:\0010\022\027\n\013reset_model\030\t \001(\010"
  "B\002\030\001\022\025\n\rengine_on_off\030\n \001(\010\022\033\n\023trajector"
  "y_fraction\030\013 \001(\001\022=\n\014driving_mode\030\014 \001(\0162#"
  ".control.canbus.Chassis.DrivingModeB\002\030\001\022"
  ";\n\rgear_location\030\r \001(\0162$.control.canbus."
  "Chassis.GearPosition\022\035\n\005debug\030\016 \001(\0132\016.co"
  "ntrol.Debug\022-\n\006signal\030\017 \001(\0132\035.control.co"
  "mmon.VehicleSignal\022,\n\rlatency_stats\030\020 \001("
  "\0132\025.control.LatencyStats\022$\n\007pad_msg\030\021 \001("
  "\0132\023.control.PadMessage\0223\n\rengage_advice\030"
  "\022 \001(\0132\034.control.common.EngageAdvice\022\036\n\017i"
  "s_in_safe_mode\030\023 \001(\010:\005false\022\025\n\tleft_turn"
  "\030\024 \001(\010B\002\030\001\022\026\n\nright_turn\030\025 \001(\010B\002\030\001\022\025\n\thi"
  "gh_beam\030\026 \001(\010B\002\030\001\022\024\n\010low_beam\030\027 \001(\010B\002\030\001\022"
  "\020\n\004horn\030\030 \001(\010B\002\030\001\022+\n\nturnsignal\030\031 \001(\0162\023."
  "control.TurnSignalB\002\030\001\022\026\n\016door_fl_status"
  "\030\032 \001(\005\022\033\n\023vehicle_stop_status\030\033 \001(\010\022\017\n\007e"
  "pb_cmd\030\034 \001(\r\022\017\n\007pto_cmd\030\035 \001(\r\022\024\n\tarm_ang"
  "le\030\036 \001(\001:\0010\022\031\n\narm_enable\030\037 \001(\010:\005false\022\027"
  "\n\014shovel_angle\030  \001(\001:\0010\022\034\n\rshovel_enable"
  "\030! \001(\010:\005false\022\024\n\005estop\030\" \001(\010:\005false\022\032\n\013r"
  "apid_shake\030# \001(\010:\005false\"\324\013\n\027SimpleLongit"
  "udinalDebug\022\031\n\021station_reference\030\001 \001(\001\022\025"
  "\n\rstation_error\030\002 \001(\001\022\035\n\025station_error_l"
  "imited\030\003 \001(\001\022\035\n\025preview_station_error\030\004 "
  "\001(\001\022\027\n\017speed_reference\030\005 \001(\001\022\023\n\013speed_er"
  "ror\030\006 \001(\001\022&\n\036speed_controller_input_limi"
  "ted\030\007 \001(\001\022\037\n\027preview_speed_reference\030\010 \001"
  "(\001\022\033\n\023preview_speed_error\030\t \001(\001\022&\n\036previ"
  "ew_acceleration_reference\030\n \001(\001\022\"\n\032accel"
  "eration_cmd_closeloop\030\013 \001(\001\022\030\n\020accelerat"
  "ion_cmd\030\014 \001(\001\022\033\n\023acceleration_lookup\030\r \001"
  "(\001\022\024\n\014speed_lookup\030\016 \001(\001\022\031\n\021calibration_"
  "value\030\017 \001(\001\022\024\n\014throttle_cmd\030\020 \001(\001\022\021\n\tbra"
  "ke_cmd\030\021 \001(\001\022\024\n\014is_full_stop\030\022 \001(\010\022!\n\031sl"
  "ope_offset_compensation\030\023 \001(\001\022\027\n\017current"
  "_station\030\024 \001(\001\022\023\n\013path_remain\030\025 \001(\001\022\035\n\025p"
  "id_saturation_status\030\026 \001(\005\022!\n\031leadlag_sa"
  "turation_status\030\027 \001(\005\022\024\n\014speed_offset\030\030 "
  "\001(\001\022\025\n\rcurrent_speed\030\031 \001(\001\022\036\n\026accelerati"
  "on_reference\030\032 \001(\001\022\034\n\024current_accelerati"
  "on\030\033 \001(\001\022\032\n\022acceleration_error\030\034 \001(\001\022\026\n\016"
  "jerk_reference\030\035 \001(\001\022\024\n\014current_jerk\030\036 \001"
  "(\001\022\022\n\njerk_error\030\037 \001(\001\022>\n\025current_matche"
  "d_point\030  \001(\0132\037.control.common.Trajector"
  "yPoint\022@\n\027current_reference_point\030! \001(\0132"
  "\037.control.common.TrajectoryPoint\022@\n\027prev"
  "iew_reference_point\030\" \001(\0132\037.control.comm"
  "on.TrajectoryPoint\022!\n\031acceleration_looku"
  "p_limit\030# \001(\001\022\025\n\rvehicle_pitch\030$ \001(\001\022\024\n\014"
  "is_epb_brake\030% \001(\010\022\036\n\026current_steer_inte"
  "rval\030& \001(\001\022\025\n\ris_wait_steer\030\' \001(\010\022%\n\035is_"
  "stop_reason_by_destination\030( \001(\010\022$\n\034is_s"
  "top_reason_by_prdestrian\030) \001(\010\022\031\n\021is_ful"
  "l_stop_soft\030* \001(\010\022\024\n\014stop_acc_cmd\0303 \001(\001\022"
  ";\n\rgear_location\0304 \001(\0162$.control.canbus."
  "Chassis.GearPosition\022\030\n\020is_stop_scenario"
  "\0305 \001(\010\022\030\n\020contraposition_x\0306 \001(\001\022\021\n\tstop"
  "state\0307 \001(\r\022\031\n\021is_take_off_state\0308 \001(\010\"\365"
  "\010\n\022SimpleLateralDebug\022\025\n\rlateral_error\030\001"
  " \001(\001\022\023\n\013ref_heading\030\002 \001(\001\022\017\n\007heading\030\003 \001"
  "(\001\022\025\n\rheading_error\030\004 \001(\001\022\032\n\022heading_err"
  "or_rate\030\005 \001(\001\022\032\n\022lateral_error_rate\030\006 \001("
  "\001\022\021\n\tcurvature\030\007 \001(\001\022\023\n\013steer_angle\030\010 \001("
  "\001\022\037\n\027steer_angle_feedforward\030\t \001(\001\022(\n st"
  "eer_angle_lateral_contribution\030\n \001(\001\022-\n%"
  "steer_angle_lateral_rate_contribution\030\013 "
  "\001(\001\022(\n steer_angle_heading_contribution\030"
  "\014 \001(\001\022-\n%steer_angle_heading_rate_contri"
  "bution\030\r \001(\001\022\034\n\024steer_angle_feedback\030\016 \001"
  "(\001\022\031\n\021steering_position\030\017 \001(\001\022\021\n\tref_spe"
  "ed\030\020 \001(\001\022\033\n\023steer_angle_limited\030\021 \001(\001\022\034\n"
  "\024lateral_acceleration\030\022 \001(\001\022\024\n\014lateral_j"
  "erk\030\023 \001(\001\022\030\n\020ref_heading_rate\030\024 \001(\001\022\024\n\014h"
  "eading_rate\030\025 \001(\001\022 \n\030ref_heading_acceler"
  "ation\030\026 \001(\001\022\034\n\024heading_acceleration\030\027 \001("
  "\001\022\"\n\032heading_error_acceleration\030\030 \001(\001\022\030\n"
  "\020ref_heading_jerk\030\031 \001(\001\022\024\n\014heading_jerk\030"
  "\032 \001(\001\022\032\n\022heading_error_jerk\030\033 \001(\001\022\036\n\026lat"
  "eral_error_feedback\030\034 \001(\001\022\036\n\026heading_err"
  "or_feedback\030\035 \001(\001\022=\n\024current_target_poin"
  "t\030\036 \001(\0132\037.control.common.TrajectoryPoint"
  "\022$\n\034steer_angle_feedback_augment\030\037 \001(\001\022,"
  "\n\020steer_mrac_debug\030  \001(\0132\022.control.MracD"
  "ebug\022 \n\030steer_mrac_enable_status\030! \001(\010\022("
  "\n lateral_centripetal_acceleration\030\" \001(\001"
  "\022\035\n\025preview_pos_curvature\030# \001(\001\022\035\n\025previ"
  "ew_heading_error\030$ \001(\002\"\256\017\n\016SimpleMPCDebu"
  "g\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_heading\030"
  "\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_error\030"
  "\004 \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032\n\022lat"
  "eral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001"
  "\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angle_fee"
  "dforward\030\t \001(\001\022(\n steer_angle_lateral_co"
  "ntribution\030\n \001(\001\022-\n%steer_angle_lateral_"
  "rate_contribution\030\013 \001(\001\022(\n steer_angle_h"
  "eading_contribution\030\014 \001(\001\022-\n%steer_angle"
  "_heading_rate_contribution\030\r \001(\001\022\034\n\024stee"
  "r_angle_feedback\030\016 \001(\001\022\031\n\021steering_posit"
  "ion\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023steer_an"
  "gle_limited\030\021 \001(\001\022\031\n\021station_reference\030\022"
  " \001(\001\022\025\n\rstation_error\030\023 \001(\001\022\027\n\017speed_ref"
  "erence\030\024 \001(\001\022\023\n\013speed_error\030\025 \001(\001\022\036\n\026acc"
  "eleration_reference\030\026 \001(\001\022\024\n\014is_full_sto"
  "p\030\027 \001(\010\022\030\n\020station_feedback\030\030 \001(\001\022\026\n\016spe"
  "ed_feedback\030\031 \001(\001\022\"\n\032acceleration_cmd_cl"
  "oseloop\030\032 \001(\001\022\030\n\020acceleration_cmd\030\033 \001(\001\022"
  "\033\n\023acceleration_lookup\030\034 \001(\001\022\024\n\014speed_lo"
  "okup\030\035 \001(\001\022\031\n\021calibration_value\030\036 \001(\001\022(\n"
  " steer_unconstrained_control_diff\030\037 \001(\001\022"
  ",\n$steer_angle_feedforward_compensation\030"
  "  \001(\001\022\030\n\020matrix_q_updated\030! \003(\001\022\030\n\020matri"
  "x_r_updated\030\" \003(\001\022\034\n\024lateral_acceleratio"
  "n\030# \001(\001\022\024\n\014lateral_jerk\030$ \001(\001\022\030\n\020ref_hea"
  "ding_rate\030% \001(\001\022\024\n\014heading_rate\030& \001(\001\022 \n"
  "\030ref_heading_acceleration\030\' \001(\001\022\034\n\024headi"
  "ng_acceleration\030( \001(\001\022\"\n\032heading_error_a"
  "cceleration\030) \001(\001\022\030\n\020ref_heading_jerk\030* "
  "\001(\001\022\024\n\014heading_jerk\030+ \001(\001\022\032\n\022heading_err"
  "or_jerk\030, \001(\001\022\035\n\025acceleration_feedback\030-"
  " \001(\001\022\032\n\022acceleration_error\030. \001(\001\022\026\n\016jerk"
  "_reference\030/ \001(\001\022\025\n\rjerk_feedback\0300 \001(\001\022"
  "\022\n\njerk_error\0301 \001(\001\022\036\n\026lateral_error_fee"
  "dback\0302 \001(\001\022\036\n\026heading_error_feedback\0303 "
  "\001(\001\022$\n\034steer_angle_feedback_augment\0304 \001("
  "\001\022>\n\025current_matched_point\0305 \001(\0132\037.contr"
  "ol.common.TrajectoryPoint\022@\n\027current_ref"
  "erence_point\0306 \001(\0132\037.control.common.Traj"
  "ectoryPoint\022@\n\027preview_reference_point\0307"
  " \001(\0132\037.control.common.TrajectoryPoint\022\035\n"
  "\025preview_station_error\0308 \001(\001\022\037\n\027preview_"
  "speed_reference\0309 \001(\001\022\033\n\023preview_speed_e"
  "rror\030: \001(\001\022&\n\036preview_acceleration_refer"
  "ence\030; \001(\001\022\025\n\rvehicle_pitch\030< \001(\001\022!\n\031slo"
  "pe_offset_compensation\030= \001(\001\022\023\n\013path_rem"
  "ain\030> \001(\001\022\"\n\032acceleration_lookup_offset\030"
  "\? \001(\001\022\030\n\020acceleration_vrf\030@ \001(\001\"\346\001\n\tMrac"
  "Debug\022\030\n\020mrac_model_order\030\001 \001(\005\022\034\n\024mrac_"
  "reference_state\030\002 \003(\001\022\030\n\020mrac_state_erro"
  "r\030\003 \003(\001\0225\n\022mrac_adaptive_gain\030\004 \001(\0132\031.co"
  "ntrol.MracAdaptiveGain\022(\n mrac_reference"
  "_saturation_status\030\005 \001(\005\022&\n\036mrac_control"
  "_saturation_status\030\006 \001(\005\"m\n\020MracAdaptive"
  "Gain\022\033\n\023state_adaptive_gain\030\001 \003(\001\022\033\n\023inp"
  "ut_adaptive_gain\030\002 \003(\001\022\037\n\027nonlinear_adap"
  "tive_gain\030\003 \003(\001\"\201\002\n\005Debug\022:\n\020simple_lon_"
  "debug\030\001 \001(\0132 .control.SimpleLongitudinal"
  "Debug\0225\n\020simple_lat_debug\030\002 \001(\0132\033.contro"
  "l.SimpleLateralDebug\022(\n\013input_debug\030\003 \001("
  "\0132\023.control.InputDebug\0221\n\020simple_mpc_deb"
  "ug\030\004 \001(\0132\027.control.SimpleMPCDebug\022(\n\013lod"
  "mc_debug\030\005 \001(\0132\023.control.LodmcDebug\"\256\002\n\n"
  "LodmcDebug\022\024\n\014torq_command\030\001 \001(\001\022\031\n\021torq"
  "_feed_forward\030\002 \001(\001\022\026\n\016torq_feed_back\030\003 "
  "\001(\001\022\022\n\ndmc_f_roll\030\004 \001(\001\022\021\n\tdmc_f_air\030\005 \001"
  "(\001\022\023\n\013dmc_f_slope\030\006 \001(\001\022\021\n\tdmc_f_acc\030\007 \001"
  "(\001\022\021\n\tacc_error\030\010 \001(\001\022\014\n\004mass\030\t \001(\001\022\022\n\nt"
  "arget_acc\030\n \001(\001\022\023\n\013vehilce_acc\030\013 \001(\001\022\020\n\010"
  "vehspeed\030\014 \001(\001\022\021\n\troadslope\030\r \001(\001\022\031\n\021tar"
  "get_acc_filter\030\016 \001(\001*:\n\nTurnSignal\022\r\n\tTU"
  "RN_NONE\020\000\022\r\n\tTURN_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto_deps[7] = {
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fdrive_5fstate_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto,
  &::descriptor_table_common_5fmsgs_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
  &::descriptor_table_common_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto,
  &::descriptor_table_control_5fmsgs_2finput_5fdebug_2eproto,
  &::descriptor_table_control_5fmsgs_2fpad_5fmsg_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto_sccs[9] = {
  &scc_info_ControlCommand_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_LatencyStats_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_LodmcDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_MracAdaptiveGain_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
  &scc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto = {
  false, false, descriptor_table_protodef_control_5fmsgs_2fcontrol_5fcmd_2eproto, "control_msgs/control_cmd.proto", 7040,
  &descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto_once, descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto_sccs, descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto_deps, 9, 7,
  schemas, file_default_instances, TableStruct_control_5fmsgs_2fcontrol_5fcmd_2eproto::offsets,
  file_level_metadata_control_5fmsgs_2fcontrol_5fcmd_2eproto, 9, file_level_enum_descriptors_control_5fmsgs_2fcontrol_5fcmd_2eproto, file_level_service_descriptors_control_5fmsgs_2fcontrol_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fmsgs_2fcontrol_5fcmd_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto)), true);
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnSignal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2fcontrol_5fcmd_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2fcontrol_5fcmd_2eproto[0];
}
bool TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LatencyStats::InitAsDefaultInstance() {
}
class LatencyStats::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyStats>()._has_bits_);
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_time_exceeded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LatencyStats::LatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  controller_time_ms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      controller_time_ms_(from.controller_time_ms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_exceeded_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
  // @@protoc_insertion_point(copy_constructor:control.LatencyStats)
}

void LatencyStats::SharedCtor() {
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_exceeded_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:control.LatencyStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatencyStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LatencyStats::ArenaDtor(void* object) {
  LatencyStats* _this = reinterpret_cast< LatencyStats* >(object);
  (void)_this;
}
void LatencyStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyStats& LatencyStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatencyStats_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:control.LatencyStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_time_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_exceeded_) -
        reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double total_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_total_time_ms(&has_bits);
          total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double controller_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_controller_time_ms(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_controller_time_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool total_time_exceeded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_time_exceeded(&has_bits);
          total_time_exceeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatencyStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.LatencyStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time_ms(), target);
  }

  // repeated double controller_time_ms = 2;
  for (int i = 0, n = this->_internal_controller_time_ms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_controller_time_ms(i), target);
  }

  // optional bool total_time_exceeded = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_total_time_exceeded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.LatencyStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double controller_time_ms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controller_time_ms_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_controller_time_ms_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double total_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool total_time_exceeded = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatencyStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.LatencyStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controller_time_ms_.MergeFrom(from.controller_time_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_time_exceeded_ = from.total_time_exceeded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  controller_time_ms_.InternalSwap(&other->controller_time_ms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyStats, total_time_exceeded_)
      + sizeof(LatencyStats::total_time_exceeded_)
      - PROTOBUF_FIELD_OFFSET(LatencyStats, total_time_ms_)>(
          reinterpret_cast<char*>(&total_time_ms_),
          reinterpret_cast<char*>(&other->total_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlCommand::InitAsDefaultInstance() {
  ::control::_ControlCommand_default_instance_._instance.get_mutable()->header_ = const_cast< ::control::common::Header*>(
      ::control::common::Header::internal_default_instance());
  ::control::_ControlCommand_default_instance_._instance.get_mutable()->debug_ = const_cast< ::control::Debug*>(
      ::control::Debug::internal_default_instance());
  ::control::_ControlCommand_default_instance_._instance.get_mutable()->signal_ = const_cast< ::control::common::VehicleSignal*>(
      ::control::common::VehicleSignal::internal_default_instance());
  ::control::_ControlCommand_default_instance_._instance.get_mutable()->latency_stats_ = const_cast< ::control::LatencyStats*>(
      ::control::LatencyStats::internal_default_instance());
  ::control::_ControlCommand_default_instance_._instance.get_mutable()->pad_msg_ = const_cast< ::control::PadMessage*>(
      ::control::PadMessage::internal_default_instance());
  ::control::_ControlCommand_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::control::common::EngageAdvice*>(
      ::control::common::EngageAdvice::internal_default_instance());
}
class ControlCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCommand>()._has_bits_);
  static const ::control::common::Header& header(const ControlCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steering_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steering_target(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_reset_model(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_engine_on_off(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_trajectory_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::control::Debug& debug(const ControlCommand* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::VehicleSignal& signal(const ControlCommand* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::LatencyStats& latency_stats(const ControlCommand* msg);
  static void set_has_latency_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::control::PadMessage& pad_msg(const ControlCommand* msg);
  static void set_has_pad_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::control::common::EngageAdvice& engage_advice(const ControlCommand* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_in_safe_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_left_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_right_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_high_beam(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_low_beam(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_turnsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_door_fl_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_vehicle_stop_status(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_epb_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pto_cmd(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_arm_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_arm_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_shovel_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_shovel_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_estop(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_rapid_shake(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::control::common::Header&
ControlCommand::_Internal::header(const ControlCommand* msg) {
  return *msg->header_;
}
const ::control::Debug&
ControlCommand::_Internal::debug(const ControlCommand* msg) {
  return *msg->debug_;
}
const ::control::common::VehicleSignal&
ControlCommand::_Internal::signal(const ControlCommand* msg) {
  return *msg->signal_;
}
const ::control::LatencyStats&
ControlCommand::_Internal::latency_stats(const ControlCommand* msg) {
  return *msg->latency_stats_;
}
const ::control::PadMessage&
ControlCommand::_Internal::pad_msg(const ControlCommand* msg) {
  return *msg->pad_msg_;
}
const ::control::common::EngageAdvice&
ControlCommand::_Internal::engage_advice(const ControlCommand* msg) {
  return *msg->engage_advice_;
}
void ControlCommand::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ControlCommand::clear_signal() {
  if (signal_ != nullptr) signal_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ControlCommand::clear_pad_msg() {
  if (pad_msg_ != nullptr) pad_msg_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ControlCommand::clear_engage_advice() {
  if (engage_advice_ != nullptr) engage_advice_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ControlCommand::ControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::control::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_debug()) {
    debug_ = new ::control::Debug(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from._internal_has_signal()) {
    signal_ = new ::control::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = nullptr;
  }
  if (from._internal_has_latency_stats()) {
    latency_stats_ = new ::control::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = nullptr;
  }
  if (from._internal_has_pad_msg()) {
    pad_msg_ = new ::control::PadMessage(*from.pad_msg_);
  } else {
    pad_msg_ = nullptr;
  }
  if (from._internal_has_engage_advice()) {
    engage_advice_ = new ::control::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&rapid_shake_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(rapid_shake_));
  // @@protoc_insertion_point(copy_constructor:control.ControlCommand)
}

void ControlCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlCommand_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rapid_shake_) -
      reinterpret_cast<char*>(&header_)) + sizeof(rapid_shake_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:control.ControlCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete latency_stats_;
  if (this != internal_default_instance()) delete pad_msg_;
  if (this != internal_default_instance()) delete engage_advice_;
}

void ControlCommand::ArenaDtor(void* object) {
  ControlCommand* _this = reinterpret_cast< ControlCommand* >(object);
  (void)_this;
}
void ControlCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlCommand& ControlCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlCommand_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:control.ControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(debug_ != nullptr);
      debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(signal_ != nullptr);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(latency_stats_ != nullptr);
      latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pad_msg_ != nullptr);
      pad_msg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(engage_advice_ != nullptr);
      engage_advice_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_) -
        reinterpret_cast<char*>(&throttle_)) + sizeof(brake_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&steering_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_on_off_) -
        reinterpret_cast<char*>(&steering_rate_)) + sizeof(engine_on_off_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_in_safe_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&turnsignal_) -
        reinterpret_cast<char*>(&is_in_safe_mode_)) + sizeof(turnsignal_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&door_fl_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shovel_angle_) -
        reinterpret_cast<char*>(&door_fl_status_)) + sizeof(shovel_angle_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pto_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rapid_shake_) -
        reinterpret_cast<char*>(&pto_cmd_)) + sizeof(rapid_shake_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double throttle = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_throttle(&_has_bits_);
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_brake(&_has_bits_);
          brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_rate = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_steering_rate(&_has_bits_);
          steering_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_target = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_steering_target(&_has_bits_);
          steering_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool parking_brake = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_parking_brake(&_has_bits_);
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_speed(&_has_bits_);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_acceleration(&_has_bits_);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool reset_model = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_reset_model(&_has_bits_);
          reset_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool engine_on_off = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_engine_on_off(&_has_bits_);
          engine_on_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double trajectory_fraction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_trajectory_fraction(&_has_bits_);
          trajectory_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.DrivingMode driving_mode = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::control::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.GearPosition gear_location = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::control::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .control.Debug debug = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.VehicleSignal signal = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.LatencyStats latency_stats = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.PadMessage pad_msg = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pad_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.EngageAdvice engage_advice = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_safe_mode = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_in_safe_mode(&_has_bits_);
          is_in_safe_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_turn = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_left_turn(&_has_bits_);
          left_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_turn = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_right_turn(&_has_bits_);
          right_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_beam = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_high_beam(&_has_bits_);
          high_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_beam = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_low_beam(&_has_bits_);
          low_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool horn = 24 [deprecated = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_horn(&_has_bits_);
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.TurnSignal turnsignal = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::TurnSignal_IsValid(val))) {
            _internal_set_turnsignal(static_cast<::control::TurnSignal>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 door_fl_status = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_door_fl_status(&_has_bits_);
          door_fl_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vehicle_stop_status = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_vehicle_stop_status(&_has_bits_);
          vehicle_stop_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 epb_cmd = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_epb_cmd(&_has_bits_);
          epb_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pto_cmd = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_pto_cmd(&_has_bits_);
          pto_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double arm_angle = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_arm_angle(&_has_bits_);
          arm_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool arm_enable = 31 [default = false];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_arm_enable(&_has_bits_);
          arm_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double shovel_angle = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_shovel_angle(&_has_bits_);
          shovel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool shovel_enable = 33 [default = false];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shovel_enable(&_has_bits_);
          shovel_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool estop = 34 [default = false];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_estop(&_has_bits_);
          estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rapid_shake = 35 [default = false];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rapid_shake(&_has_bits_);
          rapid_shake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.ControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional double throttle = 2 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_throttle(), target);
  }

  // optional double brake = 3 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_brake(), target);
  }

  // optional double steering_rate = 4 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_steering_rate(), target);
  }

  // optional double steering_target = 5 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_steering_target(), target);
  }

  // optional bool parking_brake = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_parking_brake(), target);
  }

  // optional double speed = 7 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed(), target);
  }

  // optional double acceleration = 8 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceleration(), target);
  }

  // optional bool reset_model = 9 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_reset_model(), target);
  }

  // optional bool engine_on_off = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_engine_on_off(), target);
  }

  // optional double trajectory_fraction = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_trajectory_fraction(), target);
  }

  // optional .control.canbus.Chassis.DrivingMode driving_mode = 12 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_driving_mode(), target);
  }

  // optional .control.canbus.Chassis.GearPosition gear_location = 13;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_gear_location(), target);
  }

  // optional .control.Debug debug = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::debug(this), target, stream);
  }

  // optional .control.common.VehicleSignal signal = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::signal(this), target, stream);
  }

  // optional .control.LatencyStats latency_stats = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::latency_stats(this), target, stream);
  }

  // optional .control.PadMessage pad_msg = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::pad_msg(this), target, stream);
  }

  // optional .control.common.EngageAdvice engage_advice = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::engage_advice(this), target, stream);
  }

  // optional bool is_in_safe_mode = 19 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_in_safe_mode(), target);
  }

  // optional bool left_turn = 20 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_left_turn(), target);
  }

  // optional bool right_turn = 21 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_right_turn(), target);
  }

  // optional bool high_beam = 22 [deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_high_beam(), target);
  }

  // optional bool low_beam = 23 [deprecated = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_low_beam(), target);
  }

  // optional bool horn = 24 [deprecated = true];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_horn(), target);
  }

  // optional .control.TurnSignal turnsignal = 25 [deprecated = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_turnsignal(), target);
  }

  // optional int32 door_fl_status = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_door_fl_status(), target);
  }

  // optional bool vehicle_stop_status = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_vehicle_stop_status(), target);
  }

  // optional uint32 epb_cmd = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_epb_cmd(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 pto_cmd = 29;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_pto_cmd(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double arm_angle = 30 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_arm_angle(), target);
  }

  // optional bool arm_enable = 31 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_arm_enable(), target);
  }

  // optional double shovel_angle = 32 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_shovel_angle(), target);
  }

  // optional bool shovel_enable = 33 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_shovel_enable(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool estop = 34 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_estop(), target);
  }

  // optional bool rapid_shake = 35 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_rapid_shake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.ControlCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .control.Debug debug = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_);
    }

    // optional .control.common.VehicleSignal signal = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .control.LatencyStats latency_stats = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latency_stats_);
    }

    // optional .control.PadMessage pad_msg = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pad_msg_);
    }

    // optional .control.common.EngageAdvice engage_advice = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

    // optional double throttle = 2 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double brake = 3 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double steering_rate = 4 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steering_target = 5 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed = 7 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 8 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double trajectory_fraction = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional bool parking_brake = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool reset_model = 9 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool engine_on_off = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_in_safe_mode = 19 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional .control.canbus.Chassis.DrivingMode driving_mode = 12 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

    // optional .control.canbus.Chassis.GearPosition gear_location = 13;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

    // optional bool left_turn = 20 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool right_turn = 21 [deprecated = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool high_beam = 22 [deprecated = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool low_beam = 23 [deprecated = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional .control.TurnSignal turnsignal = 25 [deprecated = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turnsignal());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 door_fl_status = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_door_fl_status());
    }

    // optional uint32 epb_cmd = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_epb_cmd());
    }

    // optional bool horn = 24 [deprecated = true];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool vehicle_stop_status = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool arm_enable = 31 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool shovel_enable = 33 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional double arm_angle = 30 [default = 0];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double shovel_angle = 32 [default = 0];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pto_cmd = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pto_cmd());
    }

    // optional bool estop = 34 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool rapid_shake = 35 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.ControlCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::control::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_debug()->::control::Debug::MergeFrom(from._internal_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_signal()->::control::common::VehicleSignal::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latency_stats()->::control::LatencyStats::MergeFrom(from._internal_latency_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pad_msg()->::control::PadMessage::MergeFrom(from._internal_pad_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_engage_advice()->::control::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000040u) {
      throttle_ = from.throttle_;
    }
    if (cached_has_bits & 0x00000080u) {
      brake_ = from.brake_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      steering_rate_ = from.steering_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      steering_target_ = from.steering_target_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      trajectory_fraction_ = from.trajectory_fraction_;
    }
    if (cached_has_bits & 0x00002000u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00004000u) {
      reset_model_ = from.reset_model_;
    }
    if (cached_has_bits & 0x00008000u) {
      engine_on_off_ = from.engine_on_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_in_safe_mode_ = from.is_in_safe_mode_;
    }
    if (cached_has_bits & 0x00020000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00040000u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00080000u) {
      left_turn_ = from.left_turn_;
    }
    if (cached_has_bits & 0x00100000u) {
      right_turn_ = from.right_turn_;
    }
    if (cached_has_bits & 0x00200000u) {
      high_beam_ = from.high_beam_;
    }
    if (cached_has_bits & 0x00400000u) {
      low_beam_ = from.low_beam_;
    }
    if (cached_has_bits & 0x00800000u) {
      turnsignal_ = from.turnsignal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      door_fl_status_ = from.door_fl_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      epb_cmd_ = from.epb_cmd_;
    }
    if (cached_has_bits & 0x04000000u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x08000000u) {
      vehicle_stop_status_ = from.vehicle_stop_status_;
    }
    if (cached_has_bits & 0x10000000u) {
      arm_enable_ = from.arm_enable_;
    }
    if (cached_has_bits & 0x20000000u) {
      shovel_enable_ = from.shovel_enable_;
    }
    if (cached_has_bits & 0x40000000u) {
      arm_angle_ = from.arm_angle_;
    }
    if (cached_has_bits & 0x80000000u) {
      shovel_angle_ = from.shovel_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pto_cmd_ = from.pto_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      estop_ = from.estop_;
    }
    if (cached_has_bits & 0x00000004u) {
      rapid_shake_ = from.rapid_shake_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ControlCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCommand, rapid_shake_)
      + sizeof(ControlCommand::rapid_shake_)
      - PROTOBUF_FIELD_OFFSET(ControlCommand, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleLongitudinalDebug::InitAsDefaultInstance() {
  ::control::_SimpleLongitudinalDebug_default_instance_._instance.get_mutable()->current_matched_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleLongitudinalDebug_default_instance_._instance.get_mutable()->current_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleLongitudinalDebug_default_instance_._instance.get_mutable()->preview_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
}
class SimpleLongitudinalDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLongitudinalDebug>()._has_bits_);
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_station_error_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preview_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed_controller_input_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_preview_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_preview_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_preview_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_throttle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_slope_offset_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_current_station(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_path_remain(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_pid_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_leadlag_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_speed_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_current_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_current_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_acceleration_error(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_jerk_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_current_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_jerk_error(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::control::common::TrajectoryPoint& current_matched_point(const SimpleLongitudinalDebug* msg);
  static void set_has_current_matched_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::common::TrajectoryPoint& current_reference_point(const SimpleLongitudinalDebug* msg);
  static void set_has_current_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::TrajectoryPoint& preview_reference_point(const SimpleLongitudinalDebug* msg);
  static void set_has_preview_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_acceleration_lookup_limit(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_vehicle_pitch(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_is_epb_brake(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_current_steer_interval(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_is_wait_steer(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_is_stop_reason_by_destination(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_is_stop_reason_by_prdestrian(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_is_full_stop_soft(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_stop_acc_cmd(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_is_stop_scenario(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_contraposition_x(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_stopstate(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_is_take_off_state(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
};

const ::control::common::TrajectoryPoint&
SimpleLongitudinalDebug::_Internal::current_matched_point(const SimpleLongitudinalDebug* msg) {
  return *msg->current_matched_point_;
}
const ::control::common::TrajectoryPoint&
SimpleLongitudinalDebug::_Internal::current_reference_point(const SimpleLongitudinalDebug* msg) {
  return *msg->current_reference_point_;
}
const ::control::common::TrajectoryPoint&
SimpleLongitudinalDebug::_Internal::preview_reference_point(const SimpleLongitudinalDebug* msg) {
  return *msg->preview_reference_point_;
}
void SimpleLongitudinalDebug::clear_current_matched_point() {
  if (current_matched_point_ != nullptr) current_matched_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleLongitudinalDebug::clear_current_reference_point() {
  if (current_reference_point_ != nullptr) current_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleLongitudinalDebug::clear_preview_reference_point() {
  if (preview_reference_point_ != nullptr) preview_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleLongitudinalDebug)
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_matched_point()) {
    current_matched_point_ = new ::control::common::TrajectoryPoint(*from.current_matched_point_);
  } else {
    current_matched_point_ = nullptr;
  }
  if (from._internal_has_current_reference_point()) {
    current_reference_point_ = new ::control::common::TrajectoryPoint(*from.current_reference_point_);
  } else {
    current_reference_point_ = nullptr;
  }
  if (from._internal_has_preview_reference_point()) {
    preview_reference_point_ = new ::control::common::TrajectoryPoint(*from.preview_reference_point_);
  } else {
    preview_reference_point_ = nullptr;
  }
  ::memcpy(&station_reference_, &from.station_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&contraposition_x_) -
    reinterpret_cast<char*>(&station_reference_)) + sizeof(contraposition_x_));
  // @@protoc_insertion_point(copy_constructor:control.SimpleLongitudinalDebug)
}

void SimpleLongitudinalDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  ::memset(&current_matched_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contraposition_x_) -
      reinterpret_cast<char*>(&current_matched_point_)) + sizeof(contraposition_x_));
}

SimpleLongitudinalDebug::~SimpleLongitudinalDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleLongitudinalDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleLongitudinalDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_matched_point_;
  if (this != internal_default_instance()) delete current_reference_point_;
  if (this != internal_default_instance()) delete preview_reference_point_;
}

void SimpleLongitudinalDebug::ArenaDtor(void* object) {
  SimpleLongitudinalDebug* _this = reinterpret_cast< SimpleLongitudinalDebug* >(object);
  (void)_this;
}
void SimpleLongitudinalDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleLongitudinalDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleLongitudinalDebug& SimpleLongitudinalDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleLongitudinalDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void SimpleLongitudinalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleLongitudinalDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(current_matched_point_ != nullptr);
      current_matched_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_reference_point_ != nullptr);
      current_reference_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preview_reference_point_ != nullptr);
      preview_reference_point_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&station_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_reference_) -
        reinterpret_cast<char*>(&station_reference_)) + sizeof(speed_reference_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&speed_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceleration_lookup_) -
        reinterpret_cast<char*>(&speed_error_)) + sizeof(acceleration_lookup_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&speed_lookup_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_saturation_status_) -
        reinterpret_cast<char*>(&speed_lookup_)) + sizeof(pid_saturation_status_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&leadlag_saturation_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_jerk_) -
        reinterpret_cast<char*>(&leadlag_saturation_status_)) + sizeof(current_jerk_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&jerk_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_stop_reason_by_destination_) -
        reinterpret_cast<char*>(&jerk_error_)) + sizeof(is_stop_reason_by_destination_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_stop_reason_by_prdestrian_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contraposition_x_) -
        reinterpret_cast<char*>(&is_stop_reason_by_prdestrian_)) + sizeof(contraposition_x_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLongitudinalDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double station_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_station_reference(&_has_bits_);
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_station_error(&_has_bits_);
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error_limited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_station_error_limited(&_has_bits_);
          station_error_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_station_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_preview_station_error(&_has_bits_);
          preview_station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_speed_reference(&_has_bits_);
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_speed_error(&_has_bits_);
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_controller_input_limited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_speed_controller_input_limited(&_has_bits_);
          speed_controller_input_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_preview_speed_reference(&_has_bits_);
          preview_speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_preview_speed_error(&_has_bits_);
          preview_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_acceleration_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_preview_acceleration_reference(&_has_bits_);
          preview_acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_acceleration_cmd_closeloop(&_has_bits_);
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_acceleration_cmd(&_has_bits_);
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_acceleration_lookup(&_has_bits_);
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_lookup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_speed_lookup(&_has_bits_);
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double calibration_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_calibration_value(&_has_bits_);
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_cmd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_throttle_cmd(&_has_bits_);
          throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_cmd = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_brake_cmd(&_has_bits_);
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_full_stop(&_has_bits_);
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double slope_offset_compensation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_slope_offset_compensation(&_has_bits_);
          slope_offset_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_station = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_current_station(&_has_bits_);
          current_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_remain = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_path_remain(&_has_bits_);
          path_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 pid_saturation_status = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_pid_saturation_status(&_has_bits_);
          pid_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 leadlag_saturation_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_leadlag_saturation_status(&_has_bits_);
          leadlag_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_offset = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_speed_offset(&_has_bits_);
          speed_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_speed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_current_speed(&_has_bits_);
          current_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_reference = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_acceleration_reference(&_has_bits_);
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_acceleration = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_current_acceleration(&_has_bits_);
          current_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_error = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_acceleration_error(&_has_bits_);
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_reference = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_jerk_reference(&_has_bits_);
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_jerk = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_current_jerk(&_has_bits_);
          current_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_error = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_jerk_error(&_has_bits_);
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_matched_point = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_matched_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_reference_point = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint preview_reference_point = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup_limit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_acceleration_lookup_limit(&_has_bits_);
          acceleration_lookup_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_pitch = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_vehicle_pitch(&_has_bits_);
          vehicle_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_epb_brake = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_epb_brake(&_has_bits_);
          is_epb_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double current_steer_interval = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_current_steer_interval(&_has_bits_);
          current_steer_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wait_steer = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_wait_steer(&_has_bits_);
          is_wait_steer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stop_reason_by_destination = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_stop_reason_by_destination(&_has_bits_);
          is_stop_reason_by_destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stop_reason_by_prdestrian = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_stop_reason_by_prdestrian(&_has_bits_);
          is_stop_reason_by_prdestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop_soft = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_full_stop_soft(&_has_bits_);
          is_full_stop_soft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double stop_acc_cmd = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_stop_acc_cmd(&_has_bits_);
          stop_acc_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.canbus.Chassis.GearPosition gear_location = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::control::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::control::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_stop_scenario = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_is_stop_scenario(&_has_bits_);
          is_stop_scenario_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double contraposition_x = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_contraposition_x(&_has_bits_);
          contraposition_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 stopstate = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_stopstate(&_has_bits_);
          stopstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_take_off_state = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_is_take_off_state(&_has_bits_);
          is_take_off_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleLongitudinalDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleLongitudinalDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double station_reference = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_station_reference(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_station_error(), target);
  }

  // optional double station_error_limited = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_station_error_limited(), target);
  }

  // optional double preview_station_error = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_preview_station_error(), target);
  }

  // optional double speed_reference = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_error(), target);
  }

  // optional double speed_controller_input_limited = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed_controller_input_limited(), target);
  }

  // optional double preview_speed_reference = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_calibration_value(), target);
  }

  // optional double throttle_cmd = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_throttle_cmd(), target);
  }

  // optional double brake_cmd = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_brake_cmd(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_full_stop = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_full_stop(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double slope_offset_compensation = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_slope_offset_compensation(), target);
  }

  // optional double current_station = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_current_station(), target);
  }

  // optional double path_remain = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_path_remain(), target);
  }

  // optional int32 pid_saturation_status = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_pid_saturation_status(), target);
  }

  // optional int32 leadlag_saturation_status = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_leadlag_saturation_status(), target);
  }

  // optional double speed_offset = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_speed_offset(), target);
  }

  // optional double current_speed = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_current_speed(), target);
  }

  // optional double acceleration_reference = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_reference(), target);
  }

  // optional double current_acceleration = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_current_acceleration(), target);
  }

  // optional double acceleration_error = 28;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_jerk_reference(), target);
  }

  // optional double current_jerk = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_current_jerk(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double jerk_error = 31;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_jerk_error(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.common.TrajectoryPoint current_matched_point = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::current_matched_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_reference_point = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::current_reference_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint preview_reference_point = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::preview_reference_point(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double acceleration_lookup_limit = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_acceleration_lookup_limit(), target);
  }

  // optional double vehicle_pitch = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_vehicle_pitch(), target);
  }

  // optional bool is_epb_brake = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_is_epb_brake(), target);
  }

  // optional double current_steer_interval = 38;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_current_steer_interval(), target);
  }

  // optional bool is_wait_steer = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_is_wait_steer(), target);
  }

  // optional bool is_stop_reason_by_destination = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_is_stop_reason_by_destination(), target);
  }

  // optional bool is_stop_reason_by_prdestrian = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_is_stop_reason_by_prdestrian(), target);
  }

  // optional bool is_full_stop_soft = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_is_full_stop_soft(), target);
  }

  // optional double stop_acc_cmd = 51;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_stop_acc_cmd(), target);
  }

  // optional .control.canbus.Chassis.GearPosition gear_location = 52;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      52, this->_internal_gear_location(), target);
  }

  // optional bool is_stop_scenario = 53;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_is_stop_scenario(), target);
  }

  // optional double contraposition_x = 54;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(54, this->_internal_contraposition_x(), target);
  }

  // optional uint32 stopstate = 55;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_stopstate(), target);
  }

  // optional bool is_take_off_state = 56;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_is_take_off_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleLongitudinalDebug)
  return target;
}

size_t SimpleLongitudinalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.SimpleLongitudinalDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.TrajectoryPoint current_matched_point = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_matched_point_);
    }

    // optional .control.common.TrajectoryPoint current_reference_point = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_reference_point_);
    }

    // optional .control.common.TrajectoryPoint preview_reference_point = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_reference_point_);
    }

    // optional double station_reference = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double station_error_limited = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double preview_station_error = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double speed_reference = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double speed_error = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limited = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_reference = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_error = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double preview_acceleration_reference = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd_closeloop = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_lookup = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double speed_lookup = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double calibration_value = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double brake_cmd = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double slope_offset_compensation = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double current_station = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double path_remain = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional int32 pid_saturation_status = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pid_saturation_status());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 leadlag_saturation_status = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_leadlag_saturation_status());
    }

    // optional double speed_offset = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double current_speed = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_reference = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double current_acceleration = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_error = 28;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_reference = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double current_jerk = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double jerk_error = 31;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup_limit = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double vehicle_pitch = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double current_steer_interval = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool is_epb_brake = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool is_wait_steer = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool is_stop_reason_by_destination = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_stop_reason_by_prdestrian = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_full_stop_soft = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_stop_scenario = 53;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_take_off_state = 56;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional double stop_acc_cmd = 51;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional .control.canbus.Chassis.GearPosition gear_location = 52;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

    // optional uint32 stopstate = 55;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stopstate());
    }

    // optional double contraposition_x = 54;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLongitudinalDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLongitudinalDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleLongitudinalDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.SimpleLongitudinalDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.SimpleLongitudinalDebug)
    MergeFrom(*source);
  }
}

void SimpleLongitudinalDebug::MergeFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_matched_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_matched_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_current_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_reference_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_preview_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_preview_reference_point());
    }
    if (cached_has_bits & 0x00000008u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00000010u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      station_error_limited_ = from.station_error_limited_;
    }
    if (cached_has_bits & 0x00000040u) {
      preview_station_error_ = from.preview_station_error_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_reference_ = from.speed_reference_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      speed_error_ = from.speed_error_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_controller_input_limited_ = from.speed_controller_input_limited_;
    }
    if (cached_has_bits & 0x00000400u) {
      preview_speed_reference_ = from.preview_speed_reference_;
    }
    if (cached_has_bits & 0x00000800u) {
      preview_speed_error_ = from.preview_speed_error_;
    }
    if (cached_has_bits & 0x00001000u) {
      preview_acceleration_reference_ = from.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x00002000u) {
      acceleration_cmd_closeloop_ = from.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x00004000u) {
      acceleration_cmd_ = from.acceleration_cmd_;
    }
    if (cached_has_bits & 0x00008000u) {
      acceleration_lookup_ = from.acceleration_lookup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      speed_lookup_ = from.speed_lookup_;
    }
    if (cached_has_bits & 0x00020000u) {
      calibration_value_ = from.calibration_value_;
    }
    if (cached_has_bits & 0x00040000u) {
      throttle_cmd_ = from.throttle_cmd_;
    }
    if (cached_has_bits & 0x00080000u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00100000u) {
      slope_offset_compensation_ = from.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x00200000u) {
      current_station_ = from.current_station_;
    }
    if (cached_has_bits & 0x00400000u) {
      path_remain_ = from.path_remain_;
    }
    if (cached_has_bits & 0x00800000u) {
      pid_saturation_status_ = from.pid_saturation_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      leadlag_saturation_status_ = from.leadlag_saturation_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      speed_offset_ = from.speed_offset_;
    }
    if (cached_has_bits & 0x04000000u) {
      current_speed_ = from.current_speed_;
    }
    if (cached_has_bits & 0x08000000u) {
      acceleration_reference_ = from.acceleration_reference_;
    }
    if (cached_has_bits & 0x10000000u) {
      current_acceleration_ = from.current_acceleration_;
    }
    if (cached_has_bits & 0x20000000u) {
      acceleration_error_ = from.acceleration_error_;
    }
    if (cached_has_bits & 0x40000000u) {
      jerk_reference_ = from.jerk_reference_;
    }
    if (cached_has_bits & 0x80000000u) {
      current_jerk_ = from.current_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      jerk_error_ = from.jerk_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_lookup_limit_ = from.acceleration_lookup_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      vehicle_pitch_ = from.vehicle_pitch_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_steer_interval_ = from.current_steer_interval_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_full_stop_ = from.is_full_stop_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_epb_brake_ = from.is_epb_brake_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_wait_steer_ = from.is_wait_steer_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_stop_reason_by_destination_ = from.is_stop_reason_by_destination_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_stop_reason_by_prdestrian_ = from.is_stop_reason_by_prdestrian_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_full_stop_soft_ = from.is_full_stop_soft_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_stop_scenario_ = from.is_stop_scenario_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_take_off_state_ = from.is_take_off_state_;
    }
    if (cached_has_bits & 0x00001000u) {
      stop_acc_cmd_ = from.stop_acc_cmd_;
    }
    if (cached_has_bits & 0x00002000u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00004000u) {
      stopstate_ = from.stopstate_;
    }
    if (cached_has_bits & 0x00008000u) {
      contraposition_x_ = from.contraposition_x_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SimpleLongitudinalDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLongitudinalDebug::CopyFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalDebug::IsInitialized() const {
  return true;
}

void SimpleLongitudinalDebug::InternalSwap(SimpleLongitudinalDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLongitudinalDebug, contraposition_x_)
      + sizeof(SimpleLongitudinalDebug::contraposition_x_)
      - PROTOBUF_FIELD_OFFSET(SimpleLongitudinalDebug, current_matched_point_)>(
          reinterpret_cast<char*>(&current_matched_point_),
          reinterpret_cast<char*>(&other->current_matched_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLongitudinalDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleLateralDebug::InitAsDefaultInstance() {
  ::control::_SimpleLateralDebug_default_instance_._instance.get_mutable()->current_target_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleLateralDebug_default_instance_._instance.get_mutable()->steer_mrac_debug_ = const_cast< ::control::MracDebug*>(
      ::control::MracDebug::internal_default_instance());
}
class SimpleLateralDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLateralDebug>()._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lateral_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ref_heading_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_heading_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ref_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_heading_error_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ref_heading_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_heading_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_heading_error_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_lateral_error_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_heading_error_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::control::common::TrajectoryPoint& current_target_point(const SimpleLateralDebug* msg);
  static void set_has_current_target_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steer_angle_feedback_augment(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::control::MracDebug& steer_mrac_debug(const SimpleLateralDebug* msg);
  static void set_has_steer_mrac_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steer_mrac_enable_status(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_lateral_centripetal_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_preview_pos_curvature(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_preview_heading_error(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::control::common::TrajectoryPoint&
SimpleLateralDebug::_Internal::current_target_point(const SimpleLateralDebug* msg) {
  return *msg->current_target_point_;
}
const ::control::MracDebug&
SimpleLateralDebug::_Internal::steer_mrac_debug(const SimpleLateralDebug* msg) {
  return *msg->steer_mrac_debug_;
}
void SimpleLateralDebug::clear_current_target_point() {
  if (current_target_point_ != nullptr) current_target_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SimpleLateralDebug::SimpleLateralDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleLateralDebug)
}
SimpleLateralDebug::SimpleLateralDebug(const SimpleLateralDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_target_point()) {
    current_target_point_ = new ::control::common::TrajectoryPoint(*from.current_target_point_);
  } else {
    current_target_point_ = nullptr;
  }
  if (from._internal_has_steer_mrac_debug()) {
    steer_mrac_debug_ = new ::control::MracDebug(*from.steer_mrac_debug_);
  } else {
    steer_mrac_debug_ = nullptr;
  }
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_pos_curvature_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(preview_pos_curvature_));
  // @@protoc_insertion_point(copy_constructor:control.SimpleLateralDebug)
}

void SimpleLateralDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  ::memset(&current_target_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_pos_curvature_) -
      reinterpret_cast<char*>(&current_target_point_)) + sizeof(preview_pos_curvature_));
}

SimpleLateralDebug::~SimpleLateralDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleLateralDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleLateralDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_target_point_;
  if (this != internal_default_instance()) delete steer_mrac_debug_;
}

void SimpleLateralDebug::ArenaDtor(void* object) {
  SimpleLateralDebug* _this = reinterpret_cast< SimpleLateralDebug* >(object);
  (void)_this;
}
void SimpleLateralDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleLateralDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleLateralDebug& SimpleLateralDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleLateralDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void SimpleLateralDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleLateralDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(current_target_point_ != nullptr);
      current_target_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(steer_mrac_debug_ != nullptr);
      steer_mrac_debug_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lateral_error_rate_) -
        reinterpret_cast<char*>(&lateral_error_)) + sizeof(lateral_error_rate_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&curvature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_feedback_) -
        reinterpret_cast<char*>(&curvature_)) + sizeof(steer_angle_feedback_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&steering_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ref_heading_acceleration_) -
        reinterpret_cast<char*>(&steering_position_)) + sizeof(ref_heading_acceleration_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&heading_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_feedback_augment_) -
        reinterpret_cast<char*>(&heading_acceleration_)) + sizeof(steer_angle_feedback_augment_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&lateral_centripetal_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_pos_curvature_) -
        reinterpret_cast<char*>(&lateral_centripetal_acceleration_)) + sizeof(preview_pos_curvature_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLateralDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lateral_error(&_has_bits_);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ref_heading(&_has_bits_);
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&_has_bits_);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading_error(&_has_bits_);
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&_has_bits_);
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&_has_bits_);
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_curvature(&_has_bits_);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steer_angle(&_has_bits_);
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&_has_bits_);
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&_has_bits_);
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&_has_bits_);
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&_has_bits_);
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&_has_bits_);
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&_has_bits_);
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_steering_position(&_has_bits_);
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_ref_speed(&_has_bits_);
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&_has_bits_);
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_acceleration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lateral_acceleration(&_has_bits_);
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_jerk = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_lateral_jerk(&_has_bits_);
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_rate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_ref_heading_rate(&_has_bits_);
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_rate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_heading_rate(&_has_bits_);
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_acceleration = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_ref_heading_acceleration(&_has_bits_);
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_acceleration = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_heading_acceleration(&_has_bits_);
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_acceleration = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_heading_error_acceleration(&_has_bits_);
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_jerk = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_ref_heading_jerk(&_has_bits_);
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_jerk = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_heading_jerk(&_has_bits_);
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_jerk = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_heading_error_jerk(&_has_bits_);
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_feedback = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_lateral_error_feedback(&_has_bits_);
          lateral_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_feedback = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_heading_error_feedback(&_has_bits_);
          heading_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_target_point = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_target_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback_augment = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_steer_angle_feedback_augment(&_has_bits_);
          steer_angle_feedback_augment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.MracDebug steer_mrac_debug = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_mrac_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steer_mrac_enable_status = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steer_mrac_enable_status(&_has_bits_);
          steer_mrac_enable_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lateral_centripetal_acceleration = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lateral_centripetal_acceleration(&_has_bits_);
          lateral_centripetal_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_pos_curvature = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_preview_pos_curvature(&_has_bits_);
          preview_pos_curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float preview_heading_error = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_preview_heading_error(&_has_bits_);
          preview_heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleLateralDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleLateralDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // optional double lateral_acceleration = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lateral_acceleration(), target);
  }

  // optional double lateral_jerk = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_heading_error_jerk(), target);
  }

  // optional double lateral_error_feedback = 28;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_lateral_error_feedback(), target);
  }

  // optional double heading_error_feedback = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_heading_error_feedback(), target);
  }

  // optional .control.common.TrajectoryPoint current_target_point = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::current_target_point(this), target, stream);
  }

  // optional double steer_angle_feedback_augment = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_angle_feedback_augment(), target);
  }

  // optional .control.MracDebug steer_mrac_debug = 32;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::steer_mrac_debug(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool steer_mrac_enable_status = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_steer_mrac_enable_status(), target);
  }

  // optional double lateral_centripetal_acceleration = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_lateral_centripetal_acceleration(), target);
  }

  // optional double preview_pos_curvature = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_preview_pos_curvature(), target);
  }

  // optional float preview_heading_error = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_preview_heading_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleLateralDebug)
  return target;
}

size_t SimpleLateralDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.SimpleLateralDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.TrajectoryPoint current_target_point = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_target_point_);
    }

    // optional .control.MracDebug steer_mrac_debug = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steer_mrac_debug_);
    }

    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double curvature = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steering_position = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_acceleration = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_jerk = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_rate = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double heading_rate = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_acceleration = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double heading_acceleration = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_acceleration = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_jerk = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_jerk = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_jerk = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_error_feedback = 28;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_feedback = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedback_augment = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional double lateral_centripetal_acceleration = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional bool steer_mrac_enable_status = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional float preview_heading_error = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional double preview_pos_curvature = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLateralDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLateralDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleLateralDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.SimpleLateralDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.SimpleLateralDebug)
    MergeFrom(*source);
  }
}

void SimpleLateralDebug::MergeFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_target_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_target_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_steer_mrac_debug()->::control::MracDebug::MergeFrom(from._internal_steer_mrac_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_error_ = from.heading_error_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000200u) {
      steer_angle_ = from.steer_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00008000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      steering_position_ = from.steering_position_;
    }
    if (cached_has_bits & 0x00020000u) {
      ref_speed_ = from.ref_speed_;
    }
    if (cached_has_bits & 0x00040000u) {
      steer_angle_limited_ = from.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00080000u) {
      lateral_acceleration_ = from.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00100000u) {
      lateral_jerk_ = from.lateral_jerk_;
    }
    if (cached_has_bits & 0x00200000u) {
      ref_heading_rate_ = from.ref_heading_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      heading_rate_ = from.heading_rate_;
    }
    if (cached_has_bits & 0x00800000u) {
      ref_heading_acceleration_ = from.ref_heading_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      heading_acceleration_ = from.heading_acceleration_;
    }
    if (cached_has_bits & 0x02000000u) {
      heading_error_acceleration_ = from.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x04000000u) {
      ref_heading_jerk_ = from.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x08000000u) {
      heading_jerk_ = from.heading_jerk_;
    }
    if (cached_has_bits & 0x10000000u) {
      heading_error_jerk_ = from.heading_error_jerk_;
    }
    if (cached_has_bits & 0x20000000u) {
      lateral_error_feedback_ = from.lateral_error_feedback_;
    }
    if (cached_has_bits & 0x40000000u) {
      heading_error_feedback_ = from.heading_error_feedback_;
    }
    if (cached_has_bits & 0x80000000u) {
      steer_angle_feedback_augment_ = from.steer_angle_feedback_augment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lateral_centripetal_acceleration_ = from.lateral_centripetal_acceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_mrac_enable_status_ = from.steer_mrac_enable_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      preview_heading_error_ = from.preview_heading_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      preview_pos_curvature_ = from.preview_pos_curvature_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SimpleLateralDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLateralDebug::CopyFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralDebug::IsInitialized() const {
  return true;
}

void SimpleLateralDebug::InternalSwap(SimpleLateralDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLateralDebug, preview_pos_curvature_)
      + sizeof(SimpleLateralDebug::preview_pos_curvature_)
      - PROTOBUF_FIELD_OFFSET(SimpleLateralDebug, current_target_point_)>(
          reinterpret_cast<char*>(&current_target_point_),
          reinterpret_cast<char*>(&other->current_target_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLateralDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleMPCDebug::InitAsDefaultInstance() {
  ::control::_SimpleMPCDebug_default_instance_._instance.get_mutable()->current_matched_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleMPCDebug_default_instance_._instance.get_mutable()->current_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
  ::control::_SimpleMPCDebug_default_instance_._instance.get_mutable()->preview_reference_point_ = const_cast< ::control::common::TrajectoryPoint*>(
      ::control::common::TrajectoryPoint::internal_default_instance());
}
class SimpleMPCDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleMPCDebug>()._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_station_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_speed_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_steer_unconstrained_control_diff(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_steer_angle_feedforward_compensation(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_lateral_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ref_heading_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_heading_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ref_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_heading_error_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_ref_heading_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_heading_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_heading_error_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_acceleration_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_acceleration_error(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_jerk_reference(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_jerk_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_jerk_error(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_lateral_error_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_heading_error_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_steer_angle_feedback_augment(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::control::common::TrajectoryPoint& current_matched_point(const SimpleMPCDebug* msg);
  static void set_has_current_matched_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::common::TrajectoryPoint& current_reference_point(const SimpleMPCDebug* msg);
  static void set_has_current_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::common::TrajectoryPoint& preview_reference_point(const SimpleMPCDebug* msg);
  static void set_has_preview_reference_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preview_station_error(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_preview_speed_reference(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_preview_speed_error(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_preview_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_vehicle_pitch(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_slope_offset_compensation(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_path_remain(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_acceleration_lookup_offset(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_acceleration_vrf(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
};

const ::control::common::TrajectoryPoint&
SimpleMPCDebug::_Internal::current_matched_point(const SimpleMPCDebug* msg) {
  return *msg->current_matched_point_;
}
const ::control::common::TrajectoryPoint&
SimpleMPCDebug::_Internal::current_reference_point(const SimpleMPCDebug* msg) {
  return *msg->current_reference_point_;
}
const ::control::common::TrajectoryPoint&
SimpleMPCDebug::_Internal::preview_reference_point(const SimpleMPCDebug* msg) {
  return *msg->preview_reference_point_;
}
void SimpleMPCDebug::clear_current_matched_point() {
  if (current_matched_point_ != nullptr) current_matched_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleMPCDebug::clear_current_reference_point() {
  if (current_reference_point_ != nullptr) current_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleMPCDebug::clear_preview_reference_point() {
  if (preview_reference_point_ != nullptr) preview_reference_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SimpleMPCDebug::SimpleMPCDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_q_updated_(arena),
  matrix_r_updated_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.SimpleMPCDebug)
}
SimpleMPCDebug::SimpleMPCDebug(const SimpleMPCDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matrix_q_updated_(from.matrix_q_updated_),
      matrix_r_updated_(from.matrix_r_updated_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_matched_point()) {
    current_matched_point_ = new ::control::common::TrajectoryPoint(*from.current_matched_point_);
  } else {
    current_matched_point_ = nullptr;
  }
  if (from._internal_has_current_reference_point()) {
    current_reference_point_ = new ::control::common::TrajectoryPoint(*from.current_reference_point_);
  } else {
    current_reference_point_ = nullptr;
  }
  if (from._internal_has_preview_reference_point()) {
    preview_reference_point_ = new ::control::common::TrajectoryPoint(*from.preview_reference_point_);
  } else {
    preview_reference_point_ = nullptr;
  }
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:control.SimpleMPCDebug)
}

void SimpleMPCDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  ::memset(&current_matched_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&current_matched_point_)) + sizeof(is_full_stop_));
}

SimpleMPCDebug::~SimpleMPCDebug() {
  // @@protoc_insertion_point(destructor:control.SimpleMPCDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleMPCDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_matched_point_;
  if (this != internal_default_instance()) delete current_reference_point_;
  if (this != internal_default_instance()) delete preview_reference_point_;
}

void SimpleMPCDebug::ArenaDtor(void* object) {
  SimpleMPCDebug* _this = reinterpret_cast< SimpleMPCDebug* >(object);
  (void)_this;
}
void SimpleMPCDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleMPCDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleMPCDebug& SimpleMPCDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleMPCDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void SimpleMPCDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.SimpleMPCDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_updated_.Clear();
  matrix_r_updated_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(current_matched_point_ != nullptr);
      current_matched_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_reference_point_ != nullptr);
      current_reference_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preview_reference_point_ != nullptr);
      preview_reference_point_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_error_rate_) -
        reinterpret_cast<char*>(&lateral_error_)) + sizeof(heading_error_rate_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&lateral_error_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_heading_rate_contribution_) -
        reinterpret_cast<char*>(&lateral_error_rate_)) + sizeof(steer_angle_heading_rate_contribution_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&steer_angle_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_error_) -
        reinterpret_cast<char*>(&steer_angle_feedback_)) + sizeof(speed_error_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&acceleration_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&calibration_value_) -
        reinterpret_cast<char*>(&acceleration_reference_)) + sizeof(calibration_value_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steer_unconstrained_control_diff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_acceleration_) -
        reinterpret_cast<char*>(&steer_unconstrained_control_diff_)) + sizeof(heading_acceleration_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&heading_error_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jerk_feedback_) -
        reinterpret_cast<char*>(&heading_error_acceleration_)) + sizeof(jerk_feedback_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&jerk_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_acceleration_reference_) -
        reinterpret_cast<char*>(&jerk_error_)) + sizeof(preview_acceleration_reference_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&vehicle_pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_full_stop_) -
        reinterpret_cast<char*>(&vehicle_pitch_)) + sizeof(is_full_stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleMPCDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lateral_error(&_has_bits_);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ref_heading(&_has_bits_);
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&_has_bits_);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading_error(&_has_bits_);
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&_has_bits_);
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&_has_bits_);
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_curvature(&_has_bits_);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steer_angle(&_has_bits_);
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&_has_bits_);
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&_has_bits_);
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&_has_bits_);
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&_has_bits_);
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&_has_bits_);
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&_has_bits_);
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_steering_position(&_has_bits_);
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_ref_speed(&_has_bits_);
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&_has_bits_);
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_reference = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_station_reference(&_has_bits_);
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_station_error(&_has_bits_);
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_reference = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_speed_reference(&_has_bits_);
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_error = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_speed_error(&_has_bits_);
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_reference = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_acceleration_reference(&_has_bits_);
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_full_stop(&_has_bits_);
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double station_feedback = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_station_feedback(&_has_bits_);
          station_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_feedback = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_speed_feedback(&_has_bits_);
          speed_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_acceleration_cmd_closeloop(&_has_bits_);
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_acceleration_cmd(&_has_bits_);
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_acceleration_lookup(&_has_bits_);
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_lookup = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_speed_lookup(&_has_bits_);
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double calibration_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_calibration_value(&_has_bits_);
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_unconstrained_control_diff = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_steer_unconstrained_control_diff(&_has_bits_);
          steer_unconstrained_control_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward_compensation = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_steer_angle_feedforward_compensation(&_has_bits_);
          steer_angle_feedforward_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_q_updated = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_q_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<265>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q_updated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_r_updated = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_r_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<273>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_r_updated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lateral_acceleration = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lateral_acceleration(&_has_bits_);
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_jerk = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lateral_jerk(&_has_bits_);
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_rate = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ref_heading_rate(&_has_bits_);
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_rate = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_heading_rate(&_has_bits_);
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_acceleration = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_ref_heading_acceleration(&_has_bits_);
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_acceleration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_heading_acceleration(&_has_bits_);
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_acceleration = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_heading_error_acceleration(&_has_bits_);
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_jerk = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_ref_heading_jerk(&_has_bits_);
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_jerk = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_heading_jerk(&_has_bits_);
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_jerk = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_heading_error_jerk(&_has_bits_);
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_feedback = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_acceleration_feedback(&_has_bits_);
          acceleration_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_error = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_acceleration_error(&_has_bits_);
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_reference = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_jerk_reference(&_has_bits_);
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_feedback = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_jerk_feedback(&_has_bits_);
          jerk_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_error = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_jerk_error(&_has_bits_);
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_feedback = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lateral_error_feedback(&_has_bits_);
          lateral_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_feedback = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_heading_error_feedback(&_has_bits_);
          heading_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback_augment = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_steer_angle_feedback_augment(&_has_bits_);
          steer_angle_feedback_augment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_matched_point = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_matched_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint current_reference_point = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.common.TrajectoryPoint preview_reference_point = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_reference_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double preview_station_error = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_preview_station_error(&_has_bits_);
          preview_station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_reference = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_preview_speed_reference(&_has_bits_);
          preview_speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_error = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_preview_speed_error(&_has_bits_);
          preview_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_acceleration_reference = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_preview_acceleration_reference(&_has_bits_);
          preview_acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_pitch = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_vehicle_pitch(&_has_bits_);
          vehicle_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double slope_offset_compensation = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_slope_offset_compensation(&_has_bits_);
          slope_offset_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_remain = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_path_remain(&_has_bits_);
          path_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup_offset = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_acceleration_lookup_offset(&_has_bits_);
          acceleration_lookup_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_vrf = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_acceleration_vrf(&_has_bits_);
          acceleration_vrf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleMPCDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.SimpleMPCDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // optional double station_reference = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_station_reference(), target);
  }

  // optional double station_error = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_station_error(), target);
  }

  // optional double speed_reference = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_speed_error(), target);
  }

  // optional double acceleration_reference = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_acceleration_reference(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_full_stop = 23;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_is_full_stop(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double station_feedback = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_station_feedback(), target);
  }

  // optional double speed_feedback = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_speed_feedback(), target);
  }

  // optional double acceleration_cmd_closeloop = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 28;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_calibration_value(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double steer_unconstrained_control_diff = 31;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_unconstrained_control_diff(), target);
  }

  // optional double steer_angle_feedforward_compensation = 32;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_steer_angle_feedforward_compensation(), target);
  }

  // repeated double matrix_q_updated = 33;
  for (int i = 0, n = this->_internal_matrix_q_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_matrix_q_updated(i), target);
  }

  // repeated double matrix_r_updated = 34;
  for (int i = 0, n = this->_internal_matrix_r_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_matrix_r_updated(i), target);
  }

  // optional double lateral_acceleration = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_lateral_acceleration(), target);
  }

  // optional double lateral_jerk = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 44;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_heading_error_jerk(), target);
  }

  // optional double acceleration_feedback = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_acceleration_feedback(), target);
  }

  // optional double acceleration_error = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 47;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_jerk_reference(), target);
  }

  // optional double jerk_feedback = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->_internal_jerk_feedback(), target);
  }

  // optional double jerk_error = 49;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_jerk_error(), target);
  }

  // optional double lateral_error_feedback = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_lateral_error_feedback(), target);
  }

  // optional double heading_error_feedback = 51;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_heading_error_feedback(), target);
  }

  // optional double steer_angle_feedback_augment = 52;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(52, this->_internal_steer_angle_feedback_augment(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .control.common.TrajectoryPoint current_matched_point = 53;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::current_matched_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint current_reference_point = 54;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::current_reference_point(this), target, stream);
  }

  // optional .control.common.TrajectoryPoint preview_reference_point = 55;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::preview_reference_point(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional double preview_station_error = 56;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(56, this->_internal_preview_station_error(), target);
  }

  // optional double preview_speed_reference = 57;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(57, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 58;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(58, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 59;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(59, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double vehicle_pitch = 60;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(60, this->_internal_vehicle_pitch(), target);
  }

  // optional double slope_offset_compensation = 61;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(61, this->_internal_slope_offset_compensation(), target);
  }

  // optional double path_remain = 62;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(62, this->_internal_path_remain(), target);
  }

  // optional double acceleration_lookup_offset = 63;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(63, this->_internal_acceleration_lookup_offset(), target);
  }

  // optional double acceleration_vrf = 64;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(64, this->_internal_acceleration_vrf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.SimpleMPCDebug)
  return target;
}

size_t SimpleMPCDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.SimpleMPCDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q_updated = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_q_updated_size());
    total_size += data_size;
  }

  // repeated double matrix_r_updated = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_r_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_r_updated_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .control.common.TrajectoryPoint current_matched_point = 53;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_matched_point_);
    }

    // optional .control.common.TrajectoryPoint current_reference_point = 54;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_reference_point_);
    }

    // optional .control.common.TrajectoryPoint preview_reference_point = 55;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_reference_point_);
    }

    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double station_reference = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double station_error = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double speed_reference = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double speed_error = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double acceleration_reference = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double station_feedback = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double speed_feedback = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd_closeloop = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup = 28;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double speed_lookup = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double calibration_value = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double steer_unconstrained_control_diff = 31;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedforward_compensation = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double lateral_acceleration = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double lateral_jerk = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_rate = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double heading_rate = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_acceleration = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double heading_acceleration = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading_error_acceleration = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_jerk = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double heading_jerk = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_jerk = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_feedback = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_error = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_reference = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_feedback = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double jerk_error = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_error_feedback = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_feedback = 51;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedback_augment = 52;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double preview_station_error = 56;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double preview_speed_reference = 57;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double preview_speed_error = 58;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double preview_acceleration_reference = 59;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional double vehicle_pitch = 60;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double slope_offset_compensation = 61;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double path_remain = 62;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup_offset = 63;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_vrf = 64;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 23;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleMPCDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleMPCDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleMPCDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.SimpleMPCDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.SimpleMPCDebug)
    MergeFrom(*source);
  }
}

void SimpleMPCDebug::MergeFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_updated_.MergeFrom(from.matrix_q_updated_);
  matrix_r_updated_.MergeFrom(from.matrix_r_updated_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_matched_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_matched_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_current_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_current_reference_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_preview_reference_point()->::control::common::TrajectoryPoint::MergeFrom(from._internal_preview_reference_point());
    }
    if (cached_has_bits & 0x00000008u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_error_ = from.heading_error_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000400u) {
      steer_angle_ = from.steer_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00008000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00020000u) {
      steering_position_ = from.steering_position_;
    }
    if (cached_has_bits & 0x00040000u) {
      ref_speed_ = from.ref_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      steer_angle_limited_ = from.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00100000u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00200000u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00400000u) {
      speed_reference_ = from.speed_reference_;
    }
    if (cached_has_bits & 0x00800000u) {
      speed_error_ = from.speed_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      acceleration_reference_ = from.acceleration_reference_;
    }
    if (cached_has_bits & 0x02000000u) {
      station_feedback_ = from.station_feedback_;
    }
    if (cached_has_bits & 0x04000000u) {
      speed_feedback_ = from.speed_feedback_;
    }
    if (cached_has_bits & 0x08000000u) {
      acceleration_cmd_closeloop_ = from.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x10000000u) {
      acceleration_cmd_ = from.acceleration_cmd_;
    }
    if (cached_has_bits & 0x20000000u) {
      acceleration_lookup_ = from.acceleration_lookup_;
    }
    if (cached_has_bits & 0x40000000u) {
      speed_lookup_ = from.speed_lookup_;
    }
    if (cached_has_bits & 0x80000000u) {
      calibration_value_ = from.calibration_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steer_unconstrained_control_diff_ = from.steer_unconstrained_control_diff_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_angle_feedforward_compensation_ = from.steer_angle_feedforward_compensation_;
    }
    if (cached_has_bits & 0x00000004u) {
      lateral_acceleration_ = from.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00000008u) {
      lateral_jerk_ = from.lateral_jerk_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_heading_rate_ = from.ref_heading_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_rate_ = from.heading_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      ref_heading_acceleration_ = from.ref_heading_acceleration_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_acceleration_ = from.heading_acceleration_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      heading_error_acceleration_ = from.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x00000200u) {
      ref_heading_jerk_ = from.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x00000400u) {
      heading_jerk_ = from.heading_jerk_;
    }
    if (cached_has_bits & 0x00000800u) {
      heading_error_jerk_ = from.heading_error_jerk_;
    }
    if (cached_has_bits & 0x00001000u) {
      acceleration_feedback_ = from.acceleration_feedback_;
    }
    if (cached_has_bits & 0x00002000u) {
      acceleration_error_ = from.acceleration_error_;
    }
    if (cached_has_bits & 0x00004000u) {
      jerk_reference_ = from.jerk_reference_;
    }
    if (cached_has_bits & 0x00008000u) {
      jerk_feedback_ = from.jerk_feedback_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      jerk_error_ = from.jerk_error_;
    }
    if (cached_has_bits & 0x00020000u) {
      lateral_error_feedback_ = from.lateral_error_feedback_;
    }
    if (cached_has_bits & 0x00040000u) {
      heading_error_feedback_ = from.heading_error_feedback_;
    }
    if (cached_has_bits & 0x00080000u) {
      steer_angle_feedback_augment_ = from.steer_angle_feedback_augment_;
    }
    if (cached_has_bits & 0x00100000u) {
      preview_station_error_ = from.preview_station_error_;
    }
    if (cached_has_bits & 0x00200000u) {
      preview_speed_reference_ = from.preview_speed_reference_;
    }
    if (cached_has_bits & 0x00400000u) {
      preview_speed_error_ = from.preview_speed_error_;
    }
    if (cached_has_bits & 0x00800000u) {
      preview_acceleration_reference_ = from.preview_acceleration_reference_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      vehicle_pitch_ = from.vehicle_pitch_;
    }
    if (cached_has_bits & 0x02000000u) {
      slope_offset_compensation_ = from.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x04000000u) {
      path_remain_ = from.path_remain_;
    }
    if (cached_has_bits & 0x08000000u) {
      acceleration_lookup_offset_ = from.acceleration_lookup_offset_;
    }
    if (cached_has_bits & 0x10000000u) {
      acceleration_vrf_ = from.acceleration_vrf_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_full_stop_ = from.is_full_stop_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SimpleMPCDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMPCDebug::CopyFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCDebug::IsInitialized() const {
  return true;
}

void SimpleMPCDebug::InternalSwap(SimpleMPCDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  matrix_q_updated_.InternalSwap(&other->matrix_q_updated_);
  matrix_r_updated_.InternalSwap(&other->matrix_r_updated_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleMPCDebug, is_full_stop_)
      + sizeof(SimpleMPCDebug::is_full_stop_)
      - PROTOBUF_FIELD_OFFSET(SimpleMPCDebug, current_matched_point_)>(
          reinterpret_cast<char*>(&current_matched_point_),
          reinterpret_cast<char*>(&other->current_matched_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMPCDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MracDebug::InitAsDefaultInstance() {
  ::control::_MracDebug_default_instance_._instance.get_mutable()->mrac_adaptive_gain_ = const_cast< ::control::MracAdaptiveGain*>(
      ::control::MracAdaptiveGain::internal_default_instance());
}
class MracDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<MracDebug>()._has_bits_);
  static void set_has_mrac_model_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::MracAdaptiveGain& mrac_adaptive_gain(const MracDebug* msg);
  static void set_has_mrac_adaptive_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mrac_reference_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mrac_control_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::control::MracAdaptiveGain&
MracDebug::_Internal::mrac_adaptive_gain(const MracDebug* msg) {
  return *msg->mrac_adaptive_gain_;
}
MracDebug::MracDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mrac_reference_state_(arena),
  mrac_state_error_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.MracDebug)
}
MracDebug::MracDebug(const MracDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mrac_reference_state_(from.mrac_reference_state_),
      mrac_state_error_(from.mrac_state_error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mrac_adaptive_gain()) {
    mrac_adaptive_gain_ = new ::control::MracAdaptiveGain(*from.mrac_adaptive_gain_);
  } else {
    mrac_adaptive_gain_ = nullptr;
  }
  ::memcpy(&mrac_model_order_, &from.mrac_model_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&mrac_control_saturation_status_) -
    reinterpret_cast<char*>(&mrac_model_order_)) + sizeof(mrac_control_saturation_status_));
  // @@protoc_insertion_point(copy_constructor:control.MracDebug)
}

void MracDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  ::memset(&mrac_adaptive_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mrac_control_saturation_status_) -
      reinterpret_cast<char*>(&mrac_adaptive_gain_)) + sizeof(mrac_control_saturation_status_));
}

MracDebug::~MracDebug() {
  // @@protoc_insertion_point(destructor:control.MracDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MracDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mrac_adaptive_gain_;
}

void MracDebug::ArenaDtor(void* object) {
  MracDebug* _this = reinterpret_cast< MracDebug* >(object);
  (void)_this;
}
void MracDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MracDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MracDebug& MracDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MracDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void MracDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.MracDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mrac_reference_state_.Clear();
  mrac_state_error_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mrac_adaptive_gain_ != nullptr);
    mrac_adaptive_gain_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&mrac_model_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mrac_control_saturation_status_) -
        reinterpret_cast<char*>(&mrac_model_order_)) + sizeof(mrac_control_saturation_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MracDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 mrac_model_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mrac_model_order(&has_bits);
          mrac_model_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double mrac_reference_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mrac_reference_state(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_mrac_reference_state(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double mrac_state_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mrac_state_error(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_mrac_state_error(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.MracAdaptiveGain mrac_adaptive_gain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mrac_adaptive_gain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mrac_reference_saturation_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mrac_reference_saturation_status(&has_bits);
          mrac_reference_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mrac_control_saturation_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mrac_control_saturation_status(&has_bits);
          mrac_control_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MracDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.MracDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mrac_model_order = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrac_model_order(), target);
  }

  // repeated double mrac_reference_state = 2;
  for (int i = 0, n = this->_internal_mrac_reference_state_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mrac_reference_state(i), target);
  }

  // repeated double mrac_state_error = 3;
  for (int i = 0, n = this->_internal_mrac_state_error_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mrac_state_error(i), target);
  }

  // optional .control.MracAdaptiveGain mrac_adaptive_gain = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mrac_adaptive_gain(this), target, stream);
  }

  // optional int32 mrac_reference_saturation_status = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mrac_reference_saturation_status(), target);
  }

  // optional int32 mrac_control_saturation_status = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mrac_control_saturation_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.MracDebug)
  return target;
}

size_t MracDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.MracDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double mrac_reference_state = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mrac_reference_state_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mrac_reference_state_size());
    total_size += data_size;
  }

  // repeated double mrac_state_error = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mrac_state_error_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mrac_state_error_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .control.MracAdaptiveGain mrac_adaptive_gain = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mrac_adaptive_gain_);
    }

    // optional int32 mrac_model_order = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mrac_model_order());
    }

    // optional int32 mrac_reference_saturation_status = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mrac_reference_saturation_status());
    }

    // optional int32 mrac_control_saturation_status = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mrac_control_saturation_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MracDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.MracDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const MracDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MracDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.MracDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.MracDebug)
    MergeFrom(*source);
  }
}

void MracDebug::MergeFrom(const MracDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.MracDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mrac_reference_state_.MergeFrom(from.mrac_reference_state_);
  mrac_state_error_.MergeFrom(from.mrac_state_error_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mrac_adaptive_gain()->::control::MracAdaptiveGain::MergeFrom(from._internal_mrac_adaptive_gain());
    }
    if (cached_has_bits & 0x00000002u) {
      mrac_model_order_ = from.mrac_model_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      mrac_reference_saturation_status_ = from.mrac_reference_saturation_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      mrac_control_saturation_status_ = from.mrac_control_saturation_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MracDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.MracDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MracDebug::CopyFrom(const MracDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.MracDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MracDebug::IsInitialized() const {
  return true;
}

void MracDebug::InternalSwap(MracDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mrac_reference_state_.InternalSwap(&other->mrac_reference_state_);
  mrac_state_error_.InternalSwap(&other->mrac_state_error_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MracDebug, mrac_control_saturation_status_)
      + sizeof(MracDebug::mrac_control_saturation_status_)
      - PROTOBUF_FIELD_OFFSET(MracDebug, mrac_adaptive_gain_)>(
          reinterpret_cast<char*>(&mrac_adaptive_gain_),
          reinterpret_cast<char*>(&other->mrac_adaptive_gain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MracDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MracAdaptiveGain::InitAsDefaultInstance() {
}
class MracAdaptiveGain::_Internal {
 public:
};

MracAdaptiveGain::MracAdaptiveGain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  state_adaptive_gain_(arena),
  input_adaptive_gain_(arena),
  nonlinear_adaptive_gain_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.MracAdaptiveGain)
}
MracAdaptiveGain::MracAdaptiveGain(const MracAdaptiveGain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_adaptive_gain_(from.state_adaptive_gain_),
      input_adaptive_gain_(from.input_adaptive_gain_),
      nonlinear_adaptive_gain_(from.nonlinear_adaptive_gain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:control.MracAdaptiveGain)
}

void MracAdaptiveGain::SharedCtor() {
}

MracAdaptiveGain::~MracAdaptiveGain() {
  // @@protoc_insertion_point(destructor:control.MracAdaptiveGain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MracAdaptiveGain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MracAdaptiveGain::ArenaDtor(void* object) {
  MracAdaptiveGain* _this = reinterpret_cast< MracAdaptiveGain* >(object);
  (void)_this;
}
void MracAdaptiveGain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MracAdaptiveGain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MracAdaptiveGain& MracAdaptiveGain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MracAdaptiveGain_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void MracAdaptiveGain::Clear() {
// @@protoc_insertion_point(message_clear_start:control.MracAdaptiveGain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_adaptive_gain_.Clear();
  input_adaptive_gain_.Clear();
  nonlinear_adaptive_gain_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MracAdaptiveGain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double state_adaptive_gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_state_adaptive_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_state_adaptive_gain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double input_adaptive_gain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_adaptive_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_input_adaptive_gain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double nonlinear_adaptive_gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nonlinear_adaptive_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_nonlinear_adaptive_gain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MracAdaptiveGain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.MracAdaptiveGain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double state_adaptive_gain = 1;
  for (int i = 0, n = this->_internal_state_adaptive_gain_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_state_adaptive_gain(i), target);
  }

  // repeated double input_adaptive_gain = 2;
  for (int i = 0, n = this->_internal_input_adaptive_gain_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_input_adaptive_gain(i), target);
  }

  // repeated double nonlinear_adaptive_gain = 3;
  for (int i = 0, n = this->_internal_nonlinear_adaptive_gain_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_nonlinear_adaptive_gain(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.MracAdaptiveGain)
  return target;
}

size_t MracAdaptiveGain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.MracAdaptiveGain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double state_adaptive_gain = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_state_adaptive_gain_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_adaptive_gain_size());
    total_size += data_size;
  }

  // repeated double input_adaptive_gain = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_input_adaptive_gain_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_adaptive_gain_size());
    total_size += data_size;
  }

  // repeated double nonlinear_adaptive_gain = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_nonlinear_adaptive_gain_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nonlinear_adaptive_gain_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MracAdaptiveGain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.MracAdaptiveGain)
  GOOGLE_DCHECK_NE(&from, this);
  const MracAdaptiveGain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MracAdaptiveGain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.MracAdaptiveGain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.MracAdaptiveGain)
    MergeFrom(*source);
  }
}

void MracAdaptiveGain::MergeFrom(const MracAdaptiveGain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.MracAdaptiveGain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_adaptive_gain_.MergeFrom(from.state_adaptive_gain_);
  input_adaptive_gain_.MergeFrom(from.input_adaptive_gain_);
  nonlinear_adaptive_gain_.MergeFrom(from.nonlinear_adaptive_gain_);
}

void MracAdaptiveGain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.MracAdaptiveGain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MracAdaptiveGain::CopyFrom(const MracAdaptiveGain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.MracAdaptiveGain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MracAdaptiveGain::IsInitialized() const {
  return true;
}

void MracAdaptiveGain::InternalSwap(MracAdaptiveGain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_adaptive_gain_.InternalSwap(&other->state_adaptive_gain_);
  input_adaptive_gain_.InternalSwap(&other->input_adaptive_gain_);
  nonlinear_adaptive_gain_.InternalSwap(&other->nonlinear_adaptive_gain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MracAdaptiveGain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug::InitAsDefaultInstance() {
  ::control::_Debug_default_instance_._instance.get_mutable()->simple_lon_debug_ = const_cast< ::control::SimpleLongitudinalDebug*>(
      ::control::SimpleLongitudinalDebug::internal_default_instance());
  ::control::_Debug_default_instance_._instance.get_mutable()->simple_lat_debug_ = const_cast< ::control::SimpleLateralDebug*>(
      ::control::SimpleLateralDebug::internal_default_instance());
  ::control::_Debug_default_instance_._instance.get_mutable()->input_debug_ = const_cast< ::control::InputDebug*>(
      ::control::InputDebug::internal_default_instance());
  ::control::_Debug_default_instance_._instance.get_mutable()->simple_mpc_debug_ = const_cast< ::control::SimpleMPCDebug*>(
      ::control::SimpleMPCDebug::internal_default_instance());
  ::control::_Debug_default_instance_._instance.get_mutable()->lodmc_debug_ = const_cast< ::control::LodmcDebug*>(
      ::control::LodmcDebug::internal_default_instance());
}
class Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug>()._has_bits_);
  static const ::control::SimpleLongitudinalDebug& simple_lon_debug(const Debug* msg);
  static void set_has_simple_lon_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::control::SimpleLateralDebug& simple_lat_debug(const Debug* msg);
  static void set_has_simple_lat_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::control::InputDebug& input_debug(const Debug* msg);
  static void set_has_input_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::control::SimpleMPCDebug& simple_mpc_debug(const Debug* msg);
  static void set_has_simple_mpc_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::control::LodmcDebug& lodmc_debug(const Debug* msg);
  static void set_has_lodmc_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::control::SimpleLongitudinalDebug&
Debug::_Internal::simple_lon_debug(const Debug* msg) {
  return *msg->simple_lon_debug_;
}
const ::control::SimpleLateralDebug&
Debug::_Internal::simple_lat_debug(const Debug* msg) {
  return *msg->simple_lat_debug_;
}
const ::control::InputDebug&
Debug::_Internal::input_debug(const Debug* msg) {
  return *msg->input_debug_;
}
const ::control::SimpleMPCDebug&
Debug::_Internal::simple_mpc_debug(const Debug* msg) {
  return *msg->simple_mpc_debug_;
}
const ::control::LodmcDebug&
Debug::_Internal::lodmc_debug(const Debug* msg) {
  return *msg->lodmc_debug_;
}
void Debug::clear_input_debug() {
  if (input_debug_ != nullptr) input_debug_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Debug::Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.Debug)
}
Debug::Debug(const Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simple_lon_debug()) {
    simple_lon_debug_ = new ::control::SimpleLongitudinalDebug(*from.simple_lon_debug_);
  } else {
    simple_lon_debug_ = nullptr;
  }
  if (from._internal_has_simple_lat_debug()) {
    simple_lat_debug_ = new ::control::SimpleLateralDebug(*from.simple_lat_debug_);
  } else {
    simple_lat_debug_ = nullptr;
  }
  if (from._internal_has_input_debug()) {
    input_debug_ = new ::control::InputDebug(*from.input_debug_);
  } else {
    input_debug_ = nullptr;
  }
  if (from._internal_has_simple_mpc_debug()) {
    simple_mpc_debug_ = new ::control::SimpleMPCDebug(*from.simple_mpc_debug_);
  } else {
    simple_mpc_debug_ = nullptr;
  }
  if (from._internal_has_lodmc_debug()) {
    lodmc_debug_ = new ::control::LodmcDebug(*from.lodmc_debug_);
  } else {
    lodmc_debug_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:control.Debug)
}

void Debug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  ::memset(&simple_lon_debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lodmc_debug_) -
      reinterpret_cast<char*>(&simple_lon_debug_)) + sizeof(lodmc_debug_));
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:control.Debug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete simple_lon_debug_;
  if (this != internal_default_instance()) delete simple_lat_debug_;
  if (this != internal_default_instance()) delete input_debug_;
  if (this != internal_default_instance()) delete simple_mpc_debug_;
  if (this != internal_default_instance()) delete lodmc_debug_;
}

void Debug::ArenaDtor(void* object) {
  Debug* _this = reinterpret_cast< Debug* >(object);
  (void)_this;
}
void Debug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug& Debug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(simple_lon_debug_ != nullptr);
      simple_lon_debug_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(simple_lat_debug_ != nullptr);
      simple_lat_debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_debug_ != nullptr);
      input_debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(simple_mpc_debug_ != nullptr);
      simple_mpc_debug_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(lodmc_debug_ != nullptr);
      lodmc_debug_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .control.SimpleLongitudinalDebug simple_lon_debug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lon_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.SimpleLateralDebug simple_lat_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lat_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.InputDebug input_debug = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.SimpleMPCDebug simple_mpc_debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_mpc_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .control.LodmcDebug lodmc_debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lodmc_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simple_lon_debug(this), target, stream);
  }

  // optional .control.SimpleLateralDebug simple_lat_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::simple_lat_debug(this), target, stream);
  }

  // optional .control.InputDebug input_debug = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input_debug(this), target, stream);
  }

  // optional .control.SimpleMPCDebug simple_mpc_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::simple_mpc_debug(this), target, stream);
  }

  // optional .control.LodmcDebug lodmc_debug = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lodmc_debug(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.Debug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .control.SimpleLongitudinalDebug simple_lon_debug = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_lon_debug_);
    }

    // optional .control.SimpleLateralDebug simple_lat_debug = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_lat_debug_);
    }

    // optional .control.InputDebug input_debug = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_debug_);
    }

    // optional .control.SimpleMPCDebug simple_mpc_debug = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_mpc_debug_);
    }

    // optional .control.LodmcDebug lodmc_debug = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lodmc_debug_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.Debug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_simple_lon_debug()->::control::SimpleLongitudinalDebug::MergeFrom(from._internal_simple_lon_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_simple_lat_debug()->::control::SimpleLateralDebug::MergeFrom(from._internal_simple_lat_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_input_debug()->::control::InputDebug::MergeFrom(from._internal_input_debug());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_simple_mpc_debug()->::control::SimpleMPCDebug::MergeFrom(from._internal_simple_mpc_debug());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_lodmc_debug()->::control::LodmcDebug::MergeFrom(from._internal_lodmc_debug());
    }
  }
}

void Debug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::InternalSwap(Debug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Debug, lodmc_debug_)
      + sizeof(Debug::lodmc_debug_)
      - PROTOBUF_FIELD_OFFSET(Debug, simple_lon_debug_)>(
          reinterpret_cast<char*>(&simple_lon_debug_),
          reinterpret_cast<char*>(&other->simple_lon_debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LodmcDebug::InitAsDefaultInstance() {
}
class LodmcDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<LodmcDebug>()._has_bits_);
  static void set_has_torq_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torq_feed_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_torq_feed_back(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dmc_f_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dmc_f_air(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dmc_f_slope(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dmc_f_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_acc_error(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mass(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_target_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vehilce_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vehspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_roadslope(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_target_acc_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

LodmcDebug::LodmcDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:control.LodmcDebug)
}
LodmcDebug::LodmcDebug(const LodmcDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&torq_command_, &from.torq_command_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_acc_filter_) -
    reinterpret_cast<char*>(&torq_command_)) + sizeof(target_acc_filter_));
  // @@protoc_insertion_point(copy_constructor:control.LodmcDebug)
}

void LodmcDebug::SharedCtor() {
  ::memset(&torq_command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_acc_filter_) -
      reinterpret_cast<char*>(&torq_command_)) + sizeof(target_acc_filter_));
}

LodmcDebug::~LodmcDebug() {
  // @@protoc_insertion_point(destructor:control.LodmcDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LodmcDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LodmcDebug::ArenaDtor(void* object) {
  LodmcDebug* _this = reinterpret_cast< LodmcDebug* >(object);
  (void)_this;
}
void LodmcDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LodmcDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LodmcDebug& LodmcDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LodmcDebug_control_5fmsgs_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void LodmcDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:control.LodmcDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&torq_command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_error_) -
        reinterpret_cast<char*>(&torq_command_)) + sizeof(acc_error_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&mass_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_acc_filter_) -
        reinterpret_cast<char*>(&mass_)) + sizeof(target_acc_filter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LodmcDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double torq_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_torq_command(&has_bits);
          torq_command_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double torq_feed_forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_torq_feed_forward(&has_bits);
          torq_feed_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double torq_feed_back = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_torq_feed_back(&has_bits);
          torq_feed_back_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dmc_f_roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_dmc_f_roll(&has_bits);
          dmc_f_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dmc_f_air = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_dmc_f_air(&has_bits);
          dmc_f_air_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dmc_f_slope = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_dmc_f_slope(&has_bits);
          dmc_f_slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dmc_f_acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_dmc_f_acc(&has_bits);
          dmc_f_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_error = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_acc_error(&has_bits);
          acc_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mass = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_mass(&has_bits);
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double target_acc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_target_acc(&has_bits);
          target_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehilce_acc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_vehilce_acc(&has_bits);
          vehilce_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehspeed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_vehspeed(&has_bits);
          vehspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roadslope = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_roadslope(&has_bits);
          roadslope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double target_acc_filter = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_target_acc_filter(&has_bits);
          target_acc_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LodmcDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:control.LodmcDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torq_command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_torq_command(), target);
  }

  // optional double torq_feed_forward = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_torq_feed_forward(), target);
  }

  // optional double torq_feed_back = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_torq_feed_back(), target);
  }

  // optional double dmc_f_roll = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dmc_f_roll(), target);
  }

  // optional double dmc_f_air = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_dmc_f_air(), target);
  }

  // optional double dmc_f_slope = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_dmc_f_slope(), target);
  }

  // optional double dmc_f_acc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dmc_f_acc(), target);
  }

  // optional double acc_error = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acc_error(), target);
  }

  // optional double mass = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_mass(), target);
  }

  // optional double target_acc = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_target_acc(), target);
  }

  // optional double vehilce_acc = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_vehilce_acc(), target);
  }

  // optional double vehspeed = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_vehspeed(), target);
  }

  // optional double roadslope = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_roadslope(), target);
  }

  // optional double target_acc_filter = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_target_acc_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:control.LodmcDebug)
  return target;
}

size_t LodmcDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:control.LodmcDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double torq_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torq_feed_forward = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double torq_feed_back = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double dmc_f_roll = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double dmc_f_air = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double dmc_f_slope = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double dmc_f_acc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double acc_error = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double mass = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double target_acc = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double vehilce_acc = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double vehspeed = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double roadslope = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double target_acc_filter = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LodmcDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:control.LodmcDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const LodmcDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LodmcDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:control.LodmcDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:control.LodmcDebug)
    MergeFrom(*source);
  }
}

void LodmcDebug::MergeFrom(const LodmcDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:control.LodmcDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      torq_command_ = from.torq_command_;
    }
    if (cached_has_bits & 0x00000002u) {
      torq_feed_forward_ = from.torq_feed_forward_;
    }
    if (cached_has_bits & 0x00000004u) {
      torq_feed_back_ = from.torq_feed_back_;
    }
    if (cached_has_bits & 0x00000008u) {
      dmc_f_roll_ = from.dmc_f_roll_;
    }
    if (cached_has_bits & 0x00000010u) {
      dmc_f_air_ = from.dmc_f_air_;
    }
    if (cached_has_bits & 0x00000020u) {
      dmc_f_slope_ = from.dmc_f_slope_;
    }
    if (cached_has_bits & 0x00000040u) {
      dmc_f_acc_ = from.dmc_f_acc_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_error_ = from.acc_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      mass_ = from.mass_;
    }
    if (cached_has_bits & 0x00000200u) {
      target_acc_ = from.target_acc_;
    }
    if (cached_has_bits & 0x00000400u) {
      vehilce_acc_ = from.vehilce_acc_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehspeed_ = from.vehspeed_;
    }
    if (cached_has_bits & 0x00001000u) {
      roadslope_ = from.roadslope_;
    }
    if (cached_has_bits & 0x00002000u) {
      target_acc_filter_ = from.target_acc_filter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LodmcDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:control.LodmcDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LodmcDebug::CopyFrom(const LodmcDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:control.LodmcDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LodmcDebug::IsInitialized() const {
  return true;
}

void LodmcDebug::InternalSwap(LodmcDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LodmcDebug, target_acc_filter_)
      + sizeof(LodmcDebug::target_acc_filter_)
      - PROTOBUF_FIELD_OFFSET(LodmcDebug, torq_command_)>(
          reinterpret_cast<char*>(&torq_command_),
          reinterpret_cast<char*>(&other->torq_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LodmcDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::control::LatencyStats* Arena::CreateMaybeMessage< ::control::LatencyStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::LatencyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::control::ControlCommand* Arena::CreateMaybeMessage< ::control::ControlCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::ControlCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::control::SimpleLongitudinalDebug* Arena::CreateMaybeMessage< ::control::SimpleLongitudinalDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::SimpleLongitudinalDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::SimpleLateralDebug* Arena::CreateMaybeMessage< ::control::SimpleLateralDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::SimpleLateralDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::SimpleMPCDebug* Arena::CreateMaybeMessage< ::control::SimpleMPCDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::SimpleMPCDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::MracDebug* Arena::CreateMaybeMessage< ::control::MracDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::MracDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::MracAdaptiveGain* Arena::CreateMaybeMessage< ::control::MracAdaptiveGain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::MracAdaptiveGain >(arena);
}
template<> PROTOBUF_NOINLINE ::control::Debug* Arena::CreateMaybeMessage< ::control::Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::Debug >(arena);
}
template<> PROTOBUF_NOINLINE ::control::LodmcDebug* Arena::CreateMaybeMessage< ::control::LodmcDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::control::LodmcDebug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

---
alwaysApply: true
---
已有的程序中 shantui.cc和shantui.h是进行参考的范本，不要修改其中的内容。
xugong.cc和xugong.h可以忽略
changan.cc和changan.h是主要进行修改的代码，其他部分的代码也可以根据情况进行修改。

doc/changan_protocol.dbc是长安车辆的dbc文件，也是我们需要使用的参考数据。

项目的目标：将当前程序修改为适配changan_protocol.dbc的控制方式，从而能够进行车辆控制。其中有价值的数据发送部分在为（dbc中消息需要将编号减去0x80000000后使用）：
0x18000001,  # 控制命令消息
0x18000002,  # 液压电机控制消息  
0x18000003,  # 行走电机控制消息
0x18000004,   # 机构电磁阀控制消息

有3个倾角传感器消息参考Read_angle_sensors/doc/Sense_DBC.dbc的数据
0x00000581, # 车体倾角仪（我们主要使用Y_pitch ）
0x00000582, # 大臂倾角仪（使用Y_pitch，与车体做差值得到大臂相对车身角度，但注意需要有一个0点标定）
0x00000583, # 铲斗倾角仪（使用Y_pitch，与大臂做差值得到铲斗相对大臂角度，但注意需要有一个0点标定）

有1个角度编码器，消息为
0x18FF0015, 其中byte[1]和byte[2]相连后，转为10进制数据，除以100得到角度。（但注意需要有一个0点标定）


其中，输入的数据保持不变，来自protobuf形式的ROS2消息<sa_msgs::msg::ProtoAdapter>"/vehicle_command"

需要做的工作如下：
1. 将输入的vehicle_command中的车辆速度、大臂角度、铲斗角度、转向角度进行解析。
2. 通过CAN总线读取3个倾角仪和1个转向角度编码器的数据，并将其解析为大臂角度、铲斗角度、车身转向角度数据。（当前可以保留接口，后续具体定义好CAN消息后再使用）
3. 编写4个独立的闭环控制器，根据changan_protol.dbc的消息方式，分别将实现通过车辆加速度闭环控制车速、大臂液压阀开度闭环控制大臂角度、铲斗液压阀开度闭环控制铲斗、转向液压阀开度和方向闭环控制角度。
其中acc_to_speed_controller是进行加速度到速度的闭环PID控制器。
其中valve_to_angle_controller是液压阀开度到角度的闭环PID控制器。
这两个PID控制器通过外部函数初始化进行PID参数配置和调整，参数可以在launch文件中进行修改。

4. 最后将加速度、大臂液压阀开度、铲斗液压阀开度、转向液压阀开度和方向的数据，按照changan_protocol.dbc的形式发送出去。对于CAN总线数据的处理方式，可以参考python代码doc/changan/changan/joystick-to-can-tool/can_message_parser/data_assignment.py



其中test中需要有一个测试程序：一个C++节点来发送测试，在test文件夹中的send_control_cmd.cc的代码，可以在代码中进行修改我要发送的Protobuf的控制指令，通过给定输入的数据，比如-speed 0.1 之类。通过ROS2的argument将需要动态调整的参数输入进入。通过ros2 launch cannode send_control_cmd.launch.py的方式直接启动脚本或通过launch中argument修改目标参数，该程序可用于发送固定的大臂目标角度、目标速度等功能。用于和当前的cannode形成闭环测试使用。


代码不需要编译，修改结束后任务就停止。